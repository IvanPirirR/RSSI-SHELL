
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   0:	200053e0 	.word	0x200053e0
   4:	00014879 	.word	0x00014879

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   8:	00020a75 	.word	0x00020a75
   c:	0001484d 	.word	0x0001484d
	(void)memset(res + 3, 0, 13);
  10:	0001484d 	.word	0x0001484d
  14:	0001484d 	.word	0x0001484d
  18:	0001484d 	.word	0x0001484d
	...
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
  2c:	00014129 	.word	0x00014129
  30:	0001484d 	.word	0x0001484d

	return 0;
}
  34:	00000000 	.word	0x00000000
  38:	000140d1 	.word	0x000140d1
  3c:	0001484d 	.word	0x0001484d

00000040 <_irq_vector_table>:
  40:	000141e5 00022699 000141e5 000141e5     .A...&...A...A..
  50:	000141e5 000141e5 000141e5 000141e5     .A...A...A...A..
  60:	00022661 000141e5 000141e5 0002267f     a&...A...A...&..
  70:	000141e5 000141e5 000141e5 000141e5     .A...A...A...A..
  80:	000141e5 000141e5 000141e5 000141e5     .A...A...A...A..
  90:	000141e5 000141e5 000141e5 000141e5     .A...A...A...A..
  a0:	000141e5 000141e5 000141e5 000141e5     .A...A...A...A..
  b0:	000141e5 000141e5 000141e5 000141e5     .A...A...A...A..
  c0:	000141e5 000141e5 000141e5 000141e5     .A...A...A...A..
  d0:	000141e5 000141e5 000141e5              .A...A...A..

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295
      ec:	f04f 30ff 	movne.w	r0, #4294967295
      f0:	f000 b96c 	b.w	3cc <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f806 	bl	10c <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__udivmoddi4>:
     10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     110:	9e08      	ldr	r6, [sp, #32]
     112:	460d      	mov	r5, r1
     114:	4604      	mov	r4, r0
     116:	468e      	mov	lr, r1
     118:	2b00      	cmp	r3, #0
     11a:	f040 8082 	bne.w	222 <CONFIG_FLASH_SIZE+0x22>
     11e:	428a      	cmp	r2, r1
     120:	4617      	mov	r7, r2
     122:	d946      	bls.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     124:	fab2 f282 	clz	r2, r2
     128:	b14a      	cbz	r2, 13e <__udivmoddi4+0x32>
     12a:	f1c2 0120 	rsb	r1, r2, #32
     12e:	fa05 f302 	lsl.w	r3, r5, r2
     132:	fa20 f101 	lsr.w	r1, r0, r1
     136:	4097      	lsls	r7, r2
     138:	ea41 0e03 	orr.w	lr, r1, r3
     13c:	4094      	lsls	r4, r2
     13e:	ea4f 4817 	mov.w	r8, r7, lsr #16
     142:	0c23      	lsrs	r3, r4, #16
     144:	fbbe fcf8 	udiv	ip, lr, r8
     148:	b2b9      	uxth	r1, r7
     14a:	fb08 ee1c 	mls	lr, r8, ip, lr
     14e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     152:	fb0c f001 	mul.w	r0, ip, r1
     156:	4298      	cmp	r0, r3
     158:	d90a      	bls.n	170 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x26>
     15a:	18fb      	adds	r3, r7, r3
     15c:	f10c 35ff 	add.w	r5, ip, #4294967295
     160:	f080 8116 	bcs.w	390 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x90>
     164:	4298      	cmp	r0, r3
     166:	f240 8113 	bls.w	390 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x90>
     16a:	f1ac 0c02 	sub.w	ip, ip, #2
     16e:	443b      	add	r3, r7
     170:	1a1b      	subs	r3, r3, r0
     172:	b2a4      	uxth	r4, r4
     174:	fbb3 f0f8 	udiv	r0, r3, r8
     178:	fb08 3310 	mls	r3, r8, r0, r3
     17c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     180:	fb00 f101 	mul.w	r1, r0, r1
     184:	42a1      	cmp	r1, r4
     186:	d909      	bls.n	19c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x52>
     188:	193c      	adds	r4, r7, r4
     18a:	f100 33ff 	add.w	r3, r0, #4294967295
     18e:	f080 8101 	bcs.w	394 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x94>
     192:	42a1      	cmp	r1, r4
     194:	f240 80fe 	bls.w	394 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x94>
     198:	3802      	subs	r0, #2
     19a:	443c      	add	r4, r7
     19c:	1a64      	subs	r4, r4, r1
     19e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1a2:	2100      	movs	r1, #0
     1a4:	b11e      	cbz	r6, 1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     1a6:	40d4      	lsrs	r4, r2
     1a8:	2300      	movs	r3, #0
     1aa:	e9c6 4300 	strd	r4, r3, [r6]
     1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b2:	b902      	cbnz	r2, 1b6 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6c>
     1b4:	deff      	udf	#255	; 0xff
     1b6:	fab2 f282 	clz	r2, r2
     1ba:	2a00      	cmp	r2, #0
     1bc:	d14f      	bne.n	25e <CONFIG_FLASH_SIZE+0x5e>
     1be:	1bcb      	subs	r3, r1, r7
     1c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1c4:	fa1f f887 	uxth.w	r8, r7
     1c8:	2101      	movs	r1, #1
     1ca:	fbb3 fcfe 	udiv	ip, r3, lr
     1ce:	0c25      	lsrs	r5, r4, #16
     1d0:	fb0e 331c 	mls	r3, lr, ip, r3
     1d4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1d8:	fb08 f30c 	mul.w	r3, r8, ip
     1dc:	42ab      	cmp	r3, r5
     1de:	d907      	bls.n	1f0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa6>
     1e0:	197d      	adds	r5, r7, r5
     1e2:	f10c 30ff 	add.w	r0, ip, #4294967295
     1e6:	d202      	bcs.n	1ee <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa4>
     1e8:	42ab      	cmp	r3, r5
     1ea:	f200 80e7 	bhi.w	3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     1ee:	4684      	mov	ip, r0
     1f0:	1aed      	subs	r5, r5, r3
     1f2:	b2a3      	uxth	r3, r4
     1f4:	fbb5 f0fe 	udiv	r0, r5, lr
     1f8:	fb0e 5510 	mls	r5, lr, r0, r5
     1fc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     200:	fb08 f800 	mul.w	r8, r8, r0
     204:	45a0      	cmp	r8, r4
     206:	d907      	bls.n	218 <CONFIG_FLASH_SIZE+0x18>
     208:	193c      	adds	r4, r7, r4
     20a:	f100 33ff 	add.w	r3, r0, #4294967295
     20e:	d202      	bcs.n	216 <CONFIG_FLASH_SIZE+0x16>
     210:	45a0      	cmp	r8, r4
     212:	f200 80d7 	bhi.w	3c4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc4>
     216:	4618      	mov	r0, r3
     218:	eba4 0408 	sub.w	r4, r4, r8
     21c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     220:	e7c0      	b.n	1a4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x5a>
     222:	428b      	cmp	r3, r1
     224:	d908      	bls.n	238 <CONFIG_FLASH_SIZE+0x38>
     226:	2e00      	cmp	r6, #0
     228:	f000 80af 	beq.w	38a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8a>
     22c:	2100      	movs	r1, #0
     22e:	e9c6 0500 	strd	r0, r5, [r6]
     232:	4608      	mov	r0, r1
     234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     238:	fab3 f183 	clz	r1, r3
     23c:	2900      	cmp	r1, #0
     23e:	d14b      	bne.n	2d8 <CONFIG_FLASH_SIZE+0xd8>
     240:	42ab      	cmp	r3, r5
     242:	d302      	bcc.n	24a <CONFIG_FLASH_SIZE+0x4a>
     244:	4282      	cmp	r2, r0
     246:	f200 80b7 	bhi.w	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
     24a:	1a84      	subs	r4, r0, r2
     24c:	eb65 0303 	sbc.w	r3, r5, r3
     250:	2001      	movs	r0, #1
     252:	469e      	mov	lr, r3
     254:	2e00      	cmp	r6, #0
     256:	d0aa      	beq.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     258:	e9c6 4e00 	strd	r4, lr, [r6]
     25c:	e7a7      	b.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     25e:	f1c2 0c20 	rsb	ip, r2, #32
     262:	fa01 f302 	lsl.w	r3, r1, r2
     266:	4097      	lsls	r7, r2
     268:	fa20 f00c 	lsr.w	r0, r0, ip
     26c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     270:	fa21 fc0c 	lsr.w	ip, r1, ip
     274:	4318      	orrs	r0, r3
     276:	fbbc f1fe 	udiv	r1, ip, lr
     27a:	0c05      	lsrs	r5, r0, #16
     27c:	fb0e cc11 	mls	ip, lr, r1, ip
     280:	fa1f f887 	uxth.w	r8, r7
     284:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     288:	fb01 f308 	mul.w	r3, r1, r8
     28c:	42ab      	cmp	r3, r5
     28e:	fa04 f402 	lsl.w	r4, r4, r2
     292:	d909      	bls.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     294:	197d      	adds	r5, r7, r5
     296:	f101 3cff 	add.w	ip, r1, #4294967295
     29a:	f080 808b 	bcs.w	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     29e:	42ab      	cmp	r3, r5
     2a0:	f240 8088 	bls.w	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     2a4:	3902      	subs	r1, #2
     2a6:	443d      	add	r5, r7
     2a8:	1aeb      	subs	r3, r5, r3
     2aa:	b285      	uxth	r5, r0
     2ac:	fbb3 f0fe 	udiv	r0, r3, lr
     2b0:	fb0e 3310 	mls	r3, lr, r0, r3
     2b4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2b8:	fb00 f308 	mul.w	r3, r0, r8
     2bc:	42ab      	cmp	r3, r5
     2be:	d907      	bls.n	2d0 <CONFIG_FLASH_SIZE+0xd0>
     2c0:	197d      	adds	r5, r7, r5
     2c2:	f100 3cff 	add.w	ip, r0, #4294967295
     2c6:	d271      	bcs.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     2c8:	42ab      	cmp	r3, r5
     2ca:	d96f      	bls.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     2cc:	3802      	subs	r0, #2
     2ce:	443d      	add	r5, r7
     2d0:	1aeb      	subs	r3, r5, r3
     2d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2d6:	e778      	b.n	1ca <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x80>
     2d8:	f1c1 0c20 	rsb	ip, r1, #32
     2dc:	408b      	lsls	r3, r1
     2de:	fa22 f70c 	lsr.w	r7, r2, ip
     2e2:	431f      	orrs	r7, r3
     2e4:	fa20 f40c 	lsr.w	r4, r0, ip
     2e8:	fa05 f301 	lsl.w	r3, r5, r1
     2ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2f0:	fa25 f50c 	lsr.w	r5, r5, ip
     2f4:	431c      	orrs	r4, r3
     2f6:	0c23      	lsrs	r3, r4, #16
     2f8:	fbb5 f9fe 	udiv	r9, r5, lr
     2fc:	fa1f f887 	uxth.w	r8, r7
     300:	fb0e 5519 	mls	r5, lr, r9, r5
     304:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     308:	fb09 fa08 	mul.w	sl, r9, r8
     30c:	45aa      	cmp	sl, r5
     30e:	fa02 f201 	lsl.w	r2, r2, r1
     312:	fa00 f301 	lsl.w	r3, r0, r1
     316:	d908      	bls.n	32a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2a>
     318:	197d      	adds	r5, r7, r5
     31a:	f109 30ff 	add.w	r0, r9, #4294967295
     31e:	d247      	bcs.n	3b0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb0>
     320:	45aa      	cmp	sl, r5
     322:	d945      	bls.n	3b0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb0>
     324:	f1a9 0902 	sub.w	r9, r9, #2
     328:	443d      	add	r5, r7
     32a:	eba5 050a 	sub.w	r5, r5, sl
     32e:	b2a4      	uxth	r4, r4
     330:	fbb5 f0fe 	udiv	r0, r5, lr
     334:	fb0e 5510 	mls	r5, lr, r0, r5
     338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     33c:	fb00 f808 	mul.w	r8, r0, r8
     340:	45a0      	cmp	r8, r4
     342:	d907      	bls.n	354 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x54>
     344:	193c      	adds	r4, r7, r4
     346:	f100 35ff 	add.w	r5, r0, #4294967295
     34a:	d22d      	bcs.n	3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     34c:	45a0      	cmp	r8, r4
     34e:	d92b      	bls.n	3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     350:	3802      	subs	r0, #2
     352:	443c      	add	r4, r7
     354:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     358:	eba4 0408 	sub.w	r4, r4, r8
     35c:	fba0 8902 	umull	r8, r9, r0, r2
     360:	454c      	cmp	r4, r9
     362:	46c6      	mov	lr, r8
     364:	464d      	mov	r5, r9
     366:	d319      	bcc.n	39c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x9c>
     368:	d016      	beq.n	398 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x98>
     36a:	b15e      	cbz	r6, 384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>
     36c:	ebb3 020e 	subs.w	r2, r3, lr
     370:	eb64 0405 	sbc.w	r4, r4, r5
     374:	fa04 fc0c 	lsl.w	ip, r4, ip
     378:	40ca      	lsrs	r2, r1
     37a:	ea4c 0202 	orr.w	r2, ip, r2
     37e:	40cc      	lsrs	r4, r1
     380:	e9c6 2400 	strd	r2, r4, [r6]
     384:	2100      	movs	r1, #0
     386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     38a:	4631      	mov	r1, r6
     38c:	4630      	mov	r0, r6
     38e:	e70e      	b.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     390:	46ac      	mov	ip, r5
     392:	e6ed      	b.n	170 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x26>
     394:	4618      	mov	r0, r3
     396:	e701      	b.n	19c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x52>
     398:	4543      	cmp	r3, r8
     39a:	d2e6      	bcs.n	36a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6a>
     39c:	ebb8 0e02 	subs.w	lr, r8, r2
     3a0:	eb69 0507 	sbc.w	r5, r9, r7
     3a4:	3801      	subs	r0, #1
     3a6:	e7e0      	b.n	36a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6a>
     3a8:	4628      	mov	r0, r5
     3aa:	e7d3      	b.n	354 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x54>
     3ac:	4660      	mov	r0, ip
     3ae:	e78f      	b.n	2d0 <CONFIG_FLASH_SIZE+0xd0>
     3b0:	4681      	mov	r9, r0
     3b2:	e7ba      	b.n	32a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2a>
     3b4:	4661      	mov	r1, ip
     3b6:	e777      	b.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     3b8:	4608      	mov	r0, r1
     3ba:	e74b      	b.n	254 <CONFIG_FLASH_SIZE+0x54>
     3bc:	f1ac 0c02 	sub.w	ip, ip, #2
     3c0:	443d      	add	r5, r7
     3c2:	e715      	b.n	1f0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa6>
     3c4:	3802      	subs	r0, #2
     3c6:	443c      	add	r4, r7
     3c8:	e726      	b.n	218 <CONFIG_FLASH_SIZE+0x18>
     3ca:	bf00      	nop

000003cc <__aeabi_idiv0>:
     3cc:	4770      	bx	lr
     3ce:	bf00      	nop

000003d0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
     3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3d2:	4615      	mov	r5, r2
     3d4:	4a0a      	ldr	r2, [pc, #40]	; (400 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE>)
     3d6:	461c      	mov	r4, r3
     3d8:	6856      	ldr	r6, [r2, #4]
     3da:	b12e      	cbz	r6, 3e8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS>
     3dc:	b001      	add	sp, #4
     3de:	462a      	mov	r2, r5
     3e0:	46b4      	mov	ip, r6
     3e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     3e6:	4760      	bx	ip
     3e8:	2000      	movs	r0, #0
     3ea:	f88d 0000 	strb.w	r0, [sp]
     3ee:	4668      	mov	r0, sp
     3f0:	f00b ff24 	bl	c23c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
     3f4:	f89d 0000 	ldrb.w	r0, [sp]
     3f8:	1a28      	subs	r0, r5, r0
     3fa:	7020      	strb	r0, [r4, #0]
     3fc:	2000      	movs	r0, #0
     3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     400:	20000000 	.word	0x20000000

00000404 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     404:	4801      	ldr	r0, [pc, #4]	; (40c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     406:	7800      	ldrb	r0, [r0, #0]
     408:	4770      	bx	lr
     40a:	0000      	.short	0x0000
     40c:	20000008 	.word	0x20000008

00000410 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     410:	4905      	ldr	r1, [pc, #20]	; (428 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     412:	780a      	ldrb	r2, [r1, #0]
     414:	4290      	cmp	r0, r2
     416:	d301      	bcc.n	41c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     418:	2000      	movs	r0, #0
     41a:	4770      	bx	lr
     41c:	6849      	ldr	r1, [r1, #4]
     41e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
     422:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     426:	4770      	bx	lr
     428:	20000008 	.word	0x20000008
     42c:	b570      	push	{r4, r5, r6, lr}
     42e:	4605      	mov	r5, r0
     430:	2a20      	cmp	r2, #32
     432:	d027      	beq.n	484 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x10>
     434:	4819      	ldr	r0, [pc, #100]	; (49c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x28>)
     436:	4c1a      	ldr	r4, [pc, #104]	; (4a0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2c>)
     438:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     43c:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     440:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     444:	2920      	cmp	r1, #32
     446:	d022      	beq.n	48e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1a>
     448:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     44c:	7840      	ldrb	r0, [r0, #1]
     44e:	784c      	ldrb	r4, [r1, #1]
     450:	7048      	strb	r0, [r1, #1]
     452:	4620      	mov	r0, r4
     454:	4601      	mov	r1, r0
     456:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     45a:	4291      	cmp	r1, r2
     45c:	7005      	strb	r5, [r0, #0]
     45e:	7840      	ldrb	r0, [r0, #1]
     460:	d1f8      	bne.n	454 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
     462:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     466:	2a20      	cmp	r2, #32
     468:	bf1a      	itte	ne
     46a:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     46e:	7054      	strbne	r4, [r2, #1]
     470:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     474:	2220      	movs	r2, #32
     476:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     47a:	f88c 2001 	strb.w	r2, [ip, #1]
     47e:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     482:	bd70      	pop	{r4, r5, r6, pc}
     484:	f240 217e 	movw	r1, #638	; 0x27e
     488:	2070      	movs	r0, #112	; 0x70
     48a:	f003 f987 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     48e:	f893 4020 	ldrb.w	r4, [r3, #32]
     492:	7840      	ldrb	r0, [r0, #1]
     494:	f883 0020 	strb.w	r0, [r3, #32]
     498:	e7db      	b.n	452 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
     49a:	0000      	.short	0x0000
     49c:	20000d4c 	.word	0x20000d4c
     4a0:	20000dcc 	.word	0x20000dcc
     4a4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4a8:	b085      	sub	sp, #20
     4aa:	4615      	mov	r5, r2
     4ac:	460c      	mov	r4, r1
     4ae:	f002 f915 	bl	26dc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     4b2:	4428      	add	r0, r5
     4b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     4b8:	9002      	str	r0, [sp, #8]
     4ba:	6821      	ldr	r1, [r4, #0]
     4bc:	1a08      	subs	r0, r1, r0
     4be:	0200      	lsls	r0, r0, #8
     4c0:	17c1      	asrs	r1, r0, #31
     4c2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     4c6:	1200      	asrs	r0, r0, #8
     4c8:	2800      	cmp	r0, #0
     4ca:	f300 80d5 	bgt.w	678 <__data_size+0x34>
     4ce:	48ac      	ldr	r0, [pc, #688]	; (780 <__data_size+0x13c>)
     4d0:	9f08      	ldr	r7, [sp, #32]
     4d2:	4eac      	ldr	r6, [pc, #688]	; (784 <__data_size+0x140>)
     4d4:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     4d8:	9003      	str	r0, [sp, #12]
     4da:	f890 5020 	ldrb.w	r5, [r0, #32]
     4de:	2020      	movs	r0, #32
     4e0:	46e9      	mov	r9, sp
     4e2:	f10d 0804 	add.w	r8, sp, #4
     4e6:	f88d 0000 	strb.w	r0, [sp]
     4ea:	f506 7a40 	add.w	sl, r6, #768	; 0x300
     4ee:	2d20      	cmp	r5, #32
     4f0:	bf18      	it	ne
     4f2:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     4f6:	d025      	beq.n	544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>
     4f8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     4fc:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     500:	6822      	ldr	r2, [r4, #0]
     502:	68c1      	ldr	r1, [r0, #12]
     504:	1a51      	subs	r1, r2, r1
     506:	0209      	lsls	r1, r1, #8
     508:	17ca      	asrs	r2, r1, #31
     50a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     50e:	3008      	adds	r0, #8
     510:	1209      	asrs	r1, r1, #8
     512:	d417      	bmi.n	544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>
     514:	8961      	ldrh	r1, [r4, #10]
     516:	b171      	cbz	r1, 536 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4e>
     518:	8941      	ldrh	r1, [r0, #10]
     51a:	b961      	cbnz	r1, 536 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4e>
     51c:	f000 fdb4 	bl	1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
     520:	f002 f8dc 	bl	26dc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     524:	6821      	ldr	r1, [r4, #0]
     526:	1a08      	subs	r0, r1, r0
     528:	0200      	lsls	r0, r0, #8
     52a:	17c1      	asrs	r1, r0, #31
     52c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     530:	1200      	asrs	r0, r0, #8
     532:	2833      	cmp	r0, #51	; 0x33
     534:	db06      	blt.n	544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>
     536:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     53a:	f889 5000 	strb.w	r5, [r9]
     53e:	7845      	ldrb	r5, [r0, #1]
     540:	2d20      	cmp	r5, #32
     542:	d1d9      	bne.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     544:	f899 0000 	ldrb.w	r0, [r9]
     548:	f888 0000 	strb.w	r0, [r8]
     54c:	46a1      	mov	r9, r4
     54e:	2d20      	cmp	r5, #32
     550:	bf1c      	itt	ne
     552:	488d      	ldrne	r0, [pc, #564]	; (788 <__data_size+0x144>)
     554:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     558:	f000 810e 	beq.w	778 <__data_size+0x134>
     55c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     560:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
     564:	f8d9 2004 	ldr.w	r2, [r9, #4]
     568:	f8da 1008 	ldr.w	r1, [sl, #8]
     56c:	4648      	mov	r0, r9
     56e:	1a89      	subs	r1, r1, r2
     570:	0209      	lsls	r1, r1, #8
     572:	17ca      	asrs	r2, r1, #31
     574:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     578:	f10a 0708 	add.w	r7, sl, #8
     57c:	1209      	asrs	r1, r1, #8
     57e:	d415      	bmi.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
     580:	8979      	ldrh	r1, [r7, #10]
     582:	2900      	cmp	r1, #0
     584:	f000 80f8 	beq.w	778 <__data_size+0x134>
     588:	8941      	ldrh	r1, [r0, #10]
     58a:	2900      	cmp	r1, #0
     58c:	f040 80f4 	bne.w	778 <__data_size+0x134>
     590:	f000 fd7a 	bl	1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
     594:	f002 f8a2 	bl	26dc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     598:	6839      	ldr	r1, [r7, #0]
     59a:	1a08      	subs	r0, r1, r0
     59c:	0200      	lsls	r0, r0, #8
     59e:	17c1      	asrs	r1, r0, #31
     5a0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     5a4:	1200      	asrs	r0, r0, #8
     5a6:	2833      	cmp	r0, #51	; 0x33
     5a8:	f280 80e6 	bge.w	778 <__data_size+0x134>
     5ac:	f888 5000 	strb.w	r5, [r8]
     5b0:	f89a 1014 	ldrb.w	r1, [sl, #20]
     5b4:	f899 000c 	ldrb.w	r0, [r9, #12]
     5b8:	4281      	cmp	r1, r0
     5ba:	d906      	bls.n	5ca <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe2>
     5bc:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     5c0:	7845      	ldrb	r5, [r0, #1]
     5c2:	2d20      	cmp	r5, #32
     5c4:	d1ca      	bne.n	55c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x74>
     5c6:	f000 b8d7 	b.w	778 <__data_size+0x134>
     5ca:	f89d 0004 	ldrb.w	r0, [sp, #4]
     5ce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     5d2:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
     5d6:	8a68      	ldrh	r0, [r5, #18]
     5d8:	68ef      	ldr	r7, [r5, #12]
     5da:	2800      	cmp	r0, #0
     5dc:	d143      	bne.n	666 <__data_size+0x22>
     5de:	8960      	ldrh	r0, [r4, #10]
     5e0:	b3e8      	cbz	r0, 65e <__data_size+0x1a>
     5e2:	68a8      	ldr	r0, [r5, #8]
     5e4:	f00b fe4a 	bl	c27c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     5e8:	8a69      	ldrh	r1, [r5, #18]
     5ea:	7c2a      	ldrb	r2, [r5, #16]
     5ec:	4b67      	ldr	r3, [pc, #412]	; (78c <__data_size+0x148>)
     5ee:	4411      	add	r1, r2
     5f0:	1c49      	adds	r1, r1, #1
     5f2:	1842      	adds	r2, r0, r1
     5f4:	4298      	cmp	r0, r3
     5f6:	d904      	bls.n	602 <CONFIG_BT_HCI_TX_STACK_SIZE+0x2>
     5f8:	f240 6109 	movw	r1, #1545	; 0x609
     5fc:	2070      	movs	r0, #112	; 0x70
     5fe:	f003 f8cd 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     602:	4863      	ldr	r0, [pc, #396]	; (790 <__data_size+0x14c>)
     604:	4281      	cmp	r1, r0
     606:	dd04      	ble.n	612 <CONFIG_BT_HCI_TX_STACK_SIZE+0x12>
     608:	f240 610a 	movw	r1, #1546	; 0x60a
     60c:	2070      	movs	r0, #112	; 0x70
     60e:	f003 f8c5 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     612:	4860      	ldr	r0, [pc, #384]	; (794 <__data_size+0x150>)
     614:	4281      	cmp	r1, r0
     616:	da04      	bge.n	622 <CONFIG_BT_HCI_TX_STACK_SIZE+0x22>
     618:	f240 610b 	movw	r1, #1547	; 0x60b
     61c:	2070      	movs	r0, #112	; 0x70
     61e:	f003 f8bd 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     622:	485d      	ldr	r0, [pc, #372]	; (798 <__data_size+0x154>)
     624:	4290      	cmp	r0, r2
     626:	bfdc      	itt	le
     628:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
     62c:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
     630:	dd05      	ble.n	63e <CONFIG_BT_HCI_TX_STACK_SIZE+0x3e>
     632:	2a00      	cmp	r2, #0
     634:	bfbc      	itt	lt
     636:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
     63a:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
     63e:	4610      	mov	r0, r2
     640:	f002 f84c 	bl	26dc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     644:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     648:	1a78      	subs	r0, r7, r1
     64a:	0200      	lsls	r0, r0, #8
     64c:	17c2      	asrs	r2, r0, #31
     64e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     652:	1200      	asrs	r0, r0, #8
     654:	2833      	cmp	r0, #51	; 0x33
     656:	bfb8      	it	lt
     658:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
     65c:	e000      	b.n	660 <__data_size+0x1c>
     65e:	e002      	b.n	666 <__data_size+0x22>
     660:	bfb8      	it	lt
     662:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
     666:	9802      	ldr	r0, [sp, #8]
     668:	1a38      	subs	r0, r7, r0
     66a:	0200      	lsls	r0, r0, #8
     66c:	17c1      	asrs	r1, r0, #31
     66e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     672:	1200      	asrs	r0, r0, #8
     674:	2800      	cmp	r0, #0
     676:	dd03      	ble.n	680 <__data_size+0x3c>
     678:	b009      	add	sp, #36	; 0x24
     67a:	2000      	movs	r0, #0
     67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     680:	e9d4 1000 	ldrd	r1, r0, [r4]
     684:	1a40      	subs	r0, r0, r1
     686:	4438      	add	r0, r7
     688:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
     68c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     690:	e9c4 1000 	strd	r1, r0, [r4]
     694:	9803      	ldr	r0, [sp, #12]
     696:	f8dd 8020 	ldr.w	r8, [sp, #32]
     69a:	466f      	mov	r7, sp
     69c:	f890 5020 	ldrb.w	r5, [r0, #32]
     6a0:	2020      	movs	r0, #32
     6a2:	f10d 0a04 	add.w	sl, sp, #4
     6a6:	f88d 0000 	strb.w	r0, [sp]
     6aa:	2d20      	cmp	r5, #32
     6ac:	bf1c      	itt	ne
     6ae:	4836      	ldrne	r0, [pc, #216]	; (788 <__data_size+0x144>)
     6b0:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     6b4:	d025      	beq.n	702 <__data_size+0xbe>
     6b6:	bf00      	nop
     6b8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     6bc:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     6c0:	6822      	ldr	r2, [r4, #0]
     6c2:	68c1      	ldr	r1, [r0, #12]
     6c4:	1a51      	subs	r1, r2, r1
     6c6:	0209      	lsls	r1, r1, #8
     6c8:	17ca      	asrs	r2, r1, #31
     6ca:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     6ce:	3008      	adds	r0, #8
     6d0:	1209      	asrs	r1, r1, #8
     6d2:	d416      	bmi.n	702 <__data_size+0xbe>
     6d4:	8961      	ldrh	r1, [r4, #10]
     6d6:	b171      	cbz	r1, 6f6 <__data_size+0xb2>
     6d8:	8941      	ldrh	r1, [r0, #10]
     6da:	b961      	cbnz	r1, 6f6 <__data_size+0xb2>
     6dc:	f000 fcd4 	bl	1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
     6e0:	f001 fffc 	bl	26dc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     6e4:	6821      	ldr	r1, [r4, #0]
     6e6:	1a08      	subs	r0, r1, r0
     6e8:	0200      	lsls	r0, r0, #8
     6ea:	17c1      	asrs	r1, r0, #31
     6ec:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     6f0:	1200      	asrs	r0, r0, #8
     6f2:	2833      	cmp	r0, #51	; 0x33
     6f4:	db05      	blt.n	702 <__data_size+0xbe>
     6f6:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     6fa:	703d      	strb	r5, [r7, #0]
     6fc:	7845      	ldrb	r5, [r0, #1]
     6fe:	2d20      	cmp	r5, #32
     700:	d1da      	bne.n	6b8 <__data_size+0x74>
     702:	7838      	ldrb	r0, [r7, #0]
     704:	f88a 0000 	strb.w	r0, [sl]
     708:	4627      	mov	r7, r4
     70a:	2d20      	cmp	r5, #32
     70c:	bf1c      	itt	ne
     70e:	481e      	ldrne	r0, [pc, #120]	; (788 <__data_size+0x144>)
     710:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     714:	d030      	beq.n	778 <__data_size+0x134>
     716:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     71a:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
     71e:	6879      	ldr	r1, [r7, #4]
     720:	f8d9 2008 	ldr.w	r2, [r9, #8]
     724:	4638      	mov	r0, r7
     726:	1a51      	subs	r1, r2, r1
     728:	0209      	lsls	r1, r1, #8
     72a:	17ca      	asrs	r2, r1, #31
     72c:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     730:	f109 0808 	add.w	r8, r9, #8
     734:	1209      	asrs	r1, r1, #8
     736:	d412      	bmi.n	75e <__data_size+0x11a>
     738:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     73c:	b1e1      	cbz	r1, 778 <__data_size+0x134>
     73e:	8941      	ldrh	r1, [r0, #10]
     740:	b9d1      	cbnz	r1, 778 <__data_size+0x134>
     742:	f000 fca1 	bl	1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
     746:	f001 ffc9 	bl	26dc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     74a:	f8d8 1000 	ldr.w	r1, [r8]
     74e:	1a08      	subs	r0, r1, r0
     750:	0200      	lsls	r0, r0, #8
     752:	17c1      	asrs	r1, r0, #31
     754:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     758:	1200      	asrs	r0, r0, #8
     75a:	2833      	cmp	r0, #51	; 0x33
     75c:	da0c      	bge.n	778 <__data_size+0x134>
     75e:	f88a 5000 	strb.w	r5, [sl]
     762:	f899 0014 	ldrb.w	r0, [r9, #20]
     766:	7b39      	ldrb	r1, [r7, #12]
     768:	4288      	cmp	r0, r1
     76a:	f67f af2e 	bls.w	5ca <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe2>
     76e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     772:	7845      	ldrb	r5, [r0, #1]
     774:	2d20      	cmp	r5, #32
     776:	d1ce      	bne.n	716 <__data_size+0xd2>
     778:	b009      	add	sp, #36	; 0x24
     77a:	2001      	movs	r0, #1
     77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     780:	20000dcc 	.word	0x20000dcc
     784:	20000a4c 	.word	0x20000a4c
     788:	20000d4c 	.word	0x20000d4c
     78c:	1e847fff 	.word	0x1e847fff
     790:	07a12000 	.word	0x07a12000
     794:	f85ee000 	.word	0xf85ee000
     798:	1e848000 	.word	0x1e848000
     79c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     7a0:	4604      	mov	r4, r0
     7a2:	483c      	ldr	r0, [pc, #240]	; (894 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x94>)
     7a4:	460e      	mov	r6, r1
     7a6:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     7aa:	4f3b      	ldr	r7, [pc, #236]	; (898 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x98>)
     7ac:	f890 5020 	ldrb.w	r5, [r0, #32]
     7b0:	2020      	movs	r0, #32
     7b2:	4698      	mov	r8, r3
     7b4:	4692      	mov	sl, r2
     7b6:	7010      	strb	r0, [r2, #0]
     7b8:	f507 7940 	add.w	r9, r7, #768	; 0x300
     7bc:	2d20      	cmp	r5, #32
     7be:	bf18      	it	ne
     7c0:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     7c4:	d028      	beq.n	818 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x18>
     7c6:	bf00      	nop
     7c8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     7cc:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
     7d0:	f100 0108 	add.w	r1, r0, #8
     7d4:	68c0      	ldr	r0, [r0, #12]
     7d6:	6822      	ldr	r2, [r4, #0]
     7d8:	1a10      	subs	r0, r2, r0
     7da:	0200      	lsls	r0, r0, #8
     7dc:	17c2      	asrs	r2, r0, #31
     7de:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     7e2:	1200      	asrs	r0, r0, #8
     7e4:	d418      	bmi.n	818 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x18>
     7e6:	8960      	ldrh	r0, [r4, #10]
     7e8:	b178      	cbz	r0, 80a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa>
     7ea:	8948      	ldrh	r0, [r1, #10]
     7ec:	b968      	cbnz	r0, 80a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa>
     7ee:	4608      	mov	r0, r1
     7f0:	f000 fc4a 	bl	1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
     7f4:	f001 ff72 	bl	26dc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     7f8:	6821      	ldr	r1, [r4, #0]
     7fa:	1a08      	subs	r0, r1, r0
     7fc:	0200      	lsls	r0, r0, #8
     7fe:	17c1      	asrs	r1, r0, #31
     800:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     804:	1200      	asrs	r0, r0, #8
     806:	2833      	cmp	r0, #51	; 0x33
     808:	db06      	blt.n	818 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x18>
     80a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     80e:	f88a 5000 	strb.w	r5, [sl]
     812:	7845      	ldrb	r5, [r0, #1]
     814:	2d20      	cmp	r5, #32
     816:	d1d7      	bne.n	7c8 <__data_size+0x184>
     818:	f89a 0000 	ldrb.w	r0, [sl]
     81c:	f888 0000 	strb.w	r0, [r8]
     820:	2d20      	cmp	r5, #32
     822:	bf18      	it	ne
     824:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
     828:	d030      	beq.n	88c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8c>
     82a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     82e:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
     832:	6861      	ldr	r1, [r4, #4]
     834:	f8d9 2008 	ldr.w	r2, [r9, #8]
     838:	4620      	mov	r0, r4
     83a:	1a51      	subs	r1, r2, r1
     83c:	0209      	lsls	r1, r1, #8
     83e:	17ca      	asrs	r2, r1, #31
     840:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     844:	f109 0608 	add.w	r6, r9, #8
     848:	1209      	asrs	r1, r1, #8
     84a:	d410      	bmi.n	86e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6e>
     84c:	8971      	ldrh	r1, [r6, #10]
     84e:	b1e9      	cbz	r1, 88c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8c>
     850:	8941      	ldrh	r1, [r0, #10]
     852:	b9d9      	cbnz	r1, 88c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8c>
     854:	f000 fc18 	bl	1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
     858:	f001 ff40 	bl	26dc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     85c:	6831      	ldr	r1, [r6, #0]
     85e:	1a08      	subs	r0, r1, r0
     860:	0200      	lsls	r0, r0, #8
     862:	17c1      	asrs	r1, r0, #31
     864:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     868:	1200      	asrs	r0, r0, #8
     86a:	2833      	cmp	r0, #51	; 0x33
     86c:	da0e      	bge.n	88c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8c>
     86e:	f888 5000 	strb.w	r5, [r8]
     872:	f899 0014 	ldrb.w	r0, [r9, #20]
     876:	7b21      	ldrb	r1, [r4, #12]
     878:	4288      	cmp	r0, r1
     87a:	d802      	bhi.n	882 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x82>
     87c:	2000      	movs	r0, #0
     87e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     882:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
     886:	7845      	ldrb	r5, [r0, #1]
     888:	2d20      	cmp	r5, #32
     88a:	d1ce      	bne.n	82a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2a>
     88c:	2001      	movs	r0, #1
     88e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     892:	0000      	.short	0x0000
     894:	20000dcc 	.word	0x20000dcc
     898:	20000a4c 	.word	0x20000a4c
     89c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8a0:	b098      	sub	sp, #96	; 0x60
     8a2:	4616      	mov	r6, r2
     8a4:	460d      	mov	r5, r1
     8a6:	f04f 0800 	mov.w	r8, #0
     8aa:	f04f 0b01 	mov.w	fp, #1
     8ae:	f002 f997 	bl	2be0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     8b2:	4604      	mov	r4, r0
     8b4:	2d01      	cmp	r5, #1
     8b6:	bf18      	it	ne
     8b8:	2d02      	cmpne	r5, #2
     8ba:	d005      	beq.n	8c8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xc8>
     8bc:	f640 1194 	movw	r1, #2452	; 0x994
     8c0:	f04f 0070 	mov.w	r0, #112	; 0x70
     8c4:	f002 ff6a 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     8c8:	49f9      	ldr	r1, [pc, #996]	; (cb0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4b0>)
     8ca:	2001      	movs	r0, #1
     8cc:	6008      	str	r0, [r1, #0]
     8ce:	49f9      	ldr	r1, [pc, #996]	; (cb4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4b4>)
     8d0:	6889      	ldr	r1, [r1, #8]
     8d2:	6008      	str	r0, [r1, #0]
     8d4:	2000      	movs	r0, #0
     8d6:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
     8da:	900c      	str	r0, [sp, #48]	; 0x30
     8dc:	1e40      	subs	r0, r0, #1
     8de:	900e      	str	r0, [sp, #56]	; 0x38
     8e0:	49f5      	ldr	r1, [pc, #980]	; (cb8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4b8>)
     8e2:	eb06 0046 	add.w	r0, r6, r6, lsl #1
     8e6:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
     8ea:	3308      	adds	r3, #8
     8ec:	af0f      	add	r7, sp, #60	; 0x3c
     8ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     8f0:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     8f4:	a80f      	add	r0, sp, #60	; 0x3c
     8f6:	f000 fbc7 	bl	1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
     8fa:	900d      	str	r0, [sp, #52]	; 0x34
     8fc:	48ee      	ldr	r0, [pc, #952]	; (cb8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4b8>)
     8fe:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
     902:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
     906:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
     90a:	f1b9 0f00 	cmp.w	r9, #0
     90e:	bf14      	ite	ne
     910:	f04f 0a01 	movne.w	sl, #1
     914:	f04f 0a00 	moveq.w	sl, #0
     918:	980f      	ldr	r0, [sp, #60]	; 0x3c
     91a:	9014      	str	r0, [sp, #80]	; 0x50
     91c:	f1ba 0f00 	cmp.w	sl, #0
     920:	d009      	beq.n	936 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x136>
     922:	48e6      	ldr	r0, [pc, #920]	; (cbc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4bc>)
     924:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
     928:	b928      	cbnz	r0, 936 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x136>
     92a:	f002 febf 	bl	36ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     92e:	2800      	cmp	r0, #0
     930:	bf08      	it	eq
     932:	2701      	moveq	r7, #1
     934:	d000      	beq.n	938 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x138>
     936:	2700      	movs	r7, #0
     938:	48e1      	ldr	r0, [pc, #900]	; (cc0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4c0>)
     93a:	2200      	movs	r2, #0
     93c:	9215      	str	r2, [sp, #84]	; 0x54
     93e:	7800      	ldrb	r0, [r0, #0]
     940:	4616      	mov	r6, r2
     942:	2801      	cmp	r0, #1
     944:	bf18      	it	ne
     946:	2803      	cmpne	r0, #3
     948:	d140      	bne.n	9cc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1cc>
     94a:	48dd      	ldr	r0, [pc, #884]	; (cc0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4c0>)
     94c:	f8b0 8002 	ldrh.w	r8, [r0, #2]
     950:	eba8 0009 	sub.w	r0, r8, r9
     954:	9015      	str	r0, [sp, #84]	; 0x54
     956:	45c8      	cmp	r8, r9
     958:	d938      	bls.n	9cc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1cc>
     95a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     95c:	ea6f 0108 	mvn.w	r1, r8
     960:	f8df e360 	ldr.w	lr, [pc, #864]	; cc4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4c4>
     964:	1858      	adds	r0, r3, r1
     966:	f10d 0c0c 	add.w	ip, sp, #12
     96a:	aa17      	add	r2, sp, #92	; 0x5c
     96c:	4573      	cmp	r3, lr
     96e:	d904      	bls.n	97a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x17a>
     970:	f240 6109 	movw	r1, #1545	; 0x609
     974:	2070      	movs	r0, #112	; 0x70
     976:	f002 ff11 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     97a:	4bd3      	ldr	r3, [pc, #844]	; (cc8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4c8>)
     97c:	4299      	cmp	r1, r3
     97e:	dd04      	ble.n	98a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x18a>
     980:	f240 610a 	movw	r1, #1546	; 0x60a
     984:	2070      	movs	r0, #112	; 0x70
     986:	f002 ff09 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     98a:	4bd0      	ldr	r3, [pc, #832]	; (ccc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4cc>)
     98c:	4299      	cmp	r1, r3
     98e:	da04      	bge.n	99a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x19a>
     990:	f240 610b 	movw	r1, #1547	; 0x60b
     994:	2070      	movs	r0, #112	; 0x70
     996:	f002 ff01 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     99a:	49cd      	ldr	r1, [pc, #820]	; (cd0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4d0>)
     99c:	4281      	cmp	r1, r0
     99e:	bfdc      	itt	le
     9a0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     9a4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     9a8:	dd05      	ble.n	9b6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1b6>
     9aa:	2800      	cmp	r0, #0
     9ac:	bfbc      	itt	lt
     9ae:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     9b2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     9b6:	4661      	mov	r1, ip
     9b8:	f001 feac 	bl	2714 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     9bc:	9803      	ldr	r0, [sp, #12]
     9be:	990f      	ldr	r1, [sp, #60]	; 0x3c
     9c0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     9c4:	9003      	str	r0, [sp, #12]
     9c6:	1a08      	subs	r0, r1, r0
     9c8:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     9cc:	2f00      	cmp	r7, #0
     9ce:	bf18      	it	ne
     9d0:	2632      	movne	r6, #50	; 0x32
     9d2:	d104      	bne.n	9de <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1de>
     9d4:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     9d8:	2800      	cmp	r0, #0
     9da:	bf18      	it	ne
     9dc:	2602      	movne	r6, #2
     9de:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     9e2:	d008      	beq.n	9f6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1f6>
     9e4:	980f      	ldr	r0, [sp, #60]	; 0x3c
     9e6:	1b00      	subs	r0, r0, r4
     9e8:	0200      	lsls	r0, r0, #8
     9ea:	17c1      	asrs	r1, r0, #31
     9ec:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     9f0:	1200      	asrs	r0, r0, #8
     9f2:	2801      	cmp	r0, #1
     9f4:	da02      	bge.n	9fc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1fc>
     9f6:	2004      	movs	r0, #4
     9f8:	9918      	ldr	r1, [sp, #96]	; 0x60
     9fa:	e00b      	b.n	a14 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x214>
     9fc:	b147      	cbz	r7, a10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x210>
     9fe:	48af      	ldr	r0, [pc, #700]	; (cbc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4bc>)
     a00:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     a04:	b120      	cbz	r0, a10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x210>
     a06:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     a0a:	1c06      	adds	r6, r0, #0
     a0c:	bf18      	it	ne
     a0e:	2602      	movne	r6, #2
     a10:	4621      	mov	r1, r4
     a12:	2001      	movs	r0, #1
     a14:	f1b9 0f00 	cmp.w	r9, #0
     a18:	d002      	beq.n	a20 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x220>
     a1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
     a1c:	2b1e      	cmp	r3, #30
     a1e:	da02      	bge.n	a26 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x226>
     a20:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
     a24:	b113      	cbz	r3, a2c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x22c>
     a26:	f04f 0b00 	mov.w	fp, #0
     a2a:	1e40      	subs	r0, r0, #1
     a2c:	1983      	adds	r3, r0, r6
     a2e:	48a4      	ldr	r0, [pc, #656]	; (cc0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4c0>)
     a30:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
     a34:	7800      	ldrb	r0, [r0, #0]
     a36:	9015      	str	r0, [sp, #84]	; 0x54
     a38:	980f      	ldr	r0, [sp, #60]	; 0x3c
     a3a:	1a80      	subs	r0, r0, r2
     a3c:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
     a40:	ebac 0001 	sub.w	r0, ip, r1
     a44:	0200      	lsls	r0, r0, #8
     a46:	17c6      	asrs	r6, r0, #31
     a48:	eb00 6016 	add.w	r0, r0, r6, lsr #24
     a4c:	1200      	asrs	r0, r0, #8
     a4e:	4298      	cmp	r0, r3
     a50:	db18      	blt.n	a84 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x284>
     a52:	2a00      	cmp	r2, #0
     a54:	bf18      	it	ne
     a56:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
     a5a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     a5c:	9705      	str	r7, [sp, #20]
     a5e:	2700      	movs	r7, #0
     a60:	f001 ffb6 	bl	29d0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     a64:	1a30      	subs	r0, r6, r0
     a66:	0200      	lsls	r0, r0, #8
     a68:	17c1      	asrs	r1, r0, #31
     a6a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     a6e:	1200      	asrs	r0, r0, #8
     a70:	283e      	cmp	r0, #62	; 0x3e
     a72:	da3f      	bge.n	af4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2f4>
     a74:	2d01      	cmp	r5, #1
     a76:	d020      	beq.n	aba <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2ba>
     a78:	1e70      	subs	r0, r6, #1
     a7a:	9905      	ldr	r1, [sp, #20]
     a7c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a80:	b319      	cbz	r1, aca <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2ca>
     a82:	e02d      	b.n	ae0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2e0>
     a84:	b182      	cbz	r2, aa8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2a8>
     a86:	f1be 0f00 	cmp.w	lr, #0
     a8a:	bf04      	itt	eq
     a8c:	9815      	ldreq	r0, [sp, #84]	; 0x54
     a8e:	2803      	cmpeq	r0, #3
     a90:	d00a      	beq.n	aa8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2a8>
     a92:	b927      	cbnz	r7, a9e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x29e>
     a94:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     a98:	2800      	cmp	r0, #0
     a9a:	bf18      	it	ne
     a9c:	1e9b      	subne	r3, r3, #2
     a9e:	2200      	movs	r2, #0
     aa0:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
     aa4:	4690      	mov	r8, r2
     aa6:	e7c7      	b.n	a38 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x238>
     aa8:	bb07      	cbnz	r7, aec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2ec>
     aaa:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     aae:	b1e8      	cbz	r0, aec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2ec>
     ab0:	2000      	movs	r0, #0
     ab2:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
     ab6:	1e9b      	subs	r3, r3, #2
     ab8:	e7be      	b.n	a38 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x238>
     aba:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     abe:	d120      	bne.n	b02 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x302>
     ac0:	f640 110d 	movw	r1, #2317	; 0x90d
     ac4:	2070      	movs	r0, #112	; 0x70
     ac6:	f002 fe69 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     aca:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     ace:	d007      	beq.n	ae0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2e0>
     ad0:	1a21      	subs	r1, r4, r0
     ad2:	0209      	lsls	r1, r1, #8
     ad4:	17ca      	asrs	r2, r1, #31
     ad6:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     ada:	1209      	asrs	r1, r1, #8
     adc:	2904      	cmp	r1, #4
     ade:	dd03      	ble.n	ae8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2e8>
     ae0:	4604      	mov	r4, r0
     ae2:	f001 ff7b 	bl	29dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     ae6:	e00c      	b.n	b02 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x302>
     ae8:	2900      	cmp	r1, #0
     aea:	dd0a      	ble.n	b02 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x302>
     aec:	b01b      	add	sp, #108	; 0x6c
     aee:	2000      	movs	r0, #0
     af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     af4:	1e70      	subs	r0, r6, #1
     af6:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
     afa:	4620      	mov	r0, r4
     afc:	f001 ff6e 	bl	29dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     b00:	4657      	mov	r7, sl
     b02:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b06:	d024      	beq.n	b52 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x352>
     b08:	980f      	ldr	r0, [sp, #60]	; 0x3c
     b0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
     b0c:	1b00      	subs	r0, r0, r4
     b0e:	1b1b      	subs	r3, r3, r4
     b10:	4a70      	ldr	r2, [pc, #448]	; (cd4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4d4>)
     b12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b16:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     b1a:	4583      	cmp	fp, r0
     b1c:	bf98      	it	ls
     b1e:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
     b22:	d2e3      	bcs.n	aec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2ec>
     b24:	429a      	cmp	r2, r3
     b26:	d3e1      	bcc.n	aec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2ec>
     b28:	4620      	mov	r0, r4
     b2a:	f00b fba7 	bl	c27c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     b2e:	4965      	ldr	r1, [pc, #404]	; (cc4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4c4>)
     b30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     b32:	1c4b      	adds	r3, r1, #1
     b34:	1a16      	subs	r6, r2, r0
     b36:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
     b3a:	bf24      	itt	cs
     b3c:	eba0 0c02 	subcs.w	ip, r0, r2
     b40:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
     b44:	d310      	bcc.n	b68 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x368>
     b46:	42b1      	cmp	r1, r6
     b48:	d208      	bcs.n	b5c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x35c>
     b4a:	1a08      	subs	r0, r1, r0
     b4c:	4410      	add	r0, r2
     b4e:	1c46      	adds	r6, r0, #1
     b50:	e00a      	b.n	b68 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x368>
     b52:	f640 212d 	movw	r1, #2605	; 0xa2d
     b56:	2070      	movs	r0, #112	; 0x70
     b58:	f002 fe20 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     b5c:	4561      	cmp	r1, ip
     b5e:	d22c      	bcs.n	bba <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3ba>
     b60:	1a89      	subs	r1, r1, r2
     b62:	4408      	add	r0, r1
     b64:	1c40      	adds	r0, r0, #1
     b66:	4246      	negs	r6, r0
     b68:	4854      	ldr	r0, [pc, #336]	; (cbc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4bc>)
     b6a:	7f80      	ldrb	r0, [r0, #30]
     b6c:	b350      	cbz	r0, bc4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c4>
     b6e:	4628      	mov	r0, r5
     b70:	4645      	mov	r5, r8
     b72:	f04f 0b00 	mov.w	fp, #0
     b76:	46d8      	mov	r8, fp
     b78:	2801      	cmp	r0, #1
     b7a:	d005      	beq.n	b88 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x388>
     b7c:	2002      	movs	r0, #2
     b7e:	f002 f985 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     b82:	2001      	movs	r0, #1
     b84:	f002 f982 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     b88:	45a9      	cmp	r9, r5
     b8a:	d227      	bcs.n	bdc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3dc>
     b8c:	eba6 0105 	sub.w	r1, r6, r5
     b90:	f04f 0301 	mov.w	r3, #1
     b94:	f04f 0203 	mov.w	r2, #3
     b98:	f04f 0002 	mov.w	r0, #2
     b9c:	f002 f8a2 	bl	2ce4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     ba0:	2800      	cmp	r0, #0
     ba2:	bf08      	it	eq
     ba4:	f04f 0801 	moveq.w	r8, #1
     ba8:	f1b9 0f00 	cmp.w	r9, #0
     bac:	d030      	beq.n	c10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x410>
     bae:	2301      	movs	r3, #1
     bb0:	eba6 0109 	sub.w	r1, r6, r9
     bb4:	2203      	movs	r2, #3
     bb6:	4618      	mov	r0, r3
     bb8:	e01e      	b.n	bf8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3f8>
     bba:	f640 310c 	movw	r1, #2828	; 0xb0c
     bbe:	2070      	movs	r0, #112	; 0x70
     bc0:	f002 fdec 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     bc4:	45c1      	cmp	r9, r8
     bc6:	bf34      	ite	cc
     bc8:	4640      	movcc	r0, r8
     bca:	4648      	movcs	r0, r9
     bcc:	4458      	add	r0, fp
     bce:	42b0      	cmp	r0, r6
     bd0:	dbcd      	blt.n	b6e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x36e>
     bd2:	f44f 6124 	mov.w	r1, #2624	; 0xa40
     bd6:	2070      	movs	r0, #112	; 0x70
     bd8:	f002 fde0 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     bdc:	d910      	bls.n	c00 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x400>
     bde:	2301      	movs	r3, #1
     be0:	eba6 0109 	sub.w	r1, r6, r9
     be4:	2203      	movs	r2, #3
     be6:	4618      	mov	r0, r3
     be8:	f002 f87c 	bl	2ce4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     bec:	b328      	cbz	r0, c3a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x43a>
     bee:	b17d      	cbz	r5, c10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x410>
     bf0:	1b71      	subs	r1, r6, r5
     bf2:	2301      	movs	r3, #1
     bf4:	2203      	movs	r2, #3
     bf6:	2002      	movs	r0, #2
     bf8:	f002 f874 	bl	2ce4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     bfc:	b1e8      	cbz	r0, c3a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x43a>
     bfe:	e007      	b.n	c10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x410>
     c00:	ea55 0009 	orrs.w	r0, r5, r9
     c04:	d004      	beq.n	c10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x410>
     c06:	f640 1177 	movw	r1, #2423	; 0x977
     c0a:	2070      	movs	r0, #112	; 0x70
     c0c:	f002 fdc6 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c10:	2301      	movs	r3, #1
     c12:	2203      	movs	r2, #3
     c14:	4631      	mov	r1, r6
     c16:	2000      	movs	r0, #0
     c18:	f002 f864 	bl	2ce4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c1c:	b168      	cbz	r0, c3a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x43a>
     c1e:	2501      	movs	r5, #1
     c20:	f1b8 0f00 	cmp.w	r8, #0
     c24:	d003      	beq.n	c2e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x42e>
     c26:	9814      	ldr	r0, [sp, #80]	; 0x50
     c28:	900f      	str	r0, [sp, #60]	; 0x3c
     c2a:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
     c2e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; cd8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4d8>
     c32:	f1ba 0f00 	cmp.w	sl, #0
     c36:	d10e      	bne.n	c56 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x456>
     c38:	e009      	b.n	c4e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x44e>
     c3a:	2002      	movs	r0, #2
     c3c:	f002 f926 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c40:	2001      	movs	r0, #1
     c42:	f002 f923 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c46:	b01b      	add	sp, #108	; 0x6c
     c48:	2000      	movs	r0, #0
     c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c4e:	481b      	ldr	r0, [pc, #108]	; (cbc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4bc>)
     c50:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     c54:	b100      	cbz	r0, c58 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x458>
     c56:	b34f      	cbz	r7, cac <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4ac>
     c58:	f8df a060 	ldr.w	sl, [pc, #96]	; cbc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4bc>
     c5c:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     c60:	b118      	cbz	r0, c6a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x46a>
     c62:	f002 fbeb 	bl	343c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     c66:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
     c6a:	b307      	cbz	r7, cae <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4ae>
     c6c:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
     c70:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     c74:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     c78:	f8c8 0000 	str.w	r0, [r8]
     c7c:	2300      	movs	r3, #0
     c7e:	2203      	movs	r2, #3
     c80:	2005      	movs	r0, #5
     c82:	f002 f82f 	bl	2ce4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c86:	b368      	cbz	r0, ce4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e4>
     c88:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     c8c:	2005      	movs	r0, #5
     c8e:	f002 f9c9 	bl	3024 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
     c92:	4912      	ldr	r1, [pc, #72]	; (cdc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4dc>)
     c94:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
     c98:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
     c9c:	4910      	ldr	r1, [pc, #64]	; (ce0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e0>)
     c9e:	12e0      	asrs	r0, r4, #11
     ca0:	6008      	str	r0, [r1, #0]
     ca2:	4c06      	ldr	r4, [pc, #24]	; (cbc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4bc>)
     ca4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     ca8:	b3e8      	cbz	r0, d26 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x526>
     caa:	e030      	b.n	d0e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x50e>
     cac:	e01b      	b.n	ce6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e6>
     cae:	e01f      	b.n	cf0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4f0>
     cb0:	40000508 	.word	0x40000508
     cb4:	20000010 	.word	0x20000010
     cb8:	20000a4c 	.word	0x20000a4c
     cbc:	20000dcc 	.word	0x20000dcc
     cc0:	20000012 	.word	0x20000012
     cc4:	1e847fff 	.word	0x1e847fff
     cc8:	07a12000 	.word	0x07a12000
     ccc:	f85ee000 	.word	0xf85ee000
     cd0:	1e848000 	.word	0x1e848000
     cd4:	003fffff 	.word	0x003fffff
     cd8:	4001f508 	.word	0x4001f508
     cdc:	4001f098 	.word	0x4001f098
     ce0:	4001f504 	.word	0x4001f504
     ce4:	e025      	b.n	d32 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x532>
     ce6:	f8df a0b8 	ldr.w	sl, [pc, #184]	; da0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5a0>
     cea:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     cee:	b1c8      	cbz	r0, d24 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x524>
     cf0:	4c2b      	ldr	r4, [pc, #172]	; (da0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5a0>)
     cf2:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     cf6:	b150      	cbz	r0, d0e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x50e>
     cf8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     cfc:	f8c8 0000 	str.w	r0, [r8]
     d00:	2005      	movs	r0, #5
     d02:	f002 f8c3 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d06:	f002 fc01 	bl	350c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
     d0a:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
     d0e:	eba6 0009 	sub.w	r0, r6, r9
     d12:	f1a0 0119 	sub.w	r1, r0, #25
     d16:	2900      	cmp	r1, #0
     d18:	dc15      	bgt.n	d46 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x546>
     d1a:	f640 2171 	movw	r1, #2673	; 0xa71
     d1e:	2070      	movs	r0, #112	; 0x70
     d20:	f002 fd3c 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d24:	e000      	b.n	d28 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x528>
     d26:	e009      	b.n	d3c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x53c>
     d28:	f002 fba4 	bl	3474 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     d2c:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
     d30:	e79b      	b.n	c6a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x46a>
     d32:	f240 313e 	movw	r1, #830	; 0x33e
     d36:	2070      	movs	r0, #112	; 0x70
     d38:	f002 fd30 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d3c:	f002 fbd8 	bl	34f0 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
     d40:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
     d44:	e7e3      	b.n	d0e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x50e>
     d46:	2203      	movs	r2, #3
     d48:	2301      	movs	r3, #1
     d4a:	4610      	mov	r0, r2
     d4c:	f001 ffca 	bl	2ce4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d50:	b308      	cbz	r0, d96 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x596>
     d52:	4814      	ldr	r0, [pc, #80]	; (da4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5a4>)
     d54:	6880      	ldr	r0, [r0, #8]
     d56:	f8c0 b000 	str.w	fp, [r0]
     d5a:	4813      	ldr	r0, [pc, #76]	; (da8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5a8>)
     d5c:	f8c0 b000 	str.w	fp, [r0]
     d60:	ac0c      	add	r4, sp, #48	; 0x30
     d62:	4812      	ldr	r0, [pc, #72]	; (dac <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5ac>)
     d64:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     d68:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
     d6c:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
     d70:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
     d74:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
     d78:	ac10      	add	r4, sp, #64	; 0x40
     d7a:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     d7e:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
     d82:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
     d86:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
     d8a:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
     d8e:	b01b      	add	sp, #108	; 0x6c
     d90:	2001      	movs	r0, #1
     d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d96:	f640 2179 	movw	r1, #2681	; 0xa79
     d9a:	2070      	movs	r0, #112	; 0x70
     d9c:	f002 fcfe 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     da0:	20000dcc 	.word	0x20000dcc
     da4:	20000010 	.word	0x20000010
     da8:	40000508 	.word	0x40000508
     dac:	20000a4c 	.word	0x20000a4c
     db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     db4:	4606      	mov	r6, r0
     db6:	b083      	sub	sp, #12
     db8:	7808      	ldrb	r0, [r1, #0]
     dba:	7390      	strb	r0, [r2, #14]
     dbc:	7acf      	ldrb	r7, [r1, #11]
     dbe:	7357      	strb	r7, [r2, #13]
     dc0:	7a88      	ldrb	r0, [r1, #10]
     dc2:	7310      	strb	r0, [r2, #12]
     dc4:	8908      	ldrh	r0, [r1, #8]
     dc6:	4614      	mov	r4, r2
     dc8:	8150      	strh	r0, [r2, #10]
     dca:	460d      	mov	r5, r1
     dcc:	780a      	ldrb	r2, [r1, #0]
     dce:	495f      	ldr	r1, [pc, #380]	; (f4c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x74c>)
     dd0:	4699      	mov	r9, r3
     dd2:	ea4f 0c81 	mov.w	ip, r1, lsl #2
     dd6:	424b      	negs	r3, r1
     dd8:	f1ac 0801 	sub.w	r8, ip, #1
     ddc:	b15a      	cbz	r2, df6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5f6>
     dde:	43c0      	mvns	r0, r0
     de0:	f8d5 8004 	ldr.w	r8, [r5, #4]
     de4:	f104 0208 	add.w	r2, r4, #8
     de8:	4288      	cmp	r0, r1
     dea:	dd3d      	ble.n	e68 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x668>
     dec:	f240 610a 	movw	r1, #1546	; 0x60a
     df0:	2070      	movs	r0, #112	; 0x70
     df2:	f002 fcd3 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     df6:	68ee      	ldr	r6, [r5, #12]
     df8:	686d      	ldr	r5, [r5, #4]
     dfa:	ea6f 0900 	mvn.w	r9, r0
     dfe:	f104 0208 	add.w	r2, r4, #8
     e02:	eb06 0009 	add.w	r0, r6, r9
     e06:	4546      	cmp	r6, r8
     e08:	d904      	bls.n	e14 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x614>
     e0a:	f240 6109 	movw	r1, #1545	; 0x609
     e0e:	2070      	movs	r0, #112	; 0x70
     e10:	f002 fcc4 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e14:	4589      	cmp	r9, r1
     e16:	dce9      	bgt.n	dec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5ec>
     e18:	4599      	cmp	r9, r3
     e1a:	db28      	blt.n	e6e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x66e>
     e1c:	4584      	cmp	ip, r0
     e1e:	bfdc      	itt	le
     e20:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     e24:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     e28:	dd05      	ble.n	e36 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x636>
     e2a:	2800      	cmp	r0, #0
     e2c:	bfbc      	itt	lt
     e2e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     e32:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     e36:	4621      	mov	r1, r4
     e38:	f001 fc6c 	bl	2714 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     e3c:	6820      	ldr	r0, [r4, #0]
     e3e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     e42:	1970      	adds	r0, r6, r5
     e44:	1c40      	adds	r0, r0, #1
     e46:	6021      	str	r1, [r4, #0]
     e48:	2f00      	cmp	r7, #0
     e4a:	bf08      	it	eq
     e4c:	307a      	addeq	r0, #122	; 0x7a
     e4e:	d003      	beq.n	e58 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x658>
     e50:	2f01      	cmp	r7, #1
     e52:	bf08      	it	eq
     e54:	3048      	addeq	r0, #72	; 0x48
     e56:	d12d      	bne.n	eb4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6b4>
     e58:	f001 fc40 	bl	26dc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     e5c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     e60:	6060      	str	r0, [r4, #4]
     e62:	b003      	add	sp, #12
     e64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     e68:	4601      	mov	r1, r0
     e6a:	4298      	cmp	r0, r3
     e6c:	da04      	bge.n	e78 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x678>
     e6e:	f240 610b 	movw	r1, #1547	; 0x60b
     e72:	2070      	movs	r0, #112	; 0x70
     e74:	f002 fc92 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e78:	4584      	cmp	ip, r0
     e7a:	bfdc      	itt	le
     e7c:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
     e80:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
     e84:	dd05      	ble.n	e92 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x692>
     e86:	2800      	cmp	r0, #0
     e88:	bfbc      	itt	lt
     e8a:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
     e8e:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
     e92:	4621      	mov	r1, r4
     e94:	f001 fc3e 	bl	2714 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     e98:	6820      	ldr	r0, [r4, #0]
     e9a:	2f00      	cmp	r7, #0
     e9c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     ea0:	f108 0001 	add.w	r0, r8, #1
     ea4:	6021      	str	r1, [r4, #0]
     ea6:	bf08      	it	eq
     ea8:	307a      	addeq	r0, #122	; 0x7a
     eaa:	d008      	beq.n	ebe <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6be>
     eac:	2f01      	cmp	r7, #1
     eae:	bf08      	it	eq
     eb0:	3048      	addeq	r0, #72	; 0x48
     eb2:	d004      	beq.n	ebe <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6be>
     eb4:	f240 61b1 	movw	r1, #1713	; 0x6b1
     eb8:	2070      	movs	r0, #112	; 0x70
     eba:	f002 fc6f 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ebe:	f001 fc0d 	bl	26dc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     ec2:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     ec6:	6061      	str	r1, [r4, #4]
     ec8:	8960      	ldrh	r0, [r4, #10]
     eca:	aa01      	add	r2, sp, #4
     ecc:	4669      	mov	r1, sp
     ece:	f001 fc21 	bl	2714 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     ed2:	481f      	ldr	r0, [pc, #124]	; (f50 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x750>)
     ed4:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
     ed8:	2920      	cmp	r1, #32
     eda:	d023      	beq.n	f24 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x724>
     edc:	6900      	ldr	r0, [r0, #16]
     ede:	1d40      	adds	r0, r0, #5
     ee0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     ee4:	e9d4 2100 	ldrd	r2, r1, [r4]
     ee8:	1a89      	subs	r1, r1, r2
     eea:	6020      	str	r0, [r4, #0]
     eec:	4408      	add	r0, r1
     eee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     ef2:	6060      	str	r0, [r4, #4]
     ef4:	464b      	mov	r3, r9
     ef6:	4632      	mov	r2, r6
     ef8:	4621      	mov	r1, r4
     efa:	68e8      	ldr	r0, [r5, #12]
     efc:	f7ff fad2 	bl	4a4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x30>
     f00:	2800      	cmp	r0, #0
     f02:	bf1c      	itt	ne
     f04:	b003      	addne	sp, #12
     f06:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f0a:	e9d4 1000 	ldrd	r1, r0, [r4]
     f0e:	1a40      	subs	r0, r0, r1
     f10:	4430      	add	r0, r6
     f12:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
     f16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f1a:	e9c4 1000 	strd	r1, r0, [r4]
     f1e:	b003      	add	sp, #12
     f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f24:	8960      	ldrh	r0, [r4, #10]
     f26:	f106 0709 	add.w	r7, r6, #9
     f2a:	b120      	cbz	r0, f36 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x736>
     f2c:	f002 fbbe 	bl	36ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     f30:	2800      	cmp	r0, #0
     f32:	bf08      	it	eq
     f34:	3732      	addeq	r7, #50	; 0x32
     f36:	4807      	ldr	r0, [pc, #28]	; (f54 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x754>)
     f38:	7841      	ldrb	r1, [r0, #1]
     f3a:	9800      	ldr	r0, [sp, #0]
     f3c:	4281      	cmp	r1, r0
     f3e:	bf84      	itt	hi
     f40:	1a08      	subhi	r0, r1, r0
     f42:	4407      	addhi	r7, r0
     f44:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
     f48:	e7cc      	b.n	ee4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6e4>
     f4a:	0000      	.short	0x0000
     f4c:	07a12000 	.word	0x07a12000
     f50:	20000dcc 	.word	0x20000dcc
     f54:	20000012 	.word	0x20000012
     f58:	b510      	push	{r4, lr}
     f5a:	4c15      	ldr	r4, [pc, #84]	; (fb0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7b0>)
     f5c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
     f60:	2820      	cmp	r0, #32
     f62:	bf18      	it	ne
     f64:	bd10      	popne	{r4, pc}
     f66:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
     f6a:	eb04 0082 	add.w	r0, r4, r2, lsl #2
     f6e:	f890 1020 	ldrb.w	r1, [r0, #32]
     f72:	2920      	cmp	r1, #32
     f74:	d017      	beq.n	fa6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7a6>
     f76:	f8df c03c 	ldr.w	ip, [pc, #60]	; fb4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7b4>
     f7a:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
     f7e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
     f82:	785b      	ldrb	r3, [r3, #1]
     f84:	f880 3020 	strb.w	r3, [r0, #32]
     f88:	2301      	movs	r3, #1
     f8a:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
     f8e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
     f92:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
     f96:	2002      	movs	r0, #2
     f98:	f000 f8b0 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
     f9c:	2000      	movs	r0, #0
     f9e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
     fa2:	77a0      	strb	r0, [r4, #30]
     fa4:	bd10      	pop	{r4, pc}
     fa6:	f240 318b 	movw	r1, #907	; 0x38b
     faa:	2070      	movs	r0, #112	; 0x70
     fac:	f002 fbf6 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fb0:	20000dcc 	.word	0x20000dcc
     fb4:	20000d4c 	.word	0x20000d4c
     fb8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     fbc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>
     fc0:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
     fc4:	eb08 0085 	add.w	r0, r8, r5, lsl #2
     fc8:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
     fcc:	2c20      	cmp	r4, #32
     fce:	bf08      	it	eq
     fd0:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     fd4:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
     fd8:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
     fdc:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
     fe0:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
     fe4:	2607      	movs	r6, #7
     fe6:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
     fea:	2801      	cmp	r0, #1
     fec:	d00e      	beq.n	100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
     fee:	2804      	cmp	r0, #4
     ff0:	bf08      	it	eq
     ff2:	2602      	moveq	r6, #2
     ff4:	d00a      	beq.n	100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
     ff6:	2805      	cmp	r0, #5
     ff8:	bf0c      	ite	eq
     ffa:	2603      	moveq	r6, #3
     ffc:	2806      	cmpne	r0, #6
     ffe:	d005      	beq.n	100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
    1000:	f640 01d9 	movw	r1, #2265	; 0x8d9
    1004:	f04f 0070 	mov.w	r0, #112	; 0x70
    1008:	f002 fbc8 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    100c:	f1bb 0f00 	cmp.w	fp, #0
    1010:	bf18      	it	ne
    1012:	f3af 8000 	nopne.w
    1016:	f3ef 8010 	mrs	r0, PRIMASK
    101a:	b672      	cpsid	i
    101c:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1020:	784a      	ldrb	r2, [r1, #1]
    1022:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    1026:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    102a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    102e:	42a2      	cmp	r2, r4
    1030:	bf04      	itt	eq
    1032:	2220      	moveq	r2, #32
    1034:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1038:	b1b8      	cbz	r0, 106a <CONFIG_FPROTECT_BLOCK_SIZE+0x6a>
    103a:	462a      	mov	r2, r5
    103c:	4621      	mov	r1, r4
    103e:	2001      	movs	r0, #1
    1040:	f000 f85c 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    1044:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1048:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    104c:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    1050:	6840      	ldr	r0, [r0, #4]
    1052:	4631      	mov	r1, r6
    1054:	4790      	blx	r2
    1056:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    105a:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    105e:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1062:	2c20      	cmp	r4, #32
    1064:	d1bc      	bne.n	fe0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7e0>
    1066:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    106a:	4806      	ldr	r0, [pc, #24]	; (1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>)
    106c:	2800      	cmp	r0, #0
    106e:	bf18      	it	ne
    1070:	f3af 8000 	nopne.w
    1074:	b662      	cpsie	i
    1076:	e7e0      	b.n	103a <CONFIG_FPROTECT_BLOCK_SIZE+0x3a>
    1078:	20000dcc 	.word	0x20000dcc
    107c:	00000000 	.word	0x00000000
    1080:	20000d4c 	.word	0x20000d4c
    1084:	00000000 	.word	0x00000000
    1088:	b510      	push	{r4, lr}
    108a:	4604      	mov	r4, r0
    108c:	6800      	ldr	r0, [r0, #0]
    108e:	f00b f8f5 	bl	c27c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1092:	4602      	mov	r2, r0
    1094:	8960      	ldrh	r0, [r4, #10]
    1096:	7a21      	ldrb	r1, [r4, #8]
    1098:	4b14      	ldr	r3, [pc, #80]	; (10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>)
    109a:	4408      	add	r0, r1
    109c:	1c41      	adds	r1, r0, #1
    109e:	1850      	adds	r0, r2, r1
    10a0:	429a      	cmp	r2, r3
    10a2:	d904      	bls.n	10ae <CONFIG_FPROTECT_BLOCK_SIZE+0xae>
    10a4:	f240 6109 	movw	r1, #1545	; 0x609
    10a8:	2070      	movs	r0, #112	; 0x70
    10aa:	f002 fb77 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10ae:	4a10      	ldr	r2, [pc, #64]	; (10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>)
    10b0:	4291      	cmp	r1, r2
    10b2:	dd04      	ble.n	10be <CONFIG_FPROTECT_BLOCK_SIZE+0xbe>
    10b4:	f240 610a 	movw	r1, #1546	; 0x60a
    10b8:	2070      	movs	r0, #112	; 0x70
    10ba:	f002 fb6f 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10be:	4a0d      	ldr	r2, [pc, #52]	; (10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>)
    10c0:	4291      	cmp	r1, r2
    10c2:	da04      	bge.n	10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
    10c4:	f240 610b 	movw	r1, #1547	; 0x60b
    10c8:	2070      	movs	r0, #112	; 0x70
    10ca:	f002 fb67 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10ce:	490a      	ldr	r1, [pc, #40]	; (10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>)
    10d0:	4281      	cmp	r1, r0
    10d2:	bfde      	ittt	le
    10d4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    10d8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    10dc:	bd10      	pople	{r4, pc}
    10de:	2800      	cmp	r0, #0
    10e0:	bfbc      	itt	lt
    10e2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    10e6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    10ea:	bd10      	pop	{r4, pc}
    10ec:	1e847fff 	.word	0x1e847fff
    10f0:	07a12000 	.word	0x07a12000
    10f4:	f85ee000 	.word	0xf85ee000
    10f8:	1e848000 	.word	0x1e848000
    10fc:	f8df c054 	ldr.w	ip, [pc, #84]	; 1154 <CONFIG_FPROTECT_BLOCK_SIZE+0x154>
    1100:	b510      	push	{r4, lr}
    1102:	2300      	movs	r3, #0
    1104:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1108:	2807      	cmp	r0, #7
    110a:	d21e      	bcs.n	114a <CONFIG_FPROTECT_BLOCK_SIZE+0x14a>
    110c:	e8df f000 	tbb	[pc, r0]
    1110:	05050505 	.word	0x05050505
    1114:	00040404 	.word	0x00040404
    1118:	2301      	movs	r3, #1
    111a:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    111e:	2b00      	cmp	r3, #0
    1120:	bf08      	it	eq
    1122:	bd10      	popeq	{r4, pc}
    1124:	480c      	ldr	r0, [pc, #48]	; (1158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>)
    1126:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    112a:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    112e:	2820      	cmp	r0, #32
    1130:	bf0e      	itee	eq
    1132:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    1136:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    113a:	7041      	strbne	r1, [r0, #1]
    113c:	2020      	movs	r0, #32
    113e:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1142:	7058      	strb	r0, [r3, #1]
    1144:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1148:	bd10      	pop	{r4, pc}
    114a:	f44f 7115 	mov.w	r1, #596	; 0x254
    114e:	2070      	movs	r0, #112	; 0x70
    1150:	f002 fb24 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1154:	20000d4c 	.word	0x20000d4c
    1158:	20000dcc 	.word	0x20000dcc
    115c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1160:	b083      	sub	sp, #12
    1162:	485c      	ldr	r0, [pc, #368]	; (12d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d4>)
    1164:	9904      	ldr	r1, [sp, #16]
    1166:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    116a:	9001      	str	r0, [sp, #4]
    116c:	f890 4020 	ldrb.w	r4, [r0, #32]
    1170:	9803      	ldr	r0, [sp, #12]
    1172:	4625      	mov	r5, r4
    1174:	2801      	cmp	r0, #1
    1176:	bf18      	it	ne
    1178:	2802      	cmpne	r0, #2
    117a:	d005      	beq.n	1188 <CONFIG_FPROTECT_BLOCK_SIZE+0x188>
    117c:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    1180:	f04f 0070 	mov.w	r0, #112	; 0x70
    1184:	f002 fb0a 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1188:	2700      	movs	r7, #0
    118a:	2d20      	cmp	r5, #32
    118c:	d04a      	beq.n	1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>
    118e:	4851      	ldr	r0, [pc, #324]	; (12d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d4>)
    1190:	9100      	str	r1, [sp, #0]
    1192:	2600      	movs	r6, #0
    1194:	7f80      	ldrb	r0, [r0, #30]
    1196:	2800      	cmp	r0, #0
    1198:	bf08      	it	eq
    119a:	2602      	moveq	r6, #2
    119c:	f001 fc18 	bl	29d0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    11a0:	f8df a138 	ldr.w	sl, [pc, #312]	; 12dc <CONFIG_FPROTECT_BLOCK_SIZE+0x2dc>
    11a4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    11a8:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    11ac:	f8df 9128 	ldr.w	r9, [pc, #296]	; 12d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d8>
    11b0:	688a      	ldr	r2, [r1, #8]
    11b2:	68c9      	ldr	r1, [r1, #12]
    11b4:	1a12      	subs	r2, r2, r0
    11b6:	1a09      	subs	r1, r1, r0
    11b8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    11bc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    11c0:	4296      	cmp	r6, r2
    11c2:	bf98      	it	ls
    11c4:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    11c8:	d201      	bcs.n	11ce <CONFIG_FPROTECT_BLOCK_SIZE+0x1ce>
    11ca:	4589      	cmp	r9, r1
    11cc:	d228      	bcs.n	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    11ce:	4a44      	ldr	r2, [pc, #272]	; (12e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e0>)
    11d0:	9900      	ldr	r1, [sp, #0]
    11d2:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    11d6:	4622      	mov	r2, r4
    11d8:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    11dc:	784c      	ldrb	r4, [r1, #1]
    11de:	2c20      	cmp	r4, #32
    11e0:	d016      	beq.n	1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>
    11e2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    11e6:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    11ea:	f8dc 8008 	ldr.w	r8, [ip, #8]
    11ee:	f8dc c00c 	ldr.w	ip, [ip, #12]
    11f2:	eba8 0800 	sub.w	r8, r8, r0
    11f6:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    11fa:	ebac 0100 	sub.w	r1, ip, r0
    11fe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1202:	4546      	cmp	r6, r8
    1204:	bf98      	it	ls
    1206:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    120a:	d2e4      	bcs.n	11d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d6>
    120c:	4589      	cmp	r9, r1
    120e:	d3e2      	bcc.n	11d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d6>
    1210:	2a20      	cmp	r2, #32
    1212:	d005      	beq.n	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    1214:	2120      	movs	r1, #32
    1216:	2004      	movs	r0, #4
    1218:	9b00      	ldr	r3, [sp, #0]
    121a:	f7ff f907 	bl	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    121e:	4604      	mov	r4, r0
    1220:	42ac      	cmp	r4, r5
    1222:	d115      	bne.n	1250 <CONFIG_FPROTECT_BLOCK_SIZE+0x250>
    1224:	482f      	ldr	r0, [pc, #188]	; (12e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e4>)
    1226:	2800      	cmp	r0, #0
    1228:	bf18      	it	ne
    122a:	f3af 8000 	nopne.w
    122e:	f001 fbcf 	bl	29d0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1232:	4c28      	ldr	r4, [pc, #160]	; (12d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d4>)
    1234:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    1238:	2920      	cmp	r1, #32
    123a:	d00d      	beq.n	1258 <CONFIG_FPROTECT_BLOCK_SIZE+0x258>
    123c:	68e1      	ldr	r1, [r4, #12]
    123e:	1c82      	adds	r2, r0, #2
    1240:	1a51      	subs	r1, r2, r1
    1242:	0209      	lsls	r1, r1, #8
    1244:	17ca      	asrs	r2, r1, #31
    1246:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    124a:	1209      	asrs	r1, r1, #8
    124c:	2900      	cmp	r1, #0
    124e:	dd03      	ble.n	1258 <CONFIG_FPROTECT_BLOCK_SIZE+0x258>
    1250:	b005      	add	sp, #20
    1252:	2000      	movs	r0, #0
    1254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1258:	2d20      	cmp	r5, #32
    125a:	d00d      	beq.n	1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>
    125c:	462a      	mov	r2, r5
    125e:	9903      	ldr	r1, [sp, #12]
    1260:	f7ff fb1c 	bl	89c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9c>
    1264:	b358      	cbz	r0, 12be <CONFIG_FPROTECT_BLOCK_SIZE+0x2be>
    1266:	9801      	ldr	r0, [sp, #4]
    1268:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    126c:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    1270:	b005      	add	sp, #20
    1272:	2001      	movs	r0, #1
    1274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1278:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    127c:	b118      	cbz	r0, 1286 <CONFIG_FPROTECT_BLOCK_SIZE+0x286>
    127e:	f002 f8dd 	bl	343c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1282:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    1286:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    128a:	b150      	cbz	r0, 12a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a2>
    128c:	4916      	ldr	r1, [pc, #88]	; (12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>)
    128e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1292:	6008      	str	r0, [r1, #0]
    1294:	2005      	movs	r0, #5
    1296:	f001 fdf9 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    129a:	f002 f937 	bl	350c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    129e:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    12a2:	2004      	movs	r0, #4
    12a4:	f001 fdf2 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12a8:	f001 fe5e 	bl	2f68 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    12ac:	2020      	movs	r0, #32
    12ae:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    12b2:	480e      	ldr	r0, [pc, #56]	; (12ec <CONFIG_FPROTECT_BLOCK_SIZE+0x2ec>)
    12b4:	6880      	ldr	r0, [r0, #8]
    12b6:	6007      	str	r7, [r0, #0]
    12b8:	480d      	ldr	r0, [pc, #52]	; (12f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f0>)
    12ba:	6007      	str	r7, [r0, #0]
    12bc:	e7d8      	b.n	1270 <CONFIG_FPROTECT_BLOCK_SIZE+0x270>
    12be:	462a      	mov	r2, r5
    12c0:	2120      	movs	r1, #32
    12c2:	2004      	movs	r0, #4
    12c4:	9b04      	ldr	r3, [sp, #16]
    12c6:	f7ff f8b1 	bl	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    12ca:	b005      	add	sp, #20
    12cc:	2000      	movs	r0, #0
    12ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12d2:	0000      	.short	0x0000
    12d4:	20000dcc 	.word	0x20000dcc
    12d8:	003fffff 	.word	0x003fffff
    12dc:	20000a4c 	.word	0x20000a4c
    12e0:	20000d4c 	.word	0x20000d4c
    12e4:	00000000 	.word	0x00000000
    12e8:	4001f508 	.word	0x4001f508
    12ec:	20000010 	.word	0x20000010
    12f0:	40000508 	.word	0x40000508

000012f4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    12f4:	4906      	ldr	r1, [pc, #24]	; (1310 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    12f6:	b510      	push	{r4, lr}
    12f8:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    12fc:	2a20      	cmp	r2, #32
    12fe:	bf1c      	itt	ne
    1300:	7788      	strbne	r0, [r1, #30]
    1302:	bd10      	popne	{r4, pc}
    1304:	f240 31ea 	movw	r1, #1002	; 0x3ea
    1308:	2070      	movs	r0, #112	; 0x70
    130a:	f002 fa47 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    130e:	0000      	.short	0x0000
    1310:	20000dcc 	.word	0x20000dcc

00001314 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1318:	4e5b      	ldr	r6, [pc, #364]	; (1488 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x100>)
    131a:	4681      	mov	r9, r0
    131c:	b085      	sub	sp, #20
    131e:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1322:	468a      	mov	sl, r1
    1324:	2820      	cmp	r0, #32
    1326:	d04d      	beq.n	13c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c>
    1328:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    132c:	f106 040c 	add.w	r4, r6, #12
    1330:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1334:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    1338:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    133c:	2020      	movs	r0, #32
    133e:	f88d 0000 	strb.w	r0, [sp]
    1342:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    1346:	aa03      	add	r2, sp, #12
    1348:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    134c:	a901      	add	r1, sp, #4
    134e:	f890 5020 	ldrb.w	r5, [r0, #32]
    1352:	6930      	ldr	r0, [r6, #16]
    1354:	9002      	str	r0, [sp, #8]
    1356:	6830      	ldr	r0, [r6, #0]
    1358:	4448      	add	r0, r9
    135a:	f001 f9db 	bl	2714 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    135e:	68f8      	ldr	r0, [r7, #12]
    1360:	9901      	ldr	r1, [sp, #4]
    1362:	4a4a      	ldr	r2, [pc, #296]	; (148c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x104>)
    1364:	4408      	add	r0, r1
    1366:	f1a9 0165 	sub.w	r1, r9, #101	; 0x65
    136a:	4291      	cmp	r1, r2
    136c:	d82f      	bhi.n	13ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x46>
    136e:	68b9      	ldr	r1, [r7, #8]
    1370:	1a41      	subs	r1, r0, r1
    1372:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1376:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    137a:	d228      	bcs.n	13ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x46>
    137c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1380:	6060      	str	r0, [r4, #4]
    1382:	4630      	mov	r0, r6
    1384:	f884 a00c 	strb.w	sl, [r4, #12]
    1388:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    138c:	46ea      	mov	sl, sp
    138e:	2d20      	cmp	r5, #32
    1390:	bf1c      	itt	ne
    1392:	493f      	ldrne	r1, [pc, #252]	; (1490 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x108>)
    1394:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    1398:	d03c      	beq.n	1414 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8c>
    139a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    139e:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    13a2:	6860      	ldr	r0, [r4, #4]
    13a4:	68ba      	ldr	r2, [r7, #8]
    13a6:	4621      	mov	r1, r4
    13a8:	1a10      	subs	r0, r2, r0
    13aa:	0200      	lsls	r0, r0, #8
    13ac:	17c2      	asrs	r2, r0, #31
    13ae:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    13b2:	f107 0608 	add.w	r6, r7, #8
    13b6:	1200      	asrs	r0, r0, #8
    13b8:	d41b      	bmi.n	13f2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a>
    13ba:	8970      	ldrh	r0, [r6, #10]
    13bc:	b350      	cbz	r0, 1414 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8c>
    13be:	8948      	ldrh	r0, [r1, #10]
    13c0:	b148      	cbz	r0, 13d6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e>
    13c2:	e027      	b.n	1414 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8c>
    13c4:	f640 317b 	movw	r1, #2939	; 0xb7b
    13c8:	2070      	movs	r0, #112	; 0x70
    13ca:	f002 f9e7 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13ce:	b005      	add	sp, #20
    13d0:	2001      	movs	r0, #1
    13d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13d6:	4620      	mov	r0, r4
    13d8:	f7ff fe56 	bl	1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
    13dc:	f001 f97e 	bl	26dc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    13e0:	6831      	ldr	r1, [r6, #0]
    13e2:	1a08      	subs	r0, r1, r0
    13e4:	0200      	lsls	r0, r0, #8
    13e6:	17c1      	asrs	r1, r0, #31
    13e8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    13ec:	1200      	asrs	r0, r0, #8
    13ee:	2833      	cmp	r0, #51	; 0x33
    13f0:	da10      	bge.n	1414 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8c>
    13f2:	f88a 5000 	strb.w	r5, [sl]
    13f6:	7d39      	ldrb	r1, [r7, #20]
    13f8:	7b20      	ldrb	r0, [r4, #12]
    13fa:	4281      	cmp	r1, r0
    13fc:	d805      	bhi.n	140a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x82>
    13fe:	9802      	ldr	r0, [sp, #8]
    1400:	6060      	str	r0, [r4, #4]
    1402:	b005      	add	sp, #20
    1404:	2002      	movs	r0, #2
    1406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    140a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    140e:	7845      	ldrb	r5, [r0, #1]
    1410:	2d20      	cmp	r5, #32
    1412:	d1c2      	bne.n	139a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12>
    1414:	2005      	movs	r0, #5
    1416:	f001 fd39 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    141a:	4c1b      	ldr	r4, [pc, #108]	; (1488 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x100>)
    141c:	f04f 30ff 	mov.w	r0, #4294967295
    1420:	60a0      	str	r0, [r4, #8]
    1422:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    1426:	f89d 2000 	ldrb.w	r2, [sp]
    142a:	2120      	movs	r1, #32
    142c:	2a20      	cmp	r2, #32
    142e:	bf13      	iteet	ne
    1430:	2005      	movne	r0, #5
    1432:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    1436:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    143a:	f7fe fff7 	blne	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    143e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1442:	4913      	ldr	r1, [pc, #76]	; (1490 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x108>)
    1444:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    1448:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    144c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1450:	7048      	strb	r0, [r1, #1]
    1452:	6820      	ldr	r0, [r4, #0]
    1454:	4448      	add	r0, r9
    1456:	6020      	str	r0, [r4, #0]
    1458:	2001      	movs	r0, #1
    145a:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    145e:	7e60      	ldrb	r0, [r4, #25]
    1460:	2801      	cmp	r0, #1
    1462:	d105      	bne.n	1470 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe8>
    1464:	6920      	ldr	r0, [r4, #16]
    1466:	1e40      	subs	r0, r0, #1
    1468:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    146c:	f001 fb54 	bl	2b18 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1470:	f89d 0000 	ldrb.w	r0, [sp]
    1474:	2820      	cmp	r0, #32
    1476:	d003      	beq.n	1480 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf8>
    1478:	4806      	ldr	r0, [pc, #24]	; (1494 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10c>)
    147a:	7840      	ldrb	r0, [r0, #1]
    147c:	f002 fa5e 	bl	393c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1480:	b005      	add	sp, #20
    1482:	2000      	movs	r0, #0
    1484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1488:	20000dcc 	.word	0x20000dcc
    148c:	07a11f9b 	.word	0x07a11f9b
    1490:	20000d4c 	.word	0x20000d4c
    1494:	20000010 	.word	0x20000010

00001498 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    1498:	b570      	push	{r4, r5, r6, lr}
    149a:	4a23      	ldr	r2, [pc, #140]	; (1528 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    149c:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    14a0:	2920      	cmp	r1, #32
    14a2:	d039      	beq.n	1518 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    14a4:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    14a8:	f5a2 7360 	sub.w	r3, r2, #896	; 0x380
    14ac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    14b0:	eb03 0cc1 	add.w	ip, r3, r1, lsl #3
    14b4:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
    14b8:	f892 402e 	ldrb.w	r4, [r2, #46]	; 0x2e
    14bc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    14c0:	f891 1020 	ldrb.w	r1, [r1, #32]
    14c4:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    14c8:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    14cc:	2920      	cmp	r1, #32
    14ce:	d028      	beq.n	1522 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    14d0:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    14d4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    14d8:	7d2d      	ldrb	r5, [r5, #20]
    14da:	4285      	cmp	r5, r0
    14dc:	bf84      	itt	hi
    14de:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    14e2:	7849      	ldrbhi	r1, [r1, #1]
    14e4:	d8f2      	bhi.n	14cc <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x34>
    14e6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    14ea:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    14ee:	f8dc 000c 	ldr.w	r0, [ip, #12]
    14f2:	6889      	ldr	r1, [r1, #8]
    14f4:	6814      	ldr	r4, [r2, #0]
    14f6:	1a08      	subs	r0, r1, r0
    14f8:	0200      	lsls	r0, r0, #8
    14fa:	17c1      	asrs	r1, r0, #31
    14fc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1500:	1200      	asrs	r0, r0, #8
    1502:	d407      	bmi.n	1514 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    1504:	f00a feba 	bl	c27c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1508:	f104 0165 	add.w	r1, r4, #101	; 0x65
    150c:	4288      	cmp	r0, r1
    150e:	bf24      	itt	cs
    1510:	1b00      	subcs	r0, r0, r4
    1512:	bd70      	popcs	{r4, r5, r6, pc}
    1514:	2000      	movs	r0, #0
    1516:	bd70      	pop	{r4, r5, r6, pc}
    1518:	f640 314d 	movw	r1, #2893	; 0xb4d
    151c:	2070      	movs	r0, #112	; 0x70
    151e:	f002 f93d 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1522:	f04f 30ff 	mov.w	r0, #4294967295
    1526:	bd70      	pop	{r4, r5, r6, pc}
    1528:	20000dcc 	.word	0x20000dcc

0000152c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    152c:	4806      	ldr	r0, [pc, #24]	; (1548 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    152e:	b510      	push	{r4, lr}
    1530:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    1534:	2920      	cmp	r1, #32
    1536:	bf1c      	itt	ne
    1538:	7e00      	ldrbne	r0, [r0, #24]
    153a:	bd10      	popne	{r4, pc}
    153c:	f640 3174 	movw	r1, #2932	; 0xb74
    1540:	2070      	movs	r0, #112	; 0x70
    1542:	f002 f92b 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1546:	0000      	.short	0x0000
    1548:	20000dcc 	.word	0x20000dcc

0000154c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    154c:	4602      	mov	r2, r0
    154e:	4b14      	ldr	r3, [pc, #80]	; (15a0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    1550:	b510      	push	{r4, lr}
    1552:	4408      	add	r0, r1
    1554:	429a      	cmp	r2, r3
    1556:	d904      	bls.n	1562 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    1558:	f240 6109 	movw	r1, #1545	; 0x609
    155c:	2070      	movs	r0, #112	; 0x70
    155e:	f002 f91d 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1562:	4a10      	ldr	r2, [pc, #64]	; (15a4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    1564:	4291      	cmp	r1, r2
    1566:	dd04      	ble.n	1572 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    1568:	f240 610a 	movw	r1, #1546	; 0x60a
    156c:	2070      	movs	r0, #112	; 0x70
    156e:	f002 f915 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1572:	4a0d      	ldr	r2, [pc, #52]	; (15a8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    1574:	4291      	cmp	r1, r2
    1576:	da04      	bge.n	1582 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    1578:	f240 610b 	movw	r1, #1547	; 0x60b
    157c:	2070      	movs	r0, #112	; 0x70
    157e:	f002 f90d 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1582:	490a      	ldr	r1, [pc, #40]	; (15ac <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    1584:	4281      	cmp	r1, r0
    1586:	bfde      	ittt	le
    1588:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    158c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1590:	bd10      	pople	{r4, pc}
    1592:	2800      	cmp	r0, #0
    1594:	bfbc      	itt	lt
    1596:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    159a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    159e:	bd10      	pop	{r4, pc}
    15a0:	1e847fff 	.word	0x1e847fff
    15a4:	07a12000 	.word	0x07a12000
    15a8:	f85ee000 	.word	0xf85ee000
    15ac:	1e848000 	.word	0x1e848000

000015b0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    15b0:	4a10      	ldr	r2, [pc, #64]	; (15f4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    15b2:	1a0b      	subs	r3, r1, r0
    15b4:	f102 0c01 	add.w	ip, r2, #1
    15b8:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    15bc:	bf3c      	itt	cc
    15be:	4618      	movcc	r0, r3
    15c0:	4770      	bxcc	lr
    15c2:	b510      	push	{r4, lr}
    15c4:	1a44      	subs	r4, r0, r1
    15c6:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    15ca:	bf3c      	itt	cc
    15cc:	4618      	movcc	r0, r3
    15ce:	bd10      	popcc	{r4, pc}
    15d0:	429a      	cmp	r2, r3
    15d2:	d203      	bcs.n	15dc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    15d4:	1a10      	subs	r0, r2, r0
    15d6:	4408      	add	r0, r1
    15d8:	1c40      	adds	r0, r0, #1
    15da:	bd10      	pop	{r4, pc}
    15dc:	42a2      	cmp	r2, r4
    15de:	d204      	bcs.n	15ea <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    15e0:	1a51      	subs	r1, r2, r1
    15e2:	4408      	add	r0, r1
    15e4:	1c40      	adds	r0, r0, #1
    15e6:	4240      	negs	r0, r0
    15e8:	bd10      	pop	{r4, pc}
    15ea:	f640 310c 	movw	r1, #2828	; 0xb0c
    15ee:	2070      	movs	r0, #112	; 0x70
    15f0:	f002 f8d4 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15f4:	1e847fff 	.word	0x1e847fff

000015f8 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    15f8:	4907      	ldr	r1, [pc, #28]	; (1618 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    15fa:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    15fe:	4282      	cmp	r2, r0
    1600:	bf04      	itt	eq
    1602:	6848      	ldreq	r0, [r1, #4]
    1604:	4770      	bxeq	lr
    1606:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    160a:	4904      	ldr	r1, [pc, #16]	; (161c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    160c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    1610:	3008      	adds	r0, #8
    1612:	f7ff bd39 	b.w	1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
    1616:	0000      	.short	0x0000
    1618:	20000dcc 	.word	0x20000dcc
    161c:	20000a4c 	.word	0x20000a4c

00001620 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    1620:	490e      	ldr	r1, [pc, #56]	; (165c <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    1622:	b510      	push	{r4, lr}
    1624:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1628:	2820      	cmp	r0, #32
    162a:	d012      	beq.n	1652 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    162c:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1630:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    1634:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1638:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    163c:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    1640:	6840      	ldr	r0, [r0, #4]
    1642:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1646:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    164a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    164e:	2104      	movs	r1, #4
    1650:	4710      	bx	r2
    1652:	f640 01bc 	movw	r1, #2236	; 0x8bc
    1656:	2070      	movs	r0, #112	; 0x70
    1658:	f002 f8a0 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    165c:	20000dcc 	.word	0x20000dcc

00001660 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    1660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1662:	4d6d      	ldr	r5, [pc, #436]	; (1818 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    1664:	496d      	ldr	r1, [pc, #436]	; (181c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    1666:	2601      	movs	r6, #1
    1668:	f505 7460 	add.w	r4, r5, #896	; 0x380
    166c:	2808      	cmp	r0, #8
    166e:	d273      	bcs.n	1758 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    1670:	e8df f000 	tbb	[pc, r0]
    1674:	af9d6704 	.word	0xaf9d6704
    1678:	b9b444cd 	.word	0xb9b444cd
    167c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1680:	b918      	cbnz	r0, 168a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    1682:	f001 fef7 	bl	3474 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1686:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    168a:	8ae0      	ldrh	r0, [r4, #22]
    168c:	b110      	cbz	r0, 1694 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    168e:	f002 f80d 	bl	36ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1692:	b188      	cbz	r0, 16b8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    1694:	f7ff fc60 	bl	f58 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x758>
    1698:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    169c:	68a1      	ldr	r1, [r4, #8]
    169e:	f1b1 3fff 	cmp.w	r1, #4294967295
    16a2:	d005      	beq.n	16b0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    16a4:	2301      	movs	r3, #1
    16a6:	2203      	movs	r2, #3
    16a8:	2005      	movs	r0, #5
    16aa:	f001 fb1b 	bl	2ce4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    16ae:	b140      	cbz	r0, 16c2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    16b0:	7e60      	ldrb	r0, [r4, #25]
    16b2:	2801      	cmp	r0, #1
    16b4:	d110      	bne.n	16d8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    16b6:	e009      	b.n	16cc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    16b8:	f44f 6107 	mov.w	r1, #2160	; 0x870
    16bc:	2070      	movs	r0, #112	; 0x70
    16be:	f002 f86d 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16c2:	f640 0175 	movw	r1, #2165	; 0x875
    16c6:	2070      	movs	r0, #112	; 0x70
    16c8:	f002 f868 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16cc:	6920      	ldr	r0, [r4, #16]
    16ce:	1e40      	subs	r0, r0, #1
    16d0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    16d4:	f001 fa20 	bl	2b18 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    16d8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    16dc:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    16e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    16e4:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    16e8:	6840      	ldr	r0, [r0, #4]
    16ea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    16ee:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    16f2:	b001      	add	sp, #4
    16f4:	2101      	movs	r1, #1
    16f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    16fa:	4710      	bx	r2
    16fc:	f7ff fc2c 	bl	f58 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x758>
    1700:	f04f 30ff 	mov.w	r0, #4294967295
    1704:	60a0      	str	r0, [r4, #8]
    1706:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    170a:	f88d 0000 	strb.w	r0, [sp]
    170e:	f89d 0000 	ldrb.w	r0, [sp]
    1712:	b188      	cbz	r0, 1738 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    1714:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1718:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    171c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1720:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1724:	6840      	ldr	r0, [r0, #4]
    1726:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    172a:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    172e:	b001      	add	sp, #4
    1730:	2106      	movs	r1, #6
    1732:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1736:	4710      	bx	r2
    1738:	f640 0186 	movw	r1, #2182	; 0x886
    173c:	2070      	movs	r0, #112	; 0x70
    173e:	f002 f82d 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1742:	f7ff fc09 	bl	f58 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x758>
    1746:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    174a:	f001 ffaf 	bl	36ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    174e:	b120      	cbz	r0, 175a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    1750:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1754:	b130      	cbz	r0, 1764 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    1756:	e009      	b.n	176c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    1758:	e059      	b.n	180e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    175a:	f640 0196 	movw	r1, #2198	; 0x896
    175e:	2070      	movs	r0, #112	; 0x70
    1760:	f002 f81c 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1764:	f001 fe86 	bl	3474 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1768:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    176c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1770:	b158      	cbz	r0, 178a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    1772:	492b      	ldr	r1, [pc, #172]	; (1820 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    1774:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1778:	6008      	str	r0, [r1, #0]
    177a:	2005      	movs	r0, #5
    177c:	f001 fb86 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1780:	f001 fec4 	bl	350c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1784:	2000      	movs	r0, #0
    1786:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    178a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    178e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1792:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1796:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    179a:	6840      	ldr	r0, [r0, #4]
    179c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    17a0:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    17a4:	b001      	add	sp, #4
    17a6:	2100      	movs	r1, #0
    17a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    17ac:	4710      	bx	r2
    17ae:	f001 fc25 	bl	2ffc <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    17b2:	8ae0      	ldrh	r0, [r4, #22]
    17b4:	b110      	cbz	r0, 17bc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    17b6:	f001 ff79 	bl	36ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    17ba:	b128      	cbz	r0, 17c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    17bc:	4819      	ldr	r0, [pc, #100]	; (1824 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    17be:	7800      	ldrb	r0, [r0, #0]
    17c0:	2803      	cmp	r0, #3
    17c2:	bf08      	it	eq
    17c4:	7766      	strbeq	r6, [r4, #29]
    17c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17c8:	f640 01a1 	movw	r1, #2209	; 0x8a1
    17cc:	2070      	movs	r0, #112	; 0x70
    17ce:	f001 ffe5 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17d2:	4815      	ldr	r0, [pc, #84]	; (1828 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    17d4:	6006      	str	r6, [r0, #0]
    17d6:	6888      	ldr	r0, [r1, #8]
    17d8:	6006      	str	r6, [r0, #0]
    17da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17dc:	7808      	ldrb	r0, [r1, #0]
    17de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    17e2:	f002 b8ab 	b.w	393c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    17e6:	f7ff fbb7 	bl	f58 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x758>
    17ea:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    17ee:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    17f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    17f6:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    17fa:	6840      	ldr	r0, [r0, #4]
    17fc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1800:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1804:	b001      	add	sp, #4
    1806:	2105      	movs	r1, #5
    1808:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    180c:	4710      	bx	r2
    180e:	f640 01b4 	movw	r1, #2228	; 0x8b4
    1812:	2070      	movs	r0, #112	; 0x70
    1814:	f001 ffc2 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1818:	20000a4c 	.word	0x20000a4c
    181c:	20000010 	.word	0x20000010
    1820:	4001f508 	.word	0x4001f508
    1824:	20000012 	.word	0x20000012
    1828:	40000508 	.word	0x40000508

0000182c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    182c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1830:	4682      	mov	sl, r0
    1832:	48dc      	ldr	r0, [pc, #880]	; (1ba4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    1834:	b08b      	sub	sp, #44	; 0x2c
    1836:	6800      	ldr	r0, [r0, #0]
    1838:	4ddb      	ldr	r5, [pc, #876]	; (1ba8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    183a:	05c0      	lsls	r0, r0, #23
    183c:	0dc0      	lsrs	r0, r0, #23
    183e:	d00e      	beq.n	185e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    1840:	3810      	subs	r0, #16
    1842:	b240      	sxtb	r0, r0
    1844:	2800      	cmp	r0, #0
    1846:	bfb8      	it	lt
    1848:	f000 000f 	andlt.w	r0, r0, #15
    184c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1850:	bfac      	ite	ge
    1852:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1856:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    185a:	0940      	lsrs	r0, r0, #5
    185c:	d00d      	beq.n	187a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    185e:	980c      	ldr	r0, [sp, #48]	; 0x30
    1860:	f04f 0b00 	mov.w	fp, #0
    1864:	7800      	ldrb	r0, [r0, #0]
    1866:	2800      	cmp	r0, #0
    1868:	bf18      	it	ne
    186a:	2801      	cmpne	r0, #1
    186c:	d018      	beq.n	18a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    186e:	f240 714f 	movw	r1, #1871	; 0x74f
    1872:	f04f 0070 	mov.w	r0, #112	; 0x70
    1876:	f001 ff91 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    187a:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    187e:	f04f 0b01 	mov.w	fp, #1
    1882:	2820      	cmp	r0, #32
    1884:	d007      	beq.n	1896 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    1886:	980c      	ldr	r0, [sp, #48]	; 0x30
    1888:	7800      	ldrb	r0, [r0, #0]
    188a:	b148      	cbz	r0, 18a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    188c:	f240 714b 	movw	r1, #1867	; 0x74b
    1890:	2070      	movs	r0, #112	; 0x70
    1892:	f001 ff83 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1896:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    189a:	2070      	movs	r0, #112	; 0x70
    189c:	f001 ff7e 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18a0:	4cc2      	ldr	r4, [pc, #776]	; (1bac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    18a2:	b124      	cbz	r4, 18ae <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    18a4:	2100      	movs	r1, #0
    18a6:	f240 7052 	movw	r0, #1874	; 0x752
    18aa:	f3af 8000 	nop.w
    18ae:	49c0      	ldr	r1, [pc, #768]	; (1bb0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    18b0:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    18b4:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    18b8:	f04f 0801 	mov.w	r8, #1
    18bc:	9000      	str	r0, [sp, #0]
    18be:	b124      	cbz	r4, 18ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    18c0:	2100      	movs	r1, #0
    18c2:	f240 705a 	movw	r0, #1882	; 0x75a
    18c6:	f3af 8000 	nop.w
    18ca:	f1b8 0f00 	cmp.w	r8, #0
    18ce:	d009      	beq.n	18e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    18d0:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    18d4:	f04f 0900 	mov.w	r9, #0
    18d8:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    18dc:	f1bb 0f00 	cmp.w	fp, #0
    18e0:	d007      	beq.n	18f2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    18e2:	e032      	b.n	194a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    18e4:	48b3      	ldr	r0, [pc, #716]	; (1bb4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    18e6:	2800      	cmp	r0, #0
    18e8:	bf18      	it	ne
    18ea:	f3af 8000 	nopne.w
    18ee:	b662      	cpsie	i
    18f0:	e7ee      	b.n	18d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    18f2:	4637      	mov	r7, r6
    18f4:	2001      	movs	r0, #1
    18f6:	ea20 0607 	bic.w	r6, r0, r7
    18fa:	48af      	ldr	r0, [pc, #700]	; (1bb8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    18fc:	2240      	movs	r2, #64	; 0x40
    18fe:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1902:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1906:	f00a fe27 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    190a:	b124      	cbz	r4, 1916 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    190c:	2100      	movs	r1, #0
    190e:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1912:	f3af 8000 	nop.w
    1916:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    191a:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    191e:	6a09      	ldr	r1, [r1, #32]
    1920:	6201      	str	r1, [r0, #32]
    1922:	b124      	cbz	r4, 192e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    1924:	2100      	movs	r1, #0
    1926:	f240 50d1 	movw	r0, #1489	; 0x5d1
    192a:	f3af 8000 	nop.w
    192e:	b124      	cbz	r4, 193a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    1930:	2100      	movs	r1, #0
    1932:	f240 7064 	movw	r0, #1892	; 0x764
    1936:	f3af 8000 	nop.w
    193a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    193e:	f88d 0004 	strb.w	r0, [sp, #4]
    1942:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1946:	2800      	cmp	r0, #0
    1948:	d1b9      	bne.n	18be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    194a:	b124      	cbz	r4, 1956 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    194c:	2100      	movs	r1, #0
    194e:	f240 706e 	movw	r0, #1902	; 0x76e
    1952:	f3af 8000 	nop.w
    1956:	f001 f83b 	bl	29d0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    195a:	4680      	mov	r8, r0
    195c:	4633      	mov	r3, r6
    195e:	aa06      	add	r2, sp, #24
    1960:	990c      	ldr	r1, [sp, #48]	; 0x30
    1962:	f7ff fa25 	bl	db0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5b0>
    1966:	b124      	cbz	r4, 1972 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    1968:	2100      	movs	r1, #0
    196a:	f240 7075 	movw	r0, #1909	; 0x775
    196e:	f3af 8000 	nop.w
    1972:	4991      	ldr	r1, [pc, #580]	; (1bb8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    1974:	a806      	add	r0, sp, #24
    1976:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    197a:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    197e:	2901      	cmp	r1, #1
    1980:	bf18      	it	ne
    1982:	2902      	cmpne	r1, #2
    1984:	d13c      	bne.n	1a00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    1986:	9906      	ldr	r1, [sp, #24]
    1988:	9b07      	ldr	r3, [sp, #28]
    198a:	eba1 0108 	sub.w	r1, r1, r8
    198e:	4a8b      	ldr	r2, [pc, #556]	; (1bbc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    1990:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1994:	eba3 0308 	sub.w	r3, r3, r8
    1998:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    199c:	2902      	cmp	r1, #2
    199e:	d371      	bcc.n	1a84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    19a0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    19a4:	d26e      	bcs.n	1a84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    19a6:	429a      	cmp	r2, r3
    19a8:	d36c      	bcc.n	1a84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    19aa:	f04f 0901 	mov.w	r9, #1
    19ae:	ab01      	add	r3, sp, #4
    19b0:	aa05      	add	r2, sp, #20
    19b2:	4631      	mov	r1, r6
    19b4:	f7fe fef2 	bl	79c <__data_size+0x158>
    19b8:	2800      	cmp	r0, #0
    19ba:	d06b      	beq.n	1a94 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    19bc:	f89d 1014 	ldrb.w	r1, [sp, #20]
    19c0:	f89d 2004 	ldrb.w	r2, [sp, #4]
    19c4:	4633      	mov	r3, r6
    19c6:	428a      	cmp	r2, r1
    19c8:	d068      	beq.n	1a9c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    19ca:	2005      	movs	r0, #5
    19cc:	f7fe fd2e 	bl	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    19d0:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    19d4:	7048      	strb	r0, [r1, #1]
    19d6:	f89d 0014 	ldrb.w	r0, [sp, #20]
    19da:	2820      	cmp	r0, #32
    19dc:	bf03      	ittte	eq
    19de:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    19e2:	f880 a020 	strbeq.w	sl, [r0, #32]
    19e6:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    19ea:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    19ee:	bf18      	it	ne
    19f0:	f880 a001 	strbne.w	sl, [r0, #1]
    19f4:	4632      	mov	r2, r6
    19f6:	4651      	mov	r1, sl
    19f8:	f05f 0003 	movs.w	r0, #3
    19fc:	f7ff fb7e 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    1a00:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1a04:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    1a08:	f88d 0004 	strb.w	r0, [sp, #4]
    1a0c:	f89d 7004 	ldrb.w	r7, [sp, #4]
    1a10:	b124      	cbz	r4, 1a1c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    1a12:	2100      	movs	r1, #0
    1a14:	f240 707c 	movw	r0, #1916	; 0x77c
    1a18:	f3af 8000 	nop.w
    1a1c:	4868      	ldr	r0, [pc, #416]	; (1bc0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    1a1e:	2800      	cmp	r0, #0
    1a20:	bf18      	it	ne
    1a22:	f3af 8000 	nopne.w
    1a26:	f3ef 8810 	mrs	r8, PRIMASK
    1a2a:	b672      	cpsid	i
    1a2c:	b124      	cbz	r4, 1a38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    1a2e:	2100      	movs	r1, #0
    1a30:	f240 7082 	movw	r0, #1922	; 0x782
    1a34:	f3af 8000 	nop.w
    1a38:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1a3c:	f88d 0004 	strb.w	r0, [sp, #4]
    1a40:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1a44:	2800      	cmp	r0, #0
    1a46:	f47f af3a 	bne.w	18be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1a4a:	b124      	cbz	r4, 1a56 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    1a4c:	2100      	movs	r1, #0
    1a4e:	f240 708a 	movw	r0, #1930	; 0x78a
    1a52:	f3af 8000 	nop.w
    1a56:	f10d 0e18 	add.w	lr, sp, #24
    1a5a:	9800      	ldr	r0, [sp, #0]
    1a5c:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    1a60:	f100 0008 	add.w	r0, r0, #8
    1a64:	f1b9 0f00 	cmp.w	r9, #0
    1a68:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    1a6c:	d044      	beq.n	1af8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    1a6e:	b124      	cbz	r4, 1a7a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    1a70:	2100      	movs	r1, #0
    1a72:	f240 7097 	movw	r0, #1943	; 0x797
    1a76:	f3af 8000 	nop.w
    1a7a:	f1bb 0f00 	cmp.w	fp, #0
    1a7e:	d12c      	bne.n	1ada <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1a80:	e016      	b.n	1ab0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    1a82:	e7ff      	b.n	1a84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1a84:	4632      	mov	r2, r6
    1a86:	4651      	mov	r1, sl
    1a88:	2004      	movs	r0, #4
    1a8a:	f7ff fb37 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    1a8e:	f04f 0901 	mov.w	r9, #1
    1a92:	e7b5      	b.n	1a00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    1a94:	4632      	mov	r2, r6
    1a96:	4651      	mov	r1, sl
    1a98:	2004      	movs	r0, #4
    1a9a:	e7af      	b.n	19fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    1a9c:	2920      	cmp	r1, #32
    1a9e:	bf19      	ittee	ne
    1aa0:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    1aa4:	7840      	ldrbne	r0, [r0, #1]
    1aa6:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1aaa:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1aae:	e78f      	b.n	19d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    1ab0:	b19f      	cbz	r7, 1ada <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1ab2:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1ab6:	2820      	cmp	r0, #32
    1ab8:	d10f      	bne.n	1ada <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1aba:	b124      	cbz	r4, 1ac6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    1abc:	2100      	movs	r1, #0
    1abe:	f240 709c 	movw	r0, #1948	; 0x79c
    1ac2:	f3af 8000 	nop.w
    1ac6:	4631      	mov	r1, r6
    1ac8:	2002      	movs	r0, #2
    1aca:	f7ff fb47 	bl	115c <CONFIG_FPROTECT_BLOCK_SIZE+0x15c>
    1ace:	b920      	cbnz	r0, 1ada <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1ad0:	980c      	ldr	r0, [sp, #48]	; 0x30
    1ad2:	7800      	ldrb	r0, [r0, #0]
    1ad4:	b3f0      	cbz	r0, 1b54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    1ad6:	2801      	cmp	r0, #1
    1ad8:	d04c      	beq.n	1b74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    1ada:	b124      	cbz	r4, 1ae6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    1adc:	2100      	movs	r1, #0
    1ade:	f240 70b9 	movw	r0, #1977	; 0x7b9
    1ae2:	f3af 8000 	nop.w
    1ae6:	f1bb 0f00 	cmp.w	fp, #0
    1aea:	bf18      	it	ne
    1aec:	2001      	movne	r0, #1
    1aee:	d04a      	beq.n	1b86 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    1af0:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    1af4:	f04f 0901 	mov.w	r9, #1
    1af8:	b124      	cbz	r4, 1b04 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    1afa:	2100      	movs	r1, #0
    1afc:	f240 70ca 	movw	r0, #1994	; 0x7ca
    1b00:	f3af 8000 	nop.w
    1b04:	f1b8 0f00 	cmp.w	r8, #0
    1b08:	d045      	beq.n	1b96 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    1b0a:	b124      	cbz	r4, 1b16 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    1b0c:	2100      	movs	r1, #0
    1b0e:	f240 70ce 	movw	r0, #1998	; 0x7ce
    1b12:	f3af 8000 	nop.w
    1b16:	f1b9 0f00 	cmp.w	r9, #0
    1b1a:	d011      	beq.n	1b40 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    1b1c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1b20:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1b24:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    1b28:	2820      	cmp	r0, #32
    1b2a:	d009      	beq.n	1b40 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    1b2c:	b124      	cbz	r4, 1b38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    1b2e:	2100      	movs	r1, #0
    1b30:	f240 70d5 	movw	r0, #2005	; 0x7d5
    1b34:	f3af 8000 	nop.w
    1b38:	4822      	ldr	r0, [pc, #136]	; (1bc4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    1b3a:	7840      	ldrb	r0, [r0, #1]
    1b3c:	f001 fefe 	bl	393c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1b40:	b124      	cbz	r4, 1b4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    1b42:	2100      	movs	r1, #0
    1b44:	f240 70da 	movw	r0, #2010	; 0x7da
    1b48:	f3af 8000 	nop.w
    1b4c:	b00d      	add	sp, #52	; 0x34
    1b4e:	4648      	mov	r0, r9
    1b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b54:	e7ff      	b.n	1b56 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    1b56:	b124      	cbz	r4, 1b62 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    1b58:	2100      	movs	r1, #0
    1b5a:	f240 70a4 	movw	r0, #1956	; 0x7a4
    1b5e:	f3af 8000 	nop.w
    1b62:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    1b66:	4651      	mov	r1, sl
    1b68:	2004      	movs	r0, #4
    1b6a:	f7ff fac7 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    1b6e:	f04f 0901 	mov.w	r9, #1
    1b72:	e7c1      	b.n	1af8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    1b74:	2c00      	cmp	r4, #0
    1b76:	f43f aea2 	beq.w	18be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1b7a:	2100      	movs	r1, #0
    1b7c:	f240 70af 	movw	r0, #1967	; 0x7af
    1b80:	f3af 8000 	nop.w
    1b84:	e69b      	b.n	18be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1b86:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    1b8a:	2001      	movs	r0, #1
    1b8c:	ea20 0101 	bic.w	r1, r0, r1
    1b90:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    1b94:	e7ac      	b.n	1af0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    1b96:	4807      	ldr	r0, [pc, #28]	; (1bb4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    1b98:	2800      	cmp	r0, #0
    1b9a:	bf18      	it	ne
    1b9c:	f3af 8000 	nopne.w
    1ba0:	b662      	cpsie	i
    1ba2:	e7b2      	b.n	1b0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    1ba4:	e000ed04 	.word	0xe000ed04
    1ba8:	20000dcc 	.word	0x20000dcc
    1bac:	00000000 	.word	0x00000000
    1bb0:	20000a4c 	.word	0x20000a4c
    1bb4:	00000000 	.word	0x00000000
    1bb8:	20000d4c 	.word	0x20000d4c
    1bbc:	003fffff 	.word	0x003fffff
    1bc0:	00000000 	.word	0x00000000
    1bc4:	20000010 	.word	0x20000010

00001bc8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1bc8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1bcc:	48a5      	ldr	r0, [pc, #660]	; (1e64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x118>)
    1bce:	b08c      	sub	sp, #48	; 0x30
    1bd0:	6800      	ldr	r0, [r0, #0]
    1bd2:	05c0      	lsls	r0, r0, #23
    1bd4:	0dc0      	lsrs	r0, r0, #23
    1bd6:	d011      	beq.n	1bfc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    1bd8:	3810      	subs	r0, #16
    1bda:	b240      	sxtb	r0, r0
    1bdc:	2800      	cmp	r0, #0
    1bde:	bfb8      	it	lt
    1be0:	f000 000f 	andlt.w	r0, r0, #15
    1be4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1be8:	bfac      	ite	ge
    1bea:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1bee:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1bf2:	0940      	lsrs	r0, r0, #5
    1bf4:	bf08      	it	eq
    1bf6:	f04f 0901 	moveq.w	r9, #1
    1bfa:	d001      	beq.n	1c00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    1bfc:	f04f 0900 	mov.w	r9, #0
    1c00:	980c      	ldr	r0, [sp, #48]	; 0x30
    1c02:	7800      	ldrb	r0, [r0, #0]
    1c04:	2800      	cmp	r0, #0
    1c06:	f04f 0000 	mov.w	r0, #0
    1c0a:	bf1c      	itt	ne
    1c0c:	b00d      	addne	sp, #52	; 0x34
    1c0e:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c12:	f8df a254 	ldr.w	sl, [pc, #596]	; 1e68 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x11c>
    1c16:	4d95      	ldr	r5, [pc, #596]	; (1e6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x120>)
    1c18:	4c95      	ldr	r4, [pc, #596]	; (1e70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x124>)
    1c1a:	f04f 0b00 	mov.w	fp, #0
    1c1e:	900b      	str	r0, [sp, #44]	; 0x2c
    1c20:	b125      	cbz	r5, 1c2c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    1c22:	2100      	movs	r1, #0
    1c24:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    1c28:	f3af 8000 	nop.w
    1c2c:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    1c30:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    1c34:	f04f 0800 	mov.w	r8, #0
    1c38:	b125      	cbz	r5, 1c44 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    1c3a:	2100      	movs	r1, #0
    1c3c:	f240 605d 	movw	r0, #1629	; 0x65d
    1c40:	f3af 8000 	nop.w
    1c44:	f1b9 0f00 	cmp.w	r9, #0
    1c48:	d11d      	bne.n	1c86 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1c4a:	4637      	mov	r7, r6
    1c4c:	2001      	movs	r0, #1
    1c4e:	ea20 0607 	bic.w	r6, r0, r7
    1c52:	4888      	ldr	r0, [pc, #544]	; (1e74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x128>)
    1c54:	2240      	movs	r2, #64	; 0x40
    1c56:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1c5a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1c5e:	f00a fc7b 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1c62:	b125      	cbz	r5, 1c6e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    1c64:	2100      	movs	r1, #0
    1c66:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1c6a:	f3af 8000 	nop.w
    1c6e:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    1c72:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    1c76:	6a09      	ldr	r1, [r1, #32]
    1c78:	6201      	str	r1, [r0, #32]
    1c7a:	b125      	cbz	r5, 1c86 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1c7c:	2100      	movs	r1, #0
    1c7e:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1c82:	f3af 8000 	nop.w
    1c86:	b125      	cbz	r5, 1c92 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    1c88:	2100      	movs	r1, #0
    1c8a:	f240 6065 	movw	r0, #1637	; 0x665
    1c8e:	f3af 8000 	nop.w
    1c92:	f000 fe9d 	bl	29d0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1c96:	4607      	mov	r7, r0
    1c98:	4633      	mov	r3, r6
    1c9a:	466a      	mov	r2, sp
    1c9c:	990c      	ldr	r1, [sp, #48]	; 0x30
    1c9e:	f7ff f887 	bl	db0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5b0>
    1ca2:	b125      	cbz	r5, 1cae <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    1ca4:	2100      	movs	r1, #0
    1ca6:	f240 606b 	movw	r0, #1643	; 0x66b
    1caa:	f3af 8000 	nop.w
    1cae:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1cb2:	2820      	cmp	r0, #32
    1cb4:	d014      	beq.n	1ce0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    1cb6:	6920      	ldr	r0, [r4, #16]
    1cb8:	9900      	ldr	r1, [sp, #0]
    1cba:	1a09      	subs	r1, r1, r0
    1cbc:	0209      	lsls	r1, r1, #8
    1cbe:	17ca      	asrs	r2, r1, #31
    1cc0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1cc4:	1209      	asrs	r1, r1, #8
    1cc6:	d50b      	bpl.n	1ce0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    1cc8:	e9dd 2100 	ldrd	r2, r1, [sp]
    1ccc:	1a89      	subs	r1, r1, r2
    1cce:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1cd2:	4408      	add	r0, r1
    1cd4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1cd8:	e9cd 2000 	strd	r2, r0, [sp]
    1cdc:	f04f 0801 	mov.w	r8, #1
    1ce0:	b14d      	cbz	r5, 1cf6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    1ce2:	2100      	movs	r1, #0
    1ce4:	f240 6075 	movw	r0, #1653	; 0x675
    1ce8:	f3af 8000 	nop.w
    1cec:	2100      	movs	r1, #0
    1cee:	f240 607b 	movw	r0, #1659	; 0x67b
    1cf2:	f3af 8000 	nop.w
    1cf6:	9800      	ldr	r0, [sp, #0]
    1cf8:	9901      	ldr	r1, [sp, #4]
    1cfa:	1bc0      	subs	r0, r0, r7
    1cfc:	1bc9      	subs	r1, r1, r7
    1cfe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1d06:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1d0a:	d205      	bcs.n	1d18 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    1d0c:	458a      	cmp	sl, r1
    1d0e:	d303      	bcc.n	1d18 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    1d10:	f1b9 0f00 	cmp.w	r9, #0
    1d14:	d10c      	bne.n	1d30 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    1d16:	e003      	b.n	1d20 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x158>
    1d18:	f1b9 0f00 	cmp.w	r9, #0
    1d1c:	d038      	beq.n	1d90 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x44>
    1d1e:	e094      	b.n	1e4a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfe>
    1d20:	4633      	mov	r3, r6
    1d22:	463a      	mov	r2, r7
    1d24:	4669      	mov	r1, sp
    1d26:	4854      	ldr	r0, [pc, #336]	; (1e78 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12c>)
    1d28:	f7fe fbbc 	bl	4a4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x30>
    1d2c:	ea48 0800 	orr.w	r8, r8, r0
    1d30:	f1b8 0f00 	cmp.w	r8, #0
    1d34:	d022      	beq.n	1d7c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x30>
    1d36:	9800      	ldr	r0, [sp, #0]
    1d38:	f00a faa0 	bl	c27c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1d3c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1d40:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1d44:	4b4d      	ldr	r3, [pc, #308]	; (1e7c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x130>)
    1d46:	4411      	add	r1, r2
    1d48:	1c49      	adds	r1, r1, #1
    1d4a:	1842      	adds	r2, r0, r1
    1d4c:	4298      	cmp	r0, r3
    1d4e:	d841      	bhi.n	1dd4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x88>
    1d50:	4849      	ldr	r0, [pc, #292]	; (1e78 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12c>)
    1d52:	4281      	cmp	r1, r0
    1d54:	dc5a      	bgt.n	1e0c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc0>
    1d56:	4240      	negs	r0, r0
    1d58:	4281      	cmp	r1, r0
    1d5a:	db5f      	blt.n	1e1c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd0>
    1d5c:	1c58      	adds	r0, r3, #1
    1d5e:	4290      	cmp	r0, r2
    1d60:	bfdc      	itt	le
    1d62:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1d66:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1d6a:	dd05      	ble.n	1d78 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c>
    1d6c:	2a00      	cmp	r2, #0
    1d6e:	bfbc      	itt	lt
    1d70:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1d74:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1d78:	980c      	ldr	r0, [sp, #48]	; 0x30
    1d7a:	60c2      	str	r2, [r0, #12]
    1d7c:	2001      	movs	r0, #1
    1d7e:	900b      	str	r0, [sp, #44]	; 0x2c
    1d80:	2d00      	cmp	r5, #0
    1d82:	d062      	beq.n	1e4a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfe>
    1d84:	2100      	movs	r1, #0
    1d86:	f240 608e 	movw	r0, #1678	; 0x68e
    1d8a:	f3af 8000 	nop.w
    1d8e:	e05c      	b.n	1e4a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfe>
    1d90:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1d94:	aa08      	add	r2, sp, #32
    1d96:	a907      	add	r1, sp, #28
    1d98:	f000 fcbc 	bl	2714 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1d9c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1da0:	2820      	cmp	r0, #32
    1da2:	d01c      	beq.n	1dde <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x92>
    1da4:	6920      	ldr	r0, [r4, #16]
    1da6:	1d40      	adds	r0, r0, #5
    1da8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1dac:	e9dd 2100 	ldrd	r2, r1, [sp]
    1db0:	1a89      	subs	r1, r1, r2
    1db2:	4401      	add	r1, r0
    1db4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1db8:	e9cd 0100 	strd	r0, r1, [sp]
    1dbc:	f00a fa5e 	bl	c27c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1dc0:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1dc4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1dc8:	4b2c      	ldr	r3, [pc, #176]	; (1e7c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x130>)
    1dca:	4411      	add	r1, r2
    1dcc:	1c4a      	adds	r2, r1, #1
    1dce:	1881      	adds	r1, r0, r2
    1dd0:	4298      	cmp	r0, r3
    1dd2:	d918      	bls.n	1e06 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xba>
    1dd4:	f240 6109 	movw	r1, #1545	; 0x609
    1dd8:	2070      	movs	r0, #112	; 0x70
    1dda:	f001 fcdf 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1dde:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1de2:	f107 0609 	add.w	r6, r7, #9
    1de6:	b120      	cbz	r0, 1df2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa6>
    1de8:	f001 fc60 	bl	36ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1dec:	2800      	cmp	r0, #0
    1dee:	bf08      	it	eq
    1df0:	3632      	addeq	r6, #50	; 0x32
    1df2:	4823      	ldr	r0, [pc, #140]	; (1e80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x134>)
    1df4:	7841      	ldrb	r1, [r0, #1]
    1df6:	9807      	ldr	r0, [sp, #28]
    1df8:	4281      	cmp	r1, r0
    1dfa:	bf84      	itt	hi
    1dfc:	1a08      	subhi	r0, r1, r0
    1dfe:	4406      	addhi	r6, r0
    1e00:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    1e04:	e7d2      	b.n	1dac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x60>
    1e06:	481c      	ldr	r0, [pc, #112]	; (1e78 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12c>)
    1e08:	4282      	cmp	r2, r0
    1e0a:	dd04      	ble.n	1e16 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xca>
    1e0c:	f240 610a 	movw	r1, #1546	; 0x60a
    1e10:	2070      	movs	r0, #112	; 0x70
    1e12:	f001 fcc3 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e16:	481b      	ldr	r0, [pc, #108]	; (1e84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x138>)
    1e18:	4282      	cmp	r2, r0
    1e1a:	da04      	bge.n	1e26 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xda>
    1e1c:	f240 610b 	movw	r1, #1547	; 0x60b
    1e20:	2070      	movs	r0, #112	; 0x70
    1e22:	f001 fcbb 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e26:	4818      	ldr	r0, [pc, #96]	; (1e88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13c>)
    1e28:	4288      	cmp	r0, r1
    1e2a:	bfdc      	itt	le
    1e2c:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    1e30:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    1e34:	dd05      	ble.n	1e42 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf6>
    1e36:	2900      	cmp	r1, #0
    1e38:	bfbc      	itt	lt
    1e3a:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    1e3e:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    1e42:	980c      	ldr	r0, [sp, #48]	; 0x30
    1e44:	60c1      	str	r1, [r0, #12]
    1e46:	2001      	movs	r0, #1
    1e48:	900b      	str	r0, [sp, #44]	; 0x2c
    1e4a:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    1e4e:	f88d 0010 	strb.w	r0, [sp, #16]
    1e52:	f89d 0010 	ldrb.w	r0, [sp, #16]
    1e56:	2800      	cmp	r0, #0
    1e58:	f47f aee2 	bne.w	1c20 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    1e5c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1e5e:	b00d      	add	sp, #52	; 0x34
    1e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e64:	e000ed04 	.word	0xe000ed04
    1e68:	003fffff 	.word	0x003fffff
    1e6c:	00000000 	.word	0x00000000
    1e70:	20000dcc 	.word	0x20000dcc
    1e74:	20000d4c 	.word	0x20000d4c
    1e78:	07a12000 	.word	0x07a12000
    1e7c:	1e847fff 	.word	0x1e847fff
    1e80:	20000012 	.word	0x20000012
    1e84:	f85ee000 	.word	0xf85ee000
    1e88:	1e848000 	.word	0x1e848000

00001e8c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1e8c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e90:	4d88      	ldr	r5, [pc, #544]	; (20b4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>)
    1e92:	b08c      	sub	sp, #48	; 0x30
    1e94:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1e98:	2000      	movs	r0, #0
    1e9a:	9009      	str	r0, [sp, #36]	; 0x24
    1e9c:	2001      	movs	r0, #1
    1e9e:	4c86      	ldr	r4, [pc, #536]	; (20b8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>)
    1ea0:	f04f 0900 	mov.w	r9, #0
    1ea4:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    1ea8:	4680      	mov	r8, r0
    1eaa:	9008      	str	r0, [sp, #32]
    1eac:	b124      	cbz	r4, 1eb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    1eae:	2100      	movs	r1, #0
    1eb0:	f240 70e9 	movw	r0, #2025	; 0x7e9
    1eb4:	f3af 8000 	nop.w
    1eb8:	9808      	ldr	r0, [sp, #32]
    1eba:	2800      	cmp	r0, #0
    1ebc:	d037      	beq.n	1f2e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa2>
    1ebe:	bf00      	nop
    1ec0:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    1ec4:	b124      	cbz	r4, 1ed0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    1ec6:	2100      	movs	r1, #0
    1ec8:	f240 70ee 	movw	r0, #2030	; 0x7ee
    1ecc:	f3af 8000 	nop.w
    1ed0:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    1ed4:	2240      	movs	r2, #64	; 0x40
    1ed6:	ea28 060a 	bic.w	r6, r8, sl
    1eda:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    1ede:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    1ee2:	4683      	mov	fp, r0
    1ee4:	f00a fb38 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1ee8:	b124      	cbz	r4, 1ef4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    1eea:	2100      	movs	r1, #0
    1eec:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1ef0:	f3af 8000 	nop.w
    1ef4:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1ef8:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    1efc:	9000      	str	r0, [sp, #0]
    1efe:	6a09      	ldr	r1, [r1, #32]
    1f00:	6201      	str	r1, [r0, #32]
    1f02:	b124      	cbz	r4, 1f0e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x82>
    1f04:	2100      	movs	r1, #0
    1f06:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1f0a:	f3af 8000 	nop.w
    1f0e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1f12:	f88d 0008 	strb.w	r0, [sp, #8]
    1f16:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1f1a:	b178      	cbz	r0, 1f3c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    1f1c:	2c00      	cmp	r4, #0
    1f1e:	bf1c      	itt	ne
    1f20:	2100      	movne	r1, #0
    1f22:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    1f26:	d0c1      	beq.n	1eac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1f28:	f3af 8000 	nop.w
    1f2c:	e7be      	b.n	1eac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1f2e:	4863      	ldr	r0, [pc, #396]	; (20bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    1f30:	2800      	cmp	r0, #0
    1f32:	bf18      	it	ne
    1f34:	f3af 8000 	nopne.w
    1f38:	b662      	cpsie	i
    1f3a:	e7c1      	b.n	1ec0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    1f3c:	b124      	cbz	r4, 1f48 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    1f3e:	2100      	movs	r1, #0
    1f40:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    1f44:	f3af 8000 	nop.w
    1f48:	980c      	ldr	r0, [sp, #48]	; 0x30
    1f4a:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    1f4e:	2803      	cmp	r0, #3
    1f50:	d172      	bne.n	2038 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    1f52:	f8dd a000 	ldr.w	sl, [sp]
    1f56:	f8cd a018 	str.w	sl, [sp, #24]
    1f5a:	990c      	ldr	r1, [sp, #48]	; 0x30
    1f5c:	f89a 0020 	ldrb.w	r0, [sl, #32]
    1f60:	4288      	cmp	r0, r1
    1f62:	bf14      	ite	ne
    1f64:	f04f 0b00 	movne.w	fp, #0
    1f68:	f04f 0b01 	moveq.w	fp, #1
    1f6c:	f10a 0c20 	add.w	ip, sl, #32
    1f70:	4686      	mov	lr, r0
    1f72:	2220      	movs	r2, #32
    1f74:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    1f78:	e003      	b.n	1f82 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    1f7a:	4602      	mov	r2, r0
    1f7c:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    1f80:	7840      	ldrb	r0, [r0, #1]
    1f82:	4288      	cmp	r0, r1
    1f84:	d002      	beq.n	1f8c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x100>
    1f86:	2820      	cmp	r0, #32
    1f88:	d00a      	beq.n	1fa0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    1f8a:	e7f6      	b.n	1f7a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xee>
    1f8c:	2820      	cmp	r0, #32
    1f8e:	d007      	beq.n	1fa0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    1f90:	4586      	cmp	lr, r0
    1f92:	d107      	bne.n	1fa4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x118>
    1f94:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    1f98:	7840      	ldrb	r0, [r0, #1]
    1f9a:	f88c 0000 	strb.w	r0, [ip]
    1f9e:	e007      	b.n	1fb0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x124>
    1fa0:	4648      	mov	r0, r9
    1fa2:	e00c      	b.n	1fbe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    1fa4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    1fa8:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    1fac:	7840      	ldrb	r0, [r0, #1]
    1fae:	7048      	strb	r0, [r1, #1]
    1fb0:	b124      	cbz	r4, 1fbc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x130>
    1fb2:	2100      	movs	r1, #0
    1fb4:	f240 5037 	movw	r0, #1335	; 0x537
    1fb8:	f3af 8000 	nop.w
    1fbc:	4640      	mov	r0, r8
    1fbe:	ea10 0f0b 	tst.w	r0, fp
    1fc2:	bf18      	it	ne
    1fc4:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    1fc8:	2800      	cmp	r0, #0
    1fca:	d052      	beq.n	2072 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    1fcc:	b124      	cbz	r4, 1fd8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x14c>
    1fce:	2100      	movs	r1, #0
    1fd0:	f240 70fd 	movw	r0, #2045	; 0x7fd
    1fd4:	f3af 8000 	nop.w
    1fd8:	4632      	mov	r2, r6
    1fda:	2001      	movs	r0, #1
    1fdc:	990c      	ldr	r1, [sp, #48]	; 0x30
    1fde:	f7ff f88d 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    1fe2:	9806      	ldr	r0, [sp, #24]
    1fe4:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    1fe8:	f88d 0008 	strb.w	r0, [sp, #8]
    1fec:	f89d a008 	ldrb.w	sl, [sp, #8]
    1ff0:	b124      	cbz	r4, 1ffc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    1ff2:	2100      	movs	r1, #0
    1ff4:	f640 0008 	movw	r0, #2056	; 0x808
    1ff8:	f3af 8000 	nop.w
    1ffc:	4830      	ldr	r0, [pc, #192]	; (20c0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>)
    1ffe:	2800      	cmp	r0, #0
    2000:	bf18      	it	ne
    2002:	f3af 8000 	nopne.w
    2006:	f3ef 8010 	mrs	r0, PRIMASK
    200a:	b672      	cpsid	i
    200c:	9008      	str	r0, [sp, #32]
    200e:	b124      	cbz	r4, 201a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    2010:	2100      	movs	r1, #0
    2012:	f640 000d 	movw	r0, #2061	; 0x80d
    2016:	f3af 8000 	nop.w
    201a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    201e:	f88d 0008 	strb.w	r0, [sp, #8]
    2022:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2026:	b140      	cbz	r0, 203a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    2028:	2c00      	cmp	r4, #0
    202a:	bf1c      	itt	ne
    202c:	2100      	movne	r1, #0
    202e:	f640 0011 	movwne	r0, #2065	; 0x811
    2032:	f43f af3b 	beq.w	1eac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2036:	e777      	b.n	1f28 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9c>
    2038:	e01b      	b.n	2072 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    203a:	f1ba 0f00 	cmp.w	sl, #0
    203e:	d008      	beq.n	2052 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    2040:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2044:	2820      	cmp	r0, #32
    2046:	d104      	bne.n	2052 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    2048:	4631      	mov	r1, r6
    204a:	2002      	movs	r0, #2
    204c:	f7ff f886 	bl	115c <CONFIG_FPROTECT_BLOCK_SIZE+0x15c>
    2050:	b308      	cbz	r0, 2096 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20a>
    2052:	b124      	cbz	r4, 205e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    2054:	2100      	movs	r1, #0
    2056:	f640 0025 	movw	r0, #2085	; 0x825
    205a:	f3af 8000 	nop.w
    205e:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2062:	ea28 0000 	bic.w	r0, r8, r0
    2066:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    206a:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    206e:	2001      	movs	r0, #1
    2070:	9009      	str	r0, [sp, #36]	; 0x24
    2072:	b124      	cbz	r4, 207e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    2074:	2100      	movs	r1, #0
    2076:	f640 002e 	movw	r0, #2094	; 0x82e
    207a:	f3af 8000 	nop.w
    207e:	9808      	ldr	r0, [sp, #32]
    2080:	b188      	cbz	r0, 20a6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21a>
    2082:	b124      	cbz	r4, 208e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x202>
    2084:	2100      	movs	r1, #0
    2086:	f640 0032 	movw	r0, #2098	; 0x832
    208a:	f3af 8000 	nop.w
    208e:	9809      	ldr	r0, [sp, #36]	; 0x24
    2090:	b00d      	add	sp, #52	; 0x34
    2092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2096:	2c00      	cmp	r4, #0
    2098:	d0f1      	beq.n	207e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    209a:	2100      	movs	r1, #0
    209c:	f44f 6002 	mov.w	r0, #2080	; 0x820
    20a0:	f3af 8000 	nop.w
    20a4:	e7e6      	b.n	2074 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    20a6:	4805      	ldr	r0, [pc, #20]	; (20bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    20a8:	2800      	cmp	r0, #0
    20aa:	bf18      	it	ne
    20ac:	f3af 8000 	nopne.w
    20b0:	b662      	cpsie	i
    20b2:	e7e6      	b.n	2082 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f6>
    20b4:	20000dcc 	.word	0x20000dcc
	...

000020c4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    20c4:	b510      	push	{r4, lr}
    20c6:	2820      	cmp	r0, #32
    20c8:	d211      	bcs.n	20ee <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    20ca:	490e      	ldr	r1, [pc, #56]	; (2104 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    20cc:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    20d0:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    20d4:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    20d8:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    20dc:	b13b      	cbz	r3, 20ee <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    20de:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    20e2:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    20e6:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    20ea:	2a01      	cmp	r2, #1
    20ec:	d001      	beq.n	20f2 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    20ee:	2000      	movs	r0, #0
    20f0:	bd10      	pop	{r4, pc}
    20f2:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    20f6:	4601      	mov	r1, r0
    20f8:	2000      	movs	r0, #0
    20fa:	f7fe ffff 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    20fe:	2001      	movs	r0, #1
    2100:	bd10      	pop	{r4, pc}
    2102:	0000      	.short	0x0000
    2104:	20000dcc 	.word	0x20000dcc

00002108 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    2108:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    210c:	4e80      	ldr	r6, [pc, #512]	; (2310 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    210e:	4680      	mov	r8, r0
    2110:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    2114:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    2118:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    211c:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2120:	2800      	cmp	r0, #0
    2122:	d068      	beq.n	21f6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    2124:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    2128:	4d7a      	ldr	r5, [pc, #488]	; (2314 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    212a:	b125      	cbz	r5, 2136 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    212c:	2100      	movs	r1, #0
    212e:	f640 30c1 	movw	r0, #3009	; 0xbc1
    2132:	f3af 8000 	nop.w
    2136:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    213a:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    213e:	2801      	cmp	r0, #1
    2140:	d018      	beq.n	2174 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    2142:	b2c0      	uxtb	r0, r0
    2144:	2804      	cmp	r0, #4
    2146:	bf1c      	itt	ne
    2148:	2805      	cmpne	r0, #5
    214a:	2806      	cmpne	r0, #6
    214c:	d058      	beq.n	2200 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    214e:	b12d      	cbz	r5, 215c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2150:	f04f 0100 	mov.w	r1, #0
    2154:	f640 30cd 	movw	r0, #3021	; 0xbcd
    2158:	f3af 8000 	nop.w
    215c:	f001 fc44 	bl	39e8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2160:	b125      	cbz	r5, 216c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    2162:	2100      	movs	r1, #0
    2164:	f640 30d1 	movw	r0, #3025	; 0xbd1
    2168:	f3af 8000 	nop.w
    216c:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2170:	2801      	cmp	r0, #1
    2172:	d1e6      	bne.n	2142 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2174:	2401      	movs	r4, #1
    2176:	b125      	cbz	r5, 2182 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2178:	2100      	movs	r1, #0
    217a:	f640 30d8 	movw	r0, #3032	; 0xbd8
    217e:	f3af 8000 	nop.w
    2182:	2c00      	cmp	r4, #0
    2184:	d042      	beq.n	220c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    2186:	2000      	movs	r0, #0
    2188:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    218c:	b125      	cbz	r5, 2198 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    218e:	2100      	movs	r1, #0
    2190:	f640 30dd 	movw	r0, #3037	; 0xbdd
    2194:	f3af 8000 	nop.w
    2198:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    219c:	2001      	movs	r0, #1
    219e:	ea20 090b 	bic.w	r9, r0, fp
    21a2:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    21a6:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    21aa:	2240      	movs	r2, #64	; 0x40
    21ac:	f00a f9d4 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    21b0:	b125      	cbz	r5, 21bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    21b2:	2100      	movs	r1, #0
    21b4:	f240 50cd 	movw	r0, #1485	; 0x5cd
    21b8:	f3af 8000 	nop.w
    21bc:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    21c0:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    21c4:	6a00      	ldr	r0, [r0, #32]
    21c6:	f8ca 0020 	str.w	r0, [sl, #32]
    21ca:	b125      	cbz	r5, 21d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    21cc:	2100      	movs	r1, #0
    21ce:	f240 50d1 	movw	r0, #1489	; 0x5d1
    21d2:	f3af 8000 	nop.w
    21d6:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    21da:	f88d 0000 	strb.w	r0, [sp]
    21de:	f89d 0000 	ldrb.w	r0, [sp]
    21e2:	b1d0      	cbz	r0, 221a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    21e4:	2d00      	cmp	r5, #0
    21e6:	bf1c      	itt	ne
    21e8:	2100      	movne	r1, #0
    21ea:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    21ee:	d0c2      	beq.n	2176 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    21f0:	f3af 8000 	nop.w
    21f4:	e7bf      	b.n	2176 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    21f6:	f640 31b8 	movw	r1, #3000	; 0xbb8
    21fa:	2070      	movs	r0, #112	; 0x70
    21fc:	f001 face 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2200:	464a      	mov	r2, r9
    2202:	4641      	mov	r1, r8
    2204:	2001      	movs	r0, #1
    2206:	f7fe ff79 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    220a:	e7a9      	b.n	2160 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    220c:	4842      	ldr	r0, [pc, #264]	; (2318 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    220e:	2800      	cmp	r0, #0
    2210:	bf18      	it	ne
    2212:	f3af 8000 	nopne.w
    2216:	b662      	cpsie	i
    2218:	e7b5      	b.n	2186 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    221a:	b125      	cbz	r5, 2226 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    221c:	2100      	movs	r1, #0
    221e:	f640 30e7 	movw	r0, #3047	; 0xbe7
    2222:	f3af 8000 	nop.w
    2226:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    222a:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    222e:	4614      	mov	r4, r2
    2230:	f04f 0b20 	mov.w	fp, #32
    2234:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2238:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    223c:	e003      	b.n	2246 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    223e:	46a3      	mov	fp, r4
    2240:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    2244:	785c      	ldrb	r4, [r3, #1]
    2246:	4544      	cmp	r4, r8
    2248:	d002      	beq.n	2250 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    224a:	2c20      	cmp	r4, #32
    224c:	d02b      	beq.n	22a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    224e:	e7f6      	b.n	223e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    2250:	2c20      	cmp	r4, #32
    2252:	d028      	beq.n	22a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2254:	42a2      	cmp	r2, r4
    2256:	d104      	bne.n	2262 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    2258:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    225c:	7840      	ldrb	r0, [r0, #1]
    225e:	7008      	strb	r0, [r1, #0]
    2260:	e005      	b.n	226e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    2262:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    2266:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    226a:	7849      	ldrb	r1, [r1, #1]
    226c:	7041      	strb	r1, [r0, #1]
    226e:	f1ba 0f00 	cmp.w	sl, #0
    2272:	d011      	beq.n	2298 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    2274:	b125      	cbz	r5, 2280 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    2276:	2100      	movs	r1, #0
    2278:	f240 502f 	movw	r0, #1327	; 0x52f
    227c:	f3af 8000 	nop.w
    2280:	f89a 0000 	ldrb.w	r0, [sl]
    2284:	42a0      	cmp	r0, r4
    2286:	d107      	bne.n	2298 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    2288:	b125      	cbz	r5, 2294 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    228a:	2100      	movs	r1, #0
    228c:	f240 5032 	movw	r0, #1330	; 0x532
    2290:	f3af 8000 	nop.w
    2294:	f88a b000 	strb.w	fp, [sl]
    2298:	b15d      	cbz	r5, 22b2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    229a:	2100      	movs	r1, #0
    229c:	f240 5037 	movw	r0, #1335	; 0x537
    22a0:	f3af 8000 	nop.w
    22a4:	e000      	b.n	22a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    22a6:	b125      	cbz	r5, 22b2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    22a8:	2100      	movs	r1, #0
    22aa:	f640 30eb 	movw	r0, #3051	; 0xbeb
    22ae:	f3af 8000 	nop.w
    22b2:	481a      	ldr	r0, [pc, #104]	; (231c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    22b4:	2800      	cmp	r0, #0
    22b6:	bf18      	it	ne
    22b8:	f3af 8000 	nopne.w
    22bc:	f3ef 8410 	mrs	r4, PRIMASK
    22c0:	b672      	cpsid	i
    22c2:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    22c6:	f88d 0000 	strb.w	r0, [sp]
    22ca:	f89d 0000 	ldrb.w	r0, [sp]
    22ce:	b138      	cbz	r0, 22e0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    22d0:	2d00      	cmp	r5, #0
    22d2:	bf1c      	itt	ne
    22d4:	2100      	movne	r1, #0
    22d6:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    22da:	f43f af4c 	beq.w	2176 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    22de:	e787      	b.n	21f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    22e0:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    22e4:	2001      	movs	r0, #1
    22e6:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    22ea:	b154      	cbz	r4, 2302 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    22ec:	2d00      	cmp	r5, #0
    22ee:	bf08      	it	eq
    22f0:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22f4:	2100      	movs	r1, #0
    22f6:	f640 30fe 	movw	r0, #3070	; 0xbfe
    22fa:	f3af 8000 	nop.w
    22fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2302:	4805      	ldr	r0, [pc, #20]	; (2318 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    2304:	2800      	cmp	r0, #0
    2306:	bf18      	it	ne
    2308:	f3af 8000 	nopne.w
    230c:	b662      	cpsie	i
    230e:	e7ed      	b.n	22ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    2310:	20000dcc 	.word	0x20000dcc
	...

00002320 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    2320:	b570      	push	{r4, r5, r6, lr}
    2322:	460d      	mov	r5, r1
    2324:	4606      	mov	r6, r0
    2326:	f001 f9af 	bl	3688 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    232a:	480f      	ldr	r0, [pc, #60]	; (2368 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    232c:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    2330:	2400      	movs	r4, #0
    2332:	3880      	subs	r0, #128	; 0x80
    2334:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2338:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    233c:	b129      	cbz	r1, 234a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    233e:	1c61      	adds	r1, r4, #1
    2340:	b2cc      	uxtb	r4, r1
    2342:	2c20      	cmp	r4, #32
    2344:	d3f8      	bcc.n	2338 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    2346:	2020      	movs	r0, #32
    2348:	bd70      	pop	{r4, r5, r6, pc}
    234a:	4808      	ldr	r0, [pc, #32]	; (236c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    234c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2350:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    2354:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    2358:	4621      	mov	r1, r4
    235a:	6045      	str	r5, [r0, #4]
    235c:	2001      	movs	r0, #1
    235e:	f7fe fecd 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    2362:	4620      	mov	r0, r4
    2364:	bd70      	pop	{r4, r5, r6, pc}
    2366:	0000      	.short	0x0000
    2368:	20000dcc 	.word	0x20000dcc
    236c:	20000a4c 	.word	0x20000a4c

00002370 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2374:	b083      	sub	sp, #12
    2376:	f000 fb2b 	bl	29d0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    237a:	4605      	mov	r5, r0
    237c:	f000 fdf4 	bl	2f68 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2380:	4c67      	ldr	r4, [pc, #412]	; (2520 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    2382:	68a0      	ldr	r0, [r4, #8]
    2384:	f1b0 3fff 	cmp.w	r0, #4294967295
    2388:	bf1c      	itt	ne
    238a:	f04f 30ff 	movne.w	r0, #4294967295
    238e:	60a0      	strne	r0, [r4, #8]
    2390:	7fa0      	ldrb	r0, [r4, #30]
    2392:	f8df b190 	ldr.w	fp, [pc, #400]	; 2524 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    2396:	b9a8      	cbnz	r0, 23c4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    2398:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    239c:	1a08      	subs	r0, r1, r0
    239e:	0200      	lsls	r0, r0, #8
    23a0:	17c1      	asrs	r1, r0, #31
    23a2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    23a6:	1200      	asrs	r0, r0, #8
    23a8:	f44f 710c 	mov.w	r1, #560	; 0x230
    23ac:	f009 ff93 	bl	c2d6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    23b0:	6921      	ldr	r1, [r4, #16]
    23b2:	4408      	add	r0, r1
    23b4:	1a28      	subs	r0, r5, r0
    23b6:	0200      	lsls	r0, r0, #8
    23b8:	17c1      	asrs	r1, r0, #31
    23ba:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    23be:	1200      	asrs	r0, r0, #8
    23c0:	0fc0      	lsrs	r0, r0, #31
    23c2:	d013      	beq.n	23ec <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    23c4:	7e60      	ldrb	r0, [r4, #25]
    23c6:	b328      	cbz	r0, 2414 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    23c8:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    23cc:	f88d 0000 	strb.w	r0, [sp]
    23d0:	f89d 0000 	ldrb.w	r0, [sp]
    23d4:	b1f0      	cbz	r0, 2414 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    23d6:	f000 fc09 	bl	2bec <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    23da:	bf00      	nop
    23dc:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    23e0:	b1f0      	cbz	r0, 2420 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    23e2:	f240 4147 	movw	r1, #1095	; 0x447
    23e6:	2070      	movs	r0, #112	; 0x70
    23e8:	f001 f9d8 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23ec:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    23f0:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    23f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    23f8:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    23fc:	6840      	ldr	r0, [r0, #4]
    23fe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2402:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    2406:	2108      	movs	r1, #8
    2408:	4790      	blx	r2
    240a:	f44f 6186 	mov.w	r1, #1072	; 0x430
    240e:	2070      	movs	r0, #112	; 0x70
    2410:	f001 f9c4 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2414:	1ce8      	adds	r0, r5, #3
    2416:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    241a:	f000 fadf 	bl	29dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    241e:	e7dd      	b.n	23dc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    2420:	f04f 0a01 	mov.w	sl, #1
    2424:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    2428:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    242c:	2820      	cmp	r0, #32
    242e:	d024      	beq.n	247a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    2430:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    2434:	2020      	movs	r0, #32
    2436:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    243a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    243e:	2600      	movs	r6, #0
    2440:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2444:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    2448:	4837      	ldr	r0, [pc, #220]	; (2528 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    244a:	6026      	str	r6, [r4, #0]
    244c:	7800      	ldrb	r0, [r0, #0]
    244e:	2802      	cmp	r0, #2
    2450:	bf16      	itet	ne
    2452:	2803      	cmpne	r0, #3
    2454:	2001      	moveq	r0, #1
    2456:	2000      	movne	r0, #0
    2458:	7720      	strb	r0, [r4, #28]
    245a:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    245e:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    2462:	f899 0020 	ldrb.w	r0, [r9, #32]
    2466:	2820      	cmp	r0, #32
    2468:	d031      	beq.n	24ce <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    246a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    246e:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    2472:	7d81      	ldrb	r1, [r0, #22]
    2474:	2901      	cmp	r1, #1
    2476:	d005      	beq.n	2484 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    2478:	e029      	b.n	24ce <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    247a:	f240 414a 	movw	r1, #1098	; 0x44a
    247e:	2070      	movs	r0, #112	; 0x70
    2480:	f001 f98c 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2484:	46ab      	mov	fp, r5
    2486:	f100 0508 	add.w	r5, r0, #8
    248a:	8a40      	ldrh	r0, [r0, #18]
    248c:	aa01      	add	r2, sp, #4
    248e:	4669      	mov	r1, sp
    2490:	f000 f940 	bl	2714 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2494:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2498:	2820      	cmp	r0, #32
    249a:	d004      	beq.n	24a6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    249c:	6920      	ldr	r0, [r4, #16]
    249e:	1d40      	adds	r0, r0, #5
    24a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    24a4:	e00b      	b.n	24be <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    24a6:	8968      	ldrh	r0, [r5, #10]
    24a8:	f10b 0b09 	add.w	fp, fp, #9
    24ac:	b128      	cbz	r0, 24ba <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    24ae:	f001 f8fd 	bl	36ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    24b2:	2800      	cmp	r0, #0
    24b4:	bf08      	it	eq
    24b6:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    24ba:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    24be:	e9d5 2100 	ldrd	r2, r1, [r5]
    24c2:	1a89      	subs	r1, r1, r2
    24c4:	6028      	str	r0, [r5, #0]
    24c6:	4408      	add	r0, r1
    24c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    24cc:	6068      	str	r0, [r5, #4]
    24ce:	4639      	mov	r1, r7
    24d0:	2001      	movs	r0, #1
    24d2:	f7fe fe43 	bl	115c <CONFIG_FPROTECT_BLOCK_SIZE+0x15c>
    24d6:	2800      	cmp	r0, #0
    24d8:	d0f9      	beq.n	24ce <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    24da:	4814      	ldr	r0, [pc, #80]	; (252c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    24dc:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    24e0:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    24e4:	2802      	cmp	r0, #2
    24e6:	d104      	bne.n	24f2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    24e8:	463a      	mov	r2, r7
    24ea:	4641      	mov	r1, r8
    24ec:	2006      	movs	r0, #6
    24ee:	f7fe fe05 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    24f2:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    24f6:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    24fa:	2820      	cmp	r0, #32
    24fc:	d003      	beq.n	2506 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    24fe:	480c      	ldr	r0, [pc, #48]	; (2530 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    2500:	7840      	ldrb	r0, [r0, #1]
    2502:	f001 fa1b 	bl	393c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2506:	7f20      	ldrb	r0, [r4, #28]
    2508:	2800      	cmp	r0, #0
    250a:	bf04      	itt	eq
    250c:	b003      	addeq	sp, #12
    250e:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2512:	f000 fd73 	bl	2ffc <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    2516:	7726      	strb	r6, [r4, #28]
    2518:	7766      	strb	r6, [r4, #29]
    251a:	b003      	add	sp, #12
    251c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2520:	20000dcc 	.word	0x20000dcc
    2524:	20000a4c 	.word	0x20000a4c
    2528:	20000012 	.word	0x20000012
    252c:	20000d4c 	.word	0x20000d4c
    2530:	20000010 	.word	0x20000010

00002534 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2534:	b510      	push	{r4, lr}
    2536:	4c32      	ldr	r4, [pc, #200]	; (2600 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    2538:	b082      	sub	sp, #8
    253a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    253e:	2920      	cmp	r1, #32
    2540:	d008      	beq.n	2554 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    2542:	68a1      	ldr	r1, [r4, #8]
    2544:	f1b1 3fff 	cmp.w	r1, #4294967295
    2548:	d009      	beq.n	255e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    254a:	f640 21e9 	movw	r1, #2793	; 0xae9
    254e:	2070      	movs	r0, #112	; 0x70
    2550:	f001 f924 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2554:	f640 21e8 	movw	r1, #2792	; 0xae8
    2558:	2070      	movs	r0, #112	; 0x70
    255a:	f001 f91f 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    255e:	6862      	ldr	r2, [r4, #4]
    2560:	4601      	mov	r1, r0
    2562:	4b28      	ldr	r3, [pc, #160]	; (2604 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    2564:	1850      	adds	r0, r2, r1
    2566:	429a      	cmp	r2, r3
    2568:	d904      	bls.n	2574 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    256a:	f240 6109 	movw	r1, #1545	; 0x609
    256e:	2070      	movs	r0, #112	; 0x70
    2570:	f001 f914 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2574:	4a24      	ldr	r2, [pc, #144]	; (2608 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    2576:	4291      	cmp	r1, r2
    2578:	dd04      	ble.n	2584 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    257a:	f240 610a 	movw	r1, #1546	; 0x60a
    257e:	2070      	movs	r0, #112	; 0x70
    2580:	f001 f90c 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2584:	4a21      	ldr	r2, [pc, #132]	; (260c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    2586:	4291      	cmp	r1, r2
    2588:	da04      	bge.n	2594 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    258a:	f240 610b 	movw	r1, #1547	; 0x60b
    258e:	2070      	movs	r0, #112	; 0x70
    2590:	f001 f904 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2594:	491e      	ldr	r1, [pc, #120]	; (2610 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    2596:	4281      	cmp	r1, r0
    2598:	bfdc      	itt	le
    259a:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    259e:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    25a2:	dd05      	ble.n	25b0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    25a4:	2800      	cmp	r0, #0
    25a6:	bfbc      	itt	lt
    25a8:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    25ac:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    25b0:	aa01      	add	r2, sp, #4
    25b2:	4669      	mov	r1, sp
    25b4:	f000 f8ae 	bl	2714 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    25b8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    25bc:	280f      	cmp	r0, #15
    25be:	bf8c      	ite	hi
    25c0:	2001      	movhi	r0, #1
    25c2:	2000      	movls	r0, #0
    25c4:	9900      	ldr	r1, [sp, #0]
    25c6:	4408      	add	r0, r1
    25c8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    25cc:	60a1      	str	r1, [r4, #8]
    25ce:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    25d2:	f88d 0000 	strb.w	r0, [sp]
    25d6:	f89d 0000 	ldrb.w	r0, [sp]
    25da:	2800      	cmp	r0, #0
    25dc:	bf04      	itt	eq
    25de:	b002      	addeq	sp, #8
    25e0:	bd10      	popeq	{r4, pc}
    25e2:	2301      	movs	r3, #1
    25e4:	2203      	movs	r2, #3
    25e6:	2005      	movs	r0, #5
    25e8:	f000 fb7c 	bl	2ce4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    25ec:	2800      	cmp	r0, #0
    25ee:	bf1c      	itt	ne
    25f0:	b002      	addne	sp, #8
    25f2:	bd10      	popne	{r4, pc}
    25f4:	f640 21f1 	movw	r1, #2801	; 0xaf1
    25f8:	2070      	movs	r0, #112	; 0x70
    25fa:	f001 f8cf 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25fe:	0000      	.short	0x0000
    2600:	20000dcc 	.word	0x20000dcc
    2604:	1e847fff 	.word	0x1e847fff
    2608:	07a12000 	.word	0x07a12000
    260c:	f85ee000 	.word	0xf85ee000
    2610:	1e848000 	.word	0x1e848000

00002614 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    2614:	b570      	push	{r4, r5, r6, lr}
    2616:	4c1e      	ldr	r4, [pc, #120]	; (2690 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    2618:	2120      	movs	r1, #32
    261a:	f884 1020 	strb.w	r1, [r4, #32]
    261e:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    2622:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    2626:	2000      	movs	r0, #0
    2628:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    262c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2630:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    2634:	1e42      	subs	r2, r0, #1
    2636:	60a2      	str	r2, [r4, #8]
    2638:	6020      	str	r0, [r4, #0]
    263a:	77a0      	strb	r0, [r4, #30]
    263c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    2640:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2644:	7720      	strb	r0, [r4, #28]
    2646:	7760      	strb	r0, [r4, #29]
    2648:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    264c:	4911      	ldr	r1, [pc, #68]	; (2694 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    264e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    2652:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    2656:	7008      	strb	r0, [r1, #0]
    2658:	7048      	strb	r0, [r1, #1]
    265a:	8048      	strh	r0, [r1, #2]
    265c:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2660:	2210      	movs	r2, #16
    2662:	7088      	strb	r0, [r1, #2]
    2664:	f801 0f04 	strb.w	r0, [r1, #4]!
    2668:	1e52      	subs	r2, r2, #1
    266a:	d1fa      	bne.n	2662 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    266c:	4d0a      	ldr	r5, [pc, #40]	; (2698 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    266e:	2601      	movs	r6, #1
    2670:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2674:	20ff      	movs	r0, #255	; 0xff
    2676:	7028      	strb	r0, [r5, #0]
    2678:	4808      	ldr	r0, [pc, #32]	; (269c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    267a:	f001 f941 	bl	3900 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    267e:	7068      	strb	r0, [r5, #1]
    2680:	f001 f99c 	bl	39bc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2684:	60a8      	str	r0, [r5, #8]
    2686:	f000 fce7 	bl	3058 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    268a:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    268e:	bd70      	pop	{r4, r5, r6, pc}
    2690:	20000dcc 	.word	0x20000dcc
    2694:	20000012 	.word	0x20000012
    2698:	20000010 	.word	0x20000010
    269c:	00000fb9 	.word	0x00000fb9

000026a0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    26a0:	b570      	push	{r4, r5, r6, lr}
    26a2:	4605      	mov	r5, r0
    26a4:	2001      	movs	r0, #1
    26a6:	fa00 f405 	lsl.w	r4, r0, r5
    26aa:	460e      	mov	r6, r1
    26ac:	2a00      	cmp	r2, #0
    26ae:	bf08      	it	eq
    26b0:	4808      	ldreq	r0, [pc, #32]	; (26d4 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    26b2:	d00c      	beq.n	26ce <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    26b4:	2000      	movs	r0, #0
    26b6:	f000 fcb5 	bl	3024 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    26ba:	00e9      	lsls	r1, r5, #3
    26bc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    26c0:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    26c4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    26c8:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    26cc:	4802      	ldr	r0, [pc, #8]	; (26d8 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    26ce:	6004      	str	r4, [r0, #0]
    26d0:	bd70      	pop	{r4, r5, r6, pc}
    26d2:	0000      	.short	0x0000
    26d4:	4001f508 	.word	0x4001f508
    26d8:	4001f504 	.word	0x4001f504

000026dc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    26dc:	0b41      	lsrs	r1, r0, #13
    26de:	f248 6237 	movw	r2, #34359	; 0x8637
    26e2:	4351      	muls	r1, r2
    26e4:	0c0a      	lsrs	r2, r1, #16
    26e6:	4b09      	ldr	r3, [pc, #36]	; (270c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    26e8:	0251      	lsls	r1, r2, #9
    26ea:	fb02 0203 	mla	r2, r2, r3, r0
    26ee:	4808      	ldr	r0, [pc, #32]	; (2710 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    26f0:	4350      	muls	r0, r2
    26f2:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    26f6:	306e      	adds	r0, #110	; 0x6e
    26f8:	0d40      	lsrs	r0, r0, #21
    26fa:	425b      	negs	r3, r3
    26fc:	fb10 f303 	smulbb	r3, r0, r3
    2700:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    2704:	bf88      	it	hi
    2706:	1c49      	addhi	r1, r1, #1
    2708:	4408      	add	r0, r1
    270a:	4770      	bx	lr
    270c:	ffffc2f7 	.word	0xffffc2f7
    2710:	00010c6f 	.word	0x00010c6f

00002714 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    2714:	0b43      	lsrs	r3, r0, #13
    2716:	f248 6c37 	movw	ip, #34359	; 0x8637
    271a:	fb03 f30c 	mul.w	r3, r3, ip
    271e:	b430      	push	{r4, r5}
    2720:	0c1b      	lsrs	r3, r3, #16
    2722:	f8df c044 	ldr.w	ip, [pc, #68]	; 2768 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    2726:	025c      	lsls	r4, r3, #9
    2728:	fb03 030c 	mla	r3, r3, ip, r0
    272c:	480f      	ldr	r0, [pc, #60]	; (276c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    272e:	4358      	muls	r0, r3
    2730:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    2734:	eb04 000c 	add.w	r0, r4, ip
    2738:	f643 5409 	movw	r4, #15625	; 0x3d09
    273c:	fb1c f404 	smulbb	r4, ip, r4
    2740:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    2744:	f643 5508 	movw	r5, #15624	; 0x3d08
    2748:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    274c:	442c      	add	r4, r5
    274e:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    2752:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    2756:	bf84      	itt	hi
    2758:	f04f 0c00 	movhi.w	ip, #0
    275c:	1c40      	addhi	r0, r0, #1
    275e:	6008      	str	r0, [r1, #0]
    2760:	f882 c000 	strb.w	ip, [r2]
    2764:	bc30      	pop	{r4, r5}
    2766:	4770      	bx	lr
    2768:	ffffc2f7 	.word	0xffffc2f7
    276c:	00010c6f 	.word	0x00010c6f

00002770 <MPSL_IRQ_RTC0_Handler>:
    2770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2774:	4c36      	ldr	r4, [pc, #216]	; (2850 <MPSL_IRQ_RTC0_Handler+0xe0>)
    2776:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    277a:	f44f 6600 	mov.w	r6, #2048	; 0x800
    277e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2782:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2786:	f04f 0500 	mov.w	r5, #0
    278a:	d019      	beq.n	27c0 <MPSL_IRQ_RTC0_Handler+0x50>
    278c:	4831      	ldr	r0, [pc, #196]	; (2854 <MPSL_IRQ_RTC0_Handler+0xe4>)
    278e:	6800      	ldr	r0, [r0, #0]
    2790:	b1b0      	cbz	r0, 27c0 <MPSL_IRQ_RTC0_Handler+0x50>
    2792:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2796:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    279a:	482f      	ldr	r0, [pc, #188]	; (2858 <MPSL_IRQ_RTC0_Handler+0xe8>)
    279c:	6800      	ldr	r0, [r0, #0]
    279e:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    27a2:	1a40      	subs	r0, r0, r1
    27a4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    27a8:	2802      	cmp	r0, #2
    27aa:	d302      	bcc.n	27b2 <MPSL_IRQ_RTC0_Handler+0x42>
    27ac:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    27b0:	d306      	bcc.n	27c0 <MPSL_IRQ_RTC0_Handler+0x50>
    27b2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    27b6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    27ba:	2004      	movs	r0, #4
    27bc:	f7fe ff50 	bl	1660 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27c0:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27c4:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    27c8:	d019      	beq.n	27fe <MPSL_IRQ_RTC0_Handler+0x8e>
    27ca:	4824      	ldr	r0, [pc, #144]	; (285c <MPSL_IRQ_RTC0_Handler+0xec>)
    27cc:	6800      	ldr	r0, [r0, #0]
    27ce:	b1b0      	cbz	r0, 27fe <MPSL_IRQ_RTC0_Handler+0x8e>
    27d0:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    27d4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27d8:	4821      	ldr	r0, [pc, #132]	; (2860 <MPSL_IRQ_RTC0_Handler+0xf0>)
    27da:	6800      	ldr	r0, [r0, #0]
    27dc:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    27e0:	1a40      	subs	r0, r0, r1
    27e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    27e6:	2802      	cmp	r0, #2
    27e8:	d302      	bcc.n	27f0 <MPSL_IRQ_RTC0_Handler+0x80>
    27ea:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    27ee:	d306      	bcc.n	27fe <MPSL_IRQ_RTC0_Handler+0x8e>
    27f0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    27f4:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    27f8:	2005      	movs	r0, #5
    27fa:	f7fe ff31 	bl	1660 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27fe:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2802:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2806:	bf08      	it	eq
    2808:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    280c:	4815      	ldr	r0, [pc, #84]	; (2864 <MPSL_IRQ_RTC0_Handler+0xf4>)
    280e:	6800      	ldr	r0, [r0, #0]
    2810:	2800      	cmp	r0, #0
    2812:	bf08      	it	eq
    2814:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2818:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    281c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2820:	4811      	ldr	r0, [pc, #68]	; (2868 <MPSL_IRQ_RTC0_Handler+0xf8>)
    2822:	6800      	ldr	r0, [r0, #0]
    2824:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    2828:	1a40      	subs	r0, r0, r1
    282a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    282e:	2802      	cmp	r0, #2
    2830:	d304      	bcc.n	283c <MPSL_IRQ_RTC0_Handler+0xcc>
    2832:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2836:	bf38      	it	cc
    2838:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    283c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2840:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2844:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2848:	2006      	movs	r0, #6
    284a:	f7fe bf09 	b.w	1660 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    284e:	0000      	.short	0x0000
    2850:	4000b000 	.word	0x4000b000
    2854:	4000b140 	.word	0x4000b140
    2858:	4000b540 	.word	0x4000b540
    285c:	4000b144 	.word	0x4000b144
    2860:	4000b544 	.word	0x4000b544
    2864:	4000b148 	.word	0x4000b148
    2868:	4000b548 	.word	0x4000b548

0000286c <MPSL_IRQ_TIMER0_Handler>:
    286c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2870:	4d38      	ldr	r5, [pc, #224]	; (2954 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    2872:	7828      	ldrb	r0, [r5, #0]
    2874:	2804      	cmp	r0, #4
    2876:	d068      	beq.n	294a <MPSL_IRQ_TIMER0_Handler+0xde>
    2878:	1ce8      	adds	r0, r5, #3
    287a:	2201      	movs	r2, #1
    287c:	7801      	ldrb	r1, [r0, #0]
    287e:	b159      	cbz	r1, 2898 <MPSL_IRQ_TIMER0_Handler+0x2c>
    2880:	2901      	cmp	r1, #1
    2882:	bf08      	it	eq
    2884:	706a      	strbeq	r2, [r5, #1]
    2886:	d002      	beq.n	288e <MPSL_IRQ_TIMER0_Handler+0x22>
    2888:	7869      	ldrb	r1, [r5, #1]
    288a:	2900      	cmp	r1, #0
    288c:	d058      	beq.n	2940 <MPSL_IRQ_TIMER0_Handler+0xd4>
    288e:	2102      	movs	r1, #2
    2890:	7001      	strb	r1, [r0, #0]
    2892:	7840      	ldrb	r0, [r0, #1]
    2894:	f000 fafa 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2898:	4c2f      	ldr	r4, [pc, #188]	; (2958 <MPSL_IRQ_TIMER0_Handler+0xec>)
    289a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    289e:	f04f 0800 	mov.w	r8, #0
    28a2:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    28a6:	f44f 7780 	mov.w	r7, #256	; 0x100
    28aa:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    28ae:	d00a      	beq.n	28c6 <MPSL_IRQ_TIMER0_Handler+0x5a>
    28b0:	482a      	ldr	r0, [pc, #168]	; (295c <MPSL_IRQ_TIMER0_Handler+0xf0>)
    28b2:	6800      	ldr	r0, [r0, #0]
    28b4:	b138      	cbz	r0, 28c6 <MPSL_IRQ_TIMER0_Handler+0x5a>
    28b6:	2003      	movs	r0, #3
    28b8:	f000 fae8 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    28bc:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    28c0:	2003      	movs	r0, #3
    28c2:	f7fe fecd 	bl	1660 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    28c6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    28ca:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    28ce:	d00a      	beq.n	28e6 <MPSL_IRQ_TIMER0_Handler+0x7a>
    28d0:	4823      	ldr	r0, [pc, #140]	; (2960 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    28d2:	6800      	ldr	r0, [r0, #0]
    28d4:	b138      	cbz	r0, 28e6 <MPSL_IRQ_TIMER0_Handler+0x7a>
    28d6:	2002      	movs	r0, #2
    28d8:	f000 fad8 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    28dc:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    28e0:	2002      	movs	r0, #2
    28e2:	f7fe febd 	bl	1660 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    28e6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    28ea:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    28ee:	d00a      	beq.n	2906 <MPSL_IRQ_TIMER0_Handler+0x9a>
    28f0:	481c      	ldr	r0, [pc, #112]	; (2964 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    28f2:	6800      	ldr	r0, [r0, #0]
    28f4:	b138      	cbz	r0, 2906 <MPSL_IRQ_TIMER0_Handler+0x9a>
    28f6:	2001      	movs	r0, #1
    28f8:	f000 fac8 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    28fc:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2900:	2001      	movs	r0, #1
    2902:	f7fe fead 	bl	1660 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2906:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    290a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    290e:	bf08      	it	eq
    2910:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2914:	4814      	ldr	r0, [pc, #80]	; (2968 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    2916:	6800      	ldr	r0, [r0, #0]
    2918:	2800      	cmp	r0, #0
    291a:	bf08      	it	eq
    291c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2920:	2000      	movs	r0, #0
    2922:	f000 fab3 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2926:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    292a:	2004      	movs	r0, #4
    292c:	7028      	strb	r0, [r5, #0]
    292e:	f8c5 8008 	str.w	r8, [r5, #8]
    2932:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    2936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    293a:	2000      	movs	r0, #0
    293c:	f7fe be90 	b.w	1660 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2940:	f240 316a 	movw	r1, #874	; 0x36a
    2944:	206c      	movs	r0, #108	; 0x6c
    2946:	f000 ff29 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    294a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    294e:	2007      	movs	r0, #7
    2950:	f7fe be86 	b.w	1660 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2954:	2000001c 	.word	0x2000001c
    2958:	40008000 	.word	0x40008000
    295c:	4000814c 	.word	0x4000814c
    2960:	40008148 	.word	0x40008148
    2964:	40008144 	.word	0x40008144
    2968:	40008140 	.word	0x40008140
    296c:	2201      	movs	r2, #1
    296e:	0211      	lsls	r1, r2, #8
    2970:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2974:	2000      	movs	r0, #0
    2976:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    297a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    297e:	f3bf 8f4f 	dsb	sy
    2982:	f3bf 8f6f 	isb	sy
    2986:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    298a:	490e      	ldr	r1, [pc, #56]	; (29c4 <MPSL_IRQ_TIMER0_Handler+0x158>)
    298c:	f841 2f04 	str.w	r2, [r1, #4]!
    2990:	1e43      	subs	r3, r0, #1
    2992:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    2996:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    299a:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    299e:	4b0a      	ldr	r3, [pc, #40]	; (29c8 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    29a0:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    29a4:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    29a8:	1d1b      	adds	r3, r3, #4
    29aa:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    29ae:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    29b2:	1d1b      	adds	r3, r3, #4
    29b4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    29b8:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    29bc:	60ca      	str	r2, [r1, #12]
    29be:	4903      	ldr	r1, [pc, #12]	; (29cc <MPSL_IRQ_TIMER0_Handler+0x160>)
    29c0:	7048      	strb	r0, [r1, #1]
    29c2:	4770      	bx	lr
    29c4:	40008000 	.word	0x40008000
    29c8:	40008004 	.word	0x40008004
    29cc:	2000001c 	.word	0x2000001c

000029d0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    29d0:	4801      	ldr	r0, [pc, #4]	; (29d8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    29d2:	6800      	ldr	r0, [r0, #0]
    29d4:	4770      	bx	lr
    29d6:	0000      	.short	0x0000
    29d8:	4000b504 	.word	0x4000b504

000029dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    29dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    29e0:	4e47      	ldr	r6, [pc, #284]	; (2b00 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    29e2:	4605      	mov	r5, r0
    29e4:	1ef7      	subs	r7, r6, #3
    29e6:	7832      	ldrb	r2, [r6, #0]
    29e8:	68f9      	ldr	r1, [r7, #12]
    29ea:	2a01      	cmp	r2, #1
    29ec:	bf04      	itt	eq
    29ee:	42a9      	cmpeq	r1, r5
    29f0:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    29f4:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    29f8:	4b42      	ldr	r3, [pc, #264]	; (2b04 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    29fa:	6018      	str	r0, [r3, #0]
    29fc:	4842      	ldr	r0, [pc, #264]	; (2b08 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    29fe:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2a02:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    2a06:	f100 0304 	add.w	r3, r0, #4
    2a0a:	f04f 0400 	mov.w	r4, #0
    2a0e:	2a00      	cmp	r2, #0
    2a10:	d061      	beq.n	2ad6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    2a12:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    2a16:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    2a1a:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    2a1e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    2a22:	4b3a      	ldr	r3, [pc, #232]	; (2b0c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    2a24:	681b      	ldr	r3, [r3, #0]
    2a26:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    2a2a:	f04f 0801 	mov.w	r8, #1
    2a2e:	2b00      	cmp	r3, #0
    2a30:	bf04      	itt	eq
    2a32:	f44f 6300 	moveq.w	r3, #2048	; 0x800
    2a36:	f8c9 3280 	streq.w	r3, [r9, #640]	; 0x280
    2a3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2a3e:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    2a42:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    2a46:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    2a4a:	f8d0 3504 	ldr.w	r3, [r0, #1284]	; 0x504
    2a4e:	1aeb      	subs	r3, r5, r3
    2a50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2a54:	2b02      	cmp	r3, #2
    2a56:	d34b      	bcc.n	2af0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    2a58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2a5c:	d248      	bcs.n	2af0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    2a5e:	f8c0 5540 	str.w	r5, [r0, #1344]	; 0x540
    2a62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2a66:	f8c0 3344 	str.w	r3, [r0, #836]	; 0x344
    2a6a:	b132      	cbz	r2, 2a7a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9e>
    2a6c:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    2a70:	1a8a      	subs	r2, r1, r2
    2a72:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2a76:	2a02      	cmp	r2, #2
    2a78:	d3f8      	bcc.n	2a6c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x90>
    2a7a:	f8c7 8008 	str.w	r8, [r7, #8]
    2a7e:	703c      	strb	r4, [r7, #0]
    2a80:	f7ff ff74 	bl	296c <MPSL_IRQ_TIMER0_Handler+0x100>
    2a84:	4822      	ldr	r0, [pc, #136]	; (2b10 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    2a86:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    2a8a:	f364 0101 	bfi	r1, r4, #0, #2
    2a8e:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    2a92:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    2a96:	2102      	movs	r1, #2
    2a98:	f361 0201 	bfi	r2, r1, #0, #2
    2a9c:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    2aa0:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    2aa4:	2104      	movs	r1, #4
    2aa6:	f361 0203 	bfi	r2, r1, #0, #4
    2aaa:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    2aae:	f8c0 800c 	str.w	r8, [r0, #12]
    2ab2:	68b9      	ldr	r1, [r7, #8]
    2ab4:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    2ab8:	1580      	asrs	r0, r0, #22
    2aba:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    2abe:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    2ac2:	4914      	ldr	r1, [pc, #80]	; (2b14 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    2ac4:	05c0      	lsls	r0, r0, #23
    2ac6:	6008      	str	r0, [r1, #0]
    2ac8:	2004      	movs	r0, #4
    2aca:	60fd      	str	r5, [r7, #12]
    2acc:	7070      	strb	r0, [r6, #1]
    2ace:	f886 8000 	strb.w	r8, [r6]
    2ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2ad6:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    2ada:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    2ade:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    2ae2:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    2ae6:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    2aea:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    2aee:	e798      	b.n	2a22 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x46>
    2af0:	2100      	movs	r1, #0
    2af2:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2af6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    2afa:	206c      	movs	r0, #108	; 0x6c
    2afc:	f000 fe4e 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b00:	2000001f 	.word	0x2000001f
    2b04:	4001f508 	.word	0x4001f508
    2b08:	4000b000 	.word	0x4000b000
    2b0c:	4000b148 	.word	0x4000b148
    2b10:	40008000 	.word	0x40008000
    2b14:	4001f504 	.word	0x4001f504

00002b18 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    2b18:	b570      	push	{r4, r5, r6, lr}
    2b1a:	4c2c      	ldr	r4, [pc, #176]	; (2bcc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    2b1c:	68e2      	ldr	r2, [r4, #12]
    2b1e:	4282      	cmp	r2, r0
    2b20:	bf14      	ite	ne
    2b22:	2101      	movne	r1, #1
    2b24:	2100      	moveq	r1, #0
    2b26:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 2bd0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    2b2a:	f89c 5000 	ldrb.w	r5, [ip]
    2b2e:	2d02      	cmp	r5, #2
    2b30:	d002      	beq.n	2b38 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    2b32:	2900      	cmp	r1, #0
    2b34:	d037      	beq.n	2ba6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8e>
    2b36:	e002      	b.n	2b3e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    2b38:	2900      	cmp	r1, #0
    2b3a:	bf08      	it	eq
    2b3c:	bd70      	popeq	{r4, r5, r6, pc}
    2b3e:	7861      	ldrb	r1, [r4, #1]
    2b40:	b381      	cbz	r1, 2ba4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8c>
    2b42:	4b24      	ldr	r3, [pc, #144]	; (2bd4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    2b44:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2b48:	6019      	str	r1, [r3, #0]
    2b4a:	138b      	asrs	r3, r1, #14
    2b4c:	4922      	ldr	r1, [pc, #136]	; (2bd8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    2b4e:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2b52:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2b56:	2300      	movs	r3, #0
    2b58:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
    2b5c:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    2b60:	1ac3      	subs	r3, r0, r3
    2b62:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2b66:	2b02      	cmp	r3, #2
    2b68:	d327      	bcc.n	2bba <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    2b6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2b6e:	d224      	bcs.n	2bba <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    2b70:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    2b74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2b78:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    2b7c:	b13d      	cbz	r5, 2b8e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x76>
    2b7e:	bf00      	nop
    2b80:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    2b84:	1ad3      	subs	r3, r2, r3
    2b86:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2b8a:	2b02      	cmp	r3, #2
    2b8c:	d3f8      	bcc.n	2b80 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x68>
    2b8e:	4b13      	ldr	r3, [pc, #76]	; (2bdc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    2b90:	2102      	movs	r1, #2
    2b92:	074a      	lsls	r2, r1, #29
    2b94:	601a      	str	r2, [r3, #0]
    2b96:	60e0      	str	r0, [r4, #12]
    2b98:	2004      	movs	r0, #4
    2b9a:	f88c 0001 	strb.w	r0, [ip, #1]
    2b9e:	f88c 1000 	strb.w	r1, [ip]
    2ba2:	bd70      	pop	{r4, r5, r6, pc}
    2ba4:	e004      	b.n	2bb0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x98>
    2ba6:	f240 2102 	movw	r1, #514	; 0x202
    2baa:	206c      	movs	r0, #108	; 0x6c
    2bac:	f000 fdf6 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bb0:	f240 2106 	movw	r1, #518	; 0x206
    2bb4:	206c      	movs	r0, #108	; 0x6c
    2bb6:	f000 fdf1 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bba:	2000      	movs	r0, #0
    2bbc:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    2bc0:	f240 2112 	movw	r1, #530	; 0x212
    2bc4:	206c      	movs	r0, #108	; 0x6c
    2bc6:	f000 fde9 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bca:	0000      	.short	0x0000
    2bcc:	2000001c 	.word	0x2000001c
    2bd0:	2000001f 	.word	0x2000001f
    2bd4:	4001f508 	.word	0x4001f508
    2bd8:	4000b000 	.word	0x4000b000
    2bdc:	4001f504 	.word	0x4001f504

00002be0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2be0:	4801      	ldr	r0, [pc, #4]	; (2be8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2be2:	68c0      	ldr	r0, [r0, #12]
    2be4:	4770      	bx	lr
    2be6:	0000      	.short	0x0000
    2be8:	2000001c 	.word	0x2000001c

00002bec <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2bf0:	4936      	ldr	r1, [pc, #216]	; (2ccc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2bf2:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    2bf6:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    2bfa:	4d35      	ldr	r5, [pc, #212]	; (2cd0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    2bfc:	1d0b      	adds	r3, r1, #4
    2bfe:	2200      	movs	r2, #0
    2c00:	7828      	ldrb	r0, [r5, #0]
    2c02:	b168      	cbz	r0, 2c20 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    2c04:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    2c08:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    2c0c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    2c10:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    2c14:	4b2f      	ldr	r3, [pc, #188]	; (2cd4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2c16:	681b      	ldr	r3, [r3, #0]
    2c18:	f04f 0c01 	mov.w	ip, #1
    2c1c:	b99b      	cbnz	r3, 2c46 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5a>
    2c1e:	e00c      	b.n	2c3a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4e>
    2c20:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    2c24:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    2c28:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    2c2c:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
    2c30:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    2c34:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    2c38:	e7ec      	b.n	2c14 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    2c3a:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2c3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    2c42:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
    2c46:	2802      	cmp	r0, #2
    2c48:	d004      	beq.n	2c54 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x68>
    2c4a:	f240 211e 	movw	r1, #542	; 0x21e
    2c4e:	206c      	movs	r0, #108	; 0x6c
    2c50:	f000 fda4 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c54:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    2c58:	4c1f      	ldr	r4, [pc, #124]	; (2cd8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2c5a:	1cc0      	adds	r0, r0, #3
    2c5c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c60:	68e3      	ldr	r3, [r4, #12]
    2c62:	4e1e      	ldr	r6, [pc, #120]	; (2cdc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2c64:	4298      	cmp	r0, r3
    2c66:	d00c      	beq.n	2c82 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    2c68:	f8d1 7504 	ldr.w	r7, [r1, #1284]	; 0x504
    2c6c:	1bdf      	subs	r7, r3, r7
    2c6e:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2c72:	2f04      	cmp	r7, #4
    2c74:	d305      	bcc.n	2c82 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    2c76:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    2c7a:	d202      	bcs.n	2c82 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    2c7c:	f7ff feae 	bl	29dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2c80:	e01f      	b.n	2cc2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    2c82:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    2c86:	1a18      	subs	r0, r3, r0
    2c88:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c8c:	2802      	cmp	r0, #2
    2c8e:	d315      	bcc.n	2cbc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    2c90:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2c94:	d212      	bcs.n	2cbc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    2c96:	4912      	ldr	r1, [pc, #72]	; (2ce0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    2c98:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2c9c:	6008      	str	r0, [r1, #0]
    2c9e:	f8c4 c008 	str.w	ip, [r4, #8]
    2ca2:	7022      	strb	r2, [r4, #0]
    2ca4:	f8c6 c004 	str.w	ip, [r6, #4]
    2ca8:	f8c6 c00c 	str.w	ip, [r6, #12]
    2cac:	0040      	lsls	r0, r0, #1
    2cae:	1f09      	subs	r1, r1, #4
    2cb0:	6008      	str	r0, [r1, #0]
    2cb2:	2004      	movs	r0, #4
    2cb4:	7068      	strb	r0, [r5, #1]
    2cb6:	f885 c000 	strb.w	ip, [r5]
    2cba:	e002      	b.n	2cc2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    2cbc:	f8c4 c008 	str.w	ip, [r4, #8]
    2cc0:	7022      	strb	r2, [r4, #0]
    2cc2:	68a0      	ldr	r0, [r4, #8]
    2cc4:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    2cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ccc:	4000b000 	.word	0x4000b000
    2cd0:	2000001f 	.word	0x2000001f
    2cd4:	4000b148 	.word	0x4000b148
    2cd8:	2000001c 	.word	0x2000001c
    2cdc:	40008000 	.word	0x40008000
    2ce0:	4001f508 	.word	0x4001f508

00002ce4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2ce8:	f8df c190 	ldr.w	ip, [pc, #400]	; 2e7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x198>
    2cec:	2600      	movs	r6, #0
    2cee:	2701      	movs	r7, #1
    2cf0:	f89c 4000 	ldrb.w	r4, [ip]
    2cf4:	f89c c001 	ldrb.w	ip, [ip, #1]
    2cf8:	f44f 75a0 	mov.w	r5, #320	; 0x140
    2cfc:	2807      	cmp	r0, #7
    2cfe:	d27b      	bcs.n	2df8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    2d00:	e8df f000 	tbb	[pc, r0]
    2d04:	04040404 	.word	0x04040404
    2d08:	006c6c6c 	.word	0x006c6c6c
    2d0c:	f8df 8170 	ldr.w	r8, [pc, #368]	; 2e80 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x19c>
    2d10:	f8d8 900c 	ldr.w	r9, [r8, #12]
    2d14:	f1b9 7f80 	cmp.w	r9, #16777216	; 0x1000000
    2d18:	bf04      	itt	eq
    2d1a:	f898 8001 	ldrbeq.w	r8, [r8, #1]
    2d1e:	f1b8 0f00 	cmpeq.w	r8, #0
    2d22:	d002      	beq.n	2d2a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2d24:	2c02      	cmp	r4, #2
    2d26:	d005      	beq.n	2d34 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x50>
    2d28:	e02c      	b.n	2d84 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa0>
    2d2a:	f240 2151 	movw	r1, #593	; 0x251
    2d2e:	206c      	movs	r0, #108	; 0x6c
    2d30:	f000 fd34 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d34:	f1ac 0804 	sub.w	r8, ip, #4
    2d38:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    2d3c:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    2d40:	f105 4880 	add.w	r8, r5, #1073741824	; 0x40000000
    2d44:	f508 4830 	add.w	r8, r8, #45056	; 0xb000
    2d48:	2500      	movs	r5, #0
    2d4a:	2c01      	cmp	r4, #1
    2d4c:	d002      	beq.n	2d54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x70>
    2d4e:	2c02      	cmp	r4, #2
    2d50:	d00b      	beq.n	2d6a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x86>
    2d52:	e014      	b.n	2d7e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    2d54:	f1bc 0f04 	cmp.w	ip, #4
    2d58:	bf24      	itt	cs
    2d5a:	f8d8 9000 	ldrcs.w	r9, [r8]
    2d5e:	f1b9 0f00 	cmpcs.w	r9, #0
    2d62:	bf08      	it	eq
    2d64:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    2d68:	e009      	b.n	2d7e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    2d6a:	f1bc 0f04 	cmp.w	ip, #4
    2d6e:	bf24      	itt	cs
    2d70:	f8d8 9000 	ldrcs.w	r9, [r8]
    2d74:	f1b9 0f00 	cmpcs.w	r9, #0
    2d78:	bf08      	it	eq
    2d7a:	f045 4580 	orreq.w	r5, r5, #1073741824	; 0x40000000
    2d7e:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
    2d82:	d1e1      	bne.n	2d48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x64>
    2d84:	4c3f      	ldr	r4, [pc, #252]	; (2e84 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a0>)
    2d86:	f100 0c10 	add.w	ip, r0, #16
    2d8a:	fa07 fc0c 	lsl.w	ip, r7, ip
    2d8e:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    2d92:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    2d96:	b1c2      	cbz	r2, 2dca <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe6>
    2d98:	f04f 0840 	mov.w	r8, #64	; 0x40
    2d9c:	eb08 0880 	add.w	r8, r8, r0, lsl #2
    2da0:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    2da4:	44a0      	add	r8, r4
    2da6:	f8c8 7000 	str.w	r7, [r8]
    2daa:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    2dae:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    2db2:	eba1 0000 	sub.w	r0, r1, r0
    2db6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2dba:	4282      	cmp	r2, r0
    2dbc:	bf98      	it	ls
    2dbe:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    2dc2:	bf28      	it	cs
    2dc4:	f8c5 6540 	strcs.w	r6, [r5, #1344]	; 0x540
    2dc8:	d250      	bcs.n	2e6c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2dca:	f8c5 1540 	str.w	r1, [r5, #1344]	; 0x540
    2dce:	2b01      	cmp	r3, #1
    2dd0:	bf08      	it	eq
    2dd2:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    2dd6:	2001      	movs	r0, #1
    2dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2ddc:	b134      	cbz	r4, 2dec <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    2dde:	4584      	cmp	ip, r0
    2de0:	d104      	bne.n	2dec <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    2de2:	f44f 711d 	mov.w	r1, #628	; 0x274
    2de6:	206c      	movs	r0, #108	; 0x6c
    2de8:	f000 fcd8 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2dec:	f1a0 0c04 	sub.w	ip, r0, #4
    2df0:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    2df4:	2b01      	cmp	r3, #1
    2df6:	e000      	b.n	2dfa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    2df8:	e03b      	b.n	2e72 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18e>
    2dfa:	bf0c      	ite	eq
    2dfc:	f04f 0801 	moveq.w	r8, #1
    2e00:	f04f 0800 	movne.w	r8, #0
    2e04:	2c03      	cmp	r4, #3
    2e06:	d304      	bcc.n	2e12 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x12e>
    2e08:	f240 114d 	movw	r1, #333	; 0x14d
    2e0c:	206c      	movs	r0, #108	; 0x6c
    2e0e:	f000 fcc5 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e12:	f8df c074 	ldr.w	ip, [pc, #116]	; 2e88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a4>
    2e16:	f104 0310 	add.w	r3, r4, #16
    2e1a:	fa07 f303 	lsl.w	r3, r7, r3
    2e1e:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    2e22:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    2e26:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    2e2a:	f84c 6004 	str.w	r6, [ip, r4]
    2e2e:	1f00      	subs	r0, r0, #4
    2e30:	b2c0      	uxtb	r0, r0
    2e32:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    2e36:	b16a      	cbz	r2, 2e54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    2e38:	f8dc 4504 	ldr.w	r4, [ip, #1284]	; 0x504
    2e3c:	1b0c      	subs	r4, r1, r4
    2e3e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    2e42:	42a2      	cmp	r2, r4
    2e44:	bf98      	it	ls
    2e46:	f5b4 0f80 	cmpls.w	r4, #4194304	; 0x400000
    2e4a:	bf24      	itt	cs
    2e4c:	2100      	movcs	r1, #0
    2e4e:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    2e52:	d20b      	bcs.n	2e6c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2e54:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2e58:	f1b8 0f00 	cmp.w	r8, #0
    2e5c:	bf18      	it	ne
    2e5e:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    2e62:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    2e66:	2001      	movs	r0, #1
    2e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e6c:	2000      	movs	r0, #0
    2e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e72:	f240 2179 	movw	r1, #633	; 0x279
    2e76:	206c      	movs	r0, #108	; 0x6c
    2e78:	f000 fc90 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e7c:	2000001f 	.word	0x2000001f
    2e80:	2000001c 	.word	0x2000001c
    2e84:	40008000 	.word	0x40008000
    2e88:	4000b000 	.word	0x4000b000

00002e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2e90:	2600      	movs	r6, #0
    2e92:	f44f 77a0 	mov.w	r7, #320	; 0x140
    2e96:	f04f 0801 	mov.w	r8, #1
    2e9a:	2807      	cmp	r0, #7
    2e9c:	d251      	bcs.n	2f42 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb6>
    2e9e:	e8df f000 	tbb	[pc, r0]
    2ea2:	0404      	.short	0x0404
    2ea4:	19190404 	.word	0x19190404
    2ea8:	0019      	.short	0x0019
    2eaa:	f100 0110 	add.w	r1, r0, #16
    2eae:	fa08 f201 	lsl.w	r2, r8, r1
    2eb2:	4926      	ldr	r1, [pc, #152]	; (2f4c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    2eb4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2eb8:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    2ebc:	2200      	movs	r2, #0
    2ebe:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    2ec2:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    2ec6:	508e      	str	r6, [r1, r2]
    2ec8:	4921      	ldr	r1, [pc, #132]	; (2f50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    2eca:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2ece:	9000      	str	r0, [sp, #0]
    2ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2ed4:	4d1f      	ldr	r5, [pc, #124]	; (2f54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    2ed6:	1f01      	subs	r1, r0, #4
    2ed8:	b2cc      	uxtb	r4, r1
    2eda:	7829      	ldrb	r1, [r5, #0]
    2edc:	b179      	cbz	r1, 2efe <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    2ede:	786a      	ldrb	r2, [r5, #1]
    2ee0:	4282      	cmp	r2, r0
    2ee2:	d10c      	bne.n	2efe <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    2ee4:	4a1c      	ldr	r2, [pc, #112]	; (2f58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    2ee6:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2eea:	6010      	str	r0, [r2, #0]
    2eec:	2901      	cmp	r1, #1
    2eee:	bf08      	it	eq
    2ef0:	f7ff fd3c 	bleq	296c <MPSL_IRQ_TIMER0_Handler+0x100>
    2ef4:	702e      	strb	r6, [r5, #0]
    2ef6:	4919      	ldr	r1, [pc, #100]	; (2f5c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    2ef8:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2efc:	60c8      	str	r0, [r1, #12]
    2efe:	f104 0010 	add.w	r0, r4, #16
    2f02:	fa08 f100 	lsl.w	r1, r8, r0
    2f06:	4816      	ldr	r0, [pc, #88]	; (2f60 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    2f08:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    2f0c:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    2f10:	00a1      	lsls	r1, r4, #2
    2f12:	4401      	add	r1, r0
    2f14:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    2f18:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    2f1c:	1a89      	subs	r1, r1, r2
    2f1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2f22:	2902      	cmp	r1, #2
    2f24:	d307      	bcc.n	2f36 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xaa>
    2f26:	eb00 0284 	add.w	r2, r0, r4, lsl #2
    2f2a:	2100      	movs	r1, #0
    2f2c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    2f30:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    2f34:	5046      	str	r6, [r0, r1]
    2f36:	480b      	ldr	r0, [pc, #44]	; (2f64 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    2f38:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    2f3c:	9000      	str	r0, [sp, #0]
    2f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2f42:	f240 21f1 	movw	r1, #753	; 0x2f1
    2f46:	206c      	movs	r0, #108	; 0x6c
    2f48:	f000 fc28 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f4c:	40008000 	.word	0x40008000
    2f50:	40008140 	.word	0x40008140
    2f54:	2000001f 	.word	0x2000001f
    2f58:	4001f508 	.word	0x4001f508
    2f5c:	2000001c 	.word	0x2000001c
    2f60:	4000b000 	.word	0x4000b000
    2f64:	4000b140 	.word	0x4000b140

00002f68 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    2f68:	4920      	ldr	r1, [pc, #128]	; (2fec <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    2f6a:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    2f6e:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    2f72:	481f      	ldr	r0, [pc, #124]	; (2ff0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    2f74:	1d0a      	adds	r2, r1, #4
    2f76:	7803      	ldrb	r3, [r0, #0]
    2f78:	2000      	movs	r0, #0
    2f7a:	b15b      	cbz	r3, 2f94 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    2f7c:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2f80:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2f84:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    2f88:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2f8c:	4919      	ldr	r1, [pc, #100]	; (2ff4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    2f8e:	6809      	ldr	r1, [r1, #0]
    2f90:	b999      	cbnz	r1, 2fba <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x52>
    2f92:	e00c      	b.n	2fae <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x46>
    2f94:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2f98:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2f9c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    2fa0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2fa4:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    2fa8:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2fac:	e7ee      	b.n	2f8c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x24>
    2fae:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2fb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2fb6:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    2fba:	490f      	ldr	r1, [pc, #60]	; (2ff8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    2fbc:	f04f 32ff 	mov.w	r2, #4294967295
    2fc0:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2fc4:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    2fc8:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2fcc:	1d0a      	adds	r2, r1, #4
    2fce:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    2fd2:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2fd6:	1d12      	adds	r2, r2, #4
    2fd8:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    2fdc:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2fe0:	1d12      	adds	r2, r2, #4
    2fe2:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    2fe6:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    2fea:	4770      	bx	lr
    2fec:	4000b000 	.word	0x4000b000
    2ff0:	2000001f 	.word	0x2000001f
    2ff4:	4000b148 	.word	0x4000b148
    2ff8:	40008000 	.word	0x40008000

00002ffc <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    2ffc:	4808      	ldr	r0, [pc, #32]	; (3020 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    2ffe:	f990 0002 	ldrsb.w	r0, [r0, #2]
    3002:	2800      	cmp	r0, #0
    3004:	bfb8      	it	lt
    3006:	4770      	bxlt	lr
    3008:	f000 011f 	and.w	r1, r0, #31
    300c:	2201      	movs	r2, #1
    300e:	fa02 f101 	lsl.w	r1, r2, r1
    3012:	0940      	lsrs	r0, r0, #5
    3014:	0080      	lsls	r0, r0, #2
    3016:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    301a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    301e:	4770      	bx	lr
    3020:	2000001c 	.word	0x2000001c

00003024 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    3024:	b510      	push	{r4, lr}
    3026:	2807      	cmp	r0, #7
    3028:	d20d      	bcs.n	3046 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    302a:	e8df f000 	tbb	[pc, r0]
    302e:	0404      	.short	0x0404
    3030:	06060404 	.word	0x06060404
    3034:	0006      	.short	0x0006
    3036:	4906      	ldr	r1, [pc, #24]	; (3050 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    3038:	e002      	b.n	3040 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    303a:	1f00      	subs	r0, r0, #4
    303c:	4905      	ldr	r1, [pc, #20]	; (3054 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    303e:	b2c0      	uxtb	r0, r0
    3040:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3044:	bd10      	pop	{r4, pc}
    3046:	f240 219d 	movw	r1, #669	; 0x29d
    304a:	206c      	movs	r0, #108	; 0x6c
    304c:	f000 fba6 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3050:	40008140 	.word	0x40008140
    3054:	4000b140 	.word	0x4000b140

00003058 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3058:	b510      	push	{r4, lr}
    305a:	481c      	ldr	r0, [pc, #112]	; (30cc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    305c:	2400      	movs	r4, #0
    305e:	2104      	movs	r1, #4
    3060:	7004      	strb	r4, [r0, #0]
    3062:	1ec0      	subs	r0, r0, #3
    3064:	7001      	strb	r1, [r0, #0]
    3066:	0589      	lsls	r1, r1, #22
    3068:	60c1      	str	r1, [r0, #12]
    306a:	f7ff fc7f 	bl	296c <MPSL_IRQ_TIMER0_Handler+0x100>
    306e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3072:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3076:	f04f 0c01 	mov.w	ip, #1
    307a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    307e:	f3bf 8f4f 	dsb	sy
    3082:	f3bf 8f6f 	isb	sy
    3086:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    308a:	4811      	ldr	r0, [pc, #68]	; (30d0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    308c:	f8c0 c004 	str.w	ip, [r0, #4]
    3090:	f8c0 c008 	str.w	ip, [r0, #8]
    3094:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    3098:	2900      	cmp	r1, #0
    309a:	d1fb      	bne.n	3094 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3c>
    309c:	1e49      	subs	r1, r1, #1
    309e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    30a2:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    30a6:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    30aa:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    30ae:	4909      	ldr	r1, [pc, #36]	; (30d4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    30b0:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    30b4:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    30b8:	1d09      	adds	r1, r1, #4
    30ba:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    30be:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    30c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    30c6:	f8c0 c000 	str.w	ip, [r0]
    30ca:	bd10      	pop	{r4, pc}
    30cc:	2000001f 	.word	0x2000001f
    30d0:	4000b000 	.word	0x4000b000
    30d4:	4000b004 	.word	0x4000b004

000030d8 <MPSL_IRQ_CLOCK_Handler>:
    30d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30dc:	4c16      	ldr	r4, [pc, #88]	; (3138 <MPSL_IRQ_CLOCK_Handler+0x60>)
    30de:	7a60      	ldrb	r0, [r4, #9]
    30e0:	2800      	cmp	r0, #0
    30e2:	d027      	beq.n	3134 <MPSL_IRQ_CLOCK_Handler+0x5c>
    30e4:	f44f 7180 	mov.w	r1, #256	; 0x100
    30e8:	058d      	lsls	r5, r1, #22
    30ea:	4628      	mov	r0, r5
    30ec:	f009 f917 	bl	c31e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    30f0:	4680      	mov	r8, r0
    30f2:	f44f 7182 	mov.w	r1, #260	; 0x104
    30f6:	4628      	mov	r0, r5
    30f8:	f009 f911 	bl	c31e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    30fc:	2600      	movs	r6, #0
    30fe:	4607      	mov	r7, r0
    3100:	f1b8 0f00 	cmp.w	r8, #0
    3104:	d009      	beq.n	311a <MPSL_IRQ_CLOCK_Handler+0x42>
    3106:	2001      	movs	r0, #1
    3108:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    310c:	7920      	ldrb	r0, [r4, #4]
    310e:	b120      	cbz	r0, 311a <MPSL_IRQ_CLOCK_Handler+0x42>
    3110:	7126      	strb	r6, [r4, #4]
    3112:	69e0      	ldr	r0, [r4, #28]
    3114:	b108      	cbz	r0, 311a <MPSL_IRQ_CLOCK_Handler+0x42>
    3116:	4780      	blx	r0
    3118:	61e6      	str	r6, [r4, #28]
    311a:	b137      	cbz	r7, 312a <MPSL_IRQ_CLOCK_Handler+0x52>
    311c:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3120:	2002      	movs	r0, #2
    3122:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3126:	f000 fa6d 	bl	3604 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    312a:	4640      	mov	r0, r8
    312c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3130:	f000 b85a 	b.w	31e8 <MPSL_IRQ_CLOCK_Handler+0x110>
    3134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3138:	2000002c 	.word	0x2000002c
    313c:	b510      	push	{r4, lr}
    313e:	f009 f998 	bl	c472 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3142:	b930      	cbnz	r0, 3152 <MPSL_IRQ_CLOCK_Handler+0x7a>
    3144:	f009 f9b6 	bl	c4b4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3148:	b918      	cbnz	r0, 3152 <MPSL_IRQ_CLOCK_Handler+0x7a>
    314a:	f009 f9e9 	bl	c520 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    314e:	2800      	cmp	r0, #0
    3150:	d002      	beq.n	3158 <MPSL_IRQ_CLOCK_Handler+0x80>
    3152:	4902      	ldr	r1, [pc, #8]	; (315c <MPSL_IRQ_CLOCK_Handler+0x84>)
    3154:	2002      	movs	r0, #2
    3156:	6008      	str	r0, [r1, #0]
    3158:	bd10      	pop	{r4, pc}
    315a:	0000      	.short	0x0000
    315c:	40000c34 	.word	0x40000c34
    3160:	b570      	push	{r4, r5, r6, lr}
    3162:	f000 f987 	bl	3474 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3166:	f000 faa1 	bl	36ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    316a:	4c09      	ldr	r4, [pc, #36]	; (3190 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    316c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3170:	b130      	cbz	r0, 3180 <MPSL_IRQ_CLOCK_Handler+0xa8>
    3172:	f7ff ffe3 	bl	313c <MPSL_IRQ_CLOCK_Handler+0x64>
    3176:	2001      	movs	r0, #1
    3178:	6128      	str	r0, [r5, #16]
    317a:	2004      	movs	r0, #4
    317c:	72a0      	strb	r0, [r4, #10]
    317e:	e004      	b.n	318a <MPSL_IRQ_CLOCK_Handler+0xb2>
    3180:	2003      	movs	r0, #3
    3182:	72a0      	strb	r0, [r4, #10]
    3184:	2001      	movs	r0, #1
    3186:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    318a:	2000      	movs	r0, #0
    318c:	71e0      	strb	r0, [r4, #7]
    318e:	bd70      	pop	{r4, r5, r6, pc}
    3190:	2000002c 	.word	0x2000002c
    3194:	b570      	push	{r4, r5, r6, lr}
    3196:	4c13      	ldr	r4, [pc, #76]	; (31e4 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    3198:	79a0      	ldrb	r0, [r4, #6]
    319a:	b1f0      	cbz	r0, 31da <MPSL_IRQ_CLOCK_Handler+0x102>
    319c:	2801      	cmp	r0, #1
    319e:	d003      	beq.n	31a8 <MPSL_IRQ_CLOCK_Handler+0xd0>
    31a0:	79e1      	ldrb	r1, [r4, #7]
    31a2:	1e40      	subs	r0, r0, #1
    31a4:	4281      	cmp	r1, r0
    31a6:	da18      	bge.n	31da <MPSL_IRQ_CLOCK_Handler+0x102>
    31a8:	f000 fa80 	bl	36ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    31ac:	4605      	mov	r5, r0
    31ae:	f000 fb65 	bl	387c <mpsl_temperature_get>
    31b2:	79a1      	ldrb	r1, [r4, #6]
    31b4:	2901      	cmp	r1, #1
    31b6:	d902      	bls.n	31be <MPSL_IRQ_CLOCK_Handler+0xe6>
    31b8:	79e1      	ldrb	r1, [r4, #7]
    31ba:	1c49      	adds	r1, r1, #1
    31bc:	71e1      	strb	r1, [r4, #7]
    31be:	b10d      	cbz	r5, 31c4 <MPSL_IRQ_CLOCK_Handler+0xec>
    31c0:	6961      	ldr	r1, [r4, #20]
    31c2:	e000      	b.n	31c6 <MPSL_IRQ_CLOCK_Handler+0xee>
    31c4:	6921      	ldr	r1, [r4, #16]
    31c6:	1a41      	subs	r1, r0, r1
    31c8:	2902      	cmp	r1, #2
    31ca:	da02      	bge.n	31d2 <MPSL_IRQ_CLOCK_Handler+0xfa>
    31cc:	f111 0f02 	cmn.w	r1, #2
    31d0:	dc07      	bgt.n	31e2 <MPSL_IRQ_CLOCK_Handler+0x10a>
    31d2:	b10d      	cbz	r5, 31d8 <MPSL_IRQ_CLOCK_Handler+0x100>
    31d4:	6160      	str	r0, [r4, #20]
    31d6:	e000      	b.n	31da <MPSL_IRQ_CLOCK_Handler+0x102>
    31d8:	6120      	str	r0, [r4, #16]
    31da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    31de:	f7ff bfbf 	b.w	3160 <MPSL_IRQ_CLOCK_Handler+0x88>
    31e2:	bd70      	pop	{r4, r5, r6, pc}
    31e4:	2000002c 	.word	0x2000002c
    31e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    31ec:	4606      	mov	r6, r0
    31ee:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    31f2:	f44f 7186 	mov.w	r1, #268	; 0x10c
    31f6:	4628      	mov	r0, r5
    31f8:	f009 f891 	bl	c31e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    31fc:	4680      	mov	r8, r0
    31fe:	f44f 7188 	mov.w	r1, #272	; 0x110
    3202:	4628      	mov	r0, r5
    3204:	f009 f88b 	bl	c31e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3208:	4c27      	ldr	r4, [pc, #156]	; (32a8 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    320a:	4682      	mov	sl, r0
    320c:	7827      	ldrb	r7, [r4, #0]
    320e:	f104 0008 	add.w	r0, r4, #8
    3212:	f009 f8f8 	bl	c406 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3216:	b110      	cbz	r0, 321e <MPSL_IRQ_CLOCK_Handler+0x146>
    3218:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    321c:	e016      	b.n	324c <MPSL_IRQ_CLOCK_Handler+0x174>
    321e:	f04f 0901 	mov.w	r9, #1
    3222:	b146      	cbz	r6, 3236 <MPSL_IRQ_CLOCK_Handler+0x15e>
    3224:	7aa0      	ldrb	r0, [r4, #10]
    3226:	2803      	cmp	r0, #3
    3228:	d105      	bne.n	3236 <MPSL_IRQ_CLOCK_Handler+0x15e>
    322a:	2004      	movs	r0, #4
    322c:	72a0      	strb	r0, [r4, #10]
    322e:	f7ff ff85 	bl	313c <MPSL_IRQ_CLOCK_Handler+0x64>
    3232:	f8c5 9010 	str.w	r9, [r5, #16]
    3236:	2600      	movs	r6, #0
    3238:	f1b8 0f00 	cmp.w	r8, #0
    323c:	d018      	beq.n	3270 <MPSL_IRQ_CLOCK_Handler+0x198>
    323e:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    3242:	7aa0      	ldrb	r0, [r4, #10]
    3244:	2804      	cmp	r0, #4
    3246:	d004      	beq.n	3252 <MPSL_IRQ_CLOCK_Handler+0x17a>
    3248:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    324c:	206d      	movs	r0, #109	; 0x6d
    324e:	f000 faa5 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3252:	f009 f90e 	bl	c472 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3256:	b928      	cbnz	r0, 3264 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3258:	f009 f92c 	bl	c4b4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    325c:	b910      	cbnz	r0, 3264 <MPSL_IRQ_CLOCK_Handler+0x18c>
    325e:	f009 f95f 	bl	c520 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3262:	b108      	cbz	r0, 3268 <MPSL_IRQ_CLOCK_Handler+0x190>
    3264:	4811      	ldr	r0, [pc, #68]	; (32ac <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    3266:	6006      	str	r6, [r0, #0]
    3268:	2002      	movs	r0, #2
    326a:	72a0      	strb	r0, [r4, #10]
    326c:	f000 f8e6 	bl	343c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3270:	f1ba 0f00 	cmp.w	sl, #0
    3274:	d008      	beq.n	3288 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    3276:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    327a:	7aa0      	ldrb	r0, [r4, #10]
    327c:	2802      	cmp	r0, #2
    327e:	d101      	bne.n	3284 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    3280:	f7ff ff88 	bl	3194 <MPSL_IRQ_CLOCK_Handler+0xbc>
    3284:	f8c5 9014 	str.w	r9, [r5, #20]
    3288:	b13f      	cbz	r7, 329a <MPSL_IRQ_CLOCK_Handler+0x1c2>
    328a:	7026      	strb	r6, [r4, #0]
    328c:	7aa0      	ldrb	r0, [r4, #10]
    328e:	2802      	cmp	r0, #2
    3290:	d101      	bne.n	3296 <MPSL_IRQ_CLOCK_Handler+0x1be>
    3292:	f7ff ff65 	bl	3160 <MPSL_IRQ_CLOCK_Handler+0x88>
    3296:	f000 f8d1 	bl	343c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    329a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    329e:	4802      	ldr	r0, [pc, #8]	; (32a8 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    32a0:	3008      	adds	r0, #8
    32a2:	f009 b8c7 	b.w	c434 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    32a6:	0000      	.short	0x0000
    32a8:	2000002c 	.word	0x2000002c
    32ac:	40000c34 	.word	0x40000c34
    32b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    32b4:	4c5c      	ldr	r4, [pc, #368]	; (3428 <MPSL_IRQ_CLOCK_Handler+0x350>)
    32b6:	f04f 0800 	mov.w	r8, #0
    32ba:	4606      	mov	r6, r0
    32bc:	f8c4 8018 	str.w	r8, [r4, #24]
    32c0:	7843      	ldrb	r3, [r0, #1]
    32c2:	7882      	ldrb	r2, [r0, #2]
    32c4:	7800      	ldrb	r0, [r0, #0]
    32c6:	72e0      	strb	r0, [r4, #11]
    32c8:	7163      	strb	r3, [r4, #5]
    32ca:	2701      	movs	r7, #1
    32cc:	71a2      	strb	r2, [r4, #6]
    32ce:	07bd      	lsls	r5, r7, #30
    32d0:	f884 8007 	strb.w	r8, [r4, #7]
    32d4:	2805      	cmp	r0, #5
    32d6:	d224      	bcs.n	3322 <MPSL_IRQ_CLOCK_Handler+0x24a>
    32d8:	e8df f000 	tbb	[pc, r0]
    32dc:	1f05030f 	.word	0x1f05030f
    32e0:	0021      	.short	0x0021
    32e2:	61a7      	str	r7, [r4, #24]
    32e4:	e009      	b.n	32fa <MPSL_IRQ_CLOCK_Handler+0x222>
    32e6:	f000 f8c5 	bl	3474 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    32ea:	2101      	movs	r1, #1
    32ec:	4628      	mov	r0, r5
    32ee:	f009 f81b 	bl	c328 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    32f2:	2800      	cmp	r0, #0
    32f4:	d0f9      	beq.n	32ea <MPSL_IRQ_CLOCK_Handler+0x212>
    32f6:	2002      	movs	r0, #2
    32f8:	61a0      	str	r0, [r4, #24]
    32fa:	f009 f841 	bl	c380 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    32fe:	b1b0      	cbz	r0, 332e <MPSL_IRQ_CLOCK_Handler+0x256>
    3300:	f000 f9ee 	bl	36e0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    3304:	7e21      	ldrb	r1, [r4, #24]
    3306:	f001 0103 	and.w	r1, r1, #3
    330a:	4288      	cmp	r0, r1
    330c:	d10f      	bne.n	332e <MPSL_IRQ_CLOCK_Handler+0x256>
    330e:	79b0      	ldrb	r0, [r6, #6]
    3310:	b150      	cbz	r0, 3328 <MPSL_IRQ_CLOCK_Handler+0x250>
    3312:	2002      	movs	r0, #2
    3314:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3318:	e06a      	b.n	33f0 <MPSL_IRQ_CLOCK_Handler+0x318>
    331a:	4844      	ldr	r0, [pc, #272]	; (342c <MPSL_IRQ_CLOCK_Handler+0x354>)
    331c:	e7ec      	b.n	32f8 <MPSL_IRQ_CLOCK_Handler+0x220>
    331e:	4844      	ldr	r0, [pc, #272]	; (3430 <MPSL_IRQ_CLOCK_Handler+0x358>)
    3320:	e7ea      	b.n	32f8 <MPSL_IRQ_CLOCK_Handler+0x220>
    3322:	f240 312d 	movw	r1, #813	; 0x32d
    3326:	e049      	b.n	33bc <MPSL_IRQ_CLOCK_Handler+0x2e4>
    3328:	f000 f9ae 	bl	3688 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    332c:	e060      	b.n	33f0 <MPSL_IRQ_CLOCK_Handler+0x318>
    332e:	60ef      	str	r7, [r5, #12]
    3330:	f44f 7a82 	mov.w	sl, #260	; 0x104
    3334:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3338:	69a0      	ldr	r0, [r4, #24]
    333a:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    333e:	f009 f884 	bl	c44a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3342:	b940      	cbnz	r0, 3356 <MPSL_IRQ_CLOCK_Handler+0x27e>
    3344:	f009 f88b 	bl	c45e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3348:	b928      	cbnz	r0, 3356 <MPSL_IRQ_CLOCK_Handler+0x27e>
    334a:	f009 f89f 	bl	c48c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    334e:	b910      	cbnz	r0, 3356 <MPSL_IRQ_CLOCK_Handler+0x27e>
    3350:	f009 f8b0 	bl	c4b4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3354:	b138      	cbz	r0, 3366 <MPSL_IRQ_CLOCK_Handler+0x28e>
    3356:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    335a:	4836      	ldr	r0, [pc, #216]	; (3434 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    335c:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    3360:	f3c1 3142 	ubfx	r1, r1, #13, #3
    3364:	6001      	str	r1, [r0, #0]
    3366:	f009 f870 	bl	c44a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    336a:	b940      	cbnz	r0, 337e <MPSL_IRQ_CLOCK_Handler+0x2a6>
    336c:	f009 f877 	bl	c45e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3370:	b928      	cbnz	r0, 337e <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3372:	f009 f88b 	bl	c48c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3376:	b910      	cbnz	r0, 337e <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3378:	f009 f89c 	bl	c4b4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    337c:	b110      	cbz	r0, 3384 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    337e:	482d      	ldr	r0, [pc, #180]	; (3434 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3380:	3010      	adds	r0, #16
    3382:	6007      	str	r7, [r0, #0]
    3384:	60af      	str	r7, [r5, #8]
    3386:	2002      	movs	r0, #2
    3388:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    338c:	79b0      	ldrb	r0, [r6, #6]
    338e:	bb78      	cbnz	r0, 33f0 <MPSL_IRQ_CLOCK_Handler+0x318>
    3390:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3394:	f010 0f02 	tst.w	r0, #2
    3398:	d00e      	beq.n	33b8 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    339a:	f8df 909c 	ldr.w	r9, [pc, #156]	; 3438 <MPSL_IRQ_CLOCK_Handler+0x360>
    339e:	f8d9 1000 	ldr.w	r1, [r9]
    33a2:	43c9      	mvns	r1, r1
    33a4:	f341 1700 	sbfx	r7, r1, #4, #1
    33a8:	f8d9 1000 	ldr.w	r1, [r9]
    33ac:	f041 0110 	orr.w	r1, r1, #16
    33b0:	f8c9 1000 	str.w	r1, [r9]
    33b4:	1c7f      	adds	r7, r7, #1
    33b6:	e007      	b.n	33c8 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    33b8:	f240 21ee 	movw	r1, #750	; 0x2ee
    33bc:	206d      	movs	r0, #109	; 0x6d
    33be:	f000 f9ed 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33c2:	bf00      	nop
    33c4:	f000 fb10 	bl	39e8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    33c8:	4651      	mov	r1, sl
    33ca:	4628      	mov	r0, r5
    33cc:	f008 ffa7 	bl	c31e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    33d0:	2800      	cmp	r0, #0
    33d2:	d0f7      	beq.n	33c4 <MPSL_IRQ_CLOCK_Handler+0x2ec>
    33d4:	f000 f958 	bl	3688 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    33d8:	b92f      	cbnz	r7, 33e6 <MPSL_IRQ_CLOCK_Handler+0x30e>
    33da:	f8d9 1000 	ldr.w	r1, [r9]
    33de:	f021 0110 	bic.w	r1, r1, #16
    33e2:	f8c9 1000 	str.w	r1, [r9]
    33e6:	2002      	movs	r0, #2
    33e8:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    33ec:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    33f0:	79a0      	ldrb	r0, [r4, #6]
    33f2:	b170      	cbz	r0, 3412 <MPSL_IRQ_CLOCK_Handler+0x33a>
    33f4:	7830      	ldrb	r0, [r6, #0]
    33f6:	b960      	cbnz	r0, 3412 <MPSL_IRQ_CLOCK_Handler+0x33a>
    33f8:	f000 f958 	bl	36ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    33fc:	4606      	mov	r6, r0
    33fe:	f000 fa3d 	bl	387c <mpsl_temperature_get>
    3402:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    3406:	b116      	cbz	r6, 340e <MPSL_IRQ_CLOCK_Handler+0x336>
    3408:	e9c4 2004 	strd	r2, r0, [r4, #16]
    340c:	e001      	b.n	3412 <MPSL_IRQ_CLOCK_Handler+0x33a>
    340e:	e9c4 0204 	strd	r0, r2, [r4, #16]
    3412:	2101      	movs	r1, #1
    3414:	4628      	mov	r0, r5
    3416:	f008 ff87 	bl	c328 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    341a:	b108      	cbz	r0, 3420 <MPSL_IRQ_CLOCK_Handler+0x348>
    341c:	f000 f940 	bl	36a0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3420:	f884 800a 	strb.w	r8, [r4, #10]
    3424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3428:	2000002c 	.word	0x2000002c
    342c:	00020001 	.word	0x00020001
    3430:	00030001 	.word	0x00030001
    3434:	4000053c 	.word	0x4000053c
    3438:	e000ed10 	.word	0xe000ed10

0000343c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    343c:	b510      	push	{r4, lr}
    343e:	f3ef 8410 	mrs	r4, PRIMASK
    3442:	b672      	cpsid	i
    3444:	480a      	ldr	r0, [pc, #40]	; (3470 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    3446:	7841      	ldrb	r1, [r0, #1]
    3448:	b129      	cbz	r1, 3456 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    344a:	7841      	ldrb	r1, [r0, #1]
    344c:	1e49      	subs	r1, r1, #1
    344e:	7041      	strb	r1, [r0, #1]
    3450:	7841      	ldrb	r1, [r0, #1]
    3452:	b129      	cbz	r1, 3460 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    3454:	e008      	b.n	3468 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3456:	f240 110d 	movw	r1, #269	; 0x10d
    345a:	206d      	movs	r0, #109	; 0x6d
    345c:	f000 f99e 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3460:	7880      	ldrb	r0, [r0, #2]
    3462:	b908      	cbnz	r0, 3468 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3464:	f000 f930 	bl	36c8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3468:	2c00      	cmp	r4, #0
    346a:	d100      	bne.n	346e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    346c:	b662      	cpsie	i
    346e:	bd10      	pop	{r4, pc}
    3470:	2000002c 	.word	0x2000002c

00003474 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    3474:	b510      	push	{r4, lr}
    3476:	f3ef 8410 	mrs	r4, PRIMASK
    347a:	b672      	cpsid	i
    347c:	4806      	ldr	r0, [pc, #24]	; (3498 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    347e:	7841      	ldrb	r1, [r0, #1]
    3480:	1c49      	adds	r1, r1, #1
    3482:	7041      	strb	r1, [r0, #1]
    3484:	7840      	ldrb	r0, [r0, #1]
    3486:	2801      	cmp	r0, #1
    3488:	d101      	bne.n	348e <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    348a:	f008 ff64 	bl	c356 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    348e:	2c00      	cmp	r4, #0
    3490:	d100      	bne.n	3494 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    3492:	b662      	cpsie	i
    3494:	bd10      	pop	{r4, pc}
    3496:	0000      	.short	0x0000
    3498:	2000002c 	.word	0x2000002c

0000349c <mpsl_clock_hfclk_release>:
    349c:	4805      	ldr	r0, [pc, #20]	; (34b4 <mpsl_clock_hfclk_release+0x18>)
    349e:	b510      	push	{r4, lr}
    34a0:	78c1      	ldrb	r1, [r0, #3]
    34a2:	b121      	cbz	r1, 34ae <mpsl_clock_hfclk_release+0x12>
    34a4:	2100      	movs	r1, #0
    34a6:	7101      	strb	r1, [r0, #4]
    34a8:	70c1      	strb	r1, [r0, #3]
    34aa:	f7ff ffc7 	bl	343c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    34ae:	2000      	movs	r0, #0
    34b0:	bd10      	pop	{r4, pc}
    34b2:	0000      	.short	0x0000
    34b4:	2000002c 	.word	0x2000002c

000034b8 <mpsl_clock_hfclk_request>:
    34b8:	b570      	push	{r4, r5, r6, lr}
    34ba:	4c0c      	ldr	r4, [pc, #48]	; (34ec <mpsl_clock_hfclk_request+0x34>)
    34bc:	78e1      	ldrb	r1, [r4, #3]
    34be:	b961      	cbnz	r1, 34da <mpsl_clock_hfclk_request+0x22>
    34c0:	2501      	movs	r5, #1
    34c2:	70e5      	strb	r5, [r4, #3]
    34c4:	61e0      	str	r0, [r4, #28]
    34c6:	f7ff ffd5 	bl	3474 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    34ca:	f000 f8ef 	bl	36ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    34ce:	b130      	cbz	r0, 34de <mpsl_clock_hfclk_request+0x26>
    34d0:	69e0      	ldr	r0, [r4, #28]
    34d2:	b110      	cbz	r0, 34da <mpsl_clock_hfclk_request+0x22>
    34d4:	4780      	blx	r0
    34d6:	2000      	movs	r0, #0
    34d8:	61e0      	str	r0, [r4, #28]
    34da:	2000      	movs	r0, #0
    34dc:	bd70      	pop	{r4, r5, r6, pc}
    34de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    34e2:	7125      	strb	r5, [r4, #4]
    34e4:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    34e8:	e7f7      	b.n	34da <mpsl_clock_hfclk_request+0x22>
    34ea:	0000      	.short	0x0000
    34ec:	2000002c 	.word	0x2000002c

000034f0 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    34f0:	f3ef 8010 	mrs	r0, PRIMASK
    34f4:	b672      	cpsid	i
    34f6:	4904      	ldr	r1, [pc, #16]	; (3508 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    34f8:	788a      	ldrb	r2, [r1, #2]
    34fa:	1c52      	adds	r2, r2, #1
    34fc:	708a      	strb	r2, [r1, #2]
    34fe:	2800      	cmp	r0, #0
    3500:	d100      	bne.n	3504 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    3502:	b662      	cpsie	i
    3504:	4770      	bx	lr
    3506:	0000      	.short	0x0000
    3508:	2000002c 	.word	0x2000002c

0000350c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    350c:	b510      	push	{r4, lr}
    350e:	f3ef 8410 	mrs	r4, PRIMASK
    3512:	b672      	cpsid	i
    3514:	480a      	ldr	r0, [pc, #40]	; (3540 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    3516:	7881      	ldrb	r1, [r0, #2]
    3518:	b129      	cbz	r1, 3526 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    351a:	7881      	ldrb	r1, [r0, #2]
    351c:	1e49      	subs	r1, r1, #1
    351e:	7081      	strb	r1, [r0, #2]
    3520:	7841      	ldrb	r1, [r0, #1]
    3522:	b129      	cbz	r1, 3530 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    3524:	e008      	b.n	3538 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3526:	f240 1125 	movw	r1, #293	; 0x125
    352a:	206d      	movs	r0, #109	; 0x6d
    352c:	f000 f936 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3530:	7880      	ldrb	r0, [r0, #2]
    3532:	b908      	cbnz	r0, 3538 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3534:	f000 f8c8 	bl	36c8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3538:	2c00      	cmp	r4, #0
    353a:	d100      	bne.n	353e <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    353c:	b662      	cpsie	i
    353e:	bd10      	pop	{r4, pc}
    3540:	2000002c 	.word	0x2000002c

00003544 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    3544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3548:	0004      	movs	r4, r0
    354a:	f06f 0015 	mvn.w	r0, #21
    354e:	d03c      	beq.n	35ca <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3550:	7821      	ldrb	r1, [r4, #0]
    3552:	2904      	cmp	r1, #4
    3554:	d839      	bhi.n	35ca <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3556:	2900      	cmp	r1, #0
    3558:	7861      	ldrb	r1, [r4, #1]
    355a:	d038      	beq.n	35ce <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    355c:	2900      	cmp	r1, #0
    355e:	d134      	bne.n	35ca <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3560:	78a1      	ldrb	r1, [r4, #2]
    3562:	2900      	cmp	r1, #0
    3564:	d131      	bne.n	35ca <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3566:	2000      	movs	r0, #0
    3568:	f008 fea4 	bl	c2b4 <MPSL_IRQ_RADIO_Handler+0x1e>
    356c:	2000      	movs	r0, #0
    356e:	f008 fe94 	bl	c29a <MPSL_IRQ_RADIO_Handler+0x4>
    3572:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    3576:	f04f 31ff 	mov.w	r1, #4294967295
    357a:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    357e:	2600      	movs	r6, #0
    3580:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    3584:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    3588:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    358c:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    3590:	4f14      	ldr	r7, [pc, #80]	; (35e4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    3592:	707e      	strb	r6, [r7, #1]
    3594:	88a0      	ldrh	r0, [r4, #4]
    3596:	81b8      	strh	r0, [r7, #12]
    3598:	f008 fed4 	bl	c344 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    359c:	2501      	movs	r5, #1
    359e:	b108      	cbz	r0, 35a4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    35a0:	70fd      	strb	r5, [r7, #3]
    35a2:	707d      	strb	r5, [r7, #1]
    35a4:	2101      	movs	r1, #1
    35a6:	4640      	mov	r0, r8
    35a8:	f008 febe 	bl	c328 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    35ac:	b108      	cbz	r0, 35b2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    35ae:	f000 f877 	bl	36a0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    35b2:	4620      	mov	r0, r4
    35b4:	f7ff fe7c 	bl	32b0 <MPSL_IRQ_CLOCK_Handler+0x1d8>
    35b8:	727d      	strb	r5, [r7, #9]
    35ba:	2000      	movs	r0, #0
    35bc:	f008 fe6d 	bl	c29a <MPSL_IRQ_RADIO_Handler+0x4>
    35c0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    35c4:	4630      	mov	r0, r6
    35c6:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    35ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35ce:	2900      	cmp	r1, #0
    35d0:	d0fb      	beq.n	35ca <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    35d2:	2920      	cmp	r1, #32
    35d4:	d8f9      	bhi.n	35ca <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    35d6:	78a1      	ldrb	r1, [r4, #2]
    35d8:	2921      	cmp	r1, #33	; 0x21
    35da:	d8f6      	bhi.n	35ca <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    35dc:	2901      	cmp	r1, #1
    35de:	d1c2      	bne.n	3566 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    35e0:	e7f3      	b.n	35ca <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    35e2:	0000      	.short	0x0000
    35e4:	2000002c 	.word	0x2000002c

000035e8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    35e8:	4801      	ldr	r0, [pc, #4]	; (35f0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    35ea:	8980      	ldrh	r0, [r0, #12]
    35ec:	4770      	bx	lr
    35ee:	0000      	.short	0x0000
    35f0:	2000002c 	.word	0x2000002c

000035f4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    35f4:	4802      	ldr	r0, [pc, #8]	; (3600 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    35f6:	7a80      	ldrb	r0, [r0, #10]
    35f8:	2800      	cmp	r0, #0
    35fa:	d000      	beq.n	35fe <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    35fc:	2001      	movs	r0, #1
    35fe:	4770      	bx	lr
    3600:	2000002c 	.word	0x2000002c

00003604 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    3604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3606:	4d1f      	ldr	r5, [pc, #124]	; (3684 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3608:	7ae8      	ldrb	r0, [r5, #11]
    360a:	2800      	cmp	r0, #0
    360c:	d10f      	bne.n	362e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    360e:	7e28      	ldrb	r0, [r5, #24]
    3610:	f000 0003 	and.w	r0, r0, #3
    3614:	f008 fea4 	bl	c360 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3618:	2800      	cmp	r0, #0
    361a:	d008      	beq.n	362e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    361c:	f3ef 8110 	mrs	r1, PRIMASK
    3620:	b672      	cpsid	i
    3622:	f7ff ffe7 	bl	35f4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    3626:	b118      	cbz	r0, 3630 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3628:	2900      	cmp	r1, #0
    362a:	d100      	bne.n	362e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    362c:	b662      	cpsie	i
    362e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3630:	2601      	movs	r6, #1
    3632:	72ae      	strb	r6, [r5, #10]
    3634:	b901      	cbnz	r1, 3638 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    3636:	b662      	cpsie	i
    3638:	2018      	movs	r0, #24
    363a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    363e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3642:	61a6      	str	r6, [r4, #24]
    3644:	f44f 7020 	mov.w	r0, #640	; 0x280
    3648:	f8ad 0000 	strh.w	r0, [sp]
    364c:	f8bd 0000 	ldrh.w	r0, [sp]
    3650:	1e41      	subs	r1, r0, #1
    3652:	f8ad 1000 	strh.w	r1, [sp]
    3656:	d2f9      	bcs.n	364c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    3658:	2700      	movs	r7, #0
    365a:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    365e:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    3662:	4808      	ldr	r0, [pc, #32]	; (3684 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3664:	3008      	adds	r0, #8
    3666:	f008 fee1 	bl	c42c <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    366a:	702f      	strb	r7, [r5, #0]
    366c:	f7ff fd78 	bl	3160 <MPSL_IRQ_CLOCK_Handler+0x88>
    3670:	6166      	str	r6, [r4, #20]
    3672:	7968      	ldrb	r0, [r5, #5]
    3674:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    3678:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    367c:	2018      	movs	r0, #24
    367e:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    3682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3684:	2000002c 	.word	0x2000002c

00003688 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    3688:	b510      	push	{r4, lr}
    368a:	4c04      	ldr	r4, [pc, #16]	; (369c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    368c:	7e20      	ldrb	r0, [r4, #24]
    368e:	f000 0003 	and.w	r0, r0, #3
    3692:	f008 fe65 	bl	c360 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3696:	2800      	cmp	r0, #0
    3698:	d0f8      	beq.n	368c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    369a:	bd10      	pop	{r4, pc}
    369c:	2000002c 	.word	0x2000002c

000036a0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    36a0:	4901      	ldr	r1, [pc, #4]	; (36a8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    36a2:	2001      	movs	r0, #1
    36a4:	7008      	strb	r0, [r1, #0]
    36a6:	4770      	bx	lr
    36a8:	20000284 	.word	0x20000284

000036ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    36ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    36b0:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    36b4:	b918      	cbnz	r0, 36be <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    36b6:	4803      	ldr	r0, [pc, #12]	; (36c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    36b8:	7800      	ldrb	r0, [r0, #0]
    36ba:	2800      	cmp	r0, #0
    36bc:	d000      	beq.n	36c0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    36be:	2001      	movs	r0, #1
    36c0:	4770      	bx	lr
    36c2:	0000      	.short	0x0000
    36c4:	20000284 	.word	0x20000284

000036c8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    36c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    36cc:	2101      	movs	r1, #1
    36ce:	6041      	str	r1, [r0, #4]
    36d0:	2100      	movs	r1, #0
    36d2:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    36d6:	4801      	ldr	r0, [pc, #4]	; (36dc <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    36d8:	7001      	strb	r1, [r0, #0]
    36da:	4770      	bx	lr
    36dc:	20000284 	.word	0x20000284

000036e0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    36e0:	4802      	ldr	r0, [pc, #8]	; (36ec <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    36e2:	6800      	ldr	r0, [r0, #0]
    36e4:	f000 0003 	and.w	r0, r0, #3
    36e8:	4770      	bx	lr
    36ea:	0000      	.short	0x0000
    36ec:	4000041c 	.word	0x4000041c
    36f0:	b510      	push	{r4, lr}
    36f2:	b131      	cbz	r1, 3702 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    36f4:	2901      	cmp	r1, #1
    36f6:	d007      	beq.n	3708 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    36f8:	f240 3102 	movw	r1, #770	; 0x302
    36fc:	a005      	add	r0, pc, #20	; (adr r0, 3714 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    36fe:	f000 f821 	bl	3744 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    3702:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    3706:	e001      	b.n	370c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    3708:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    370c:	f000 0001 	and.w	r0, r0, #1
    3710:	bd10      	pop	{r4, pc}
    3712:	0000      	.short	0x0000
    3714:	5f66726e 	.word	0x5f66726e
    3718:	636f6c63 	.word	0x636f6c63
    371c:	00682e6b 	.word	0x00682e6b
    3720:	f3bf 8f4f 	dsb	sy
    3724:	4805      	ldr	r0, [pc, #20]	; (373c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    3726:	6801      	ldr	r1, [r0, #0]
    3728:	4a05      	ldr	r2, [pc, #20]	; (3740 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    372a:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    372e:	4311      	orrs	r1, r2
    3730:	6001      	str	r1, [r0, #0]
    3732:	f3bf 8f4f 	dsb	sy
    3736:	bf00      	nop
    3738:	e7fd      	b.n	3736 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    373a:	0000      	.short	0x0000
    373c:	e000ed0c 	.word	0xe000ed0c
    3740:	05fa0004 	.word	0x05fa0004

00003744 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3744:	b672      	cpsid	i
    3746:	4a03      	ldr	r2, [pc, #12]	; (3754 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    3748:	6852      	ldr	r2, [r2, #4]
    374a:	b102      	cbz	r2, 374e <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    374c:	4790      	blx	r2
    374e:	f7ff ffe7 	bl	3720 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3752:	0000      	.short	0x0000
    3754:	2000004c 	.word	0x2000004c
    3758:	4806      	ldr	r0, [pc, #24]	; (3774 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    375a:	b510      	push	{r4, lr}
    375c:	2100      	movs	r1, #0
    375e:	6001      	str	r1, [r0, #0]
    3760:	2101      	movs	r1, #1
    3762:	6001      	str	r1, [r0, #0]
    3764:	4608      	mov	r0, r1
    3766:	f008 fe22 	bl	c3ae <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    376a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    376e:	2001      	movs	r0, #1
    3770:	f008 be10 	b.w	c394 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3774:	40001ffc 	.word	0x40001ffc
    3778:	4807      	ldr	r0, [pc, #28]	; (3798 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    377a:	b510      	push	{r4, lr}
    377c:	2101      	movs	r1, #1
    377e:	6041      	str	r1, [r0, #4]
    3780:	1e89      	subs	r1, r1, #2
    3782:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3786:	200c      	movs	r0, #12
    3788:	f008 fe11 	bl	c3ae <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    378c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3790:	200c      	movs	r0, #12
    3792:	f008 bdff 	b.w	c394 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3796:	0000      	.short	0x0000
    3798:	4000c000 	.word	0x4000c000

0000379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    379c:	b50e      	push	{r1, r2, r3, lr}
    379e:	b672      	cpsid	i
    37a0:	4a0f      	ldr	r2, [pc, #60]	; (37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    37a2:	6855      	ldr	r5, [r2, #4]
    37a4:	b1d5      	cbz	r5, 37dc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    37a6:	2200      	movs	r2, #0
    37a8:	4603      	mov	r3, r0
    37aa:	466e      	mov	r6, sp
    37ac:	240a      	movs	r4, #10
    37ae:	e003      	b.n	37b8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    37b0:	fbb0 f0f4 	udiv	r0, r0, r4
    37b4:	1c52      	adds	r2, r2, #1
    37b6:	b2d2      	uxtb	r2, r2
    37b8:	2800      	cmp	r0, #0
    37ba:	d1f9      	bne.n	37b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    37bc:	54b0      	strb	r0, [r6, r2]
    37be:	e009      	b.n	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    37c0:	fbb3 f0f4 	udiv	r0, r3, r4
    37c4:	fb04 3010 	mls	r0, r4, r0, r3
    37c8:	fbb3 f3f4 	udiv	r3, r3, r4
    37cc:	1e52      	subs	r2, r2, #1
    37ce:	b2d2      	uxtb	r2, r2
    37d0:	3030      	adds	r0, #48	; 0x30
    37d2:	54b0      	strb	r0, [r6, r2]
    37d4:	2a00      	cmp	r2, #0
    37d6:	d1f3      	bne.n	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    37d8:	4630      	mov	r0, r6
    37da:	47a8      	blx	r5
    37dc:	f7ff ffa0 	bl	3720 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    37e0:	2000004c 	.word	0x2000004c

000037e4 <mpsl_init>:
    37e4:	b570      	push	{r4, r5, r6, lr}
    37e6:	4c17      	ldr	r4, [pc, #92]	; (3844 <mpsl_init+0x60>)
    37e8:	4606      	mov	r6, r0
    37ea:	460d      	mov	r5, r1
    37ec:	7860      	ldrb	r0, [r4, #1]
    37ee:	b110      	cbz	r0, 37f6 <mpsl_init+0x12>
    37f0:	f04f 30ff 	mov.w	r0, #4294967295
    37f4:	bd70      	pop	{r4, r5, r6, pc}
    37f6:	b906      	cbnz	r6, 37fa <mpsl_init+0x16>
    37f8:	4e13      	ldr	r6, [pc, #76]	; (3848 <mpsl_init+0x64>)
    37fa:	6062      	str	r2, [r4, #4]
    37fc:	7025      	strb	r5, [r4, #0]
    37fe:	f7ff ffab 	bl	3758 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    3802:	f7ff ffb9 	bl	3778 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    3806:	4630      	mov	r0, r6
    3808:	f7ff fe9c 	bl	3544 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    380c:	0006      	movs	r6, r0
    380e:	d1f1      	bne.n	37f4 <mpsl_init+0x10>
    3810:	f7fe ff00 	bl	2614 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    3814:	f7ff fef6 	bl	3604 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3818:	f008 fd16 	bl	c248 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    381c:	4628      	mov	r0, r5
    381e:	f008 fdb9 	bl	c394 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3822:	2001      	movs	r0, #1
    3824:	2d00      	cmp	r5, #0
    3826:	db09      	blt.n	383c <mpsl_init+0x58>
    3828:	f005 011f 	and.w	r1, r5, #31
    382c:	fa00 f101 	lsl.w	r1, r0, r1
    3830:	096a      	lsrs	r2, r5, #5
    3832:	0092      	lsls	r2, r2, #2
    3834:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    3838:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    383c:	7060      	strb	r0, [r4, #1]
    383e:	4630      	mov	r0, r6
    3840:	bd70      	pop	{r4, r5, r6, pc}
    3842:	0000      	.short	0x0000
    3844:	2000004c 	.word	0x2000004c
    3848:	0000c3d0 	.word	0x0000c3d0

0000384c <mpsl_is_initialized>:
    384c:	4801      	ldr	r0, [pc, #4]	; (3854 <mpsl_is_initialized+0x8>)
    384e:	7840      	ldrb	r0, [r0, #1]
    3850:	4770      	bx	lr
    3852:	0000      	.short	0x0000
    3854:	2000004c 	.word	0x2000004c

00003858 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    3858:	4807      	ldr	r0, [pc, #28]	; (3878 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    385a:	f990 0000 	ldrsb.w	r0, [r0]
    385e:	2800      	cmp	r0, #0
    3860:	db09      	blt.n	3876 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    3862:	f000 021f 	and.w	r2, r0, #31
    3866:	2101      	movs	r1, #1
    3868:	4091      	lsls	r1, r2
    386a:	0940      	lsrs	r0, r0, #5
    386c:	0080      	lsls	r0, r0, #2
    386e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3872:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3876:	4770      	bx	lr
    3878:	2000004c 	.word	0x2000004c

0000387c <mpsl_temperature_get>:
    387c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3880:	2601      	movs	r6, #1
    3882:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3886:	0331      	lsls	r1, r6, #12
    3888:	f04f 0800 	mov.w	r8, #0
    388c:	4640      	mov	r0, r8
    388e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    3892:	f3bf 8f4f 	dsb	sy
    3896:	f3bf 8f6f 	isb	sy
    389a:	4c16      	ldr	r4, [pc, #88]	; (38f4 <mpsl_temperature_get+0x78>)
    389c:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    38a0:	200c      	movs	r0, #12
    38a2:	f008 fda3 	bl	c3ec <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    38a6:	4d14      	ldr	r5, [pc, #80]	; (38f8 <mpsl_temperature_get+0x7c>)
    38a8:	6828      	ldr	r0, [r5, #0]
    38aa:	43c0      	mvns	r0, r0
    38ac:	f340 1700 	sbfx	r7, r0, #4, #1
    38b0:	6828      	ldr	r0, [r5, #0]
    38b2:	f040 0010 	orr.w	r0, r0, #16
    38b6:	6028      	str	r0, [r5, #0]
    38b8:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    38bc:	6026      	str	r6, [r4, #0]
    38be:	1c7f      	adds	r7, r7, #1
    38c0:	e002      	b.n	38c8 <mpsl_temperature_get+0x4c>
    38c2:	bf00      	nop
    38c4:	f000 f890 	bl	39e8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    38c8:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    38cc:	2800      	cmp	r0, #0
    38ce:	d0f9      	beq.n	38c4 <mpsl_temperature_get+0x48>
    38d0:	b91f      	cbnz	r7, 38da <mpsl_temperature_get+0x5e>
    38d2:	6828      	ldr	r0, [r5, #0]
    38d4:	f020 0010 	bic.w	r0, r0, #16
    38d8:	6028      	str	r0, [r5, #0]
    38da:	4808      	ldr	r0, [pc, #32]	; (38fc <mpsl_temperature_get+0x80>)
    38dc:	6805      	ldr	r5, [r0, #0]
    38de:	6066      	str	r6, [r4, #4]
    38e0:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    38e4:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    38e8:	200c      	movs	r0, #12
    38ea:	f008 fd7f 	bl	c3ec <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    38ee:	4628      	mov	r0, r5
    38f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    38f4:	4000c000 	.word	0x4000c000
    38f8:	e000ed10 	.word	0xe000ed10
    38fc:	4000c508 	.word	0x4000c508

00003900 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    3900:	b510      	push	{r4, lr}
    3902:	4602      	mov	r2, r0
    3904:	2005      	movs	r0, #5
    3906:	490c      	ldr	r1, [pc, #48]	; (3938 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    3908:	e004      	b.n	3914 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    390a:	bf00      	nop
    390c:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    3910:	791b      	ldrb	r3, [r3, #4]
    3912:	b133      	cbz	r3, 3922 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    3914:	1e40      	subs	r0, r0, #1
    3916:	b2c0      	uxtb	r0, r0
    3918:	d2f8      	bcs.n	390c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    391a:	2148      	movs	r1, #72	; 0x48
    391c:	2069      	movs	r0, #105	; 0x69
    391e:	f7ff ff3d 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3922:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    3926:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    392a:	2200      	movs	r2, #0
    392c:	714a      	strb	r2, [r1, #5]
    392e:	718a      	strb	r2, [r1, #6]
    3930:	2201      	movs	r2, #1
    3932:	710a      	strb	r2, [r1, #4]
    3934:	bd10      	pop	{r4, pc}
    3936:	0000      	.short	0x0000
    3938:	20000e00 	.word	0x20000e00

0000393c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    393c:	b510      	push	{r4, lr}
    393e:	2805      	cmp	r0, #5
    3940:	d301      	bcc.n	3946 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    3942:	2158      	movs	r1, #88	; 0x58
    3944:	e006      	b.n	3954 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    3946:	490a      	ldr	r1, [pc, #40]	; (3970 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    3948:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    394c:	7901      	ldrb	r1, [r0, #4]
    394e:	2901      	cmp	r1, #1
    3950:	d003      	beq.n	395a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    3952:	2159      	movs	r1, #89	; 0x59
    3954:	2069      	movs	r0, #105	; 0x69
    3956:	f7ff ff21 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    395a:	7941      	ldrb	r1, [r0, #5]
    395c:	7982      	ldrb	r2, [r0, #6]
    395e:	1c49      	adds	r1, r1, #1
    3960:	b2c9      	uxtb	r1, r1
    3962:	428a      	cmp	r2, r1
    3964:	d000      	beq.n	3968 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    3966:	7141      	strb	r1, [r0, #5]
    3968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    396c:	f7ff bf74 	b.w	3858 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    3970:	20000e00 	.word	0x20000e00

00003974 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    3974:	b570      	push	{r4, r5, r6, lr}
    3976:	2505      	movs	r5, #5
    3978:	4e0e      	ldr	r6, [pc, #56]	; (39b4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    397a:	4c0f      	ldr	r4, [pc, #60]	; (39b8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    397c:	e016      	b.n	39ac <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    397e:	7821      	ldrb	r1, [r4, #0]
    3980:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    3984:	7902      	ldrb	r2, [r0, #4]
    3986:	2a01      	cmp	r2, #1
    3988:	d108      	bne.n	399c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    398a:	7942      	ldrb	r2, [r0, #5]
    398c:	7983      	ldrb	r3, [r0, #6]
    398e:	429a      	cmp	r2, r3
    3990:	d004      	beq.n	399c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3992:	7942      	ldrb	r2, [r0, #5]
    3994:	7182      	strb	r2, [r0, #6]
    3996:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    399a:	4780      	blx	r0
    399c:	7820      	ldrb	r0, [r4, #0]
    399e:	1c40      	adds	r0, r0, #1
    39a0:	b2c0      	uxtb	r0, r0
    39a2:	7020      	strb	r0, [r4, #0]
    39a4:	2805      	cmp	r0, #5
    39a6:	d301      	bcc.n	39ac <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    39a8:	2000      	movs	r0, #0
    39aa:	7020      	strb	r0, [r4, #0]
    39ac:	1e6d      	subs	r5, r5, #1
    39ae:	b2ed      	uxtb	r5, r5
    39b0:	d2e5      	bcs.n	397e <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    39b2:	bd70      	pop	{r4, r5, r6, pc}
    39b4:	20000e00 	.word	0x20000e00
    39b8:	20000285 	.word	0x20000285

000039bc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    39bc:	b500      	push	{lr}
    39be:	f008 fd44 	bl	c44a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    39c2:	b940      	cbnz	r0, 39d6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    39c4:	f008 fd4b 	bl	c45e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    39c8:	b928      	cbnz	r0, 39d6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    39ca:	f008 fd5f 	bl	c48c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    39ce:	b910      	cbnz	r0, 39d6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    39d0:	f008 fd70 	bl	c4b4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    39d4:	b108      	cbz	r0, 39da <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    39d6:	4802      	ldr	r0, [pc, #8]	; (39e0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    39d8:	bd00      	pop	{pc}
    39da:	4802      	ldr	r0, [pc, #8]	; (39e4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    39dc:	bd00      	pop	{pc}
    39de:	0000      	.short	0x0000
    39e0:	4000050c 	.word	0x4000050c
    39e4:	4001e700 	.word	0x4001e700

000039e8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    39e8:	b510      	push	{r4, lr}
    39ea:	f008 fd63 	bl	c4b4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    39ee:	b330      	cbz	r0, 3a3e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    39f0:	f3ef 8010 	mrs	r0, PRIMASK
    39f4:	b1c8      	cbz	r0, 3a2a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    39f6:	2100      	movs	r1, #0
    39f8:	b672      	cpsid	i
    39fa:	4812      	ldr	r0, [pc, #72]	; (3a44 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    39fc:	6802      	ldr	r2, [r0, #0]
    39fe:	6803      	ldr	r3, [r0, #0]
    3a00:	f3c2 1200 	ubfx	r2, r2, #4, #1
    3a04:	f043 0310 	orr.w	r3, r3, #16
    3a08:	6003      	str	r3, [r0, #0]
    3a0a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3a0e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    3a12:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    3a16:	431c      	orrs	r4, r3
    3a18:	d000      	beq.n	3a1c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    3a1a:	bf40      	sev
    3a1c:	bf20      	wfe
    3a1e:	bf00      	nop
    3a20:	bf00      	nop
    3a22:	bf00      	nop
    3a24:	bf00      	nop
    3a26:	b112      	cbz	r2, 3a2e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    3a28:	e005      	b.n	3a36 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    3a2a:	2101      	movs	r1, #1
    3a2c:	e7e4      	b.n	39f8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    3a2e:	6802      	ldr	r2, [r0, #0]
    3a30:	f022 0210 	bic.w	r2, r2, #16
    3a34:	6002      	str	r2, [r0, #0]
    3a36:	2900      	cmp	r1, #0
    3a38:	d000      	beq.n	3a3c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    3a3a:	b662      	cpsie	i
    3a3c:	bd10      	pop	{r4, pc}
    3a3e:	bf20      	wfe
    3a40:	bd10      	pop	{r4, pc}
    3a42:	0000      	.short	0x0000
    3a44:	e000ed10 	.word	0xe000ed10

00003a48 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    3a48:	0000c725 0000c741 0000c72f 0000c73b     %...A.../...;...
    3a58:	0000c729 0000c723 0000c721 0000c747     )...#...!...G...
    3a68:	0000c735 0000c71b 0000c713 0000c717     5...............
    3a78:	0000c70d                                ....

00003a7c <mpsl_fem_disable>:
    3a7c:	4801      	ldr	r0, [pc, #4]	; (3a84 <mpsl_fem_disable+0x8>)
    3a7e:	6800      	ldr	r0, [r0, #0]
    3a80:	6800      	ldr	r0, [r0, #0]
    3a82:	4700      	bx	r0
    3a84:	20000054 	.word	0x20000054

00003a88 <mpsl_fem_lna_configuration_clear>:
    3a88:	4801      	ldr	r0, [pc, #4]	; (3a90 <mpsl_fem_lna_configuration_clear+0x8>)
    3a8a:	6800      	ldr	r0, [r0, #0]
    3a8c:	6900      	ldr	r0, [r0, #16]
    3a8e:	4700      	bx	r0
    3a90:	20000054 	.word	0x20000054

00003a94 <mpsl_fem_lna_configuration_set>:
    3a94:	4a01      	ldr	r2, [pc, #4]	; (3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>)
    3a96:	6812      	ldr	r2, [r2, #0]
    3a98:	6892      	ldr	r2, [r2, #8]
    3a9a:	4710      	bx	r2
    3a9c:	20000054 	.word	0x20000054

00003aa0 <mpsl_fem_pa_configuration_clear>:
    3aa0:	4801      	ldr	r0, [pc, #4]	; (3aa8 <mpsl_fem_pa_configuration_clear+0x8>)
    3aa2:	6800      	ldr	r0, [r0, #0]
    3aa4:	68c0      	ldr	r0, [r0, #12]
    3aa6:	4700      	bx	r0
    3aa8:	20000054 	.word	0x20000054

00003aac <mpsl_fem_pa_configuration_set>:
    3aac:	4a01      	ldr	r2, [pc, #4]	; (3ab4 <mpsl_fem_pa_configuration_set+0x8>)
    3aae:	6812      	ldr	r2, [r2, #0]
    3ab0:	6852      	ldr	r2, [r2, #4]
    3ab2:	4710      	bx	r2
    3ab4:	20000054 	.word	0x20000054

00003ab8 <mpsl_fem_pa_is_configured>:
    3ab8:	4901      	ldr	r1, [pc, #4]	; (3ac0 <mpsl_fem_pa_is_configured+0x8>)
    3aba:	6809      	ldr	r1, [r1, #0]
    3abc:	6a09      	ldr	r1, [r1, #32]
    3abe:	4708      	bx	r1
    3ac0:	20000054 	.word	0x20000054

00003ac4 <mpsl_fem_device_config_254_apply_get>:
    3ac4:	4801      	ldr	r0, [pc, #4]	; (3acc <mpsl_fem_device_config_254_apply_get+0x8>)
    3ac6:	7800      	ldrb	r0, [r0, #0]
    3ac8:	4770      	bx	lr
    3aca:	0000      	.short	0x0000
    3acc:	20000286 	.word	0x20000286
    3ad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3ad2:	4c17      	ldr	r4, [pc, #92]	; (3b30 <mpsl_fem_device_config_254_apply_get+0x6c>)
    3ad4:	7a20      	ldrb	r0, [r4, #8]
    3ad6:	2802      	cmp	r0, #2
    3ad8:	d200      	bcs.n	3adc <mpsl_fem_device_config_254_apply_get+0x18>
    3ada:	2002      	movs	r0, #2
    3adc:	f88d 0001 	strb.w	r0, [sp, #1]
    3ae0:	79e0      	ldrb	r0, [r4, #7]
    3ae2:	2803      	cmp	r0, #3
    3ae4:	d200      	bcs.n	3ae8 <mpsl_fem_device_config_254_apply_get+0x24>
    3ae6:	2003      	movs	r0, #3
    3ae8:	f88d 0000 	strb.w	r0, [sp]
    3aec:	79a0      	ldrb	r0, [r4, #6]
    3aee:	f8ad 0004 	strh.w	r0, [sp, #4]
    3af2:	7960      	ldrb	r0, [r4, #5]
    3af4:	f8ad 0002 	strh.w	r0, [sp, #2]
    3af8:	4668      	mov	r0, sp
    3afa:	f006 ffeb 	bl	aad4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    3afe:	b108      	cbz	r0, 3b04 <mpsl_fem_device_config_254_apply_get+0x40>
    3b00:	2184      	movs	r1, #132	; 0x84
    3b02:	e010      	b.n	3b26 <mpsl_fem_device_config_254_apply_get+0x62>
    3b04:	68e0      	ldr	r0, [r4, #12]
    3b06:	9002      	str	r0, [sp, #8]
    3b08:	a802      	add	r0, sp, #8
    3b0a:	f006 fff9 	bl	ab00 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    3b0e:	b108      	cbz	r0, 3b14 <mpsl_fem_device_config_254_apply_get+0x50>
    3b10:	2188      	movs	r1, #136	; 0x88
    3b12:	e008      	b.n	3b26 <mpsl_fem_device_config_254_apply_get+0x62>
    3b14:	4807      	ldr	r0, [pc, #28]	; (3b34 <mpsl_fem_device_config_254_apply_get+0x70>)
    3b16:	6800      	ldr	r0, [r0, #0]
    3b18:	9003      	str	r0, [sp, #12]
    3b1a:	a803      	add	r0, sp, #12
    3b1c:	f00b fab9 	bl	f092 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3b20:	2800      	cmp	r0, #0
    3b22:	d003      	beq.n	3b2c <mpsl_fem_device_config_254_apply_get+0x68>
    3b24:	218c      	movs	r1, #140	; 0x8c
    3b26:	2003      	movs	r0, #3
    3b28:	f000 f918 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b2c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3b2e:	0000      	.short	0x0000
    3b30:	20000e28 	.word	0x20000e28
    3b34:	00003e48 	.word	0x00003e48
    3b38:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    3b3a:	4604      	mov	r4, r0
    3b3c:	460e      	mov	r6, r1
    3b3e:	f100 0003 	add.w	r0, r0, #3
    3b42:	f020 0003 	bic.w	r0, r0, #3
    3b46:	f04f 0100 	mov.w	r1, #0
    3b4a:	e9cd 0100 	strd	r0, r1, [sp]
    3b4e:	7831      	ldrb	r1, [r6, #0]
    3b50:	0015      	movs	r5, r2
    3b52:	f88d 1005 	strb.w	r1, [sp, #5]
    3b56:	d000      	beq.n	3b5a <mpsl_fem_device_config_254_apply_get+0x96>
    3b58:	2000      	movs	r0, #0
    3b5a:	a901      	add	r1, sp, #4
    3b5c:	f000 faee 	bl	413c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    3b60:	9900      	ldr	r1, [sp, #0]
    3b62:	4408      	add	r0, r1
    3b64:	490c      	ldr	r1, [pc, #48]	; (3b98 <mpsl_fem_device_config_254_apply_get+0xd4>)
    3b66:	9000      	str	r0, [sp, #0]
    3b68:	78c9      	ldrb	r1, [r1, #3]
    3b6a:	b149      	cbz	r1, 3b80 <mpsl_fem_device_config_254_apply_get+0xbc>
    3b6c:	7c31      	ldrb	r1, [r6, #16]
    3b6e:	b139      	cbz	r1, 3b80 <mpsl_fem_device_config_254_apply_get+0xbc>
    3b70:	2225      	movs	r2, #37	; 0x25
    3b72:	b105      	cbz	r5, 3b76 <mpsl_fem_device_config_254_apply_get+0xb2>
    3b74:	2000      	movs	r0, #0
    3b76:	f000 fd29 	bl	45cc <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    3b7a:	9900      	ldr	r1, [sp, #0]
    3b7c:	4408      	add	r0, r1
    3b7e:	9000      	str	r0, [sp, #0]
    3b80:	462a      	mov	r2, r5
    3b82:	4631      	mov	r1, r6
    3b84:	4668      	mov	r0, sp
    3b86:	f008 fde0 	bl	c74a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    3b8a:	9800      	ldr	r0, [sp, #0]
    3b8c:	1dc0      	adds	r0, r0, #7
    3b8e:	f020 0007 	bic.w	r0, r0, #7
    3b92:	9000      	str	r0, [sp, #0]
    3b94:	1b00      	subs	r0, r0, r4
    3b96:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    3b98:	20000058 	.word	0x20000058

00003b9c <sdc_build_revision_get>:
    3b9c:	b510      	push	{r4, lr}
    3b9e:	b128      	cbz	r0, 3bac <sdc_build_revision_get+0x10>
    3ba0:	2214      	movs	r2, #20
    3ba2:	4904      	ldr	r1, [pc, #16]	; (3bb4 <sdc_build_revision_get+0x18>)
    3ba4:	f008 fcd8 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3ba8:	2000      	movs	r0, #0
    3baa:	bd10      	pop	{r4, pc}
    3bac:	f06f 0015 	mvn.w	r0, #21
    3bb0:	bd10      	pop	{r4, pc}
    3bb2:	0000      	.short	0x0000
    3bb4:	00003e64 	.word	0x00003e64

00003bb8 <sdc_cfg_set>:
    3bb8:	b570      	push	{r4, r5, r6, lr}
    3bba:	0003      	movs	r3, r0
    3bbc:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    3bc0:	d103      	bne.n	3bca <sdc_cfg_set+0x12>
    3bc2:	4c2a      	ldr	r4, [pc, #168]	; (3c6c <sdc_cfg_set+0xb4>)
    3bc4:	7863      	ldrb	r3, [r4, #1]
    3bc6:	b10b      	cbz	r3, 3bcc <sdc_cfg_set+0x14>
    3bc8:	1180      	asrs	r0, r0, #6
    3bca:	bd70      	pop	{r4, r5, r6, pc}
    3bcc:	b319      	cbz	r1, 3c16 <sdc_cfg_set+0x5e>
    3bce:	f06f 0515 	mvn.w	r5, #21
    3bd2:	b38a      	cbz	r2, 3c38 <sdc_cfg_set+0x80>
    3bd4:	4b26      	ldr	r3, [pc, #152]	; (3c70 <sdc_cfg_set+0xb8>)
    3bd6:	290c      	cmp	r1, #12
    3bd8:	d243      	bcs.n	3c62 <sdc_cfg_set+0xaa>
    3bda:	e8df f001 	tbb	[pc, r1]
    3bde:	0642      	.short	0x0642
    3be0:	13100c09 	.word	0x13100c09
    3be4:	2818251d 	.word	0x2818251d
    3be8:	332e      	.short	0x332e
    3bea:	7810      	ldrb	r0, [r2, #0]
    3bec:	7018      	strb	r0, [r3, #0]
    3bee:	e02d      	b.n	3c4c <sdc_cfg_set+0x94>
    3bf0:	7810      	ldrb	r0, [r2, #0]
    3bf2:	7058      	strb	r0, [r3, #1]
    3bf4:	e02a      	b.n	3c4c <sdc_cfg_set+0x94>
    3bf6:	6810      	ldr	r0, [r2, #0]
    3bf8:	f8c3 0005 	str.w	r0, [r3, #5]
    3bfc:	e026      	b.n	3c4c <sdc_cfg_set+0x94>
    3bfe:	6810      	ldr	r0, [r2, #0]
    3c00:	60d8      	str	r0, [r3, #12]
    3c02:	e023      	b.n	3c4c <sdc_cfg_set+0x94>
    3c04:	7811      	ldrb	r1, [r2, #0]
    3c06:	2900      	cmp	r1, #0
    3c08:	d1df      	bne.n	3bca <sdc_cfg_set+0x12>
    3c0a:	7099      	strb	r1, [r3, #2]
    3c0c:	e01e      	b.n	3c4c <sdc_cfg_set+0x94>
    3c0e:	7811      	ldrb	r1, [r2, #0]
    3c10:	2900      	cmp	r1, #0
    3c12:	d1da      	bne.n	3bca <sdc_cfg_set+0x12>
    3c14:	70d9      	strb	r1, [r3, #3]
    3c16:	e019      	b.n	3c4c <sdc_cfg_set+0x94>
    3c18:	78e0      	ldrb	r0, [r4, #3]
    3c1a:	b110      	cbz	r0, 3c22 <sdc_cfg_set+0x6a>
    3c1c:	7810      	ldrb	r0, [r2, #0]
    3c1e:	2802      	cmp	r0, #2
    3c20:	d31f      	bcc.n	3c62 <sdc_cfg_set+0xaa>
    3c22:	7810      	ldrb	r0, [r2, #0]
    3c24:	7418      	strb	r0, [r3, #16]
    3c26:	e011      	b.n	3c4c <sdc_cfg_set+0x94>
    3c28:	8810      	ldrh	r0, [r2, #0]
    3c2a:	8258      	strh	r0, [r3, #18]
    3c2c:	e00e      	b.n	3c4c <sdc_cfg_set+0x94>
    3c2e:	7811      	ldrb	r1, [r2, #0]
    3c30:	2900      	cmp	r1, #0
    3c32:	d1ca      	bne.n	3bca <sdc_cfg_set+0x12>
    3c34:	7119      	strb	r1, [r3, #4]
    3c36:	e009      	b.n	3c4c <sdc_cfg_set+0x94>
    3c38:	e013      	b.n	3c62 <sdc_cfg_set+0xaa>
    3c3a:	7810      	ldrb	r0, [r2, #0]
    3c3c:	2802      	cmp	r0, #2
    3c3e:	d310      	bcc.n	3c62 <sdc_cfg_set+0xaa>
    3c40:	7518      	strb	r0, [r3, #20]
    3c42:	e003      	b.n	3c4c <sdc_cfg_set+0x94>
    3c44:	7811      	ldrb	r1, [r2, #0]
    3c46:	2900      	cmp	r1, #0
    3c48:	d1bf      	bne.n	3bca <sdc_cfg_set+0x12>
    3c4a:	7559      	strb	r1, [r3, #21]
    3c4c:	2201      	movs	r2, #1
    3c4e:	4908      	ldr	r1, [pc, #32]	; (3c70 <sdc_cfg_set+0xb8>)
    3c50:	2000      	movs	r0, #0
    3c52:	f7ff ff71 	bl	3b38 <mpsl_fem_device_config_254_apply_get+0x74>
    3c56:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3c5a:	db04      	blt.n	3c66 <sdc_cfg_set+0xae>
    3c5c:	f06f 000b 	mvn.w	r0, #11
    3c60:	bd70      	pop	{r4, r5, r6, pc}
    3c62:	4628      	mov	r0, r5
    3c64:	bd70      	pop	{r4, r5, r6, pc}
    3c66:	2101      	movs	r1, #1
    3c68:	70a1      	strb	r1, [r4, #2]
    3c6a:	bd70      	pop	{r4, r5, r6, pc}
    3c6c:	20000058 	.word	0x20000058
    3c70:	20000e28 	.word	0x20000e28

00003c74 <sdc_enable>:
    3c74:	b570      	push	{r4, r5, r6, lr}
    3c76:	460c      	mov	r4, r1
    3c78:	0005      	movs	r5, r0
    3c7a:	d019      	beq.n	3cb0 <sdc_enable+0x3c>
    3c7c:	b1c4      	cbz	r4, 3cb0 <sdc_enable+0x3c>
    3c7e:	f000 f925 	bl	3ecc <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    3c82:	b1c0      	cbz	r0, 3cb6 <sdc_enable+0x42>
    3c84:	4628      	mov	r0, r5
    3c86:	f7ff fe3b 	bl	3900 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3c8a:	4d0c      	ldr	r5, [pc, #48]	; (3cbc <sdc_enable+0x48>)
    3c8c:	2200      	movs	r2, #0
    3c8e:	490c      	ldr	r1, [pc, #48]	; (3cc0 <sdc_enable+0x4c>)
    3c90:	7028      	strb	r0, [r5, #0]
    3c92:	4620      	mov	r0, r4
    3c94:	f7ff ff50 	bl	3b38 <mpsl_fem_device_config_254_apply_get+0x74>
    3c98:	f00b fdfc 	bl	f894 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3c9c:	2100      	movs	r1, #0
    3c9e:	7828      	ldrb	r0, [r5, #0]
    3ca0:	f007 f912 	bl	aec8 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3ca4:	f7ff ff14 	bl	3ad0 <mpsl_fem_device_config_254_apply_get+0xc>
    3ca8:	2001      	movs	r0, #1
    3caa:	7068      	strb	r0, [r5, #1]
    3cac:	2000      	movs	r0, #0
    3cae:	bd70      	pop	{r4, r5, r6, pc}
    3cb0:	f06f 0015 	mvn.w	r0, #21
    3cb4:	bd70      	pop	{r4, r5, r6, pc}
    3cb6:	f04f 30ff 	mov.w	r0, #4294967295
    3cba:	bd70      	pop	{r4, r5, r6, pc}
    3cbc:	20000058 	.word	0x20000058
    3cc0:	20000e28 	.word	0x20000e28

00003cc4 <sdc_init>:
    3cc4:	b530      	push	{r4, r5, lr}
    3cc6:	b087      	sub	sp, #28
    3cc8:	0005      	movs	r5, r0
    3cca:	d00c      	beq.n	3ce6 <sdc_init+0x22>
    3ccc:	f7ff fdbe 	bl	384c <mpsl_is_initialized>
    3cd0:	f04f 34ff 	mov.w	r4, #4294967295
    3cd4:	b120      	cbz	r0, 3ce0 <sdc_init+0x1c>
    3cd6:	f7ff fc87 	bl	35e8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3cda:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3cde:	d905      	bls.n	3cec <sdc_init+0x28>
    3ce0:	4620      	mov	r0, r4
    3ce2:	b007      	add	sp, #28
    3ce4:	bd30      	pop	{r4, r5, pc}
    3ce6:	f06f 0015 	mvn.w	r0, #21
    3cea:	e7fa      	b.n	3ce2 <sdc_init+0x1e>
    3cec:	4c15      	ldr	r4, [pc, #84]	; (3d44 <sdc_init+0x80>)
    3cee:	4816      	ldr	r0, [pc, #88]	; (3d48 <sdc_init+0x84>)
    3cf0:	6065      	str	r5, [r4, #4]
    3cf2:	f000 f9e5 	bl	40c0 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3cf6:	2000      	movs	r0, #0
    3cf8:	7060      	strb	r0, [r4, #1]
    3cfa:	70a0      	strb	r0, [r4, #2]
    3cfc:	70e0      	strb	r0, [r4, #3]
    3cfe:	4601      	mov	r1, r0
    3d00:	2218      	movs	r2, #24
    3d02:	4668      	mov	r0, sp
    3d04:	f008 fca2 	bl	c64c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3d08:	2218      	movs	r2, #24
    3d0a:	4910      	ldr	r1, [pc, #64]	; (3d4c <sdc_init+0x88>)
    3d0c:	4668      	mov	r0, sp
    3d0e:	f008 fc23 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3d12:	2218      	movs	r2, #24
    3d14:	4669      	mov	r1, sp
    3d16:	480e      	ldr	r0, [pc, #56]	; (3d50 <sdc_init+0x8c>)
    3d18:	f008 fc1e 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3d1c:	f3ef 8410 	mrs	r4, PRIMASK
    3d20:	b672      	cpsid	i
    3d22:	480c      	ldr	r0, [pc, #48]	; (3d54 <sdc_init+0x90>)
    3d24:	f06f 010c 	mvn.w	r1, #12
    3d28:	f000 fcf2 	bl	4710 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3d2c:	480a      	ldr	r0, [pc, #40]	; (3d58 <sdc_init+0x94>)
    3d2e:	f000 fdbf 	bl	48b0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3d32:	b118      	cbz	r0, 3d3c <sdc_init+0x78>
    3d34:	219a      	movs	r1, #154	; 0x9a
    3d36:	2003      	movs	r0, #3
    3d38:	f000 f810 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3d3c:	b904      	cbnz	r4, 3d40 <sdc_init+0x7c>
    3d3e:	b662      	cpsie	i
    3d40:	2000      	movs	r0, #0
    3d42:	e7ce      	b.n	3ce2 <sdc_init+0x1e>
    3d44:	20000058 	.word	0x20000058
    3d48:	00003ad1 	.word	0x00003ad1
    3d4c:	00003e4c 	.word	0x00003e4c
    3d50:	20000e28 	.word	0x20000e28
    3d54:	4000c000 	.word	0x4000c000
    3d58:	00003ef9 	.word	0x00003ef9

00003d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3d5c:	b50e      	push	{r1, r2, r3, lr}
    3d5e:	b672      	cpsid	i
    3d60:	4a15      	ldr	r2, [pc, #84]	; (3db8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3d62:	6855      	ldr	r5, [r2, #4]
    3d64:	b1d5      	cbz	r5, 3d9c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    3d66:	2200      	movs	r2, #0
    3d68:	4603      	mov	r3, r0
    3d6a:	466e      	mov	r6, sp
    3d6c:	240a      	movs	r4, #10
    3d6e:	e003      	b.n	3d78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3d70:	fbb0 f0f4 	udiv	r0, r0, r4
    3d74:	1c52      	adds	r2, r2, #1
    3d76:	b2d2      	uxtb	r2, r2
    3d78:	2800      	cmp	r0, #0
    3d7a:	d1f9      	bne.n	3d70 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    3d7c:	54b0      	strb	r0, [r6, r2]
    3d7e:	e009      	b.n	3d94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    3d80:	fbb3 f0f4 	udiv	r0, r3, r4
    3d84:	fb04 3010 	mls	r0, r4, r0, r3
    3d88:	fbb3 f3f4 	udiv	r3, r3, r4
    3d8c:	1e52      	subs	r2, r2, #1
    3d8e:	b2d2      	uxtb	r2, r2
    3d90:	3030      	adds	r0, #48	; 0x30
    3d92:	54b0      	strb	r0, [r6, r2]
    3d94:	2a00      	cmp	r2, #0
    3d96:	d1f3      	bne.n	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    3d98:	4630      	mov	r0, r6
    3d9a:	47a8      	blx	r5
    3d9c:	f3bf 8f4f 	dsb	sy
    3da0:	4806      	ldr	r0, [pc, #24]	; (3dbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    3da2:	6801      	ldr	r1, [r0, #0]
    3da4:	4a06      	ldr	r2, [pc, #24]	; (3dc0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    3da6:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3daa:	4311      	orrs	r1, r2
    3dac:	6001      	str	r1, [r0, #0]
    3dae:	f3bf 8f4f 	dsb	sy
    3db2:	bf00      	nop
    3db4:	e7fd      	b.n	3db2 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    3db6:	0000      	.short	0x0000
    3db8:	20000058 	.word	0x20000058
    3dbc:	e000ed0c 	.word	0xe000ed0c
    3dc0:	05fa0004 	.word	0x05fa0004

00003dc4 <sdc_support_dle>:
    3dc4:	4806      	ldr	r0, [pc, #24]	; (3de0 <sdc_support_dle+0x1c>)
    3dc6:	b510      	push	{r4, lr}
    3dc8:	7881      	ldrb	r1, [r0, #2]
    3dca:	7840      	ldrb	r0, [r0, #1]
    3dcc:	4301      	orrs	r1, r0
    3dce:	d002      	beq.n	3dd6 <sdc_support_dle+0x12>
    3dd0:	f04f 30ff 	mov.w	r0, #4294967295
    3dd4:	bd10      	pop	{r4, pc}
    3dd6:	f006 fee9 	bl	abac <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    3dda:	2000      	movs	r0, #0
    3ddc:	bd10      	pop	{r4, pc}
    3dde:	0000      	.short	0x0000
    3de0:	20000058 	.word	0x20000058

00003de4 <sdc_support_le_2m_phy>:
    3de4:	4806      	ldr	r0, [pc, #24]	; (3e00 <sdc_support_le_2m_phy+0x1c>)
    3de6:	b510      	push	{r4, lr}
    3de8:	7881      	ldrb	r1, [r0, #2]
    3dea:	7840      	ldrb	r0, [r0, #1]
    3dec:	4301      	orrs	r1, r0
    3dee:	d002      	beq.n	3df6 <sdc_support_le_2m_phy+0x12>
    3df0:	f04f 30ff 	mov.w	r0, #4294967295
    3df4:	bd10      	pop	{r4, pc}
    3df6:	f00b f9f9 	bl	f1ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    3dfa:	2000      	movs	r0, #0
    3dfc:	bd10      	pop	{r4, pc}
    3dfe:	0000      	.short	0x0000
    3e00:	20000058 	.word	0x20000058

00003e04 <sdc_support_master>:
    3e04:	4806      	ldr	r0, [pc, #24]	; (3e20 <sdc_support_master+0x1c>)
    3e06:	b510      	push	{r4, lr}
    3e08:	7881      	ldrb	r1, [r0, #2]
    3e0a:	7840      	ldrb	r0, [r0, #1]
    3e0c:	4301      	orrs	r1, r0
    3e0e:	d002      	beq.n	3e16 <sdc_support_master+0x12>
    3e10:	f04f 30ff 	mov.w	r0, #4294967295
    3e14:	bd10      	pop	{r4, pc}
    3e16:	f007 f88d 	bl	af34 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>
    3e1a:	2000      	movs	r0, #0
    3e1c:	bd10      	pop	{r4, pc}
    3e1e:	0000      	.short	0x0000
    3e20:	20000058 	.word	0x20000058

00003e24 <sdc_support_scan>:
    3e24:	4807      	ldr	r0, [pc, #28]	; (3e44 <sdc_support_scan+0x20>)
    3e26:	b510      	push	{r4, lr}
    3e28:	7881      	ldrb	r1, [r0, #2]
    3e2a:	7842      	ldrb	r2, [r0, #1]
    3e2c:	4311      	orrs	r1, r2
    3e2e:	d002      	beq.n	3e36 <sdc_support_scan+0x12>
    3e30:	f04f 30ff 	mov.w	r0, #4294967295
    3e34:	bd10      	pop	{r4, pc}
    3e36:	2101      	movs	r1, #1
    3e38:	70c1      	strb	r1, [r0, #3]
    3e3a:	f007 f869 	bl	af10 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>
    3e3e:	2000      	movs	r0, #0
    3e40:	bd10      	pop	{r4, pc}
    3e42:	0000      	.short	0x0000
    3e44:	20000058 	.word	0x20000058
    3e48:	00000001 	.word	0x00000001
    3e4c:	00010101 	.word	0x00010101
    3e50:	031b1b00 	.word	0x031b1b00
    3e54:	00000002 	.word	0x00000002
    3e58:	00001d4c 	.word	0x00001d4c
    3e5c:	001f0003 	.word	0x001f0003
    3e60:	00000000 	.word	0x00000000
    3e64:	66c5e70e 	.word	0x66c5e70e
    3e68:	ac3c1867 	.word	0xac3c1867
    3e6c:	81ccd2b3 	.word	0x81ccd2b3
    3e70:	c0f1dca3 	.word	0xc0f1dca3
    3e74:	220236c0 	.word	0x220236c0

00003e78 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    3e78:	4a05      	ldr	r2, [pc, #20]	; (3e90 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    3e7a:	b510      	push	{r4, lr}
    3e7c:	6852      	ldr	r2, [r2, #4]
    3e7e:	b112      	cbz	r2, 3e86 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    3e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3e84:	4710      	bx	r2
    3e86:	2183      	movs	r1, #131	; 0x83
    3e88:	2004      	movs	r0, #4
    3e8a:	f7ff ff67 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e8e:	0000      	.short	0x0000
    3e90:	20000e40 	.word	0x20000e40

00003e94 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    3e94:	4a05      	ldr	r2, [pc, #20]	; (3eac <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    3e96:	b510      	push	{r4, lr}
    3e98:	6812      	ldr	r2, [r2, #0]
    3e9a:	b112      	cbz	r2, 3ea2 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    3e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ea0:	4710      	bx	r2
    3ea2:	217d      	movs	r1, #125	; 0x7d
    3ea4:	2004      	movs	r0, #4
    3ea6:	f7ff ff59 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3eaa:	0000      	.short	0x0000
    3eac:	20000e40 	.word	0x20000e40

00003eb0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    3eb0:	4a05      	ldr	r2, [pc, #20]	; (3ec8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    3eb2:	b510      	push	{r4, lr}
    3eb4:	6892      	ldr	r2, [r2, #8]
    3eb6:	b112      	cbz	r2, 3ebe <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    3eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ebc:	4710      	bx	r2
    3ebe:	2189      	movs	r1, #137	; 0x89
    3ec0:	2004      	movs	r0, #4
    3ec2:	f7ff ff4b 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ec6:	0000      	.short	0x0000
    3ec8:	20000e40 	.word	0x20000e40

00003ecc <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    3ecc:	4805      	ldr	r0, [pc, #20]	; (3ee4 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    3ece:	6801      	ldr	r1, [r0, #0]
    3ed0:	b129      	cbz	r1, 3ede <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3ed2:	6841      	ldr	r1, [r0, #4]
    3ed4:	b119      	cbz	r1, 3ede <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3ed6:	6880      	ldr	r0, [r0, #8]
    3ed8:	b108      	cbz	r0, 3ede <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3eda:	2001      	movs	r0, #1
    3edc:	4770      	bx	lr
    3ede:	2000      	movs	r0, #0
    3ee0:	4770      	bx	lr
    3ee2:	0000      	.short	0x0000
    3ee4:	20000e40 	.word	0x20000e40

00003ee8 <sdc_rand_source_register>:
    3ee8:	4902      	ldr	r1, [pc, #8]	; (3ef4 <sdc_rand_source_register+0xc>)
    3eea:	c80d      	ldmia	r0, {r0, r2, r3}
    3eec:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    3ef0:	2000      	movs	r0, #0
    3ef2:	4770      	bx	lr
    3ef4:	20000e40 	.word	0x20000e40

00003ef8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    3ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3efa:	4c12      	ldr	r4, [pc, #72]	; (3f44 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    3efc:	2600      	movs	r6, #0
    3efe:	6825      	ldr	r5, [r4, #0]
    3f00:	e011      	b.n	3f26 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3f02:	9800      	ldr	r0, [sp, #0]
    3f04:	2802      	cmp	r0, #2
    3f06:	d002      	beq.n	3f0e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    3f08:	2803      	cmp	r0, #3
    3f0a:	d10c      	bne.n	3f26 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3f0c:	e006      	b.n	3f1c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    3f0e:	6820      	ldr	r0, [r4, #0]
    3f10:	b110      	cbz	r0, 3f18 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    3f12:	2000      	movs	r0, #0
    3f14:	6026      	str	r6, [r4, #0]
    3f16:	e005      	b.n	3f24 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    3f18:	2128      	movs	r1, #40	; 0x28
    3f1a:	e00c      	b.n	3f36 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3f1c:	6820      	ldr	r0, [r4, #0]
    3f1e:	b168      	cbz	r0, 3f3c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    3f20:	2001      	movs	r0, #1
    3f22:	6026      	str	r6, [r4, #0]
    3f24:	47a8      	blx	r5
    3f26:	4668      	mov	r0, sp
    3f28:	f000 fc94 	bl	4854 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    3f2c:	2800      	cmp	r0, #0
    3f2e:	d0e8      	beq.n	3f02 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    3f30:	2805      	cmp	r0, #5
    3f32:	d005      	beq.n	3f40 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    3f34:	2135      	movs	r1, #53	; 0x35
    3f36:	2004      	movs	r0, #4
    3f38:	f7ff ff10 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f3c:	212d      	movs	r1, #45	; 0x2d
    3f3e:	e7fa      	b.n	3f36 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f42:	0000      	.short	0x0000
    3f44:	20000060 	.word	0x20000060
    3f48:	b570      	push	{r4, r5, r6, lr}
    3f4a:	4c14      	ldr	r4, [pc, #80]	; (3f9c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>)
    3f4c:	4605      	mov	r5, r0
    3f4e:	7820      	ldrb	r0, [r4, #0]
    3f50:	b140      	cbz	r0, 3f64 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    3f52:	78a2      	ldrb	r2, [r4, #2]
    3f54:	1c61      	adds	r1, r4, #1
    3f56:	4628      	mov	r0, r5
    3f58:	1c92      	adds	r2, r2, #2
    3f5a:	f008 fafd 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3f5e:	2000      	movs	r0, #0
    3f60:	7020      	strb	r0, [r4, #0]
    3f62:	e013      	b.n	3f8c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    3f64:	480e      	ldr	r0, [pc, #56]	; (3fa0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    3f66:	f001 ffc9 	bl	5efc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    3f6a:	2800      	cmp	r0, #0
    3f6c:	d00f      	beq.n	3f8e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    3f6e:	480c      	ldr	r0, [pc, #48]	; (3fa0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    3f70:	7800      	ldrb	r0, [r0, #0]
    3f72:	2814      	cmp	r0, #20
    3f74:	d104      	bne.n	3f80 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    3f76:	210a      	movs	r1, #10
    3f78:	203e      	movs	r0, #62	; 0x3e
    3f7a:	f008 fc3e 	bl	c7fa <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3f7e:	b138      	cbz	r0, 3f90 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x98>
    3f80:	4907      	ldr	r1, [pc, #28]	; (3fa0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    3f82:	4628      	mov	r0, r5
    3f84:	f008 fc97 	bl	c8b6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    3f88:	2800      	cmp	r0, #0
    3f8a:	d000      	beq.n	3f8e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    3f8c:	2001      	movs	r0, #1
    3f8e:	bd70      	pop	{r4, r5, r6, pc}
    3f90:	4903      	ldr	r1, [pc, #12]	; (3fa0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    3f92:	4628      	mov	r0, r5
    3f94:	f008 fecc 	bl	cd30 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    3f98:	e7f8      	b.n	3f8c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    3f9a:	0000      	.short	0x0000
    3f9c:	20000f54 	.word	0x20000f54
    3fa0:	20000e4c 	.word	0x20000e4c
    3fa4:	b570      	push	{r4, r5, r6, lr}
    3fa6:	780a      	ldrb	r2, [r1, #0]
    3fa8:	7082      	strb	r2, [r0, #2]
    3faa:	b33a      	cbz	r2, 3ffc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    3fac:	2a01      	cmp	r2, #1
    3fae:	d825      	bhi.n	3ffc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    3fb0:	2313      	movs	r3, #19
    3fb2:	7003      	strb	r3, [r0, #0]
    3fb4:	2300      	movs	r3, #0
    3fb6:	e00a      	b.n	3fce <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd6>
    3fb8:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    3fbc:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    3fc0:	78a6      	ldrb	r6, [r4, #2]
    3fc2:	70ee      	strb	r6, [r5, #3]
    3fc4:	8864      	ldrh	r4, [r4, #2]
    3fc6:	0a24      	lsrs	r4, r4, #8
    3fc8:	1c5b      	adds	r3, r3, #1
    3fca:	712c      	strb	r4, [r5, #4]
    3fcc:	b2db      	uxtb	r3, r3
    3fce:	4293      	cmp	r3, r2
    3fd0:	d3f2      	bcc.n	3fb8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xc0>
    3fd2:	2300      	movs	r3, #0
    3fd4:	e00b      	b.n	3fee <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xf6>
    3fd6:	bf00      	nop
    3fd8:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    3fdc:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    3fe0:	792e      	ldrb	r6, [r5, #4]
    3fe2:	7166      	strb	r6, [r4, #5]
    3fe4:	88ad      	ldrh	r5, [r5, #4]
    3fe6:	0a2d      	lsrs	r5, r5, #8
    3fe8:	1c5b      	adds	r3, r3, #1
    3fea:	71a5      	strb	r5, [r4, #6]
    3fec:	b2db      	uxtb	r3, r3
    3fee:	4293      	cmp	r3, r2
    3ff0:	d3f2      	bcc.n	3fd8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xe0>
    3ff2:	2101      	movs	r1, #1
    3ff4:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    3ff8:	b2c0      	uxtb	r0, r0
    3ffa:	bd70      	pop	{r4, r5, r6, pc}
    3ffc:	2000      	movs	r0, #0
    3ffe:	bd70      	pop	{r4, r5, r6, pc}

00004000 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4000:	2101      	movs	r1, #1
    4002:	4a0c      	ldr	r2, [pc, #48]	; (4034 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    4004:	2840      	cmp	r0, #64	; 0x40
    4006:	d20c      	bcs.n	4022 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    4008:	2820      	cmp	r0, #32
    400a:	d803      	bhi.n	4014 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    400c:	1e40      	subs	r0, r0, #1
    400e:	4081      	lsls	r1, r0
    4010:	6810      	ldr	r0, [r2, #0]
    4012:	e002      	b.n	401a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4014:	3821      	subs	r0, #33	; 0x21
    4016:	4081      	lsls	r1, r0
    4018:	6850      	ldr	r0, [r2, #4]
    401a:	4201      	tst	r1, r0
    401c:	d107      	bne.n	402e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    401e:	2000      	movs	r0, #0
    4020:	4770      	bx	lr
    4022:	28ff      	cmp	r0, #255	; 0xff
    4024:	d003      	beq.n	402e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4026:	3840      	subs	r0, #64	; 0x40
    4028:	4081      	lsls	r1, r0
    402a:	6890      	ldr	r0, [r2, #8]
    402c:	e7f5      	b.n	401a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    402e:	2001      	movs	r0, #1
    4030:	4770      	bx	lr
    4032:	0000      	.short	0x0000
    4034:	20000064 	.word	0x20000064

00004038 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4038:	2101      	movs	r1, #1
    403a:	1e40      	subs	r0, r0, #1
    403c:	4081      	lsls	r1, r0
    403e:	4804      	ldr	r0, [pc, #16]	; (4050 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    4040:	68c0      	ldr	r0, [r0, #12]
    4042:	4201      	tst	r1, r0
    4044:	d001      	beq.n	404a <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    4046:	2001      	movs	r0, #1
    4048:	4770      	bx	lr
    404a:	2000      	movs	r0, #0
    404c:	4770      	bx	lr
    404e:	0000      	.short	0x0000
    4050:	20000064 	.word	0x20000064

00004054 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4054:	4901      	ldr	r1, [pc, #4]	; (405c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    4056:	6800      	ldr	r0, [r0, #0]
    4058:	60c8      	str	r0, [r1, #12]
    405a:	4770      	bx	lr
    405c:	20000064 	.word	0x20000064

00004060 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    4060:	4904      	ldr	r1, [pc, #16]	; (4074 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    4062:	6802      	ldr	r2, [r0, #0]
    4064:	6840      	ldr	r0, [r0, #4]
    4066:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    406a:	600a      	str	r2, [r1, #0]
    406c:	4a02      	ldr	r2, [pc, #8]	; (4078 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    406e:	4310      	orrs	r0, r2
    4070:	6048      	str	r0, [r1, #4]
    4072:	4770      	bx	lr
    4074:	20000064 	.word	0x20000064
    4078:	024007f8 	.word	0x024007f8

0000407c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    407c:	4901      	ldr	r1, [pc, #4]	; (4084 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    407e:	6800      	ldr	r0, [r0, #0]
    4080:	6088      	str	r0, [r1, #8]
    4082:	4770      	bx	lr
    4084:	20000064 	.word	0x20000064

00004088 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4088:	4805      	ldr	r0, [pc, #20]	; (40a0 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    408a:	f04f 31ff 	mov.w	r1, #4294967295
    408e:	6001      	str	r1, [r0, #0]
    4090:	0cc9      	lsrs	r1, r1, #19
    4092:	6041      	str	r1, [r0, #4]
    4094:	2100      	movs	r1, #0
    4096:	6081      	str	r1, [r0, #8]
    4098:	211f      	movs	r1, #31
    409a:	60c1      	str	r1, [r0, #12]
    409c:	4770      	bx	lr
    409e:	0000      	.short	0x0000
    40a0:	20000064 	.word	0x20000064

000040a4 <sdc_hci_cmd_cb_reset>:
    40a4:	b510      	push	{r4, lr}
    40a6:	f7ff ffef 	bl	4088 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    40aa:	f00b f878 	bl	f19e <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    40ae:	4604      	mov	r4, r0
    40b0:	4802      	ldr	r0, [pc, #8]	; (40bc <sdc_hci_cmd_cb_reset+0x18>)
    40b2:	6800      	ldr	r0, [r0, #0]
    40b4:	b100      	cbz	r0, 40b8 <sdc_hci_cmd_cb_reset+0x14>
    40b6:	4780      	blx	r0
    40b8:	4620      	mov	r0, r4
    40ba:	bd10      	pop	{r4, pc}
    40bc:	20000074 	.word	0x20000074

000040c0 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    40c0:	4901      	ldr	r1, [pc, #4]	; (40c8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    40c2:	6008      	str	r0, [r1, #0]
    40c4:	4770      	bx	lr
    40c6:	0000      	.short	0x0000
    40c8:	20000074 	.word	0x20000074

000040cc <sdc_hci_cmd_vs_zephyr_read_version_info>:
    40cc:	2102      	movs	r1, #2
    40ce:	8001      	strh	r1, [r0, #0]
    40d0:	8041      	strh	r1, [r0, #2]
    40d2:	2100      	movs	r1, #0
    40d4:	7101      	strb	r1, [r0, #4]
    40d6:	210e      	movs	r1, #14
    40d8:	7141      	strb	r1, [r0, #5]
    40da:	f24c 51e7 	movw	r1, #50663	; 0xc5e7
    40de:	80c1      	strh	r1, [r0, #6]
    40e0:	4901      	ldr	r1, [pc, #4]	; (40e8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    40e2:	6081      	str	r1, [r0, #8]
    40e4:	2000      	movs	r0, #0
    40e6:	4770      	bx	lr
    40e8:	3c186766 	.word	0x3c186766

000040ec <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    40ec:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    40ee:	4604      	mov	r4, r0
    40f0:	4669      	mov	r1, sp
    40f2:	f009 fadb 	bl	d6ac <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    40f6:	b170      	cbz	r0, 4116 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    40f8:	f240 215a 	movw	r1, #602	; 0x25a
    40fc:	e008      	b.n	4110 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    40fe:	bf00      	nop
    4100:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    4104:	4621      	mov	r1, r4
    4106:	f000 f8a7 	bl	4258 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    410a:	b120      	cbz	r0, 4116 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    410c:	f240 215f 	movw	r1, #607	; 0x25f
    4110:	2017      	movs	r0, #23
    4112:	f7ff fe23 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4116:	4668      	mov	r0, sp
    4118:	f000 f850 	bl	41bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    411c:	2800      	cmp	r0, #0
    411e:	d0ef      	beq.n	4100 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    4120:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00004124 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4124:	b510      	push	{r4, lr}
    4126:	b120      	cbz	r0, 4132 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0xe>
    4128:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    412c:	2017      	movs	r0, #23
    412e:	f7ff fe15 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4132:	4801      	ldr	r0, [pc, #4]	; (4138 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x14>)
    4134:	7800      	ldrb	r0, [r0, #0]
    4136:	bd10      	pop	{r4, pc}
    4138:	20001058 	.word	0x20001058

0000413c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    413c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    413e:	4605      	mov	r5, r0
    4140:	7808      	ldrb	r0, [r1, #0]
    4142:	784a      	ldrb	r2, [r1, #1]
    4144:	4290      	cmp	r0, r2
    4146:	d902      	bls.n	414e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x12>
    4148:	f240 1163 	movw	r1, #355	; 0x163
    414c:	e00a      	b.n	4164 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    414e:	9500      	str	r5, [sp, #0]
    4150:	b15d      	cbz	r5, 416a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    4152:	2600      	movs	r6, #0
    4154:	1ce8      	adds	r0, r5, #3
    4156:	784c      	ldrb	r4, [r1, #1]
    4158:	f020 0003 	bic.w	r0, r0, #3
    415c:	42a8      	cmp	r0, r5
    415e:	d006      	beq.n	416e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x32>
    4160:	f240 1179 	movw	r1, #377	; 0x179
    4164:	2017      	movs	r0, #23
    4166:	f7ff fdf9 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    416a:	2601      	movs	r6, #1
    416c:	e7f2      	b.n	4154 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x18>
    416e:	4f12      	ldr	r7, [pc, #72]	; (41b8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    4170:	4631      	mov	r1, r6
    4172:	4668      	mov	r0, sp
    4174:	703c      	strb	r4, [r7, #0]
    4176:	f000 f8e1 	bl	433c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe4>
    417a:	2000      	movs	r0, #0
    417c:	4603      	mov	r3, r0
    417e:	9900      	ldr	r1, [sp, #0]
    4180:	1cc9      	adds	r1, r1, #3
    4182:	f021 0103 	bic.w	r1, r1, #3
    4186:	9100      	str	r1, [sp, #0]
    4188:	b966      	cbnz	r6, 41a4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    418a:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    418e:	6091      	str	r1, [r2, #8]
    4190:	2100      	movs	r1, #0
    4192:	e005      	b.n	41a0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    4194:	f8d2 c008 	ldr.w	ip, [r2, #8]
    4198:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    419c:	1c49      	adds	r1, r1, #1
    419e:	b2c9      	uxtb	r1, r1
    41a0:	42a1      	cmp	r1, r4
    41a2:	d3f7      	bcc.n	4194 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    41a4:	9900      	ldr	r1, [sp, #0]
    41a6:	1c40      	adds	r0, r0, #1
    41a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    41ac:	9100      	str	r1, [sp, #0]
    41ae:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    41b2:	d0e4      	beq.n	417e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x42>
    41b4:	1b48      	subs	r0, r1, r5
    41b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41b8:	20001058 	.word	0x20001058

000041bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    41bc:	b570      	push	{r4, r5, r6, lr}
    41be:	4604      	mov	r4, r0
    41c0:	f009 face 	bl	d760 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    41c4:	b108      	cbz	r0, 41ca <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    41c6:	2010      	movs	r0, #16
    41c8:	bd70      	pop	{r4, r5, r6, pc}
    41ca:	7825      	ldrb	r5, [r4, #0]
    41cc:	f000 f8f2 	bl	43b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    41d0:	4602      	mov	r2, r0
    41d2:	480c      	ldr	r0, [pc, #48]	; (4204 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    41d4:	8861      	ldrh	r1, [r4, #2]
    41d6:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    41da:	e00e      	b.n	41fa <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    41dc:	6883      	ldr	r3, [r0, #8]
    41de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    41e2:	b143      	cbz	r3, 41f6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    41e4:	1c4a      	adds	r2, r1, #1
    41e6:	8062      	strh	r2, [r4, #2]
    41e8:	80a1      	strh	r1, [r4, #4]
    41ea:	6880      	ldr	r0, [r0, #8]
    41ec:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    41f0:	60a0      	str	r0, [r4, #8]
    41f2:	2000      	movs	r0, #0
    41f4:	bd70      	pop	{r4, r5, r6, pc}
    41f6:	1c49      	adds	r1, r1, #1
    41f8:	b289      	uxth	r1, r1
    41fa:	4291      	cmp	r1, r2
    41fc:	d3ee      	bcc.n	41dc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    41fe:	8061      	strh	r1, [r4, #2]
    4200:	2005      	movs	r0, #5
    4202:	bd70      	pop	{r4, r5, r6, pc}
    4204:	20001058 	.word	0x20001058

00004208 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    420c:	b949      	cbnz	r1, 4222 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    420e:	4c11      	ldr	r4, [pc, #68]	; (4254 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4c>)
    4210:	2700      	movs	r7, #0
    4212:	463b      	mov	r3, r7
    4214:	f64f 76ff 	movw	r6, #65535	; 0xffff
    4218:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    421c:	f814 c001 	ldrb.w	ip, [r4, r1]
    4220:	e00d      	b.n	423e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
    4222:	2000      	movs	r0, #0
    4224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4228:	19dc      	adds	r4, r3, r7
    422a:	f8d5 e008 	ldr.w	lr, [r5, #8]
    422e:	b2a4      	uxth	r4, r4
    4230:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    4234:	f1be 0f00 	cmp.w	lr, #0
    4238:	d004      	beq.n	4244 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    423a:	1c5b      	adds	r3, r3, #1
    423c:	b29b      	uxth	r3, r3
    423e:	459c      	cmp	ip, r3
    4240:	d8f2      	bhi.n	4228 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    4242:	4634      	mov	r4, r6
    4244:	8004      	strh	r4, [r0, #0]
    4246:	4620      	mov	r0, r4
    4248:	42b4      	cmp	r4, r6
    424a:	d0ea      	beq.n	4222 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    424c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4250:	f000 b82c 	b.w	42ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x54>
    4254:	20001058 	.word	0x20001058

00004258 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4258:	b570      	push	{r4, r5, r6, lr}
    425a:	4606      	mov	r6, r0
    425c:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    4260:	f243 0502 	movw	r5, #12290	; 0x3002
    4264:	38ff      	subs	r0, #255	; 0xff
    4266:	d01a      	beq.n	429e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    4268:	b109      	cbz	r1, 426e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16>
    426a:	2007      	movs	r0, #7
    426c:	bd70      	pop	{r4, r5, r6, pc}
    426e:	4630      	mov	r0, r6
    4270:	f000 f854 	bl	431c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>
    4274:	0004      	movs	r4, r0
    4276:	d012      	beq.n	429e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    4278:	480a      	ldr	r0, [pc, #40]	; (42a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x4c>)
    427a:	4621      	mov	r1, r4
    427c:	6802      	ldr	r2, [r0, #0]
    427e:	4630      	mov	r0, r6
    4280:	4790      	blx	r2
    4282:	4d09      	ldr	r5, [pc, #36]	; (42a8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x50>)
    4284:	2000      	movs	r0, #0
    4286:	68a9      	ldr	r1, [r5, #8]
    4288:	f841 0026 	str.w	r0, [r1, r6, lsl #2]
    428c:	f000 f888 	bl	43a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    4290:	4602      	mov	r2, r0
    4292:	4621      	mov	r1, r4
    4294:	6868      	ldr	r0, [r5, #4]
    4296:	f009 f9f3 	bl	d680 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    429a:	2000      	movs	r0, #0
    429c:	bd70      	pop	{r4, r5, r6, pc}
    429e:	4628      	mov	r0, r5
    42a0:	bd70      	pop	{r4, r5, r6, pc}
    42a2:	0000      	.short	0x0000
    42a4:	000043c8 	.word	0x000043c8
    42a8:	20001058 	.word	0x20001058
    42ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42b0:	4690      	mov	r8, r2
    42b2:	460e      	mov	r6, r1
    42b4:	4607      	mov	r7, r0
    42b6:	f009 fa09 	bl	d6cc <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    42ba:	b148      	cbz	r0, 42d0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x78>
    42bc:	4815      	ldr	r0, [pc, #84]	; (4314 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbc>)
    42be:	eb00 0586 	add.w	r5, r0, r6, lsl #2
    42c2:	68a8      	ldr	r0, [r5, #8]
    42c4:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    42c8:	b128      	cbz	r0, 42d6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x7e>
    42ca:	f44f 719d 	mov.w	r1, #314	; 0x13a
    42ce:	e014      	b.n	42fa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
    42d0:	f240 1139 	movw	r1, #313	; 0x139
    42d4:	e011      	b.n	42fa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
    42d6:	6868      	ldr	r0, [r5, #4]
    42d8:	2800      	cmp	r0, #0
    42da:	d018      	beq.n	430e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb6>
    42dc:	4630      	mov	r0, r6
    42de:	f000 f85f 	bl	43a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    42e2:	4601      	mov	r1, r0
    42e4:	6868      	ldr	r0, [r5, #4]
    42e6:	f009 f97d 	bl	d5e4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    42ea:	0004      	movs	r4, r0
    42ec:	d00e      	beq.n	430c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    42ee:	68a8      	ldr	r0, [r5, #8]
    42f0:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    42f4:	b126      	cbz	r6, 4300 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa8>
    42f6:	f240 1145 	movw	r1, #325	; 0x145
    42fa:	2017      	movs	r0, #23
    42fc:	f7ff fd2e 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4300:	4805      	ldr	r0, [pc, #20]	; (4318 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc0>)
    4302:	4642      	mov	r2, r8
    4304:	4621      	mov	r1, r4
    4306:	6803      	ldr	r3, [r0, #0]
    4308:	4638      	mov	r0, r7
    430a:	4798      	blx	r3
    430c:	4620      	mov	r0, r4
    430e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4312:	0000      	.short	0x0000
    4314:	20001058 	.word	0x20001058
    4318:	000043c4 	.word	0x000043c4
    431c:	b570      	push	{r4, r5, r6, lr}
    431e:	460c      	mov	r4, r1
    4320:	4605      	mov	r5, r0
    4322:	f009 f9d3 	bl	d6cc <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    4326:	2800      	cmp	r0, #0
    4328:	d005      	beq.n	4336 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xde>
    432a:	4803      	ldr	r0, [pc, #12]	; (4338 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>)
    432c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4330:	6880      	ldr	r0, [r0, #8]
    4332:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    4336:	bd70      	pop	{r4, r5, r6, pc}
    4338:	20001058 	.word	0x20001058
    433c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4340:	4e16      	ldr	r6, [pc, #88]	; (439c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x144>)
    4342:	4688      	mov	r8, r1
    4344:	4605      	mov	r5, r0
    4346:	2400      	movs	r4, #0
    4348:	6828      	ldr	r0, [r5, #0]
    434a:	1cc0      	adds	r0, r0, #3
    434c:	f020 0003 	bic.w	r0, r0, #3
    4350:	6028      	str	r0, [r5, #0]
    4352:	4620      	mov	r0, r4
    4354:	f000 f824 	bl	43a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    4358:	5d31      	ldrb	r1, [r6, r4]
    435a:	4348      	muls	r0, r1
    435c:	f1b8 0f00 	cmp.w	r8, #0
    4360:	d001      	beq.n	4366 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10e>
    4362:	2200      	movs	r2, #0
    4364:	e000      	b.n	4368 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x110>
    4366:	682a      	ldr	r2, [r5, #0]
    4368:	4601      	mov	r1, r0
    436a:	9200      	str	r2, [sp, #0]
    436c:	b132      	cbz	r2, 437c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    436e:	2700      	movs	r7, #0
    4370:	ea4f 000d 	mov.w	r0, sp
    4374:	f009 f963 	bl	d63e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4378:	b11f      	cbz	r7, 4382 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12a>
    437a:	e006      	b.n	438a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x132>
    437c:	2701      	movs	r7, #1
    437e:	2000      	movs	r0, #0
    4380:	e7f8      	b.n	4374 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x11c>
    4382:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    4386:	9a00      	ldr	r2, [sp, #0]
    4388:	604a      	str	r2, [r1, #4]
    438a:	6829      	ldr	r1, [r5, #0]
    438c:	1c64      	adds	r4, r4, #1
    438e:	4408      	add	r0, r1
    4390:	6028      	str	r0, [r5, #0]
    4392:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    4396:	d0d7      	beq.n	4348 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf0>
    4398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    439c:	20001058 	.word	0x20001058
    43a0:	4903      	ldr	r1, [pc, #12]	; (43b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    43a2:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    43a6:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    43aa:	1cc0      	adds	r0, r0, #3
    43ac:	4008      	ands	r0, r1
    43ae:	4770      	bx	lr
    43b0:	000043c0 	.word	0x000043c0
    43b4:	4801      	ldr	r0, [pc, #4]	; (43bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>)
    43b6:	7800      	ldrb	r0, [r0, #0]
    43b8:	4770      	bx	lr
    43ba:	0000      	.short	0x0000
    43bc:	20001058 	.word	0x20001058
    43c0:	000001e0 	.word	0x000001e0
    43c4:	0000d6e1 	.word	0x0000d6e1
    43c8:	0000e879 	.word	0x0000e879

000043cc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    43cc:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    43d0:	4c26      	ldr	r4, [pc, #152]	; (446c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    43d2:	4680      	mov	r8, r0
    43d4:	b081      	sub	sp, #4
    43d6:	6820      	ldr	r0, [r4, #0]
    43d8:	469a      	mov	sl, r3
    43da:	4693      	mov	fp, r2
    43dc:	b158      	cbz	r0, 43f6 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    43de:	7a02      	ldrb	r2, [r0, #8]
    43e0:	4542      	cmp	r2, r8
    43e2:	d903      	bls.n	43ec <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    43e4:	6841      	ldr	r1, [r0, #4]
    43e6:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    43ea:	b140      	cbz	r0, 43fe <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    43ec:	f243 0002 	movw	r0, #12290	; 0x3002
    43f0:	b005      	add	sp, #20
    43f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    43f6:	21a5      	movs	r1, #165	; 0xa5
    43f8:	2018      	movs	r0, #24
    43fa:	f7ff fcaf 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43fe:	4619      	mov	r1, r3
    4400:	9802      	ldr	r0, [sp, #8]
    4402:	f009 f985 	bl	d710 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    4406:	b286      	uxth	r6, r0
    4408:	4658      	mov	r0, fp
    440a:	990e      	ldr	r1, [sp, #56]	; 0x38
    440c:	f009 f977 	bl	d6fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    4410:	b285      	uxth	r5, r0
    4412:	1970      	adds	r0, r6, r5
    4414:	1d00      	adds	r0, r0, #4
    4416:	b287      	uxth	r7, r0
    4418:	6820      	ldr	r0, [r4, #0]
    441a:	46a1      	mov	r9, r4
    441c:	4639      	mov	r1, r7
    441e:	6800      	ldr	r0, [r0, #0]
    4420:	f009 f8e0 	bl	d5e4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4424:	0004      	movs	r4, r0
    4426:	d01f      	beq.n	4468 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    4428:	8067      	strh	r7, [r4, #2]
    442a:	8025      	strh	r5, [r4, #0]
    442c:	4629      	mov	r1, r5
    442e:	1d20      	adds	r0, r4, #4
    4430:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4432:	4607      	mov	r7, r0
    4434:	465a      	mov	r2, fp
    4436:	2301      	movs	r3, #1
    4438:	9500      	str	r5, [sp, #0]
    443a:	f009 f833 	bl	d4a4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    443e:	8820      	ldrh	r0, [r4, #0]
    4440:	4631      	mov	r1, r6
    4442:	4438      	add	r0, r7
    4444:	2301      	movs	r3, #1
    4446:	9a02      	ldr	r2, [sp, #8]
    4448:	f8cd a000 	str.w	sl, [sp]
    444c:	f009 f82a 	bl	d4a4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4450:	8820      	ldrh	r0, [r4, #0]
    4452:	19c1      	adds	r1, r0, r7
    4454:	4638      	mov	r0, r7
    4456:	f009 f856 	bl	d506 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    445a:	f8d9 0000 	ldr.w	r0, [r9]
    445e:	6841      	ldr	r1, [r0, #4]
    4460:	2000      	movs	r0, #0
    4462:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    4466:	e7c3      	b.n	43f0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4468:	2004      	movs	r0, #4
    446a:	e7c1      	b.n	43f0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    446c:	20000078 	.word	0x20000078

00004470 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4470:	b570      	push	{r4, r5, r6, lr}
    4472:	4c14      	ldr	r4, [pc, #80]	; (44c4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4474:	6823      	ldr	r3, [r4, #0]
    4476:	b18b      	cbz	r3, 449c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4478:	7a19      	ldrb	r1, [r3, #8]
    447a:	4281      	cmp	r1, r0
    447c:	d912      	bls.n	44a4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    447e:	685a      	ldr	r2, [r3, #4]
    4480:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    4484:	b171      	cbz	r1, 44a4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4486:	2500      	movs	r5, #0
    4488:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    448c:	884a      	ldrh	r2, [r1, #2]
    448e:	6818      	ldr	r0, [r3, #0]
    4490:	f009 f8f6 	bl	d680 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4494:	6821      	ldr	r1, [r4, #0]
    4496:	2000      	movs	r0, #0
    4498:	7a0a      	ldrb	r2, [r1, #8]
    449a:	e00c      	b.n	44b6 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    449c:	21c8      	movs	r1, #200	; 0xc8
    449e:	2018      	movs	r0, #24
    44a0:	f7ff fc5c 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44a4:	f243 0002 	movw	r0, #12290	; 0x3002
    44a8:	bd70      	pop	{r4, r5, r6, pc}
    44aa:	684b      	ldr	r3, [r1, #4]
    44ac:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    44b0:	b933      	cbnz	r3, 44c0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    44b2:	1c40      	adds	r0, r0, #1
    44b4:	b2c0      	uxtb	r0, r0
    44b6:	4282      	cmp	r2, r0
    44b8:	d8f7      	bhi.n	44aa <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    44ba:	6808      	ldr	r0, [r1, #0]
    44bc:	f009 f8d5 	bl	d66a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    44c0:	2000      	movs	r0, #0
    44c2:	bd70      	pop	{r4, r5, r6, pc}
    44c4:	20000078 	.word	0x20000078

000044c8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    44c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44cc:	460d      	mov	r5, r1
    44ce:	0004      	movs	r4, r0
    44d0:	4690      	mov	r8, r2
    44d2:	f04f 0600 	mov.w	r6, #0
    44d6:	d009      	beq.n	44ec <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    44d8:	2700      	movs	r7, #0
    44da:	1ce0      	adds	r0, r4, #3
    44dc:	f020 0003 	bic.w	r0, r0, #3
    44e0:	42a0      	cmp	r0, r4
    44e2:	d005      	beq.n	44f0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    44e4:	2186      	movs	r1, #134	; 0x86
    44e6:	2018      	movs	r0, #24
    44e8:	f7ff fc38 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44ec:	2701      	movs	r7, #1
    44ee:	e7f4      	b.n	44da <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    44f0:	b1cd      	cbz	r5, 4526 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    44f2:	4611      	mov	r1, r2
    44f4:	2000      	movs	r0, #0
    44f6:	f009 f8a2 	bl	d63e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    44fa:	300c      	adds	r0, #12
    44fc:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4500:	b98f      	cbnz	r7, 4526 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4502:	4f0a      	ldr	r7, [pc, #40]	; (452c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    4504:	f104 000c 	add.w	r0, r4, #12
    4508:	00aa      	lsls	r2, r5, #2
    450a:	603c      	str	r4, [r7, #0]
    450c:	7225      	strb	r5, [r4, #8]
    450e:	6060      	str	r0, [r4, #4]
    4510:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4514:	6020      	str	r0, [r4, #0]
    4516:	2100      	movs	r1, #0
    4518:	6860      	ldr	r0, [r4, #4]
    451a:	f008 f897 	bl	c64c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    451e:	4641      	mov	r1, r8
    4520:	6838      	ldr	r0, [r7, #0]
    4522:	f009 f88c 	bl	d63e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4526:	4630      	mov	r0, r6
    4528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    452c:	20000078 	.word	0x20000078

00004530 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    4530:	b570      	push	{r4, r5, r6, lr}
    4532:	4d08      	ldr	r5, [pc, #32]	; (4554 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    4534:	6828      	ldr	r0, [r5, #0]
    4536:	2800      	cmp	r0, #0
    4538:	d00a      	beq.n	4550 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    453a:	2400      	movs	r4, #0
    453c:	e004      	b.n	4548 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    453e:	4620      	mov	r0, r4
    4540:	f7ff ff96 	bl	4470 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    4544:	1c64      	adds	r4, r4, #1
    4546:	b2e4      	uxtb	r4, r4
    4548:	6828      	ldr	r0, [r5, #0]
    454a:	7a00      	ldrb	r0, [r0, #8]
    454c:	42a0      	cmp	r0, r4
    454e:	d8f6      	bhi.n	453e <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    4550:	bd70      	pop	{r4, r5, r6, pc}
    4552:	0000      	.short	0x0000
    4554:	20000078 	.word	0x20000078

00004558 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    4558:	4909      	ldr	r1, [pc, #36]	; (4580 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    455a:	b510      	push	{r4, lr}
    455c:	4602      	mov	r2, r0
    455e:	6809      	ldr	r1, [r1, #0]
    4560:	2000      	movs	r0, #0
    4562:	b149      	cbz	r1, 4578 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4564:	7a0b      	ldrb	r3, [r1, #8]
    4566:	4293      	cmp	r3, r2
    4568:	d905      	bls.n	4576 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    456a:	6849      	ldr	r1, [r1, #4]
    456c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4570:	2900      	cmp	r1, #0
    4572:	d000      	beq.n	4576 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4574:	1d08      	adds	r0, r1, #4
    4576:	bd10      	pop	{r4, pc}
    4578:	21ee      	movs	r1, #238	; 0xee
    457a:	2018      	movs	r0, #24
    457c:	f7ff fbee 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4580:	20000078 	.word	0x20000078

00004584 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    4584:	490a      	ldr	r1, [pc, #40]	; (45b0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    4586:	b510      	push	{r4, lr}
    4588:	4602      	mov	r2, r0
    458a:	6809      	ldr	r1, [r1, #0]
    458c:	2000      	movs	r0, #0
    458e:	b159      	cbz	r1, 45a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    4590:	7a0b      	ldrb	r3, [r1, #8]
    4592:	4293      	cmp	r3, r2
    4594:	d907      	bls.n	45a6 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4596:	6849      	ldr	r1, [r1, #4]
    4598:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    459c:	2900      	cmp	r1, #0
    459e:	d002      	beq.n	45a6 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    45a0:	f831 0b04 	ldrh.w	r0, [r1], #4
    45a4:	4408      	add	r0, r1
    45a6:	bd10      	pop	{r4, pc}
    45a8:	21fc      	movs	r1, #252	; 0xfc
    45aa:	2018      	movs	r0, #24
    45ac:	f7ff fbd6 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45b0:	20000078 	.word	0x20000078

000045b4 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    45b4:	4801      	ldr	r0, [pc, #4]	; (45bc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    45b6:	7840      	ldrb	r0, [r0, #1]
    45b8:	4770      	bx	lr
    45ba:	0000      	.short	0x0000
    45bc:	2000007c 	.word	0x2000007c

000045c0 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    45c0:	4801      	ldr	r0, [pc, #4]	; (45c8 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    45c2:	6840      	ldr	r0, [r0, #4]
    45c4:	4770      	bx	lr
    45c6:	0000      	.short	0x0000
    45c8:	2000007c 	.word	0x2000007c

000045cc <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    45cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    45d0:	460c      	mov	r4, r1
    45d2:	4607      	mov	r7, r0
    45d4:	4616      	mov	r6, r2
    45d6:	211c      	movs	r1, #28
    45d8:	4610      	mov	r0, r2
    45da:	460d      	mov	r5, r1
    45dc:	4622      	mov	r2, r4
    45de:	f008 ffbc 	bl	d55a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    45e2:	4680      	mov	r8, r0
    45e4:	b157      	cbz	r7, 45fc <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    45e6:	4638      	mov	r0, r7
    45e8:	4641      	mov	r1, r8
    45ea:	4632      	mov	r2, r6
    45ec:	462b      	mov	r3, r5
    45ee:	9400      	str	r4, [sp, #0]
    45f0:	f008 ff58 	bl	d4a4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    45f4:	4803      	ldr	r0, [pc, #12]	; (4604 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    45f6:	6047      	str	r7, [r0, #4]
    45f8:	7004      	strb	r4, [r0, #0]
    45fa:	7046      	strb	r6, [r0, #1]
    45fc:	4640      	mov	r0, r8
    45fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4602:	0000      	.short	0x0000
    4604:	2000007c 	.word	0x2000007c

00004608 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    4608:	4802      	ldr	r0, [pc, #8]	; (4614 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    460a:	7842      	ldrb	r2, [r0, #1]
    460c:	7801      	ldrb	r1, [r0, #0]
    460e:	6840      	ldr	r0, [r0, #4]
    4610:	f7ff bfdc 	b.w	45cc <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    4614:	2000007c 	.word	0x2000007c
    4618:	4909      	ldr	r1, [pc, #36]	; (4640 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x38>)
    461a:	b510      	push	{r4, lr}
    461c:	4807      	ldr	r0, [pc, #28]	; (463c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x34>)
    461e:	6008      	str	r0, [r1, #0]
    4620:	4b08      	ldr	r3, [pc, #32]	; (4644 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x3c>)
    4622:	2011      	movs	r0, #17
    4624:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    4628:	2200      	movs	r2, #0
    462a:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    462e:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    4632:	1c40      	adds	r0, r0, #1
    4634:	b2c0      	uxtb	r0, r0
    4636:	2814      	cmp	r0, #20
    4638:	d3f4      	bcc.n	4624 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x1c>
    463a:	bd10      	pop	{r4, pc}
    463c:	fffe0000 	.word	0xfffe0000
    4640:	4001f508 	.word	0x4001f508
    4644:	4001f000 	.word	0x4001f000
    4648:	b570      	push	{r4, r5, r6, lr}
    464a:	2420      	movs	r4, #32
    464c:	2100      	movs	r1, #0
    464e:	2301      	movs	r3, #1
    4650:	fa20 f201 	lsr.w	r2, r0, r1
    4654:	07d2      	lsls	r2, r2, #31
    4656:	d020      	beq.n	469a <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    4658:	b24a      	sxtb	r2, r1
    465a:	2a00      	cmp	r2, #0
    465c:	db10      	blt.n	4680 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x78>
    465e:	bf00      	nop
    4660:	ea4f 1652 	mov.w	r6, r2, lsr #5
    4664:	ea4f 0686 	mov.w	r6, r6, lsl #2
    4668:	f002 051f 	and.w	r5, r2, #31
    466c:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    4670:	fa03 f505 	lsl.w	r5, r3, r5
    4674:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    4678:	f3bf 8f4f 	dsb	sy
    467c:	f3bf 8f6f 	isb	sy
    4680:	db0b      	blt.n	469a <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    4682:	f002 051f 	and.w	r5, r2, #31
    4686:	ea4f 1252 	mov.w	r2, r2, lsr #5
    468a:	ea4f 0282 	mov.w	r2, r2, lsl #2
    468e:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4692:	fa03 f505 	lsl.w	r5, r3, r5
    4696:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    469a:	f101 0101 	add.w	r1, r1, #1
    469e:	42a1      	cmp	r1, r4
    46a0:	d3d6      	bcc.n	4650 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>
    46a2:	bd70      	pop	{r4, r5, r6, pc}
    46a4:	b570      	push	{r4, r5, r6, lr}
    46a6:	0042      	lsls	r2, r0, #1
    46a8:	f04f 0100 	mov.w	r1, #0
    46ac:	d501      	bpl.n	46b2 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xaa>
    46ae:	4a14      	ldr	r2, [pc, #80]	; (4700 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xf8>)
    46b0:	6011      	str	r1, [r2, #0]
    46b2:	f3c0 3280 	ubfx	r2, r0, #14, #1
    46b6:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    46ba:	429a      	cmp	r2, r3
    46bc:	d003      	beq.n	46c6 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xbe>
    46be:	2169      	movs	r1, #105	; 0x69
    46c0:	201b      	movs	r0, #27
    46c2:	f7ff fb4b 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46c6:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    46ca:	d014      	beq.n	46f6 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xee>
    46cc:	4a0d      	ldr	r2, [pc, #52]	; (4704 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xfc>)
    46ce:	2001      	movs	r0, #1
    46d0:	6050      	str	r0, [r2, #4]
    46d2:	1e83      	subs	r3, r0, #2
    46d4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    46d8:	4a0b      	ldr	r2, [pc, #44]	; (4708 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x100>)
    46da:	6090      	str	r0, [r2, #8]
    46dc:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    46e0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    46e4:	4c09      	ldr	r4, [pc, #36]	; (470c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x104>)
    46e6:	6021      	str	r1, [r4, #0]
    46e8:	1d25      	adds	r5, r4, #4
    46ea:	6028      	str	r0, [r5, #0]
    46ec:	6090      	str	r0, [r2, #8]
    46ee:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    46f2:	6021      	str	r1, [r4, #0]
    46f4:	6028      	str	r0, [r5, #0]
    46f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    46fa:	f7ff bf8d 	b.w	4618 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    46fe:	0000      	.short	0x0000
    4700:	4001e504 	.word	0x4001e504
    4704:	4000e000 	.word	0x4000e000
    4708:	4000f000 	.word	0x4000f000
    470c:	4000f500 	.word	0x4000f500

00004710 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    4710:	b570      	push	{r4, r5, r6, lr}
    4712:	4c0a      	ldr	r4, [pc, #40]	; (473c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    4714:	460d      	mov	r5, r1
    4716:	6020      	str	r0, [r4, #0]
    4718:	f7ff ffc4 	bl	46a4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x9c>
    471c:	6820      	ldr	r0, [r4, #0]
    471e:	f7ff ff93 	bl	4648 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x40>
    4722:	f000 f883 	bl	482c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    4726:	f7ff ff77 	bl	4618 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    472a:	f009 f80e 	bl	d74a <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    472e:	4628      	mov	r0, r5
    4730:	f000 f8b6 	bl	48a0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    4734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4738:	f000 b8ce 	b.w	48d8 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    473c:	20000084 	.word	0x20000084

00004740 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    4740:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4744:	4c36      	ldr	r4, [pc, #216]	; (4820 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe0>)
    4746:	b082      	sub	sp, #8
    4748:	f8d4 b504 	ldr.w	fp, [r4, #1284]	; 0x504
    474c:	2601      	movs	r6, #1
    474e:	4835      	ldr	r0, [pc, #212]	; (4824 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    4750:	f007 fe59 	bl	c406 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4754:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 4824 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>
    4758:	b920      	cbnz	r0, 4764 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    475a:	2600      	movs	r6, #0
    475c:	f109 0001 	add.w	r0, r9, #1
    4760:	f007 fe68 	bl	c434 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4764:	f44f 7580 	mov.w	r5, #256	; 0x100
    4768:	f04f 0800 	mov.w	r8, #0
    476c:	1d2f      	adds	r7, r5, #4
    476e:	2101      	movs	r1, #1
    4770:	6061      	str	r1, [r4, #4]
    4772:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4776:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    477a:	9802      	ldr	r0, [sp, #8]
    477c:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
    4780:	6021      	str	r1, [r4, #0]
    4782:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 4828 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe8>
    4786:	e01c      	b.n	47c2 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    4788:	f8da 0000 	ldr.w	r0, [sl]
    478c:	06c0      	lsls	r0, r0, #27
    478e:	d518      	bpl.n	47c2 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    4790:	200e      	movs	r0, #14
    4792:	f008 ffc6 	bl	d722 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    4796:	f3ef 8010 	mrs	r0, PRIMASK
    479a:	9000      	str	r0, [sp, #0]
    479c:	b672      	cpsid	i
    479e:	2103      	movs	r1, #3
    47a0:	4620      	mov	r0, r4
    47a2:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    47a6:	4629      	mov	r1, r5
    47a8:	f008 ffc8 	bl	d73c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    47ac:	b930      	cbnz	r0, 47bc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    47ae:	4639      	mov	r1, r7
    47b0:	4620      	mov	r0, r4
    47b2:	f008 ffc3 	bl	d73c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    47b6:	b908      	cbnz	r0, 47bc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    47b8:	f7ff f916 	bl	39e8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    47bc:	9800      	ldr	r0, [sp, #0]
    47be:	b900      	cbnz	r0, 47c2 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    47c0:	b662      	cpsie	i
    47c2:	4629      	mov	r1, r5
    47c4:	4620      	mov	r0, r4
    47c6:	f008 ffb9 	bl	d73c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    47ca:	b928      	cbnz	r0, 47d8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x98>
    47cc:	4639      	mov	r1, r7
    47ce:	4620      	mov	r0, r4
    47d0:	f008 ffb4 	bl	d73c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    47d4:	2800      	cmp	r0, #0
    47d6:	d0d7      	beq.n	4788 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x48>
    47d8:	4639      	mov	r1, r7
    47da:	4620      	mov	r0, r4
    47dc:	f008 ffae 	bl	d73c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    47e0:	2800      	cmp	r0, #0
    47e2:	d1c4      	bne.n	476e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2e>
    47e4:	b136      	cbz	r6, 47f4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xb4>
    47e6:	f8c4 b504 	str.w	fp, [r4, #1284]	; 0x504
    47ea:	f109 0001 	add.w	r0, r9, #1
    47ee:	f007 fe0a 	bl	c406 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    47f2:	e012      	b.n	481a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xda>
    47f4:	f109 0001 	add.w	r0, r9, #1
    47f8:	f007 fe05 	bl	c406 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    47fc:	2800      	cmp	r0, #0
    47fe:	d1ad      	bne.n	475c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    4800:	2003      	movs	r0, #3
    4802:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    4806:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    480a:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    480e:	200e      	movs	r0, #14
    4810:	f008 ff87 	bl	d722 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    4814:	4803      	ldr	r0, [pc, #12]	; (4824 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    4816:	f007 fe0d 	bl	c434 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    481a:	2000      	movs	r0, #0
    481c:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4820:	4000e000 	.word	0x4000e000
    4824:	20000287 	.word	0x20000287
    4828:	e000ed10 	.word	0xe000ed10

0000482c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    482c:	b510      	push	{r4, lr}
    482e:	4808      	ldr	r0, [pc, #32]	; (4850 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4830:	f007 fdfc 	bl	c42c <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4834:	b108      	cbz	r0, 483a <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    4836:	2125      	movs	r1, #37	; 0x25
    4838:	e006      	b.n	4848 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    483a:	4805      	ldr	r0, [pc, #20]	; (4850 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    483c:	1c40      	adds	r0, r0, #1
    483e:	f007 fdf5 	bl	c42c <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4842:	2800      	cmp	r0, #0
    4844:	d003      	beq.n	484e <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    4846:	2129      	movs	r1, #41	; 0x29
    4848:	201d      	movs	r0, #29
    484a:	f7ff fa87 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    484e:	bd10      	pop	{r4, pc}
    4850:	20000287 	.word	0x20000287

00004854 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    4854:	b570      	push	{r4, r5, r6, lr}
    4856:	4911      	ldr	r1, [pc, #68]	; (489c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    4858:	680a      	ldr	r2, [r1, #0]
    485a:	b1ea      	cbz	r2, 4898 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    485c:	2300      	movs	r3, #0
    485e:	461d      	mov	r5, r3
    4860:	2401      	movs	r4, #1
    4862:	684a      	ldr	r2, [r1, #4]
    4864:	1c52      	adds	r2, r2, #1
    4866:	604a      	str	r2, [r1, #4]
    4868:	2a0c      	cmp	r2, #12
    486a:	d300      	bcc.n	486e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    486c:	604d      	str	r5, [r1, #4]
    486e:	790e      	ldrb	r6, [r1, #4]
    4870:	fa04 f206 	lsl.w	r2, r4, r6
    4874:	680e      	ldr	r6, [r1, #0]
    4876:	4216      	tst	r6, r2
    4878:	d00b      	beq.n	4892 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    487a:	f3ef 8310 	mrs	r3, PRIMASK
    487e:	b672      	cpsid	i
    4880:	680c      	ldr	r4, [r1, #0]
    4882:	4394      	bics	r4, r2
    4884:	600c      	str	r4, [r1, #0]
    4886:	b903      	cbnz	r3, 488a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    4888:	b662      	cpsie	i
    488a:	6849      	ldr	r1, [r1, #4]
    488c:	6001      	str	r1, [r0, #0]
    488e:	2000      	movs	r0, #0
    4890:	bd70      	pop	{r4, r5, r6, pc}
    4892:	1c5b      	adds	r3, r3, #1
    4894:	2b0c      	cmp	r3, #12
    4896:	d3e4      	bcc.n	4862 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    4898:	2005      	movs	r0, #5
    489a:	bd70      	pop	{r4, r5, r6, pc}
    489c:	20000088 	.word	0x20000088

000048a0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    48a0:	4802      	ldr	r0, [pc, #8]	; (48ac <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    48a2:	2100      	movs	r1, #0
    48a4:	6001      	str	r1, [r0, #0]
    48a6:	6041      	str	r1, [r0, #4]
    48a8:	4770      	bx	lr
    48aa:	0000      	.short	0x0000
    48ac:	20000088 	.word	0x20000088

000048b0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    48b0:	b510      	push	{r4, lr}
    48b2:	4c08      	ldr	r4, [pc, #32]	; (48d4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    48b4:	7861      	ldrb	r1, [r4, #1]
    48b6:	b109      	cbz	r1, 48bc <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    48b8:	200f      	movs	r0, #15
    48ba:	bd10      	pop	{r4, pc}
    48bc:	f7ff f820 	bl	3900 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    48c0:	7020      	strb	r0, [r4, #0]
    48c2:	28ff      	cmp	r0, #255	; 0xff
    48c4:	d001      	beq.n	48ca <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    48c6:	2000      	movs	r0, #0
    48c8:	bd10      	pop	{r4, pc}
    48ca:	2176      	movs	r1, #118	; 0x76
    48cc:	201f      	movs	r0, #31
    48ce:	f7ff fa45 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48d2:	0000      	.short	0x0000
    48d4:	20000090 	.word	0x20000090

000048d8 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    48d8:	4901      	ldr	r1, [pc, #4]	; (48e0 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    48da:	2000      	movs	r0, #0
    48dc:	7048      	strb	r0, [r1, #1]
    48de:	4770      	bx	lr
    48e0:	20000090 	.word	0x20000090

000048e4 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    48e4:	4806      	ldr	r0, [pc, #24]	; (4900 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    48e6:	4a07      	ldr	r2, [pc, #28]	; (4904 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    48e8:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    48ea:	8852      	ldrh	r2, [r2, #2]
    48ec:	4291      	cmp	r1, r2
    48ee:	d104      	bne.n	48fa <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    48f0:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    48f4:	b108      	cbz	r0, 48fa <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    48f6:	2000      	movs	r0, #0
    48f8:	4770      	bx	lr
    48fa:	2001      	movs	r0, #1
    48fc:	4770      	bx	lr
    48fe:	0000      	.short	0x0000
    4900:	200011dc 	.word	0x200011dc
    4904:	2000026c 	.word	0x2000026c

00004908 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    4908:	4901      	ldr	r1, [pc, #4]	; (4910 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    490a:	8048      	strh	r0, [r1, #2]
    490c:	4770      	bx	lr
    490e:	0000      	.short	0x0000
    4910:	2000026c 	.word	0x2000026c

00004914 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    4914:	4808      	ldr	r0, [pc, #32]	; (4938 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    4916:	4a09      	ldr	r2, [pc, #36]	; (493c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    4918:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    491a:	8852      	ldrh	r2, [r2, #2]
    491c:	4291      	cmp	r1, r2
    491e:	d109      	bne.n	4934 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4920:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4924:	8481      	strh	r1, [r0, #36]	; 0x24
    4926:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    492a:	b119      	cbz	r1, 4934 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    492c:	2100      	movs	r1, #0
    492e:	7001      	strb	r1, [r0, #0]
    4930:	2001      	movs	r0, #1
    4932:	4770      	bx	lr
    4934:	2000      	movs	r0, #0
    4936:	4770      	bx	lr
    4938:	200011dc 	.word	0x200011dc
    493c:	2000026c 	.word	0x2000026c

00004940 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    4940:	4807      	ldr	r0, [pc, #28]	; (4960 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4942:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4946:	2901      	cmp	r1, #1
    4948:	d007      	beq.n	495a <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    494a:	2101      	movs	r1, #1
    494c:	7001      	strb	r1, [r0, #0]
    494e:	4805      	ldr	r0, [pc, #20]	; (4964 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    4950:	4903      	ldr	r1, [pc, #12]	; (4960 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4952:	8800      	ldrh	r0, [r0, #0]
    4954:	8488      	strh	r0, [r1, #36]	; 0x24
    4956:	2001      	movs	r0, #1
    4958:	4770      	bx	lr
    495a:	2000      	movs	r0, #0
    495c:	4770      	bx	lr
    495e:	0000      	.short	0x0000
    4960:	200011dc 	.word	0x200011dc
    4964:	2000026c 	.word	0x2000026c

00004968 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    4968:	4906      	ldr	r1, [pc, #24]	; (4984 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    496a:	4b07      	ldr	r3, [pc, #28]	; (4988 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    496c:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    496e:	885b      	ldrh	r3, [r3, #2]
    4970:	429a      	cmp	r2, r3
    4972:	d105      	bne.n	4980 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4974:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4978:	b112      	cbz	r2, 4980 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    497a:	6001      	str	r1, [r0, #0]
    497c:	2001      	movs	r0, #1
    497e:	4770      	bx	lr
    4980:	2000      	movs	r0, #0
    4982:	4770      	bx	lr
    4984:	200011dc 	.word	0x200011dc
    4988:	2000026c 	.word	0x2000026c

0000498c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    498c:	4909      	ldr	r1, [pc, #36]	; (49b4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    498e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4990:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    4994:	3bff      	subs	r3, #255	; 0xff
    4996:	d002      	beq.n	499e <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    4998:	2100      	movs	r1, #0
    499a:	6001      	str	r1, [r0, #0]
    499c:	e007      	b.n	49ae <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    499e:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    49a2:	4904      	ldr	r1, [pc, #16]	; (49b4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    49a4:	2a01      	cmp	r2, #1
    49a6:	d002      	beq.n	49ae <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    49a8:	6001      	str	r1, [r0, #0]
    49aa:	2001      	movs	r0, #1
    49ac:	4770      	bx	lr
    49ae:	2000      	movs	r0, #0
    49b0:	4770      	bx	lr
    49b2:	0000      	.short	0x0000
    49b4:	200011dc 	.word	0x200011dc

000049b8 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    49b8:	4901      	ldr	r1, [pc, #4]	; (49c0 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    49ba:	8008      	strh	r0, [r1, #0]
    49bc:	4770      	bx	lr
    49be:	0000      	.short	0x0000
    49c0:	2000026c 	.word	0x2000026c

000049c4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    49c4:	4905      	ldr	r1, [pc, #20]	; (49dc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    49c6:	2000      	movs	r0, #0
    49c8:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    49cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
    49d0:	8488      	strh	r0, [r1, #36]	; 0x24
    49d2:	4903      	ldr	r1, [pc, #12]	; (49e0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    49d4:	8008      	strh	r0, [r1, #0]
    49d6:	8048      	strh	r0, [r1, #2]
    49d8:	4770      	bx	lr
    49da:	0000      	.short	0x0000
    49dc:	200011dc 	.word	0x200011dc
    49e0:	2000026c 	.word	0x2000026c
    49e4:	4905      	ldr	r1, [pc, #20]	; (49fc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    49e6:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    49e8:	4282      	cmp	r2, r0
    49ea:	d105      	bne.n	49f8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    49ec:	2000      	movs	r0, #0
    49ee:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    49f2:	f64f 70ff 	movw	r0, #65535	; 0xffff
    49f6:	8488      	strh	r0, [r1, #36]	; 0x24
    49f8:	4770      	bx	lr
    49fa:	0000      	.short	0x0000
    49fc:	200011dc 	.word	0x200011dc

00004a00 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4a00:	4a0a      	ldr	r2, [pc, #40]	; (4a2c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    4a02:	b110      	cbz	r0, 4a0a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4a04:	2801      	cmp	r0, #1
    4a06:	d007      	beq.n	4a18 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    4a08:	e00e      	b.n	4a28 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4a0a:	7850      	ldrb	r0, [r2, #1]
    4a0c:	b160      	cbz	r0, 4a28 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4a0e:	f8d2 0002 	ldr.w	r0, [r2, #2]
    4a12:	6008      	str	r0, [r1, #0]
    4a14:	88d0      	ldrh	r0, [r2, #6]
    4a16:	e004      	b.n	4a22 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    4a18:	7810      	ldrb	r0, [r2, #0]
    4a1a:	b128      	cbz	r0, 4a28 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4a1c:	6890      	ldr	r0, [r2, #8]
    4a1e:	6008      	str	r0, [r1, #0]
    4a20:	8990      	ldrh	r0, [r2, #12]
    4a22:	8088      	strh	r0, [r1, #4]
    4a24:	2001      	movs	r0, #1
    4a26:	4770      	bx	lr
    4a28:	2000      	movs	r0, #0
    4a2a:	4770      	bx	lr
    4a2c:	20000289 	.word	0x20000289

00004a30 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    4a30:	4a08      	ldr	r2, [pc, #32]	; (4a54 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    4a32:	2301      	movs	r3, #1
    4a34:	b138      	cbz	r0, 4a46 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    4a36:	2801      	cmp	r0, #1
    4a38:	d104      	bne.n	4a44 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    4a3a:	7013      	strb	r3, [r2, #0]
    4a3c:	6808      	ldr	r0, [r1, #0]
    4a3e:	6090      	str	r0, [r2, #8]
    4a40:	8888      	ldrh	r0, [r1, #4]
    4a42:	8190      	strh	r0, [r2, #12]
    4a44:	4770      	bx	lr
    4a46:	7053      	strb	r3, [r2, #1]
    4a48:	6808      	ldr	r0, [r1, #0]
    4a4a:	f8c2 0002 	str.w	r0, [r2, #2]
    4a4e:	8888      	ldrh	r0, [r1, #4]
    4a50:	80d0      	strh	r0, [r2, #6]
    4a52:	4770      	bx	lr
    4a54:	20000289 	.word	0x20000289

00004a58 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4a58:	4906      	ldr	r1, [pc, #24]	; (4a74 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4a5a:	b110      	cbz	r0, 4a62 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4a5c:	2801      	cmp	r0, #1
    4a5e:	d002      	beq.n	4a66 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    4a60:	e005      	b.n	4a6e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4a62:	7848      	ldrb	r0, [r1, #1]
    4a64:	e000      	b.n	4a68 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4a66:	7808      	ldrb	r0, [r1, #0]
    4a68:	b108      	cbz	r0, 4a6e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4a6a:	2001      	movs	r0, #1
    4a6c:	4770      	bx	lr
    4a6e:	2000      	movs	r0, #0
    4a70:	4770      	bx	lr
    4a72:	0000      	.short	0x0000
    4a74:	20000289 	.word	0x20000289

00004a78 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4a78:	4901      	ldr	r1, [pc, #4]	; (4a80 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4a7a:	7448      	strb	r0, [r1, #17]
    4a7c:	4770      	bx	lr
    4a7e:	0000      	.short	0x0000
    4a80:	20000a3a 	.word	0x20000a3a

00004a84 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    4a84:	b578      	push	{r3, r4, r5, r6, lr}
    4a86:	4913      	ldr	r1, [pc, #76]	; (4ad4 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    4a88:	7c4a      	ldrb	r2, [r1, #17]
    4a8a:	b30a      	cbz	r2, 4ad0 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4a8c:	7c0a      	ldrb	r2, [r1, #16]
    4a8e:	f88d 2000 	strb.w	r2, [sp]
    4a92:	9a00      	ldr	r2, [sp, #0]
    4a94:	9200      	str	r2, [sp, #0]
    4a96:	f89d 2000 	ldrb.w	r2, [sp]
    4a9a:	b1ca      	cbz	r2, 4ad0 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4a9c:	2300      	movs	r3, #0
    4a9e:	f101 0210 	add.w	r2, r1, #16
    4aa2:	241f      	movs	r4, #31
    4aa4:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    4aa8:	7c0e      	ldrb	r6, [r1, #16]
    4aaa:	f88d 6000 	strb.w	r6, [sp]
    4aae:	9e00      	ldr	r6, [sp, #0]
    4ab0:	9600      	str	r6, [sp, #0]
    4ab2:	f89d 6000 	ldrb.w	r6, [sp]
    4ab6:	b14e      	cbz	r6, 4acc <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    4ab8:	7013      	strb	r3, [r2, #0]
    4aba:	7043      	strb	r3, [r0, #1]
    4abc:	7004      	strb	r4, [r0, #0]
    4abe:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    4ac2:	6046      	str	r6, [r0, #4]
    4ac4:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    4ac8:	6086      	str	r6, [r0, #8]
    4aca:	e7ed      	b.n	4aa8 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    4acc:	2001      	movs	r0, #1
    4ace:	bd78      	pop	{r3, r4, r5, r6, pc}
    4ad0:	2000      	movs	r0, #0
    4ad2:	bd78      	pop	{r3, r4, r5, r6, pc}
    4ad4:	20000a3a 	.word	0x20000a3a

00004ad8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    4ad8:	b510      	push	{r4, lr}
    4ada:	4604      	mov	r4, r0
    4adc:	f000 f95c 	bl	4d98 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    4ae0:	b118      	cbz	r0, 4aea <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    4ae2:	21bd      	movs	r1, #189	; 0xbd
    4ae4:	2027      	movs	r0, #39	; 0x27
    4ae6:	f7ff f939 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4aea:	4803      	ldr	r0, [pc, #12]	; (4af8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    4aec:	2101      	movs	r1, #1
    4aee:	f009 fa1e 	bl	df2e <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    4af2:	4802      	ldr	r0, [pc, #8]	; (4afc <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    4af4:	62c4      	str	r4, [r0, #44]	; 0x2c
    4af6:	bd10      	pop	{r4, pc}
    4af8:	20000a18 	.word	0x20000a18
    4afc:	200000ac 	.word	0x200000ac

00004b00 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    4b00:	4901      	ldr	r1, [pc, #4]	; (4b08 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    4b02:	2001      	movs	r0, #1
    4b04:	7188      	strb	r0, [r1, #6]
    4b06:	4770      	bx	lr
    4b08:	200000ac 	.word	0x200000ac

00004b0c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    4b0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b10:	4d66      	ldr	r5, [pc, #408]	; (4cac <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a0>)
    4b12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    4b14:	782e      	ldrb	r6, [r5, #0]
    4b16:	bbee      	cbnz	r6, 4b94 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4b18:	b3e2      	cbz	r2, 4b94 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4b1a:	b3db      	cbz	r3, 4b94 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4b1c:	b3d4      	cbz	r4, 4b94 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4b1e:	f105 0614 	add.w	r6, r5, #20
    4b22:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    4b26:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    4b2a:	2700      	movs	r7, #0
    4b2c:	71af      	strb	r7, [r5, #6]
    4b2e:	716f      	strb	r7, [r5, #5]
    4b30:	70ef      	strb	r7, [r5, #3]
    4b32:	70af      	strb	r7, [r5, #2]
    4b34:	712f      	strb	r7, [r5, #4]
    4b36:	81af      	strh	r7, [r5, #12]
    4b38:	81ef      	strh	r7, [r5, #14]
    4b3a:	f000 f971 	bl	4e20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4b3e:	4606      	mov	r6, r0
    4b40:	f000 f968 	bl	4e14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4b44:	4604      	mov	r4, r0
    4b46:	f006 fe91 	bl	b86c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4b4a:	f006 fb75 	bl	b238 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    4b4e:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    4b52:	f006 ff11 	bl	b978 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4b56:	f104 0018 	add.w	r0, r4, #24
    4b5a:	f006 ffeb 	bl	bb34 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4b5e:	6920      	ldr	r0, [r4, #16]
    4b60:	f006 ffde 	bl	bb20 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4b64:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    4b68:	f007 f802 	bl	bb70 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    4b6c:	f04f 0b01 	mov.w	fp, #1
    4b70:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    4b74:	2000      	movs	r0, #0
    4b76:	f006 fd3d 	bl	b5f4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4b7a:	2800      	cmp	r0, #0
    4b7c:	d07e      	beq.n	4c7c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x170>
    4b7e:	484c      	ldr	r0, [pc, #304]	; (4cb0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    4b80:	f006 fdac 	bl	b6dc <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4b84:	8820      	ldrh	r0, [r4, #0]
    4b86:	f7ff fcfd 	bl	4584 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4b8a:	6328      	str	r0, [r5, #48]	; 0x30
    4b8c:	8820      	ldrh	r0, [r4, #0]
    4b8e:	f7ff fce3 	bl	4558 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    4b92:	e000      	b.n	4b96 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x8a>
    4b94:	e00a      	b.n	4bac <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa0>
    4b96:	6368      	str	r0, [r5, #52]	; 0x34
    4b98:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
    4b9c:	f88d 0000 	strb.w	r0, [sp]
    4ba0:	9800      	ldr	r0, [sp, #0]
    4ba2:	9000      	str	r0, [sp, #0]
    4ba4:	f89d 0000 	ldrb.w	r0, [sp]
    4ba8:	b118      	cbz	r0, 4bb2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa6>
    4baa:	e012      	b.n	4bd2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    4bac:	f44f 718a 	mov.w	r1, #276	; 0x114
    4bb0:	e079      	b.n	4ca6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x19a>
    4bb2:	6f20      	ldr	r0, [r4, #112]	; 0x70
    4bb4:	b168      	cbz	r0, 4bd2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    4bb6:	8e70      	ldrh	r0, [r6, #50]	; 0x32
    4bb8:	88b1      	ldrh	r1, [r6, #4]
    4bba:	4288      	cmp	r0, r1
    4bbc:	d109      	bne.n	4bd2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    4bbe:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    4bc2:	2201      	movs	r2, #1
    4bc4:	4408      	add	r0, r1
    4bc6:	8670      	strh	r0, [r6, #50]	; 0x32
    4bc8:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    4bcc:	6f21      	ldr	r1, [r4, #112]	; 0x70
    4bce:	f7fd fd67 	bl	26a0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    4bd2:	f106 0168 	add.w	r1, r6, #104	; 0x68
    4bd6:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 4cb4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>
    4bda:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    4bde:	f109 0808 	add.w	r8, r9, #8
    4be2:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    4be6:	6fb1      	ldr	r1, [r6, #120]	; 0x78
    4be8:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    4bec:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
    4bee:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    4bf2:	f000 f983 	bl	4efc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x148>
    4bf6:	4601      	mov	r1, r0
    4bf8:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    4bfa:	46ba      	mov	sl, r7
    4bfc:	f008 ff82 	bl	db04 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4c00:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    4c02:	4281      	cmp	r1, r0
    4c04:	d200      	bcs.n	4c08 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfc>
    4c06:	4608      	mov	r0, r1
    4c08:	7228      	strb	r0, [r5, #8]
    4c0a:	46a8      	mov	r8, r5
    4c0c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    4c10:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    4c12:	7cf7      	ldrb	r7, [r6, #19]
    4c14:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    4c16:	2908      	cmp	r1, #8
    4c18:	d100      	bne.n	4c1c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    4c1a:	2104      	movs	r1, #4
    4c1c:	f008 ff72 	bl	db04 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4c20:	b90f      	cbnz	r7, 4c26 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x11a>
    4c22:	1d00      	adds	r0, r0, #4
    4c24:	b280      	uxth	r0, r0
    4c26:	4285      	cmp	r5, r0
    4c28:	d200      	bcs.n	4c2c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x120>
    4c2a:	4628      	mov	r0, r5
    4c2c:	b2c0      	uxtb	r0, r0
    4c2e:	f888 0009 	strb.w	r0, [r8, #9]
    4c32:	7cf2      	ldrb	r2, [r6, #19]
    4c34:	b102      	cbz	r2, 4c38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x12c>
    4c36:	2204      	movs	r2, #4
    4c38:	4410      	add	r0, r2
    4c3a:	f888 0007 	strb.w	r0, [r8, #7]
    4c3e:	7cb1      	ldrb	r1, [r6, #18]
    4c40:	b1a1      	cbz	r1, 4c6c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x160>
    4c42:	491c      	ldr	r1, [pc, #112]	; (4cb4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    4c44:	3108      	adds	r1, #8
    4c46:	f881 b018 	strb.w	fp, [r1, #24]
    4c4a:	e9d6 0216 	ldrd	r0, r2, [r6, #88]	; 0x58
    4c4e:	e9c1 0204 	strd	r0, r2, [r1, #16]
    4c52:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    4c56:	f008 fe02 	bl	d85e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    4c5a:	4916      	ldr	r1, [pc, #88]	; (4cb4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    4c5c:	4603      	mov	r3, r0
    4c5e:	22fb      	movs	r2, #251	; 0xfb
    4c60:	3108      	adds	r1, #8
    4c62:	2000      	movs	r0, #0
    4c64:	f006 fb32 	bl	b2cc <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    4c68:	f006 fb66 	bl	b338 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    4c6c:	2001      	movs	r0, #1
    4c6e:	f000 fb95 	bl	539c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    4c72:	4811      	ldr	r0, [pc, #68]	; (4cb8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1ac>)
    4c74:	6800      	ldr	r0, [r0, #0]
    4c76:	2803      	cmp	r0, #3
    4c78:	d013      	beq.n	4ca2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x196>
    4c7a:	e000      	b.n	4c7e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    4c7c:	e00f      	b.n	4c9e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x192>
    4c7e:	280b      	cmp	r0, #11
    4c80:	d00f      	beq.n	4ca2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x196>
    4c82:	4648      	mov	r0, r9
    4c84:	f840 af52 	str.w	sl, [r0, #82]!
    4c88:	f8c0 a004 	str.w	sl, [r0, #4]
    4c8c:	4809      	ldr	r0, [pc, #36]	; (4cb4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    4c8e:	88b1      	ldrh	r1, [r6, #4]
    4c90:	3052      	adds	r0, #82	; 0x52
    4c92:	8041      	strh	r1, [r0, #2]
    4c94:	8821      	ldrh	r1, [r4, #0]
    4c96:	8001      	strh	r1, [r0, #0]
    4c98:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    4c9c:	7101      	strb	r1, [r0, #4]
    4c9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ca2:	f240 11c1 	movw	r1, #449	; 0x1c1
    4ca6:	2027      	movs	r0, #39	; 0x27
    4ca8:	f7ff f858 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cac:	200000ac 	.word	0x200000ac
    4cb0:	00005520 	.word	0x00005520
    4cb4:	200009e8 	.word	0x200009e8
    4cb8:	40001550 	.word	0x40001550

00004cbc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    4cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4cc0:	4605      	mov	r5, r0
    4cc2:	f000 f8ad 	bl	4e20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4cc6:	4e33      	ldr	r6, [pc, #204]	; (4d94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    4cc8:	4604      	mov	r4, r0
    4cca:	6a70      	ldr	r0, [r6, #36]	; 0x24
    4ccc:	7847      	ldrb	r7, [r0, #1]
    4cce:	b10d      	cbz	r5, 4cd4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    4cd0:	2d01      	cmp	r5, #1
    4cd2:	d103      	bne.n	4cdc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    4cd4:	6b71      	ldr	r1, [r6, #52]	; 0x34
    4cd6:	f007 fd68 	bl	c7aa <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    4cda:	7070      	strb	r0, [r6, #1]
    4cdc:	7870      	ldrb	r0, [r6, #1]
    4cde:	f04f 0800 	mov.w	r8, #0
    4ce2:	f04f 0901 	mov.w	r9, #1
    4ce6:	b150      	cbz	r0, 4cfe <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    4ce8:	2801      	cmp	r0, #1
    4cea:	d01a      	beq.n	4d22 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    4cec:	2802      	cmp	r0, #2
    4cee:	d034      	beq.n	4d5a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    4cf0:	2803      	cmp	r0, #3
    4cf2:	d048      	beq.n	4d86 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    4cf4:	f240 4115 	movw	r1, #1045	; 0x415
    4cf8:	2027      	movs	r0, #39	; 0x27
    4cfa:	f7ff f82f 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cfe:	2d01      	cmp	r5, #1
    4d00:	d032      	beq.n	4d68 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4d02:	f000 f8e7 	bl	4ed4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    4d06:	4639      	mov	r1, r7
    4d08:	2201      	movs	r2, #1
    4d0a:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4d0c:	f008 fa2b 	bl	d166 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4d10:	e028      	b.n	4d64 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    4d12:	bf00      	nop
    4d14:	f884 8008 	strb.w	r8, [r4, #8]
    4d18:	e031      	b.n	4d7e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4d1a:	bf00      	nop
    4d1c:	f884 9008 	strb.w	r9, [r4, #8]
    4d20:	e02d      	b.n	4d7e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4d22:	2d01      	cmp	r5, #1
    4d24:	d008      	beq.n	4d38 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    4d26:	f000 f8d5 	bl	4ed4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    4d2a:	4639      	mov	r1, r7
    4d2c:	2200      	movs	r2, #0
    4d2e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4d30:	f008 fa19 	bl	d166 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4d34:	2d02      	cmp	r5, #2
    4d36:	d00b      	beq.n	4d50 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4d38:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    4d3c:	1c40      	adds	r0, r0, #1
    4d3e:	f141 0100 	adc.w	r1, r1, #0
    4d42:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    4d46:	7a20      	ldrb	r0, [r4, #8]
    4d48:	2801      	cmp	r0, #1
    4d4a:	d003      	beq.n	4d54 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    4d4c:	f884 9008 	strb.w	r9, [r4, #8]
    4d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4d54:	f884 8008 	strb.w	r8, [r4, #8]
    4d58:	e7fa      	b.n	4d50 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4d5a:	2d01      	cmp	r5, #1
    4d5c:	d004      	beq.n	4d68 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4d5e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4d60:	f008 fc3b 	bl	d5da <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4d64:	2d02      	cmp	r5, #2
    4d66:	d0f3      	beq.n	4d50 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4d68:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    4d6c:	1c40      	adds	r0, r0, #1
    4d6e:	f141 0100 	adc.w	r1, r1, #0
    4d72:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    4d76:	7a20      	ldrb	r0, [r4, #8]
    4d78:	2801      	cmp	r0, #1
    4d7a:	d1cf      	bne.n	4d1c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    4d7c:	e7ca      	b.n	4d14 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    4d7e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d82:	f001 b92b 	b.w	5fdc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4d86:	2d01      	cmp	r5, #1
    4d88:	d0e2      	beq.n	4d50 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4d8a:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4d8c:	f008 fc25 	bl	d5da <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4d90:	e7f5      	b.n	4d7e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4d92:	0000      	.short	0x0000
    4d94:	200000ac 	.word	0x200000ac

00004d98 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    4d98:	4804      	ldr	r0, [pc, #16]	; (4dac <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    4d9a:	7800      	ldrb	r0, [r0, #0]
    4d9c:	b108      	cbz	r0, 4da2 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    4d9e:	200c      	movs	r0, #12
    4da0:	4770      	bx	lr
    4da2:	4903      	ldr	r1, [pc, #12]	; (4db0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    4da4:	2000      	movs	r0, #0
    4da6:	7448      	strb	r0, [r1, #17]
    4da8:	4770      	bx	lr
    4daa:	0000      	.short	0x0000
    4dac:	200000ac 	.word	0x200000ac
    4db0:	20000a3a 	.word	0x20000a3a

00004db4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    4db4:	4812      	ldr	r0, [pc, #72]	; (4e00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
    4db6:	b508      	push	{r3, lr}
    4db8:	7801      	ldrb	r1, [r0, #0]
    4dba:	b139      	cbz	r1, 4dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18>
    4dbc:	7800      	ldrb	r0, [r0, #0]
    4dbe:	2801      	cmp	r0, #1
    4dc0:	d006      	beq.n	4dd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    4dc2:	f240 11d9 	movw	r1, #473	; 0x1d9
    4dc6:	2027      	movs	r0, #39	; 0x27
    4dc8:	f7fe ffc8 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4dcc:	f000 f9ce 	bl	516c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    4dd0:	f000 f820 	bl	4e14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4dd4:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    4dd8:	f88d 1000 	strb.w	r1, [sp]
    4ddc:	9900      	ldr	r1, [sp, #0]
    4dde:	9100      	str	r1, [sp, #0]
    4de0:	f89d 1000 	ldrb.w	r1, [sp]
    4de4:	2900      	cmp	r1, #0
    4de6:	d10a      	bne.n	4dfe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    4de8:	6f01      	ldr	r1, [r0, #112]	; 0x70
    4dea:	2900      	cmp	r1, #0
    4dec:	d007      	beq.n	4dfe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    4dee:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    4df2:	2200      	movs	r2, #0
    4df4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4df8:	4611      	mov	r1, r2
    4dfa:	f7fd bc51 	b.w	26a0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    4dfe:	bd08      	pop	{r3, pc}
    4e00:	200000ac 	.word	0x200000ac
    4e04:	4a02      	ldr	r2, [pc, #8]	; (4e10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    4e06:	8993      	ldrh	r3, [r2, #12]
    4e08:	4303      	orrs	r3, r0
    4e0a:	8193      	strh	r3, [r2, #12]
    4e0c:	6952      	ldr	r2, [r2, #20]
    4e0e:	4710      	bx	r2
    4e10:	200000ac 	.word	0x200000ac
    4e14:	4801      	ldr	r0, [pc, #4]	; (4e1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    4e16:	6840      	ldr	r0, [r0, #4]
    4e18:	4770      	bx	lr
    4e1a:	0000      	.short	0x0000
    4e1c:	200000e4 	.word	0x200000e4
    4e20:	4801      	ldr	r0, [pc, #4]	; (4e28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74>)
    4e22:	6840      	ldr	r0, [r0, #4]
    4e24:	3078      	adds	r0, #120	; 0x78
    4e26:	4770      	bx	lr
    4e28:	200000e4 	.word	0x200000e4
    4e2c:	4a01      	ldr	r2, [pc, #4]	; (4e34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
    4e2e:	2100      	movs	r1, #0
    4e30:	6952      	ldr	r2, [r2, #20]
    4e32:	4710      	bx	r2
    4e34:	200000ac 	.word	0x200000ac
    4e38:	b570      	push	{r4, r5, r6, lr}
    4e3a:	f7ff fff1 	bl	4e20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4e3e:	4604      	mov	r4, r0
    4e40:	f7ff ffe8 	bl	4e14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4e44:	4605      	mov	r5, r0
    4e46:	4621      	mov	r1, r4
    4e48:	f008 ff24 	bl	dc94 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    4e4c:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
    4e50:	2901      	cmp	r1, #1
    4e52:	d114      	bne.n	4e7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    4e54:	2800      	cmp	r0, #0
    4e56:	d012      	beq.n	4e7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    4e58:	4909      	ldr	r1, [pc, #36]	; (4e80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xcc>)
    4e5a:	2001      	movs	r0, #1
    4e5c:	684a      	ldr	r2, [r1, #4]
    4e5e:	8829      	ldrh	r1, [r5, #0]
    4e60:	f8a2 118a 	strh.w	r1, [r2, #394]	; 0x18a
    4e64:	7a61      	ldrb	r1, [r4, #9]
    4e66:	f882 118c 	strb.w	r1, [r2, #396]	; 0x18c
    4e6a:	7aa1      	ldrb	r1, [r4, #10]
    4e6c:	f882 118d 	strb.w	r1, [r2, #397]	; 0x18d
    4e70:	f502 72c4 	add.w	r2, r2, #392	; 0x188
    4e74:	7010      	strb	r0, [r2, #0]
    4e76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4e7a:	f001 b8af 	b.w	5fdc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4e7e:	bd70      	pop	{r4, r5, r6, pc}
    4e80:	200000e4 	.word	0x200000e4
    4e84:	b570      	push	{r4, r5, r6, lr}
    4e86:	4605      	mov	r5, r0
    4e88:	2901      	cmp	r1, #1
    4e8a:	d81c      	bhi.n	4ec6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    4e8c:	4c10      	ldr	r4, [pc, #64]	; (4ed0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>)
    4e8e:	69a1      	ldr	r1, [r4, #24]
    4e90:	4788      	blx	r1
    4e92:	b1c0      	cbz	r0, 4ec6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    4e94:	7960      	ldrb	r0, [r4, #5]
    4e96:	b9b0      	cbnz	r0, 4ec6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    4e98:	2d01      	cmp	r5, #1
    4e9a:	d116      	bne.n	4eca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    4e9c:	f104 0010 	add.w	r0, r4, #16
    4ea0:	7800      	ldrb	r0, [r0, #0]
    4ea2:	06c1      	lsls	r1, r0, #27
    4ea4:	d405      	bmi.n	4eb2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    4ea6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    4ea8:	7809      	ldrb	r1, [r1, #0]
    4eaa:	06c9      	lsls	r1, r1, #27
    4eac:	d401      	bmi.n	4eb2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    4eae:	2101      	movs	r1, #1
    4eb0:	e000      	b.n	4eb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>
    4eb2:	2100      	movs	r1, #0
    4eb4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4eb6:	b91a      	cbnz	r2, 4ec0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    4eb8:	8962      	ldrh	r2, [r4, #10]
    4eba:	b10a      	cbz	r2, 4ec0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    4ebc:	06c0      	lsls	r0, r0, #27
    4ebe:	d502      	bpl.n	4ec6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    4ec0:	89a0      	ldrh	r0, [r4, #12]
    4ec2:	4301      	orrs	r1, r0
    4ec4:	d001      	beq.n	4eca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    4ec6:	2001      	movs	r0, #1
    4ec8:	bd70      	pop	{r4, r5, r6, pc}
    4eca:	2000      	movs	r0, #0
    4ecc:	bd70      	pop	{r4, r5, r6, pc}
    4ece:	0000      	.short	0x0000
    4ed0:	200000ac 	.word	0x200000ac
    4ed4:	b510      	push	{r4, lr}
    4ed6:	4c08      	ldr	r4, [pc, #32]	; (4ef8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x144>)
    4ed8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4eda:	b138      	cbz	r0, 4eec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    4edc:	8962      	ldrh	r2, [r4, #10]
    4ede:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4ee0:	1cd2      	adds	r2, r2, #3
    4ee2:	f007 fb39 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4ee6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4ee8:	6260      	str	r0, [r4, #36]	; 0x24
    4eea:	bd10      	pop	{r4, pc}
    4eec:	f240 415b 	movw	r1, #1115	; 0x45b
    4ef0:	2027      	movs	r0, #39	; 0x27
    4ef2:	f7fe ff33 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ef6:	0000      	.short	0x0000
    4ef8:	200000ac 	.word	0x200000ac
    4efc:	b510      	push	{r4, lr}
    4efe:	f7ff ff89 	bl	4e14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4f02:	4604      	mov	r4, r0
    4f04:	f7ff ff8c 	bl	4e20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4f08:	7b41      	ldrb	r1, [r0, #13]
    4f0a:	4a0a      	ldr	r2, [pc, #40]	; (4f34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>)
    4f0c:	2924      	cmp	r1, #36	; 0x24
    4f0e:	d008      	beq.n	4f22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    4f10:	7b80      	ldrb	r0, [r0, #14]
    4f12:	2824      	cmp	r0, #36	; 0x24
    4f14:	d005      	beq.n	4f22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    4f16:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    4f1a:	2804      	cmp	r0, #4
    4f1c:	d100      	bne.n	4f20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    4f1e:	2008      	movs	r0, #8
    4f20:	bd10      	pop	{r4, pc}
    4f22:	6850      	ldr	r0, [r2, #4]
    4f24:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    4f28:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    4f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4f30:	f008 bca3 	b.w	d87a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x20>
    4f34:	200000e4 	.word	0x200000e4
    4f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4f3c:	4689      	mov	r9, r1
    4f3e:	4606      	mov	r6, r0
    4f40:	f7ff ff6e 	bl	4e20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4f44:	4c58      	ldr	r4, [pc, #352]	; (50a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>)
    4f46:	2700      	movs	r7, #0
    4f48:	4605      	mov	r5, r0
    4f4a:	f88d 7000 	strb.w	r7, [sp]
    4f4e:	7820      	ldrb	r0, [r4, #0]
    4f50:	2802      	cmp	r0, #2
    4f52:	d004      	beq.n	4f5e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1aa>
    4f54:	f240 41ba 	movw	r1, #1210	; 0x4ba
    4f58:	2027      	movs	r0, #39	; 0x27
    4f5a:	f7fe feff 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f5e:	7ba0      	ldrb	r0, [r4, #14]
    4f60:	0640      	lsls	r0, r0, #25
    4f62:	d406      	bmi.n	4f72 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    4f64:	2040      	movs	r0, #64	; 0x40
    4f66:	f7ff ff61 	bl	4e2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    4f6a:	89e0      	ldrh	r0, [r4, #14]
    4f6c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    4f70:	81e0      	strh	r0, [r4, #14]
    4f72:	7ce8      	ldrb	r0, [r5, #19]
    4f74:	f04f 0801 	mov.w	r8, #1
    4f78:	b3c6      	cbz	r6, 4fec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x238>
    4f7a:	f006 fa0d 	bl	b398 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    4f7e:	f006 f9f1 	bl	b364 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    4f82:	b968      	cbnz	r0, 4fa0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    4f84:	7ce8      	ldrb	r0, [r5, #19]
    4f86:	b158      	cbz	r0, 4fa0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    4f88:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4f8a:	7841      	ldrb	r1, [r0, #1]
    4f8c:	b141      	cbz	r1, 4fa0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    4f8e:	7800      	ldrb	r0, [r0, #0]
    4f90:	7a29      	ldrb	r1, [r5, #8]
    4f92:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    4f96:	4288      	cmp	r0, r1
    4f98:	d102      	bne.n	4fa0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    4f9a:	f884 8002 	strb.w	r8, [r4, #2]
    4f9e:	e064      	b.n	506a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    4fa0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4fa2:	7841      	ldrb	r1, [r0, #1]
    4fa4:	8161      	strh	r1, [r4, #10]
    4fa6:	b121      	cbz	r1, 4fb2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1fe>
    4fa8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4faa:	f008 fae3 	bl	d574 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    4fae:	62a0      	str	r0, [r4, #40]	; 0x28
    4fb0:	e000      	b.n	4fb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x200>
    4fb2:	62a7      	str	r7, [r4, #40]	; 0x28
    4fb4:	89e0      	ldrh	r0, [r4, #14]
    4fb6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    4fba:	81e0      	strh	r0, [r4, #14]
    4fbc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4fbe:	79e9      	ldrb	r1, [r5, #7]
    4fc0:	7800      	ldrb	r0, [r0, #0]
    4fc2:	f3c0 0080 	ubfx	r0, r0, #2, #1
    4fc6:	4288      	cmp	r0, r1
    4fc8:	d005      	beq.n	4fd6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x222>
    4fca:	f000 f963 	bl	5294 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e0>
    4fce:	89e0      	ldrh	r0, [r4, #14]
    4fd0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    4fd4:	81e0      	strh	r0, [r4, #14]
    4fd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4fd8:	7a29      	ldrb	r1, [r5, #8]
    4fda:	7800      	ldrb	r0, [r0, #0]
    4fdc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    4fe0:	4288      	cmp	r0, r1
    4fe2:	d10e      	bne.n	5002 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    4fe4:	4668      	mov	r0, sp
    4fe6:	f000 f917 	bl	5218 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>
    4fea:	e00a      	b.n	5002 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    4fec:	e7ff      	b.n	4fee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23a>
    4fee:	b108      	cbz	r0, 4ff4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x240>
    4ff0:	f006 f9cc 	bl	b38c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    4ff4:	78e0      	ldrb	r0, [r4, #3]
    4ff6:	1c40      	adds	r0, r0, #1
    4ff8:	70e0      	strb	r0, [r4, #3]
    4ffa:	89e0      	ldrh	r0, [r4, #14]
    4ffc:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5000:	81e0      	strh	r0, [r4, #14]
    5002:	7ca8      	ldrb	r0, [r5, #18]
    5004:	b1a0      	cbz	r0, 5030 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27c>
    5006:	f7ff ff05 	bl	4e14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    500a:	4928      	ldr	r1, [pc, #160]	; (50ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    500c:	f881 8018 	strb.w	r8, [r1, #24]
    5010:	e9d5 2316 	ldrd	r2, r3, [r5, #88]	; 0x58
    5014:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5018:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    501c:	f008 fc1f 	bl	d85e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5020:	4603      	mov	r3, r0
    5022:	22fb      	movs	r2, #251	; 0xfb
    5024:	4921      	ldr	r1, [pc, #132]	; (50ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    5026:	2000      	movs	r0, #0
    5028:	f006 f950 	bl	b2cc <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    502c:	f006 f984 	bl	b338 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5030:	4d1e      	ldr	r5, [pc, #120]	; (50ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    5032:	354a      	adds	r5, #74	; 0x4a
    5034:	f1b9 0f00 	cmp.w	r9, #0
    5038:	d104      	bne.n	5044 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x290>
    503a:	78e1      	ldrb	r1, [r4, #3]
    503c:	2001      	movs	r0, #1
    503e:	f7ff ff21 	bl	4e84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    5042:	b1b0      	cbz	r0, 5072 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2be>
    5044:	f006 fd48 	bl	bad8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    5048:	f89d 0000 	ldrb.w	r0, [sp]
    504c:	b110      	cbz	r0, 5054 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a0>
    504e:	2000      	movs	r0, #0
    5050:	f7ff fe34 	bl	4cbc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5054:	b136      	cbz	r6, 5064 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    5056:	70e7      	strb	r7, [r4, #3]
    5058:	7968      	ldrb	r0, [r5, #5]
    505a:	1c40      	adds	r0, r0, #1
    505c:	7168      	strb	r0, [r5, #5]
    505e:	f7ff feeb 	bl	4e38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    5062:	e002      	b.n	506a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    5064:	79a8      	ldrb	r0, [r5, #6]
    5066:	1c40      	adds	r0, r0, #1
    5068:	71a8      	strb	r0, [r5, #6]
    506a:	f000 f87f 	bl	516c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    506e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5072:	f89d 0000 	ldrb.w	r0, [sp]
    5076:	b110      	cbz	r0, 507e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    5078:	2001      	movs	r0, #1
    507a:	f7ff fe1f 	bl	4cbc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    507e:	2000      	movs	r0, #0
    5080:	f000 f98c 	bl	539c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    5084:	f89d 0000 	ldrb.w	r0, [sp]
    5088:	b110      	cbz	r0, 5090 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2dc>
    508a:	2002      	movs	r0, #2
    508c:	f7ff fe16 	bl	4cbc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5090:	b136      	cbz	r6, 50a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>
    5092:	70e7      	strb	r7, [r4, #3]
    5094:	7968      	ldrb	r0, [r5, #5]
    5096:	1c40      	adds	r0, r0, #1
    5098:	7168      	strb	r0, [r5, #5]
    509a:	f7ff fecd 	bl	4e38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    509e:	e7e6      	b.n	506e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    50a0:	79a8      	ldrb	r0, [r5, #6]
    50a2:	1c40      	adds	r0, r0, #1
    50a4:	71a8      	strb	r0, [r5, #6]
    50a6:	e7e2      	b.n	506e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    50a8:	200000ac 	.word	0x200000ac
    50ac:	200009f0 	.word	0x200009f0
    50b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    50b4:	4688      	mov	r8, r1
    50b6:	4681      	mov	r9, r0
    50b8:	f7ff feb2 	bl	4e20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    50bc:	4d29      	ldr	r5, [pc, #164]	; (5164 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>)
    50be:	4604      	mov	r4, r0
    50c0:	7828      	ldrb	r0, [r5, #0]
    50c2:	2801      	cmp	r0, #1
    50c4:	d004      	beq.n	50d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31c>
    50c6:	f240 416a 	movw	r1, #1130	; 0x46a
    50ca:	2027      	movs	r0, #39	; 0x27
    50cc:	f7fe fe46 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50d0:	7860      	ldrb	r0, [r4, #1]
    50d2:	2600      	movs	r6, #0
    50d4:	2701      	movs	r7, #1
    50d6:	b120      	cbz	r0, 50e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x32e>
    50d8:	7066      	strb	r6, [r4, #1]
    50da:	2100      	movs	r1, #0
    50dc:	2004      	movs	r0, #4
    50de:	f7ff fe91 	bl	4e04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    50e2:	6a29      	ldr	r1, [r5, #32]
    50e4:	7808      	ldrb	r0, [r1, #0]
    50e6:	43c0      	mvns	r0, r0
    50e8:	0780      	lsls	r0, r0, #30
    50ea:	d109      	bne.n	5100 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    50ec:	79a0      	ldrb	r0, [r4, #6]
    50ee:	bb88      	cbnz	r0, 5154 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    50f0:	2002      	movs	r0, #2
    50f2:	f7ff fe87 	bl	4e04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    50f6:	6a28      	ldr	r0, [r5, #32]
    50f8:	7800      	ldrb	r0, [r0, #0]
    50fa:	43c0      	mvns	r0, r0
    50fc:	0780      	lsls	r0, r0, #30
    50fe:	d029      	beq.n	5154 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    5100:	6a28      	ldr	r0, [r5, #32]
    5102:	7840      	ldrb	r0, [r0, #1]
    5104:	b110      	cbz	r0, 510c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    5106:	2002      	movs	r0, #2
    5108:	71a0      	strb	r0, [r4, #6]
    510a:	e000      	b.n	510e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35a>
    510c:	71a7      	strb	r7, [r4, #6]
    510e:	7ce0      	ldrb	r0, [r4, #19]
    5110:	b1a0      	cbz	r0, 513c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x388>
    5112:	f7ff fe7f 	bl	4e14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5116:	4914      	ldr	r1, [pc, #80]	; (5168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    5118:	7a6d      	ldrb	r5, [r5, #9]
    511a:	760e      	strb	r6, [r1, #24]
    511c:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    5120:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5124:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    5128:	f008 fb99 	bl	d85e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    512c:	4603      	mov	r3, r0
    512e:	462a      	mov	r2, r5
    5130:	490d      	ldr	r1, [pc, #52]	; (5168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    5132:	2001      	movs	r0, #1
    5134:	f006 f8ca 	bl	b2cc <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5138:	f006 f8fe 	bl	b338 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    513c:	ea38 0009 	bics.w	r0, r8, r9
    5140:	d004      	beq.n	514c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    5142:	2100      	movs	r1, #0
    5144:	4608      	mov	r0, r1
    5146:	f7ff fe9d 	bl	4e84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    514a:	b128      	cbz	r0, 5158 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a4>
    514c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5150:	f000 b80c 	b.w	516c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    5154:	2003      	movs	r0, #3
    5156:	e7d7      	b.n	5108 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>
    5158:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    515c:	2000      	movs	r0, #0
    515e:	f000 b8df 	b.w	5320 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56c>
    5162:	0000      	.short	0x0000
    5164:	200000ac 	.word	0x200000ac
    5168:	200009f0 	.word	0x200009f0
    516c:	b510      	push	{r4, lr}
    516e:	f006 f9a5 	bl	b4bc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    5172:	f006 f861 	bl	b238 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5176:	4c0d      	ldr	r4, [pc, #52]	; (51ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f8>)
    5178:	89e0      	ldrh	r0, [r4, #14]
    517a:	f7ff fe57 	bl	4e2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    517e:	69e2      	ldr	r2, [r4, #28]
    5180:	7961      	ldrb	r1, [r4, #5]
    5182:	78a0      	ldrb	r0, [r4, #2]
    5184:	4790      	blx	r2
    5186:	480a      	ldr	r0, [pc, #40]	; (51b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    5188:	7c40      	ldrb	r0, [r0, #17]
    518a:	b158      	cbz	r0, 51a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    518c:	4808      	ldr	r0, [pc, #32]	; (51b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    518e:	3852      	subs	r0, #82	; 0x52
    5190:	f850 1f52 	ldr.w	r1, [r0, #82]!
    5194:	6081      	str	r1, [r0, #8]
    5196:	6841      	ldr	r1, [r0, #4]
    5198:	60c1      	str	r1, [r0, #12]
    519a:	4805      	ldr	r0, [pc, #20]	; (51b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    519c:	2101      	movs	r1, #1
    519e:	7401      	strb	r1, [r0, #16]
    51a0:	f000 ff1c 	bl	5fdc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    51a4:	2000      	movs	r0, #0
    51a6:	7020      	strb	r0, [r4, #0]
    51a8:	bd10      	pop	{r4, pc}
    51aa:	0000      	.short	0x0000
    51ac:	200000ac 	.word	0x200000ac
    51b0:	20000a3a 	.word	0x20000a3a
    51b4:	4808      	ldr	r0, [pc, #32]	; (51d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>)
    51b6:	b510      	push	{r4, lr}
    51b8:	7800      	ldrb	r0, [r0, #0]
    51ba:	2802      	cmp	r0, #2
    51bc:	d004      	beq.n	51c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    51be:	f240 2111 	movw	r1, #529	; 0x211
    51c2:	2027      	movs	r0, #39	; 0x27
    51c4:	f7fe fdca 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51c8:	4904      	ldr	r1, [pc, #16]	; (51dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x428>)
    51ca:	2001      	movs	r0, #1
    51cc:	71c8      	strb	r0, [r1, #7]
    51ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    51d2:	f7ff bfcb 	b.w	516c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    51d6:	0000      	.short	0x0000
    51d8:	200000ac 	.word	0x200000ac
    51dc:	20000a3a 	.word	0x20000a3a
    51e0:	b430      	push	{r4, r5}
    51e2:	4b0c      	ldr	r3, [pc, #48]	; (5214 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>)
    51e4:	b942      	cbnz	r2, 51f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    51e6:	79da      	ldrb	r2, [r3, #7]
    51e8:	2aff      	cmp	r2, #255	; 0xff
    51ea:	d105      	bne.n	51f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    51ec:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    51f0:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    51f4:	42a2      	cmp	r2, r4
    51f6:	d00b      	beq.n	5210 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
    51f8:	b131      	cbz	r1, 5208 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x454>
    51fa:	79da      	ldrb	r2, [r3, #7]
    51fc:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    5200:	bc30      	pop	{r4, r5}
    5202:	4610      	mov	r0, r2
    5204:	f006 bca0 	b.w	bb48 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    5208:	22ff      	movs	r2, #255	; 0xff
    520a:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    520e:	e7f7      	b.n	5200 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    5210:	bc30      	pop	{r4, r5}
    5212:	4770      	bx	lr
    5214:	200000ac 	.word	0x200000ac
    5218:	b570      	push	{r4, r5, r6, lr}
    521a:	4606      	mov	r6, r0
    521c:	f7ff fe00 	bl	4e20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5220:	4a1b      	ldr	r2, [pc, #108]	; (5290 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>)
    5222:	4604      	mov	r4, r0
    5224:	2501      	movs	r5, #1
    5226:	6a51      	ldr	r1, [r2, #36]	; 0x24
    5228:	7808      	ldrb	r0, [r1, #0]
    522a:	f000 0003 	and.w	r0, r0, #3
    522e:	2801      	cmp	r0, #1
    5230:	d00c      	beq.n	524c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    5232:	2802      	cmp	r0, #2
    5234:	d00a      	beq.n	524c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    5236:	2803      	cmp	r0, #3
    5238:	d121      	bne.n	527e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    523a:	7065      	strb	r5, [r4, #1]
    523c:	89d0      	ldrh	r0, [r2, #14]
    523e:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    5242:	81d0      	strh	r0, [r2, #14]
    5244:	2001      	movs	r0, #1
    5246:	f7ff fddd 	bl	4e04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    524a:	e018      	b.n	527e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    524c:	7848      	ldrb	r0, [r1, #1]
    524e:	b1b0      	cbz	r0, 527e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    5250:	89d1      	ldrh	r1, [r2, #14]
    5252:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    5256:	81d1      	strh	r1, [r2, #14]
    5258:	6a91      	ldr	r1, [r2, #40]	; 0x28
    525a:	2900      	cmp	r1, #0
    525c:	d009      	beq.n	5272 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    525e:	28fb      	cmp	r0, #251	; 0xfb
    5260:	d808      	bhi.n	5274 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c0>
    5262:	7990      	ldrb	r0, [r2, #6]
    5264:	b120      	cbz	r0, 5270 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4bc>
    5266:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    526a:	2020      	movs	r0, #32
    526c:	f7ff bdde 	b.w	4e2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    5270:	7035      	strb	r5, [r6, #0]
    5272:	bd70      	pop	{r4, r5, r6, pc}
    5274:	7950      	ldrb	r0, [r2, #5]
    5276:	f040 0010 	orr.w	r0, r0, #16
    527a:	7150      	strb	r0, [r2, #5]
    527c:	bd70      	pop	{r4, r5, r6, pc}
    527e:	7a20      	ldrb	r0, [r4, #8]
    5280:	2801      	cmp	r0, #1
    5282:	d001      	beq.n	5288 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d4>
    5284:	7225      	strb	r5, [r4, #8]
    5286:	bd70      	pop	{r4, r5, r6, pc}
    5288:	2000      	movs	r0, #0
    528a:	7220      	strb	r0, [r4, #8]
    528c:	bd70      	pop	{r4, r5, r6, pc}
    528e:	0000      	.short	0x0000
    5290:	200000ac 	.word	0x200000ac
    5294:	b570      	push	{r4, r5, r6, lr}
    5296:	f7ff fdc3 	bl	4e20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    529a:	4604      	mov	r4, r0
    529c:	7980      	ldrb	r0, [r0, #6]
    529e:	2800      	cmp	r0, #0
    52a0:	d027      	beq.n	52f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53e>
    52a2:	2802      	cmp	r0, #2
    52a4:	d10d      	bne.n	52c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50e>
    52a6:	4818      	ldr	r0, [pc, #96]	; (5308 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x554>)
    52a8:	6b00      	ldr	r0, [r0, #48]	; 0x30
    52aa:	f007 ff35 	bl	d118 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    52ae:	b308      	cbz	r0, 52f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    52b0:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    52b4:	1c40      	adds	r0, r0, #1
    52b6:	f141 0100 	adc.w	r1, r1, #0
    52ba:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    52be:	f000 fe8d 	bl	5fdc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    52c2:	2500      	movs	r5, #0
    52c4:	71a5      	strb	r5, [r4, #6]
    52c6:	78a0      	ldrb	r0, [r4, #2]
    52c8:	2601      	movs	r6, #1
    52ca:	b170      	cbz	r0, 52ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    52cc:	70a5      	strb	r5, [r4, #2]
    52ce:	f7ff fb21 	bl	4914 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    52d2:	b190      	cbz	r0, 52fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x546>
    52d4:	2100      	movs	r1, #0
    52d6:	2008      	movs	r0, #8
    52d8:	f7ff fd94 	bl	4e04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    52dc:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    52e0:	1c40      	adds	r0, r0, #1
    52e2:	f141 0100 	adc.w	r1, r1, #0
    52e6:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    52ea:	79e0      	ldrb	r0, [r4, #7]
    52ec:	2801      	cmp	r0, #1
    52ee:	d009      	beq.n	5304 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x550>
    52f0:	71e6      	strb	r6, [r4, #7]
    52f2:	bd70      	pop	{r4, r5, r6, pc}
    52f4:	f44f 716c 	mov.w	r1, #944	; 0x3b0
    52f8:	e001      	b.n	52fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54a>
    52fa:	f44f 7172 	mov.w	r1, #968	; 0x3c8
    52fe:	2027      	movs	r0, #39	; 0x27
    5300:	f7fe fd2c 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5304:	71e5      	strb	r5, [r4, #7]
    5306:	bd70      	pop	{r4, r5, r6, pc}
    5308:	200000ac 	.word	0x200000ac
    530c:	4803      	ldr	r0, [pc, #12]	; (531c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>)
    530e:	7800      	ldrb	r0, [r0, #0]
    5310:	2800      	cmp	r0, #0
    5312:	d001      	beq.n	5318 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x564>
    5314:	f7ff bf2a 	b.w	516c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    5318:	4770      	bx	lr
    531a:	0000      	.short	0x0000
    531c:	200000ac 	.word	0x200000ac
    5320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5324:	4607      	mov	r7, r0
    5326:	f7ff fd75 	bl	4e14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    532a:	4680      	mov	r8, r0
    532c:	f7ff fd78 	bl	4e20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5330:	4c17      	ldr	r4, [pc, #92]	; (5390 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5dc>)
    5332:	4605      	mov	r5, r0
    5334:	463a      	mov	r2, r7
    5336:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5338:	6260      	str	r0, [r4, #36]	; 0x24
    533a:	2101      	movs	r1, #1
    533c:	4640      	mov	r0, r8
    533e:	f7ff ff4f 	bl	51e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    5342:	7ce8      	ldrb	r0, [r5, #19]
    5344:	2600      	movs	r6, #0
    5346:	b178      	cbz	r0, 5368 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b4>
    5348:	4812      	ldr	r0, [pc, #72]	; (5394 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    534a:	f006 fb1b 	bl	b984 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    534e:	4812      	ldr	r0, [pc, #72]	; (5398 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    5350:	7606      	strb	r6, [r0, #24]
    5352:	e9d5 1218 	ldrd	r1, r2, [r5, #96]	; 0x60
    5356:	e9c0 1204 	strd	r1, r2, [r0, #16]
    535a:	490e      	ldr	r1, [pc, #56]	; (5394 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    535c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    535e:	f005 ff3d 	bl	b1dc <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    5362:	f005 ff4f 	bl	b204 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
    5366:	e004      	b.n	5372 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5be>
    5368:	6a60      	ldr	r0, [r4, #36]	; 0x24
    536a:	f006 fb0b 	bl	b984 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    536e:	f005 ff63 	bl	b238 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5372:	b917      	cbnz	r7, 537a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c6>
    5374:	4630      	mov	r0, r6
    5376:	f006 f9b9 	bl	b6ec <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    537a:	2100      	movs	r1, #0
    537c:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    5380:	4608      	mov	r0, r1
    5382:	f006 fb8b 	bl	ba9c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5386:	2002      	movs	r0, #2
    5388:	7020      	strb	r0, [r4, #0]
    538a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    538e:	0000      	.short	0x0000
    5390:	200000ac 	.word	0x200000ac
    5394:	200008e8 	.word	0x200008e8
    5398:	200009f0 	.word	0x200009f0
    539c:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    53a0:	4604      	mov	r4, r0
    53a2:	f7ff fd3d 	bl	4e20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    53a6:	4605      	mov	r5, r0
    53a8:	f7ff fd34 	bl	4e14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    53ac:	4606      	mov	r6, r0
    53ae:	f8df 9164 	ldr.w	r9, [pc, #356]	; 5514 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    53b2:	4622      	mov	r2, r4
    53b4:	2100      	movs	r1, #0
    53b6:	f7ff ff13 	bl	51e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    53ba:	79a8      	ldrb	r0, [r5, #6]
    53bc:	f04f 0800 	mov.w	r8, #0
    53c0:	2701      	movs	r7, #1
    53c2:	f1a9 0420 	sub.w	r4, r9, #32
    53c6:	b140      	cbz	r0, 53da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x626>
    53c8:	2801      	cmp	r0, #1
    53ca:	d01f      	beq.n	540c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    53cc:	2802      	cmp	r0, #2
    53ce:	d030      	beq.n	5432 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x67e>
    53d0:	2803      	cmp	r0, #3
    53d2:	d03c      	beq.n	544e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69a>
    53d4:	f240 21ae 	movw	r1, #686	; 0x2ae
    53d8:	e058      	b.n	548c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    53da:	7a20      	ldrb	r0, [r4, #8]
    53dc:	2150      	movs	r1, #80	; 0x50
    53de:	f8ad 0004 	strh.w	r0, [sp, #4]
    53e2:	5388      	strh	r0, [r1, r6]
    53e4:	4648      	mov	r0, r9
    53e6:	f7ff fabf 	bl	4968 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    53ea:	b128      	cbz	r0, 53f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x644>
    53ec:	2080      	movs	r0, #128	; 0x80
    53ee:	6a21      	ldr	r1, [r4, #32]
    53f0:	f7ff fd08 	bl	4e04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    53f4:	70af      	strb	r7, [r5, #2]
    53f6:	e02e      	b.n	5456 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    53f8:	466a      	mov	r2, sp
    53fa:	a901      	add	r1, sp, #4
    53fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
    53fe:	f008 fa46 	bl	d88e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    5402:	6220      	str	r0, [r4, #32]
    5404:	b110      	cbz	r0, 540c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    5406:	f895 1045 	ldrb.w	r1, [r5, #69]	; 0x45
    540a:	b111      	cbz	r1, 5412 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65e>
    540c:	4842      	ldr	r0, [pc, #264]	; (5518 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    540e:	6220      	str	r0, [r4, #32]
    5410:	e021      	b.n	5456 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    5412:	f89d 1000 	ldrb.w	r1, [sp]
    5416:	b931      	cbnz	r1, 5426 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x672>
    5418:	f8a0 8000 	strh.w	r8, [r0]
    541c:	f880 8002 	strb.w	r8, [r0, #2]
    5420:	2101      	movs	r1, #1
    5422:	f008 fd84 	bl	df2e <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5426:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    542a:	6a20      	ldr	r0, [r4, #32]
    542c:	f008 fd39 	bl	dea2 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    5430:	e011      	b.n	5456 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    5432:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    5436:	f8ad 0004 	strh.w	r0, [sp, #4]
    543a:	466a      	mov	r2, sp
    543c:	a901      	add	r1, sp, #4
    543e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5440:	f008 fa25 	bl	d88e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    5444:	6220      	str	r0, [r4, #32]
    5446:	b930      	cbnz	r0, 5456 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    5448:	f240 219f 	movw	r1, #671	; 0x29f
    544c:	e01e      	b.n	548c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    544e:	4648      	mov	r0, r9
    5450:	f7ff fa8a 	bl	4968 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5454:	b1c0      	cbz	r0, 5488 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d4>
    5456:	6a20      	ldr	r0, [r4, #32]
    5458:	2308      	movs	r3, #8
    545a:	7801      	ldrb	r1, [r0, #0]
    545c:	f021 0108 	bic.w	r1, r1, #8
    5460:	7001      	strb	r1, [r0, #0]
    5462:	79ea      	ldrb	r2, [r5, #7]
    5464:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    5468:	4311      	orrs	r1, r2
    546a:	f021 0104 	bic.w	r1, r1, #4
    546e:	7001      	strb	r1, [r0, #0]
    5470:	7a2a      	ldrb	r2, [r5, #8]
    5472:	2304      	movs	r3, #4
    5474:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    5478:	4311      	orrs	r1, r2
    547a:	f021 0110 	bic.w	r1, r1, #16
    547e:	7001      	strb	r1, [r0, #0]
    5480:	43c9      	mvns	r1, r1
    5482:	0789      	lsls	r1, r1, #30
    5484:	d005      	beq.n	5492 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6de>
    5486:	e007      	b.n	5498 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    5488:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    548c:	2027      	movs	r0, #39	; 0x27
    548e:	f7fe fc65 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5492:	78c0      	ldrb	r0, [r0, #3]
    5494:	2802      	cmp	r0, #2
    5496:	d00f      	beq.n	54b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    5498:	6b20      	ldr	r0, [r4, #48]	; 0x30
    549a:	f007 ff8e 	bl	d3ba <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    549e:	b108      	cbz	r0, 54a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    54a0:	2101      	movs	r1, #1
    54a2:	e00a      	b.n	54ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    54a4:	6a20      	ldr	r0, [r4, #32]
    54a6:	7800      	ldrb	r0, [r0, #0]
    54a8:	43c0      	mvns	r0, r0
    54aa:	0780      	lsls	r0, r0, #30
    54ac:	d004      	beq.n	54b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    54ae:	f7ff fa19 	bl	48e4 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    54b2:	f080 0101 	eor.w	r1, r0, #1
    54b6:	e000      	b.n	54ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    54b8:	2100      	movs	r1, #0
    54ba:	6a20      	ldr	r0, [r4, #32]
    54bc:	7802      	ldrb	r2, [r0, #0]
    54be:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    54c2:	7001      	strb	r1, [r0, #0]
    54c4:	7ca9      	ldrb	r1, [r5, #18]
    54c6:	b191      	cbz	r1, 54ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    54c8:	7841      	ldrb	r1, [r0, #1]
    54ca:	b181      	cbz	r1, 54ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    54cc:	4813      	ldr	r0, [pc, #76]	; (551c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    54ce:	f006 fa59 	bl	b984 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    54d2:	4811      	ldr	r0, [pc, #68]	; (5518 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    54d4:	3828      	subs	r0, #40	; 0x28
    54d6:	7607      	strb	r7, [r0, #24]
    54d8:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    54dc:	e9c0 1204 	strd	r1, r2, [r0, #16]
    54e0:	480e      	ldr	r0, [pc, #56]	; (551c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    54e2:	6a21      	ldr	r1, [r4, #32]
    54e4:	f005 fe7a 	bl	b1dc <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    54e8:	f005 fec4 	bl	b274 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
    54ec:	e003      	b.n	54f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x742>
    54ee:	f006 fa49 	bl	b984 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    54f2:	f005 fea1 	bl	b238 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    54f6:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    54fa:	2101      	movs	r1, #1
    54fc:	2000      	movs	r0, #0
    54fe:	f006 facd 	bl	ba9c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5502:	7127      	strb	r7, [r4, #4]
    5504:	6a20      	ldr	r0, [r4, #32]
    5506:	8801      	ldrh	r1, [r0, #0]
    5508:	8221      	strh	r1, [r4, #16]
    550a:	7880      	ldrb	r0, [r0, #2]
    550c:	74a0      	strb	r0, [r4, #18]
    550e:	7027      	strb	r7, [r4, #0]
    5510:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    5514:	200000cc 	.word	0x200000cc
    5518:	20000a18 	.word	0x20000a18
    551c:	200008e8 	.word	0x200008e8
    5520:	000051b5 	.word	0x000051b5
    5524:	00004f39 	.word	0x00004f39
    5528:	000050b1 	.word	0x000050b1
    552c:	0000530d 	.word	0x0000530d

00005530 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    5530:	4800      	ldr	r0, [pc, #0]	; (5534 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    5532:	4770      	bx	lr
    5534:	200013d5 	.word	0x200013d5

00005538 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>:
    5538:	b570      	push	{r4, r5, r6, lr}
    553a:	2600      	movs	r6, #0
    553c:	4635      	mov	r5, r6
    553e:	4c0f      	ldr	r4, [pc, #60]	; (557c <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x44>)
    5540:	e018      	b.n	5574 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x3c>
    5542:	1960      	adds	r0, r4, r5
    5544:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    5548:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    554c:	2a01      	cmp	r2, #1
    554e:	d002      	beq.n	5556 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x1e>
    5550:	f890 014b 	ldrb.w	r0, [r0, #331]	; 0x14b
    5554:	b160      	cbz	r0, 5570 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x38>
    5556:	480a      	ldr	r0, [pc, #40]	; (5580 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x48>)
    5558:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    555c:	1c73      	adds	r3, r6, #1
    555e:	5585      	strb	r5, [r0, r6]
    5560:	f891 2153 	ldrb.w	r2, [r1, #339]	; 0x153
    5564:	4630      	mov	r0, r6
    5566:	b2de      	uxtb	r6, r3
    5568:	f501 71aa 	add.w	r1, r1, #340	; 0x154
    556c:	f006 fbbe 	bl	bcec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5570:	1c6d      	adds	r5, r5, #1
    5572:	b2ed      	uxtb	r5, r5
    5574:	78a0      	ldrb	r0, [r4, #2]
    5576:	42a8      	cmp	r0, r5
    5578:	d8e3      	bhi.n	5542 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0xa>
    557a:	bd70      	pop	{r4, r5, r6, pc}
    557c:	20001202 	.word	0x20001202
    5580:	20000274 	.word	0x20000274

00005584 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    5584:	4904      	ldr	r1, [pc, #16]	; (5598 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    5586:	788a      	ldrb	r2, [r1, #2]
    5588:	4282      	cmp	r2, r0
    558a:	d903      	bls.n	5594 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    558c:	4408      	add	r0, r1
    558e:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    5592:	4770      	bx	lr
    5594:	2000      	movs	r0, #0
    5596:	4770      	bx	lr
    5598:	20001202 	.word	0x20001202

0000559c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    559c:	4904      	ldr	r1, [pc, #16]	; (55b0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    559e:	788a      	ldrb	r2, [r1, #2]
    55a0:	4282      	cmp	r2, r0
    55a2:	d903      	bls.n	55ac <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    55a4:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    55a8:	3083      	adds	r0, #131	; 0x83
    55aa:	4770      	bx	lr
    55ac:	2000      	movs	r0, #0
    55ae:	4770      	bx	lr
    55b0:	20001202 	.word	0x20001202

000055b4 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    55b4:	4a05      	ldr	r2, [pc, #20]	; (55cc <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    55b6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    55ba:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    55be:	6802      	ldr	r2, [r0, #0]
    55c0:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    55c4:	8880      	ldrh	r0, [r0, #4]
    55c6:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    55ca:	4770      	bx	lr
    55cc:	20001202 	.word	0x20001202

000055d0 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    55d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55d4:	4607      	mov	r7, r0
    55d6:	2400      	movs	r4, #0
    55d8:	4d10      	ldr	r5, [pc, #64]	; (561c <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
    55da:	e019      	b.n	5610 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
    55dc:	4620      	mov	r0, r4
    55de:	f7ff ffdd 	bl	559c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    55e2:	0003      	movs	r3, r0
    55e4:	d012      	beq.n	560c <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    55e6:	1928      	adds	r0, r5, r4
    55e8:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    55ec:	b970      	cbnz	r0, 560c <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    55ee:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    55f2:	eb05 0640 	add.w	r6, r5, r0, lsl #1
    55f6:	f206 160b 	addw	r6, r6, #267	; 0x10b
    55fa:	463a      	mov	r2, r7
    55fc:	4631      	mov	r1, r6
    55fe:	4618      	mov	r0, r3
    5600:	f008 f8c8 	bl	d794 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    5604:	4630      	mov	r0, r6
    5606:	4621      	mov	r1, r4
    5608:	f7ff ffd4 	bl	55b4 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    560c:	1c64      	adds	r4, r4, #1
    560e:	b2e4      	uxtb	r4, r4
    5610:	78a8      	ldrb	r0, [r5, #2]
    5612:	42a0      	cmp	r0, r4
    5614:	d8e2      	bhi.n	55dc <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
    5616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    561a:	0000      	.short	0x0000
    561c:	20001202 	.word	0x20001202

00005620 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    5620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5624:	460e      	mov	r6, r1
    5626:	4607      	mov	r7, r0
    5628:	4615      	mov	r5, r2
    562a:	2106      	movs	r1, #6
    562c:	4630      	mov	r0, r6
    562e:	f008 fb81 	bl	dd34 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5632:	4c0d      	ldr	r4, [pc, #52]	; (5668 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    5634:	b160      	cbz	r0, 5650 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    5636:	2000      	movs	r0, #0
    5638:	e004      	b.n	5644 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    563a:	1821      	adds	r1, r4, r0
    563c:	1c40      	adds	r0, r0, #1
    563e:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    5642:	b2c0      	uxtb	r0, r0
    5644:	78a1      	ldrb	r1, [r4, #2]
    5646:	4281      	cmp	r1, r0
    5648:	d8f7      	bhi.n	563a <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    564a:	2001      	movs	r0, #1
    564c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5650:	4631      	mov	r1, r6
    5652:	4638      	mov	r0, r7
    5654:	f008 f92a 	bl	d8ac <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    5658:	2808      	cmp	r0, #8
    565a:	d003      	beq.n	5664 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    565c:	4420      	add	r0, r4
    565e:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    5662:	e7f2      	b.n	564a <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    5664:	2000      	movs	r0, #0
    5666:	e7f1      	b.n	564c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    5668:	20001202 	.word	0x20001202

0000566c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    566c:	4904      	ldr	r1, [pc, #16]	; (5680 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    566e:	788a      	ldrb	r2, [r1, #2]
    5670:	4282      	cmp	r2, r0
    5672:	d903      	bls.n	567c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    5674:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5678:	1cc0      	adds	r0, r0, #3
    567a:	4770      	bx	lr
    567c:	2000      	movs	r0, #0
    567e:	4770      	bx	lr
    5680:	20001202 	.word	0x20001202

00005684 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    5684:	4908      	ldr	r1, [pc, #32]	; (56a8 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    5686:	788a      	ldrb	r2, [r1, #2]
    5688:	4282      	cmp	r2, r0
    568a:	d903      	bls.n	5694 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    568c:	180a      	adds	r2, r1, r0
    568e:	f892 2143 	ldrb.w	r2, [r2, #323]	; 0x143
    5692:	b10a      	cbz	r2, 5698 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    5694:	2000      	movs	r0, #0
    5696:	4770      	bx	lr
    5698:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    569c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    56a0:	f200 100b 	addw	r0, r0, #267	; 0x10b
    56a4:	4770      	bx	lr
    56a6:	0000      	.short	0x0000
    56a8:	20001202 	.word	0x20001202

000056ac <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    56ac:	b510      	push	{r4, lr}
    56ae:	f240 12d3 	movw	r2, #467	; 0x1d3
    56b2:	2100      	movs	r1, #0
    56b4:	4808      	ldr	r0, [pc, #32]	; (56d8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    56b6:	f006 ffc9 	bl	c64c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    56ba:	2208      	movs	r2, #8
    56bc:	21ff      	movs	r1, #255	; 0xff
    56be:	4807      	ldr	r0, [pc, #28]	; (56dc <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    56c0:	f006 ffc4 	bl	c64c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    56c4:	4805      	ldr	r0, [pc, #20]	; (56dc <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    56c6:	2100      	movs	r1, #0
    56c8:	1f00      	subs	r0, r0, #4
    56ca:	7001      	strb	r1, [r0, #0]
    56cc:	7041      	strb	r1, [r0, #1]
    56ce:	f44f 7161 	mov.w	r1, #900	; 0x384
    56d2:	8041      	strh	r1, [r0, #2]
    56d4:	bd10      	pop	{r4, pc}
    56d6:	0000      	.short	0x0000
    56d8:	20001202 	.word	0x20001202
    56dc:	20000274 	.word	0x20000274

000056e0 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    56e0:	4901      	ldr	r1, [pc, #4]	; (56e8 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    56e2:	7008      	strb	r0, [r1, #0]
    56e4:	4770      	bx	lr
    56e6:	0000      	.short	0x0000
    56e8:	20000270 	.word	0x20000270

000056ec <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    56ec:	4801      	ldr	r0, [pc, #4]	; (56f4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    56ee:	7800      	ldrb	r0, [r0, #0]
    56f0:	4770      	bx	lr
    56f2:	0000      	.short	0x0000
    56f4:	20000270 	.word	0x20000270

000056f8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    56f8:	4b0b      	ldr	r3, [pc, #44]	; (5728 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    56fa:	b510      	push	{r4, lr}
    56fc:	789c      	ldrb	r4, [r3, #2]
    56fe:	4284      	cmp	r4, r0
    5700:	d90f      	bls.n	5722 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    5702:	4418      	add	r0, r3
    5704:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5708:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    570c:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    5710:	700b      	strb	r3, [r1, #0]
    5712:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    5716:	6011      	str	r1, [r2, #0]
    5718:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    571c:	8090      	strh	r0, [r2, #4]
    571e:	2001      	movs	r0, #1
    5720:	bd10      	pop	{r4, pc}
    5722:	2000      	movs	r0, #0
    5724:	bd10      	pop	{r4, pc}
    5726:	0000      	.short	0x0000
    5728:	20001202 	.word	0x20001202

0000572c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    572c:	4907      	ldr	r1, [pc, #28]	; (574c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    572e:	788a      	ldrb	r2, [r1, #2]
    5730:	4282      	cmp	r2, r0
    5732:	d909      	bls.n	5748 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    5734:	4408      	add	r0, r1
    5736:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    573a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    573e:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5742:	f000 0001 	and.w	r0, r0, #1
    5746:	4770      	bx	lr
    5748:	2000      	movs	r0, #0
    574a:	4770      	bx	lr
    574c:	20001202 	.word	0x20001202

00005750 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    5750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5754:	4698      	mov	r8, r3
    5756:	4691      	mov	r9, r2
    5758:	460c      	mov	r4, r1
    575a:	4605      	mov	r5, r0
    575c:	f000 f962 	bl	5a24 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    5760:	4606      	mov	r6, r0
    5762:	2810      	cmp	r0, #16
    5764:	d006      	beq.n	5774 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    5766:	f000 f92d 	bl	59c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    576a:	2810      	cmp	r0, #16
    576c:	d002      	beq.n	5774 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    576e:	2012      	movs	r0, #18
    5770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5774:	4f18      	ldr	r7, [pc, #96]	; (57d8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    5776:	78b8      	ldrb	r0, [r7, #2]
    5778:	2808      	cmp	r0, #8
    577a:	d22a      	bcs.n	57d2 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    577c:	2e10      	cmp	r6, #16
    577e:	d105      	bne.n	578c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    5780:	2200      	movs	r2, #0
    5782:	4621      	mov	r1, r4
    5784:	4628      	mov	r0, r5
    5786:	f000 f931 	bl	59ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    578a:	4606      	mov	r6, r0
    578c:	78bc      	ldrb	r4, [r7, #2]
    578e:	2210      	movs	r2, #16
    5790:	1c60      	adds	r0, r4, #1
    5792:	70b8      	strb	r0, [r7, #2]
    5794:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    5798:	1ce8      	adds	r0, r5, #3
    579a:	4649      	mov	r1, r9
    579c:	f008 fa6d 	bl	dc7a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    57a0:	f105 0083 	add.w	r0, r5, #131	; 0x83
    57a4:	2210      	movs	r2, #16
    57a6:	4641      	mov	r1, r8
    57a8:	f008 fa67 	bl	dc7a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    57ac:	2110      	movs	r1, #16
    57ae:	4640      	mov	r0, r8
    57b0:	f008 fac0 	bl	dd34 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    57b4:	443c      	add	r4, r7
    57b6:	2110      	movs	r1, #16
    57b8:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    57bc:	4648      	mov	r0, r9
    57be:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    57c2:	f008 fab7 	bl	dd34 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    57c6:	77e0      	strb	r0, [r4, #31]
    57c8:	f804 6c29 	strb.w	r6, [r4, #-41]
    57cc:	2000      	movs	r0, #0
    57ce:	73e0      	strb	r0, [r4, #15]
    57d0:	e7ce      	b.n	5770 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    57d2:	2007      	movs	r0, #7
    57d4:	e7cc      	b.n	5770 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    57d6:	0000      	.short	0x0000
    57d8:	20001202 	.word	0x20001202

000057dc <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    57dc:	4806      	ldr	r0, [pc, #24]	; (57f8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    57de:	b510      	push	{r4, lr}
    57e0:	7880      	ldrb	r0, [r0, #2]
    57e2:	1e40      	subs	r0, r0, #1
    57e4:	b244      	sxtb	r4, r0
    57e6:	e004      	b.n	57f2 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    57e8:	b2e0      	uxtb	r0, r4
    57ea:	f000 f963 	bl	5ab4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    57ee:	1e64      	subs	r4, r4, #1
    57f0:	b264      	sxtb	r4, r4
    57f2:	2c00      	cmp	r4, #0
    57f4:	daf8      	bge.n	57e8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    57f6:	bd10      	pop	{r4, pc}
    57f8:	20001202 	.word	0x20001202

000057fc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    57fc:	4801      	ldr	r0, [pc, #4]	; (5804 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    57fe:	8840      	ldrh	r0, [r0, #2]
    5800:	4770      	bx	lr
    5802:	0000      	.short	0x0000
    5804:	20000270 	.word	0x20000270

00005808 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    5808:	b138      	cbz	r0, 581a <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    580a:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    580e:	4288      	cmp	r0, r1
    5810:	d803      	bhi.n	581a <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    5812:	4903      	ldr	r1, [pc, #12]	; (5820 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    5814:	8048      	strh	r0, [r1, #2]
    5816:	2001      	movs	r0, #1
    5818:	4770      	bx	lr
    581a:	2000      	movs	r0, #0
    581c:	4770      	bx	lr
    581e:	0000      	.short	0x0000
    5820:	20000270 	.word	0x20000270

00005824 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>:
    5824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5828:	4614      	mov	r4, r2
    582a:	2501      	movs	r5, #1
    582c:	2200      	movs	r2, #0
    582e:	461f      	mov	r7, r3
    5830:	462e      	mov	r6, r5
    5832:	7022      	strb	r2, [r4, #0]
    5834:	f000 f8f6 	bl	5a24 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    5838:	2810      	cmp	r0, #16
    583a:	d024      	beq.n	5886 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    583c:	f8df 8054 	ldr.w	r8, [pc, #84]	; 5894 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x70>
    5840:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
    5844:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    5848:	f001 0101 	and.w	r1, r1, #1
    584c:	7021      	strb	r1, [r4, #0]
    584e:	f000 f8b9 	bl	59c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5852:	4604      	mov	r4, r0
    5854:	2810      	cmp	r0, #16
    5856:	d016      	beq.n	5886 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    5858:	b107      	cbz	r7, 585c <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x38>
    585a:	703c      	strb	r4, [r7, #0]
    585c:	4620      	mov	r0, r4
    585e:	f7ff ff05 	bl	566c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    5862:	b180      	cbz	r0, 5886 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    5864:	f898 1002 	ldrb.w	r1, [r8, #2]
    5868:	4640      	mov	r0, r8
    586a:	42a1      	cmp	r1, r4
    586c:	d903      	bls.n	5876 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x52>
    586e:	1901      	adds	r1, r0, r4
    5870:	f891 614b 	ldrb.w	r6, [r1, #331]	; 0x14b
    5874:	e000      	b.n	5878 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x54>
    5876:	2600      	movs	r6, #0
    5878:	eb08 0004 	add.w	r0, r8, r4
    587c:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5880:	2801      	cmp	r0, #1
    5882:	d004      	beq.n	588e <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x6a>
    5884:	2500      	movs	r5, #0
    5886:	ea45 0006 	orr.w	r0, r5, r6
    588a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    588e:	2501      	movs	r5, #1
    5890:	e7f9      	b.n	5886 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    5892:	0000      	.short	0x0000
    5894:	20001202 	.word	0x20001202

00005898 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    5898:	b570      	push	{r4, r5, r6, lr}
    589a:	460d      	mov	r5, r1
    589c:	4606      	mov	r6, r0
    589e:	f000 f8c1 	bl	5a24 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    58a2:	4c10      	ldr	r4, [pc, #64]	; (58e4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    58a4:	2810      	cmp	r0, #16
    58a6:	d007      	beq.n	58b8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    58a8:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    58ac:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    58b0:	07c9      	lsls	r1, r1, #31
    58b2:	d001      	beq.n	58b8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    58b4:	2001      	movs	r0, #1
    58b6:	bd70      	pop	{r4, r5, r6, pc}
    58b8:	7861      	ldrb	r1, [r4, #1]
    58ba:	2908      	cmp	r1, #8
    58bc:	d210      	bcs.n	58e0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    58be:	2810      	cmp	r0, #16
    58c0:	d008      	beq.n	58d4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    58c2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    58c6:	2101      	movs	r1, #1
    58c8:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    58cc:	7860      	ldrb	r0, [r4, #1]
    58ce:	1c40      	adds	r0, r0, #1
    58d0:	7060      	strb	r0, [r4, #1]
    58d2:	e7ef      	b.n	58b4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    58d4:	2201      	movs	r2, #1
    58d6:	4629      	mov	r1, r5
    58d8:	4630      	mov	r0, r6
    58da:	f000 f887 	bl	59ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    58de:	e7f5      	b.n	58cc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    58e0:	2000      	movs	r0, #0
    58e2:	bd70      	pop	{r4, r5, r6, pc}
    58e4:	20001202 	.word	0x20001202

000058e8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    58e8:	b570      	push	{r4, r5, r6, lr}
    58ea:	4d0b      	ldr	r5, [pc, #44]	; (5918 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    58ec:	7828      	ldrb	r0, [r5, #0]
    58ee:	1e40      	subs	r0, r0, #1
    58f0:	b244      	sxtb	r4, r0
    58f2:	e00a      	b.n	590a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    58f4:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    58f8:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    58fc:	07c0      	lsls	r0, r0, #31
    58fe:	d002      	beq.n	5906 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    5900:	b2e0      	uxtb	r0, r4
    5902:	f000 f91f 	bl	5b44 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    5906:	1e64      	subs	r4, r4, #1
    5908:	b264      	sxtb	r4, r4
    590a:	2c00      	cmp	r4, #0
    590c:	daf2      	bge.n	58f4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    590e:	4903      	ldr	r1, [pc, #12]	; (591c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    5910:	2000      	movs	r0, #0
    5912:	7048      	strb	r0, [r1, #1]
    5914:	bd70      	pop	{r4, r5, r6, pc}
    5916:	0000      	.short	0x0000
    5918:	20001202 	.word	0x20001202
    591c:	20000270 	.word	0x20000270

00005920 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    5920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5924:	2400      	movs	r4, #0
    5926:	4625      	mov	r5, r4
    5928:	4e18      	ldr	r6, [pc, #96]	; (598c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    592a:	e029      	b.n	5980 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    592c:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    5930:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    5934:	07c0      	lsls	r0, r0, #31
    5936:	d021      	beq.n	597c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5938:	4628      	mov	r0, r5
    593a:	f000 f843 	bl	59c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    593e:	4603      	mov	r3, r0
    5940:	f7ff fe94 	bl	566c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    5944:	4601      	mov	r1, r0
    5946:	2000      	movs	r0, #0
    5948:	2b10      	cmp	r3, #16
    594a:	d009      	beq.n	5960 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    594c:	18f2      	adds	r2, r6, r3
    594e:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    5952:	f1bc 0f01 	cmp.w	ip, #1
    5956:	d002      	beq.n	595e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    5958:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    595c:	b102      	cbz	r2, 5960 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    595e:	2001      	movs	r0, #1
    5960:	1e40      	subs	r0, r0, #1
    5962:	4201      	tst	r1, r0
    5964:	d10a      	bne.n	597c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5966:	480a      	ldr	r0, [pc, #40]	; (5990 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    5968:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    596c:	5503      	strb	r3, [r0, r4]
    596e:	4620      	mov	r0, r4
    5970:	1c64      	adds	r4, r4, #1
    5972:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    5976:	b2e4      	uxtb	r4, r4
    5978:	f006 f9b8 	bl	bcec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    597c:	1c6d      	adds	r5, r5, #1
    597e:	b2ed      	uxtb	r5, r5
    5980:	7830      	ldrb	r0, [r6, #0]
    5982:	42a8      	cmp	r0, r5
    5984:	d8d2      	bhi.n	592c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    5986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    598a:	0000      	.short	0x0000
    598c:	20001202 	.word	0x20001202
    5990:	20000274 	.word	0x20000274
    5994:	4602      	mov	r2, r0
    5996:	4809      	ldr	r0, [pc, #36]	; (59bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    5998:	b510      	push	{r4, lr}
    599a:	7800      	ldrb	r0, [r0, #0]
    599c:	460b      	mov	r3, r1
    599e:	b158      	cbz	r0, 59b8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    59a0:	4807      	ldr	r0, [pc, #28]	; (59c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    59a2:	7881      	ldrb	r1, [r0, #2]
    59a4:	b141      	cbz	r1, 59b8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    59a6:	b10b      	cbz	r3, 59ac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    59a8:	1cc0      	adds	r0, r0, #3
    59aa:	e001      	b.n	59b0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    59ac:	4804      	ldr	r0, [pc, #16]	; (59c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    59ae:	3083      	adds	r0, #131	; 0x83
    59b0:	f005 fb36 	bl	b020 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    59b4:	2001      	movs	r0, #1
    59b6:	bd10      	pop	{r4, pc}
    59b8:	2000      	movs	r0, #0
    59ba:	bd10      	pop	{r4, pc}
    59bc:	20000270 	.word	0x20000270
    59c0:	20001202 	.word	0x20001202
    59c4:	4908      	ldr	r1, [pc, #32]	; (59e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    59c6:	b510      	push	{r4, lr}
    59c8:	4603      	mov	r3, r0
    59ca:	2000      	movs	r0, #0
    59cc:	788a      	ldrb	r2, [r1, #2]
    59ce:	e006      	b.n	59de <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    59d0:	180c      	adds	r4, r1, r0
    59d2:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    59d6:	429c      	cmp	r4, r3
    59d8:	d004      	beq.n	59e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    59da:	1c40      	adds	r0, r0, #1
    59dc:	b2c0      	uxtb	r0, r0
    59de:	4282      	cmp	r2, r0
    59e0:	d8f6      	bhi.n	59d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    59e2:	2010      	movs	r0, #16
    59e4:	bd10      	pop	{r4, pc}
    59e6:	0000      	.short	0x0000
    59e8:	20001202 	.word	0x20001202
    59ec:	b570      	push	{r4, r5, r6, lr}
    59ee:	4b0c      	ldr	r3, [pc, #48]	; (5a20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    59f0:	4604      	mov	r4, r0
    59f2:	7818      	ldrb	r0, [r3, #0]
    59f4:	1c45      	adds	r5, r0, #1
    59f6:	701d      	strb	r5, [r3, #0]
    59f8:	2810      	cmp	r0, #16
    59fa:	d303      	bcc.n	5a04 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    59fc:	2146      	movs	r1, #70	; 0x46
    59fe:	2028      	movs	r0, #40	; 0x28
    5a00:	f7fe f9ac 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a04:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    5a08:	680d      	ldr	r5, [r1, #0]
    5a0a:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    5a0e:	8889      	ldrh	r1, [r1, #4]
    5a10:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    5a14:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    5a18:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    5a1c:	bd70      	pop	{r4, r5, r6, pc}
    5a1e:	0000      	.short	0x0000
    5a20:	20001202 	.word	0x20001202
    5a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a28:	460f      	mov	r7, r1
    5a2a:	4606      	mov	r6, r0
    5a2c:	2400      	movs	r4, #0
    5a2e:	4d0d      	ldr	r5, [pc, #52]	; (5a64 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>)
    5a30:	e00f      	b.n	5a52 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    5a32:	bf00      	nop
    5a34:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5a38:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    5a3c:	42b1      	cmp	r1, r6
    5a3e:	d106      	bne.n	5a4e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12e>
    5a40:	2206      	movs	r2, #6
    5a42:	4639      	mov	r1, r7
    5a44:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    5a48:	f006 fd74 	bl	c534 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5a4c:	b138      	cbz	r0, 5a5e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    5a4e:	1c64      	adds	r4, r4, #1
    5a50:	b2e4      	uxtb	r4, r4
    5a52:	7828      	ldrb	r0, [r5, #0]
    5a54:	42a0      	cmp	r0, r4
    5a56:	d8ed      	bhi.n	5a34 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x114>
    5a58:	2010      	movs	r0, #16
    5a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a5e:	4620      	mov	r0, r4
    5a60:	e7fb      	b.n	5a5a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13a>
    5a62:	0000      	.short	0x0000
    5a64:	20001202 	.word	0x20001202
    5a68:	b570      	push	{r4, r5, r6, lr}
    5a6a:	4605      	mov	r5, r0
    5a6c:	f7ff ffaa 	bl	59c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5a70:	2810      	cmp	r0, #16
    5a72:	d11c      	bne.n	5aae <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5a74:	4c0e      	ldr	r4, [pc, #56]	; (5ab0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>)
    5a76:	7820      	ldrb	r0, [r4, #0]
    5a78:	1e40      	subs	r0, r0, #1
    5a7a:	b2c0      	uxtb	r0, r0
    5a7c:	7020      	strb	r0, [r4, #0]
    5a7e:	42a8      	cmp	r0, r5
    5a80:	d015      	beq.n	5aae <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5a82:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    5a86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    5a8a:	f502 7080 	add.w	r0, r2, #256	; 0x100
    5a8e:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    5a92:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    5a96:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    5a9a:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    5a9e:	7820      	ldrb	r0, [r4, #0]
    5aa0:	f7ff ff90 	bl	59c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5aa4:	2810      	cmp	r0, #16
    5aa6:	d002      	beq.n	5aae <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5aa8:	4420      	add	r0, r4
    5aaa:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    5aae:	bd70      	pop	{r4, r5, r6, pc}
    5ab0:	20001202 	.word	0x20001202
    5ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5ab8:	4c21      	ldr	r4, [pc, #132]	; (5b40 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>)
    5aba:	4606      	mov	r6, r0
    5abc:	19a7      	adds	r7, r4, r6
    5abe:	78a0      	ldrb	r0, [r4, #2]
    5ac0:	1e40      	subs	r0, r0, #1
    5ac2:	b2c5      	uxtb	r5, r0
    5ac4:	70a5      	strb	r5, [r4, #2]
    5ac6:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    5aca:	42ae      	cmp	r6, r5
    5acc:	d02a      	beq.n	5b24 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x204>
    5ace:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    5ad2:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    5ad6:	f10a 0103 	add.w	r1, sl, #3
    5ada:	f109 0003 	add.w	r0, r9, #3
    5ade:	2210      	movs	r2, #16
    5ae0:	f006 fd3a 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5ae4:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    5ae8:	f109 0083 	add.w	r0, r9, #131	; 0x83
    5aec:	2210      	movs	r2, #16
    5aee:	f006 fd33 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5af2:	1960      	adds	r0, r4, r5
    5af4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    5af8:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5afc:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    5b00:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    5b04:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    5b08:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    5b0c:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    5b10:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    5b14:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    5b18:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    5b1c:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5b20:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    5b24:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    5b28:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5b2c:	07c0      	lsls	r0, r0, #31
    5b2e:	d104      	bne.n	5b3a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21a>
    5b30:	4640      	mov	r0, r8
    5b32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b36:	f7ff bf97 	b.w	5a68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    5b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b3e:	0000      	.short	0x0000
    5b40:	20001202 	.word	0x20001202
    5b44:	4905      	ldr	r1, [pc, #20]	; (5b5c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x23c>)
    5b46:	784a      	ldrb	r2, [r1, #1]
    5b48:	1e52      	subs	r2, r2, #1
    5b4a:	704a      	strb	r2, [r1, #1]
    5b4c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    5b50:	2200      	movs	r2, #0
    5b52:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    5b56:	f7ff bf87 	b.w	5a68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    5b5a:	0000      	.short	0x0000
    5b5c:	20001202 	.word	0x20001202

00005b60 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>:
    5b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b64:	4604      	mov	r4, r0
    5b66:	f100 0778 	add.w	r7, r0, #120	; 0x78
    5b6a:	b171      	cbz	r1, 5b8a <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x2a>
    5b6c:	f104 068e 	add.w	r6, r4, #142	; 0x8e
    5b70:	1e75      	subs	r5, r6, #1
    5b72:	2901      	cmp	r1, #1
    5b74:	d016      	beq.n	5ba4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x44>
    5b76:	2902      	cmp	r1, #2
    5b78:	d025      	beq.n	5bc6 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x66>
    5b7a:	2903      	cmp	r1, #3
    5b7c:	d110      	bne.n	5ba0 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x40>
    5b7e:	4631      	mov	r1, r6
    5b80:	4628      	mov	r0, r5
    5b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5b86:	f008 b927 	b.w	ddd8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    5b8a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    5b8e:	2100      	movs	r1, #0
    5b90:	f006 fd5c 	bl	c64c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5b94:	4638      	mov	r0, r7
    5b96:	f008 f8dc 	bl	dd52 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    5b9a:	2020      	movs	r0, #32
    5b9c:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    5ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ba4:	68e1      	ldr	r1, [r4, #12]
    5ba6:	480d      	ldr	r0, [pc, #52]	; (5bdc <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x7c>)
    5ba8:	460a      	mov	r2, r1
    5baa:	4408      	add	r0, r1
    5bac:	fbb0 f0f1 	udiv	r0, r0, r1
    5bb0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    5bb4:	f640 30b8 	movw	r0, #3000	; 0xbb8
    5bb8:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
    5bbc:	8ae3      	ldrh	r3, [r4, #22]
    5bbe:	4638      	mov	r0, r7
    5bc0:	f000 f80e 	bl	5be0 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    5bc4:	e7db      	b.n	5b7e <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x1e>
    5bc6:	68c1      	ldr	r1, [r0, #12]
    5bc8:	f8b4 3156 	ldrh.w	r3, [r4, #342]	; 0x156
    5bcc:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    5bd0:	4638      	mov	r0, r7
    5bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5bd6:	f000 b803 	b.w	5be0 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    5bda:	0000      	.short	0x0000
    5bdc:	01c9c37f 	.word	0x01c9c37f
    5be0:	b530      	push	{r4, r5, lr}
    5be2:	2400      	movs	r4, #0
    5be4:	86c4      	strh	r4, [r0, #54]	; 0x36
    5be6:	8f44      	ldrh	r4, [r0, #58]	; 0x3a
    5be8:	4d13      	ldr	r5, [pc, #76]	; (5c38 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd8>)
    5bea:	434c      	muls	r4, r1
    5bec:	fbb4 f4f2 	udiv	r4, r4, r2
    5bf0:	8744      	strh	r4, [r0, #58]	; 0x3a
    5bf2:	f242 7410 	movw	r4, #10000	; 0x2710
    5bf6:	4363      	muls	r3, r4
    5bf8:	fbb3 f3f2 	udiv	r3, r3, r2
    5bfc:	1c5b      	adds	r3, r3, #1
    5bfe:	b29b      	uxth	r3, r3
    5c00:	fb03 f402 	mul.w	r4, r3, r2
    5c04:	8703      	strh	r3, [r0, #56]	; 0x38
    5c06:	42ac      	cmp	r4, r5
    5c08:	d901      	bls.n	5c0e <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xae>
    5c0a:	1e5b      	subs	r3, r3, #1
    5c0c:	8703      	strh	r3, [r0, #56]	; 0x38
    5c0e:	4b0b      	ldr	r3, [pc, #44]	; (5c3c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xdc>)
    5c10:	f240 2471 	movw	r4, #625	; 0x271
    5c14:	fbb3 f3f2 	udiv	r3, r3, r2
    5c18:	1c5b      	adds	r3, r3, #1
    5c1a:	87c3      	strh	r3, [r0, #62]	; 0x3e
    5c1c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    5c1e:	4363      	muls	r3, r4
    5c20:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    5c24:	1e5b      	subs	r3, r3, #1
    5c26:	fbb3 f3f2 	udiv	r3, r3, r2
    5c2a:	62c3      	str	r3, [r0, #44]	; 0x2c
    5c2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
    5c2e:	434b      	muls	r3, r1
    5c30:	fbb3 f1f2 	udiv	r1, r3, r2
    5c34:	6281      	str	r1, [r0, #40]	; 0x28
    5c36:	bd30      	pop	{r4, r5, pc}
    5c38:	01e84800 	.word	0x01e84800
    5c3c:	02625a00 	.word	0x02625a00

00005c40 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    5c40:	4909      	ldr	r1, [pc, #36]	; (5c68 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    5c42:	b508      	push	{r3, lr}
    5c44:	7809      	ldrb	r1, [r1, #0]
    5c46:	f88d 1000 	strb.w	r1, [sp]
    5c4a:	9900      	ldr	r1, [sp, #0]
    5c4c:	9100      	str	r1, [sp, #0]
    5c4e:	f89d 1000 	ldrb.w	r1, [sp]
    5c52:	b109      	cbz	r1, 5c58 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x18>
    5c54:	2000      	movs	r0, #0
    5c56:	bd08      	pop	{r3, pc}
    5c58:	4903      	ldr	r1, [pc, #12]	; (5c68 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    5c5a:	f8d1 2001 	ldr.w	r2, [r1, #1]
    5c5e:	6002      	str	r2, [r0, #0]
    5c60:	7949      	ldrb	r1, [r1, #5]
    5c62:	7101      	strb	r1, [r0, #4]
    5c64:	2001      	movs	r0, #1
    5c66:	bd08      	pop	{r3, pc}
    5c68:	20000297 	.word	0x20000297

00005c6c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
    5c6c:	4905      	ldr	r1, [pc, #20]	; (5c84 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
    5c6e:	2201      	movs	r2, #1
    5c70:	700a      	strb	r2, [r1, #0]
    5c72:	460a      	mov	r2, r1
    5c74:	6803      	ldr	r3, [r0, #0]
    5c76:	f8c2 3001 	str.w	r3, [r2, #1]
    5c7a:	7900      	ldrb	r0, [r0, #4]
    5c7c:	7150      	strb	r0, [r2, #5]
    5c7e:	2000      	movs	r0, #0
    5c80:	7008      	strb	r0, [r1, #0]
    5c82:	4770      	bx	lr
    5c84:	20000297 	.word	0x20000297

00005c88 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    5c88:	b570      	push	{r4, r5, r6, lr}
    5c8a:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    5c8e:	b28b      	uxth	r3, r1
    5c90:	7ac5      	ldrb	r5, [r0, #11]
    5c92:	ea83 0102 	eor.w	r1, r3, r2
    5c96:	2200      	movs	r2, #0
    5c98:	b2cc      	uxtb	r4, r1
    5c9a:	0a09      	lsrs	r1, r1, #8
    5c9c:	fa94 f4a4 	rbit	r4, r4
    5ca0:	fa91 f1a1 	rbit	r1, r1
    5ca4:	0e24      	lsrs	r4, r4, #24
    5ca6:	0e09      	lsrs	r1, r1, #24
    5ca8:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    5cac:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    5cb0:	1c52      	adds	r2, r2, #1
    5cb2:	4419      	add	r1, r3
    5cb4:	b2d2      	uxtb	r2, r2
    5cb6:	b289      	uxth	r1, r1
    5cb8:	2a03      	cmp	r2, #3
    5cba:	d3ed      	bcc.n	5c98 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    5cbc:	4059      	eors	r1, r3
    5cbe:	2225      	movs	r2, #37	; 0x25
    5cc0:	fbb1 f3f2 	udiv	r3, r1, r2
    5cc4:	fb02 1213 	mls	r2, r2, r3, r1
    5cc8:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    5ccc:	f002 0607 	and.w	r6, r2, #7
    5cd0:	785b      	ldrb	r3, [r3, #1]
    5cd2:	2401      	movs	r4, #1
    5cd4:	fa04 f606 	lsl.w	r6, r4, r6
    5cd8:	4233      	tst	r3, r6
    5cda:	d001      	beq.n	5ce0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    5cdc:	4610      	mov	r0, r2
    5cde:	bd70      	pop	{r4, r5, r6, pc}
    5ce0:	434d      	muls	r5, r1
    5ce2:	0c29      	lsrs	r1, r5, #16
    5ce4:	1c49      	adds	r1, r1, #1
    5ce6:	b2c9      	uxtb	r1, r1
    5ce8:	2200      	movs	r2, #0
    5cea:	1885      	adds	r5, r0, r2
    5cec:	79ab      	ldrb	r3, [r5, #6]
    5cee:	428b      	cmp	r3, r1
    5cf0:	d312      	bcc.n	5d18 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    5cf2:	f895 5001 	ldrb.w	r5, [r5, #1]
    5cf6:	2300      	movs	r3, #0
    5cf8:	fa04 f603 	lsl.w	r6, r4, r3
    5cfc:	4235      	tst	r5, r6
    5cfe:	d001      	beq.n	5d04 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    5d00:	1e49      	subs	r1, r1, #1
    5d02:	b2c9      	uxtb	r1, r1
    5d04:	b121      	cbz	r1, 5d10 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    5d06:	1c5b      	adds	r3, r3, #1
    5d08:	b2db      	uxtb	r3, r3
    5d0a:	2b08      	cmp	r3, #8
    5d0c:	d3f4      	bcc.n	5cf8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    5d0e:	e005      	b.n	5d1c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    5d10:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    5d14:	b2c0      	uxtb	r0, r0
    5d16:	bd70      	pop	{r4, r5, r6, pc}
    5d18:	1ac9      	subs	r1, r1, r3
    5d1a:	b2c9      	uxtb	r1, r1
    5d1c:	1c52      	adds	r2, r2, #1
    5d1e:	b2d2      	uxtb	r2, r2
    5d20:	2a05      	cmp	r2, #5
    5d22:	d3e2      	bcc.n	5cea <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    5d24:	f240 110d 	movw	r1, #269	; 0x10d
    5d28:	2046      	movs	r0, #70	; 0x46
    5d2a:	f7fe f817 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d2e:	0000      	movs	r0, r0
    5d30:	b570      	push	{r4, r5, r6, lr}
    5d32:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    5d36:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    5d3a:	2401      	movs	r4, #1
    5d3c:	fb03 2101 	mla	r1, r3, r1, r2
    5d40:	2225      	movs	r2, #37	; 0x25
    5d42:	fbb1 f3f2 	udiv	r3, r1, r2
    5d46:	fb02 1113 	mls	r1, r2, r3, r1
    5d4a:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    5d4e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    5d52:	f001 0307 	and.w	r3, r1, #7
    5d56:	7d92      	ldrb	r2, [r2, #22]
    5d58:	fa04 f303 	lsl.w	r3, r4, r3
    5d5c:	421a      	tst	r2, r3
    5d5e:	d003      	beq.n	5d68 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    5d60:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    5d64:	2000      	movs	r0, #0
    5d66:	bd70      	pop	{r4, r5, r6, pc}
    5d68:	f890 2020 	ldrb.w	r2, [r0, #32]
    5d6c:	fbb1 f3f2 	udiv	r3, r1, r2
    5d70:	fb02 1113 	mls	r1, r2, r3, r1
    5d74:	1c49      	adds	r1, r1, #1
    5d76:	b2c9      	uxtb	r1, r1
    5d78:	2300      	movs	r3, #0
    5d7a:	18c5      	adds	r5, r0, r3
    5d7c:	7eea      	ldrb	r2, [r5, #27]
    5d7e:	428a      	cmp	r2, r1
    5d80:	d311      	bcc.n	5da6 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    5d82:	f895 5016 	ldrb.w	r5, [r5, #22]
    5d86:	2200      	movs	r2, #0
    5d88:	fa04 f602 	lsl.w	r6, r4, r2
    5d8c:	4235      	tst	r5, r6
    5d8e:	d001      	beq.n	5d94 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    5d90:	1e49      	subs	r1, r1, #1
    5d92:	b2c9      	uxtb	r1, r1
    5d94:	b121      	cbz	r1, 5da0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    5d96:	1c52      	adds	r2, r2, #1
    5d98:	b2d2      	uxtb	r2, r2
    5d9a:	2a08      	cmp	r2, #8
    5d9c:	d3f4      	bcc.n	5d88 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    5d9e:	e004      	b.n	5daa <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    5da0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    5da4:	e7dc      	b.n	5d60 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    5da6:	1a89      	subs	r1, r1, r2
    5da8:	b2c9      	uxtb	r1, r1
    5daa:	1c5b      	adds	r3, r3, #1
    5dac:	b2db      	uxtb	r3, r3
    5dae:	2b05      	cmp	r3, #5
    5db0:	d3e3      	bcc.n	5d7a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    5db2:	201f      	movs	r0, #31
    5db4:	bd70      	pop	{r4, r5, r6, pc}
	...

00005db8 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    5db8:	7841      	ldrb	r1, [r0, #1]
    5dba:	b141      	cbz	r1, 5dce <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5dbc:	78c0      	ldrb	r0, [r0, #3]
    5dbe:	2819      	cmp	r0, #25
    5dc0:	d203      	bcs.n	5dca <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    5dc2:	4a04      	ldr	r2, [pc, #16]	; (5dd4 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    5dc4:	5c10      	ldrb	r0, [r2, r0]
    5dc6:	4288      	cmp	r0, r1
    5dc8:	d101      	bne.n	5dce <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5dca:	2001      	movs	r0, #1
    5dcc:	4770      	bx	lr
    5dce:	2000      	movs	r0, #0
    5dd0:	4770      	bx	lr
    5dd2:	0000      	.short	0x0000
    5dd4:	0000fb02 	.word	0x0000fb02

00005dd8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    5dd8:	b510      	push	{r4, lr}
    5dda:	2201      	movs	r2, #1
    5ddc:	70c1      	strb	r1, [r0, #3]
    5dde:	2919      	cmp	r1, #25
    5de0:	d202      	bcs.n	5de8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    5de2:	4a06      	ldr	r2, [pc, #24]	; (5dfc <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    5de4:	5c52      	ldrb	r2, [r2, r1]
    5de6:	e006      	b.n	5df6 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5de8:	29ff      	cmp	r1, #255	; 0xff
    5dea:	d004      	beq.n	5df6 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5dec:	f240 31d5 	movw	r1, #981	; 0x3d5
    5df0:	202a      	movs	r0, #42	; 0x2a
    5df2:	f7fd ffb3 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5df6:	7042      	strb	r2, [r0, #1]
    5df8:	bd10      	pop	{r4, pc}
    5dfa:	0000      	.short	0x0000
    5dfc:	0000fb02 	.word	0x0000fb02

00005e00 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    5e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e04:	4c12      	ldr	r4, [pc, #72]	; (5e50 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5e06:	4607      	mov	r7, r0
    5e08:	460e      	mov	r6, r1
    5e0a:	7da0      	ldrb	r0, [r4, #22]
    5e0c:	b110      	cbz	r0, 5e14 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    5e0e:	8b20      	ldrh	r0, [r4, #24]
    5e10:	2800      	cmp	r0, #0
    5e12:	d012      	beq.n	5e3a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    5e14:	480e      	ldr	r0, [pc, #56]	; (5e50 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5e16:	3014      	adds	r0, #20
    5e18:	4680      	mov	r8, r0
    5e1a:	f008 f90e 	bl	e03a <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5e1e:	b9a8      	cbnz	r0, 5e4c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5e20:	8aa5      	ldrh	r5, [r4, #20]
    5e22:	8aa0      	ldrh	r0, [r4, #20]
    5e24:	4632      	mov	r2, r6
    5e26:	4639      	mov	r1, r7
    5e28:	f008 f93f 	bl	e0aa <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
    5e2c:	b138      	cbz	r0, 5e3e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    5e2e:	7da0      	ldrb	r0, [r4, #22]
    5e30:	b110      	cbz	r0, 5e38 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    5e32:	8b20      	ldrh	r0, [r4, #24]
    5e34:	1e40      	subs	r0, r0, #1
    5e36:	8320      	strh	r0, [r4, #24]
    5e38:	2001      	movs	r0, #1
    5e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e3e:	4640      	mov	r0, r8
    5e40:	f008 f8fb 	bl	e03a <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5e44:	b910      	cbnz	r0, 5e4c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5e46:	8aa0      	ldrh	r0, [r4, #20]
    5e48:	42a8      	cmp	r0, r5
    5e4a:	d1ea      	bne.n	5e22 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    5e4c:	2000      	movs	r0, #0
    5e4e:	e7f4      	b.n	5e3a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    5e50:	20001064 	.word	0x20001064
    5e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5e58:	468a      	mov	sl, r1
    5e5a:	4699      	mov	r9, r3
    5e5c:	4615      	mov	r5, r2
    5e5e:	4604      	mov	r4, r0
    5e60:	a901      	add	r1, sp, #4
    5e62:	f007 fd84 	bl	d96e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    5e66:	bbd8      	cbnz	r0, 5ee0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe0>
    5e68:	9f02      	ldr	r7, [sp, #8]
    5e6a:	2001      	movs	r0, #1
    5e6c:	3778      	adds	r7, #120	; 0x78
    5e6e:	b18d      	cbz	r5, 5e94 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x94>
    5e70:	4620      	mov	r0, r4
    5e72:	f7fe fb87 	bl	4584 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5e76:	0004      	movs	r4, r0
    5e78:	d00e      	beq.n	5e98 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x98>
    5e7a:	4629      	mov	r1, r5
    5e7c:	f007 fa6f 	bl	d35e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    5e80:	0006      	movs	r6, r0
    5e82:	d003      	beq.n	5e8c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8c>
    5e84:	4819      	ldr	r0, [pc, #100]	; (5eec <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xec>)
    5e86:	8840      	ldrh	r0, [r0, #2]
    5e88:	42a8      	cmp	r0, r5
    5e8a:	d207      	bcs.n	5e9c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
    5e8c:	2000      	movs	r0, #0
    5e8e:	b004      	add	sp, #16
    5e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e94:	7538      	strb	r0, [r7, #20]
    5e96:	e023      	b.n	5ee0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe0>
    5e98:	216e      	movs	r1, #110	; 0x6e
    5e9a:	e024      	b.n	5ee6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe6>
    5e9c:	4620      	mov	r0, r4
    5e9e:	4631      	mov	r1, r6
    5ea0:	aa03      	add	r2, sp, #12
    5ea2:	f007 fa55 	bl	d350 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    5ea6:	9803      	ldr	r0, [sp, #12]
    5ea8:	f04f 0800 	mov.w	r8, #0
    5eac:	f8a0 8000 	strh.w	r8, [r0]
    5eb0:	f880 8002 	strb.w	r8, [r0, #2]
    5eb4:	7d39      	ldrb	r1, [r7, #20]
    5eb6:	b109      	cbz	r1, 5ebc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
    5eb8:	f04f 0a02 	mov.w	sl, #2
    5ebc:	4651      	mov	r1, sl
    5ebe:	f008 f836 	bl	df2e <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5ec2:	4631      	mov	r1, r6
    5ec4:	2603      	movs	r6, #3
    5ec6:	4620      	mov	r0, r4
    5ec8:	464a      	mov	r2, r9
    5eca:	462b      	mov	r3, r5
    5ecc:	9600      	str	r6, [sp, #0]
    5ece:	f007 f8fc 	bl	d0ca <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    5ed2:	4620      	mov	r0, r4
    5ed4:	4629      	mov	r1, r5
    5ed6:	f007 f9d1 	bl	d27c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    5eda:	b118      	cbz	r0, 5ee4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
    5edc:	f887 8014 	strb.w	r8, [r7, #20]
    5ee0:	2001      	movs	r0, #1
    5ee2:	e7d4      	b.n	5e8e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
    5ee4:	2184      	movs	r1, #132	; 0x84
    5ee6:	202b      	movs	r0, #43	; 0x2b
    5ee8:	f7fd ff38 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5eec:	20001064 	.word	0x20001064

00005ef0 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    5ef0:	4901      	ldr	r1, [pc, #4]	; (5ef8 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
    5ef2:	2001      	movs	r0, #1
    5ef4:	7008      	strb	r0, [r1, #0]
    5ef6:	4770      	bx	lr
    5ef8:	2000027d 	.word	0x2000027d

00005efc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    5efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5f00:	0006      	movs	r6, r0
    5f02:	d00a      	beq.n	5f1a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
    5f04:	4926      	ldr	r1, [pc, #152]	; (5fa0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    5f06:	2201      	movs	r2, #1
    5f08:	7808      	ldrb	r0, [r1, #0]
    5f0a:	b148      	cbz	r0, 5f20 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    5f0c:	2000      	movs	r0, #0
    5f0e:	7070      	strb	r0, [r6, #1]
    5f10:	2303      	movs	r3, #3
    5f12:	7033      	strb	r3, [r6, #0]
    5f14:	7132      	strb	r2, [r6, #4]
    5f16:	7008      	strb	r0, [r1, #0]
    5f18:	e03c      	b.n	5f94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x98>
    5f1a:	f240 21da 	movw	r1, #730	; 0x2da
    5f1e:	e009      	b.n	5f34 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    5f20:	4c1f      	ldr	r4, [pc, #124]	; (5fa0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    5f22:	1ce4      	adds	r4, r4, #3
    5f24:	7820      	ldrb	r0, [r4, #0]
    5f26:	b940      	cbnz	r0, 5f3a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    5f28:	1ca0      	adds	r0, r4, #2
    5f2a:	f008 f907 	bl	e13c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    5f2e:	b120      	cbz	r0, 5f3a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    5f30:	f240 21e9 	movw	r1, #745	; 0x2e9
    5f34:	2010      	movs	r0, #16
    5f36:	f7fd ff11 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f3a:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    5f3e:	2000      	movs	r0, #0
    5f40:	f7fe f8f0 	bl	4124 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    5f44:	4f17      	ldr	r7, [pc, #92]	; (5fa4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>)
    5f46:	f8df 9060 	ldr.w	r9, [pc, #96]	; 5fa8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>
    5f4a:	4605      	mov	r5, r0
    5f4c:	6838      	ldr	r0, [r7, #0]
    5f4e:	b130      	cbz	r0, 5f5e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    5f50:	8860      	ldrh	r0, [r4, #2]
    5f52:	42a8      	cmp	r0, r5
    5f54:	d103      	bne.n	5f5e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    5f56:	4630      	mov	r0, r6
    5f58:	f000 f9d2 	bl	6300 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2f8>
    5f5c:	e006      	b.n	5f6c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x70>
    5f5e:	f8d9 0000 	ldr.w	r0, [r9]
    5f62:	b120      	cbz	r0, 5f6e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x72>
    5f64:	8860      	ldrh	r0, [r4, #2]
    5f66:	4631      	mov	r1, r6
    5f68:	f000 f920 	bl	61ac <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1a4>
    5f6c:	b990      	cbnz	r0, 5f94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x98>
    5f6e:	1ca0      	adds	r0, r4, #2
    5f70:	f008 f8e4 	bl	e13c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    5f74:	b910      	cbnz	r0, 5f7c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
    5f76:	8861      	ldrh	r1, [r4, #2]
    5f78:	4541      	cmp	r1, r8
    5f7a:	d1e7      	bne.n	5f4c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x50>
    5f7c:	480b      	ldr	r0, [pc, #44]	; (5fac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb0>)
    5f7e:	6801      	ldr	r1, [r0, #0]
    5f80:	b111      	cbz	r1, 5f88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8c>
    5f82:	4630      	mov	r0, r6
    5f84:	4788      	blx	r1
    5f86:	b928      	cbnz	r0, 5f94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x98>
    5f88:	4809      	ldr	r0, [pc, #36]	; (5fb0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>)
    5f8a:	6801      	ldr	r1, [r0, #0]
    5f8c:	b129      	cbz	r1, 5f9a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    5f8e:	4630      	mov	r0, r6
    5f90:	4788      	blx	r1
    5f92:	b110      	cbz	r0, 5f9a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    5f94:	2001      	movs	r0, #1
    5f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5f9a:	2000      	movs	r0, #0
    5f9c:	e7fb      	b.n	5f96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    5f9e:	0000      	.short	0x0000
    5fa0:	2000027d 	.word	0x2000027d
    5fa4:	200000f4 	.word	0x200000f4
    5fa8:	200000f0 	.word	0x200000f0
    5fac:	200000f8 	.word	0x200000f8
    5fb0:	200000ec 	.word	0x200000ec

00005fb4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    5fb4:	4901      	ldr	r1, [pc, #4]	; (5fbc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    5fb6:	7008      	strb	r0, [r1, #0]
    5fb8:	f000 b996 	b.w	62e8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2e0>
    5fbc:	2000027c 	.word	0x2000027c

00005fc0 <sym_QG7T3WZZ6IR4SNPFZNDFKFWZROS2N7DDO6SYZAA>:
    5fc0:	4902      	ldr	r1, [pc, #8]	; (5fcc <sym_QG7T3WZZ6IR4SNPFZNDFKFWZROS2N7DDO6SYZAA+0xc>)
    5fc2:	2001      	movs	r0, #1
    5fc4:	7048      	strb	r0, [r1, #1]
    5fc6:	f000 b809 	b.w	5fdc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5fca:	0000      	.short	0x0000
    5fcc:	2000027d 	.word	0x2000027d

00005fd0 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY>:
    5fd0:	4801      	ldr	r0, [pc, #4]	; (5fd8 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY+0x8>)
    5fd2:	7840      	ldrb	r0, [r0, #1]
    5fd4:	4770      	bx	lr
    5fd6:	0000      	.short	0x0000
    5fd8:	2000027d 	.word	0x2000027d

00005fdc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    5fdc:	4801      	ldr	r0, [pc, #4]	; (5fe4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    5fde:	7800      	ldrb	r0, [r0, #0]
    5fe0:	f7fd bcac 	b.w	393c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5fe4:	2000027c 	.word	0x2000027c

00005fe8 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>:
    5fe8:	4904      	ldr	r1, [pc, #16]	; (5ffc <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x14>)
    5fea:	4803      	ldr	r0, [pc, #12]	; (5ff8 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x10>)
    5fec:	6008      	str	r0, [r1, #0]
    5fee:	4905      	ldr	r1, [pc, #20]	; (6004 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x1c>)
    5ff0:	4803      	ldr	r0, [pc, #12]	; (6000 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x18>)
    5ff2:	6008      	str	r0, [r1, #0]
    5ff4:	4770      	bx	lr
    5ff6:	0000      	.short	0x0000
    5ff8:	00008879 	.word	0x00008879
    5ffc:	200000f0 	.word	0x200000f0
    6000:	00004a85 	.word	0x00004a85
    6004:	200000f8 	.word	0x200000f8

00006008 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q>:
    6008:	4902      	ldr	r1, [pc, #8]	; (6014 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc>)
    600a:	4801      	ldr	r0, [pc, #4]	; (6010 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x8>)
    600c:	6008      	str	r0, [r1, #0]
    600e:	4770      	bx	lr
    6010:	0000656d 	.word	0x0000656d
    6014:	200000f4 	.word	0x200000f4
    6018:	b570      	push	{r4, r5, r6, lr}
    601a:	4604      	mov	r4, r0
    601c:	7800      	ldrb	r0, [r0, #0]
    601e:	2805      	cmp	r0, #5
    6020:	d001      	beq.n	6026 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e>
    6022:	216d      	movs	r1, #109	; 0x6d
    6024:	e056      	b.n	60d4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xcc>
    6026:	7ba0      	ldrb	r0, [r4, #14]
    6028:	06c0      	lsls	r0, r0, #27
    602a:	d401      	bmi.n	6030 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x28>
    602c:	216e      	movs	r1, #110	; 0x6e
    602e:	e051      	b.n	60d4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xcc>
    6030:	221c      	movs	r2, #28
    6032:	1d21      	adds	r1, r4, #4
    6034:	482d      	ldr	r0, [pc, #180]	; (60ec <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    6036:	f006 fa8f 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    603a:	482c      	ldr	r0, [pc, #176]	; (60ec <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    603c:	7b22      	ldrb	r2, [r4, #12]
    603e:	f104 0120 	add.w	r1, r4, #32
    6042:	301c      	adds	r0, #28
    6044:	f006 fa88 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6048:	4828      	ldr	r0, [pc, #160]	; (60ec <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    604a:	f04f 0201 	mov.w	r2, #1
    604e:	7a81      	ldrb	r1, [r0, #10]
    6050:	0749      	lsls	r1, r1, #29
    6052:	d502      	bpl.n	605a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x52>
    6054:	7cc1      	ldrb	r1, [r0, #19]
    6056:	29fe      	cmp	r1, #254	; 0xfe
    6058:	d00c      	beq.n	6074 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x6c>
    605a:	2304      	movs	r3, #4
    605c:	7023      	strb	r3, [r4, #0]
    605e:	6801      	ldr	r1, [r0, #0]
    6060:	6061      	str	r1, [r4, #4]
    6062:	6841      	ldr	r1, [r0, #4]
    6064:	60a1      	str	r1, [r4, #8]
    6066:	8901      	ldrh	r1, [r0, #8]
    6068:	81a1      	strh	r1, [r4, #12]
    606a:	7a81      	ldrb	r1, [r0, #10]
    606c:	070d      	lsls	r5, r1, #28
    606e:	d519      	bpl.n	60a4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x9c>
    6070:	73a3      	strb	r3, [r4, #14]
    6072:	e02b      	b.n	60cc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc4>
    6074:	2113      	movs	r1, #19
    6076:	7021      	strb	r1, [r4, #0]
    6078:	7801      	ldrb	r1, [r0, #0]
    607a:	7121      	strb	r1, [r4, #4]
    607c:	7162      	strb	r2, [r4, #5]
    607e:	7841      	ldrb	r1, [r0, #1]
    6080:	71a1      	strb	r1, [r4, #6]
    6082:	f8d0 1002 	ldr.w	r1, [r0, #2]
    6086:	f8c4 1007 	str.w	r1, [r4, #7]
    608a:	88c1      	ldrh	r1, [r0, #6]
    608c:	f8a4 100b 	strh.w	r1, [r4, #11]
    6090:	21fe      	movs	r1, #254	; 0xfe
    6092:	7361      	strb	r1, [r4, #13]
    6094:	6941      	ldr	r1, [r0, #20]
    6096:	f8c4 100e 	str.w	r1, [r4, #14]
    609a:	8b01      	ldrh	r1, [r0, #24]
    609c:	8261      	strh	r1, [r4, #18]
    609e:	7a40      	ldrb	r0, [r0, #9]
    60a0:	7520      	strb	r0, [r4, #20]
    60a2:	bd70      	pop	{r4, r5, r6, pc}
    60a4:	07cb      	lsls	r3, r1, #31
    60a6:	d003      	beq.n	60b0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xa8>
    60a8:	078b      	lsls	r3, r1, #30
    60aa:	d501      	bpl.n	60b0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xa8>
    60ac:	2100      	movs	r1, #0
    60ae:	e00c      	b.n	60ca <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc2>
    60b0:	074b      	lsls	r3, r1, #29
    60b2:	d501      	bpl.n	60b8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xb0>
    60b4:	73a2      	strb	r2, [r4, #14]
    60b6:	e009      	b.n	60cc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc4>
    60b8:	07ca      	lsls	r2, r1, #31
    60ba:	d001      	beq.n	60c0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xb8>
    60bc:	21b5      	movs	r1, #181	; 0xb5
    60be:	e009      	b.n	60d4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xcc>
    60c0:	0789      	lsls	r1, r1, #30
    60c2:	d501      	bpl.n	60c8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc0>
    60c4:	2102      	movs	r1, #2
    60c6:	e000      	b.n	60ca <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc2>
    60c8:	2103      	movs	r1, #3
    60ca:	73a1      	strb	r1, [r4, #14]
    60cc:	7a02      	ldrb	r2, [r0, #8]
    60ce:	2a1f      	cmp	r2, #31
    60d0:	d903      	bls.n	60da <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xd2>
    60d2:	21b8      	movs	r1, #184	; 0xb8
    60d4:	2010      	movs	r0, #16
    60d6:	f7fd fe41 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    60da:	f104 000f 	add.w	r0, r4, #15
    60de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    60e2:	4902      	ldr	r1, [pc, #8]	; (60ec <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    60e4:	311c      	adds	r1, #28
    60e6:	f006 ba37 	b.w	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    60ea:	0000      	.short	0x0000
    60ec:	20001080 	.word	0x20001080
    60f0:	b510      	push	{r4, lr}
    60f2:	492d      	ldr	r1, [pc, #180]	; (61a8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1a0>)
    60f4:	b086      	sub	sp, #24
    60f6:	7c8a      	ldrb	r2, [r1, #18]
    60f8:	7801      	ldrb	r1, [r0, #0]
    60fa:	07d3      	lsls	r3, r2, #31
    60fc:	d101      	bne.n	6102 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xfa>
    60fe:	291d      	cmp	r1, #29
    6100:	d004      	beq.n	610c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x104>
    6102:	291c      	cmp	r1, #28
    6104:	d01f      	beq.n	6146 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x13e>
    6106:	2915      	cmp	r1, #21
    6108:	d046      	beq.n	6198 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x190>
    610a:	e04a      	b.n	61a2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
    610c:	8880      	ldrh	r0, [r0, #4]
    610e:	f8ad 0000 	strh.w	r0, [sp]
    6112:	a902      	add	r1, sp, #8
    6114:	f007 fc2b 	bl	d96e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6118:	b110      	cbz	r0, 6120 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x118>
    611a:	f44f 71c4 	mov.w	r1, #392	; 0x188
    611e:	e035      	b.n	618c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x184>
    6120:	9803      	ldr	r0, [sp, #12]
    6122:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    6126:	f88d 1002 	strb.w	r1, [sp, #2]
    612a:	7841      	ldrb	r1, [r0, #1]
    612c:	f88d 1003 	strb.w	r1, [sp, #3]
    6130:	8840      	ldrh	r0, [r0, #2]
    6132:	f8ad 0004 	strh.w	r0, [sp, #4]
    6136:	2102      	movs	r1, #2
    6138:	4668      	mov	r0, sp
    613a:	f004 fd45 	bl	abc8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    613e:	b340      	cbz	r0, 6192 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
    6140:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    6144:	e022      	b.n	618c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x184>
    6146:	0791      	lsls	r1, r2, #30
    6148:	d42b      	bmi.n	61a2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
    614a:	8884      	ldrh	r4, [r0, #4]
    614c:	a903      	add	r1, sp, #12
    614e:	4620      	mov	r0, r4
    6150:	f008 ff7c 	bl	f04c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    6154:	b110      	cbz	r0, 615c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x154>
    6156:	f240 11a5 	movw	r1, #421	; 0x1a5
    615a:	e017      	b.n	618c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x184>
    615c:	f8ad 4000 	strh.w	r4, [sp]
    6160:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    6164:	f8ad 0002 	strh.w	r0, [sp, #2]
    6168:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    616c:	f8ad 0004 	strh.w	r0, [sp, #4]
    6170:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    6174:	f8ad 0006 	strh.w	r0, [sp, #6]
    6178:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    617c:	f8ad 0008 	strh.w	r0, [sp, #8]
    6180:	4668      	mov	r0, sp
    6182:	f008 ff8e 	bl	f0a2 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    6186:	b120      	cbz	r0, 6192 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
    6188:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    618c:	2010      	movs	r0, #16
    618e:	f7fd fde5 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6192:	2001      	movs	r0, #1
    6194:	b006      	add	sp, #24
    6196:	bd10      	pop	{r4, pc}
    6198:	0751      	lsls	r1, r2, #29
    619a:	d402      	bmi.n	61a2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
    619c:	7b80      	ldrb	r0, [r0, #14]
    619e:	07c0      	lsls	r0, r0, #31
    61a0:	d0f7      	beq.n	6192 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
    61a2:	2000      	movs	r0, #0
    61a4:	e7f6      	b.n	6194 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18c>
    61a6:	0000      	.short	0x0000
    61a8:	20001064 	.word	0x20001064
    61ac:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    61b0:	b087      	sub	sp, #28
    61b2:	460c      	mov	r4, r1
    61b4:	a902      	add	r1, sp, #8
    61b6:	9807      	ldr	r0, [sp, #28]
    61b8:	f007 fbd9 	bl	d96e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    61bc:	2800      	cmp	r0, #0
    61be:	d17d      	bne.n	62bc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b4>
    61c0:	f8df 9120 	ldr.w	r9, [pc, #288]	; 62e4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2dc>
    61c4:	f04f 0801 	mov.w	r8, #1
    61c8:	4682      	mov	sl, r0
    61ca:	9803      	ldr	r0, [sp, #12]
    61cc:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    61d0:	2800      	cmp	r0, #0
    61d2:	d00c      	beq.n	61ee <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e6>
    61d4:	f8d9 2000 	ldr.w	r2, [r9]
    61d8:	b162      	cbz	r2, 61f4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1ec>
    61da:	4621      	mov	r1, r4
    61dc:	9807      	ldr	r0, [sp, #28]
    61de:	4790      	blx	r2
    61e0:	b140      	cbz	r0, 61f4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1ec>
    61e2:	4620      	mov	r0, r4
    61e4:	f7ff ff84 	bl	60f0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe8>
    61e8:	2800      	cmp	r0, #0
    61ea:	d1ee      	bne.n	61ca <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1c2>
    61ec:	2001      	movs	r0, #1
    61ee:	b009      	add	sp, #36	; 0x24
    61f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    61f4:	9d03      	ldr	r5, [sp, #12]
    61f6:	f895 0120 	ldrb.w	r0, [r5, #288]	; 0x120
    61fa:	3578      	adds	r5, #120	; 0x78
    61fc:	b950      	cbnz	r0, 6214 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x20c>
    61fe:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    6202:	f88d 0004 	strb.w	r0, [sp, #4]
    6206:	9801      	ldr	r0, [sp, #4]
    6208:	9001      	str	r0, [sp, #4]
    620a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    620e:	b108      	cbz	r0, 6214 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x20c>
    6210:	2001      	movs	r0, #1
    6212:	e000      	b.n	6216 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x20e>
    6214:	2000      	movs	r0, #0
    6216:	4683      	mov	fp, r0
    6218:	f895 0047 	ldrb.w	r0, [r5, #71]	; 0x47
    621c:	b1c0      	cbz	r0, 6250 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x248>
    621e:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
    6222:	0780      	lsls	r0, r0, #30
    6224:	d514      	bpl.n	6250 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x248>
    6226:	f884 a001 	strb.w	sl, [r4, #1]
    622a:	f884 8000 	strb.w	r8, [r4]
    622e:	f884 a004 	strb.w	sl, [r4, #4]
    6232:	9907      	ldr	r1, [sp, #28]
    6234:	f8a4 1005 	strh.w	r1, [r4, #5]
    6238:	f895 1049 	ldrb.w	r1, [r5, #73]	; 0x49
    623c:	71e1      	strb	r1, [r4, #7]
    623e:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    6242:	8121      	strh	r1, [r4, #8]
    6244:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
    6248:	8161      	strh	r1, [r4, #10]
    624a:	f885 a047 	strb.w	sl, [r5, #71]	; 0x47
    624e:	e7c8      	b.n	61e2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1da>
    6250:	9807      	ldr	r0, [sp, #28]
    6252:	f7fe f997 	bl	4584 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6256:	0007      	movs	r7, r0
    6258:	d00d      	beq.n	6276 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x26e>
    625a:	f007 f833 	bl	d2c4 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    625e:	0006      	movs	r6, r0
    6260:	d015      	beq.n	628e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x286>
    6262:	f884 a001 	strb.w	sl, [r4, #1]
    6266:	200f      	movs	r0, #15
    6268:	7020      	strb	r0, [r4, #0]
    626a:	9807      	ldr	r0, [sp, #28]
    626c:	80e0      	strh	r0, [r4, #6]
    626e:	8126      	strh	r6, [r4, #8]
    6270:	f884 8004 	strb.w	r8, [r4, #4]
    6274:	e007      	b.n	6286 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x27e>
    6276:	f240 2133 	movw	r1, #563	; 0x233
    627a:	e02d      	b.n	62d8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2d0>
    627c:	2100      	movs	r1, #0
    627e:	4638      	mov	r0, r7
    6280:	460a      	mov	r2, r1
    6282:	f007 f943 	bl	d50c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6286:	1e76      	subs	r6, r6, #1
    6288:	b2b6      	uxth	r6, r6
    628a:	d2f7      	bcs.n	627c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x274>
    628c:	e7a9      	b.n	61e2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1da>
    628e:	9807      	ldr	r0, [sp, #28]
    6290:	f7fe f962 	bl	4558 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6294:	b1f0      	cbz	r0, 62d4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2cc>
    6296:	f1bb 0f00 	cmp.w	fp, #0
    629a:	d020      	beq.n	62de <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2d6>
    629c:	f006 ff2c 	bl	d0f8 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    62a0:	b160      	cbz	r0, 62bc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b4>
    62a2:	9807      	ldr	r0, [sp, #28]
    62a4:	f007 fa61 	bl	d76a <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    62a8:	2100      	movs	r1, #0
    62aa:	9807      	ldr	r0, [sp, #28]
    62ac:	f7fd ffd4 	bl	4258 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    62b0:	f884 a001 	strb.w	sl, [r4, #1]
    62b4:	210c      	movs	r1, #12
    62b6:	4650      	mov	r0, sl
    62b8:	7021      	strb	r1, [r4, #0]
    62ba:	e000      	b.n	62be <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b6>
    62bc:	e00f      	b.n	62de <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2d6>
    62be:	f884 a004 	strb.w	sl, [r4, #4]
    62c2:	9907      	ldr	r1, [sp, #28]
    62c4:	f8a4 1005 	strh.w	r1, [r4, #5]
    62c8:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    62cc:	71e1      	strb	r1, [r4, #7]
    62ce:	3524      	adds	r5, #36	; 0x24
    62d0:	7028      	strb	r0, [r5, #0]
    62d2:	e786      	b.n	61e2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1da>
    62d4:	f240 2151 	movw	r1, #593	; 0x251
    62d8:	2010      	movs	r0, #16
    62da:	f7fd fd3f 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    62de:	2000      	movs	r0, #0
    62e0:	e785      	b.n	61ee <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e6>
    62e2:	0000      	.short	0x0000
    62e4:	200000f0 	.word	0x200000f0
    62e8:	4804      	ldr	r0, [pc, #16]	; (62fc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2f4>)
    62ea:	2100      	movs	r1, #0
    62ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
    62f0:	7001      	strb	r1, [r0, #0]
    62f2:	8042      	strh	r2, [r0, #2]
    62f4:	1f00      	subs	r0, r0, #4
    62f6:	f8a0 1001 	strh.w	r1, [r0, #1]
    62fa:	4770      	bx	lr
    62fc:	20000280 	.word	0x20000280
    6300:	b570      	push	{r4, r5, r6, lr}
    6302:	4604      	mov	r4, r0
    6304:	481b      	ldr	r0, [pc, #108]	; (6374 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x36c>)
    6306:	6801      	ldr	r1, [r0, #0]
    6308:	b319      	cbz	r1, 6352 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x34a>
    630a:	4620      	mov	r0, r4
    630c:	4788      	blx	r1
    630e:	b300      	cbz	r0, 6352 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x34a>
    6310:	7820      	ldrb	r0, [r4, #0]
    6312:	2818      	cmp	r0, #24
    6314:	d002      	beq.n	631c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x314>
    6316:	2805      	cmp	r0, #5
    6318:	d016      	beq.n	6348 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x340>
    631a:	e018      	b.n	634e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    631c:	7920      	ldrb	r0, [r4, #4]
    631e:	2801      	cmp	r0, #1
    6320:	d115      	bne.n	634e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    6322:	88e0      	ldrh	r0, [r4, #6]
    6324:	2100      	movs	r1, #0
    6326:	f007 f9b8 	bl	d69a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    632a:	0004      	movs	r4, r0
    632c:	d00f      	beq.n	634e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    632e:	8820      	ldrh	r0, [r4, #0]
    6330:	f007 fa1b 	bl	d76a <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6334:	8820      	ldrh	r0, [r4, #0]
    6336:	2100      	movs	r1, #0
    6338:	f7fd ff8e 	bl	4258 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    633c:	b138      	cbz	r0, 634e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    633e:	f44f 7185 	mov.w	r1, #266	; 0x10a
    6342:	2010      	movs	r0, #16
    6344:	f7fd fd0a 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6348:	4620      	mov	r0, r4
    634a:	f7ff fe65 	bl	6018 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x10>
    634e:	2001      	movs	r0, #1
    6350:	bd70      	pop	{r4, r5, r6, pc}
    6352:	4d09      	ldr	r5, [pc, #36]	; (6378 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x370>)
    6354:	7868      	ldrb	r0, [r5, #1]
    6356:	2800      	cmp	r0, #0
    6358:	d0fa      	beq.n	6350 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x348>
    635a:	2600      	movs	r6, #0
    635c:	7066      	strb	r6, [r4, #1]
    635e:	2014      	movs	r0, #20
    6360:	7020      	strb	r0, [r4, #0]
    6362:	2220      	movs	r2, #32
    6364:	4631      	mov	r1, r6
    6366:	1d20      	adds	r0, r4, #4
    6368:	f006 f970 	bl	c64c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    636c:	2002      	movs	r0, #2
    636e:	7120      	strb	r0, [r4, #4]
    6370:	706e      	strb	r6, [r5, #1]
    6372:	e7ec      	b.n	634e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    6374:	200000f4 	.word	0x200000f4
    6378:	2000027d 	.word	0x2000027d

0000637c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    637c:	b5f0      	push	{r4, r5, r6, r7, lr}
    637e:	f06f 021f 	mvn.w	r2, #31
    6382:	0c01      	lsrs	r1, r0, #16
    6384:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    6388:	251f      	movs	r5, #31
    638a:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    638e:	3854      	subs	r0, #84	; 0x54
    6390:	d00d      	beq.n	63ae <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6392:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    6396:	3855      	subs	r0, #85	; 0x55
    6398:	d009      	beq.n	63ae <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    639a:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    639e:	38aa      	subs	r0, #170	; 0xaa
    63a0:	d005      	beq.n	63ae <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    63a2:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    63a6:	38aa      	subs	r0, #170	; 0xaa
    63a8:	d001      	beq.n	63ae <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    63aa:	2001      	movs	r0, #1
    63ac:	e000      	b.n	63b0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    63ae:	2000      	movs	r0, #0
    63b0:	2200      	movs	r2, #0
    63b2:	4613      	mov	r3, r2
    63b4:	ea4f 0402 	mov.w	r4, r2
    63b8:	ea82 0701 	eor.w	r7, r2, r1
    63bc:	43ff      	mvns	r7, r7
    63be:	431f      	orrs	r7, r3
    63c0:	1c7f      	adds	r7, r7, #1
    63c2:	d00f      	beq.n	63e4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    63c4:	f006 0701 	and.w	r7, r6, #1
    63c8:	0852      	lsrs	r2, r2, #1
    63ca:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    63ce:	f005 0701 	and.w	r7, r5, #1
    63d2:	085b      	lsrs	r3, r3, #1
    63d4:	0876      	lsrs	r6, r6, #1
    63d6:	086d      	lsrs	r5, r5, #1
    63d8:	1c64      	adds	r4, r4, #1
    63da:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    63de:	2c16      	cmp	r4, #22
    63e0:	d3ea      	bcc.n	63b8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    63e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63e4:	2000      	movs	r0, #0
    63e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000063e8 <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA>:
    63e8:	4801      	ldr	r0, [pc, #4]	; (63f0 <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA+0x8>)
    63ea:	f008 b834 	b.w	e456 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    63ee:	0000      	.short	0x0000
    63f0:	200000fc 	.word	0x200000fc

000063f4 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>:
    63f4:	b510      	push	{r4, lr}
    63f6:	4604      	mov	r4, r0
    63f8:	f008 f81c 	bl	e434 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x52>
    63fc:	b310      	cbz	r0, 6444 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    63fe:	43e0      	mvns	r0, r4
    6400:	f008 f818 	bl	e434 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x52>
    6404:	b1f0      	cbz	r0, 6444 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    6406:	16a0      	asrs	r0, r4, #26
    6408:	ea80 0060 	eor.w	r0, r0, r0, asr #1
    640c:	1e41      	subs	r1, r0, #1
    640e:	4208      	tst	r0, r1
    6410:	d018      	beq.n	6444 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    6412:	ea84 0064 	eor.w	r0, r4, r4, asr #1
    6416:	f007 fad3 	bl	d9c0 <sym_GYGF5D6AIJ7H7OKIHC3CN5ZKO53JXIO7G3W4UPQ>
    641a:	2818      	cmp	r0, #24
    641c:	d812      	bhi.n	6444 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    641e:	b2a0      	uxth	r0, r4
    6420:	ebb0 4f14 	cmp.w	r0, r4, lsr #16
    6424:	d107      	bne.n	6436 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x42>
    6426:	f04f 11ff 	mov.w	r1, #16711935	; 0xff00ff
    642a:	ea01 2114 	and.w	r1, r1, r4, lsr #8
    642e:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
    6432:	4281      	cmp	r1, r0
    6434:	d006      	beq.n	6444 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    6436:	4804      	ldr	r0, [pc, #16]	; (6448 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x54>)
    6438:	4044      	eors	r4, r0
    643a:	1e60      	subs	r0, r4, #1
    643c:	4204      	tst	r4, r0
    643e:	d001      	beq.n	6444 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    6440:	2001      	movs	r0, #1
    6442:	bd10      	pop	{r4, pc}
    6444:	2000      	movs	r0, #0
    6446:	bd10      	pop	{r4, pc}
    6448:	8e89bed6 	.word	0x8e89bed6
    644c:	4801      	ldr	r0, [pc, #4]	; (6454 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x60>)
    644e:	f000 b803 	b.w	6458 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>
    6452:	0000      	.short	0x0000
    6454:	200000fc 	.word	0x200000fc

00006458 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>:
    6458:	b510      	push	{r4, lr}
    645a:	e9d0 2100 	ldrd	r2, r1, [r0]
    645e:	4b09      	ldr	r3, [pc, #36]	; (6484 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x2c>)
    6460:	4c09      	ldr	r4, [pc, #36]	; (6488 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x30>)
    6462:	4353      	muls	r3, r2
    6464:	4354      	muls	r4, r2
    6466:	4051      	eors	r1, r2
    6468:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    646c:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    6470:	ea4f 41f1 	mov.w	r1, r1, ror #19
    6474:	e9c0 2100 	strd	r2, r1, [r0]
    6478:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    647c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6480:	4618      	mov	r0, r3
    6482:	bd10      	pop	{r4, pc}
    6484:	c6ef3760 	.word	0xc6ef3760
    6488:	9e3779bb 	.word	0x9e3779bb

0000648c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    648c:	4801      	ldr	r0, [pc, #4]	; (6494 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    648e:	6840      	ldr	r0, [r0, #4]
    6490:	3080      	adds	r0, #128	; 0x80
    6492:	4770      	bx	lr
    6494:	20000104 	.word	0x20000104

00006498 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    6498:	b510      	push	{r4, lr}
    649a:	4c1f      	ldr	r4, [pc, #124]	; (6518 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x80>)
    649c:	6860      	ldr	r0, [r4, #4]
    649e:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    64a2:	f007 fff9 	bl	e498 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    64a6:	6861      	ldr	r1, [r4, #4]
    64a8:	f881 0031 	strb.w	r0, [r1, #49]	; 0x31
    64ac:	3132      	adds	r1, #50	; 0x32
    64ae:	f7fe faa7 	bl	4a00 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    64b2:	6860      	ldr	r0, [r4, #4]
    64b4:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    64b8:	f007 fff5 	bl	e4a6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x50>
    64bc:	6861      	ldr	r1, [r4, #4]
    64be:	f881 0069 	strb.w	r0, [r1, #105]	; 0x69
    64c2:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    64c6:	3132      	adds	r1, #50	; 0x32
    64c8:	f007 ffd2 	bl	e470 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    64cc:	b930      	cbnz	r0, 64dc <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
    64ce:	6861      	ldr	r1, [r4, #4]
    64d0:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    64d4:	3132      	adds	r1, #50	; 0x32
    64d6:	f007 ffd4 	bl	e482 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    64da:	b108      	cbz	r0, 64e0 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
    64dc:	2101      	movs	r1, #1
    64de:	e000      	b.n	64e2 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
    64e0:	2100      	movs	r1, #0
    64e2:	6860      	ldr	r0, [r4, #4]
    64e4:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
    64e8:	b919      	cbnz	r1, 64f2 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
    64ea:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
    64ee:	2900      	cmp	r1, #0
    64f0:	d010      	beq.n	6514 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7c>
    64f2:	2100      	movs	r1, #0
    64f4:	6781      	str	r1, [r0, #120]	; 0x78
    64f6:	f005 feba 	bl	c26e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    64fa:	6861      	ldr	r1, [r4, #4]
    64fc:	6448      	str	r0, [r1, #68]	; 0x44
    64fe:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    6502:	b110      	cbz	r0, 650a <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x72>
    6504:	2000      	movs	r0, #0
    6506:	f7ff f863 	bl	55d0 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    650a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    650e:	2000      	movs	r0, #0
    6510:	f000 bdfa 	b.w	7108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>
    6514:	bd10      	pop	{r4, pc}
    6516:	0000      	.short	0x0000
    6518:	20000104 	.word	0x20000104

0000651c <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    651c:	b510      	push	{r4, lr}
    651e:	4c09      	ldr	r4, [pc, #36]	; (6544 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x28>)
    6520:	2803      	cmp	r0, #3
    6522:	6864      	ldr	r4, [r4, #4]
    6524:	d109      	bne.n	653a <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    6526:	63e1      	str	r1, [r4, #60]	; 0x3c
    6528:	b13b      	cbz	r3, 653a <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    652a:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    652e:	6819      	ldr	r1, [r3, #0]
    6530:	f8c4 104d 	str.w	r1, [r4, #77]	; 0x4d
    6534:	8899      	ldrh	r1, [r3, #4]
    6536:	f8a4 1051 	strh.w	r1, [r4, #81]	; 0x51
    653a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    653e:	2000      	movs	r0, #0
    6540:	bd10      	pop	{r4, pc}
    6542:	0000      	.short	0x0000
    6544:	20000104 	.word	0x20000104

00006548 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>:
    6548:	4807      	ldr	r0, [pc, #28]	; (6568 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x20>)
    654a:	b508      	push	{r3, lr}
    654c:	6840      	ldr	r0, [r0, #4]
    654e:	7801      	ldrb	r1, [r0, #0]
    6550:	f88d 1000 	strb.w	r1, [sp]
    6554:	9900      	ldr	r1, [sp, #0]
    6556:	9100      	str	r1, [sp, #0]
    6558:	f89d 1000 	ldrb.w	r1, [sp]
    655c:	b109      	cbz	r1, 6562 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x1a>
    655e:	8880      	ldrh	r0, [r0, #4]
    6560:	bd08      	pop	{r3, pc}
    6562:	f64f 70ff 	movw	r0, #65535	; 0xffff
    6566:	bd08      	pop	{r3, pc}
    6568:	20000104 	.word	0x20000104

0000656c <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q>:
    656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    656e:	4604      	mov	r4, r0
    6570:	f007 ffe1 	bl	e536 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>
    6574:	bb48      	cbnz	r0, 65ca <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    6576:	4e17      	ldr	r6, [pc, #92]	; (65d4 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x68>)
    6578:	6870      	ldr	r0, [r6, #4]
    657a:	f890 1022 	ldrb.w	r1, [r0, #34]	; 0x22
    657e:	f88d 1000 	strb.w	r1, [sp]
    6582:	9900      	ldr	r1, [sp, #0]
    6584:	9100      	str	r1, [sp, #0]
    6586:	f89d 1000 	ldrb.w	r1, [sp]
    658a:	2500      	movs	r5, #0
    658c:	b139      	cbz	r1, 659e <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x32>
    658e:	7065      	strb	r5, [r4, #1]
    6590:	2107      	movs	r1, #7
    6592:	7021      	strb	r1, [r4, #0]
    6594:	6a41      	ldr	r1, [r0, #36]	; 0x24
    6596:	6061      	str	r1, [r4, #4]
    6598:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
    659c:	e015      	b.n	65ca <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    659e:	4620      	mov	r0, r4
    65a0:	f000 f9d0 	bl	6944 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb0>
    65a4:	b988      	cbnz	r0, 65ca <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    65a6:	6870      	ldr	r0, [r6, #4]
    65a8:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
    65ac:	f88d 1000 	strb.w	r1, [sp]
    65b0:	9900      	ldr	r1, [sp, #0]
    65b2:	9100      	str	r1, [sp, #0]
    65b4:	f89d 1000 	ldrb.w	r1, [sp]
    65b8:	b149      	cbz	r1, 65ce <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x62>
    65ba:	7065      	strb	r5, [r4, #1]
    65bc:	2118      	movs	r1, #24
    65be:	7021      	strb	r1, [r4, #0]
    65c0:	f8d0 102a 	ldr.w	r1, [r0, #42]	; 0x2a
    65c4:	6061      	str	r1, [r4, #4]
    65c6:	300a      	adds	r0, #10
    65c8:	7785      	strb	r5, [r0, #30]
    65ca:	2001      	movs	r0, #1
    65cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    65ce:	2000      	movs	r0, #0
    65d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    65d2:	0000      	.short	0x0000
    65d4:	20000104 	.word	0x20000104

000065d8 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>:
    65d8:	4902      	ldr	r1, [pc, #8]	; (65e4 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ+0xc>)
    65da:	6849      	ldr	r1, [r1, #4]
    65dc:	f881 006a 	strb.w	r0, [r1, #106]	; 0x6a
    65e0:	2000      	movs	r0, #0
    65e2:	4770      	bx	lr
    65e4:	20000104 	.word	0x20000104

000065e8 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    65e8:	4809      	ldr	r0, [pc, #36]	; (6610 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x28>)
    65ea:	6841      	ldr	r1, [r0, #4]
    65ec:	6d48      	ldr	r0, [r1, #84]	; 0x54
    65ee:	b168      	cbz	r0, 660c <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x24>
    65f0:	f101 0059 	add.w	r0, r1, #89	; 0x59
    65f4:	2201      	movs	r2, #1
    65f6:	7002      	strb	r2, [r0, #0]
    65f8:	2300      	movs	r3, #0
    65fa:	654b      	str	r3, [r1, #84]	; 0x54
    65fc:	7003      	strb	r3, [r0, #0]
    65fe:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    6602:	4082      	lsls	r2, r0
    6604:	4803      	ldr	r0, [pc, #12]	; (6614 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    6606:	6002      	str	r2, [r0, #0]
    6608:	2000      	movs	r0, #0
    660a:	4770      	bx	lr
    660c:	200c      	movs	r0, #12
    660e:	4770      	bx	lr
    6610:	20000104 	.word	0x20000104
    6614:	4001f508 	.word	0x4001f508

00006618 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    6618:	4909      	ldr	r1, [pc, #36]	; (6640 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x28>)
    661a:	b510      	push	{r4, lr}
    661c:	6088      	str	r0, [r1, #8]
    661e:	68c8      	ldr	r0, [r1, #12]
    6620:	b150      	cbz	r0, 6638 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x20>
    6622:	f000 ff73 	bl	750c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50c>
    6626:	f000 f885 	bl	6734 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    662a:	2800      	cmp	r0, #0
    662c:	d007      	beq.n	663e <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x26>
    662e:	f640 01f9 	movw	r1, #2297	; 0x8f9
    6632:	2032      	movs	r0, #50	; 0x32
    6634:	f7fd fb92 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6638:	f640 01f5 	movw	r1, #2293	; 0x8f5
    663c:	e7f9      	b.n	6632 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x1a>
    663e:	bd10      	pop	{r4, pc}
    6640:	20000104 	.word	0x20000104

00006644 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>:
    6644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6648:	4c0f      	ldr	r4, [pc, #60]	; (6688 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x44>)
    664a:	4605      	mov	r5, r0
    664c:	4616      	mov	r6, r2
    664e:	6860      	ldr	r0, [r4, #4]
    6650:	460f      	mov	r7, r1
    6652:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    6656:	f007 ff26 	bl	e4a6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x50>
    665a:	b158      	cbz	r0, 6674 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    665c:	b955      	cbnz	r5, 6674 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    665e:	4638      	mov	r0, r7
    6660:	f007 ff1a 	bl	e498 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    6664:	4631      	mov	r1, r6
    6666:	f007 f921 	bl	d8ac <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    666a:	2808      	cmp	r0, #8
    666c:	d002      	beq.n	6674 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    666e:	2001      	movs	r0, #1
    6670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6674:	6860      	ldr	r0, [r4, #4]
    6676:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    667a:	f007 ff0d 	bl	e498 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    667e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6682:	f7fe b9e9 	b.w	4a58 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    6686:	0000      	.short	0x0000
    6688:	20000104 	.word	0x20000104

0000668c <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>:
    668c:	b570      	push	{r4, r5, r6, lr}
    668e:	4c13      	ldr	r4, [pc, #76]	; (66dc <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x50>)
    6690:	4615      	mov	r5, r2
    6692:	460e      	mov	r6, r1
    6694:	2800      	cmp	r0, #0
    6696:	d016      	beq.n	66c6 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x3a>
    6698:	f04f 0200 	mov.w	r2, #0
    669c:	6861      	ldr	r1, [r4, #4]
    669e:	f801 2f39 	strb.w	r2, [r1, #57]!
    66a2:	7248      	strb	r0, [r1, #9]
    66a4:	f04f 0008 	mov.w	r0, #8
    66a8:	f881 002e 	strb.w	r0, [r1, #46]	; 0x2e
    66ac:	d114      	bne.n	66d8 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    66ae:	4630      	mov	r0, r6
    66b0:	f007 fef2 	bl	e498 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    66b4:	4629      	mov	r1, r5
    66b6:	f007 f8f9 	bl	d8ac <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    66ba:	6861      	ldr	r1, [r4, #4]
    66bc:	2808      	cmp	r0, #8
    66be:	f881 0067 	strb.w	r0, [r1, #103]	; 0x67
    66c2:	d003      	beq.n	66cc <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x40>
    66c4:	e008      	b.n	66d8 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    66c6:	f04f 0201 	mov.w	r2, #1
    66ca:	e7e7      	b.n	669c <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x10>
    66cc:	4630      	mov	r0, r6
    66ce:	f007 feea 	bl	e4a6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x50>
    66d2:	b108      	cbz	r0, 66d8 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    66d4:	2012      	movs	r0, #18
    66d6:	bd70      	pop	{r4, r5, r6, pc}
    66d8:	2000      	movs	r0, #0
    66da:	bd70      	pop	{r4, r5, r6, pc}
    66dc:	20000104 	.word	0x20000104

000066e0 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>:
    66e0:	4902      	ldr	r1, [pc, #8]	; (66ec <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0xc>)
    66e2:	4801      	ldr	r0, [pc, #4]	; (66e8 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0x8>)
    66e4:	60c8      	str	r0, [r1, #12]
    66e6:	4770      	bx	lr
    66e8:	00007754 	.word	0x00007754
    66ec:	20000104 	.word	0x20000104

000066f0 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>:
    66f0:	4902      	ldr	r1, [pc, #8]	; (66fc <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA+0xc>)
    66f2:	6849      	ldr	r1, [r1, #4]
    66f4:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    66f8:	4770      	bx	lr
    66fa:	0000      	.short	0x0000
    66fc:	20000104 	.word	0x20000104

00006700 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    6700:	b570      	push	{r4, r5, r6, lr}
    6702:	4605      	mov	r5, r0
    6704:	f7fd ff56 	bl	45b4 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    6708:	4604      	mov	r4, r0
    670a:	f7fd ff59 	bl	45c0 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    670e:	4621      	mov	r1, r4
    6710:	f007 ff0f 	bl	e532 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    6714:	0001      	movs	r1, r0
    6716:	d006      	beq.n	6726 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    6718:	4805      	ldr	r0, [pc, #20]	; (6730 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    671a:	68c0      	ldr	r0, [r0, #12]
    671c:	6802      	ldr	r2, [r0, #0]
    671e:	4628      	mov	r0, r5
    6720:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6724:	4710      	bx	r2
    6726:	f640 11f2 	movw	r1, #2546	; 0x9f2
    672a:	2032      	movs	r0, #50	; 0x32
    672c:	f7fd fb16 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6730:	20000104 	.word	0x20000104

00006734 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    6734:	b570      	push	{r4, r5, r6, lr}
    6736:	4d19      	ldr	r5, [pc, #100]	; (679c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    6738:	6868      	ldr	r0, [r5, #4]
    673a:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    673e:	2901      	cmp	r1, #1
    6740:	d004      	beq.n	674c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    6742:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    6746:	b108      	cbz	r0, 674c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    6748:	200c      	movs	r0, #12
    674a:	bd70      	pop	{r4, r5, r6, pc}
    674c:	f7fd ff5c 	bl	4608 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    6750:	f007 ff55 	bl	e5fe <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>
    6754:	6868      	ldr	r0, [r5, #4]
    6756:	2400      	movs	r4, #0
    6758:	7004      	strb	r4, [r0, #0]
    675a:	f100 0122 	add.w	r1, r0, #34	; 0x22
    675e:	700c      	strb	r4, [r1, #0]
    6760:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    6764:	f000 f8b4 	bl	68d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    6768:	6868      	ldr	r0, [r5, #4]
    676a:	2201      	movs	r2, #1
    676c:	2107      	movs	r1, #7
    676e:	f880 404a 	strb.w	r4, [r0, #74]	; 0x4a
    6772:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    6776:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    677a:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
    677e:	f880 404b 	strb.w	r4, [r0, #75]	; 0x4b
    6782:	f880 407c 	strb.w	r4, [r0, #124]	; 0x7c
    6786:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    678a:	f100 0159 	add.w	r1, r0, #89	; 0x59
    678e:	700a      	strb	r2, [r1, #0]
    6790:	f880 4058 	strb.w	r4, [r0, #88]	; 0x58
    6794:	6544      	str	r4, [r0, #84]	; 0x54
    6796:	700c      	strb	r4, [r1, #0]
    6798:	2000      	movs	r0, #0
    679a:	bd70      	pop	{r4, r5, r6, pc}
    679c:	20000104 	.word	0x20000104

000067a0 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    67a0:	4805      	ldr	r0, [pc, #20]	; (67b8 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    67a2:	b510      	push	{r4, lr}
    67a4:	6840      	ldr	r0, [r0, #4]
    67a6:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    67aa:	f007 fe75 	bl	e498 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    67ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    67b2:	f7fe b951 	b.w	4a58 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    67b6:	0000      	.short	0x0000
    67b8:	20000104 	.word	0x20000104

000067bc <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    67bc:	b140      	cbz	r0, 67d0 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    67be:	2802      	cmp	r0, #2
    67c0:	d006      	beq.n	67d0 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    67c2:	2200      	movs	r2, #0
    67c4:	4903      	ldr	r1, [pc, #12]	; (67d4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    67c6:	6849      	ldr	r1, [r1, #4]
    67c8:	f801 2f39 	strb.w	r2, [r1, #57]!
    67cc:	7208      	strb	r0, [r1, #8]
    67ce:	4770      	bx	lr
    67d0:	2201      	movs	r2, #1
    67d2:	e7f7      	b.n	67c4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    67d4:	20000104 	.word	0x20000104

000067d8 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>:
    67d8:	4902      	ldr	r1, [pc, #8]	; (67e4 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A+0xc>)
    67da:	6849      	ldr	r1, [r1, #4]
    67dc:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
    67e0:	4770      	bx	lr
    67e2:	0000      	.short	0x0000
    67e4:	20000104 	.word	0x20000104

000067e8 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    67e8:	b510      	push	{r4, lr}
    67ea:	4604      	mov	r4, r0
    67ec:	7800      	ldrb	r0, [r0, #0]
    67ee:	07c0      	lsls	r0, r0, #31
    67f0:	d007      	beq.n	6802 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x1a>
    67f2:	2300      	movs	r3, #0
    67f4:	7860      	ldrb	r0, [r4, #1]
    67f6:	461a      	mov	r2, r3
    67f8:	4619      	mov	r1, r3
    67fa:	f7ff fe8f 	bl	651c <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    67fe:	2800      	cmp	r0, #0
    6800:	d10c      	bne.n	681c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>
    6802:	4b07      	ldr	r3, [pc, #28]	; (6820 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x38>)
    6804:	78a0      	ldrb	r0, [r4, #2]
    6806:	6859      	ldr	r1, [r3, #4]
    6808:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    680c:	78e0      	ldrb	r0, [r4, #3]
    680e:	f7ff ffd5 	bl	67bc <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    6812:	6859      	ldr	r1, [r3, #4]
    6814:	7920      	ldrb	r0, [r4, #4]
    6816:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
    681a:	2000      	movs	r0, #0
    681c:	bd10      	pop	{r4, pc}
    681e:	0000      	.short	0x0000
    6820:	20000104 	.word	0x20000104

00006824 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    6824:	4801      	ldr	r0, [pc, #4]	; (682c <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    6826:	68c0      	ldr	r0, [r0, #12]
    6828:	6840      	ldr	r0, [r0, #4]
    682a:	4700      	bx	r0
    682c:	20000104 	.word	0x20000104

00006830 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    6830:	b510      	push	{r4, lr}
    6832:	2000      	movs	r0, #0
    6834:	f000 fc8e 	bl	7154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>
    6838:	f000 f84a 	bl	68d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    683c:	f000 fe66 	bl	750c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50c>
    6840:	4803      	ldr	r0, [pc, #12]	; (6850 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x20>)
    6842:	6840      	ldr	r0, [r0, #4]
    6844:	2100      	movs	r1, #0
    6846:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    684a:	4608      	mov	r0, r1
    684c:	bd10      	pop	{r4, pc}
    684e:	0000      	.short	0x0000
    6850:	20000104 	.word	0x20000104

00006854 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    6854:	b510      	push	{r4, lr}
    6856:	f000 f941 	bl	6adc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    685a:	4909      	ldr	r1, [pc, #36]	; (6880 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x2c>)
    685c:	2201      	movs	r2, #1
    685e:	b130      	cbz	r0, 686e <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1a>
    6860:	6848      	ldr	r0, [r1, #4]
    6862:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
    6866:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    6868:	881b      	ldrh	r3, [r3, #0]
    686a:	8583      	strh	r3, [r0, #44]	; 0x2c
    686c:	e004      	b.n	6878 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x24>
    686e:	684b      	ldr	r3, [r1, #4]
    6870:	2000      	movs	r0, #0
    6872:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
    6876:	8598      	strh	r0, [r3, #44]	; 0x2c
    6878:	6848      	ldr	r0, [r1, #4]
    687a:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    687e:	bd10      	pop	{r4, pc}
    6880:	20000104 	.word	0x20000104

00006884 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    6884:	4802      	ldr	r0, [pc, #8]	; (6890 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    6886:	6840      	ldr	r0, [r0, #4]
    6888:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    688c:	4770      	bx	lr
    688e:	0000      	.short	0x0000
    6890:	20000104 	.word	0x20000104

00006894 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    6894:	b510      	push	{r4, lr}
    6896:	f000 f921 	bl	6adc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    689a:	490c      	ldr	r1, [pc, #48]	; (68cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    689c:	b128      	cbz	r0, 68aa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    689e:	6848      	ldr	r0, [r1, #4]
    68a0:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
    68a4:	2801      	cmp	r0, #1
    68a6:	d00e      	beq.n	68c6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    68a8:	e00c      	b.n	68c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    68aa:	6849      	ldr	r1, [r1, #4]
    68ac:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
    68b0:	2801      	cmp	r0, #1
    68b2:	d001      	beq.n	68b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    68b4:	2802      	cmp	r0, #2
    68b6:	d105      	bne.n	68c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    68b8:	f891 0041 	ldrb.w	r0, [r1, #65]	; 0x41
    68bc:	2801      	cmp	r0, #1
    68be:	d003      	beq.n	68c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    68c0:	2803      	cmp	r0, #3
    68c2:	d001      	beq.n	68c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    68c4:	2000      	movs	r0, #0
    68c6:	bd10      	pop	{r4, pc}
    68c8:	2001      	movs	r0, #1
    68ca:	bd10      	pop	{r4, pc}
    68cc:	20000104 	.word	0x20000104
    68d0:	b510      	push	{r4, lr}
    68d2:	4c07      	ldr	r4, [pc, #28]	; (68f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    68d4:	6860      	ldr	r0, [r4, #4]
    68d6:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    68da:	2800      	cmp	r0, #0
    68dc:	d007      	beq.n	68ee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    68de:	f004 fdd3 	bl	b488 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    68e2:	f004 fbb5 	bl	b050 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    68e6:	6861      	ldr	r1, [r4, #4]
    68e8:	2000      	movs	r0, #0
    68ea:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    68ee:	bd10      	pop	{r4, pc}
    68f0:	20000104 	.word	0x20000104
    68f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68f8:	4d10      	ldr	r5, [pc, #64]	; (693c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa8>)
    68fa:	4606      	mov	r6, r0
    68fc:	460f      	mov	r7, r1
    68fe:	6868      	ldr	r0, [r5, #4]
    6900:	490f      	ldr	r1, [pc, #60]	; (6940 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xac>)
    6902:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
    6906:	5c0c      	ldrb	r4, [r1, r0]
    6908:	4620      	mov	r0, r4
    690a:	f005 f931 	bl	bb70 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    690e:	6868      	ldr	r0, [r5, #4]
    6910:	2101      	movs	r1, #1
    6912:	f880 4074 	strb.w	r4, [r0, #116]	; 0x74
    6916:	2025      	movs	r0, #37	; 0x25
    6918:	f009 f859 	bl	f9ce <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    691c:	4638      	mov	r0, r7
    691e:	f005 f831 	bl	b984 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6922:	f04f 0101 	mov.w	r1, #1
    6926:	4608      	mov	r0, r1
    6928:	b126      	cbz	r6, 6934 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa0>
    692a:	f004 fe63 	bl	b5f4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    692e:	b918      	cbnz	r0, 6938 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa4>
    6930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6934:	f004 fe12 	bl	b55c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    6938:	2001      	movs	r0, #1
    693a:	e7f9      	b.n	6930 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c>
    693c:	20000104 	.word	0x20000104
    6940:	0000fb1e 	.word	0x0000fb1e
    6944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6946:	4e20      	ldr	r6, [pc, #128]	; (69c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x134>)
    6948:	4604      	mov	r4, r0
    694a:	6870      	ldr	r0, [r6, #4]
    694c:	7801      	ldrb	r1, [r0, #0]
    694e:	f88d 1000 	strb.w	r1, [sp]
    6952:	9900      	ldr	r1, [sp, #0]
    6954:	9100      	str	r1, [sp, #0]
    6956:	f89d 1000 	ldrb.w	r1, [sp]
    695a:	b389      	cbz	r1, 69c0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12c>
    695c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    695e:	6882      	ldr	r2, [r0, #8]
    6960:	f841 2f03 	str.w	r2, [r1, #3]!
    6964:	8982      	ldrh	r2, [r0, #12]
    6966:	808a      	strh	r2, [r1, #4]
    6968:	79c0      	ldrb	r0, [r0, #7]
    696a:	f007 fd95 	bl	e498 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    696e:	6871      	ldr	r1, [r6, #4]
    6970:	2500      	movs	r5, #0
    6972:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    6974:	1c89      	adds	r1, r1, #2
    6976:	7090      	strb	r0, [r2, #2]
    6978:	7065      	strb	r5, [r4, #1]
    697a:	2014      	movs	r0, #20
    697c:	7020      	strb	r0, [r4, #0]
    697e:	2220      	movs	r2, #32
    6980:	1d20      	adds	r0, r4, #4
    6982:	f005 fde9 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6986:	4a11      	ldr	r2, [pc, #68]	; (69cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x138>)
    6988:	7225      	strb	r5, [r4, #8]
    698a:	2301      	movs	r3, #1
    698c:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    698e:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    6992:	6871      	ldr	r1, [r6, #4]
    6994:	700d      	strb	r5, [r1, #0]
    6996:	f101 0028 	add.w	r0, r1, #40	; 0x28
    699a:	7005      	strb	r5, [r0, #0]
    699c:	88e0      	ldrh	r0, [r4, #6]
    699e:	8490      	strh	r0, [r2, #36]	; 0x24
    69a0:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    69a2:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
    69a6:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
    69aa:	4610      	mov	r0, r2
    69ac:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    69b0:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    69b2:	8800      	ldrh	r0, [r0, #0]
    69b4:	f7fd fdd0 	bl	4558 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    69b8:	f006 fd5a 	bl	d470 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    69bc:	2001      	movs	r0, #1
    69be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    69c0:	e7ff      	b.n	69c2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12e>
    69c2:	2000      	movs	r0, #0
    69c4:	e7fb      	b.n	69be <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12a>
    69c6:	0000      	.short	0x0000
    69c8:	20000104 	.word	0x20000104
    69cc:	200010bc 	.word	0x200010bc
    69d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    69d2:	2600      	movs	r6, #0
    69d4:	460f      	mov	r7, r1
    69d6:	4605      	mov	r5, r0
    69d8:	f88d 6000 	strb.w	r6, [sp]
    69dc:	466b      	mov	r3, sp
    69de:	f000 f89d 	bl	6b1c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x288>
    69e2:	0001      	movs	r1, r0
    69e4:	4810      	ldr	r0, [pc, #64]	; (6a28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x194>)
    69e6:	d003      	beq.n	69f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15c>
    69e8:	6840      	ldr	r0, [r0, #4]
    69ea:	f880 606d 	strb.w	r6, [r0, #109]	; 0x6d
    69ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    69f0:	6840      	ldr	r0, [r0, #4]
    69f2:	f89d 1000 	ldrb.w	r1, [sp]
    69f6:	2f07      	cmp	r7, #7
    69f8:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
    69fc:	d301      	bcc.n	6a02 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16e>
    69fe:	4634      	mov	r4, r6
    6a00:	e002      	b.n	6a08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x174>
    6a02:	0022      	movs	r2, r4
    6a04:	d100      	bne.n	6a08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x174>
    6a06:	460c      	mov	r4, r1
    6a08:	f880 406d 	strb.w	r4, [r0, #109]	; 0x6d
    6a0c:	6869      	ldr	r1, [r5, #4]
    6a0e:	2900      	cmp	r1, #0
    6a10:	d0ed      	beq.n	69ee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15a>
    6a12:	7c69      	ldrb	r1, [r5, #17]
    6a14:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    6a18:	6869      	ldr	r1, [r5, #4]
    6a1a:	680a      	ldr	r2, [r1, #0]
    6a1c:	f840 2f6e 	str.w	r2, [r0, #110]!
    6a20:	8889      	ldrh	r1, [r1, #4]
    6a22:	8081      	strh	r1, [r0, #4]
    6a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a26:	0000      	.short	0x0000
    6a28:	20000104 	.word	0x20000104
    6a2c:	b510      	push	{r4, lr}
    6a2e:	4915      	ldr	r1, [pc, #84]	; (6a84 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1f0>)
    6a30:	6842      	ldr	r2, [r0, #4]
    6a32:	6849      	ldr	r1, [r1, #4]
    6a34:	7813      	ldrb	r3, [r2, #0]
    6a36:	f891 406e 	ldrb.w	r4, [r1, #110]	; 0x6e
    6a3a:	42a3      	cmp	r3, r4
    6a3c:	d11f      	bne.n	6a7e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6a3e:	7853      	ldrb	r3, [r2, #1]
    6a40:	f891 406f 	ldrb.w	r4, [r1, #111]	; 0x6f
    6a44:	42a3      	cmp	r3, r4
    6a46:	d11a      	bne.n	6a7e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6a48:	7893      	ldrb	r3, [r2, #2]
    6a4a:	f891 4070 	ldrb.w	r4, [r1, #112]	; 0x70
    6a4e:	42a3      	cmp	r3, r4
    6a50:	d115      	bne.n	6a7e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6a52:	78d3      	ldrb	r3, [r2, #3]
    6a54:	f891 4071 	ldrb.w	r4, [r1, #113]	; 0x71
    6a58:	42a3      	cmp	r3, r4
    6a5a:	d110      	bne.n	6a7e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6a5c:	7913      	ldrb	r3, [r2, #4]
    6a5e:	f891 4072 	ldrb.w	r4, [r1, #114]	; 0x72
    6a62:	42a3      	cmp	r3, r4
    6a64:	d10b      	bne.n	6a7e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6a66:	7952      	ldrb	r2, [r2, #5]
    6a68:	f891 3073 	ldrb.w	r3, [r1, #115]	; 0x73
    6a6c:	429a      	cmp	r2, r3
    6a6e:	d106      	bne.n	6a7e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6a70:	7c40      	ldrb	r0, [r0, #17]
    6a72:	f891 1075 	ldrb.w	r1, [r1, #117]	; 0x75
    6a76:	4288      	cmp	r0, r1
    6a78:	d101      	bne.n	6a7e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6a7a:	2001      	movs	r0, #1
    6a7c:	bd10      	pop	{r4, pc}
    6a7e:	2000      	movs	r0, #0
    6a80:	bd10      	pop	{r4, pc}
    6a82:	0000      	.short	0x0000
    6a84:	20000104 	.word	0x20000104
    6a88:	b530      	push	{r4, r5, lr}
    6a8a:	7801      	ldrb	r1, [r0, #0]
    6a8c:	b08b      	sub	sp, #44	; 0x2c
    6a8e:	f001 040f 	and.w	r4, r1, #15
    6a92:	4622      	mov	r2, r4
    6a94:	a901      	add	r1, sp, #4
    6a96:	f000 fee9 	bl	786c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    6a9a:	a801      	add	r0, sp, #4
    6a9c:	f7ff ffc6 	bl	6a2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x198>
    6aa0:	4605      	mov	r5, r0
    6aa2:	f004 fd0b 	bl	b4bc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6aa6:	f000 fb6f 	bl	7188 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x188>
    6aaa:	2c04      	cmp	r4, #4
    6aac:	d111      	bne.n	6ad2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x23e>
    6aae:	b185      	cbz	r5, 6ad2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x23e>
    6ab0:	a80a      	add	r0, sp, #40	; 0x28
    6ab2:	f000 fb75 	bl	71a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a0>
    6ab6:	f99d 0028 	ldrsb.w	r0, [sp, #40]	; 0x28
    6aba:	9000      	str	r0, [sp, #0]
    6abc:	4806      	ldr	r0, [pc, #24]	; (6ad8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x244>)
    6abe:	6840      	ldr	r0, [r0, #4]
    6ac0:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    6ac4:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
    6ac8:	f890 1065 	ldrb.w	r1, [r0, #101]	; 0x65
    6acc:	a801      	add	r0, sp, #4
    6ace:	f007 fd98 	bl	e602 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    6ad2:	b00b      	add	sp, #44	; 0x2c
    6ad4:	2005      	movs	r0, #5
    6ad6:	bd30      	pop	{r4, r5, pc}
    6ad8:	20000104 	.word	0x20000104
    6adc:	4804      	ldr	r0, [pc, #16]	; (6af0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x25c>)
    6ade:	6840      	ldr	r0, [r0, #4]
    6ae0:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    6ae4:	2803      	cmp	r0, #3
    6ae6:	d001      	beq.n	6aec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    6ae8:	2000      	movs	r0, #0
    6aea:	4770      	bx	lr
    6aec:	2001      	movs	r0, #1
    6aee:	4770      	bx	lr
    6af0:	20000104 	.word	0x20000104
    6af4:	4908      	ldr	r1, [pc, #32]	; (6b18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x284>)
    6af6:	b510      	push	{r4, lr}
    6af8:	6849      	ldr	r1, [r1, #4]
    6afa:	7c83      	ldrb	r3, [r0, #18]
    6afc:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    6b00:	429a      	cmp	r2, r3
    6b02:	d105      	bne.n	6b10 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x27c>
    6b04:	6880      	ldr	r0, [r0, #8]
    6b06:	2206      	movs	r2, #6
    6b08:	3132      	adds	r1, #50	; 0x32
    6b0a:	f005 fd13 	bl	c534 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6b0e:	b108      	cbz	r0, 6b14 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x280>
    6b10:	2000      	movs	r0, #0
    6b12:	bd10      	pop	{r4, pc}
    6b14:	2001      	movs	r0, #1
    6b16:	bd10      	pop	{r4, pc}
    6b18:	20000104 	.word	0x20000104
    6b1c:	b570      	push	{r4, r5, r6, lr}
    6b1e:	6841      	ldr	r1, [r0, #4]
    6b20:	461e      	mov	r6, r3
    6b22:	4604      	mov	r4, r0
    6b24:	b1c1      	cbz	r1, 6b58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c4>
    6b26:	7c60      	ldrb	r0, [r4, #17]
    6b28:	f007 fcab 	bl	e482 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    6b2c:	4d10      	ldr	r5, [pc, #64]	; (6b70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2dc>)
    6b2e:	6869      	ldr	r1, [r5, #4]
    6b30:	f891 1068 	ldrb.w	r1, [r1, #104]	; 0x68
    6b34:	b141      	cbz	r1, 6b48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    6b36:	b138      	cbz	r0, 6b48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    6b38:	f006 feae 	bl	d898 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    6b3c:	6869      	ldr	r1, [r5, #4]
    6b3e:	f801 0f64 	strb.w	r0, [r1, #100]!
    6b42:	7048      	strb	r0, [r1, #1]
    6b44:	2001      	movs	r0, #1
    6b46:	71c8      	strb	r0, [r1, #7]
    6b48:	686b      	ldr	r3, [r5, #4]
    6b4a:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    6b4e:	28ff      	cmp	r0, #255	; 0xff
    6b50:	d004      	beq.n	6b5c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c8>
    6b52:	f7fe fdeb 	bl	572c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    6b56:	7030      	strb	r0, [r6, #0]
    6b58:	2000      	movs	r0, #0
    6b5a:	bd70      	pop	{r4, r5, r6, pc}
    6b5c:	7c60      	ldrb	r0, [r4, #17]
    6b5e:	4632      	mov	r2, r6
    6b60:	3364      	adds	r3, #100	; 0x64
    6b62:	6861      	ldr	r1, [r4, #4]
    6b64:	f7fe fe5e 	bl	5824 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>
    6b68:	f080 0001 	eor.w	r0, r0, #1
    6b6c:	bd70      	pop	{r4, r5, r6, pc}
    6b6e:	0000      	.short	0x0000
    6b70:	20000104 	.word	0x20000104
    6b74:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    6b76:	4c3d      	ldr	r4, [pc, #244]	; (6c6c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3d8>)
    6b78:	466f      	mov	r7, sp
    6b7a:	6860      	ldr	r0, [r4, #4]
    6b7c:	7801      	ldrb	r1, [r0, #0]
    6b7e:	f88d 1008 	strb.w	r1, [sp, #8]
    6b82:	9902      	ldr	r1, [sp, #8]
    6b84:	9102      	str	r1, [sp, #8]
    6b86:	f89d 1008 	ldrb.w	r1, [sp, #8]
    6b8a:	b111      	cbz	r1, 6b92 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2fe>
    6b8c:	f241 41b1 	movw	r1, #5297	; 0x14b1
    6b90:	e04f      	b.n	6c32 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x39e>
    6b92:	2500      	movs	r5, #0
    6b94:	7085      	strb	r5, [r0, #2]
    6b96:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6b98:	880a      	ldrh	r2, [r1, #0]
    6b9a:	8082      	strh	r2, [r0, #4]
    6b9c:	68c8      	ldr	r0, [r1, #12]
    6b9e:	f006 fef6 	bl	d98e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6ba2:	6861      	ldr	r1, [r4, #4]
    6ba4:	8348      	strh	r0, [r1, #26]
    6ba6:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    6ba8:	8a82      	ldrh	r2, [r0, #20]
    6baa:	838a      	strh	r2, [r1, #28]
    6bac:	8ac0      	ldrh	r0, [r0, #22]
    6bae:	83c8      	strh	r0, [r1, #30]
    6bb0:	f881 5020 	strb.w	r5, [r1, #32]
    6bb4:	4669      	mov	r1, sp
    6bb6:	68a0      	ldr	r0, [r4, #8]
    6bb8:	f007 f9f1 	bl	df9e <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>
    6bbc:	68a0      	ldr	r0, [r4, #8]
    6bbe:	7800      	ldrb	r0, [r0, #0]
    6bc0:	f3c0 1680 	ubfx	r6, r0, #6, #1
    6bc4:	6860      	ldr	r0, [r4, #4]
    6bc6:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    6bca:	b120      	cbz	r0, 6bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x342>
    6bcc:	4639      	mov	r1, r7
    6bce:	4630      	mov	r0, r6
    6bd0:	f007 fc57 	bl	e482 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    6bd4:	b940      	cbnz	r0, 6be8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x354>
    6bd6:	6860      	ldr	r0, [r4, #4]
    6bd8:	f890 004a 	ldrb.w	r0, [r0, #74]	; 0x4a
    6bdc:	b160      	cbz	r0, 6bf8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x364>
    6bde:	4639      	mov	r1, r7
    6be0:	4630      	mov	r0, r6
    6be2:	f007 fc45 	bl	e470 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    6be6:	b138      	cbz	r0, 6bf8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x364>
    6be8:	6860      	ldr	r0, [r4, #4]
    6bea:	9900      	ldr	r1, [sp, #0]
    6bec:	f8c0 100e 	str.w	r1, [r0, #14]
    6bf0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6bf4:	8241      	strh	r1, [r0, #18]
    6bf6:	e003      	b.n	6c00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x36c>
    6bf8:	6860      	ldr	r0, [r4, #4]
    6bfa:	f8c0 500e 	str.w	r5, [r0, #14]
    6bfe:	8245      	strh	r5, [r0, #18]
    6c00:	6861      	ldr	r1, [r4, #4]
    6c02:	f891 0065 	ldrb.w	r0, [r1, #101]	; 0x65
    6c06:	28ff      	cmp	r0, #255	; 0xff
    6c08:	d016      	beq.n	6c38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a4>
    6c0a:	f101 0208 	add.w	r2, r1, #8
    6c0e:	1dc9      	adds	r1, r1, #7
    6c10:	f7fe fd72 	bl	56f8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6c14:	b158      	cbz	r0, 6c2e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x39a>
    6c16:	6860      	ldr	r0, [r4, #4]
    6c18:	79c1      	ldrb	r1, [r0, #7]
    6c1a:	f041 0102 	orr.w	r1, r1, #2
    6c1e:	71c1      	strb	r1, [r0, #7]
    6c20:	f8d0 106e 	ldr.w	r1, [r0, #110]	; 0x6e
    6c24:	6141      	str	r1, [r0, #20]
    6c26:	f8b0 1072 	ldrh.w	r1, [r0, #114]	; 0x72
    6c2a:	8301      	strh	r1, [r0, #24]
    6c2c:	e00f      	b.n	6c4e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3ba>
    6c2e:	f241 41dc 	movw	r1, #5340	; 0x14dc
    6c32:	2032      	movs	r0, #50	; 0x32
    6c34:	f7fd f892 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c38:	f891 0075 	ldrb.w	r0, [r1, #117]	; 0x75
    6c3c:	71c8      	strb	r0, [r1, #7]
    6c3e:	f8d1 006e 	ldr.w	r0, [r1, #110]	; 0x6e
    6c42:	6088      	str	r0, [r1, #8]
    6c44:	f8b1 0072 	ldrh.w	r0, [r1, #114]	; 0x72
    6c48:	8188      	strh	r0, [r1, #12]
    6c4a:	614d      	str	r5, [r1, #20]
    6c4c:	830d      	strh	r5, [r1, #24]
    6c4e:	6860      	ldr	r0, [r4, #4]
    6c50:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    6c52:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
    6c56:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    6c5a:	2101      	movs	r1, #1
    6c5c:	7001      	strb	r1, [r0, #0]
    6c5e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6c60:	8800      	ldrh	r0, [r0, #0]
    6c62:	f7fd fc79 	bl	4558 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6c66:	f006 fc09 	bl	d47c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    6c6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6c6c:	20000104 	.word	0x20000104
    6c70:	b570      	push	{r4, r5, r6, lr}
    6c72:	4d39      	ldr	r5, [pc, #228]	; (6d58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c4>)
    6c74:	4601      	mov	r1, r0
    6c76:	2200      	movs	r2, #0
    6c78:	e9d5 6001 	ldrd	r6, r0, [r5, #4]
    6c7c:	365c      	adds	r6, #92	; 0x5c
    6c7e:	8002      	strh	r2, [r0, #0]
    6c80:	2903      	cmp	r1, #3
    6c82:	d002      	beq.n	6c8a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f6>
    6c84:	2905      	cmp	r1, #5
    6c86:	d004      	beq.n	6c92 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3fe>
    6c88:	e056      	b.n	6d38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a4>
    6c8a:	2103      	movs	r1, #3
    6c8c:	f007 f99e 	bl	dfcc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6c90:	e052      	b.n	6d38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a4>
    6c92:	2105      	movs	r1, #5
    6c94:	f007 f99a 	bl	dfcc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6c98:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6c9c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6c9e:	6909      	ldr	r1, [r1, #16]
    6ca0:	f844 1f0f 	str.w	r1, [r4, #15]!
    6ca4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6ca6:	8b0a      	ldrh	r2, [r1, #24]
    6ca8:	80a2      	strh	r2, [r4, #4]
    6caa:	7e89      	ldrb	r1, [r1, #26]
    6cac:	71a1      	strb	r1, [r4, #6]
    6cae:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6cb0:	68c1      	ldr	r1, [r0, #12]
    6cb2:	8b80      	ldrh	r0, [r0, #28]
    6cb4:	f007 f838 	bl	dd28 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    6cb8:	71e0      	strb	r0, [r4, #7]
    6cba:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6cbe:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6cc0:	68c1      	ldr	r1, [r0, #12]
    6cc2:	6a00      	ldr	r0, [r0, #32]
    6cc4:	f007 f825 	bl	dd12 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    6cc8:	75e0      	strb	r0, [r4, #23]
    6cca:	0a00      	lsrs	r0, r0, #8
    6ccc:	7620      	strb	r0, [r4, #24]
    6cce:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6cd2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6cd4:	68c0      	ldr	r0, [r0, #12]
    6cd6:	f006 fe5a 	bl	d98e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6cda:	7660      	strb	r0, [r4, #25]
    6cdc:	0a00      	lsrs	r0, r0, #8
    6cde:	76a0      	strb	r0, [r4, #26]
    6ce0:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6ce4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6ce6:	8a89      	ldrh	r1, [r1, #20]
    6ce8:	76e1      	strb	r1, [r4, #27]
    6cea:	0a09      	lsrs	r1, r1, #8
    6cec:	7721      	strb	r1, [r4, #28]
    6cee:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6cf0:	8ac9      	ldrh	r1, [r1, #22]
    6cf2:	7761      	strb	r1, [r4, #29]
    6cf4:	0a09      	lsrs	r1, r1, #8
    6cf6:	77a1      	strb	r1, [r4, #30]
    6cf8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6cfa:	f851 2f8e 	ldr.w	r2, [r1, #142]!
    6cfe:	f8c4 201f 	str.w	r2, [r4, #31]
    6d02:	7909      	ldrb	r1, [r1, #4]
    6d04:	f884 1023 	strb.w	r1, [r4, #35]	; 0x23
    6d08:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6d0a:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    6d0e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    6d12:	f001 011f 	and.w	r1, r1, #31
    6d16:	f020 001f 	bic.w	r0, r0, #31
    6d1a:	4308      	orrs	r0, r1
    6d1c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    6d20:	f004 f978 	bl	b014 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    6d24:	2807      	cmp	r0, #7
    6d26:	d900      	bls.n	6d2a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x496>
    6d28:	2007      	movs	r0, #7
    6d2a:	f814 1f24 	ldrb.w	r1, [r4, #36]!
    6d2e:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
    6d32:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    6d36:	7021      	strb	r1, [r4, #0]
    6d38:	f106 0112 	add.w	r1, r6, #18
    6d3c:	68a8      	ldr	r0, [r5, #8]
    6d3e:	f007 f960 	bl	e002 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6d42:	7e71      	ldrb	r1, [r6, #25]
    6d44:	68a8      	ldr	r0, [r5, #8]
    6d46:	f007 f962 	bl	e00e <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6d4a:	f000 fba7 	bl	749c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x49c>
    6d4e:	68a8      	ldr	r0, [r5, #8]
    6d50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6d54:	f004 be16 	b.w	b984 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6d58:	20000104 	.word	0x20000104
    6d5c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6d60:	4f65      	ldr	r7, [pc, #404]	; (6ef8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x664>)
    6d62:	4604      	mov	r4, r0
    6d64:	6878      	ldr	r0, [r7, #4]
    6d66:	f890 806d 	ldrb.w	r8, [r0, #109]	; 0x6d
    6d6a:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    6d6e:	b180      	cbz	r0, 6d92 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4fe>
    6d70:	2600      	movs	r6, #0
    6d72:	2500      	movs	r5, #0
    6d74:	7ca0      	ldrb	r0, [r4, #18]
    6d76:	68a1      	ldr	r1, [r4, #8]
    6d78:	f007 fb83 	bl	e482 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    6d7c:	4682      	mov	sl, r0
    6d7e:	f7ff fead 	bl	6adc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    6d82:	b140      	cbz	r0, 6d96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x502>
    6d84:	6878      	ldr	r0, [r7, #4]
    6d86:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    6d8a:	b121      	cbz	r1, 6d96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x502>
    6d8c:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    6d90:	e004      	b.n	6d9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x508>
    6d92:	2601      	movs	r6, #1
    6d94:	e7ed      	b.n	6d72 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4de>
    6d96:	6878      	ldr	r0, [r7, #4]
    6d98:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    6d9c:	4683      	mov	fp, r0
    6d9e:	f7fe fbfd 	bl	559c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    6da2:	ea5f 0900 	movs.w	r9, r0
    6da6:	d00c      	beq.n	6dc2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x52e>
    6da8:	4658      	mov	r0, fp
    6daa:	f7fe fbeb 	bl	5584 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    6dae:	b100      	cbz	r0, 6db2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x51e>
    6db0:	2601      	movs	r6, #1
    6db2:	f1ba 0f00 	cmp.w	sl, #0
    6db6:	d004      	beq.n	6dc2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x52e>
    6db8:	4648      	mov	r0, r9
    6dba:	68a1      	ldr	r1, [r4, #8]
    6dbc:	f006 fd1f 	bl	d7fe <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    6dc0:	4605      	mov	r5, r0
    6dc2:	6878      	ldr	r0, [r7, #4]
    6dc4:	46b9      	mov	r9, r7
    6dc6:	f890 7031 	ldrb.w	r7, [r0, #49]	; 0x31
    6dca:	b10d      	cbz	r5, 6dd0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x53c>
    6dcc:	f047 0702 	orr.w	r7, r7, #2
    6dd0:	f7ff fe84 	bl	6adc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    6dd4:	b3a0      	cbz	r0, 6e40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ac>
    6dd6:	6860      	ldr	r0, [r4, #4]
    6dd8:	f8d9 1004 	ldr.w	r1, [r9, #4]
    6ddc:	7802      	ldrb	r2, [r0, #0]
    6dde:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    6de2:	429a      	cmp	r2, r3
    6de4:	d11f      	bne.n	6e26 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6de6:	7842      	ldrb	r2, [r0, #1]
    6de8:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    6dec:	429a      	cmp	r2, r3
    6dee:	d11a      	bne.n	6e26 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6df0:	7882      	ldrb	r2, [r0, #2]
    6df2:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    6df6:	429a      	cmp	r2, r3
    6df8:	d115      	bne.n	6e26 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6dfa:	78c2      	ldrb	r2, [r0, #3]
    6dfc:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    6e00:	429a      	cmp	r2, r3
    6e02:	d110      	bne.n	6e26 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6e04:	7902      	ldrb	r2, [r0, #4]
    6e06:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    6e0a:	429a      	cmp	r2, r3
    6e0c:	d10b      	bne.n	6e26 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6e0e:	7940      	ldrb	r0, [r0, #5]
    6e10:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    6e14:	4290      	cmp	r0, r2
    6e16:	d106      	bne.n	6e26 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6e18:	7c60      	ldrb	r0, [r4, #17]
    6e1a:	f891 104c 	ldrb.w	r1, [r1, #76]	; 0x4c
    6e1e:	4288      	cmp	r0, r1
    6e20:	d101      	bne.n	6e26 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6e22:	2001      	movs	r0, #1
    6e24:	e000      	b.n	6e28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x594>
    6e26:	2000      	movs	r0, #0
    6e28:	4f34      	ldr	r7, [pc, #208]	; (6efc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x668>)
    6e2a:	4682      	mov	sl, r0
    6e2c:	f897 0064 	ldrb.w	r0, [r7, #100]	; 0x64
    6e30:	2808      	cmp	r0, #8
    6e32:	d006      	beq.n	6e42 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ae>
    6e34:	f897 1067 	ldrb.w	r1, [r7, #103]	; 0x67
    6e38:	4288      	cmp	r0, r1
    6e3a:	d102      	bne.n	6e42 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ae>
    6e3c:	2001      	movs	r0, #1
    6e3e:	e001      	b.n	6e44 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5b0>
    6e40:	e021      	b.n	6e86 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5f2>
    6e42:	2000      	movs	r0, #0
    6e44:	4681      	mov	r9, r0
    6e46:	b925      	cbnz	r5, 6e52 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5be>
    6e48:	b12e      	cbz	r6, 6e56 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c2>
    6e4a:	4620      	mov	r0, r4
    6e4c:	f7ff fe52 	bl	6af4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x260>
    6e50:	b108      	cbz	r0, 6e56 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c2>
    6e52:	2001      	movs	r0, #1
    6e54:	e000      	b.n	6e58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c4>
    6e56:	2000      	movs	r0, #0
    6e58:	f1b8 0f00 	cmp.w	r8, #0
    6e5c:	d009      	beq.n	6e72 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5de>
    6e5e:	f897 1042 	ldrb.w	r1, [r7, #66]	; 0x42
    6e62:	2901      	cmp	r1, #1
    6e64:	d003      	beq.n	6e6e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5da>
    6e66:	b921      	cbnz	r1, 6e72 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5de>
    6e68:	ea5a 0109 	orrs.w	r1, sl, r9
    6e6c:	d001      	beq.n	6e72 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5de>
    6e6e:	2101      	movs	r1, #1
    6e70:	e000      	b.n	6e74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5e0>
    6e72:	2100      	movs	r1, #0
    6e74:	4208      	tst	r0, r1
    6e76:	d003      	beq.n	6e80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ec>
    6e78:	200c      	movs	r0, #12
    6e7a:	b004      	add	sp, #16
    6e7c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6e80:	f004 fb1c 	bl	b4bc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6e84:	e036      	b.n	6ef4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x660>
    6e86:	f004 fb19 	bl	b4bc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6e8a:	f1b8 0f00 	cmp.w	r8, #0
    6e8e:	d031      	beq.n	6ef4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x660>
    6e90:	4620      	mov	r0, r4
    6e92:	f7ff fe2f 	bl	6af4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x260>
    6e96:	b900      	cbnz	r0, 6e9a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x606>
    6e98:	b175      	cbz	r5, 6eb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x624>
    6e9a:	a803      	add	r0, sp, #12
    6e9c:	f000 f980 	bl	71a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a0>
    6ea0:	f8d9 2004 	ldr.w	r2, [r9, #4]
    6ea4:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6ea8:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    6eac:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    6eb0:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    6eb4:	463b      	mov	r3, r7
    6eb6:	e018      	b.n	6eea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x656>
    6eb8:	f8d9 0004 	ldr.w	r0, [r9, #4]
    6ebc:	464d      	mov	r5, r9
    6ebe:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    6ec2:	2803      	cmp	r0, #3
    6ec4:	d001      	beq.n	6eca <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x636>
    6ec6:	2802      	cmp	r0, #2
    6ec8:	d114      	bne.n	6ef4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x660>
    6eca:	f1ba 0f00 	cmp.w	sl, #0
    6ece:	d011      	beq.n	6ef4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x660>
    6ed0:	a803      	add	r0, sp, #12
    6ed2:	f000 f965 	bl	71a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a0>
    6ed6:	686a      	ldr	r2, [r5, #4]
    6ed8:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6edc:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    6ee0:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    6ee4:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    6ee8:	23fe      	movs	r3, #254	; 0xfe
    6eea:	2101      	movs	r1, #1
    6eec:	4620      	mov	r0, r4
    6eee:	3232      	adds	r2, #50	; 0x32
    6ef0:	f000 fc46 	bl	7780 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    6ef4:	2005      	movs	r0, #5
    6ef6:	e7c0      	b.n	6e7a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5e6>
    6ef8:	20000104 	.word	0x20000104
    6efc:	200010bc 	.word	0x200010bc
    6f00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    6f02:	4c3f      	ldr	r4, [pc, #252]	; (7000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>)
    6f04:	4605      	mov	r5, r0
    6f06:	6860      	ldr	r0, [r4, #4]
    6f08:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    6f0c:	2900      	cmp	r1, #0
    6f0e:	d06c      	beq.n	6fea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x756>
    6f10:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    6f14:	2802      	cmp	r0, #2
    6f16:	d02c      	beq.n	6f72 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6de>
    6f18:	2801      	cmp	r0, #1
    6f1a:	d043      	beq.n	6fa4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x710>
    6f1c:	f7ff fdde 	bl	6adc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    6f20:	2800      	cmp	r0, #0
    6f22:	d067      	beq.n	6ff4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x760>
    6f24:	686a      	ldr	r2, [r5, #4]
    6f26:	6861      	ldr	r1, [r4, #4]
    6f28:	7810      	ldrb	r0, [r2, #0]
    6f2a:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    6f2e:	4298      	cmp	r0, r3
    6f30:	d14c      	bne.n	6fcc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    6f32:	7850      	ldrb	r0, [r2, #1]
    6f34:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    6f38:	4298      	cmp	r0, r3
    6f3a:	d147      	bne.n	6fcc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    6f3c:	7890      	ldrb	r0, [r2, #2]
    6f3e:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    6f42:	4298      	cmp	r0, r3
    6f44:	d142      	bne.n	6fcc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    6f46:	78d0      	ldrb	r0, [r2, #3]
    6f48:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    6f4c:	4298      	cmp	r0, r3
    6f4e:	d13d      	bne.n	6fcc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    6f50:	7910      	ldrb	r0, [r2, #4]
    6f52:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    6f56:	4298      	cmp	r0, r3
    6f58:	d138      	bne.n	6fcc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    6f5a:	7950      	ldrb	r0, [r2, #5]
    6f5c:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    6f60:	4290      	cmp	r0, r2
    6f62:	d133      	bne.n	6fcc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    6f64:	7c68      	ldrb	r0, [r5, #17]
    6f66:	f891 204c 	ldrb.w	r2, [r1, #76]	; 0x4c
    6f6a:	4290      	cmp	r0, r2
    6f6c:	d12e      	bne.n	6fcc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    6f6e:	2001      	movs	r0, #1
    6f70:	e02d      	b.n	6fce <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x73a>
    6f72:	a803      	add	r0, sp, #12
    6f74:	f000 f914 	bl	71a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a0>
    6f78:	6862      	ldr	r2, [r4, #4]
    6f7a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6f7e:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    6f82:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    6f86:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    6f8a:	23ff      	movs	r3, #255	; 0xff
    6f8c:	2100      	movs	r1, #0
    6f8e:	4628      	mov	r0, r5
    6f90:	3232      	adds	r2, #50	; 0x32
    6f92:	f000 fbf5 	bl	7780 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    6f96:	6861      	ldr	r1, [r4, #4]
    6f98:	2001      	movs	r0, #1
    6f9a:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    6f9e:	200b      	movs	r0, #11
    6fa0:	b004      	add	sp, #16
    6fa2:	bd70      	pop	{r4, r5, r6, pc}
    6fa4:	a803      	add	r0, sp, #12
    6fa6:	f000 f8fb 	bl	71a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a0>
    6faa:	6862      	ldr	r2, [r4, #4]
    6fac:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6fb0:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    6fb4:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    6fb8:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    6fbc:	23ff      	movs	r3, #255	; 0xff
    6fbe:	2100      	movs	r1, #0
    6fc0:	4628      	mov	r0, r5
    6fc2:	3232      	adds	r2, #50	; 0x32
    6fc4:	f000 fbdc 	bl	7780 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    6fc8:	2005      	movs	r0, #5
    6fca:	e7e9      	b.n	6fa0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x70c>
    6fcc:	2000      	movs	r0, #0
    6fce:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    6fd2:	2901      	cmp	r1, #1
    6fd4:	d00c      	beq.n	6ff0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x75c>
    6fd6:	b958      	cbnz	r0, 6ff0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x75c>
    6fd8:	490a      	ldr	r1, [pc, #40]	; (7004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    6fda:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    6fde:	2808      	cmp	r0, #8
    6fe0:	d003      	beq.n	6fea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x756>
    6fe2:	f891 1064 	ldrb.w	r1, [r1, #100]	; 0x64
    6fe6:	4281      	cmp	r1, r0
    6fe8:	d002      	beq.n	6ff0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x75c>
    6fea:	f004 fa67 	bl	b4bc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6fee:	e7eb      	b.n	6fc8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x734>
    6ff0:	200c      	movs	r0, #12
    6ff2:	e7d5      	b.n	6fa0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x70c>
    6ff4:	f640 6158 	movw	r1, #3672	; 0xe58
    6ff8:	2032      	movs	r0, #50	; 0x32
    6ffa:	f7fc feaf 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ffe:	0000      	.short	0x0000
    7000:	20000104 	.word	0x20000104
    7004:	200010bc 	.word	0x200010bc
    7008:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    700a:	4c1e      	ldr	r4, [pc, #120]	; (7084 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x84>)
    700c:	4605      	mov	r5, r0
    700e:	6860      	ldr	r0, [r4, #4]
    7010:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    7014:	b129      	cbz	r1, 7022 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22>
    7016:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    701a:	2802      	cmp	r0, #2
    701c:	d004      	beq.n	7028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    701e:	2801      	cmp	r0, #1
    7020:	d01b      	beq.n	705a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a>
    7022:	f004 fa4b 	bl	b4bc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7026:	e02a      	b.n	707e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7e>
    7028:	a803      	add	r0, sp, #12
    702a:	f000 f8b9 	bl	71a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a0>
    702e:	6862      	ldr	r2, [r4, #4]
    7030:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7034:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7038:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    703c:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7040:	23ff      	movs	r3, #255	; 0xff
    7042:	2106      	movs	r1, #6
    7044:	4628      	mov	r0, r5
    7046:	3232      	adds	r2, #50	; 0x32
    7048:	f000 fb9a 	bl	7780 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    704c:	6862      	ldr	r2, [r4, #4]
    704e:	200b      	movs	r0, #11
    7050:	2100      	movs	r1, #0
    7052:	f882 107c 	strb.w	r1, [r2, #124]	; 0x7c
    7056:	b004      	add	sp, #16
    7058:	bd70      	pop	{r4, r5, r6, pc}
    705a:	a803      	add	r0, sp, #12
    705c:	f000 f8a0 	bl	71a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a0>
    7060:	6862      	ldr	r2, [r4, #4]
    7062:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7066:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    706a:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    706e:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7072:	23ff      	movs	r3, #255	; 0xff
    7074:	2106      	movs	r1, #6
    7076:	4628      	mov	r0, r5
    7078:	3232      	adds	r2, #50	; 0x32
    707a:	f000 fb81 	bl	7780 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    707e:	2005      	movs	r0, #5
    7080:	e7e9      	b.n	7056 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x56>
    7082:	0000      	.short	0x0000
    7084:	20000104 	.word	0x20000104
    7088:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    708a:	b389      	cbz	r1, 70f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf0>
    708c:	2901      	cmp	r1, #1
    708e:	d034      	beq.n	70fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfa>
    7090:	2505      	movs	r5, #5
    7092:	2902      	cmp	r1, #2
    7094:	d004      	beq.n	70a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
    7096:	2906      	cmp	r1, #6
    7098:	d025      	beq.n	70e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe6>
    709a:	f004 fa0f 	bl	b4bc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    709e:	e01f      	b.n	70e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe0>
    70a0:	4606      	mov	r6, r0
    70a2:	f004 fa0b 	bl	b4bc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    70a6:	4c17      	ldr	r4, [pc, #92]	; (7104 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x104>)
    70a8:	6860      	ldr	r0, [r4, #4]
    70aa:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    70ae:	b1b9      	cbz	r1, 70e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe0>
    70b0:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    70b4:	2801      	cmp	r0, #1
    70b6:	d001      	beq.n	70bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc>
    70b8:	2802      	cmp	r0, #2
    70ba:	d111      	bne.n	70e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe0>
    70bc:	a803      	add	r0, sp, #12
    70be:	f000 f86f 	bl	71a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a0>
    70c2:	6862      	ldr	r2, [r4, #4]
    70c4:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    70c8:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    70cc:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    70d0:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    70d4:	23ff      	movs	r3, #255	; 0xff
    70d6:	2102      	movs	r1, #2
    70d8:	4630      	mov	r0, r6
    70da:	3232      	adds	r2, #50	; 0x32
    70dc:	f000 fb50 	bl	7780 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    70e0:	b004      	add	sp, #16
    70e2:	4628      	mov	r0, r5
    70e4:	bd70      	pop	{r4, r5, r6, pc}
    70e6:	b004      	add	sp, #16
    70e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    70ec:	f7ff bf8c 	b.w	7008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>
    70f0:	b004      	add	sp, #16
    70f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    70f6:	f7ff bf03 	b.w	6f00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x66c>
    70fa:	b004      	add	sp, #16
    70fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7100:	f7ff be2c 	b.w	6d5c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c8>
    7104:	20000104 	.word	0x20000104
    7108:	b570      	push	{r4, r5, r6, lr}
    710a:	4c11      	ldr	r4, [pc, #68]	; (7150 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x150>)
    710c:	4605      	mov	r5, r0
    710e:	6861      	ldr	r1, [r4, #4]
    7110:	f891 004a 	ldrb.w	r0, [r1, #74]	; 0x4a
    7114:	2800      	cmp	r0, #0
    7116:	d019      	beq.n	714c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14c>
    7118:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    711c:	2800      	cmp	r0, #0
    711e:	d015      	beq.n	714c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14c>
    7120:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    7124:	3132      	adds	r1, #50	; 0x32
    7126:	f007 f9ac 	bl	e482 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    712a:	b140      	cbz	r0, 713e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13e>
    712c:	f7fe fa00 	bl	5530 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    7130:	6861      	ldr	r1, [r4, #4]
    7132:	462a      	mov	r2, r5
    7134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7138:	3132      	adds	r1, #50	; 0x32
    713a:	f006 bb2b 	b.w	d794 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    713e:	6860      	ldr	r0, [r4, #4]
    7140:	4629      	mov	r1, r5
    7142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7146:	3032      	adds	r0, #50	; 0x32
    7148:	f006 bb13 	b.w	d772 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    714c:	bd70      	pop	{r4, r5, r6, pc}
    714e:	0000      	.short	0x0000
    7150:	20000104 	.word	0x20000104
    7154:	4602      	mov	r2, r0
    7156:	480b      	ldr	r0, [pc, #44]	; (7184 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x184>)
    7158:	b082      	sub	sp, #8
    715a:	6840      	ldr	r0, [r0, #4]
    715c:	f890 1059 	ldrb.w	r1, [r0, #89]	; 0x59
    7160:	f88d 1000 	strb.w	r1, [sp]
    7164:	9900      	ldr	r1, [sp, #0]
    7166:	9100      	str	r1, [sp, #0]
    7168:	f89d 1000 	ldrb.w	r1, [sp]
    716c:	2900      	cmp	r1, #0
    716e:	d107      	bne.n	7180 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x180>
    7170:	6d41      	ldr	r1, [r0, #84]	; 0x54
    7172:	2900      	cmp	r1, #0
    7174:	d004      	beq.n	7180 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x180>
    7176:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    717a:	b002      	add	sp, #8
    717c:	f7fb ba90 	b.w	26a0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    7180:	b002      	add	sp, #8
    7182:	4770      	bx	lr
    7184:	20000104 	.word	0x20000104
    7188:	b510      	push	{r4, lr}
    718a:	4804      	ldr	r0, [pc, #16]	; (719c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19c>)
    718c:	f004 fcac 	bl	bae8 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    7190:	2800      	cmp	r0, #0
    7192:	d102      	bne.n	719a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19a>
    7194:	4901      	ldr	r1, [pc, #4]	; (719c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19c>)
    7196:	207f      	movs	r0, #127	; 0x7f
    7198:	7008      	strb	r0, [r1, #0]
    719a:	bd10      	pop	{r4, pc}
    719c:	20000104 	.word	0x20000104
    71a0:	4a07      	ldr	r2, [pc, #28]	; (71c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c0>)
    71a2:	b510      	push	{r4, lr}
    71a4:	f992 1000 	ldrsb.w	r1, [r2]
    71a8:	297f      	cmp	r1, #127	; 0x7f
    71aa:	d003      	beq.n	71b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b4>
    71ac:	7001      	strb	r1, [r0, #0]
    71ae:	207f      	movs	r0, #127	; 0x7f
    71b0:	7010      	strb	r0, [r2, #0]
    71b2:	bd10      	pop	{r4, pc}
    71b4:	f240 319f 	movw	r1, #927	; 0x39f
    71b8:	2032      	movs	r0, #50	; 0x32
    71ba:	f7fc fdcf 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    71be:	0000      	.short	0x0000
    71c0:	20000104 	.word	0x20000104
    71c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71c8:	4607      	mov	r7, r0
    71ca:	f7fd f9f3 	bl	45b4 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    71ce:	4604      	mov	r4, r0
    71d0:	f7fd f9f6 	bl	45c0 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    71d4:	4621      	mov	r1, r4
    71d6:	f007 f9ac 	bl	e532 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    71da:	0005      	movs	r5, r0
    71dc:	d012      	beq.n	7204 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x204>
    71de:	4c2d      	ldr	r4, [pc, #180]	; (7294 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x294>)
    71e0:	6860      	ldr	r0, [r4, #4]
    71e2:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    71e6:	2801      	cmp	r0, #1
    71e8:	d004      	beq.n	71f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f4>
    71ea:	2802      	cmp	r0, #2
    71ec:	d002      	beq.n	71f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f4>
    71ee:	f7ff fc75 	bl	6adc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    71f2:	b150      	cbz	r0, 720a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20a>
    71f4:	f06f 0613 	mvn.w	r6, #19
    71f8:	b33f      	cbz	r7, 724a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24a>
    71fa:	4628      	mov	r0, r5
    71fc:	f006 feb7 	bl	df6e <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>
    7200:	b950      	cbnz	r0, 7218 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x218>
    7202:	e005      	b.n	7210 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x210>
    7204:	f241 4181 	movw	r1, #5249	; 0x1481
    7208:	e03a      	b.n	7280 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x280>
    720a:	f241 4187 	movw	r1, #5255	; 0x1487
    720e:	e037      	b.n	7280 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x280>
    7210:	4628      	mov	r0, r5
    7212:	f006 fece 	bl	dfb2 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>
    7216:	b1c0      	cbz	r0, 724a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24a>
    7218:	6861      	ldr	r1, [r4, #4]
    721a:	4628      	mov	r0, r5
    721c:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    7220:	2a05      	cmp	r2, #5
    7222:	d202      	bcs.n	722a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22a>
    7224:	f241 410b 	movw	r1, #5131	; 0x140b
    7228:	e02a      	b.n	7280 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x280>
    722a:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    722e:	2a0b      	cmp	r2, #11
    7230:	d302      	bcc.n	7238 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x238>
    7232:	f241 410c 	movw	r1, #5132	; 0x140c
    7236:	e023      	b.n	7280 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x280>
    7238:	68e2      	ldr	r2, [r4, #12]
    723a:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    723e:	6952      	ldr	r2, [r2, #20]
    7240:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    7244:	5851      	ldr	r1, [r2, r1]
    7246:	4788      	blx	r1
    7248:	e016      	b.n	7278 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x278>
    724a:	6860      	ldr	r0, [r4, #4]
    724c:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    7250:	2905      	cmp	r1, #5
    7252:	d202      	bcs.n	725a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x25a>
    7254:	f241 4177 	movw	r1, #5239	; 0x1477
    7258:	e012      	b.n	7280 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x280>
    725a:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    725e:	290b      	cmp	r1, #11
    7260:	d302      	bcc.n	7268 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x268>
    7262:	f241 4178 	movw	r1, #5240	; 0x1478
    7266:	e00b      	b.n	7280 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x280>
    7268:	68e1      	ldr	r1, [r4, #12]
    726a:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    726e:	6989      	ldr	r1, [r1, #24]
    7270:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    7274:	5808      	ldr	r0, [r1, r0]
    7276:	4780      	blx	r0
    7278:	280f      	cmp	r0, #15
    727a:	d304      	bcc.n	7286 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x286>
    727c:	f241 419c 	movw	r1, #5276	; 0x149c
    7280:	2032      	movs	r0, #50	; 0x32
    7282:	f7fc fd6b 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7286:	68e1      	ldr	r1, [r4, #12]
    7288:	6909      	ldr	r1, [r1, #16]
    728a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    728e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7292:	4700      	bx	r0
    7294:	20000104 	.word	0x20000104
    7298:	b510      	push	{r4, lr}
    729a:	b118      	cbz	r0, 72a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a4>
    729c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    72a0:	f000 b924 	b.w	74ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4ec>
    72a4:	2900      	cmp	r1, #0
    72a6:	d01d      	beq.n	72e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e4>
    72a8:	480f      	ldr	r0, [pc, #60]	; (72e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e8>)
    72aa:	6841      	ldr	r1, [r0, #4]
    72ac:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    72b0:	2a0b      	cmp	r2, #11
    72b2:	d202      	bcs.n	72ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ba>
    72b4:	f241 5143 	movw	r1, #5443	; 0x1543
    72b8:	e005      	b.n	72c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c6>
    72ba:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    72be:	2a0f      	cmp	r2, #15
    72c0:	d304      	bcc.n	72cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2cc>
    72c2:	f241 5144 	movw	r1, #5444	; 0x1544
    72c6:	2032      	movs	r0, #50	; 0x32
    72c8:	f7fc fd48 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    72cc:	68c0      	ldr	r0, [r0, #12]
    72ce:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    72d2:	6880      	ldr	r0, [r0, #8]
    72d4:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    72d8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    72dc:	5840      	ldr	r0, [r0, r1]
    72de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    72e2:	4700      	bx	r0
    72e4:	bd10      	pop	{r4, pc}
    72e6:	0000      	.short	0x0000
    72e8:	20000104 	.word	0x20000104
    72ec:	b510      	push	{r4, lr}
    72ee:	f7ff faef 	bl	68d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    72f2:	f000 f90b 	bl	750c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50c>
    72f6:	4805      	ldr	r0, [pc, #20]	; (730c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30c>)
    72f8:	6881      	ldr	r1, [r0, #8]
    72fa:	2000      	movs	r0, #0
    72fc:	f7ff fc3a 	bl	6b74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2e0>
    7300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7304:	2003      	movs	r0, #3
    7306:	f000 bb79 	b.w	79fc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    730a:	0000      	.short	0x0000
    730c:	20000104 	.word	0x20000104
    7310:	b510      	push	{r4, lr}
    7312:	f7fd f94f 	bl	45b4 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7316:	4604      	mov	r4, r0
    7318:	f7fd f952 	bl	45c0 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    731c:	4621      	mov	r1, r4
    731e:	f007 f908 	bl	e532 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    7322:	b150      	cbz	r0, 733a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x33a>
    7324:	f004 fb2e 	bl	b984 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7328:	2000      	movs	r0, #0
    732a:	f004 f9df 	bl	b6ec <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    732e:	4905      	ldr	r1, [pc, #20]	; (7344 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x344>)
    7330:	2006      	movs	r0, #6
    7332:	6849      	ldr	r1, [r1, #4]
    7334:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    7338:	bd10      	pop	{r4, pc}
    733a:	f240 5184 	movw	r1, #1412	; 0x584
    733e:	2032      	movs	r0, #50	; 0x32
    7340:	f7fc fd0c 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7344:	20000104 	.word	0x20000104
    7348:	490f      	ldr	r1, [pc, #60]	; (7388 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x388>)
    734a:	b510      	push	{r4, lr}
    734c:	6848      	ldr	r0, [r1, #4]
    734e:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    7352:	2a06      	cmp	r2, #6
    7354:	d202      	bcs.n	735c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x35c>
    7356:	f241 5171 	movw	r1, #5489	; 0x1571
    735a:	e005      	b.n	7368 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x368>
    735c:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    7360:	2a0b      	cmp	r2, #11
    7362:	d304      	bcc.n	736e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36e>
    7364:	f241 5172 	movw	r1, #5490	; 0x1572
    7368:	2032      	movs	r0, #50	; 0x32
    736a:	f7fc fcf7 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    736e:	68c9      	ldr	r1, [r1, #12]
    7370:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    7374:	68c9      	ldr	r1, [r1, #12]
    7376:	f06f 0213 	mvn.w	r2, #19
    737a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    737e:	5808      	ldr	r0, [r1, r0]
    7380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7384:	4700      	bx	r0
    7386:	0000      	.short	0x0000
    7388:	20000104 	.word	0x20000104
    738c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7390:	4c31      	ldr	r4, [pc, #196]	; (7458 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x458>)
    7392:	4605      	mov	r5, r0
    7394:	460e      	mov	r6, r1
    7396:	6860      	ldr	r0, [r4, #4]
    7398:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    739c:	b120      	cbz	r0, 73a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a8>
    739e:	2801      	cmp	r0, #1
    73a0:	d002      	beq.n	73a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a8>
    73a2:	200c      	movs	r0, #12
    73a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    73a8:	f004 fa60 	bl	b86c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    73ac:	f004 f86c 	bl	b488 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    73b0:	f003 fe4e 	bl	b050 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    73b4:	f004 fcc8 	bl	bd48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    73b8:	4828      	ldr	r0, [pc, #160]	; (745c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x45c>)
    73ba:	f004 f98f 	bl	b6dc <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    73be:	4828      	ldr	r0, [pc, #160]	; (7460 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x460>)
    73c0:	f004 fbb8 	bl	bb34 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    73c4:	4827      	ldr	r0, [pc, #156]	; (7464 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x464>)
    73c6:	f004 fbab 	bl	bb20 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    73ca:	4630      	mov	r0, r6
    73cc:	f004 fada 	bl	b984 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    73d0:	7968      	ldrb	r0, [r5, #5]
    73d2:	b110      	cbz	r0, 73da <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3da>
    73d4:	2001      	movs	r0, #1
    73d6:	f7ff febd 	bl	7154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>
    73da:	7928      	ldrb	r0, [r5, #4]
    73dc:	2803      	cmp	r0, #3
    73de:	d001      	beq.n	73e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e4>
    73e0:	b118      	cbz	r0, 73ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ea>
    73e2:	e018      	b.n	7416 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x416>
    73e4:	f640 1188 	movw	r1, #2440	; 0x988
    73e8:	e033      	b.n	7452 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x452>
    73ea:	6861      	ldr	r1, [r4, #4]
    73ec:	2000      	movs	r0, #0
    73ee:	2503      	movs	r5, #3
    73f0:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
    73f4:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    73f8:	1c52      	adds	r2, r2, #1
    73fa:	fbb2 f7f5 	udiv	r7, r2, r5
    73fe:	fb05 2217 	mls	r2, r5, r7, r2
    7402:	f881 2066 	strb.w	r2, [r1, #102]	; 0x66
    7406:	fa23 f202 	lsr.w	r2, r3, r2
    740a:	07d2      	lsls	r2, r2, #31
    740c:	d103      	bne.n	7416 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x416>
    740e:	1c40      	adds	r0, r0, #1
    7410:	b2c0      	uxtb	r0, r0
    7412:	2803      	cmp	r0, #3
    7414:	d3ee      	bcc.n	73f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3f4>
    7416:	6860      	ldr	r0, [r4, #4]
    7418:	f990 004b 	ldrsb.w	r0, [r0, #75]	; 0x4b
    741c:	f004 faac 	bl	b978 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    7420:	4631      	mov	r1, r6
    7422:	2001      	movs	r0, #1
    7424:	f7ff fa66 	bl	68f4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    7428:	2800      	cmp	r0, #0
    742a:	d0bb      	beq.n	73a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a4>
    742c:	f000 f922 	bl	7674 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x674>
    7430:	6860      	ldr	r0, [r4, #4]
    7432:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
    7436:	b138      	cbz	r0, 7448 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x448>
    7438:	f7fe f87e 	bl	5538 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>
    743c:	480a      	ldr	r0, [pc, #40]	; (7468 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x468>)
    743e:	6800      	ldr	r0, [r0, #0]
    7440:	2803      	cmp	r0, #3
    7442:	d004      	beq.n	744e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44e>
    7444:	2000      	movs	r0, #0
    7446:	e7ad      	b.n	73a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a4>
    7448:	f7fe fa6a 	bl	5920 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    744c:	e7f6      	b.n	743c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x43c>
    744e:	f640 119a 	movw	r1, #2458	; 0x99a
    7452:	2032      	movs	r0, #50	; 0x32
    7454:	f7fc fc82 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7458:	20000104 	.word	0x20000104
    745c:	00007770 	.word	0x00007770
    7460:	0000fb1b 	.word	0x0000fb1b
    7464:	8e89bed6 	.word	0x8e89bed6
    7468:	40001550 	.word	0x40001550
    746c:	b510      	push	{r4, lr}
    746e:	2000      	movs	r0, #0
    7470:	f7ff fe70 	bl	7154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>
    7474:	4808      	ldr	r0, [pc, #32]	; (7498 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x498>)
    7476:	6840      	ldr	r0, [r0, #4]
    7478:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    747c:	b128      	cbz	r0, 748a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48a>
    747e:	2801      	cmp	r0, #1
    7480:	d003      	beq.n	748a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48a>
    7482:	2802      	cmp	r0, #2
    7484:	d004      	beq.n	7490 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x490>
    7486:	200c      	movs	r0, #12
    7488:	bd10      	pop	{r4, pc}
    748a:	f000 f82f 	bl	74ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4ec>
    748e:	e001      	b.n	7494 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x494>
    7490:	f000 f844 	bl	751c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x51c>
    7494:	2000      	movs	r0, #0
    7496:	bd10      	pop	{r4, pc}
    7498:	20000104 	.word	0x20000104
    749c:	b570      	push	{r4, r5, r6, lr}
    749e:	4c12      	ldr	r4, [pc, #72]	; (74e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4e8>)
    74a0:	6860      	ldr	r0, [r4, #4]
    74a2:	f100 0532 	add.w	r5, r0, #50	; 0x32
    74a6:	f890 6031 	ldrb.w	r6, [r0, #49]	; 0x31
    74aa:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    74ae:	b188      	cbz	r0, 74d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4d4>
    74b0:	f7ff fb14 	bl	6adc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    74b4:	b130      	cbz	r0, 74c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c4>
    74b6:	6860      	ldr	r0, [r4, #4]
    74b8:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    74bc:	b111      	cbz	r1, 74c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c4>
    74be:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    74c2:	e002      	b.n	74ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4ca>
    74c4:	6860      	ldr	r0, [r4, #4]
    74c6:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    74ca:	f7fe f8db 	bl	5684 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    74ce:	b108      	cbz	r0, 74d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4d4>
    74d0:	2601      	movs	r6, #1
    74d2:	4605      	mov	r5, r0
    74d4:	4629      	mov	r1, r5
    74d6:	68a0      	ldr	r0, [r4, #8]
    74d8:	f006 fda0 	bl	e01c <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    74dc:	4631      	mov	r1, r6
    74de:	68a0      	ldr	r0, [r4, #8]
    74e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    74e4:	f006 bda0 	b.w	e028 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    74e8:	20000104 	.word	0x20000104
    74ec:	b510      	push	{r4, lr}
    74ee:	f7ff f9ef 	bl	68d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    74f2:	4905      	ldr	r1, [pc, #20]	; (7508 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x508>)
    74f4:	2001      	movs	r0, #1
    74f6:	6849      	ldr	r1, [r1, #4]
    74f8:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    74fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7500:	2000      	movs	r0, #0
    7502:	f000 ba7b 	b.w	79fc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    7506:	0000      	.short	0x0000
    7508:	20000104 	.word	0x20000104
    750c:	4902      	ldr	r1, [pc, #8]	; (7518 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x518>)
    750e:	2000      	movs	r0, #0
    7510:	6849      	ldr	r1, [r1, #4]
    7512:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    7516:	4770      	bx	lr
    7518:	20000104 	.word	0x20000104
    751c:	b570      	push	{r4, r5, r6, lr}
    751e:	f7fd f849 	bl	45b4 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7522:	4604      	mov	r4, r0
    7524:	f7fd f84c 	bl	45c0 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7528:	4621      	mov	r1, r4
    752a:	f007 f802 	bl	e532 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    752e:	0004      	movs	r4, r0
    7530:	d020      	beq.n	7574 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x574>
    7532:	f007 f84e 	bl	e5d2 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    7536:	2000      	movs	r0, #0
    7538:	f000 fa2a 	bl	7990 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    753c:	b1f8      	cbz	r0, 757e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x57e>
    753e:	4d1e      	ldr	r5, [pc, #120]	; (75b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5b8>)
    7540:	6868      	ldr	r0, [r5, #4]
    7542:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    7546:	2802      	cmp	r0, #2
    7548:	d003      	beq.n	7552 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x552>
    754a:	4621      	mov	r1, r4
    754c:	2000      	movs	r0, #0
    754e:	f7ff f9d1 	bl	68f4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    7552:	1ce0      	adds	r0, r4, #3
    7554:	f006 f99d 	bl	d892 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    7558:	6869      	ldr	r1, [r5, #4]
    755a:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    755e:	b128      	cbz	r0, 756c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x56c>
    7560:	2440      	movs	r4, #64	; 0x40
    7562:	f003 fd95 	bl	b090 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    7566:	4620      	mov	r0, r4
    7568:	f003 ff9c 	bl	b4a4 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    756c:	f7ff fab6 	bl	6adc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    7570:	b970      	cbnz	r0, 7590 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x590>
    7572:	e008      	b.n	7586 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x586>
    7574:	f240 4177 	movw	r1, #1143	; 0x477
    7578:	2032      	movs	r0, #50	; 0x32
    757a:	f7fc fbef 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    757e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7582:	f7ff bfb3 	b.w	74ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4ec>
    7586:	6868      	ldr	r0, [r5, #4]
    7588:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    758c:	2802      	cmp	r0, #2
    758e:	d104      	bne.n	759a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x59a>
    7590:	2100      	movs	r1, #0
    7592:	2201      	movs	r2, #1
    7594:	4608      	mov	r0, r1
    7596:	f004 fa81 	bl	ba9c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    759a:	6868      	ldr	r0, [r5, #4]
    759c:	21ff      	movs	r1, #255	; 0xff
    759e:	f800 1f64 	strb.w	r1, [r0, #100]!
    75a2:	7041      	strb	r1, [r0, #1]
    75a4:	2100      	movs	r1, #0
    75a6:	7201      	strb	r1, [r0, #8]
    75a8:	71c1      	strb	r1, [r0, #7]
    75aa:	7241      	strb	r1, [r0, #9]
    75ac:	7601      	strb	r1, [r0, #24]
    75ae:	2105      	movs	r1, #5
    75b0:	f800 1c08 	strb.w	r1, [r0, #-8]
    75b4:	bd70      	pop	{r4, r5, r6, pc}
    75b6:	0000      	.short	0x0000
    75b8:	20000104 	.word	0x20000104
    75bc:	b570      	push	{r4, r5, r6, lr}
    75be:	f7fc fff9 	bl	45b4 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    75c2:	4604      	mov	r4, r0
    75c4:	f7fc fffc 	bl	45c0 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    75c8:	4621      	mov	r1, r4
    75ca:	f006 ffb2 	bl	e532 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    75ce:	0005      	movs	r5, r0
    75d0:	d028      	beq.n	7624 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x624>
    75d2:	4e19      	ldr	r6, [pc, #100]	; (7638 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x638>)
    75d4:	2004      	movs	r0, #4
    75d6:	6874      	ldr	r4, [r6, #4]
    75d8:	345c      	adds	r4, #92	; 0x5c
    75da:	f000 f9d9 	bl	7990 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    75de:	b330      	cbz	r0, 762e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x62e>
    75e0:	200c      	movs	r0, #12
    75e2:	7020      	strb	r0, [r4, #0]
    75e4:	2001      	movs	r0, #1
    75e6:	f000 fa09 	bl	79fc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    75ea:	7828      	ldrb	r0, [r5, #0]
    75ec:	6871      	ldr	r1, [r6, #4]
    75ee:	f3c0 1040 	ubfx	r0, r0, #5, #1
    75f2:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    75f6:	2005      	movs	r0, #5
    75f8:	f7ff fb3a 	bl	6c70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3dc>
    75fc:	4a0f      	ldr	r2, [pc, #60]	; (763c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x63c>)
    75fe:	68b1      	ldr	r1, [r6, #8]
    7600:	2520      	movs	r5, #32
    7602:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    7604:	f890 308d 	ldrb.w	r3, [r0, #141]	; 0x8d
    7608:	7808      	ldrb	r0, [r1, #0]
    760a:	ea05 1343 	and.w	r3, r5, r3, lsl #5
    760e:	f020 0020 	bic.w	r0, r0, #32
    7612:	4318      	orrs	r0, r3
    7614:	7008      	strb	r0, [r1, #0]
    7616:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    7618:	7ea2      	ldrb	r2, [r4, #26]
    761a:	f810 1f8d 	ldrb.w	r1, [r0, #141]!
    761e:	4011      	ands	r1, r2
    7620:	7001      	strb	r1, [r0, #0]
    7622:	bd70      	pop	{r4, r5, r6, pc}
    7624:	f240 51ef 	movw	r1, #1519	; 0x5ef
    7628:	2032      	movs	r0, #50	; 0x32
    762a:	f7fc fb97 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    762e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7632:	f7ff bf5b 	b.w	74ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4ec>
    7636:	0000      	.short	0x0000
    7638:	20000104 	.word	0x20000104
    763c:	200010bc 	.word	0x200010bc
    7640:	b510      	push	{r4, lr}
    7642:	2003      	movs	r0, #3
    7644:	f000 f9a4 	bl	7990 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    7648:	b168      	cbz	r0, 7666 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x666>
    764a:	2003      	movs	r0, #3
    764c:	f7ff fb10 	bl	6c70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3dc>
    7650:	2201      	movs	r2, #1
    7652:	4611      	mov	r1, r2
    7654:	2000      	movs	r0, #0
    7656:	f004 fa21 	bl	ba9c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    765a:	4905      	ldr	r1, [pc, #20]	; (7670 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x670>)
    765c:	200b      	movs	r0, #11
    765e:	6849      	ldr	r1, [r1, #4]
    7660:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    7664:	bd10      	pop	{r4, pc}
    7666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    766a:	f7ff bf3f 	b.w	74ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4ec>
    766e:	0000      	.short	0x0000
    7670:	20000104 	.word	0x20000104
    7674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7678:	4c1d      	ldr	r4, [pc, #116]	; (76f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6f0>)
    767a:	2600      	movs	r6, #0
    767c:	6860      	ldr	r0, [r4, #4]
    767e:	f880 607c 	strb.w	r6, [r0, #124]	; 0x7c
    7682:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
    7686:	b911      	cbnz	r1, 768e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68e>
    7688:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    768c:	b350      	cbz	r0, 76e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6e4>
    768e:	f004 fdee 	bl	c26e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7692:	4680      	mov	r8, r0
    7694:	6860      	ldr	r0, [r4, #4]
    7696:	4641      	mov	r1, r8
    7698:	6c40      	ldr	r0, [r0, #68]	; 0x44
    769a:	f7f9 ff89 	bl	15b0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    769e:	4f15      	ldr	r7, [pc, #84]	; (76f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6f4>)
    76a0:	4605      	mov	r5, r0
    76a2:	fb90 f0f7 	sdiv	r0, r0, r7
    76a6:	fb07 5010 	mls	r0, r7, r0, r5
    76aa:	4241      	negs	r1, r0
    76ac:	4640      	mov	r0, r8
    76ae:	f7f9 ff4d 	bl	154c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    76b2:	6861      	ldr	r1, [r4, #4]
    76b4:	6448      	str	r0, [r1, #68]	; 0x44
    76b6:	fb95 f0f7 	sdiv	r0, r5, r7
    76ba:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    76bc:	4410      	add	r0, r2
    76be:	6788      	str	r0, [r1, #120]	; 0x78
    76c0:	f7fe f89c 	bl	57fc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    76c4:	6861      	ldr	r1, [r4, #4]
    76c6:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    76c8:	4290      	cmp	r0, r2
    76ca:	d80b      	bhi.n	76e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6e4>
    76cc:	f8c1 8044 	str.w	r8, [r1, #68]	; 0x44
    76d0:	678e      	str	r6, [r1, #120]	; 0x78
    76d2:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    76d6:	b110      	cbz	r0, 76de <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6de>
    76d8:	2001      	movs	r0, #1
    76da:	f7fd ff79 	bl	55d0 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    76de:	2001      	movs	r0, #1
    76e0:	f7ff fd12 	bl	7108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>
    76e4:	6861      	ldr	r1, [r4, #4]
    76e6:	2002      	movs	r0, #2
    76e8:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    76ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    76f0:	20000104 	.word	0x20000104
    76f4:	000f4240 	.word	0x000f4240
    76f8:	0000750d 	.word	0x0000750d
    76fc:	000074ed 	.word	0x000074ed
    7700:	0000e513 	.word	0x0000e513
    7704:	0000e513 	.word	0x0000e513
    7708:	0000e513 	.word	0x0000e513
    770c:	0000751d 	.word	0x0000751d
    7710:	0000e513 	.word	0x0000e513
    7714:	0000e513 	.word	0x0000e513
    7718:	0000e513 	.word	0x0000e513
    771c:	0000e513 	.word	0x0000e513
    7720:	0000e513 	.word	0x0000e513
    7724:	00007641 	.word	0x00007641
    7728:	000075bd 	.word	0x000075bd
    772c:	0000e513 	.word	0x0000e513
    7730:	0000e513 	.word	0x0000e513
    7734:	00007311 	.word	0x00007311
    7738:	000072ed 	.word	0x000072ed
    773c:	00000000 	.word	0x00000000
    7740:	0000e51d 	.word	0x0000e51d
    7744:	0000e4bb 	.word	0x0000e4bb
    7748:	0000e4cd 	.word	0x0000e4cd
    774c:	0000e4db 	.word	0x0000e4db
    7750:	00006a89 	.word	0x00006a89
    7754:	0000738d 	.word	0x0000738d
    7758:	0000746d 	.word	0x0000746d
    775c:	00007734 	.word	0x00007734
    7760:	0000773c 	.word	0x0000773c
    7764:	000076f8 	.word	0x000076f8
    7768:	0000774c 	.word	0x0000774c
    776c:	00007744 	.word	0x00007744
    7770:	00007349 	.word	0x00007349
    7774:	000071c5 	.word	0x000071c5
    7778:	00007299 	.word	0x00007299
    777c:	0000e52f 	.word	0x0000e52f

00007780 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    7780:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    7784:	461d      	mov	r5, r3
    7786:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    778a:	4616      	mov	r6, r2
    778c:	4688      	mov	r8, r1
    778e:	4681      	mov	r9, r0
    7790:	f7fc ff16 	bl	45c0 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7794:	4604      	mov	r4, r0
    7796:	f005 fd40 	bl	d21a <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    779a:	2801      	cmp	r0, #1
    779c:	d063      	beq.n	7866 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
    779e:	4620      	mov	r0, r4
    77a0:	f006 ff90 	bl	e6c4 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    77a4:	4604      	mov	r4, r0
    77a6:	221c      	movs	r2, #28
    77a8:	2100      	movs	r1, #0
    77aa:	f004 ff4f 	bl	c64c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    77ae:	2701      	movs	r7, #1
    77b0:	7027      	strb	r7, [r4, #0]
    77b2:	ea5f 0008 	movs.w	r0, r8
    77b6:	d009      	beq.n	77cc <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4c>
    77b8:	2801      	cmp	r0, #1
    77ba:	d00b      	beq.n	77d4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x54>
    77bc:	2802      	cmp	r0, #2
    77be:	d02d      	beq.n	781c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9c>
    77c0:	f1b8 0f06 	cmp.w	r8, #6
    77c4:	d02c      	beq.n	7820 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa0>
    77c6:	f240 217d 	movw	r1, #637	; 0x27d
    77ca:	e049      	b.n	7860 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe0>
    77cc:	7aa0      	ldrb	r0, [r4, #10]
    77ce:	f040 0001 	orr.w	r0, r0, #1
    77d2:	e026      	b.n	7822 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
    77d4:	7aa0      	ldrb	r0, [r4, #10]
    77d6:	f040 0005 	orr.w	r0, r0, #5
    77da:	bf00      	nop
    77dc:	f040 0010 	orr.w	r0, r0, #16
    77e0:	72a0      	strb	r0, [r4, #10]
    77e2:	1c63      	adds	r3, r4, #1
    77e4:	1ca2      	adds	r2, r4, #2
    77e6:	4648      	mov	r0, r9
    77e8:	990a      	ldr	r1, [sp, #40]	; 0x28
    77ea:	f006 ff50 	bl	e68e <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    77ee:	f884 a009 	strb.w	sl, [r4, #9]
    77f2:	7327      	strb	r7, [r4, #12]
    77f4:	2000      	movs	r0, #0
    77f6:	7360      	strb	r0, [r4, #13]
    77f8:	20ff      	movs	r0, #255	; 0xff
    77fa:	73a0      	strb	r0, [r4, #14]
    77fc:	7aa1      	ldrb	r1, [r4, #10]
    77fe:	0749      	lsls	r1, r1, #29
    7800:	d518      	bpl.n	7834 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb4>
    7802:	f104 0014 	add.w	r0, r4, #20
    7806:	1e41      	subs	r1, r0, #1
    7808:	2d02      	cmp	r5, #2
    780a:	d00d      	beq.n	7828 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
    780c:	2d03      	cmp	r5, #3
    780e:	d00b      	beq.n	7828 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
    7810:	f8d9 2008 	ldr.w	r2, [r9, #8]
    7814:	6813      	ldr	r3, [r2, #0]
    7816:	6003      	str	r3, [r0, #0]
    7818:	8892      	ldrh	r2, [r2, #4]
    781a:	e008      	b.n	782e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xae>
    781c:	7aa0      	ldrb	r0, [r4, #10]
    781e:	e7dd      	b.n	77dc <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    7820:	7aa0      	ldrb	r0, [r4, #10]
    7822:	f040 0002 	orr.w	r0, r0, #2
    7826:	e7d9      	b.n	77dc <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    7828:	6832      	ldr	r2, [r6, #0]
    782a:	6002      	str	r2, [r0, #0]
    782c:	88b2      	ldrh	r2, [r6, #4]
    782e:	8082      	strh	r2, [r0, #4]
    7830:	700d      	strb	r5, [r1, #0]
    7832:	e000      	b.n	7836 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
    7834:	74e0      	strb	r0, [r4, #19]
    7836:	207f      	movs	r0, #127	; 0x7f
    7838:	76a0      	strb	r0, [r4, #26]
    783a:	f884 b01b 	strb.w	fp, [r4, #27]
    783e:	f7fc feb9 	bl	45b4 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7842:	4604      	mov	r4, r0
    7844:	f7fc febc 	bl	45c0 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7848:	2201      	movs	r2, #1
    784a:	4621      	mov	r1, r4
    784c:	f006 ff43 	bl	e6d6 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    7850:	b120      	cbz	r0, 785c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xdc>
    7852:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    7856:	2005      	movs	r0, #5
    7858:	f000 b8d0 	b.w	79fc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    785c:	f240 219d 	movw	r1, #669	; 0x29d
    7860:	2033      	movs	r0, #51	; 0x33
    7862:	f7fc fa7b 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7866:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
	...

0000786c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    786c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7870:	4616      	mov	r6, r2
    7872:	460c      	mov	r4, r1
    7874:	4605      	mov	r5, r0
    7876:	f006 fb98 	bl	dfaa <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>
    787a:	7460      	strb	r0, [r4, #17]
    787c:	4628      	mov	r0, r5
    787e:	f006 fb8b 	bl	df98 <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>
    7882:	74a0      	strb	r0, [r4, #18]
    7884:	1cea      	adds	r2, r5, #3
    7886:	4b14      	ldr	r3, [pc, #80]	; (78d8 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    7888:	1d90      	adds	r0, r2, #6
    788a:	2100      	movs	r1, #0
    788c:	2e07      	cmp	r6, #7
    788e:	d21f      	bcs.n	78d0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    7890:	e8df f006 	tbb	[pc, r6]
    7894:	1e110b04 	.word	0x1e110b04
    7898:	00041e13 	.word	0x00041e13
    789c:	781b      	ldrb	r3, [r3, #0]
    789e:	e00d      	b.n	78bc <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    78a0:	60e0      	str	r0, [r4, #12]
    78a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    78a6:	60e1      	str	r1, [r4, #12]
    78a8:	e7fb      	b.n	78a2 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    78aa:	785b      	ldrb	r3, [r3, #1]
    78ac:	7063      	strb	r3, [r4, #1]
    78ae:	e9c4 2001 	strd	r2, r0, [r4, #4]
    78b2:	7421      	strb	r1, [r4, #16]
    78b4:	e7f7      	b.n	78a6 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    78b6:	789b      	ldrb	r3, [r3, #2]
    78b8:	e000      	b.n	78bc <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    78ba:	78db      	ldrb	r3, [r3, #3]
    78bc:	7063      	strb	r3, [r4, #1]
    78be:	e9c4 2101 	strd	r2, r1, [r4, #4]
    78c2:	786a      	ldrb	r2, [r5, #1]
    78c4:	1f92      	subs	r2, r2, #6
    78c6:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    78ca:	7422      	strb	r2, [r4, #16]
    78cc:	d0eb      	beq.n	78a6 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    78ce:	e7e7      	b.n	78a0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    78d0:	7061      	strb	r1, [r4, #1]
    78d2:	6061      	str	r1, [r4, #4]
    78d4:	60a1      	str	r1, [r4, #8]
    78d6:	e7ec      	b.n	78b2 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    78d8:	0000fb21 	.word	0x0000fb21

000078dc <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>:
    78dc:	b570      	push	{r4, r5, r6, lr}
    78de:	f003 ff5d 	bl	b79c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    78e2:	4c0e      	ldr	r4, [pc, #56]	; (791c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x40>)
    78e4:	4606      	mov	r6, r0
    78e6:	7860      	ldrb	r0, [r4, #1]
    78e8:	b170      	cbz	r0, 7908 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    78ea:	e9d4 5101 	ldrd	r5, r1, [r4, #4]
    78ee:	4632      	mov	r2, r6
    78f0:	4628      	mov	r0, r5
    78f2:	f006 f852 	bl	d99a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    78f6:	6060      	str	r0, [r4, #4]
    78f8:	42a8      	cmp	r0, r5
    78fa:	d005      	beq.n	7908 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    78fc:	68e1      	ldr	r1, [r4, #12]
    78fe:	1b40      	subs	r0, r0, r5
    7900:	4408      	add	r0, r1
    7902:	60e0      	str	r0, [r4, #12]
    7904:	f7fa fe16 	bl	2534 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7908:	6860      	ldr	r0, [r4, #4]
    790a:	42b0      	cmp	r0, r6
    790c:	d301      	bcc.n	7912 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x36>
    790e:	7820      	ldrb	r0, [r4, #0]
    7910:	b108      	cbz	r0, 7916 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x3a>
    7912:	2000      	movs	r0, #0
    7914:	bd70      	pop	{r4, r5, r6, pc}
    7916:	2001      	movs	r0, #1
    7918:	bd70      	pop	{r4, r5, r6, pc}
    791a:	0000      	.short	0x0000
    791c:	20001140 	.word	0x20001140

00007920 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>:
    7920:	b510      	push	{r4, lr}
    7922:	2905      	cmp	r1, #5
    7924:	d22d      	bcs.n	7982 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x62>
    7926:	e8df f001 	tbb	[pc, r1]
    792a:	0a05      	.short	0x0a05
    792c:	00280e03 	.word	0x00280e03
    7930:	2100      	movs	r1, #0
    7932:	e000      	b.n	7936 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x16>
    7934:	2101      	movs	r1, #1
    7936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    793a:	f000 babb 	b.w	7eb4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x20c>
    793e:	2103      	movs	r1, #3
    7940:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    7944:	bd10      	pop	{r4, pc}
    7946:	4911      	ldr	r1, [pc, #68]	; (798c <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x6c>)
    7948:	4604      	mov	r4, r0
    794a:	68c0      	ldr	r0, [r0, #12]
    794c:	6008      	str	r0, [r1, #0]
    794e:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
    7952:	6220      	str	r0, [r4, #32]
    7954:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    7958:	83a0      	strh	r0, [r4, #28]
    795a:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    795e:	60e0      	str	r0, [r4, #12]
    7960:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    7964:	82a0      	strh	r0, [r4, #20]
    7966:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    796a:	82e0      	strh	r0, [r4, #22]
    796c:	4620      	mov	r0, r4
    796e:	f006 feec 	bl	e74a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3e>
    7972:	2002      	movs	r0, #2
    7974:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    7978:	bd10      	pop	{r4, pc}
    797a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    797e:	f006 bee4 	b.w	e74a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3e>
    7982:	f640 3158 	movw	r1, #2904	; 0xb58
    7986:	2035      	movs	r0, #53	; 0x35
    7988:	f7fc f9e8 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    798c:	20000114 	.word	0x20000114

00007990 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    7990:	b570      	push	{r4, r5, r6, lr}
    7992:	4606      	mov	r6, r0
    7994:	f004 fc6b 	bl	c26e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7998:	4c17      	ldr	r4, [pc, #92]	; (79f8 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x68>)
    799a:	4601      	mov	r1, r0
    799c:	6920      	ldr	r0, [r4, #16]
    799e:	f7f9 fe07 	bl	15b0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    79a2:	4605      	mov	r5, r0
    79a4:	b156      	cbz	r6, 79bc <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x2c>
    79a6:	2e03      	cmp	r6, #3
    79a8:	d00d      	beq.n	79c6 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    79aa:	2e04      	cmp	r6, #4
    79ac:	d00e      	beq.n	79cc <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3c>
    79ae:	2e06      	cmp	r6, #6
    79b0:	d01d      	beq.n	79ee <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    79b2:	f44f 61b2 	mov.w	r1, #1424	; 0x590
    79b6:	2035      	movs	r0, #53	; 0x35
    79b8:	f7fc f9d0 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    79bc:	2001      	movs	r0, #1
    79be:	f006 fea8 	bl	e712 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    79c2:	3098      	adds	r0, #152	; 0x98
    79c4:	e004      	b.n	79d0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x40>
    79c6:	f44f 7057 	mov.w	r0, #860	; 0x35c
    79ca:	e001      	b.n	79d0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x40>
    79cc:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    79d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    79d2:	4405      	add	r5, r0
    79d4:	39f1      	subs	r1, #241	; 0xf1
    79d6:	428d      	cmp	r5, r1
    79d8:	d307      	bcc.n	79ea <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5a>
    79da:	2600      	movs	r6, #0
    79dc:	f000 fd36 	bl	844c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44c>
    79e0:	b140      	cbz	r0, 79f4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>
    79e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    79e4:	38f1      	subs	r0, #241	; 0xf1
    79e6:	4285      	cmp	r5, r0
    79e8:	d203      	bcs.n	79f2 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x62>
    79ea:	2601      	movs	r6, #1
    79ec:	e002      	b.n	79f4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>
    79ee:	2001      	movs	r0, #1
    79f0:	bd70      	pop	{r4, r5, r6, pc}
    79f2:	2600      	movs	r6, #0
    79f4:	4630      	mov	r0, r6
    79f6:	bd70      	pop	{r4, r5, r6, pc}
    79f8:	20001150 	.word	0x20001150

000079fc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>:
    79fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    79fe:	2501      	movs	r5, #1
    7a00:	4c24      	ldr	r4, [pc, #144]	; (7a94 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x98>)
    7a02:	2806      	cmp	r0, #6
    7a04:	d243      	bcs.n	7a8e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x92>
    7a06:	e8df f000 	tbb	[pc, r0]
    7a0a:	1903      	.short	0x1903
    7a0c:	3e232319 	.word	0x3e232319
    7a10:	f7fe fae4 	bl	5fdc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7a14:	7860      	ldrb	r0, [r4, #1]
    7a16:	bb88      	cbnz	r0, 7a7c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    7a18:	2200      	movs	r2, #0
    7a1a:	4611      	mov	r1, r2
    7a1c:	4668      	mov	r0, sp
    7a1e:	f000 fd5f 	bl	84e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e0>
    7a22:	b148      	cbz	r0, 7a38 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3c>
    7a24:	f7fe fd32 	bl	648c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7a28:	7800      	ldrb	r0, [r0, #0]
    7a2a:	4669      	mov	r1, sp
    7a2c:	f006 fe9f 	bl	e76e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    7a30:	bb20      	cbnz	r0, 7a7c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    7a32:	f640 2163 	movw	r1, #2659	; 0xa63
    7a36:	e01c      	b.n	7a72 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    7a38:	70e5      	strb	r5, [r4, #3]
    7a3a:	e020      	b.n	7a7e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    7a3c:	2802      	cmp	r0, #2
    7a3e:	d005      	beq.n	7a4c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x50>
    7a40:	2000      	movs	r0, #0
    7a42:	b004      	add	sp, #16
    7a44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7a48:	f000 ba50 	b.w	7eec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x244>
    7a4c:	2001      	movs	r0, #1
    7a4e:	e7f8      	b.n	7a42 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x46>
    7a50:	2804      	cmp	r0, #4
    7a52:	d011      	beq.n	7a78 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7c>
    7a54:	f05f 0600 	movs.w	r6, #0
    7a58:	f7fe fac0 	bl	5fdc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7a5c:	7725      	strb	r5, [r4, #28]
    7a5e:	7766      	strb	r6, [r4, #29]
    7a60:	69a1      	ldr	r1, [r4, #24]
    7a62:	2000      	movs	r0, #0
    7a64:	f881 0120 	strb.w	r0, [r1, #288]	; 0x120
    7a68:	f000 faca 	bl	8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
    7a6c:	b130      	cbz	r0, 7a7c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    7a6e:	f640 3118 	movw	r1, #2840	; 0xb18
    7a72:	2035      	movs	r0, #53	; 0x35
    7a74:	f7fc f972 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a78:	2601      	movs	r6, #1
    7a7a:	e7ed      	b.n	7a58 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5c>
    7a7c:	e7ff      	b.n	7a7e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    7a7e:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7a82:	f000 baad 	b.w	7fe0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x338>
    7a86:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7a8a:	f7fe baa7 	b.w	5fdc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7a8e:	f640 31d4 	movw	r1, #3028	; 0xbd4
    7a92:	e7ee      	b.n	7a72 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    7a94:	20001150 	.word	0x20001150

00007a98 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>:
    7a98:	b508      	push	{r3, lr}
    7a9a:	2244      	movs	r2, #68	; 0x44
    7a9c:	2100      	movs	r1, #0
    7a9e:	480c      	ldr	r0, [pc, #48]	; (7ad0 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x38>)
    7aa0:	f004 fdd4 	bl	c64c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7aa4:	f7fe fcf2 	bl	648c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7aa8:	2120      	movs	r1, #32
    7aaa:	7001      	strb	r1, [r0, #0]
    7aac:	4808      	ldr	r0, [pc, #32]	; (7ad0 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x38>)
    7aae:	3810      	subs	r0, #16
    7ab0:	2100      	movs	r1, #0
    7ab2:	6001      	str	r1, [r0, #0]
    7ab4:	6041      	str	r1, [r0, #4]
    7ab6:	6081      	str	r1, [r0, #8]
    7ab8:	60c1      	str	r1, [r0, #12]
    7aba:	f000 f80b 	bl	7ad4 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
    7abe:	f242 7010 	movw	r0, #10000	; 0x2710
    7ac2:	9000      	str	r0, [sp, #0]
    7ac4:	2201      	movs	r2, #1
    7ac6:	4669      	mov	r1, sp
    7ac8:	1080      	asrs	r0, r0, #2
    7aca:	f000 fad7 	bl	807c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c>
    7ace:	bd08      	pop	{r3, pc}
    7ad0:	20001150 	.word	0x20001150

00007ad4 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>:
    7ad4:	4804      	ldr	r0, [pc, #16]	; (7ae8 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x14>)
    7ad6:	b510      	push	{r4, lr}
    7ad8:	7800      	ldrb	r0, [r0, #0]
    7ada:	b108      	cbz	r0, 7ae0 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xc>
    7adc:	f000 f8a8 	bl	7c30 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    7ae0:	f000 f8fe 	bl	7ce0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    7ae4:	2000      	movs	r0, #0
    7ae6:	bd10      	pop	{r4, pc}
    7ae8:	20001150 	.word	0x20001150

00007aec <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>:
    7aec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    7af0:	4c1e      	ldr	r4, [pc, #120]	; (7b6c <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x80>)
    7af2:	4607      	mov	r7, r0
    7af4:	460e      	mov	r6, r1
    7af6:	7820      	ldrb	r0, [r4, #0]
    7af8:	b118      	cbz	r0, 7b02 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x16>
    7afa:	200c      	movs	r0, #12
    7afc:	b004      	add	sp, #16
    7afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b02:	f7fe fcc3 	bl	648c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7b06:	4605      	mov	r5, r0
    7b08:	61a7      	str	r7, [r4, #24]
    7b0a:	f897 0120 	ldrb.w	r0, [r7, #288]	; 0x120
    7b0e:	b110      	cbz	r0, 7b16 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x2a>
    7b10:	f44f 6184 	mov.w	r1, #1056	; 0x420
    7b14:	e026      	b.n	7b64 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x78>
    7b16:	2005      	movs	r0, #5
    7b18:	7020      	strb	r0, [r4, #0]
    7b1a:	2000      	movs	r0, #0
    7b1c:	7060      	strb	r0, [r4, #1]
    7b1e:	7720      	strb	r0, [r4, #28]
    7b20:	4630      	mov	r0, r6
    7b22:	f000 f911 	bl	7d48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa0>
    7b26:	f000 fc41 	bl	83ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ac>
    7b2a:	6320      	str	r0, [r4, #48]	; 0x30
    7b2c:	2100      	movs	r1, #0
    7b2e:	4810      	ldr	r0, [pc, #64]	; (7b70 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x84>)
    7b30:	f7fa fbf6 	bl	2320 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    7b34:	7028      	strb	r0, [r5, #0]
    7b36:	2820      	cmp	r0, #32
    7b38:	d00c      	beq.n	7b54 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x68>
    7b3a:	2200      	movs	r2, #0
    7b3c:	2101      	movs	r1, #1
    7b3e:	4668      	mov	r0, sp
    7b40:	f000 fcce 	bl	84e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e0>
    7b44:	b148      	cbz	r0, 7b5a <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x6e>
    7b46:	7828      	ldrb	r0, [r5, #0]
    7b48:	4669      	mov	r1, sp
    7b4a:	f006 fe10 	bl	e76e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    7b4e:	b138      	cbz	r0, 7b60 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    7b50:	2000      	movs	r0, #0
    7b52:	e7d3      	b.n	7afc <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x10>
    7b54:	f240 412f 	movw	r1, #1071	; 0x42f
    7b58:	e004      	b.n	7b64 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x78>
    7b5a:	f240 4132 	movw	r1, #1074	; 0x432
    7b5e:	e001      	b.n	7b64 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x78>
    7b60:	f240 4133 	movw	r1, #1075	; 0x433
    7b64:	2035      	movs	r0, #53	; 0x35
    7b66:	f7fc f8f9 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b6a:	0000      	.short	0x0000
    7b6c:	20001150 	.word	0x20001150
    7b70:	00007d69 	.word	0x00007d69

00007b74 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>:
    7b74:	4902      	ldr	r1, [pc, #8]	; (7b80 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI+0xc>)
    7b76:	6989      	ldr	r1, [r1, #24]
    7b78:	6001      	str	r1, [r0, #0]
    7b7a:	f000 b859 	b.w	7c30 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    7b7e:	0000      	.short	0x0000
    7b80:	20001150 	.word	0x20001150

00007b84 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
    7b84:	4901      	ldr	r1, [pc, #4]	; (7b8c <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
    7b86:	7048      	strb	r0, [r1, #1]
    7b88:	4770      	bx	lr
    7b8a:	0000      	.short	0x0000
    7b8c:	20001140 	.word	0x20001140

00007b90 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>:
    7b90:	b570      	push	{r4, r5, r6, lr}
    7b92:	4605      	mov	r5, r0
    7b94:	4907      	ldr	r1, [pc, #28]	; (7bb4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x24>)
    7b96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7b9a:	fbb1 f4f0 	udiv	r4, r1, r0
    7b9e:	f006 fe36 	bl	e80e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    7ba2:	1901      	adds	r1, r0, r4
    7ba4:	4628      	mov	r0, r5
    7ba6:	f201 1137 	addw	r1, r1, #311	; 0x137
    7baa:	f006 fbb4 	bl	e316 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    7bae:	b280      	uxth	r0, r0
    7bb0:	bd70      	pop	{r4, r5, r6, pc}
    7bb2:	0000      	.short	0x0000
    7bb4:	00012105 	.word	0x00012105

00007bb8 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>:
    7bb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7bba:	4606      	mov	r6, r0
    7bbc:	b111      	cbz	r1, 7bc4 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xc>
    7bbe:	2011      	movs	r0, #17
    7bc0:	b004      	add	sp, #16
    7bc2:	bd70      	pop	{r4, r5, r6, pc}
    7bc4:	4c18      	ldr	r4, [pc, #96]	; (7c28 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x70>)
    7bc6:	7820      	ldrb	r0, [r4, #0]
    7bc8:	b108      	cbz	r0, 7bce <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x16>
    7bca:	200c      	movs	r0, #12
    7bcc:	e7f8      	b.n	7bc0 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x8>
    7bce:	f7fe fc5d 	bl	648c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7bd2:	4605      	mov	r5, r0
    7bd4:	2000      	movs	r0, #0
    7bd6:	7060      	strb	r0, [r4, #1]
    7bd8:	2004      	movs	r0, #4
    7bda:	7020      	strb	r0, [r4, #0]
    7bdc:	4630      	mov	r0, r6
    7bde:	f000 f8b3 	bl	7d48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa0>
    7be2:	f000 fbe3 	bl	83ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ac>
    7be6:	6320      	str	r0, [r4, #48]	; 0x30
    7be8:	2100      	movs	r1, #0
    7bea:	4810      	ldr	r0, [pc, #64]	; (7c2c <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x74>)
    7bec:	f7fa fb98 	bl	2320 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    7bf0:	7028      	strb	r0, [r5, #0]
    7bf2:	2820      	cmp	r0, #32
    7bf4:	d00c      	beq.n	7c10 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x58>
    7bf6:	2200      	movs	r2, #0
    7bf8:	2101      	movs	r1, #1
    7bfa:	4668      	mov	r0, sp
    7bfc:	f000 fc70 	bl	84e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e0>
    7c00:	b148      	cbz	r0, 7c16 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x5e>
    7c02:	7828      	ldrb	r0, [r5, #0]
    7c04:	4669      	mov	r1, sp
    7c06:	f006 fdb2 	bl	e76e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    7c0a:	b138      	cbz	r0, 7c1c <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x64>
    7c0c:	2000      	movs	r0, #0
    7c0e:	e7d7      	b.n	7bc0 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x8>
    7c10:	f240 4196 	movw	r1, #1174	; 0x496
    7c14:	e004      	b.n	7c20 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x68>
    7c16:	f44f 6193 	mov.w	r1, #1176	; 0x498
    7c1a:	e001      	b.n	7c20 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x68>
    7c1c:	f240 4199 	movw	r1, #1177	; 0x499
    7c20:	2035      	movs	r0, #53	; 0x35
    7c22:	f7fc f89b 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c26:	0000      	.short	0x0000
    7c28:	20001150 	.word	0x20001150
    7c2c:	00007d69 	.word	0x00007d69

00007c30 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>:
    7c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7c34:	2700      	movs	r7, #0
    7c36:	f7fe fc29 	bl	648c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7c3a:	4c17      	ldr	r4, [pc, #92]	; (7c98 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x68>)
    7c3c:	4605      	mov	r5, r0
    7c3e:	7820      	ldrb	r0, [r4, #0]
    7c40:	2804      	cmp	r0, #4
    7c42:	d005      	beq.n	7c50 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    7c44:	7820      	ldrb	r0, [r4, #0]
    7c46:	2805      	cmp	r0, #5
    7c48:	d002      	beq.n	7c50 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    7c4a:	200c      	movs	r0, #12
    7c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c50:	2001      	movs	r0, #1
    7c52:	7060      	strb	r0, [r4, #1]
    7c54:	7b20      	ldrb	r0, [r4, #12]
    7c56:	b160      	cbz	r0, 7c72 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x42>
    7c58:	f3ef 8610 	mrs	r6, PRIMASK
    7c5c:	b672      	cpsid	i
    7c5e:	7b20      	ldrb	r0, [r4, #12]
    7c60:	b128      	cbz	r0, 7c6e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    7c62:	7b60      	ldrb	r0, [r4, #13]
    7c64:	b118      	cbz	r0, 7c6e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    7c66:	f7fe fde3 	bl	6830 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    7c6a:	f000 f9b9 	bl	7fe0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x338>
    7c6e:	b126      	cbz	r6, 7c7a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4a>
    7c70:	e004      	b.n	7c7c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    7c72:	7828      	ldrb	r0, [r5, #0]
    7c74:	f7fa f90a 	bl	1e8c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    7c78:	e000      	b.n	7c7c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    7c7a:	b662      	cpsie	i
    7c7c:	7828      	ldrb	r0, [r5, #0]
    7c7e:	f7fa fa43 	bl	2108 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7c82:	f000 fd5d 	bl	8740 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x740>
    7c86:	2000      	movs	r0, #0
    7c88:	7060      	strb	r0, [r4, #1]
    7c8a:	7f20      	ldrb	r0, [r4, #28]
    7c8c:	b100      	cbz	r0, 7c90 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x60>
    7c8e:	270c      	movs	r7, #12
    7c90:	f000 fd80 	bl	8794 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x794>
    7c94:	4638      	mov	r0, r7
    7c96:	e7d9      	b.n	7c4c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x1c>
    7c98:	20001150 	.word	0x20001150

00007c9c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
    7c9c:	4801      	ldr	r0, [pc, #4]	; (7ca4 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
    7c9e:	7800      	ldrb	r0, [r0, #0]
    7ca0:	4770      	bx	lr
    7ca2:	0000      	.short	0x0000
    7ca4:	20001150 	.word	0x20001150

00007ca8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>:
    7ca8:	490c      	ldr	r1, [pc, #48]	; (7cdc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34>)
    7caa:	b508      	push	{r3, lr}
    7cac:	7809      	ldrb	r1, [r1, #0]
    7cae:	b121      	cbz	r1, 7cba <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x12>
    7cb0:	f240 414f 	movw	r1, #1103	; 0x44f
    7cb4:	2035      	movs	r0, #53	; 0x35
    7cb6:	f7fc f851 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7cba:	2300      	movs	r3, #0
    7cbc:	9300      	str	r3, [sp, #0]
    7cbe:	7801      	ldrb	r1, [r0, #0]
    7cc0:	461a      	mov	r2, r3
    7cc2:	07c9      	lsls	r1, r1, #31
    7cc4:	d003      	beq.n	7cce <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x26>
    7cc6:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    7cca:	2201      	movs	r2, #1
    7ccc:	9000      	str	r0, [sp, #0]
    7cce:	4669      	mov	r1, sp
    7cd0:	4618      	mov	r0, r3
    7cd2:	f000 f9d3 	bl	807c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c>
    7cd6:	2000      	movs	r0, #0
    7cd8:	bd08      	pop	{r3, pc}
    7cda:	0000      	.short	0x0000
    7cdc:	20001150 	.word	0x20001150
    7ce0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    7ce2:	4c18      	ldr	r4, [pc, #96]	; (7d44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9c>)
    7ce4:	2001      	movs	r0, #1
    7ce6:	7020      	strb	r0, [r4, #0]
    7ce8:	f64f 75ff 	movw	r5, #65535	; 0xffff
    7cec:	e00b      	b.n	7d06 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5e>
    7cee:	2100      	movs	r1, #0
    7cf0:	f005 fcd3 	bl	d69a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7cf4:	0006      	movs	r6, r0
    7cf6:	d010      	beq.n	7d1a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x72>
    7cf8:	f896 0121 	ldrb.w	r0, [r6, #289]	; 0x121
    7cfc:	f7fa fa04 	bl	2108 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7d00:	4630      	mov	r0, r6
    7d02:	f006 fd4c 	bl	e79e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x92>
    7d06:	4669      	mov	r1, sp
    7d08:	2000      	movs	r0, #0
    7d0a:	f005 fccf 	bl	d6ac <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    7d0e:	b180      	cbz	r0, 7d32 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    7d10:	f44f 710f 	mov.w	r1, #572	; 0x23c
    7d14:	2035      	movs	r0, #53	; 0x35
    7d16:	f7fc f821 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d1a:	f240 5141 	movw	r1, #1345	; 0x541
    7d1e:	e7f9      	b.n	7d14 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6c>
    7d20:	9802      	ldr	r0, [sp, #8]
    7d22:	b130      	cbz	r0, 7d32 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    7d24:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    7d28:	b119      	cbz	r1, 7d32 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    7d2a:	8800      	ldrh	r0, [r0, #0]
    7d2c:	42a8      	cmp	r0, r5
    7d2e:	d1de      	bne.n	7cee <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x46>
    7d30:	e004      	b.n	7d3c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x94>
    7d32:	4668      	mov	r0, sp
    7d34:	f7fc fa42 	bl	41bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7d38:	2800      	cmp	r0, #0
    7d3a:	d0f1      	beq.n	7d20 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x78>
    7d3c:	2000      	movs	r0, #0
    7d3e:	7020      	strb	r0, [r4, #0]
    7d40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7d42:	0000      	.short	0x0000
    7d44:	20001140 	.word	0x20001140
    7d48:	4906      	ldr	r1, [pc, #24]	; (7d64 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbc>)
    7d4a:	b140      	cbz	r0, 7d5e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb6>
    7d4c:	2201      	movs	r2, #1
    7d4e:	708a      	strb	r2, [r1, #2]
    7d50:	f242 7210 	movw	r2, #10000	; 0x2710
    7d54:	4350      	muls	r0, r2
    7d56:	684a      	ldr	r2, [r1, #4]
    7d58:	4410      	add	r0, r2
    7d5a:	6208      	str	r0, [r1, #32]
    7d5c:	4770      	bx	lr
    7d5e:	2000      	movs	r0, #0
    7d60:	7088      	strb	r0, [r1, #2]
    7d62:	4770      	bx	lr
    7d64:	20001150 	.word	0x20001150
    7d68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7d6a:	460d      	mov	r5, r1
    7d6c:	2001      	movs	r0, #1
    7d6e:	f006 fcb9 	bl	e6e4 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    7d72:	b2c4      	uxtb	r4, r0
    7d74:	200b      	movs	r0, #11
    7d76:	f006 fcb5 	bl	e6e4 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    7d7a:	b2c0      	uxtb	r0, r0
    7d7c:	4284      	cmp	r4, r0
    7d7e:	d002      	beq.n	7d86 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xde>
    7d80:	f240 21c5 	movw	r1, #709	; 0x2c5
    7d84:	e073      	b.n	7e6e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7d86:	f7fe fb81 	bl	648c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7d8a:	2601      	movs	r6, #1
    7d8c:	4c3b      	ldr	r4, [pc, #236]	; (7e7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d4>)
    7d8e:	2d09      	cmp	r5, #9
    7d90:	d270      	bcs.n	7e74 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1cc>
    7d92:	e8df f005 	tbb	[pc, r5]
    7d96:	3605      	.short	0x3605
    7d98:	6f464a4a 	.word	0x6f464a4a
    7d9c:	006a665e 	.word	0x006a665e
    7da0:	7326      	strb	r6, [r4, #12]
    7da2:	7861      	ldrb	r1, [r4, #1]
    7da4:	2900      	cmp	r1, #0
    7da6:	d12b      	bne.n	7e00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
    7da8:	7800      	ldrb	r0, [r0, #0]
    7daa:	f7f9 fc25 	bl	15f8 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    7dae:	4605      	mov	r5, r0
    7db0:	6120      	str	r0, [r4, #16]
    7db2:	f000 fd09 	bl	87c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c8>
    7db6:	b118      	cbz	r0, 7dc0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x118>
    7db8:	2000      	movs	r0, #0
    7dba:	f88d 0004 	strb.w	r0, [sp, #4]
    7dbe:	e001      	b.n	7dc4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x11c>
    7dc0:	f88d 6004 	strb.w	r6, [sp, #4]
    7dc4:	4629      	mov	r1, r5
    7dc6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7dc8:	f7f9 fbf2 	bl	15b0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7dcc:	6861      	ldr	r1, [r4, #4]
    7dce:	fbb0 f2f1 	udiv	r2, r0, r1
    7dd2:	fb01 0012 	mls	r0, r1, r2, r0
    7dd6:	b150      	cbz	r0, 7dee <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x146>
    7dd8:	f05f 0000 	movs.w	r0, #0
    7ddc:	f88d 0005 	strb.w	r0, [sp, #5]
    7de0:	4668      	mov	r0, sp
    7de2:	f7fe fc8d 	bl	6700 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    7de6:	b120      	cbz	r0, 7df2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x14a>
    7de8:	f240 21ff 	movw	r1, #767	; 0x2ff
    7dec:	e03f      	b.n	7e6e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7dee:	2001      	movs	r0, #1
    7df0:	e7f4      	b.n	7ddc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x134>
    7df2:	4922      	ldr	r1, [pc, #136]	; (7e7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d4>)
    7df4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7df6:	3910      	subs	r1, #16
    7df8:	38e0      	subs	r0, #224	; 0xe0
    7dfa:	60c8      	str	r0, [r1, #12]
    7dfc:	f7fa fb9a 	bl	2534 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7e00:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    7e02:	7860      	ldrb	r0, [r4, #1]
    7e04:	b128      	cbz	r0, 7e12 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x16a>
    7e06:	f7fe fd13 	bl	6830 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    7e0a:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7e0e:	f000 b8e7 	b.w	7fe0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x338>
    7e12:	7366      	strb	r6, [r4, #13]
    7e14:	f7fe fd06 	bl	6824 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    7e18:	2800      	cmp	r0, #0
    7e1a:	d0f1      	beq.n	7e00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
    7e1c:	f240 3112 	movw	r1, #786	; 0x312
    7e20:	e025      	b.n	7e6e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7e22:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7e26:	f003 bea9 	b.w	bb7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    7e2a:	7805      	ldrb	r5, [r0, #0]
    7e2c:	2201      	movs	r2, #1
    7e2e:	2100      	movs	r1, #0
    7e30:	4668      	mov	r0, sp
    7e32:	f000 fb55 	bl	84e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e0>
    7e36:	b140      	cbz	r0, 7e4a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a2>
    7e38:	4669      	mov	r1, sp
    7e3a:	4628      	mov	r0, r5
    7e3c:	f006 fc97 	bl	e76e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    7e40:	2800      	cmp	r0, #0
    7e42:	d1dd      	bne.n	7e00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
    7e44:	f640 217f 	movw	r1, #2687	; 0xa7f
    7e48:	e011      	b.n	7e6e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7e4a:	70e6      	strb	r6, [r4, #3]
    7e4c:	f000 f818 	bl	7e80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d8>
    7e50:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    7e52:	f000 fafb 	bl	844c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44c>
    7e56:	2800      	cmp	r0, #0
    7e58:	d1fa      	bne.n	7e50 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a8>
    7e5a:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7e5e:	f006 bb2a 	b.w	e4b6 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    7e62:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7e66:	f000 b80b 	b.w	7e80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d8>
    7e6a:	f240 3136 	movw	r1, #822	; 0x336
    7e6e:	2035      	movs	r0, #53	; 0x35
    7e70:	f7fb ff74 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e74:	f240 313a 	movw	r1, #826	; 0x33a
    7e78:	e7f9      	b.n	7e6e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7e7a:	0000      	.short	0x0000
    7e7c:	20001150 	.word	0x20001150
    7e80:	b510      	push	{r4, lr}
    7e82:	4c0b      	ldr	r4, [pc, #44]	; (7eb0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x208>)
    7e84:	7820      	ldrb	r0, [r4, #0]
    7e86:	b130      	cbz	r0, 7e96 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1ee>
    7e88:	f000 fc5a 	bl	8740 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x740>
    7e8c:	78e0      	ldrb	r0, [r4, #3]
    7e8e:	b158      	cbz	r0, 7ea8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x200>
    7e90:	7f20      	ldrb	r0, [r4, #28]
    7e92:	b128      	cbz	r0, 7ea0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1f8>
    7e94:	e008      	b.n	7ea8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x200>
    7e96:	f240 21b1 	movw	r1, #689	; 0x2b1
    7e9a:	2035      	movs	r0, #53	; 0x35
    7e9c:	f7fb ff5e 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ea0:	f7fe fcd8 	bl	6854 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    7ea4:	f7fe f89a 	bl	5fdc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7eac:	f000 bc72 	b.w	8794 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x794>
    7eb0:	20001150 	.word	0x20001150
    7eb4:	b510      	push	{r4, lr}
    7eb6:	4604      	mov	r4, r0
    7eb8:	2901      	cmp	r1, #1
    7eba:	d102      	bne.n	7ec2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21a>
    7ebc:	480a      	ldr	r0, [pc, #40]	; (7ee8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x240>)
    7ebe:	7800      	ldrb	r0, [r0, #0]
    7ec0:	b140      	cbz	r0, 7ed4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x22c>
    7ec2:	2004      	movs	r0, #4
    7ec4:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    7ec8:	f003 fca4 	bl	b814 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    7ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7ed0:	f7fa ba4e 	b.w	2370 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    7ed4:	2200      	movs	r2, #0
    7ed6:	2101      	movs	r1, #1
    7ed8:	4620      	mov	r0, r4
    7eda:	f006 fc78 	bl	e7ce <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xc2>
    7ede:	f834 0f7c 	ldrh.w	r0, [r4, #124]!
    7ee2:	1c40      	adds	r0, r0, #1
    7ee4:	8020      	strh	r0, [r4, #0]
    7ee6:	e7ef      	b.n	7ec8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x220>
    7ee8:	20001140 	.word	0x20001140
    7eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7ef0:	4c39      	ldr	r4, [pc, #228]	; (7fd8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x330>)
    7ef2:	4682      	mov	sl, r0
    7ef4:	6926      	ldr	r6, [r4, #16]
    7ef6:	f003 fc51 	bl	b79c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7efa:	4605      	mov	r5, r0
    7efc:	69a0      	ldr	r0, [r4, #24]
    7efe:	2201      	movs	r2, #1
    7f00:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    7f04:	f880 206b 	strb.w	r2, [r0, #107]	; 0x6b
    7f08:	3062      	adds	r0, #98	; 0x62
    7f0a:	2101      	movs	r1, #1
    7f0c:	7281      	strb	r1, [r0, #10]
    7f0e:	69a0      	ldr	r0, [r4, #24]
    7f10:	2100      	movs	r1, #0
    7f12:	302c      	adds	r0, #44	; 0x2c
    7f14:	f006 f9e6 	bl	e2e4 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    7f18:	2101      	movs	r1, #1
    7f1a:	2000      	movs	r0, #0
    7f1c:	f006 fc83 	bl	e826 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x11a>
    7f20:	69a7      	ldr	r7, [r4, #24]
    7f22:	1971      	adds	r1, r6, r5
    7f24:	4408      	add	r0, r1
    7f26:	f200 49af 	addw	r9, r0, #1199	; 0x4af
    7f2a:	f8d7 800c 	ldr.w	r8, [r7, #12]
    7f2e:	f002 fb67 	bl	a600 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>
    7f32:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    7f36:	4288      	cmp	r0, r1
    7f38:	d00a      	beq.n	7f50 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2a8>
    7f3a:	464a      	mov	r2, r9
    7f3c:	4641      	mov	r1, r8
    7f3e:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
    7f42:	f006 fd9e 	bl	ea82 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    7f46:	4540      	cmp	r0, r8
    7f48:	d903      	bls.n	7f52 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2aa>
    7f4a:	f240 51f6 	movw	r1, #1526	; 0x5f6
    7f4e:	e022      	b.n	7f96 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2ee>
    7f50:	2000      	movs	r0, #0
    7f52:	4922      	ldr	r1, [pc, #136]	; (7fdc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x334>)
    7f54:	4607      	mov	r7, r0
    7f56:	6849      	ldr	r1, [r1, #4]
    7f58:	4288      	cmp	r0, r1
    7f5a:	69a0      	ldr	r0, [r4, #24]
    7f5c:	68c1      	ldr	r1, [r0, #12]
    7f5e:	d202      	bcs.n	7f66 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2be>
    7f60:	440f      	add	r7, r1
    7f62:	6201      	str	r1, [r0, #32]
    7f64:	e008      	b.n	7f78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2d0>
    7f66:	4638      	mov	r0, r7
    7f68:	f005 fed3 	bl	dd12 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    7f6c:	69a1      	ldr	r1, [r4, #24]
    7f6e:	68c9      	ldr	r1, [r1, #12]
    7f70:	f005 fecb 	bl	dd0a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    7f74:	69a1      	ldr	r1, [r4, #24]
    7f76:	6208      	str	r0, [r1, #32]
    7f78:	69a0      	ldr	r0, [r4, #24]
    7f7a:	68c1      	ldr	r1, [r0, #12]
    7f7c:	2005      	movs	r0, #5
    7f7e:	f005 fece 	bl	dd1e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    7f82:	69a1      	ldr	r1, [r4, #24]
    7f84:	b280      	uxth	r0, r0
    7f86:	8388      	strh	r0, [r1, #28]
    7f88:	69a1      	ldr	r1, [r4, #24]
    7f8a:	6a09      	ldr	r1, [r1, #32]
    7f8c:	1a79      	subs	r1, r7, r1
    7f8e:	4288      	cmp	r0, r1
    7f90:	d804      	bhi.n	7f9c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2f4>
    7f92:	f640 21ee 	movw	r1, #2798	; 0xaee
    7f96:	2035      	movs	r0, #53	; 0x35
    7f98:	f7fb fee0 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f9c:	2101      	movs	r1, #1
    7f9e:	4650      	mov	r0, sl
    7fa0:	f006 fc41 	bl	e826 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x11a>
    7fa4:	4428      	add	r0, r5
    7fa6:	19c5      	adds	r5, r0, r7
    7fa8:	2101      	movs	r1, #1
    7faa:	4650      	mov	r0, sl
    7fac:	f005 fde3 	bl	db76 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    7fb0:	4405      	add	r5, r0
    7fb2:	2001      	movs	r0, #1
    7fb4:	f007 fcfb 	bl	f9ae <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7fb8:	f64a 2113 	movw	r1, #43539	; 0xaa13
    7fbc:	4408      	add	r0, r1
    7fbe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7fc2:	fbb0 f0f1 	udiv	r0, r0, r1
    7fc6:	1a29      	subs	r1, r5, r0
    7fc8:	4630      	mov	r0, r6
    7fca:	f7f9 fabf 	bl	154c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7fce:	69a1      	ldr	r1, [r4, #24]
    7fd0:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    7fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7fd8:	20001150 	.word	0x20001150
    7fdc:	20000114 	.word	0x20000114
    7fe0:	b510      	push	{r4, lr}
    7fe2:	4c06      	ldr	r4, [pc, #24]	; (7ffc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x354>)
    7fe4:	7b20      	ldrb	r0, [r4, #12]
    7fe6:	2800      	cmp	r0, #0
    7fe8:	d006      	beq.n	7ff8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x350>
    7fea:	f003 fc13 	bl	b814 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    7fee:	f7fa f9bf 	bl	2370 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    7ff2:	2000      	movs	r0, #0
    7ff4:	7320      	strb	r0, [r4, #12]
    7ff6:	7360      	strb	r0, [r4, #13]
    7ff8:	bd10      	pop	{r4, pc}
    7ffa:	0000      	.short	0x0000
    7ffc:	20001150 	.word	0x20001150
    8000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    8002:	4c1c      	ldr	r4, [pc, #112]	; (8074 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x74>)
    8004:	7820      	ldrb	r0, [r4, #0]
    8006:	2805      	cmp	r0, #5
    8008:	d002      	beq.n	8010 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10>
    800a:	200c      	movs	r0, #12
    800c:	b004      	add	sp, #16
    800e:	bd10      	pop	{r4, pc}
    8010:	69a1      	ldr	r1, [r4, #24]
    8012:	b129      	cbz	r1, 8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>
    8014:	f891 0120 	ldrb.w	r0, [r1, #288]	; 0x120
    8018:	b128      	cbz	r0, 8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
    801a:	f240 41fa 	movw	r1, #1274	; 0x4fa
    801e:	e025      	b.n	806c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c>
    8020:	f240 41f9 	movw	r1, #1273	; 0x4f9
    8024:	e022      	b.n	806c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c>
    8026:	f891 0121 	ldrb.w	r0, [r1, #289]	; 0x121
    802a:	2820      	cmp	r0, #32
    802c:	d002      	beq.n	8034 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34>
    802e:	f240 41fc 	movw	r1, #1276	; 0x4fc
    8032:	e01b      	b.n	806c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c>
    8034:	4810      	ldr	r0, [pc, #64]	; (8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>)
    8036:	f7fa f973 	bl	2320 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    803a:	69a1      	ldr	r1, [r4, #24]
    803c:	2820      	cmp	r0, #32
    803e:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    8042:	d00e      	beq.n	8062 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x62>
    8044:	2300      	movs	r3, #0
    8046:	2201      	movs	r2, #1
    8048:	4668      	mov	r0, sp
    804a:	f000 f8bd 	bl	81c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c8>
    804e:	69a0      	ldr	r0, [r4, #24]
    8050:	4669      	mov	r1, sp
    8052:	f890 0121 	ldrb.w	r0, [r0, #289]	; 0x121
    8056:	f006 fb8a 	bl	e76e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    805a:	b128      	cbz	r0, 8068 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x68>
    805c:	2000      	movs	r0, #0
    805e:	61a0      	str	r0, [r4, #24]
    8060:	e7d4      	b.n	800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
    8062:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    8066:	e001      	b.n	806c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c>
    8068:	f240 5103 	movw	r1, #1283	; 0x503
    806c:	2035      	movs	r0, #53	; 0x35
    806e:	f7fb fe75 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8072:	0000      	.short	0x0000
    8074:	20001150 	.word	0x20001150
    8078:	000080d1 	.word	0x000080d1
    807c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8080:	4d11      	ldr	r5, [pc, #68]	; (80c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc8>)
    8082:	4616      	mov	r6, r2
    8084:	460f      	mov	r7, r1
    8086:	2400      	movs	r4, #0
    8088:	6068      	str	r0, [r5, #4]
    808a:	f006 fbc0 	bl	e80e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    808e:	f8df c03c 	ldr.w	ip, [pc, #60]	; 80cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcc>
    8092:	2100      	movs	r1, #0
    8094:	f81c 2001 	ldrb.w	r2, [ip, r1]
    8098:	4232      	tst	r2, r6
    809a:	d007      	beq.n	80ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xac>
    809c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    80a0:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    80a4:	1a1b      	subs	r3, r3, r0
    80a6:	1c64      	adds	r4, r4, #1
    80a8:	b2e4      	uxtb	r4, r4
    80aa:	6093      	str	r3, [r2, #8]
    80ac:	1c49      	adds	r1, r1, #1
    80ae:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    80b2:	d0ef      	beq.n	8094 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94>
    80b4:	f016 0f0e 	tst.w	r6, #14
    80b8:	d004      	beq.n	80c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc4>
    80ba:	f640 11b6 	movw	r1, #2486	; 0x9b6
    80be:	2035      	movs	r0, #53	; 0x35
    80c0:	f7fb fe4c 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    80c8:	20001150 	.word	0x20001150
    80cc:	0000fb25 	.word	0x0000fb25
    80d0:	b570      	push	{r4, r5, r6, lr}
    80d2:	460d      	mov	r5, r1
    80d4:	0004      	movs	r4, r0
    80d6:	d00c      	beq.n	80f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf2>
    80d8:	2001      	movs	r0, #1
    80da:	f006 fb03 	bl	e6e4 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    80de:	b2c6      	uxtb	r6, r0
    80e0:	200b      	movs	r0, #11
    80e2:	f006 faff 	bl	e6e4 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    80e6:	b2c0      	uxtb	r0, r0
    80e8:	4286      	cmp	r6, r0
    80ea:	d005      	beq.n	80f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf8>
    80ec:	f240 215f 	movw	r1, #607	; 0x25f
    80f0:	e061      	b.n	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
    80f2:	f44f 7117 	mov.w	r1, #604	; 0x25c
    80f6:	e05e      	b.n	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
    80f8:	2d09      	cmp	r5, #9
    80fa:	d25f      	bcs.n	81bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1bc>
    80fc:	e8df f005 	tbb	[pc, r5]
    8100:	3d3d3505 	.word	0x3d3d3505
    8104:	4b445e39 	.word	0x4b445e39
    8108:	0059      	.short	0x0059
    810a:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    810e:	b348      	cbz	r0, 8164 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x164>
    8110:	4620      	mov	r0, r4
    8112:	f000 fd69 	bl	8be8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>
    8116:	f006 fb7a 	bl	e80e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    811a:	f500 709c 	add.w	r0, r0, #312	; 0x138
    811e:	b285      	uxth	r5, r0
    8120:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8124:	2128      	movs	r1, #40	; 0x28
    8126:	f006 fb0e 	bl	e746 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3a>
    812a:	182e      	adds	r6, r5, r0
    812c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    812e:	68e0      	ldr	r0, [r4, #12]
    8130:	4288      	cmp	r0, r1
    8132:	d200      	bcs.n	8136 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x136>
    8134:	4601      	mov	r1, r0
    8136:	4632      	mov	r2, r6
    8138:	4620      	mov	r0, r4
    813a:	f006 f85c 	bl	e1f6 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    813e:	4d21      	ldr	r5, [pc, #132]	; (81c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c4>)
    8140:	4632      	mov	r2, r6
    8142:	6068      	str	r0, [r5, #4]
    8144:	4620      	mov	r0, r4
    8146:	68e1      	ldr	r1, [r4, #12]
    8148:	f006 f855 	bl	e1f6 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    814c:	60a8      	str	r0, [r5, #8]
    814e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8152:	f006 f8b1 	bl	e2b8 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8156:	f2a0 1027 	subw	r0, r0, #295	; 0x127
    815a:	60e8      	str	r0, [r5, #12]
    815c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8160:	f7fa b9e8 	b.w	2534 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8164:	f240 2165 	movw	r1, #613	; 0x265
    8168:	e025      	b.n	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
    816a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    816e:	f006 bbe0 	b.w	e932 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>
    8172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8176:	f003 bd01 	b.w	bb7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    817a:	4620      	mov	r0, r4
    817c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8180:	2201      	movs	r2, #1
    8182:	2100      	movs	r1, #0
    8184:	f006 bb23 	b.w	e7ce <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xc2>
    8188:	2001      	movs	r0, #1
    818a:	f7f9 f8b3 	bl	12f4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    818e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8192:	f005 bb62 	b.w	d85a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    8196:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    819a:	2804      	cmp	r0, #4
    819c:	d002      	beq.n	81a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a4>
    819e:	f240 2199 	movw	r1, #665	; 0x299
    81a2:	e008      	b.n	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
    81a4:	4620      	mov	r0, r4
    81a6:	f006 fafa 	bl	e79e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x92>
    81aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    81ae:	f7fd bf15 	b.w	5fdc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    81b2:	f44f 7129 	mov.w	r1, #676	; 0x2a4
    81b6:	2035      	movs	r0, #53	; 0x35
    81b8:	f7fb fdd0 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    81bc:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    81c0:	e7f9      	b.n	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
    81c2:	0000      	.short	0x0000
    81c4:	20001140 	.word	0x20001140
    81c8:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    81cc:	4605      	mov	r5, r0
    81ce:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    81d2:	2600      	movs	r6, #0
    81d4:	f8d1 b020 	ldr.w	fp, [r1, #32]
    81d8:	469a      	mov	sl, r3
    81da:	460c      	mov	r4, r1
    81dc:	280d      	cmp	r0, #13
    81de:	d020      	beq.n	8222 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x222>
    81e0:	280c      	cmp	r0, #12
    81e2:	d01e      	beq.n	8222 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x222>
    81e4:	2824      	cmp	r0, #36	; 0x24
    81e6:	d01c      	beq.n	8222 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x222>
    81e8:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    81ec:	2824      	cmp	r0, #36	; 0x24
    81ee:	d018      	beq.n	8222 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x222>
    81f0:	2000      	movs	r0, #0
    81f2:	4680      	mov	r8, r0
    81f4:	f006 fb00 	bl	e7f8 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    81f8:	4681      	mov	r9, r0
    81fa:	f1ba 0f00 	cmp.w	sl, #0
    81fe:	d003      	beq.n	8208 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x208>
    8200:	2101      	movs	r1, #1
    8202:	4620      	mov	r0, r4
    8204:	f006 fb3c 	bl	e880 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    8208:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    820c:	2701      	movs	r7, #1
    820e:	b150      	cbz	r0, 8226 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x226>
    8210:	2801      	cmp	r0, #1
    8212:	d01b      	beq.n	824c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24c>
    8214:	2802      	cmp	r0, #2
    8216:	d011      	beq.n	823c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x23c>
    8218:	2803      	cmp	r0, #3
    821a:	d017      	beq.n	824c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24c>
    821c:	f640 1139 	movw	r1, #2361	; 0x939
    8220:	e07b      	b.n	831a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x31a>
    8222:	2001      	movs	r0, #1
    8224:	e7e5      	b.n	81f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1f2>
    8226:	9802      	ldr	r0, [sp, #8]
    8228:	b128      	cbz	r0, 8236 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x236>
    822a:	f884 7120 	strb.w	r7, [r4, #288]	; 0x120
    822e:	4620      	mov	r0, r4
    8230:	f006 fa8b 	bl	e74a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3e>
    8234:	e00b      	b.n	824e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24e>
    8236:	f640 01ff 	movw	r1, #2303	; 0x8ff
    823a:	e06e      	b.n	831a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x31a>
    823c:	4838      	ldr	r0, [pc, #224]	; (8320 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x320>)
    823e:	6801      	ldr	r1, [r0, #0]
    8240:	2003      	movs	r0, #3
    8242:	eb01 060b 	add.w	r6, r1, fp
    8246:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    824a:	e000      	b.n	824e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24e>
    824c:	68e6      	ldr	r6, [r4, #12]
    824e:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    8252:	4631      	mov	r1, r6
    8254:	f7f9 f97a 	bl	154c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8258:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    825c:	60e8      	str	r0, [r5, #12]
    825e:	2000      	movs	r0, #0
    8260:	7028      	strb	r0, [r5, #0]
    8262:	f8a5 9008 	strh.w	r9, [r5, #8]
    8266:	4620      	mov	r0, r4
    8268:	f000 fc0c 	bl	8a84 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    826c:	f1a8 0101 	sub.w	r1, r8, #1
    8270:	4208      	tst	r0, r1
    8272:	d101      	bne.n	8278 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x278>
    8274:	72af      	strb	r7, [r5, #10]
    8276:	e005      	b.n	8284 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x284>
    8278:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    827c:	2801      	cmp	r0, #1
    827e:	d017      	beq.n	82b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2b0>
    8280:	2003      	movs	r0, #3
    8282:	72a8      	strb	r0, [r5, #10]
    8284:	46b9      	mov	r9, r7
    8286:	72ef      	strb	r7, [r5, #11]
    8288:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    828c:	f006 f814 	bl	e2b8 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8290:	6068      	str	r0, [r5, #4]
    8292:	f1ba 0f00 	cmp.w	sl, #0
    8296:	d03c      	beq.n	8312 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x312>
    8298:	4631      	mov	r1, r6
    829a:	4628      	mov	r0, r5
    829c:	f005 fcca 	bl	dc34 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    82a0:	b287      	uxth	r7, r0
    82a2:	4620      	mov	r0, r4
    82a4:	f000 fbee 	bl	8a84 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    82a8:	f1b8 0f00 	cmp.w	r8, #0
    82ac:	d002      	beq.n	82b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2b4>
    82ae:	e014      	b.n	82da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2da>
    82b0:	2002      	movs	r0, #2
    82b2:	e7e6      	b.n	8282 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x282>
    82b4:	42b8      	cmp	r0, r7
    82b6:	d810      	bhi.n	82da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2da>
    82b8:	4607      	mov	r7, r0
    82ba:	f885 900a 	strb.w	r9, [r5, #10]
    82be:	fb06 f107 	mul.w	r1, r6, r7
    82c2:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    82c6:	f7f9 f941 	bl	154c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    82ca:	60e8      	str	r0, [r5, #12]
    82cc:	b31e      	cbz	r6, 8316 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x316>
    82ce:	4631      	mov	r1, r6
    82d0:	4628      	mov	r0, r5
    82d2:	f005 fcaf 	bl	dc34 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    82d6:	4438      	add	r0, r7
    82d8:	b287      	uxth	r7, r0
    82da:	4639      	mov	r1, r7
    82dc:	4620      	mov	r0, r4
    82de:	f006 facf 	bl	e880 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    82e2:	68e8      	ldr	r0, [r5, #12]
    82e4:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    82e8:	6f20      	ldr	r0, [r4, #112]	; 0x70
    82ea:	2800      	cmp	r0, #0
    82ec:	d011      	beq.n	8312 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x312>
    82ee:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    82f2:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
    82f6:	1a40      	subs	r0, r0, r1
    82f8:	b202      	sxth	r2, r0
    82fa:	2a00      	cmp	r2, #0
    82fc:	dd09      	ble.n	8312 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x312>
    82fe:	f834 0f74 	ldrh.w	r0, [r4, #116]!
    8302:	4402      	add	r2, r0
    8304:	1e52      	subs	r2, r2, #1
    8306:	fb92 f2f0 	sdiv	r2, r2, r0
    830a:	b292      	uxth	r2, r2
    830c:	fb02 1000 	mla	r0, r2, r0, r1
    8310:	86e0      	strh	r0, [r4, #54]	; 0x36
    8312:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    8316:	f640 1174 	movw	r1, #2420	; 0x974
    831a:	2035      	movs	r0, #53	; 0x35
    831c:	f7fb fd1e 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8320:	20000114 	.word	0x20000114
    8324:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8328:	460d      	mov	r5, r1
    832a:	4607      	mov	r7, r0
    832c:	f000 fa58 	bl	87e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7e0>
    8330:	4c1d      	ldr	r4, [pc, #116]	; (83a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a8>)
    8332:	6861      	ldr	r1, [r4, #4]
    8334:	f7f9 f90a 	bl	154c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8338:	4606      	mov	r6, r0
    833a:	4601      	mov	r1, r0
    833c:	4638      	mov	r0, r7
    833e:	f7f9 f937 	bl	15b0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8342:	4607      	mov	r7, r0
    8344:	f006 fa69 	bl	e81a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x10e>
    8348:	4287      	cmp	r7, r0
    834a:	da10      	bge.n	836e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36e>
    834c:	6960      	ldr	r0, [r4, #20]
    834e:	f000 fa47 	bl	87e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7e0>
    8352:	4631      	mov	r1, r6
    8354:	f7f9 f92c 	bl	15b0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8358:	6861      	ldr	r1, [r4, #4]
    835a:	fbb0 f0f1 	udiv	r0, r0, r1
    835e:	6028      	str	r0, [r5, #0]
    8360:	6861      	ldr	r1, [r4, #4]
    8362:	b004      	add	sp, #16
    8364:	4630      	mov	r0, r6
    8366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    836a:	f7f9 b8ef 	b.w	154c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    836e:	2000      	movs	r0, #0
    8370:	f88d 0000 	strb.w	r0, [sp]
    8374:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8376:	9001      	str	r0, [sp, #4]
    8378:	f006 fa3e 	bl	e7f8 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    837c:	f8ad 0008 	strh.w	r0, [sp, #8]
    8380:	2001      	movs	r0, #1
    8382:	f88d 000b 	strb.w	r0, [sp, #11]
    8386:	6960      	ldr	r0, [r4, #20]
    8388:	f000 fa2a 	bl	87e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7e0>
    838c:	9003      	str	r0, [sp, #12]
    838e:	f000 f9c1 	bl	8714 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x714>
    8392:	f88d 000a 	strb.w	r0, [sp, #10]
    8396:	4668      	mov	r0, sp
    8398:	6861      	ldr	r1, [r4, #4]
    839a:	f005 fc4b 	bl	dc34 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    839e:	6028      	str	r0, [r5, #0]
    83a0:	9803      	ldr	r0, [sp, #12]
    83a2:	b004      	add	sp, #16
    83a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    83a8:	20001150 	.word	0x20001150
    83ac:	b510      	push	{r4, lr}
    83ae:	2400      	movs	r4, #0
    83b0:	f006 fa2d 	bl	e80e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    83b4:	4a06      	ldr	r2, [pc, #24]	; (83d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d0>)
    83b6:	2100      	movs	r1, #0
    83b8:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    83bc:	4404      	add	r4, r0
    83be:	689b      	ldr	r3, [r3, #8]
    83c0:	1c49      	adds	r1, r1, #1
    83c2:	441c      	add	r4, r3
    83c4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    83c8:	d0f6      	beq.n	83b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3b8>
    83ca:	4620      	mov	r0, r4
    83cc:	bd10      	pop	{r4, pc}
    83ce:	0000      	.short	0x0000
    83d0:	20001150 	.word	0x20001150
    83d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    83d6:	4c1b      	ldr	r4, [pc, #108]	; (8444 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x444>)
    83d8:	4606      	mov	r6, r0
    83da:	460d      	mov	r5, r1
    83dc:	78a0      	ldrb	r0, [r4, #2]
    83de:	b360      	cbz	r0, 843a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x43a>
    83e0:	4919      	ldr	r1, [pc, #100]	; (8448 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x448>)
    83e2:	6a20      	ldr	r0, [r4, #32]
    83e4:	4288      	cmp	r0, r1
    83e6:	d828      	bhi.n	843a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x43a>
    83e8:	2000      	movs	r0, #0
    83ea:	f88d 0000 	strb.w	r0, [sp]
    83ee:	9501      	str	r5, [sp, #4]
    83f0:	f006 fa02 	bl	e7f8 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    83f4:	f8ad 0008 	strh.w	r0, [sp, #8]
    83f8:	2001      	movs	r0, #1
    83fa:	f88d 000b 	strb.w	r0, [sp, #11]
    83fe:	f006 fa0c 	bl	e81a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x10e>
    8402:	4601      	mov	r1, r0
    8404:	4630      	mov	r0, r6
    8406:	f7f9 f8a1 	bl	154c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    840a:	9003      	str	r0, [sp, #12]
    840c:	2003      	movs	r0, #3
    840e:	f88d 000a 	strb.w	r0, [sp, #10]
    8412:	4668      	mov	r0, sp
    8414:	f7f9 fbd8 	bl	1bc8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    8418:	4606      	mov	r6, r0
    841a:	4629      	mov	r1, r5
    841c:	9803      	ldr	r0, [sp, #12]
    841e:	f7f9 f895 	bl	154c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8422:	4605      	mov	r5, r0
    8424:	6a21      	ldr	r1, [r4, #32]
    8426:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8428:	f7f9 f890 	bl	154c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    842c:	4601      	mov	r1, r0
    842e:	b13e      	cbz	r6, 8440 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x440>
    8430:	4628      	mov	r0, r5
    8432:	f7f9 f8bd 	bl	15b0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8436:	2800      	cmp	r0, #0
    8438:	db02      	blt.n	8440 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x440>
    843a:	2001      	movs	r0, #1
    843c:	b004      	add	sp, #16
    843e:	bd70      	pop	{r4, r5, r6, pc}
    8440:	2000      	movs	r0, #0
    8442:	e7fb      	b.n	843c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x43c>
    8444:	20001150 	.word	0x20001150
    8448:	07a12000 	.word	0x07a12000
    844c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8450:	f003 ff0d 	bl	c26e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8454:	4c21      	ldr	r4, [pc, #132]	; (84dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4dc>)
    8456:	4607      	mov	r7, r0
    8458:	6920      	ldr	r0, [r4, #16]
    845a:	f000 f95b 	bl	8714 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x714>
    845e:	4606      	mov	r6, r0
    8460:	f7f9 f81a 	bl	1498 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    8464:	4605      	mov	r5, r0
    8466:	2865      	cmp	r0, #101	; 0x65
    8468:	d326      	bcc.n	84b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4b8>
    846a:	1c68      	adds	r0, r5, #1
    846c:	d027      	beq.n	84be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4be>
    846e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8470:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    8472:	1948      	adds	r0, r1, r5
    8474:	4282      	cmp	r2, r0
    8476:	d800      	bhi.n	847a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x47a>
    8478:	1a55      	subs	r5, r2, r1
    847a:	f06f 0139 	mvn.w	r1, #57	; 0x39
    847e:	4638      	mov	r0, r7
    8480:	f7f9 f864 	bl	154c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8484:	4629      	mov	r1, r5
    8486:	f000 f9bd 	bl	8804 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x804>
    848a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    848c:	4408      	add	r0, r1
    848e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8490:	1a45      	subs	r5, r0, r1
    8492:	f241 3088 	movw	r0, #5000	; 0x1388
    8496:	4285      	cmp	r5, r0
    8498:	d900      	bls.n	849c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x49c>
    849a:	4605      	mov	r5, r0
    849c:	f003 fee7 	bl	c26e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    84a0:	4601      	mov	r1, r0
    84a2:	4638      	mov	r0, r7
    84a4:	f7f9 f884 	bl	15b0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    84a8:	309d      	adds	r0, #157	; 0x9d
    84aa:	4285      	cmp	r5, r0
    84ac:	d304      	bcc.n	84b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4b8>
    84ae:	4631      	mov	r1, r6
    84b0:	4628      	mov	r0, r5
    84b2:	f7f8 ff2f 	bl	1314 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    84b6:	b120      	cbz	r0, 84c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c2>
    84b8:	2000      	movs	r0, #0
    84ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    84be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    84c0:	e7e5      	b.n	848e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x48e>
    84c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    84c4:	4905      	ldr	r1, [pc, #20]	; (84dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4dc>)
    84c6:	4428      	add	r0, r5
    84c8:	3910      	subs	r1, #16
    84ca:	6260      	str	r0, [r4, #36]	; 0x24
    84cc:	68c8      	ldr	r0, [r1, #12]
    84ce:	4428      	add	r0, r5
    84d0:	60c8      	str	r0, [r1, #12]
    84d2:	f7fa f82f 	bl	2534 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    84d6:	2001      	movs	r0, #1
    84d8:	e7ef      	b.n	84ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4ba>
    84da:	0000      	.short	0x0000
    84dc:	20001150 	.word	0x20001150
    84e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    84e4:	b08c      	sub	sp, #48	; 0x30
    84e6:	4616      	mov	r6, r2
    84e8:	4607      	mov	r7, r0
    84ea:	f003 fec0 	bl	c26e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    84ee:	4c87      	ldr	r4, [pc, #540]	; (870c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70c>)
    84f0:	9002      	str	r0, [sp, #8]
    84f2:	2500      	movs	r5, #0
    84f4:	f8d4 a008 	ldr.w	sl, [r4, #8]
    84f8:	f006 f989 	bl	e80e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    84fc:	68a1      	ldr	r1, [r4, #8]
    84fe:	4408      	add	r0, r1
    8500:	6861      	ldr	r1, [r4, #4]
    8502:	4288      	cmp	r0, r1
    8504:	d101      	bne.n	850a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50a>
    8506:	2001      	movs	r0, #1
    8508:	e000      	b.n	850c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50c>
    850a:	2000      	movs	r0, #0
    850c:	4683      	mov	fp, r0
    850e:	980d      	ldr	r0, [sp, #52]	; 0x34
    8510:	ea06 090b 	and.w	r9, r6, fp
    8514:	2800      	cmp	r0, #0
    8516:	d065      	beq.n	85e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5e4>
    8518:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    851c:	9802      	ldr	r0, [sp, #8]
    851e:	f7f9 f815 	bl	154c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8522:	9000      	str	r0, [sp, #0]
    8524:	f002 f872 	bl	a60c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    8528:	4680      	mov	r8, r0
    852a:	4878      	ldr	r0, [pc, #480]	; (870c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70c>)
    852c:	7800      	ldrb	r0, [r0, #0]
    852e:	4e77      	ldr	r6, [pc, #476]	; (870c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70c>)
    8530:	362c      	adds	r6, #44	; 0x2c
    8532:	2805      	cmp	r0, #5
    8534:	d12e      	bne.n	8594 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x594>
    8536:	4875      	ldr	r0, [pc, #468]	; (870c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70c>)
    8538:	6980      	ldr	r0, [r0, #24]
    853a:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
    853e:	f002 f845 	bl	a5cc <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    8542:	4604      	mov	r4, r0
    8544:	4540      	cmp	r0, r8
    8546:	d009      	beq.n	855c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x55c>
    8548:	4870      	ldr	r0, [pc, #448]	; (870c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70c>)
    854a:	4621      	mov	r1, r4
    854c:	6980      	ldr	r0, [r0, #24]
    854e:	f500 7084 	add.w	r0, r0, #264	; 0x108
    8552:	f001 ffff 	bl	a554 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    8556:	2000      	movs	r0, #0
    8558:	6170      	str	r0, [r6, #20]
    855a:	e00c      	b.n	8576 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x576>
    855c:	496b      	ldr	r1, [pc, #428]	; (870c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70c>)
    855e:	6988      	ldr	r0, [r1, #24]
    8560:	f500 7084 	add.w	r0, r0, #264	; 0x108
    8564:	6170      	str	r0, [r6, #20]
    8566:	698a      	ldr	r2, [r1, #24]
    8568:	6b08      	ldr	r0, [r1, #48]	; 0x30
    856a:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
    856e:	4290      	cmp	r0, r2
    8570:	d200      	bcs.n	8574 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x574>
    8572:	4610      	mov	r0, r2
    8574:	6308      	str	r0, [r1, #48]	; 0x30
    8576:	4865      	ldr	r0, [pc, #404]	; (870c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70c>)
    8578:	6980      	ldr	r0, [r0, #24]
    857a:	b130      	cbz	r0, 858a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58a>
    857c:	b144      	cbz	r4, 8590 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x590>
    857e:	e9d4 1200 	ldrd	r1, r2, [r4]
    8582:	4411      	add	r1, r2
    8584:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    8588:	e004      	b.n	8594 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x594>
    858a:	f240 51c5 	movw	r1, #1477	; 0x5c5
    858e:	e017      	b.n	85c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c0>
    8590:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
    8594:	4641      	mov	r1, r8
    8596:	4630      	mov	r0, r6
    8598:	f001 ffdc 	bl	a554 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    859c:	ea5f 0008 	movs.w	r0, r8
    85a0:	f8df 8168 	ldr.w	r8, [pc, #360]	; 870c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70c>
    85a4:	9a00      	ldr	r2, [sp, #0]
    85a6:	f8d8 4004 	ldr.w	r4, [r8, #4]
    85aa:	d00c      	beq.n	85c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c6>
    85ac:	e9d0 1000 	ldrd	r1, r0, [r0]
    85b0:	4408      	add	r0, r1
    85b2:	4621      	mov	r1, r4
    85b4:	f006 fa65 	bl	ea82 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    85b8:	42a0      	cmp	r0, r4
    85ba:	d904      	bls.n	85c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c6>
    85bc:	f240 51e3 	movw	r1, #1507	; 0x5e3
    85c0:	2035      	movs	r0, #53	; 0x35
    85c2:	f7fb fbcb 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    85c6:	4601      	mov	r1, r0
    85c8:	9800      	ldr	r0, [sp, #0]
    85ca:	f7f8 ffbf 	bl	154c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    85ce:	4606      	mov	r6, r0
    85d0:	f8d8 0004 	ldr.w	r0, [r8, #4]
    85d4:	4644      	mov	r4, r8
    85d6:	4241      	negs	r1, r0
    85d8:	4630      	mov	r0, r6
    85da:	f7f8 ffb7 	bl	154c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    85de:	62e0      	str	r0, [r4, #44]	; 0x2c
    85e0:	2001      	movs	r0, #1
    85e2:	e042      	b.n	866a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66a>
    85e4:	f1b9 0f00 	cmp.w	r9, #0
    85e8:	d018      	beq.n	861c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x61c>
    85ea:	2001      	movs	r0, #1
    85ec:	f006 f891 	bl	e712 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    85f0:	4604      	mov	r4, r0
    85f2:	2001      	movs	r0, #1
    85f4:	f007 f9db 	bl	f9ae <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    85f8:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    85fc:	4401      	add	r1, r0
    85fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8602:	fbb1 f0f0 	udiv	r0, r1, r0
    8606:	1821      	adds	r1, r4, r0
    8608:	31f1      	adds	r1, #241	; 0xf1
    860a:	9802      	ldr	r0, [sp, #8]
    860c:	f7ff fee2 	bl	83d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d4>
    8610:	b908      	cbnz	r0, 8616 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x616>
    8612:	f04f 0a00 	mov.w	sl, #0
    8616:	9e02      	ldr	r6, [sp, #8]
    8618:	9508      	str	r5, [sp, #32]
    861a:	e027      	b.n	866c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66c>
    861c:	b12e      	cbz	r6, 862a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x62a>
    861e:	a908      	add	r1, sp, #32
    8620:	9802      	ldr	r0, [sp, #8]
    8622:	f7ff fe7f 	bl	8324 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x324>
    8626:	4606      	mov	r6, r0
    8628:	e020      	b.n	866c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66c>
    862a:	9802      	ldr	r0, [sp, #8]
    862c:	f000 f8d8 	bl	87e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7e0>
    8630:	4c36      	ldr	r4, [pc, #216]	; (870c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70c>)
    8632:	e9d4 1a01 	ldrd	r1, sl, [r4, #4]
    8636:	f7f8 ff89 	bl	154c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    863a:	4606      	mov	r6, r0
    863c:	6920      	ldr	r0, [r4, #16]
    863e:	f000 f8c3 	bl	87c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c8>
    8642:	6861      	ldr	r1, [r4, #4]
    8644:	4348      	muls	r0, r1
    8646:	78a1      	ldrb	r1, [r4, #2]
    8648:	b131      	cbz	r1, 8658 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x658>
    864a:	6a21      	ldr	r1, [r4, #32]
    864c:	4281      	cmp	r1, r0
    864e:	d302      	bcc.n	8656 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x656>
    8650:	1a09      	subs	r1, r1, r0
    8652:	6221      	str	r1, [r4, #32]
    8654:	e000      	b.n	8658 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x658>
    8656:	6225      	str	r5, [r4, #32]
    8658:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    865a:	4601      	mov	r1, r0
    865c:	4610      	mov	r0, r2
    865e:	f7f8 ff75 	bl	154c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8662:	62e0      	str	r0, [r4, #44]	; 0x2c
    8664:	4630      	mov	r0, r6
    8666:	f000 f8af 	bl	87c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c8>
    866a:	9008      	str	r0, [sp, #32]
    866c:	2001      	movs	r0, #1
    866e:	f006 f850 	bl	e712 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    8672:	4604      	mov	r4, r0
    8674:	2001      	movs	r0, #1
    8676:	f007 f99a 	bl	f9ae <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    867a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    867e:	4401      	add	r1, r0
    8680:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8684:	fbb1 f0f0 	udiv	r0, r1, r0
    8688:	4404      	add	r4, r0
    868a:	4651      	mov	r1, sl
    868c:	4630      	mov	r0, r6
    868e:	34f1      	adds	r4, #241	; 0xf1
    8690:	f000 f8b8 	bl	8804 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x804>
    8694:	491d      	ldr	r1, [pc, #116]	; (870c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70c>)
    8696:	eb01 0285 	add.w	r2, r1, r5, lsl #2
    869a:	6892      	ldr	r2, [r2, #8]
    869c:	4282      	cmp	r2, r0
    869e:	d800      	bhi.n	86a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6a2>
    86a0:	4610      	mov	r0, r2
    86a2:	6288      	str	r0, [r1, #40]	; 0x28
    86a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    86a6:	b102      	cbz	r2, 86aa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6aa>
    86a8:	610e      	str	r6, [r1, #16]
    86aa:	4688      	mov	r8, r1
    86ac:	614e      	str	r6, [r1, #20]
    86ae:	f1bb 0f00 	cmp.w	fp, #0
    86b2:	d002      	beq.n	86ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ba>
    86b4:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
    86b8:	e001      	b.n	86be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6be>
    86ba:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
    86be:	f04f 0a01 	mov.w	sl, #1
    86c2:	f887 a00b 	strb.w	sl, [r7, #11]
    86c6:	f006 f897 	bl	e7f8 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    86ca:	8138      	strh	r0, [r7, #8]
    86cc:	4630      	mov	r0, r6
    86ce:	f000 f821 	bl	8714 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x714>
    86d2:	72b8      	strb	r0, [r7, #10]
    86d4:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    86d8:	6078      	str	r0, [r7, #4]
    86da:	f1b9 0f00 	cmp.w	r9, #0
    86de:	d008      	beq.n	86f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6f2>
    86e0:	f887 a000 	strb.w	sl, [r7]
    86e4:	490a      	ldr	r1, [pc, #40]	; (8710 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x710>)
    86e6:	9802      	ldr	r0, [sp, #8]
    86e8:	f000 f88c 	bl	8804 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x804>
    86ec:	1b00      	subs	r0, r0, r4
    86ee:	60f8      	str	r0, [r7, #12]
    86f0:	e001      	b.n	86f6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6f6>
    86f2:	703d      	strb	r5, [r7, #0]
    86f4:	60fe      	str	r6, [r7, #12]
    86f6:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
    86fa:	42a0      	cmp	r0, r4
    86fc:	d303      	bcc.n	8706 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x706>
    86fe:	2001      	movs	r0, #1
    8700:	b00f      	add	sp, #60	; 0x3c
    8702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8706:	2000      	movs	r0, #0
    8708:	e7fa      	b.n	8700 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x700>
    870a:	0000      	.short	0x0000
    870c:	20001150 	.word	0x20001150
    8710:	07a12000 	.word	0x07a12000
    8714:	4a09      	ldr	r2, [pc, #36]	; (873c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x73c>)
    8716:	b510      	push	{r4, lr}
    8718:	7811      	ldrb	r1, [r2, #0]
    871a:	2904      	cmp	r1, #4
    871c:	d10c      	bne.n	8738 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x738>
    871e:	6851      	ldr	r1, [r2, #4]
    8720:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    8722:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    8726:	004c      	lsls	r4, r1, #1
    8728:	4601      	mov	r1, r0
    872a:	4610      	mov	r0, r2
    872c:	f7f8 ff40 	bl	15b0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8730:	42a0      	cmp	r0, r4
    8732:	d201      	bcs.n	8738 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x738>
    8734:	2003      	movs	r0, #3
    8736:	bd10      	pop	{r4, pc}
    8738:	2002      	movs	r0, #2
    873a:	bd10      	pop	{r4, pc}
    873c:	20001150 	.word	0x20001150
    8740:	b570      	push	{r4, r5, r6, lr}
    8742:	4d13      	ldr	r5, [pc, #76]	; (8790 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x790>)
    8744:	7f28      	ldrb	r0, [r5, #28]
    8746:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    874a:	2800      	cmp	r0, #0
    874c:	7828      	ldrb	r0, [r5, #0]
    874e:	d00f      	beq.n	8770 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x770>
    8750:	2805      	cmp	r0, #5
    8752:	d004      	beq.n	875e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x75e>
    8754:	f240 318f 	movw	r1, #911	; 0x38f
    8758:	2035      	movs	r0, #53	; 0x35
    875a:	f7fb faff 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    875e:	4620      	mov	r0, r4
    8760:	f005 ffcf 	bl	e702 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x28>
    8764:	b178      	cbz	r0, 8786 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x786>
    8766:	4620      	mov	r0, r4
    8768:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    876c:	f001 bed0 	b.w	a510 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    8770:	2805      	cmp	r0, #5
    8772:	d108      	bne.n	8786 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x786>
    8774:	4620      	mov	r0, r4
    8776:	f005 ffc4 	bl	e702 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x28>
    877a:	b920      	cbnz	r0, 8786 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x786>
    877c:	69a8      	ldr	r0, [r5, #24]
    877e:	f500 7084 	add.w	r0, r0, #264	; 0x108
    8782:	f001 ff07 	bl	a594 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    8786:	4620      	mov	r0, r4
    8788:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    878c:	f001 bf02 	b.w	a594 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    8790:	20001150 	.word	0x20001150
    8794:	b510      	push	{r4, lr}
    8796:	f7fd ff27 	bl	65e8 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    879a:	490a      	ldr	r1, [pc, #40]	; (87c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c4>)
    879c:	2000      	movs	r0, #0
    879e:	70c8      	strb	r0, [r1, #3]
    87a0:	7708      	strb	r0, [r1, #28]
    87a2:	6188      	str	r0, [r1, #24]
    87a4:	7008      	strb	r0, [r1, #0]
    87a6:	f7fd fe71 	bl	648c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    87aa:	4604      	mov	r4, r0
    87ac:	7800      	ldrb	r0, [r0, #0]
    87ae:	f7f9 fc89 	bl	20c4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    87b2:	b110      	cbz	r0, 87ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7ba>
    87b4:	2020      	movs	r0, #32
    87b6:	7020      	strb	r0, [r4, #0]
    87b8:	bd10      	pop	{r4, pc}
    87ba:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    87be:	2035      	movs	r0, #53	; 0x35
    87c0:	f7fb facc 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87c4:	20001150 	.word	0x20001150
    87c8:	b510      	push	{r4, lr}
    87ca:	4c04      	ldr	r4, [pc, #16]	; (87dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7dc>)
    87cc:	4601      	mov	r1, r0
    87ce:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    87d0:	f7f8 feee 	bl	15b0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    87d4:	6861      	ldr	r1, [r4, #4]
    87d6:	fbb0 f0f1 	udiv	r0, r0, r1
    87da:	bd10      	pop	{r4, pc}
    87dc:	20001150 	.word	0x20001150
    87e0:	b510      	push	{r4, lr}
    87e2:	4c07      	ldr	r4, [pc, #28]	; (8800 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x800>)
    87e4:	4601      	mov	r1, r0
    87e6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    87e8:	f7f8 fee2 	bl	15b0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    87ec:	6861      	ldr	r1, [r4, #4]
    87ee:	fbb0 f2f1 	udiv	r2, r0, r1
    87f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    87f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    87f8:	4351      	muls	r1, r2
    87fa:	f7f8 bea7 	b.w	154c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    87fe:	0000      	.short	0x0000
    8800:	20001150 	.word	0x20001150
    8804:	b570      	push	{r4, r5, r6, lr}
    8806:	4605      	mov	r5, r0
    8808:	480d      	ldr	r0, [pc, #52]	; (8840 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x840>)
    880a:	460c      	mov	r4, r1
    880c:	7881      	ldrb	r1, [r0, #2]
    880e:	b1a9      	cbz	r1, 883c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x83c>
    8810:	4a0c      	ldr	r2, [pc, #48]	; (8844 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x844>)
    8812:	6a01      	ldr	r1, [r0, #32]
    8814:	4291      	cmp	r1, r2
    8816:	d211      	bcs.n	883c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x83c>
    8818:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    881a:	f7f8 fe97 	bl	154c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    881e:	4606      	mov	r6, r0
    8820:	4621      	mov	r1, r4
    8822:	4628      	mov	r0, r5
    8824:	f7f8 fe92 	bl	154c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8828:	4601      	mov	r1, r0
    882a:	4630      	mov	r0, r6
    882c:	f7f8 fec0 	bl	15b0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8830:	2800      	cmp	r0, #0
    8832:	dd03      	ble.n	883c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x83c>
    8834:	1a20      	subs	r0, r4, r0
    8836:	d500      	bpl.n	883a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x83a>
    8838:	2000      	movs	r0, #0
    883a:	bd70      	pop	{r4, r5, r6, pc}
    883c:	4620      	mov	r0, r4
    883e:	bd70      	pop	{r4, r5, r6, pc}
    8840:	20001150 	.word	0x20001150
    8844:	07a12000 	.word	0x07a12000

00008848 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    8848:	4806      	ldr	r0, [pc, #24]	; (8864 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    884a:	4905      	ldr	r1, [pc, #20]	; (8860 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    884c:	6501      	str	r1, [r0, #80]	; 0x50
    884e:	4906      	ldr	r1, [pc, #24]	; (8868 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    8850:	6541      	str	r1, [r0, #84]	; 0x54
    8852:	4807      	ldr	r0, [pc, #28]	; (8870 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    8854:	4905      	ldr	r1, [pc, #20]	; (886c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    8856:	6501      	str	r1, [r0, #80]	; 0x50
    8858:	4906      	ldr	r1, [pc, #24]	; (8874 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    885a:	6541      	str	r1, [r0, #84]	; 0x54
    885c:	4770      	bx	lr
    885e:	0000      	.short	0x0000
    8860:	000099a5 	.word	0x000099a5
    8864:	2000012c 	.word	0x2000012c
    8868:	00009a71 	.word	0x00009a71
    886c:	0000a0a1 	.word	0x0000a0a1
    8870:	20000190 	.word	0x20000190
    8874:	0000a0d1 	.word	0x0000a0d1

00008878 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI>:
    8878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    887a:	460d      	mov	r5, r1
    887c:	4607      	mov	r7, r0
    887e:	2100      	movs	r1, #0
    8880:	f004 ff0b 	bl	d69a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8884:	1e04      	subs	r4, r0, #0
    8886:	d051      	beq.n	892c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    8888:	f894 0078 	ldrb.w	r0, [r4, #120]	; 0x78
    888c:	2800      	cmp	r0, #0
    888e:	d04d      	beq.n	892c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    8890:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    8894:	f88d 0000 	strb.w	r0, [sp]
    8898:	9800      	ldr	r0, [sp, #0]
    889a:	9000      	str	r0, [sp, #0]
    889c:	f89d 0000 	ldrb.w	r0, [sp]
    88a0:	2600      	movs	r6, #0
    88a2:	b158      	cbz	r0, 88bc <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x44>
    88a4:	706e      	strb	r6, [r5, #1]
    88a6:	2009      	movs	r0, #9
    88a8:	7028      	strb	r0, [r5, #0]
    88aa:	220a      	movs	r2, #10
    88ac:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    88b0:	1d28      	adds	r0, r5, #4
    88b2:	f003 fe51 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    88b6:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
    88ba:	e0e1      	b.n	8a80 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    88bc:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    88c0:	280e      	cmp	r0, #14
    88c2:	d01d      	beq.n	8900 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x88>
    88c4:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    88c8:	280d      	cmp	r0, #13
    88ca:	d027      	beq.n	891c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xa4>
    88cc:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    88d0:	f88d 0000 	strb.w	r0, [sp]
    88d4:	9800      	ldr	r0, [sp, #0]
    88d6:	9000      	str	r0, [sp, #0]
    88d8:	f89d 0000 	ldrb.w	r0, [sp]
    88dc:	b3b0      	cbz	r0, 894c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xd4>
    88de:	706e      	strb	r6, [r5, #1]
    88e0:	2008      	movs	r0, #8
    88e2:	7028      	strb	r0, [r5, #0]
    88e4:	f8d4 01ba 	ldr.w	r0, [r4, #442]	; 0x1ba
    88e8:	6068      	str	r0, [r5, #4]
    88ea:	f8d4 01be 	ldr.w	r0, [r4, #446]	; 0x1be
    88ee:	60a8      	str	r0, [r5, #8]
    88f0:	f8d4 01c2 	ldr.w	r0, [r4, #450]	; 0x1c2
    88f4:	60e8      	str	r0, [r5, #12]
    88f6:	f504 74dd 	add.w	r4, r4, #442	; 0x1ba
    88fa:	f804 6c02 	strb.w	r6, [r4, #-2]
    88fe:	e0bf      	b.n	8a80 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8900:	8820      	ldrh	r0, [r4, #0]
    8902:	f7fb fe29 	bl	4558 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8906:	4607      	mov	r7, r0
    8908:	f004 fd97 	bl	d43a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    890c:	b968      	cbnz	r0, 892a <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb2>
    890e:	706e      	strb	r6, [r5, #1]
    8910:	200e      	movs	r0, #14
    8912:	7028      	strb	r0, [r5, #0]
    8914:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    8918:	6068      	str	r0, [r5, #4]
    891a:	e011      	b.n	8940 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xc8>
    891c:	8820      	ldrh	r0, [r4, #0]
    891e:	f7fb fe1b 	bl	4558 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8922:	4607      	mov	r7, r0
    8924:	f004 fd89 	bl	d43a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    8928:	b108      	cbz	r0, 892e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb6>
    892a:	2000      	movs	r0, #0
    892c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    892e:	706e      	strb	r6, [r5, #1]
    8930:	200d      	movs	r0, #13
    8932:	7028      	strb	r0, [r5, #0]
    8934:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    8938:	6068      	str	r0, [r5, #4]
    893a:	f8b4 01d8 	ldrh.w	r0, [r4, #472]	; 0x1d8
    893e:	8128      	strh	r0, [r5, #8]
    8940:	f884 61d2 	strb.w	r6, [r4, #466]	; 0x1d2
    8944:	4638      	mov	r0, r7
    8946:	f004 fd93 	bl	d470 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    894a:	e099      	b.n	8a80 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    894c:	e7ff      	b.n	894e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xd6>
    894e:	f894 018e 	ldrb.w	r0, [r4, #398]	; 0x18e
    8952:	f88d 0000 	strb.w	r0, [sp]
    8956:	9800      	ldr	r0, [sp, #0]
    8958:	9000      	str	r0, [sp, #0]
    895a:	f89d 0000 	ldrb.w	r0, [sp]
    895e:	b130      	cbz	r0, 896e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xf6>
    8960:	706e      	strb	r6, [r5, #1]
    8962:	2010      	movs	r0, #16
    8964:	7028      	strb	r0, [r5, #0]
    8966:	80af      	strh	r7, [r5, #4]
    8968:	f884 618e 	strb.w	r6, [r4, #398]	; 0x18e
    896c:	e088      	b.n	8a80 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    896e:	f894 0190 	ldrb.w	r0, [r4, #400]	; 0x190
    8972:	f88d 0000 	strb.w	r0, [sp]
    8976:	9800      	ldr	r0, [sp, #0]
    8978:	9000      	str	r0, [sp, #0]
    897a:	f89d 0000 	ldrb.w	r0, [sp]
    897e:	b1c8      	cbz	r0, 89b4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x13c>
    8980:	706e      	strb	r6, [r5, #1]
    8982:	2015      	movs	r0, #21
    8984:	7028      	strb	r0, [r5, #0]
    8986:	e00a      	b.n	899e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x126>
    8988:	f884 6190 	strb.w	r6, [r4, #400]	; 0x190
    898c:	f8d4 0192 	ldr.w	r0, [r4, #402]	; 0x192
    8990:	6068      	str	r0, [r5, #4]
    8992:	f8d4 0196 	ldr.w	r0, [r4, #406]	; 0x196
    8996:	60a8      	str	r0, [r5, #8]
    8998:	f8d4 019a 	ldr.w	r0, [r4, #410]	; 0x19a
    899c:	60e8      	str	r0, [r5, #12]
    899e:	f894 0190 	ldrb.w	r0, [r4, #400]	; 0x190
    89a2:	f88d 0000 	strb.w	r0, [sp]
    89a6:	9800      	ldr	r0, [sp, #0]
    89a8:	9000      	str	r0, [sp, #0]
    89aa:	f89d 0000 	ldrb.w	r0, [sp]
    89ae:	2800      	cmp	r0, #0
    89b0:	d1ea      	bne.n	8988 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x110>
    89b2:	e065      	b.n	8a80 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    89b4:	f894 019e 	ldrb.w	r0, [r4, #414]	; 0x19e
    89b8:	f88d 0000 	strb.w	r0, [sp]
    89bc:	9800      	ldr	r0, [sp, #0]
    89be:	9000      	str	r0, [sp, #0]
    89c0:	f89d 0000 	ldrb.w	r0, [sp]
    89c4:	b158      	cbz	r0, 89de <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x166>
    89c6:	706e      	strb	r6, [r5, #1]
    89c8:	201c      	movs	r0, #28
    89ca:	7028      	strb	r0, [r5, #0]
    89cc:	220a      	movs	r2, #10
    89ce:	f504 71d0 	add.w	r1, r4, #416	; 0x1a0
    89d2:	1d28      	adds	r0, r5, #4
    89d4:	f003 fdc0 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    89d8:	f884 619e 	strb.w	r6, [r4, #414]	; 0x19e
    89dc:	e050      	b.n	8a80 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    89de:	f894 01aa 	ldrb.w	r0, [r4, #426]	; 0x1aa
    89e2:	f88d 0000 	strb.w	r0, [sp]
    89e6:	9800      	ldr	r0, [sp, #0]
    89e8:	9000      	str	r0, [sp, #0]
    89ea:	f89d 0000 	ldrb.w	r0, [sp]
    89ee:	b140      	cbz	r0, 8a02 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x18a>
    89f0:	706e      	strb	r6, [r5, #1]
    89f2:	201d      	movs	r0, #29
    89f4:	7028      	strb	r0, [r5, #0]
    89f6:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
    89fa:	6068      	str	r0, [r5, #4]
    89fc:	f884 61aa 	strb.w	r6, [r4, #426]	; 0x1aa
    8a00:	e03e      	b.n	8a80 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8a02:	f894 0188 	ldrb.w	r0, [r4, #392]	; 0x188
    8a06:	f88d 0000 	strb.w	r0, [sp]
    8a0a:	9800      	ldr	r0, [sp, #0]
    8a0c:	9000      	str	r0, [sp, #0]
    8a0e:	f89d 0000 	ldrb.w	r0, [sp]
    8a12:	b198      	cbz	r0, 8a3c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1c4>
    8a14:	706e      	strb	r6, [r5, #1]
    8a16:	201a      	movs	r0, #26
    8a18:	7028      	strb	r0, [r5, #0]
    8a1a:	e004      	b.n	8a26 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1ae>
    8a1c:	f884 6188 	strb.w	r6, [r4, #392]	; 0x188
    8a20:	f8d4 018a 	ldr.w	r0, [r4, #394]	; 0x18a
    8a24:	6068      	str	r0, [r5, #4]
    8a26:	f894 0188 	ldrb.w	r0, [r4, #392]	; 0x188
    8a2a:	f88d 0000 	strb.w	r0, [sp]
    8a2e:	9800      	ldr	r0, [sp, #0]
    8a30:	9000      	str	r0, [sp, #0]
    8a32:	f89d 0000 	ldrb.w	r0, [sp]
    8a36:	2800      	cmp	r0, #0
    8a38:	d1f0      	bne.n	8a1c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1a4>
    8a3a:	e021      	b.n	8a80 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8a3c:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    8a40:	f88d 0000 	strb.w	r0, [sp]
    8a44:	9800      	ldr	r0, [sp, #0]
    8a46:	9000      	str	r0, [sp, #0]
    8a48:	f89d 0000 	ldrb.w	r0, [sp]
    8a4c:	2800      	cmp	r0, #0
    8a4e:	f43f af6d 	beq.w	892c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    8a52:	706e      	strb	r6, [r5, #1]
    8a54:	2016      	movs	r0, #22
    8a56:	7028      	strb	r0, [r5, #0]
    8a58:	e008      	b.n	8a6c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1f4>
    8a5a:	bf00      	nop
    8a5c:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
    8a60:	f8d4 01b2 	ldr.w	r0, [r4, #434]	; 0x1b2
    8a64:	6068      	str	r0, [r5, #4]
    8a66:	f8b4 01b6 	ldrh.w	r0, [r4, #438]	; 0x1b6
    8a6a:	8128      	strh	r0, [r5, #8]
    8a6c:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    8a70:	f88d 0000 	strb.w	r0, [sp]
    8a74:	9800      	ldr	r0, [sp, #0]
    8a76:	9000      	str	r0, [sp, #0]
    8a78:	f89d 0000 	ldrb.w	r0, [sp]
    8a7c:	2800      	cmp	r0, #0
    8a7e:	d1ed      	bne.n	8a5c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1e4>
    8a80:	2001      	movs	r0, #1
    8a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008a84 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>:
    8a84:	b570      	push	{r4, r5, r6, lr}
    8a86:	4605      	mov	r5, r0
    8a88:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    8a8c:	f895 1089 	ldrb.w	r1, [r5, #137]	; 0x89
    8a90:	b1c9      	cbz	r1, 8ac6 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x42>
    8a92:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
    8a96:	1a0c      	subs	r4, r1, r0
    8a98:	f1b4 0404 	subs.w	r4, r4, #4
    8a9c:	f895 00ac 	ldrb.w	r0, [r5, #172]	; 0xac
    8aa0:	b140      	cbz	r0, 8ab4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x30>
    8aa2:	f895 2085 	ldrb.w	r2, [r5, #133]	; 0x85
    8aa6:	2300      	movs	r3, #0
    8aa8:	2109      	movs	r1, #9
    8aaa:	f105 0078 	add.w	r0, r5, #120	; 0x78
    8aae:	f004 ffb8 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8ab2:	b160      	cbz	r0, 8ace <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    8ab4:	4628      	mov	r0, r5
    8ab6:	f005 ffd5 	bl	ea64 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    8aba:	b138      	cbz	r0, 8acc <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x48>
    8abc:	e9d5 1028 	ldrd	r1, r0, [r5, #160]	; 0xa0
    8ac0:	1a40      	subs	r0, r0, r1
    8ac2:	1f00      	subs	r0, r0, #4
    8ac4:	e003      	b.n	8ace <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    8ac6:	f1c0 0402 	rsb	r4, r0, #2
    8aca:	e7e7      	b.n	8a9c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x18>
    8acc:	4620      	mov	r0, r4
    8ace:	42a0      	cmp	r0, r4
    8ad0:	da00      	bge.n	8ad4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x50>
    8ad2:	4604      	mov	r4, r0
    8ad4:	2c00      	cmp	r4, #0
    8ad6:	dc01      	bgt.n	8adc <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x58>
    8ad8:	2000      	movs	r0, #0
    8ada:	bd70      	pop	{r4, r5, r6, pc}
    8adc:	b2a0      	uxth	r0, r4
    8ade:	bd70      	pop	{r4, r5, r6, pc}

00008ae0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>:
    8ae0:	481b      	ldr	r0, [pc, #108]	; (8b50 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x70>)
    8ae2:	491a      	ldr	r1, [pc, #104]	; (8b4c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x6c>)
    8ae4:	6081      	str	r1, [r0, #8]
    8ae6:	491b      	ldr	r1, [pc, #108]	; (8b54 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x74>)
    8ae8:	61c1      	str	r1, [r0, #28]
    8aea:	491b      	ldr	r1, [pc, #108]	; (8b58 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x78>)
    8aec:	62c1      	str	r1, [r0, #44]	; 0x2c
    8aee:	491b      	ldr	r1, [pc, #108]	; (8b5c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x7c>)
    8af0:	6101      	str	r1, [r0, #16]
    8af2:	491b      	ldr	r1, [pc, #108]	; (8b60 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x80>)
    8af4:	6141      	str	r1, [r0, #20]
    8af6:	491b      	ldr	r1, [pc, #108]	; (8b64 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x84>)
    8af8:	6441      	str	r1, [r0, #68]	; 0x44
    8afa:	491b      	ldr	r1, [pc, #108]	; (8b68 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x88>)
    8afc:	6181      	str	r1, [r0, #24]
    8afe:	491b      	ldr	r1, [pc, #108]	; (8b6c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x8c>)
    8b00:	6301      	str	r1, [r0, #48]	; 0x30
    8b02:	491b      	ldr	r1, [pc, #108]	; (8b70 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x90>)
    8b04:	6241      	str	r1, [r0, #36]	; 0x24
    8b06:	491b      	ldr	r1, [pc, #108]	; (8b74 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x94>)
    8b08:	64c1      	str	r1, [r0, #76]	; 0x4c
    8b0a:	491b      	ldr	r1, [pc, #108]	; (8b78 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x98>)
    8b0c:	6481      	str	r1, [r0, #72]	; 0x48
    8b0e:	491b      	ldr	r1, [pc, #108]	; (8b7c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x9c>)
    8b10:	6341      	str	r1, [r0, #52]	; 0x34
    8b12:	481c      	ldr	r0, [pc, #112]	; (8b84 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa4>)
    8b14:	491a      	ldr	r1, [pc, #104]	; (8b80 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa0>)
    8b16:	6081      	str	r1, [r0, #8]
    8b18:	491b      	ldr	r1, [pc, #108]	; (8b88 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa8>)
    8b1a:	61c1      	str	r1, [r0, #28]
    8b1c:	491b      	ldr	r1, [pc, #108]	; (8b8c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xac>)
    8b1e:	6201      	str	r1, [r0, #32]
    8b20:	491b      	ldr	r1, [pc, #108]	; (8b90 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb0>)
    8b22:	6041      	str	r1, [r0, #4]
    8b24:	491b      	ldr	r1, [pc, #108]	; (8b94 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb4>)
    8b26:	6001      	str	r1, [r0, #0]
    8b28:	491b      	ldr	r1, [pc, #108]	; (8b98 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb8>)
    8b2a:	6281      	str	r1, [r0, #40]	; 0x28
    8b2c:	491b      	ldr	r1, [pc, #108]	; (8b9c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xbc>)
    8b2e:	62c1      	str	r1, [r0, #44]	; 0x2c
    8b30:	491b      	ldr	r1, [pc, #108]	; (8ba0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc0>)
    8b32:	60c1      	str	r1, [r0, #12]
    8b34:	491b      	ldr	r1, [pc, #108]	; (8ba4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc4>)
    8b36:	6181      	str	r1, [r0, #24]
    8b38:	491b      	ldr	r1, [pc, #108]	; (8ba8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc8>)
    8b3a:	6301      	str	r1, [r0, #48]	; 0x30
    8b3c:	491b      	ldr	r1, [pc, #108]	; (8bac <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xcc>)
    8b3e:	6481      	str	r1, [r0, #72]	; 0x48
    8b40:	491b      	ldr	r1, [pc, #108]	; (8bb0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd0>)
    8b42:	64c1      	str	r1, [r0, #76]	; 0x4c
    8b44:	491b      	ldr	r1, [pc, #108]	; (8bb4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd4>)
    8b46:	6441      	str	r1, [r0, #68]	; 0x44
    8b48:	4770      	bx	lr
    8b4a:	0000      	.short	0x0000
    8b4c:	00009e2d 	.word	0x00009e2d
    8b50:	2000012c 	.word	0x2000012c
    8b54:	00009e69 	.word	0x00009e69
    8b58:	00009b41 	.word	0x00009b41
    8b5c:	00009881 	.word	0x00009881
    8b60:	00009d79 	.word	0x00009d79
    8b64:	00009cdd 	.word	0x00009cdd
    8b68:	00009db9 	.word	0x00009db9
    8b6c:	00009f05 	.word	0x00009f05
    8b70:	000098b9 	.word	0x000098b9
    8b74:	00009b15 	.word	0x00009b15
    8b78:	00009ae1 	.word	0x00009ae1
    8b7c:	00009d69 	.word	0x00009d69
    8b80:	0000a285 	.word	0x0000a285
    8b84:	20000190 	.word	0x20000190
    8b88:	0000a2b5 	.word	0x0000a2b5
    8b8c:	0000a071 	.word	0x0000a071
    8b90:	00009fd5 	.word	0x00009fd5
    8b94:	0000a005 	.word	0x0000a005
    8b98:	0000a141 	.word	0x0000a141
    8b9c:	0000a175 	.word	0x0000a175
    8ba0:	0000a035 	.word	0x0000a035
    8ba4:	0000a261 	.word	0x0000a261
    8ba8:	0000a2f5 	.word	0x0000a2f5
    8bac:	0000a101 	.word	0x0000a101
    8bb0:	0000a131 	.word	0x0000a131
    8bb4:	0000a24d 	.word	0x0000a24d

00008bb8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    8bb8:	4806      	ldr	r0, [pc, #24]	; (8bd4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    8bba:	4905      	ldr	r1, [pc, #20]	; (8bd0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    8bbc:	6581      	str	r1, [r0, #88]	; 0x58
    8bbe:	4906      	ldr	r1, [pc, #24]	; (8bd8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    8bc0:	65c1      	str	r1, [r0, #92]	; 0x5c
    8bc2:	4807      	ldr	r0, [pc, #28]	; (8be0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    8bc4:	4905      	ldr	r1, [pc, #20]	; (8bdc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    8bc6:	6581      	str	r1, [r0, #88]	; 0x58
    8bc8:	4906      	ldr	r1, [pc, #24]	; (8be4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    8bca:	6601      	str	r1, [r0, #96]	; 0x60
    8bcc:	4770      	bx	lr
    8bce:	0000      	.short	0x0000
    8bd0:	00009b65 	.word	0x00009b65
    8bd4:	2000012c 	.word	0x2000012c
    8bd8:	00009c75 	.word	0x00009c75
    8bdc:	0000a1a1 	.word	0x0000a1a1
    8be0:	20000190 	.word	0x20000190
    8be4:	0000a1d1 	.word	0x0000a1d1

00008be8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>:
    8be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8bea:	4d36      	ldr	r5, [pc, #216]	; (8cc4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdc>)
    8bec:	2600      	movs	r6, #0
    8bee:	4604      	mov	r4, r0
    8bf0:	6068      	str	r0, [r5, #4]
    8bf2:	806e      	strh	r6, [r5, #2]
    8bf4:	706e      	strb	r6, [r5, #1]
    8bf6:	702e      	strb	r6, [r5, #0]
    8bf8:	8800      	ldrh	r0, [r0, #0]
    8bfa:	f7fb fedd 	bl	49b8 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    8bfe:	6868      	ldr	r0, [r5, #4]
    8c00:	8800      	ldrh	r0, [r0, #0]
    8c02:	f7fb fe81 	bl	4908 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    8c06:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    8c0a:	6869      	ldr	r1, [r5, #4]
    8c0c:	1c40      	adds	r0, r0, #1
    8c0e:	b282      	uxth	r2, r0
    8c10:	f101 0078 	add.w	r0, r1, #120	; 0x78
    8c14:	f005 f8bf 	bl	dd96 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    8c18:	b120      	cbz	r0, 8c24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c>
    8c1a:	f44f 71ac 	mov.w	r1, #344	; 0x158
    8c1e:	2036      	movs	r0, #54	; 0x36
    8c20:	f7fb f89c 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c24:	f8a4 6122 	strh.w	r6, [r4, #290]	; 0x122
    8c28:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
    8c2c:	4630      	mov	r0, r6
    8c2e:	2924      	cmp	r1, #36	; 0x24
    8c30:	d10a      	bne.n	8c48 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    8c32:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    8c36:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    8c3a:	1a51      	subs	r1, r2, r1
    8c3c:	b209      	sxth	r1, r1
    8c3e:	2900      	cmp	r1, #0
    8c40:	db02      	blt.n	8c48 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    8c42:	f884 0086 	strb.w	r0, [r4, #134]	; 0x86
    8c46:	e00f      	b.n	8c68 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x80>
    8c48:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    8c4c:	2924      	cmp	r1, #36	; 0x24
    8c4e:	d001      	beq.n	8c54 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x6c>
    8c50:	2925      	cmp	r1, #37	; 0x25
    8c52:	d10c      	bne.n	8c6e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    8c54:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    8c58:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    8c5c:	1a51      	subs	r1, r2, r1
    8c5e:	b209      	sxth	r1, r1
    8c60:	2900      	cmp	r1, #0
    8c62:	db04      	blt.n	8c6e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    8c64:	f884 0085 	strb.w	r0, [r4, #133]	; 0x85
    8c68:	f000 fd5a 	bl	9720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb38>
    8c6c:	b318      	cbz	r0, 8cb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xce>
    8c6e:	f000 fbfd 	bl	946c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    8c72:	2800      	cmp	r0, #0
    8c74:	d125      	bne.n	8cc2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    8c76:	6868      	ldr	r0, [r5, #4]
    8c78:	3078      	adds	r0, #120	; 0x78
    8c7a:	f005 fe68 	bl	e94e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8c7e:	b120      	cbz	r0, 8c8a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2>
    8c80:	6868      	ldr	r0, [r5, #4]
    8c82:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    8c86:	f000 faad 	bl	91e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5fc>
    8c8a:	480f      	ldr	r0, [pc, #60]	; (8cc8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe0>)
    8c8c:	9000      	str	r0, [sp, #0]
    8c8e:	4b0f      	ldr	r3, [pc, #60]	; (8ccc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe4>)
    8c90:	4a0f      	ldr	r2, [pc, #60]	; (8cd0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe8>)
    8c92:	4621      	mov	r1, r4
    8c94:	4630      	mov	r0, r6
    8c96:	f7fb ff39 	bl	4b0c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    8c9a:	6868      	ldr	r0, [r5, #4]
    8c9c:	2300      	movs	r3, #0
    8c9e:	2105      	movs	r1, #5
    8ca0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8ca4:	3078      	adds	r0, #120	; 0x78
    8ca6:	f004 febc 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8caa:	2800      	cmp	r0, #0
    8cac:	d009      	beq.n	8cc2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    8cae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8cb2:	f7fb bf25 	b.w	4b00 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8cb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8cba:	2100      	movs	r1, #0
    8cbc:	4608      	mov	r0, r1
    8cbe:	f000 bb81 	b.w	93c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    8cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8cc4:	2000011c 	.word	0x2000011c
    8cc8:	000093c5 	.word	0x000093c5
    8ccc:	00008df5 	.word	0x00008df5
    8cd0:	00009699 	.word	0x00009699
    8cd4:	4411      	add	r1, r2
    8cd6:	78c2      	ldrb	r2, [r0, #3]
    8cd8:	480c      	ldr	r0, [pc, #48]	; (8d0c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x124>)
    8cda:	1d89      	adds	r1, r1, #6
    8cdc:	b289      	uxth	r1, r1
    8cde:	6840      	ldr	r0, [r0, #4]
    8ce0:	2a01      	cmp	r2, #1
    8ce2:	d006      	beq.n	8cf2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10a>
    8ce4:	b142      	cbz	r2, 8cf8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x110>
    8ce6:	2a18      	cmp	r2, #24
    8ce8:	d105      	bne.n	8cf6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10e>
    8cea:	f890 2126 	ldrb.w	r2, [r0, #294]	; 0x126
    8cee:	b132      	cbz	r2, 8cfe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x116>
    8cf0:	e009      	b.n	8d06 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    8cf2:	f8a0 1130 	strh.w	r1, [r0, #304]	; 0x130
    8cf6:	4770      	bx	lr
    8cf8:	f8a0 1146 	strh.w	r1, [r0, #326]	; 0x146
    8cfc:	4770      	bx	lr
    8cfe:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
    8d02:	b902      	cbnz	r2, 8d06 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    8d04:	2100      	movs	r1, #0
    8d06:	f8a0 1124 	strh.w	r1, [r0, #292]	; 0x124
    8d0a:	4770      	bx	lr
    8d0c:	2000011c 	.word	0x2000011c
    8d10:	490b      	ldr	r1, [pc, #44]	; (8d40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x158>)
    8d12:	78c2      	ldrb	r2, [r0, #3]
    8d14:	6849      	ldr	r1, [r1, #4]
    8d16:	2a01      	cmp	r2, #1
    8d18:	d006      	beq.n	8d28 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140>
    8d1a:	b15a      	cbz	r2, 8d34 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14c>
    8d1c:	2a18      	cmp	r2, #24
    8d1e:	d108      	bne.n	8d32 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a>
    8d20:	f8b1 1124 	ldrh.w	r1, [r1, #292]	; 0x124
    8d24:	f005 b91d 	b.w	df62 <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>
    8d28:	f8b1 1130 	ldrh.w	r1, [r1, #304]	; 0x130
    8d2c:	7241      	strb	r1, [r0, #9]
    8d2e:	0a09      	lsrs	r1, r1, #8
    8d30:	7281      	strb	r1, [r0, #10]
    8d32:	4770      	bx	lr
    8d34:	f8b1 1146 	ldrh.w	r1, [r1, #326]	; 0x146
    8d38:	7341      	strb	r1, [r0, #13]
    8d3a:	0a09      	lsrs	r1, r1, #8
    8d3c:	7381      	strb	r1, [r0, #14]
    8d3e:	4770      	bx	lr
    8d40:	2000011c 	.word	0x2000011c
    8d44:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    8d46:	4c2a      	ldr	r4, [pc, #168]	; (8df0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x208>)
    8d48:	2300      	movs	r3, #0
    8d4a:	4619      	mov	r1, r3
    8d4c:	6860      	ldr	r0, [r4, #4]
    8d4e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8d52:	3078      	adds	r0, #120	; 0x78
    8d54:	f004 fe65 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8d58:	2800      	cmp	r0, #0
    8d5a:	d048      	beq.n	8dee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8d5c:	6860      	ldr	r0, [r4, #4]
    8d5e:	f890 112e 	ldrb.w	r1, [r0, #302]	; 0x12e
    8d62:	f88d 1000 	strb.w	r1, [sp]
    8d66:	9900      	ldr	r1, [sp, #0]
    8d68:	9100      	str	r1, [sp, #0]
    8d6a:	f89d 1000 	ldrb.w	r1, [sp]
    8d6e:	2900      	cmp	r1, #0
    8d70:	d03d      	beq.n	8dee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8d72:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    8d76:	f004 fead 	bl	dad4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8d7a:	2800      	cmp	r0, #0
    8d7c:	d137      	bne.n	8dee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8d7e:	6860      	ldr	r0, [r4, #4]
    8d80:	f8b0 007c 	ldrh.w	r0, [r0, #124]	; 0x7c
    8d84:	280a      	cmp	r0, #10
    8d86:	d932      	bls.n	8dee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8d88:	4668      	mov	r0, sp
    8d8a:	f7fc ff59 	bl	5c40 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    8d8e:	2800      	cmp	r0, #0
    8d90:	d02d      	beq.n	8dee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8d92:	6861      	ldr	r1, [r4, #4]
    8d94:	2205      	movs	r2, #5
    8d96:	4668      	mov	r0, sp
    8d98:	318e      	adds	r1, #142	; 0x8e
    8d9a:	f003 fbcb 	bl	c534 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    8d9e:	2500      	movs	r5, #0
    8da0:	b310      	cbz	r0, 8de8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x200>
    8da2:	6860      	ldr	r0, [r4, #4]
    8da4:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    8da8:	7808      	ldrb	r0, [r1, #0]
    8daa:	b158      	cbz	r0, 8dc4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1dc>
    8dac:	2205      	movs	r2, #5
    8dae:	4668      	mov	r0, sp
    8db0:	1c49      	adds	r1, r1, #1
    8db2:	f003 fbbf 	bl	c534 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    8db6:	2800      	cmp	r0, #0
    8db8:	d119      	bne.n	8dee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8dba:	6860      	ldr	r0, [r4, #4]
    8dbc:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    8dc0:	7800      	ldrb	r0, [r0, #0]
    8dc2:	b940      	cbnz	r0, 8dd6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1ee>
    8dc4:	6860      	ldr	r0, [r4, #4]
    8dc6:	9900      	ldr	r1, [sp, #0]
    8dc8:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    8dcc:	f8c0 1001 	str.w	r1, [r0, #1]
    8dd0:	f89d 1004 	ldrb.w	r1, [sp, #4]
    8dd4:	7141      	strb	r1, [r0, #5]
    8dd6:	6860      	ldr	r0, [r4, #4]
    8dd8:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    8ddc:	7808      	ldrb	r0, [r1, #0]
    8dde:	1c40      	adds	r0, r0, #1
    8de0:	7008      	strb	r0, [r1, #0]
    8de2:	2001      	movs	r0, #1
    8de4:	f000 fd04 	bl	97f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8de8:	6860      	ldr	r0, [r4, #4]
    8dea:	f880 512e 	strb.w	r5, [r0, #302]	; 0x12e
    8dee:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    8df0:	2000011c 	.word	0x2000011c
    8df4:	4a0c      	ldr	r2, [pc, #48]	; (8e28 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x240>)
    8df6:	7851      	ldrb	r1, [r2, #1]
    8df8:	b999      	cbnz	r1, 8e22 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    8dfa:	4611      	mov	r1, r2
    8dfc:	2801      	cmp	r0, #1
    8dfe:	6849      	ldr	r1, [r1, #4]
    8e00:	d008      	beq.n	8e14 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x22c>
    8e02:	7890      	ldrb	r0, [r2, #2]
    8e04:	0740      	lsls	r0, r0, #29
    8e06:	d503      	bpl.n	8e10 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x228>
    8e08:	f891 0088 	ldrb.w	r0, [r1, #136]	; 0x88
    8e0c:	2807      	cmp	r0, #7
    8e0e:	d008      	beq.n	8e22 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    8e10:	2001      	movs	r0, #1
    8e12:	4770      	bx	lr
    8e14:	f8b1 0050 	ldrh.w	r0, [r1, #80]	; 0x50
    8e18:	8e89      	ldrh	r1, [r1, #52]	; 0x34
    8e1a:	4288      	cmp	r0, r1
    8e1c:	d801      	bhi.n	8e22 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    8e1e:	f7fe bd5d 	b.w	78dc <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>
    8e22:	2000      	movs	r0, #0
    8e24:	4770      	bx	lr
    8e26:	0000      	.short	0x0000
    8e28:	2000011c 	.word	0x2000011c
    8e2c:	b538      	push	{r3, r4, r5, lr}
    8e2e:	4c87      	ldr	r4, [pc, #540]	; (904c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x464>)
    8e30:	6860      	ldr	r0, [r4, #4]
    8e32:	3078      	adds	r0, #120	; 0x78
    8e34:	f005 fd8b 	bl	e94e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8e38:	2800      	cmp	r0, #0
    8e3a:	d15b      	bne.n	8ef4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    8e3c:	6860      	ldr	r0, [r4, #4]
    8e3e:	2300      	movs	r3, #0
    8e40:	2101      	movs	r1, #1
    8e42:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    8e46:	3078      	adds	r0, #120	; 0x78
    8e48:	f004 fdeb 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e4c:	2800      	cmp	r0, #0
    8e4e:	d151      	bne.n	8ef4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    8e50:	6860      	ldr	r0, [r4, #4]
    8e52:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    8e56:	f88d 1000 	strb.w	r1, [sp]
    8e5a:	9900      	ldr	r1, [sp, #0]
    8e5c:	9100      	str	r1, [sp, #0]
    8e5e:	f89d 1000 	ldrb.w	r1, [sp]
    8e62:	b109      	cbz	r1, 8e68 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x280>
    8e64:	2002      	movs	r0, #2
    8e66:	e038      	b.n	8eda <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    8e68:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8e6c:	2300      	movs	r3, #0
    8e6e:	4619      	mov	r1, r3
    8e70:	3078      	adds	r0, #120	; 0x78
    8e72:	f004 fdd6 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e76:	b128      	cbz	r0, 8e84 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    8e78:	6860      	ldr	r0, [r4, #4]
    8e7a:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
    8e7e:	b108      	cbz	r0, 8e84 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    8e80:	2012      	movs	r0, #18
    8e82:	e02a      	b.n	8eda <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    8e84:	6860      	ldr	r0, [r4, #4]
    8e86:	2500      	movs	r5, #0
    8e88:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8e8c:	2a12      	cmp	r2, #18
    8e8e:	d01d      	beq.n	8ecc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e4>
    8e90:	dc04      	bgt.n	8e9c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2b4>
    8e92:	2a03      	cmp	r2, #3
    8e94:	d025      	beq.n	8ee2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2fa>
    8e96:	2a11      	cmp	r2, #17
    8e98:	d104      	bne.n	8ea4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2bc>
    8e9a:	e019      	b.n	8ed0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e8>
    8e9c:	2a18      	cmp	r2, #24
    8e9e:	d01b      	beq.n	8ed8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f0>
    8ea0:	2a23      	cmp	r2, #35	; 0x23
    8ea2:	d028      	beq.n	8ef6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30e>
    8ea4:	2300      	movs	r3, #0
    8ea6:	2104      	movs	r1, #4
    8ea8:	3078      	adds	r0, #120	; 0x78
    8eaa:	f004 fdba 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8eae:	2800      	cmp	r0, #0
    8eb0:	d120      	bne.n	8ef4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    8eb2:	6860      	ldr	r0, [r4, #4]
    8eb4:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    8eb8:	2919      	cmp	r1, #25
    8eba:	d07c      	beq.n	8fb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3ce>
    8ebc:	dc22      	bgt.n	8f04 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31c>
    8ebe:	2901      	cmp	r1, #1
    8ec0:	d02c      	beq.n	8f1c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x334>
    8ec2:	2902      	cmp	r1, #2
    8ec4:	d037      	beq.n	8f36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34e>
    8ec6:	2903      	cmp	r1, #3
    8ec8:	d134      	bne.n	8f34 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34c>
    8eca:	e022      	b.n	8f12 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x32a>
    8ecc:	200b      	movs	r0, #11
    8ece:	e004      	b.n	8eda <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    8ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8ed4:	f000 bba0 	b.w	9618 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    8ed8:	2006      	movs	r0, #6
    8eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8ede:	f000 bc87 	b.w	97f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8ee2:	f810 1ffa 	ldrb.w	r1, [r0, #250]!
    8ee6:	7101      	strb	r1, [r0, #4]
    8ee8:	2007      	movs	r0, #7
    8eea:	f000 fc81 	bl	97f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8eee:	6860      	ldr	r0, [r4, #4]
    8ef0:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    8ef4:	bd38      	pop	{r3, r4, r5, pc}
    8ef6:	2018      	movs	r0, #24
    8ef8:	f000 fc7a 	bl	97f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8efc:	6860      	ldr	r0, [r4, #4]
    8efe:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    8f02:	bd38      	pop	{r3, r4, r5, pc}
    8f04:	291d      	cmp	r1, #29
    8f06:	d018      	beq.n	8f3a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    8f08:	291e      	cmp	r1, #30
    8f0a:	d016      	beq.n	8f3a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    8f0c:	2921      	cmp	r1, #33	; 0x21
    8f0e:	d176      	bne.n	8ffe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8f10:	e056      	b.n	8fc0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d8>
    8f12:	f810 1ff9 	ldrb.w	r1, [r0, #249]!
    8f16:	7141      	strb	r1, [r0, #5]
    8f18:	2007      	movs	r0, #7
    8f1a:	e07e      	b.n	901a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x432>
    8f1c:	200c      	movs	r0, #12
    8f1e:	f000 fc67 	bl	97f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8f22:	6860      	ldr	r0, [r4, #4]
    8f24:	f820 5fba 	strh.w	r5, [r0, #186]!
    8f28:	7981      	ldrb	r1, [r0, #6]
    8f2a:	f041 0101 	orr.w	r1, r1, #1
    8f2e:	7181      	strb	r1, [r0, #6]
    8f30:	f800 5c34 	strb.w	r5, [r0, #-52]
    8f34:	e063      	b.n	8ffe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8f36:	2013      	movs	r0, #19
    8f38:	e037      	b.n	8faa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c2>
    8f3a:	f890 2133 	ldrb.w	r2, [r0, #307]	; 0x133
    8f3e:	f88d 2000 	strb.w	r2, [sp]
    8f42:	9a00      	ldr	r2, [sp, #0]
    8f44:	9200      	str	r2, [sp, #0]
    8f46:	f89d 2000 	ldrb.w	r2, [sp]
    8f4a:	bbaa      	cbnz	r2, 8fb8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d0>
    8f4c:	f890 2132 	ldrb.w	r2, [r0, #306]	; 0x132
    8f50:	f88d 2000 	strb.w	r2, [sp]
    8f54:	9a00      	ldr	r2, [sp, #0]
    8f56:	9200      	str	r2, [sp, #0]
    8f58:	f89d 2000 	ldrb.w	r2, [sp]
    8f5c:	b1aa      	cbz	r2, 8f8a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a2>
    8f5e:	2924      	cmp	r1, #36	; 0x24
    8f60:	d011      	beq.n	8f86 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    8f62:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    8f66:	2924      	cmp	r1, #36	; 0x24
    8f68:	d00d      	beq.n	8f86 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    8f6a:	2300      	movs	r3, #0
    8f6c:	f500 7293 	add.w	r2, r0, #294	; 0x126
    8f70:	f500 7199 	add.w	r1, r0, #306	; 0x132
    8f74:	f005 f931 	bl	e1da <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8f78:	6860      	ldr	r0, [r4, #4]
    8f7a:	211e      	movs	r1, #30
    8f7c:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    8f80:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    8f84:	e003      	b.n	8f8e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a6>
    8f86:	2301      	movs	r3, #1
    8f88:	e7f0      	b.n	8f6c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x384>
    8f8a:	291e      	cmp	r1, #30
    8f8c:	d137      	bne.n	8ffe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8f8e:	6860      	ldr	r0, [r4, #4]
    8f90:	f005 f93e 	bl	e210 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8f94:	f000 f85c 	bl	9050 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    8f98:	6861      	ldr	r1, [r4, #4]
    8f9a:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    8f9e:	8bc2      	ldrh	r2, [r0, #30]
    8fa0:	f821 2ffe 	strh.w	r2, [r1, #254]!
    8fa4:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8fa6:	8048      	strh	r0, [r1, #2]
    8fa8:	2015      	movs	r0, #21
    8faa:	f000 fc21 	bl	97f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8fae:	6860      	ldr	r0, [r4, #4]
    8fb0:	f8a0 50ba 	strh.w	r5, [r0, #186]	; 0xba
    8fb4:	e001      	b.n	8fba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d2>
    8fb6:	e02f      	b.n	9018 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x430>
    8fb8:	e021      	b.n	8ffe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8fba:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    8fbe:	e01e      	b.n	8ffe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8fc0:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    8fc4:	2901      	cmp	r1, #1
    8fc6:	d108      	bne.n	8fda <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3f2>
    8fc8:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    8fcc:	f88d 1000 	strb.w	r1, [sp]
    8fd0:	9900      	ldr	r1, [sp, #0]
    8fd2:	9100      	str	r1, [sp, #0]
    8fd4:	f89d 1000 	ldrb.w	r1, [sp]
    8fd8:	b121      	cbz	r1, 8fe4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3fc>
    8fda:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    8fde:	2902      	cmp	r1, #2
    8fe0:	d005      	beq.n	8fee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x406>
    8fe2:	e00c      	b.n	8ffe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8fe4:	f8d0 1062 	ldr.w	r1, [r0, #98]	; 0x62
    8fe8:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    8fec:	e002      	b.n	8ff4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x40c>
    8fee:	f850 1f62 	ldr.w	r1, [r0, #98]!
    8ff2:	6840      	ldr	r0, [r0, #4]
    8ff4:	f000 fc1e 	bl	9834 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
    8ff8:	2018      	movs	r0, #24
    8ffa:	f000 fbf9 	bl	97f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8ffe:	6860      	ldr	r0, [r4, #4]
    9000:	3078      	adds	r0, #120	; 0x78
    9002:	f005 fca4 	bl	e94e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9006:	2800      	cmp	r0, #0
    9008:	f47f af7b 	bne.w	8f02 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31a>
    900c:	6860      	ldr	r0, [r4, #4]
    900e:	3078      	adds	r0, #120	; 0x78
    9010:	f005 fc9d 	bl	e94e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9014:	b128      	cbz	r0, 9022 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x43a>
    9016:	e00f      	b.n	9038 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    9018:	2011      	movs	r0, #17
    901a:	f000 fbe9 	bl	97f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    901e:	6860      	ldr	r0, [r4, #4]
    9020:	e7c8      	b.n	8fb4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3cc>
    9022:	6860      	ldr	r0, [r4, #4]
    9024:	2300      	movs	r3, #0
    9026:	4619      	mov	r1, r3
    9028:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    902c:	3078      	adds	r0, #120	; 0x78
    902e:	f004 fcf8 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9032:	b108      	cbz	r0, 9038 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    9034:	f000 fa44 	bl	94c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d8>
    9038:	6860      	ldr	r0, [r4, #4]
    903a:	3078      	adds	r0, #120	; 0x78
    903c:	f005 fc87 	bl	e94e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9040:	2800      	cmp	r0, #0
    9042:	d1e1      	bne.n	9008 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x420>
    9044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9048:	f7ff be7c 	b.w	8d44 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15c>
    904c:	2000011c 	.word	0x2000011c
    9050:	480a      	ldr	r0, [pc, #40]	; (907c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x494>)
    9052:	b510      	push	{r4, lr}
    9054:	6841      	ldr	r1, [r0, #4]
    9056:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    905a:	2801      	cmp	r0, #1
    905c:	d009      	beq.n	9072 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x48a>
    905e:	8808      	ldrh	r0, [r1, #0]
    9060:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    9064:	312c      	adds	r1, #44	; 0x2c
    9066:	f005 f894 	bl	e192 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    906a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    906e:	f7fc bfb5 	b.w	5fdc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9072:	2002      	movs	r0, #2
    9074:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    9078:	bd10      	pop	{r4, pc}
    907a:	0000      	.short	0x0000
    907c:	2000011c 	.word	0x2000011c
    9080:	b570      	push	{r4, r5, r6, lr}
    9082:	4c22      	ldr	r4, [pc, #136]	; (910c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x524>)
    9084:	f04f 0500 	mov.w	r5, #0
    9088:	8861      	ldrh	r1, [r4, #2]
    908a:	0748      	lsls	r0, r1, #29
    908c:	d510      	bpl.n	90b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    908e:	6860      	ldr	r0, [r4, #4]
    9090:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9094:	2a03      	cmp	r2, #3
    9096:	d004      	beq.n	90a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4ba>
    9098:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    909c:	2a07      	cmp	r2, #7
    909e:	d107      	bne.n	90b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    90a0:	e002      	b.n	90a8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c0>
    90a2:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
    90a6:	e026      	b.n	90f6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50e>
    90a8:	2201      	movs	r2, #1
    90aa:	7022      	strb	r2, [r4, #0]
    90ac:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
    90b0:	0788      	lsls	r0, r1, #30
    90b2:	d508      	bpl.n	90c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4de>
    90b4:	68a0      	ldr	r0, [r4, #8]
    90b6:	78c0      	ldrb	r0, [r0, #3]
    90b8:	2819      	cmp	r0, #25
    90ba:	d21a      	bcs.n	90f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    90bc:	4914      	ldr	r1, [pc, #80]	; (9110 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x528>)
    90be:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    90c2:	b1b0      	cbz	r0, 90f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    90c4:	4780      	blx	r0
    90c6:	f000 f867 	bl	9198 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5b0>
    90ca:	f000 f823 	bl	9114 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x52c>
    90ce:	4606      	mov	r6, r0
    90d0:	7860      	ldrb	r0, [r4, #1]
    90d2:	0700      	lsls	r0, r0, #28
    90d4:	d515      	bpl.n	9102 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    90d6:	6860      	ldr	r0, [r4, #4]
    90d8:	2300      	movs	r3, #0
    90da:	2105      	movs	r1, #5
    90dc:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    90e0:	3078      	adds	r0, #120	; 0x78
    90e2:	f004 fc9e 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    90e6:	b148      	cbz	r0, 90fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x514>
    90e8:	6860      	ldr	r0, [r4, #4]
    90ea:	2608      	movs	r6, #8
    90ec:	f880 51d2 	strb.w	r5, [r0, #466]	; 0x1d2
    90f0:	e007      	b.n	9102 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    90f2:	f240 61b1 	movw	r1, #1713	; 0x6b1
    90f6:	2036      	movs	r0, #54	; 0x36
    90f8:	f7fa fe30 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    90fc:	2000      	movs	r0, #0
    90fe:	f7fb fddd 	bl	4cbc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    9102:	6860      	ldr	r0, [r4, #4]
    9104:	f005 fc53 	bl	e9ae <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    9108:	4630      	mov	r0, r6
    910a:	bd70      	pop	{r4, r5, r6, pc}
    910c:	2000011c 	.word	0x2000011c
    9110:	20000190 	.word	0x20000190
    9114:	b570      	push	{r4, r5, r6, lr}
    9116:	4c1e      	ldr	r4, [pc, #120]	; (9190 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5a8>)
    9118:	2000      	movs	r0, #0
    911a:	78a1      	ldrb	r1, [r4, #2]
    911c:	07c9      	lsls	r1, r1, #31
    911e:	d01b      	beq.n	9158 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x570>
    9120:	68e0      	ldr	r0, [r4, #12]
    9122:	2300      	movs	r3, #0
    9124:	2105      	movs	r1, #5
    9126:	78c5      	ldrb	r5, [r0, #3]
    9128:	6860      	ldr	r0, [r4, #4]
    912a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    912e:	3078      	adds	r0, #120	; 0x78
    9130:	f004 fc77 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9134:	b188      	cbz	r0, 915a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9136:	2d06      	cmp	r5, #6
    9138:	d00f      	beq.n	915a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    913a:	dc06      	bgt.n	914a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x562>
    913c:	2d02      	cmp	r5, #2
    913e:	d00c      	beq.n	915a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9140:	2d04      	cmp	r5, #4
    9142:	d00a      	beq.n	915a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9144:	2d05      	cmp	r5, #5
    9146:	d106      	bne.n	9156 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x56e>
    9148:	e007      	b.n	915a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    914a:	2d0b      	cmp	r5, #11
    914c:	d005      	beq.n	915a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    914e:	2d0d      	cmp	r5, #13
    9150:	d003      	beq.n	915a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9152:	2d11      	cmp	r5, #17
    9154:	d001      	beq.n	915a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9156:	2008      	movs	r0, #8
    9158:	bd70      	pop	{r4, r5, r6, pc}
    915a:	68e0      	ldr	r0, [r4, #12]
    915c:	f7fc fe2c 	bl	5db8 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    9160:	b148      	cbz	r0, 9176 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    9162:	68e0      	ldr	r0, [r4, #12]
    9164:	78c0      	ldrb	r0, [r0, #3]
    9166:	2819      	cmp	r0, #25
    9168:	d205      	bcs.n	9176 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    916a:	490a      	ldr	r1, [pc, #40]	; (9194 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ac>)
    916c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    9170:	b108      	cbz	r0, 9176 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    9172:	4780      	blx	r0
    9174:	e002      	b.n	917c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x594>
    9176:	2000      	movs	r0, #0
    9178:	f000 fbdc 	bl	9934 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    917c:	6861      	ldr	r1, [r4, #4]
    917e:	e9f1 2336 	ldrd	r2, r3, [r1, #216]!	; 0xd8
    9182:	1c52      	adds	r2, r2, #1
    9184:	f143 0300 	adc.w	r3, r3, #0
    9188:	e9c1 2300 	strd	r2, r3, [r1]
    918c:	bd70      	pop	{r4, r5, r6, pc}
    918e:	0000      	.short	0x0000
    9190:	2000011c 	.word	0x2000011c
    9194:	2000012c 	.word	0x2000012c
    9198:	b510      	push	{r4, lr}
    919a:	4c11      	ldr	r4, [pc, #68]	; (91e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5f8>)
    919c:	78a0      	ldrb	r0, [r4, #2]
    919e:	0700      	lsls	r0, r0, #28
    91a0:	d517      	bpl.n	91d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    91a2:	6860      	ldr	r0, [r4, #4]
    91a4:	2100      	movs	r1, #0
    91a6:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    91aa:	f001 f97b 	bl	a4a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18bc>
    91ae:	6860      	ldr	r0, [r4, #4]
    91b0:	3078      	adds	r0, #120	; 0x78
    91b2:	f005 fbcc 	bl	e94e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    91b6:	b168      	cbz	r0, 91d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ec>
    91b8:	6860      	ldr	r0, [r4, #4]
    91ba:	21fe      	movs	r1, #254	; 0xfe
    91bc:	f880 10fc 	strb.w	r1, [r0, #252]	; 0xfc
    91c0:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    91c4:	2908      	cmp	r1, #8
    91c6:	d104      	bne.n	91d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    91c8:	2102      	movs	r1, #2
    91ca:	7021      	strb	r1, [r4, #0]
    91cc:	2100      	movs	r1, #0
    91ce:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    91d2:	bd10      	pop	{r4, pc}
    91d4:	f240 61bd 	movw	r1, #1725	; 0x6bd
    91d8:	2036      	movs	r0, #54	; 0x36
    91da:	f7fa fdbf 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    91de:	0000      	.short	0x0000
    91e0:	2000011c 	.word	0x2000011c
    91e4:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    91e6:	4605      	mov	r5, r0
    91e8:	4668      	mov	r0, sp
    91ea:	f7fb fbcf 	bl	498c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    91ee:	b318      	cbz	r0, 9238 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x650>
    91f0:	2222      	movs	r2, #34	; 0x22
    91f2:	2100      	movs	r1, #0
    91f4:	9800      	ldr	r0, [sp, #0]
    91f6:	f003 fa29 	bl	c64c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    91fa:	2103      	movs	r1, #3
    91fc:	9800      	ldr	r0, [sp, #0]
    91fe:	f004 fe96 	bl	df2e <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    9202:	9800      	ldr	r0, [sp, #0]
    9204:	7801      	ldrb	r1, [r0, #0]
    9206:	f021 0110 	bic.w	r1, r1, #16
    920a:	7001      	strb	r1, [r0, #0]
    920c:	4629      	mov	r1, r5
    920e:	f7fc fde3 	bl	5dd8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    9212:	2100      	movs	r1, #0
    9214:	4c6a      	ldr	r4, [pc, #424]	; (93c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d8>)
    9216:	2d19      	cmp	r5, #25
    9218:	d270      	bcs.n	92fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x714>
    921a:	e8df f005 	tbb	[pc, r5]
    921e:	1c24      	.short	0x1c24
    9220:	c9c94c10 	.word	0xc9c94c10
    9224:	c97016c2 	.word	0xc97016c2
    9228:	c964c2c2 	.word	0xc964c2c2
    922c:	b6c9c9c9 	.word	0xb6c9c9c9
    9230:	8181c2c2 	.word	0x8181c2c2
    9234:	00a3c99a 	.word	0x00a3c99a
    9238:	f640 014f 	movw	r1, #2127	; 0x84f
    923c:	e0bd      	b.n	93ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    923e:	6860      	ldr	r0, [r4, #4]
    9240:	9900      	ldr	r1, [sp, #0]
    9242:	f890 013d 	ldrb.w	r0, [r0, #317]	; 0x13d
    9246:	7108      	strb	r0, [r1, #4]
    9248:	e0ab      	b.n	93a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    924a:	6861      	ldr	r1, [r4, #4]
    924c:	9800      	ldr	r0, [sp, #0]
    924e:	f891 10fe 	ldrb.w	r1, [r1, #254]	; 0xfe
    9252:	7101      	strb	r1, [r0, #4]
    9254:	e0a5      	b.n	93a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9256:	6860      	ldr	r0, [r4, #4]
    9258:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    925c:	9800      	ldr	r0, [sp, #0]
    925e:	1c49      	adds	r1, r1, #1
    9260:	f004 fe45 	bl	deee <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>
    9264:	e09d      	b.n	93a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9266:	6860      	ldr	r0, [r4, #4]
    9268:	9d00      	ldr	r5, [sp, #0]
    926a:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
    926e:	f8b0 0148 	ldrh.w	r0, [r0, #328]	; 0x148
    9272:	f004 fd59 	bl	dd28 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    9276:	7128      	strb	r0, [r5, #4]
    9278:	6860      	ldr	r0, [r4, #4]
    927a:	9d00      	ldr	r5, [sp, #0]
    927c:	f500 70a6 	add.w	r0, r0, #332	; 0x14c
    9280:	c803      	ldmia	r0, {r0, r1}
    9282:	f004 fd46 	bl	dd12 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    9286:	7168      	strb	r0, [r5, #5]
    9288:	0a00      	lsrs	r0, r0, #8
    928a:	71a8      	strb	r0, [r5, #6]
    928c:	6860      	ldr	r0, [r4, #4]
    928e:	9d00      	ldr	r5, [sp, #0]
    9290:	f8d0 0150 	ldr.w	r0, [r0, #336]	; 0x150
    9294:	f004 fb7b 	bl	d98e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    9298:	71e8      	strb	r0, [r5, #7]
    929a:	0a00      	lsrs	r0, r0, #8
    929c:	7228      	strb	r0, [r5, #8]
    929e:	6862      	ldr	r2, [r4, #4]
    92a0:	9800      	ldr	r0, [sp, #0]
    92a2:	f8b2 1154 	ldrh.w	r1, [r2, #340]	; 0x154
    92a6:	7241      	strb	r1, [r0, #9]
    92a8:	0a09      	lsrs	r1, r1, #8
    92aa:	7281      	strb	r1, [r0, #10]
    92ac:	f8b2 1156 	ldrh.w	r1, [r2, #342]	; 0x156
    92b0:	f004 fe22 	bl	def8 <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>
    92b4:	e075      	b.n	93a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    92b6:	6861      	ldr	r1, [r4, #4]
    92b8:	9800      	ldr	r0, [sp, #0]
    92ba:	f201 115b 	addw	r1, r1, #347	; 0x15b
    92be:	f004 fe26 	bl	df0e <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>
    92c2:	6861      	ldr	r1, [r4, #4]
    92c4:	9800      	ldr	r0, [sp, #0]
    92c6:	f201 1163 	addw	r1, r1, #355	; 0x163
    92ca:	f004 fe19 	bl	df00 <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>
    92ce:	6861      	ldr	r1, [r4, #4]
    92d0:	9800      	ldr	r0, [sp, #0]
    92d2:	f201 1175 	addw	r1, r1, #373	; 0x175
    92d6:	f004 fe1f 	bl	df18 <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>
    92da:	6861      	ldr	r1, [r4, #4]
    92dc:	9800      	ldr	r0, [sp, #0]
    92de:	31f0      	adds	r1, #240	; 0xf0
    92e0:	f004 fe11 	bl	df06 <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>
    92e4:	e05d      	b.n	93a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    92e6:	9800      	ldr	r0, [sp, #0]
    92e8:	220b      	movs	r2, #11
    92ea:	7102      	strb	r2, [r0, #4]
    92ec:	2259      	movs	r2, #89	; 0x59
    92ee:	7142      	strb	r2, [r0, #5]
    92f0:	7181      	strb	r1, [r0, #6]
    92f2:	21fe      	movs	r1, #254	; 0xfe
    92f4:	71c1      	strb	r1, [r0, #7]
    92f6:	2112      	movs	r1, #18
    92f8:	7201      	strb	r1, [r0, #8]
    92fa:	e052      	b.n	93a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    92fc:	e058      	b.n	93b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7c8>
    92fe:	9101      	str	r1, [sp, #4]
    9300:	9102      	str	r1, [sp, #8]
    9302:	f001 fe5d 	bl	afc0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9306:	f644 112f 	movw	r1, #18735	; 0x492f
    930a:	4008      	ands	r0, r1
    930c:	f88d 0004 	strb.w	r0, [sp, #4]
    9310:	0a00      	lsrs	r0, r0, #8
    9312:	f88d 0005 	strb.w	r0, [sp, #5]
    9316:	a901      	add	r1, sp, #4
    9318:	9800      	ldr	r0, [sp, #0]
    931a:	f004 fe03 	bl	df24 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    931e:	e040      	b.n	93a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9320:	6860      	ldr	r0, [r4, #4]
    9322:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    9326:	9800      	ldr	r0, [sp, #0]
    9328:	f004 fe13 	bl	df52 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    932c:	6860      	ldr	r0, [r4, #4]
    932e:	f8b0 10fe 	ldrh.w	r1, [r0, #254]	; 0xfe
    9332:	9800      	ldr	r0, [sp, #0]
    9334:	f004 fe11 	bl	df5a <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    9338:	6860      	ldr	r0, [r4, #4]
    933a:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    933e:	9800      	ldr	r0, [sp, #0]
    9340:	f004 fdff 	bl	df42 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    9344:	6860      	ldr	r0, [r4, #4]
    9346:	f8b0 1100 	ldrh.w	r1, [r0, #256]	; 0x100
    934a:	9800      	ldr	r0, [sp, #0]
    934c:	f004 fdfd 	bl	df4a <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    9350:	e027      	b.n	93a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9352:	6861      	ldr	r1, [r4, #4]
    9354:	9800      	ldr	r0, [sp, #0]
    9356:	f891 2140 	ldrb.w	r2, [r1, #320]	; 0x140
    935a:	7102      	strb	r2, [r0, #4]
    935c:	f891 1141 	ldrb.w	r1, [r1, #321]	; 0x141
    9360:	7141      	strb	r1, [r0, #5]
    9362:	e01e      	b.n	93a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9364:	6860      	ldr	r0, [r4, #4]
    9366:	f890 0127 	ldrb.w	r0, [r0, #295]	; 0x127
    936a:	f004 fbfe 	bl	db6a <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    936e:	4601      	mov	r1, r0
    9370:	9800      	ldr	r0, [sp, #0]
    9372:	f004 fdfa 	bl	df6a <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>
    9376:	6860      	ldr	r0, [r4, #4]
    9378:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    937c:	f004 fbf5 	bl	db6a <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    9380:	4601      	mov	r1, r0
    9382:	9800      	ldr	r0, [sp, #0]
    9384:	f004 fddb 	bl	df3e <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>
    9388:	e00b      	b.n	93a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    938a:	6860      	ldr	r0, [r4, #4]
    938c:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
    9390:	9800      	ldr	r0, [sp, #0]
    9392:	f004 fda8 	bl	dee6 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    9396:	6860      	ldr	r0, [r4, #4]
    9398:	f890 10ff 	ldrb.w	r1, [r0, #255]	; 0xff
    939c:	9800      	ldr	r0, [sp, #0]
    939e:	f004 fda4 	bl	deea <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    93a2:	f7fb facd 	bl	4940 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    93a6:	b130      	cbz	r0, 93b6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ce>
    93a8:	9800      	ldr	r0, [sp, #0]
    93aa:	f7ff fcb1 	bl	8d10 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    93ae:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    93b0:	f640 01db 	movw	r1, #2267	; 0x8db
    93b4:	e001      	b.n	93ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    93b6:	f640 01e1 	movw	r1, #2273	; 0x8e1
    93ba:	2036      	movs	r0, #54	; 0x36
    93bc:	f7fa fcce 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    93c0:	2000011c 	.word	0x2000011c
    93c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    93c8:	4c27      	ldr	r4, [pc, #156]	; (9468 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x880>)
    93ca:	4680      	mov	r8, r0
    93cc:	460d      	mov	r5, r1
    93ce:	8860      	ldrh	r0, [r4, #2]
    93d0:	f04f 0600 	mov.w	r6, #0
    93d4:	05c1      	lsls	r1, r0, #23
    93d6:	4620      	mov	r0, r4
    93d8:	6840      	ldr	r0, [r0, #4]
    93da:	d502      	bpl.n	93e2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7fa>
    93dc:	f8a0 60ae 	strh.w	r6, [r0, #174]	; 0xae
    93e0:	e004      	b.n	93ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x804>
    93e2:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
    93e6:	1c49      	adds	r1, r1, #1
    93e8:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
    93ec:	f005 fb3a 	bl	ea64 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    93f0:	2701      	movs	r7, #1
    93f2:	b1e0      	cbz	r0, 942e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    93f4:	8860      	ldrh	r0, [r4, #2]
    93f6:	0500      	lsls	r0, r0, #20
    93f8:	d506      	bpl.n	9408 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    93fa:	6860      	ldr	r0, [r4, #4]
    93fc:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    9400:	b111      	cbz	r1, 9408 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    9402:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    9406:	e012      	b.n	942e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    9408:	6860      	ldr	r0, [r4, #4]
    940a:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    940e:	1c49      	adds	r1, r1, #1
    9410:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    9414:	f005 fabc 	bl	e990 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    9418:	6860      	ldr	r0, [r4, #4]
    941a:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    941e:	4291      	cmp	r1, r2
    9420:	d305      	bcc.n	942e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    9422:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    9426:	f880 718e 	strb.w	r7, [r0, #398]	; 0x18e
    942a:	f7fc fdd7 	bl	5fdc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    942e:	8860      	ldrh	r0, [r4, #2]
    9430:	f410 7f40 	tst.w	r0, #768	; 0x300
    9434:	d008      	beq.n	9448 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    9436:	6860      	ldr	r0, [r4, #4]
    9438:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    943c:	b921      	cbnz	r1, 9448 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    943e:	f880 7089 	strb.w	r7, [r0, #137]	; 0x89
    9442:	2101      	movs	r1, #1
    9444:	f7fe fa6c 	bl	7920 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    9448:	ea58 0005 	orrs.w	r0, r8, r5
    944c:	d104      	bne.n	9458 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x870>
    944e:	f7ff fe17 	bl	9080 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x498>
    9452:	4605      	mov	r5, r0
    9454:	f7ff fcea 	bl	8e2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x244>
    9458:	4629      	mov	r1, r5
    945a:	4640      	mov	r0, r8
    945c:	f000 ff7a 	bl	a354 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x176c>
    9460:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9464:	f7fb ba56 	b.w	4914 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    9468:	2000011c 	.word	0x2000011c
    946c:	4813      	ldr	r0, [pc, #76]	; (94bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d4>)
    946e:	6840      	ldr	r0, [r0, #4]
    9470:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    9474:	b129      	cbz	r1, 9482 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x89a>
    9476:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
    947a:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    947e:	4291      	cmp	r1, r2
    9480:	d215      	bcs.n	94ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    9482:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    9486:	b129      	cbz	r1, 9494 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ac>
    9488:	f8b0 10ba 	ldrh.w	r1, [r0, #186]	; 0xba
    948c:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    9490:	4291      	cmp	r1, r2
    9492:	d20c      	bcs.n	94ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    9494:	f8b0 20b2 	ldrh.w	r2, [r0, #178]	; 0xb2
    9498:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
    949c:	428a      	cmp	r2, r1
    949e:	d206      	bcs.n	94ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    94a0:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
    94a4:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    94a8:	b11a      	cbz	r2, 94b2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ca>
    94aa:	4288      	cmp	r0, r1
    94ac:	d303      	bcc.n	94b6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ce>
    94ae:	2001      	movs	r0, #1
    94b0:	4770      	bx	lr
    94b2:	2806      	cmp	r0, #6
    94b4:	d2fb      	bcs.n	94ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    94b6:	2000      	movs	r0, #0
    94b8:	4770      	bx	lr
    94ba:	0000      	.short	0x0000
    94bc:	2000011c 	.word	0x2000011c
    94c0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    94c2:	4c54      	ldr	r4, [pc, #336]	; (9614 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2c>)
    94c4:	6860      	ldr	r0, [r4, #4]
    94c6:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    94ca:	f88d 1000 	strb.w	r1, [sp]
    94ce:	9900      	ldr	r1, [sp, #0]
    94d0:	9100      	str	r1, [sp, #0]
    94d2:	f89d 1000 	ldrb.w	r1, [sp]
    94d6:	b129      	cbz	r1, 94e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8fc>
    94d8:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    94dc:	f004 fafa 	bl	dad4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    94e0:	2800      	cmp	r0, #0
    94e2:	d00a      	beq.n	94fa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x912>
    94e4:	6860      	ldr	r0, [r4, #4]
    94e6:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    94ea:	b181      	cbz	r1, 950e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x926>
    94ec:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    94f0:	b149      	cbz	r1, 9506 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x91e>
    94f2:	f890 008b 	ldrb.w	r0, [r0, #139]	; 0x8b
    94f6:	b108      	cbz	r0, 94fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x914>
    94f8:	200a      	movs	r0, #10
    94fa:	e087      	b.n	960c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    94fc:	f44f 61e7 	mov.w	r1, #1848	; 0x738
    9500:	2036      	movs	r0, #54	; 0x36
    9502:	f7fa fc2b 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9506:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    950a:	f000 b885 	b.w	9618 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    950e:	f890 1159 	ldrb.w	r1, [r0, #345]	; 0x159
    9512:	b109      	cbz	r1, 9518 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x930>
    9514:	2008      	movs	r0, #8
    9516:	e079      	b.n	960c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    9518:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
    951c:	2500      	movs	r5, #0
    951e:	b181      	cbz	r1, 9542 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x95a>
    9520:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
    9524:	0780      	lsls	r0, r0, #30
    9526:	d10b      	bne.n	9540 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    9528:	200c      	movs	r0, #12
    952a:	f000 f961 	bl	97f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    952e:	6860      	ldr	r0, [r4, #4]
    9530:	2101      	movs	r1, #1
    9532:	f820 5fb4 	strh.w	r5, [r0, #180]!
    9536:	7101      	strb	r1, [r0, #4]
    9538:	7b01      	ldrb	r1, [r0, #12]
    953a:	f041 0101 	orr.w	r1, r1, #1
    953e:	7301      	strb	r1, [r0, #12]
    9540:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9542:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    9546:	f88d 1004 	strb.w	r1, [sp, #4]
    954a:	9901      	ldr	r1, [sp, #4]
    954c:	9101      	str	r1, [sp, #4]
    954e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9552:	b141      	cbz	r1, 9566 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x97e>
    9554:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    9558:	f88d 1000 	strb.w	r1, [sp]
    955c:	9900      	ldr	r1, [sp, #0]
    955e:	9100      	str	r1, [sp, #0]
    9560:	f89d 1000 	ldrb.w	r1, [sp]
    9564:	b391      	cbz	r1, 95cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9e4>
    9566:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    956a:	2901      	cmp	r1, #1
    956c:	d1e8      	bne.n	9540 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    956e:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    9572:	f88d 1000 	strb.w	r1, [sp]
    9576:	9900      	ldr	r1, [sp, #0]
    9578:	9100      	str	r1, [sp, #0]
    957a:	f89d 1000 	ldrb.w	r1, [sp]
    957e:	2900      	cmp	r1, #0
    9580:	d1de      	bne.n	9540 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    9582:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9586:	f004 faa5 	bl	dad4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    958a:	2800      	cmp	r0, #0
    958c:	d1d8      	bne.n	9540 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    958e:	6860      	ldr	r0, [r4, #4]
    9590:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    9594:	f005 f9e3 	bl	e95e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    9598:	4605      	mov	r5, r0
    959a:	6860      	ldr	r0, [r4, #4]
    959c:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    95a0:	f005 f9dd 	bl	e95e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    95a4:	4606      	mov	r6, r0
    95a6:	6860      	ldr	r0, [r4, #4]
    95a8:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
    95ac:	4628      	mov	r0, r5
    95ae:	f005 f9e1 	bl	e974 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    95b2:	b350      	cbz	r0, 960a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    95b4:	6860      	ldr	r0, [r4, #4]
    95b6:	f890 1141 	ldrb.w	r1, [r0, #321]	; 0x141
    95ba:	4630      	mov	r0, r6
    95bc:	f005 f9da 	bl	e974 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    95c0:	b318      	cbz	r0, 960a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    95c2:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    95c6:	2000      	movs	r0, #0
    95c8:	f000 b8ee 	b.w	97a8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    95cc:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    95d0:	2924      	cmp	r1, #36	; 0x24
    95d2:	d018      	beq.n	9606 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    95d4:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    95d8:	2924      	cmp	r1, #36	; 0x24
    95da:	d014      	beq.n	9606 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    95dc:	f05f 0300 	movs.w	r3, #0
    95e0:	f500 7293 	add.w	r2, r0, #294	; 0x126
    95e4:	f500 7199 	add.w	r1, r0, #306	; 0x132
    95e8:	f004 fdf7 	bl	e1da <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    95ec:	6860      	ldr	r0, [r4, #4]
    95ee:	4602      	mov	r2, r0
    95f0:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    95f4:	f102 012c 	add.w	r1, r2, #44	; 0x2c
    95f8:	8bc8      	ldrh	r0, [r1, #30]
    95fa:	f822 0ffe 	strh.w	r0, [r2, #254]!
    95fe:	8c48      	ldrh	r0, [r1, #34]	; 0x22
    9600:	8050      	strh	r0, [r2, #2]
    9602:	2014      	movs	r0, #20
    9604:	e002      	b.n	960c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    9606:	2301      	movs	r3, #1
    9608:	e7ea      	b.n	95e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9f8>
    960a:	2016      	movs	r0, #22
    960c:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    9610:	f000 b8ee 	b.w	97f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9614:	2000011c 	.word	0x2000011c
    9618:	b510      	push	{r4, lr}
    961a:	4c1e      	ldr	r4, [pc, #120]	; (9694 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaac>)
    961c:	6862      	ldr	r2, [r4, #4]
    961e:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    9622:	2808      	cmp	r0, #8
    9624:	d20d      	bcs.n	9642 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa5a>
    9626:	f1c0 0108 	rsb	r1, r0, #8
    962a:	4410      	add	r0, r2
    962c:	b2c9      	uxtb	r1, r1
    962e:	f200 1075 	addw	r0, r0, #373	; 0x175
    9632:	f7fa fc21 	bl	3e78 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    9636:	6861      	ldr	r1, [r4, #4]
    9638:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    963c:	4410      	add	r0, r2
    963e:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    9642:	6862      	ldr	r2, [r4, #4]
    9644:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    9648:	3808      	subs	r0, #8
    964a:	2804      	cmp	r0, #4
    964c:	d20c      	bcs.n	9668 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa80>
    964e:	f1c0 0104 	rsb	r1, r0, #4
    9652:	4410      	add	r0, r2
    9654:	b2c9      	uxtb	r1, r1
    9656:	30f0      	adds	r0, #240	; 0xf0
    9658:	f7fa fc0e 	bl	3e78 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    965c:	6861      	ldr	r1, [r4, #4]
    965e:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    9662:	4410      	add	r0, r2
    9664:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    9668:	6860      	ldr	r0, [r4, #4]
    966a:	f890 1102 	ldrb.w	r1, [r0, #258]	; 0x102
    966e:	290c      	cmp	r1, #12
    9670:	d30e      	bcc.n	9690 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaa8>
    9672:	d005      	beq.n	9680 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa98>
    9674:	f640 1131 	movw	r1, #2353	; 0x931
    9678:	f04f 0036 	mov.w	r0, #54	; 0x36
    967c:	f7fa fb6e 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9680:	2100      	movs	r1, #0
    9682:	f880 1102 	strb.w	r1, [r0, #258]	; 0x102
    9686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    968a:	2003      	movs	r0, #3
    968c:	f000 b8b0 	b.w	97f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9690:	bd10      	pop	{r4, pc}
    9692:	0000      	.short	0x0000
    9694:	2000011c 	.word	0x2000011c
    9698:	b570      	push	{r4, r5, r6, lr}
    969a:	4b20      	ldr	r3, [pc, #128]	; (971c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb34>)
    969c:	4602      	mov	r2, r0
    969e:	460c      	mov	r4, r1
    96a0:	8858      	ldrh	r0, [r3, #2]
    96a2:	4310      	orrs	r0, r2
    96a4:	8058      	strh	r0, [r3, #2]
    96a6:	4618      	mov	r0, r3
    96a8:	0791      	lsls	r1, r2, #30
    96aa:	6840      	ldr	r0, [r0, #4]
    96ac:	ea4f 71c2 	mov.w	r1, r2, lsl #31
    96b0:	d507      	bpl.n	96c2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xada>
    96b2:	b121      	cbz	r1, 96be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xad6>
    96b4:	f640 21c5 	movw	r1, #2757	; 0xac5
    96b8:	2036      	movs	r0, #54	; 0x36
    96ba:	f7fa fb4f 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96be:	609c      	str	r4, [r3, #8]
    96c0:	e003      	b.n	96ca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xae2>
    96c2:	b101      	cbz	r1, 96c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xade>
    96c4:	60dc      	str	r4, [r3, #12]
    96c6:	0791      	lsls	r1, r2, #30
    96c8:	d515      	bpl.n	96f6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    96ca:	78e1      	ldrb	r1, [r4, #3]
    96cc:	2906      	cmp	r1, #6
    96ce:	d002      	beq.n	96d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaee>
    96d0:	290b      	cmp	r1, #11
    96d2:	d110      	bne.n	96f6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    96d4:	e008      	b.n	96e8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb00>
    96d6:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    96da:	2918      	cmp	r1, #24
    96dc:	d10b      	bne.n	96f6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    96de:	2100      	movs	r1, #0
    96e0:	e9c0 1136 	strd	r1, r1, [r0, #216]	; 0xd8
    96e4:	2101      	movs	r1, #1
    96e6:	e004      	b.n	96f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0a>
    96e8:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    96ec:	2912      	cmp	r1, #18
    96ee:	d102      	bne.n	96f6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    96f0:	2100      	movs	r1, #0
    96f2:	f880 108b 	strb.w	r1, [r0, #139]	; 0x8b
    96f6:	0691      	lsls	r1, r2, #26
    96f8:	d501      	bpl.n	96fe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb16>
    96fa:	2108      	movs	r1, #8
    96fc:	7059      	strb	r1, [r3, #1]
    96fe:	0611      	lsls	r1, r2, #24
    9700:	d50a      	bpl.n	9718 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb30>
    9702:	8a82      	ldrh	r2, [r0, #20]
    9704:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    9708:	4620      	mov	r0, r4
    970a:	f7ff fae3 	bl	8cd4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xec>
    970e:	4620      	mov	r0, r4
    9710:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9714:	f7ff bafc 	b.w	8d10 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    9718:	bd70      	pop	{r4, r5, r6, pc}
    971a:	0000      	.short	0x0000
    971c:	2000011c 	.word	0x2000011c
    9720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9724:	4c1f      	ldr	r4, [pc, #124]	; (97a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbbc>)
    9726:	2501      	movs	r5, #1
    9728:	6862      	ldr	r2, [r4, #4]
    972a:	f892 0126 	ldrb.w	r0, [r2, #294]	; 0x126
    972e:	b908      	cbnz	r0, 9734 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb4c>
    9730:	f892 006a 	ldrb.w	r0, [r2, #106]	; 0x6a
    9734:	f892 1127 	ldrb.w	r1, [r2, #295]	; 0x127
    9738:	b909      	cbnz	r1, 973e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb56>
    973a:	f892 106b 	ldrb.w	r1, [r2, #107]	; 0x6b
    973e:	f882 006a 	strb.w	r0, [r2, #106]	; 0x6a
    9742:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
    9746:	3262      	adds	r2, #98	; 0x62
    9748:	2001      	movs	r0, #1
    974a:	7290      	strb	r0, [r2, #10]
    974c:	2000      	movs	r0, #0
    974e:	f000 f82b 	bl	97a8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    9752:	6860      	ldr	r0, [r4, #4]
    9754:	302c      	adds	r0, #44	; 0x2c
    9756:	f004 fdaf 	bl	e2b8 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    975a:	4606      	mov	r6, r0
    975c:	6860      	ldr	r0, [r4, #4]
    975e:	f004 fd57 	bl	e210 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9762:	b1c0      	cbz	r0, 9796 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    9764:	6860      	ldr	r0, [r4, #4]
    9766:	302c      	adds	r0, #44	; 0x2c
    9768:	f004 fda6 	bl	e2b8 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    976c:	6861      	ldr	r1, [r4, #4]
    976e:	4607      	mov	r7, r0
    9770:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    9774:	8808      	ldrh	r0, [r1, #0]
    9776:	312c      	adds	r1, #44	; 0x2c
    9778:	f004 fd0b 	bl	e192 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    977c:	42be      	cmp	r6, r7
    977e:	d20a      	bcs.n	9796 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    9780:	f7f7 fed4 	bl	152c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    9784:	4601      	mov	r1, r0
    9786:	1bb8      	subs	r0, r7, r6
    9788:	2865      	cmp	r0, #101	; 0x65
    978a:	d200      	bcs.n	978e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xba6>
    978c:	2065      	movs	r0, #101	; 0x65
    978e:	f7f7 fdc1 	bl	1314 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    9792:	b100      	cbz	r0, 9796 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    9794:	2500      	movs	r5, #0
    9796:	2104      	movs	r1, #4
    9798:	6860      	ldr	r0, [r4, #4]
    979a:	f7fe f8c1 	bl	7920 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    979e:	4628      	mov	r0, r5
    97a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    97a4:	2000011c 	.word	0x2000011c
    97a8:	b510      	push	{r4, lr}
    97aa:	4c10      	ldr	r4, [pc, #64]	; (97ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc04>)
    97ac:	6861      	ldr	r1, [r4, #4]
    97ae:	880a      	ldrh	r2, [r1, #0]
    97b0:	f8a1 21b4 	strh.w	r2, [r1, #436]	; 0x1b4
    97b4:	f881 01b2 	strb.w	r0, [r1, #434]	; 0x1b2
    97b8:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    97bc:	f005 f8cf 	bl	e95e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    97c0:	6861      	ldr	r1, [r4, #4]
    97c2:	f881 01b6 	strb.w	r0, [r1, #438]	; 0x1b6
    97c6:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    97ca:	f005 f8c8 	bl	e95e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    97ce:	6862      	ldr	r2, [r4, #4]
    97d0:	f502 71d8 	add.w	r1, r2, #432	; 0x1b0
    97d4:	f882 01b7 	strb.w	r0, [r2, #439]	; 0x1b7
    97d8:	2001      	movs	r0, #1
    97da:	7008      	strb	r0, [r1, #0]
    97dc:	2000      	movs	r0, #0
    97de:	f882 013e 	strb.w	r0, [r2, #318]	; 0x13e
    97e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    97e6:	f7fc bbf9 	b.w	5fdc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    97ea:	0000      	.short	0x0000
    97ec:	2000011c 	.word	0x2000011c
    97f0:	490f      	ldr	r1, [pc, #60]	; (9830 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc48>)
    97f2:	280c      	cmp	r0, #12
    97f4:	6849      	ldr	r1, [r1, #4]
    97f6:	f881 00fc 	strb.w	r0, [r1, #252]	; 0xfc
    97fa:	d014      	beq.n	9826 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    97fc:	2813      	cmp	r0, #19
    97fe:	d012      	beq.n	9826 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    9800:	2818      	cmp	r0, #24
    9802:	d010      	beq.n	9826 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    9804:	2200      	movs	r2, #0
    9806:	2811      	cmp	r0, #17
    9808:	d00e      	beq.n	9828 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    980a:	2807      	cmp	r0, #7
    980c:	d00b      	beq.n	9826 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    980e:	2815      	cmp	r0, #21
    9810:	d00a      	beq.n	9828 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    9812:	2801      	cmp	r0, #1
    9814:	d007      	beq.n	9826 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    9816:	2800      	cmp	r0, #0
    9818:	d005      	beq.n	9826 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    981a:	2802      	cmp	r0, #2
    981c:	d003      	beq.n	9826 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    981e:	f821 2fb4 	strh.w	r2, [r1, #180]!
    9822:	2001      	movs	r0, #1
    9824:	7108      	strb	r0, [r1, #4]
    9826:	4770      	bx	lr
    9828:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    982c:	4770      	bx	lr
    982e:	0000      	.short	0x0000
    9830:	2000011c 	.word	0x2000011c
    9834:	b538      	push	{r3, r4, r5, lr}
    9836:	4c11      	ldr	r4, [pc, #68]	; (987c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc94>)
    9838:	6862      	ldr	r2, [r4, #4]
    983a:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
    983e:	f8ad 2000 	strh.w	r2, [sp]
    9842:	f004 f9c7 	bl	dbd4 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    9846:	f89d 3000 	ldrb.w	r3, [sp]
    984a:	b2c2      	uxtb	r2, r0
    984c:	2100      	movs	r1, #0
    984e:	4293      	cmp	r3, r2
    9850:	d003      	beq.n	985a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc72>
    9852:	6863      	ldr	r3, [r4, #4]
    9854:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
    9858:	e002      	b.n	9860 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc78>
    985a:	6862      	ldr	r2, [r4, #4]
    985c:	f882 1126 	strb.w	r1, [r2, #294]	; 0x126
    9860:	f89d 2001 	ldrb.w	r2, [sp, #1]
    9864:	f3c0 2007 	ubfx	r0, r0, #8, #8
    9868:	4282      	cmp	r2, r0
    986a:	d003      	beq.n	9874 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc8c>
    986c:	6861      	ldr	r1, [r4, #4]
    986e:	f881 0127 	strb.w	r0, [r1, #295]	; 0x127
    9872:	bd38      	pop	{r3, r4, r5, pc}
    9874:	6860      	ldr	r0, [r4, #4]
    9876:	f880 1127 	strb.w	r1, [r0, #295]	; 0x127
    987a:	bd38      	pop	{r3, r4, r5, pc}
    987c:	2000011c 	.word	0x2000011c
    9880:	b510      	push	{r4, lr}
    9882:	4c0c      	ldr	r4, [pc, #48]	; (98b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xccc>)
    9884:	6861      	ldr	r1, [r4, #4]
    9886:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    988a:	2813      	cmp	r0, #19
    988c:	d001      	beq.n	9892 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xcaa>
    988e:	2002      	movs	r0, #2
    9890:	bd10      	pop	{r4, pc}
    9892:	f201 117d 	addw	r1, r1, #381	; 0x17d
    9896:	68e0      	ldr	r0, [r4, #12]
    9898:	f004 fad7 	bl	de4a <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>
    989c:	6861      	ldr	r1, [r4, #4]
    989e:	68e0      	ldr	r0, [r4, #12]
    98a0:	31f4      	adds	r1, #244	; 0xf4
    98a2:	f004 facf 	bl	de44 <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>
    98a6:	6861      	ldr	r1, [r4, #4]
    98a8:	2016      	movs	r0, #22
    98aa:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    98ae:	2000      	movs	r0, #0
    98b0:	bd10      	pop	{r4, pc}
    98b2:	0000      	.short	0x0000
    98b4:	2000011c 	.word	0x2000011c
    98b8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    98ba:	4c1d      	ldr	r4, [pc, #116]	; (9930 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd48>)
    98bc:	2300      	movs	r3, #0
    98be:	2107      	movs	r1, #7
    98c0:	6860      	ldr	r0, [r4, #4]
    98c2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    98c6:	3078      	adds	r0, #120	; 0x78
    98c8:	f004 f8ab 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98cc:	b370      	cbz	r0, 992c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd44>
    98ce:	4669      	mov	r1, sp
    98d0:	68e0      	ldr	r0, [r4, #12]
    98d2:	f004 fabf 	bl	de54 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>
    98d6:	f001 fb73 	bl	afc0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    98da:	f644 112f 	movw	r1, #18735	; 0x492f
    98de:	4008      	ands	r0, r1
    98e0:	f89d 2000 	ldrb.w	r2, [sp]
    98e4:	6861      	ldr	r1, [r4, #4]
    98e6:	4002      	ands	r2, r0
    98e8:	2500      	movs	r5, #0
    98ea:	f881 20c6 	strb.w	r2, [r1, #198]	; 0xc6
    98ee:	f89d 2001 	ldrb.w	r2, [sp, #1]
    98f2:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    98f6:	f881 00c7 	strb.w	r0, [r1, #199]	; 0xc7
    98fa:	f881 50b8 	strb.w	r5, [r1, #184]	; 0xb8
    98fe:	f881 5159 	strb.w	r5, [r1, #345]	; 0x159
    9902:	8808      	ldrh	r0, [r1, #0]
    9904:	f8a1 01bc 	strh.w	r0, [r1, #444]	; 0x1bc
    9908:	f881 51ba 	strb.w	r5, [r1, #442]	; 0x1ba
    990c:	9a00      	ldr	r2, [sp, #0]
    990e:	f8c1 21be 	str.w	r2, [r1, #446]	; 0x1be
    9912:	9a01      	ldr	r2, [sp, #4]
    9914:	f8c1 21c2 	str.w	r2, [r1, #450]	; 0x1c2
    9918:	2001      	movs	r0, #1
    991a:	f881 01b8 	strb.w	r0, [r1, #440]	; 0x1b8
    991e:	f7fc fb5d 	bl	5fdc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9922:	6860      	ldr	r0, [r4, #4]
    9924:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9928:	2000      	movs	r0, #0
    992a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    992c:	2001      	movs	r0, #1
    992e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9930:	2000011c 	.word	0x2000011c
    9934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9938:	4c19      	ldr	r4, [pc, #100]	; (99a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb8>)
    993a:	2600      	movs	r6, #0
    993c:	2703      	movs	r7, #3
    993e:	f8d4 c004 	ldr.w	ip, [r4, #4]
    9942:	2501      	movs	r5, #1
    9944:	b1a0      	cbz	r0, 9970 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd88>
    9946:	68e0      	ldr	r0, [r4, #12]
    9948:	78c0      	ldrb	r0, [r0, #3]
    994a:	f88c 00fa 	strb.w	r0, [ip, #250]	; 0xfa
    994e:	fa05 f000 	lsl.w	r0, r5, r0
    9952:	f3c0 50c0 	ubfx	r0, r0, #23, #1
    9956:	b130      	cbz	r0, 9966 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd7e>
    9958:	f88c 7085 	strb.w	r7, [ip, #133]	; 0x85
    995c:	f8ac 60b4 	strh.w	r6, [ip, #180]	; 0xb4
    9960:	f88c 50b8 	strb.w	r5, [ip, #184]	; 0xb8
    9964:	e017      	b.n	9996 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdae>
    9966:	f240 5143 	movw	r1, #1347	; 0x543
    996a:	2036      	movs	r0, #54	; 0x36
    996c:	f7fa f9f6 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9970:	2300      	movs	r3, #0
    9972:	f89c 2086 	ldrb.w	r2, [ip, #134]	; 0x86
    9976:	4619      	mov	r1, r3
    9978:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    997c:	f004 f851 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9980:	b160      	cbz	r0, 999c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb4>
    9982:	68e0      	ldr	r0, [r4, #12]
    9984:	78c1      	ldrb	r1, [r0, #3]
    9986:	6860      	ldr	r0, [r4, #4]
    9988:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
    998c:	f800 7f86 	strb.w	r7, [r0, #134]!
    9990:	8686      	strh	r6, [r0, #52]	; 0x34
    9992:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    9996:	2000      	movs	r0, #0
    9998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    999c:	2001      	movs	r0, #1
    999e:	e7fb      	b.n	9998 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb0>
    99a0:	2000011c 	.word	0x2000011c
    99a4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    99a8:	4c30      	ldr	r4, [pc, #192]	; (9a6c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe84>)
    99aa:	2300      	movs	r3, #0
    99ac:	4619      	mov	r1, r3
    99ae:	6860      	ldr	r0, [r4, #4]
    99b0:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    99b4:	3078      	adds	r0, #120	; 0x78
    99b6:	f004 f834 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    99ba:	b308      	cbz	r0, 9a00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe18>
    99bc:	68e0      	ldr	r0, [r4, #12]
    99be:	f004 fa5e 	bl	de7e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    99c2:	b300      	cbz	r0, 9a06 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1e>
    99c4:	68e0      	ldr	r0, [r4, #12]
    99c6:	f004 fa50 	bl	de6a <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    99ca:	4607      	mov	r7, r0
    99cc:	68e0      	ldr	r0, [r4, #12]
    99ce:	f004 fa50 	bl	de72 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    99d2:	4606      	mov	r6, r0
    99d4:	68e0      	ldr	r0, [r4, #12]
    99d6:	f004 fa46 	bl	de66 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    99da:	4605      	mov	r5, r0
    99dc:	68e0      	ldr	r0, [r4, #12]
    99de:	f004 fa46 	bl	de6e <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    99e2:	4601      	mov	r1, r0
    99e4:	9700      	str	r7, [sp, #0]
    99e6:	6860      	ldr	r0, [r4, #4]
    99e8:	4633      	mov	r3, r6
    99ea:	462a      	mov	r2, r5
    99ec:	302c      	adds	r0, #44	; 0x2c
    99ee:	f004 fc9d 	bl	e32c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    99f2:	6861      	ldr	r1, [r4, #4]
    99f4:	2501      	movs	r5, #1
    99f6:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    99fa:	281c      	cmp	r0, #28
    99fc:	d008      	beq.n	9a10 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe28>
    99fe:	e009      	b.n	9a14 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe2c>
    9a00:	2001      	movs	r0, #1
    9a02:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9a06:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9a0a:	2000      	movs	r0, #0
    9a0c:	f7ff bf92 	b.w	9934 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    9a10:	f881 5060 	strb.w	r5, [r1, #96]	; 0x60
    9a14:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    9a18:	2801      	cmp	r0, #1
    9a1a:	d011      	beq.n	9a40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe58>
    9a1c:	f891 0133 	ldrb.w	r0, [r1, #307]	; 0x133
    9a20:	f88d 0004 	strb.w	r0, [sp, #4]
    9a24:	9801      	ldr	r0, [sp, #4]
    9a26:	9001      	str	r0, [sp, #4]
    9a28:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9a2c:	b940      	cbnz	r0, 9a40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe58>
    9a2e:	f891 0132 	ldrb.w	r0, [r1, #306]	; 0x132
    9a32:	f88d 0000 	strb.w	r0, [sp]
    9a36:	9800      	ldr	r0, [sp, #0]
    9a38:	9000      	str	r0, [sp, #0]
    9a3a:	f89d 0000 	ldrb.w	r0, [sp]
    9a3e:	b118      	cbz	r0, 9a48 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe60>
    9a40:	201e      	movs	r0, #30
    9a42:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    9a46:	e00a      	b.n	9a5e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe76>
    9a48:	201d      	movs	r0, #29
    9a4a:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    9a4e:	f501 72cf 	add.w	r2, r1, #414	; 0x19e
    9a52:	f831 0b2c 	ldrh.w	r0, [r1], #44
    9a56:	f004 fc70 	bl	e33a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    9a5a:	f7fc fabf 	bl	5fdc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9a5e:	6860      	ldr	r0, [r4, #4]
    9a60:	2100      	movs	r1, #0
    9a62:	f820 1fba 	strh.w	r1, [r0, #186]!
    9a66:	7085      	strb	r5, [r0, #2]
    9a68:	4608      	mov	r0, r1
    9a6a:	e7ca      	b.n	9a02 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1a>
    9a6c:	2000011c 	.word	0x2000011c
    9a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a72:	4c1a      	ldr	r4, [pc, #104]	; (9adc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xef4>)
    9a74:	2300      	movs	r3, #0
    9a76:	210a      	movs	r1, #10
    9a78:	6860      	ldr	r0, [r4, #4]
    9a7a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9a7e:	3078      	adds	r0, #120	; 0x78
    9a80:	f003 ffcf 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a84:	b338      	cbz	r0, 9ad6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xeee>
    9a86:	68e0      	ldr	r0, [r4, #12]
    9a88:	f004 f9f9 	bl	de7e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9a8c:	b1c8      	cbz	r0, 9ac2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xeda>
    9a8e:	68e0      	ldr	r0, [r4, #12]
    9a90:	f004 f9eb 	bl	de6a <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9a94:	4607      	mov	r7, r0
    9a96:	68e0      	ldr	r0, [r4, #12]
    9a98:	f004 f9eb 	bl	de72 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9a9c:	4606      	mov	r6, r0
    9a9e:	68e0      	ldr	r0, [r4, #12]
    9aa0:	f004 f9e1 	bl	de66 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9aa4:	4605      	mov	r5, r0
    9aa6:	68e0      	ldr	r0, [r4, #12]
    9aa8:	f004 f9e1 	bl	de6e <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9aac:	4601      	mov	r1, r0
    9aae:	9700      	str	r7, [sp, #0]
    9ab0:	6860      	ldr	r0, [r4, #4]
    9ab2:	4633      	mov	r3, r6
    9ab4:	462a      	mov	r2, r5
    9ab6:	302c      	adds	r0, #44	; 0x2c
    9ab8:	f004 fc38 	bl	e32c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9abc:	6860      	ldr	r0, [r4, #4]
    9abe:	f004 fba7 	bl	e210 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9ac2:	6861      	ldr	r1, [r4, #4]
    9ac4:	2000      	movs	r0, #0
    9ac6:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    9aca:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9ace:	f7ff fabf 	bl	9050 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    9ad2:	2000      	movs	r0, #0
    9ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9ad6:	2001      	movs	r0, #1
    9ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9ada:	0000      	.short	0x0000
    9adc:	2000011c 	.word	0x2000011c
    9ae0:	b510      	push	{r4, lr}
    9ae2:	4c0b      	ldr	r4, [pc, #44]	; (9b10 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf28>)
    9ae4:	2300      	movs	r3, #0
    9ae6:	4619      	mov	r1, r3
    9ae8:	6860      	ldr	r0, [r4, #4]
    9aea:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9aee:	3078      	adds	r0, #120	; 0x78
    9af0:	f003 ff97 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9af4:	b150      	cbz	r0, 9b0c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf24>
    9af6:	6860      	ldr	r0, [r4, #4]
    9af8:	2100      	movs	r1, #0
    9afa:	f820 1fba 	strh.w	r1, [r0, #186]!
    9afe:	2101      	movs	r1, #1
    9b00:	7081      	strb	r1, [r0, #2]
    9b02:	2102      	movs	r1, #2
    9b04:	f800 1c34 	strb.w	r1, [r0, #-52]
    9b08:	2000      	movs	r0, #0
    9b0a:	bd10      	pop	{r4, pc}
    9b0c:	2001      	movs	r0, #1
    9b0e:	bd10      	pop	{r4, pc}
    9b10:	2000011c 	.word	0x2000011c
    9b14:	b510      	push	{r4, lr}
    9b16:	4c09      	ldr	r4, [pc, #36]	; (9b3c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf54>)
    9b18:	2300      	movs	r3, #0
    9b1a:	2109      	movs	r1, #9
    9b1c:	6860      	ldr	r0, [r4, #4]
    9b1e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9b22:	3078      	adds	r0, #120	; 0x78
    9b24:	f003 ff7d 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b28:	2800      	cmp	r0, #0
    9b2a:	d006      	beq.n	9b3a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf52>
    9b2c:	6861      	ldr	r1, [r4, #4]
    9b2e:	2000      	movs	r0, #0
    9b30:	f801 0fac 	strb.w	r0, [r1, #172]!
    9b34:	7308      	strb	r0, [r1, #12]
    9b36:	f801 0c27 	strb.w	r0, [r1, #-39]
    9b3a:	bd10      	pop	{r4, pc}
    9b3c:	2000011c 	.word	0x2000011c
    9b40:	4807      	ldr	r0, [pc, #28]	; (9b60 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf78>)
    9b42:	6840      	ldr	r0, [r0, #4]
    9b44:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9b48:	290f      	cmp	r1, #15
    9b4a:	d001      	beq.n	9b50 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf68>
    9b4c:	2002      	movs	r0, #2
    9b4e:	4770      	bx	lr
    9b50:	2100      	movs	r1, #0
    9b52:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    9b56:	2112      	movs	r1, #18
    9b58:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    9b5c:	2000      	movs	r0, #0
    9b5e:	4770      	bx	lr
    9b60:	2000011c 	.word	0x2000011c
    9b64:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b66:	4c42      	ldr	r4, [pc, #264]	; (9c70 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1088>)
    9b68:	2600      	movs	r6, #0
    9b6a:	b087      	sub	sp, #28
    9b6c:	6860      	ldr	r0, [r4, #4]
    9b6e:	4633      	mov	r3, r6
    9b70:	4631      	mov	r1, r6
    9b72:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9b76:	3078      	adds	r0, #120	; 0x78
    9b78:	f003 ff53 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b7c:	b180      	cbz	r0, 9ba0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfb8>
    9b7e:	6860      	ldr	r0, [r4, #4]
    9b80:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9b84:	2823      	cmp	r0, #35	; 0x23
    9b86:	d00e      	beq.n	9ba6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfbe>
    9b88:	2824      	cmp	r0, #36	; 0x24
    9b8a:	d00c      	beq.n	9ba6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfbe>
    9b8c:	4668      	mov	r0, sp
    9b8e:	f7fa feeb 	bl	4968 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    9b92:	b150      	cbz	r0, 9baa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfc2>
    9b94:	9800      	ldr	r0, [sp, #0]
    9b96:	a901      	add	r1, sp, #4
    9b98:	78c0      	ldrb	r0, [r0, #3]
    9b9a:	f88d 0004 	strb.w	r0, [sp, #4]
    9b9e:	e005      	b.n	9bac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfc4>
    9ba0:	2001      	movs	r0, #1
    9ba2:	b007      	add	sp, #28
    9ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9ba6:	2020      	movs	r0, #32
    9ba8:	e7fb      	b.n	9ba2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    9baa:	2100      	movs	r1, #0
    9bac:	6860      	ldr	r0, [r4, #4]
    9bae:	ab04      	add	r3, sp, #16
    9bb0:	2216      	movs	r2, #22
    9bb2:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9bb6:	f003 fff0 	bl	db9a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    9bba:	2700      	movs	r7, #0
    9bbc:	2501      	movs	r5, #1
    9bbe:	b178      	cbz	r0, 9be0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xff8>
    9bc0:	6860      	ldr	r0, [r4, #4]
    9bc2:	f89d 1010 	ldrb.w	r1, [sp, #16]
    9bc6:	2216      	movs	r2, #22
    9bc8:	f880 10ff 	strb.w	r1, [r0, #255]	; 0xff
    9bcc:	f880 20fe 	strb.w	r2, [r0, #254]	; 0xfe
    9bd0:	2119      	movs	r1, #25
    9bd2:	f800 1f86 	strb.w	r1, [r0, #134]!
    9bd6:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    9bda:	8687      	strh	r7, [r0, #52]	; 0x34
    9bdc:	2000      	movs	r0, #0
    9bde:	e7e0      	b.n	9ba2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    9be0:	68e0      	ldr	r0, [r4, #12]
    9be2:	f004 f968 	bl	deb6 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    9be6:	b1a8      	cbz	r0, 9c14 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x102c>
    9be8:	68e1      	ldr	r1, [r4, #12]
    9bea:	7908      	ldrb	r0, [r1, #4]
    9bec:	f000 0207 	and.w	r2, r0, #7
    9bf0:	6860      	ldr	r0, [r4, #4]
    9bf2:	f880 2062 	strb.w	r2, [r0, #98]	; 0x62
    9bf6:	7949      	ldrb	r1, [r1, #5]
    9bf8:	f001 0107 	and.w	r1, r1, #7
    9bfc:	f880 1063 	strb.w	r1, [r0, #99]	; 0x63
    9c00:	f890 313f 	ldrb.w	r3, [r0, #319]	; 0x13f
    9c04:	f88d 3018 	strb.w	r3, [sp, #24]
    9c08:	9b06      	ldr	r3, [sp, #24]
    9c0a:	9301      	str	r3, [sp, #4]
    9c0c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9c10:	bb23      	cbnz	r3, 9c5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    9c12:	e004      	b.n	9c1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1036>
    9c14:	2000      	movs	r0, #0
    9c16:	f7ff fe8d 	bl	9934 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    9c1a:	4606      	mov	r6, r0
    9c1c:	e025      	b.n	9c6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1082>
    9c1e:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    9c22:	2b01      	cmp	r3, #1
    9c24:	d01a      	beq.n	9c5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    9c26:	f890 c06b 	ldrb.w	ip, [r0, #107]	; 0x6b
    9c2a:	f100 036a 	add.w	r3, r0, #106	; 0x6a
    9c2e:	4594      	cmp	ip, r2
    9c30:	d106      	bne.n	9c40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1058>
    9c32:	781a      	ldrb	r2, [r3, #0]
    9c34:	428a      	cmp	r2, r1
    9c36:	d103      	bne.n	9c40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1058>
    9c38:	2102      	movs	r1, #2
    9c3a:	f880 113e 	strb.w	r1, [r0, #318]	; 0x13e
    9c3e:	e00d      	b.n	9c5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    9c40:	f500 71d6 	add.w	r1, r0, #428	; 0x1ac
    9c44:	8802      	ldrh	r2, [r0, #0]
    9c46:	f821 2902 	strh.w	r2, [r1], #-2
    9c4a:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    9c4e:	710a      	strb	r2, [r1, #4]
    9c50:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    9c54:	7148      	strb	r0, [r1, #5]
    9c56:	700d      	strb	r5, [r1, #0]
    9c58:	f7fc f9c0 	bl	5fdc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9c5c:	6860      	ldr	r0, [r4, #4]
    9c5e:	2121      	movs	r1, #33	; 0x21
    9c60:	f800 1f86 	strb.w	r1, [r0, #134]!
    9c64:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    9c68:	8687      	strh	r7, [r0, #52]	; 0x34
    9c6a:	4630      	mov	r0, r6
    9c6c:	e799      	b.n	9ba2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    9c6e:	0000      	.short	0x0000
    9c70:	2000011c 	.word	0x2000011c
    9c74:	b570      	push	{r4, r5, r6, lr}
    9c76:	4c18      	ldr	r4, [pc, #96]	; (9cd8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10f0>)
    9c78:	6860      	ldr	r0, [r4, #4]
    9c7a:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9c7e:	281f      	cmp	r0, #31
    9c80:	d001      	beq.n	9c86 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x109e>
    9c82:	2001      	movs	r0, #1
    9c84:	bd70      	pop	{r4, r5, r6, pc}
    9c86:	68e0      	ldr	r0, [r4, #12]
    9c88:	f004 f91f 	bl	deca <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>
    9c8c:	b1d8      	cbz	r0, 9cc6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10de>
    9c8e:	68e0      	ldr	r0, [r4, #12]
    9c90:	2201      	movs	r2, #1
    9c92:	7901      	ldrb	r1, [r0, #4]
    9c94:	7940      	ldrb	r0, [r0, #5]
    9c96:	f001 0107 	and.w	r1, r1, #7
    9c9a:	f361 0507 	bfi	r5, r1, #0, #8
    9c9e:	4629      	mov	r1, r5
    9ca0:	f000 0007 	and.w	r0, r0, #7
    9ca4:	f360 210f 	bfi	r1, r0, #8, #8
    9ca8:	6860      	ldr	r0, [r4, #4]
    9caa:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
    9cae:	2200      	movs	r2, #0
    9cb0:	f8a0 20b4 	strh.w	r2, [r0, #180]	; 0xb4
    9cb4:	2223      	movs	r2, #35	; 0x23
    9cb6:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
    9cba:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    9cbe:	f7ff fdb9 	bl	9834 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
    9cc2:	2000      	movs	r0, #0
    9cc4:	bd70      	pop	{r4, r5, r6, pc}
    9cc6:	2001      	movs	r0, #1
    9cc8:	f7ff fe34 	bl	9934 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    9ccc:	4604      	mov	r4, r0
    9cce:	201e      	movs	r0, #30
    9cd0:	f7ff fd6a 	bl	97a8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    9cd4:	4620      	mov	r0, r4
    9cd6:	bd70      	pop	{r4, r5, r6, pc}
    9cd8:	2000011c 	.word	0x2000011c
    9cdc:	b570      	push	{r4, r5, r6, lr}
    9cde:	4d07      	ldr	r5, [pc, #28]	; (9cfc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1114>)
    9ce0:	2400      	movs	r4, #0
    9ce2:	68e8      	ldr	r0, [r5, #12]
    9ce4:	f004 f8fb 	bl	dede <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    9ce8:	2803      	cmp	r0, #3
    9cea:	d105      	bne.n	9cf8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1110>
    9cec:	68e8      	ldr	r0, [r5, #12]
    9cee:	f004 f8f8 	bl	dee2 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    9cf2:	f000 f805 	bl	9d00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1118>
    9cf6:	4604      	mov	r4, r0
    9cf8:	4620      	mov	r0, r4
    9cfa:	bd70      	pop	{r4, r5, r6, pc}
    9cfc:	2000011c 	.word	0x2000011c
    9d00:	b570      	push	{r4, r5, r6, lr}
    9d02:	4d18      	ldr	r5, [pc, #96]	; (9d64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x117c>)
    9d04:	6869      	ldr	r1, [r5, #4]
    9d06:	f891 2085 	ldrb.w	r2, [r1, #133]	; 0x85
    9d0a:	2a16      	cmp	r2, #22
    9d0c:	d001      	beq.n	9d12 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x112a>
    9d0e:	2a13      	cmp	r2, #19
    9d10:	d102      	bne.n	9d18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1130>
    9d12:	f891 20be 	ldrb.w	r2, [r1, #190]	; 0xbe
    9d16:	b10a      	cbz	r2, 9d1c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1134>
    9d18:	2002      	movs	r0, #2
    9d1a:	bd70      	pop	{r4, r5, r6, pc}
    9d1c:	f881 00f8 	strb.w	r0, [r1, #248]	; 0xf8
    9d20:	2400      	movs	r4, #0
    9d22:	f881 40bd 	strb.w	r4, [r1, #189]	; 0xbd
    9d26:	f881 40b8 	strb.w	r4, [r1, #184]	; 0xb8
    9d2a:	f891 21d2 	ldrb.w	r2, [r1, #466]	; 0x1d2
    9d2e:	b122      	cbz	r2, 9d3a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1152>
    9d30:	f240 21eb 	movw	r1, #747	; 0x2eb
    9d34:	2036      	movs	r0, #54	; 0x36
    9d36:	f7fa f811 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9d3a:	880a      	ldrh	r2, [r1, #0]
    9d3c:	f8a1 21d6 	strh.w	r2, [r1, #470]	; 0x1d6
    9d40:	f881 01d4 	strb.w	r0, [r1, #468]	; 0x1d4
    9d44:	f881 41d8 	strb.w	r4, [r1, #472]	; 0x1d8
    9d48:	200d      	movs	r0, #13
    9d4a:	f881 01d2 	strb.w	r0, [r1, #466]	; 0x1d2
    9d4e:	f881 415a 	strb.w	r4, [r1, #346]	; 0x15a
    9d52:	f000 fb9b 	bl	a48c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a4>
    9d56:	f7fc f941 	bl	5fdc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9d5a:	6868      	ldr	r0, [r5, #4]
    9d5c:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    9d60:	2000      	movs	r0, #0
    9d62:	bd70      	pop	{r4, r5, r6, pc}
    9d64:	2000011c 	.word	0x2000011c
    9d68:	4802      	ldr	r0, [pc, #8]	; (9d74 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x118c>)
    9d6a:	68c0      	ldr	r0, [r0, #12]
    9d6c:	7900      	ldrb	r0, [r0, #4]
    9d6e:	f7ff bfc7 	b.w	9d00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1118>
    9d72:	0000      	.short	0x0000
    9d74:	2000011c 	.word	0x2000011c
    9d78:	b510      	push	{r4, lr}
    9d7a:	4c0e      	ldr	r4, [pc, #56]	; (9db4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11cc>)
    9d7c:	6860      	ldr	r0, [r4, #4]
    9d7e:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9d82:	2916      	cmp	r1, #22
    9d84:	d001      	beq.n	9d8a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11a2>
    9d86:	2002      	movs	r0, #2
    9d88:	bd10      	pop	{r4, pc}
    9d8a:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
    9d8e:	f200 1175 	addw	r1, r0, #373	; 0x175
    9d92:	2200      	movs	r2, #0
    9d94:	f200 1065 	addw	r0, r0, #357	; 0x165
    9d98:	f003 fdad 	bl	d8f6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    9d9c:	6860      	ldr	r0, [r4, #4]
    9d9e:	2100      	movs	r1, #0
    9da0:	e9c0 1134 	strd	r1, r1, [r0, #208]	; 0xd0
    9da4:	2101      	movs	r1, #1
    9da6:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    9daa:	2118      	movs	r1, #24
    9dac:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    9db0:	2000      	movs	r0, #0
    9db2:	bd10      	pop	{r4, pc}
    9db4:	2000011c 	.word	0x2000011c
    9db8:	b570      	push	{r4, r5, r6, lr}
    9dba:	4d1b      	ldr	r5, [pc, #108]	; (9e28 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1240>)
    9dbc:	6868      	ldr	r0, [r5, #4]
    9dbe:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9dc2:	291a      	cmp	r1, #26
    9dc4:	d001      	beq.n	9dca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e2>
    9dc6:	2002      	movs	r0, #2
    9dc8:	bd70      	pop	{r4, r5, r6, pc}
    9dca:	2400      	movs	r4, #0
    9dcc:	f880 40bd 	strb.w	r4, [r0, #189]	; 0xbd
    9dd0:	f880 40b8 	strb.w	r4, [r0, #184]	; 0xb8
    9dd4:	f880 415a 	strb.w	r4, [r0, #346]	; 0x15a
    9dd8:	f890 11d2 	ldrb.w	r1, [r0, #466]	; 0x1d2
    9ddc:	b121      	cbz	r1, 9de8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1200>
    9dde:	f240 3113 	movw	r1, #787	; 0x313
    9de2:	2036      	movs	r0, #54	; 0x36
    9de4:	f7f9 ffba 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9de8:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    9dec:	b141      	cbz	r1, 9e00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1218>
    9dee:	f880 40be 	strb.w	r4, [r0, #190]	; 0xbe
    9df2:	8801      	ldrh	r1, [r0, #0]
    9df4:	f8a0 11d6 	strh.w	r1, [r0, #470]	; 0x1d6
    9df8:	f880 41d4 	strb.w	r4, [r0, #468]	; 0x1d4
    9dfc:	210e      	movs	r1, #14
    9dfe:	e008      	b.n	9e12 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x122a>
    9e00:	8801      	ldrh	r1, [r0, #0]
    9e02:	f8a0 11d6 	strh.w	r1, [r0, #470]	; 0x1d6
    9e06:	f880 41d4 	strb.w	r4, [r0, #468]	; 0x1d4
    9e0a:	2101      	movs	r1, #1
    9e0c:	f880 11d8 	strb.w	r1, [r0, #472]	; 0x1d8
    9e10:	210d      	movs	r1, #13
    9e12:	f880 11d2 	strb.w	r1, [r0, #466]	; 0x1d2
    9e16:	f000 fb39 	bl	a48c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a4>
    9e1a:	f7fc f8df 	bl	5fdc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9e1e:	6868      	ldr	r0, [r5, #4]
    9e20:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    9e24:	2000      	movs	r0, #0
    9e26:	bd70      	pop	{r4, r5, r6, pc}
    9e28:	2000011c 	.word	0x2000011c
    9e2c:	b510      	push	{r4, lr}
    9e2e:	4c0d      	ldr	r4, [pc, #52]	; (9e64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x127c>)
    9e30:	2300      	movs	r3, #0
    9e32:	2101      	movs	r1, #1
    9e34:	6860      	ldr	r0, [r4, #4]
    9e36:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9e3a:	3078      	adds	r0, #120	; 0x78
    9e3c:	f003 fdf1 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e40:	b108      	cbz	r0, 9e46 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x125e>
    9e42:	2000      	movs	r0, #0
    9e44:	bd10      	pop	{r4, pc}
    9e46:	68e0      	ldr	r0, [r4, #12]
    9e48:	f004 f815 	bl	de76 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    9e4c:	6861      	ldr	r1, [r4, #4]
    9e4e:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    9e52:	2007      	movs	r0, #7
    9e54:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    9e58:	2000      	movs	r0, #0
    9e5a:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    9e5e:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    9e62:	e7ee      	b.n	9e42 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x125a>
    9e64:	2000011c 	.word	0x2000011c
    9e68:	b570      	push	{r4, r5, r6, lr}
    9e6a:	4c25      	ldr	r4, [pc, #148]	; (9f00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1318>)
    9e6c:	2600      	movs	r6, #0
    9e6e:	2109      	movs	r1, #9
    9e70:	6860      	ldr	r0, [r4, #4]
    9e72:	4633      	mov	r3, r6
    9e74:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9e78:	3078      	adds	r0, #120	; 0x78
    9e7a:	f003 fdd2 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e7e:	2500      	movs	r5, #0
    9e80:	b118      	cbz	r0, 9e8a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12a2>
    9e82:	68e0      	ldr	r0, [r4, #12]
    9e84:	7900      	ldrb	r0, [r0, #4]
    9e86:	2812      	cmp	r0, #18
    9e88:	d011      	beq.n	9eae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12c6>
    9e8a:	6860      	ldr	r0, [r4, #4]
    9e8c:	210a      	movs	r1, #10
    9e8e:	2300      	movs	r3, #0
    9e90:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9e94:	3078      	adds	r0, #120	; 0x78
    9e96:	f003 fdc4 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e9a:	b118      	cbz	r0, 9ea4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12bc>
    9e9c:	68e0      	ldr	r0, [r4, #12]
    9e9e:	7900      	ldrb	r0, [r0, #4]
    9ea0:	2814      	cmp	r0, #20
    9ea2:	d008      	beq.n	9eb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12ce>
    9ea4:	68e0      	ldr	r0, [r4, #12]
    9ea6:	7900      	ldrb	r0, [r0, #4]
    9ea8:	2816      	cmp	r0, #22
    9eaa:	d012      	beq.n	9ed2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12ea>
    9eac:	e026      	b.n	9efc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    9eae:	f7ff fe31 	bl	9b14 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf2c>
    9eb2:	4606      	mov	r6, r0
    9eb4:	e022      	b.n	9efc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    9eb6:	6860      	ldr	r0, [r4, #4]
    9eb8:	2105      	movs	r1, #5
    9eba:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9ebe:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    9ec2:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    9ec6:	30c6      	adds	r0, #198	; 0xc6
    9ec8:	f004 fccc 	bl	e864 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x158>
    9ecc:	f7ff f8c0 	bl	9050 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    9ed0:	e014      	b.n	9efc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    9ed2:	6860      	ldr	r0, [r4, #4]
    9ed4:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9ed8:	291f      	cmp	r1, #31
    9eda:	d10f      	bne.n	9efc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    9edc:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9ee0:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    9ee4:	2108      	movs	r1, #8
    9ee6:	30c6      	adds	r0, #198	; 0xc6
    9ee8:	f004 fcbc 	bl	e864 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x158>
    9eec:	6860      	ldr	r0, [r4, #4]
    9eee:	210b      	movs	r1, #11
    9ef0:	30c6      	adds	r0, #198	; 0xc6
    9ef2:	f004 fcb7 	bl	e864 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x158>
    9ef6:	201a      	movs	r0, #26
    9ef8:	f7ff fc56 	bl	97a8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    9efc:	4630      	mov	r0, r6
    9efe:	bd70      	pop	{r4, r5, r6, pc}
    9f00:	2000011c 	.word	0x2000011c
    9f04:	b570      	push	{r4, r5, r6, lr}
    9f06:	4c32      	ldr	r4, [pc, #200]	; (9fd0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e8>)
    9f08:	2300      	movs	r3, #0
    9f0a:	4619      	mov	r1, r3
    9f0c:	6860      	ldr	r0, [r4, #4]
    9f0e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9f12:	3078      	adds	r0, #120	; 0x78
    9f14:	f003 fd85 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f18:	b940      	cbnz	r0, 9f2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1344>
    9f1a:	6860      	ldr	r0, [r4, #4]
    9f1c:	2300      	movs	r3, #0
    9f1e:	2108      	movs	r1, #8
    9f20:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9f24:	3078      	adds	r0, #120	; 0x78
    9f26:	f003 fd7c 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f2a:	b1f8      	cbz	r0, 9f6c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1384>
    9f2c:	6860      	ldr	r0, [r4, #4]
    9f2e:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
    9f32:	0780      	lsls	r0, r0, #30
    9f34:	d412      	bmi.n	9f5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1374>
    9f36:	68e0      	ldr	r0, [r4, #12]
    9f38:	f003 ff9f 	bl	de7a <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    9f3c:	6861      	ldr	r1, [r4, #4]
    9f3e:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
    9f42:	68e0      	ldr	r0, [r4, #12]
    9f44:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    9f48:	f8a1 20c2 	strh.w	r2, [r1, #194]	; 0xc2
    9f4c:	8840      	ldrh	r0, [r0, #2]
    9f4e:	f8a1 00c4 	strh.w	r0, [r1, #196]	; 0xc4
    9f52:	f811 0fc0 	ldrb.w	r0, [r1, #192]!
    9f56:	f040 0002 	orr.w	r0, r0, #2
    9f5a:	7008      	strb	r0, [r1, #0]
    9f5c:	6860      	ldr	r0, [r4, #4]
    9f5e:	f04f 0500 	mov.w	r5, #0
    9f62:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    9f66:	07c9      	lsls	r1, r1, #31
    9f68:	d002      	beq.n	9f70 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1388>
    9f6a:	e010      	b.n	9f8e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13a6>
    9f6c:	2001      	movs	r0, #1
    9f6e:	bd70      	pop	{r4, r5, r6, pc}
    9f70:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9f74:	2300      	movs	r3, #0
    9f76:	4619      	mov	r1, r3
    9f78:	3078      	adds	r0, #120	; 0x78
    9f7a:	f003 fd52 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f7e:	b160      	cbz	r0, 9f9a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13b2>
    9f80:	6860      	ldr	r0, [r4, #4]
    9f82:	2101      	movs	r1, #1
    9f84:	f800 1f86 	strb.w	r1, [r0, #134]!
    9f88:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    9f8c:	8685      	strh	r5, [r0, #52]	; 0x34
    9f8e:	6860      	ldr	r0, [r4, #4]
    9f90:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9f94:	2901      	cmp	r1, #1
    9f96:	d005      	beq.n	9fa4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13bc>
    9f98:	e00a      	b.n	9fb0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13c8>
    9f9a:	f240 314e 	movw	r1, #846	; 0x34e
    9f9e:	2036      	movs	r0, #54	; 0x36
    9fa0:	f7f9 fedc 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9fa4:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9fa8:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    9fac:	f7fc f816 	bl	5fdc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9fb0:	6860      	ldr	r0, [r4, #4]
    9fb2:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
    9fb6:	b149      	cbz	r1, 9fcc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e4>
    9fb8:	f880 5158 	strb.w	r5, [r0, #344]	; 0x158
    9fbc:	f7fc f80e 	bl	5fdc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9fc0:	6860      	ldr	r0, [r4, #4]
    9fc2:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9fc6:	b909      	cbnz	r1, 9fcc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e4>
    9fc8:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    9fcc:	2000      	movs	r0, #0
    9fce:	bd70      	pop	{r4, r5, r6, pc}
    9fd0:	2000011c 	.word	0x2000011c
    9fd4:	b510      	push	{r4, lr}
    9fd6:	4c0a      	ldr	r4, [pc, #40]	; (a000 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1418>)
    9fd8:	2300      	movs	r3, #0
    9fda:	4619      	mov	r1, r3
    9fdc:	6860      	ldr	r0, [r4, #4]
    9fde:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9fe2:	3078      	adds	r0, #120	; 0x78
    9fe4:	f003 fd1d 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9fe8:	b120      	cbz	r0, 9ff4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140c>
    9fea:	6861      	ldr	r1, [r4, #4]
    9fec:	200c      	movs	r0, #12
    9fee:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9ff2:	bd10      	pop	{r4, pc}
    9ff4:	f240 51fa 	movw	r1, #1530	; 0x5fa
    9ff8:	2036      	movs	r0, #54	; 0x36
    9ffa:	f7f9 feaf 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ffe:	0000      	.short	0x0000
    a000:	2000011c 	.word	0x2000011c
    a004:	b510      	push	{r4, lr}
    a006:	4c0a      	ldr	r4, [pc, #40]	; (a030 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1448>)
    a008:	2300      	movs	r3, #0
    a00a:	4619      	mov	r1, r3
    a00c:	6860      	ldr	r0, [r4, #4]
    a00e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a012:	3078      	adds	r0, #120	; 0x78
    a014:	f003 fd05 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a018:	b120      	cbz	r0, a024 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x143c>
    a01a:	6861      	ldr	r1, [r4, #4]
    a01c:	200d      	movs	r0, #13
    a01e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a022:	bd10      	pop	{r4, pc}
    a024:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    a028:	2036      	movs	r0, #54	; 0x36
    a02a:	f7f9 fe97 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a02e:	0000      	.short	0x0000
    a030:	2000011c 	.word	0x2000011c
    a034:	b510      	push	{r4, lr}
    a036:	4c0d      	ldr	r4, [pc, #52]	; (a06c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1484>)
    a038:	2300      	movs	r3, #0
    a03a:	4619      	mov	r1, r3
    a03c:	6860      	ldr	r0, [r4, #4]
    a03e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a042:	3078      	adds	r0, #120	; 0x78
    a044:	f003 fced 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a048:	b918      	cbnz	r0, a052 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x146a>
    a04a:	6860      	ldr	r0, [r4, #4]
    a04c:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
    a050:	b138      	cbz	r0, a062 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x147a>
    a052:	6860      	ldr	r0, [r4, #4]
    a054:	2101      	movs	r1, #1
    a056:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    a05a:	2113      	movs	r1, #19
    a05c:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a060:	bd10      	pop	{r4, pc}
    a062:	f240 6115 	movw	r1, #1557	; 0x615
    a066:	2036      	movs	r0, #54	; 0x36
    a068:	f7f9 fe78 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a06c:	2000011c 	.word	0x2000011c
    a070:	b510      	push	{r4, lr}
    a072:	4c0a      	ldr	r4, [pc, #40]	; (a09c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14b4>)
    a074:	2300      	movs	r3, #0
    a076:	4619      	mov	r1, r3
    a078:	6860      	ldr	r0, [r4, #4]
    a07a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a07e:	3078      	adds	r0, #120	; 0x78
    a080:	f003 fccf 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a084:	b120      	cbz	r0, a090 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a8>
    a086:	6861      	ldr	r1, [r4, #4]
    a088:	2004      	movs	r0, #4
    a08a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a08e:	bd10      	pop	{r4, pc}
    a090:	f240 51f4 	movw	r1, #1524	; 0x5f4
    a094:	2036      	movs	r0, #54	; 0x36
    a096:	f7f9 fe61 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a09a:	0000      	.short	0x0000
    a09c:	2000011c 	.word	0x2000011c
    a0a0:	b510      	push	{r4, lr}
    a0a2:	4c0a      	ldr	r4, [pc, #40]	; (a0cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14e4>)
    a0a4:	2300      	movs	r3, #0
    a0a6:	4619      	mov	r1, r3
    a0a8:	6860      	ldr	r0, [r4, #4]
    a0aa:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a0ae:	3078      	adds	r0, #120	; 0x78
    a0b0:	f003 fcb7 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a0b4:	b120      	cbz	r0, a0c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14d8>
    a0b6:	6861      	ldr	r1, [r4, #4]
    a0b8:	201c      	movs	r0, #28
    a0ba:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a0be:	bd10      	pop	{r4, pc}
    a0c0:	f240 614c 	movw	r1, #1612	; 0x64c
    a0c4:	2036      	movs	r0, #54	; 0x36
    a0c6:	f7f9 fe49 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a0ca:	0000      	.short	0x0000
    a0cc:	2000011c 	.word	0x2000011c
    a0d0:	b510      	push	{r4, lr}
    a0d2:	4c0a      	ldr	r4, [pc, #40]	; (a0fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1514>)
    a0d4:	2300      	movs	r3, #0
    a0d6:	4619      	mov	r1, r3
    a0d8:	6860      	ldr	r0, [r4, #4]
    a0da:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a0de:	3078      	adds	r0, #120	; 0x78
    a0e0:	f003 fc9f 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a0e4:	b120      	cbz	r0, a0f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1508>
    a0e6:	6861      	ldr	r1, [r4, #4]
    a0e8:	2000      	movs	r0, #0
    a0ea:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    a0ee:	bd10      	pop	{r4, pc}
    a0f0:	f240 6153 	movw	r1, #1619	; 0x653
    a0f4:	2036      	movs	r0, #54	; 0x36
    a0f6:	f7f9 fe31 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a0fa:	0000      	.short	0x0000
    a0fc:	2000011c 	.word	0x2000011c
    a100:	b510      	push	{r4, lr}
    a102:	4c0a      	ldr	r4, [pc, #40]	; (a12c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1544>)
    a104:	2300      	movs	r3, #0
    a106:	4619      	mov	r1, r3
    a108:	6860      	ldr	r0, [r4, #4]
    a10a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a10e:	3078      	adds	r0, #120	; 0x78
    a110:	f003 fc87 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a114:	b120      	cbz	r0, a120 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1538>
    a116:	6861      	ldr	r1, [r4, #4]
    a118:	2005      	movs	r0, #5
    a11a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a11e:	bd10      	pop	{r4, pc}
    a120:	f240 613f 	movw	r1, #1599	; 0x63f
    a124:	2036      	movs	r0, #54	; 0x36
    a126:	f7f9 fe19 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a12a:	0000      	.short	0x0000
    a12c:	2000011c 	.word	0x2000011c
    a130:	4902      	ldr	r1, [pc, #8]	; (a13c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1554>)
    a132:	2000      	movs	r0, #0
    a134:	6849      	ldr	r1, [r1, #4]
    a136:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    a13a:	4770      	bx	lr
    a13c:	2000011c 	.word	0x2000011c
    a140:	b510      	push	{r4, lr}
    a142:	4c0b      	ldr	r4, [pc, #44]	; (a170 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1588>)
    a144:	2300      	movs	r3, #0
    a146:	4619      	mov	r1, r3
    a148:	6860      	ldr	r0, [r4, #4]
    a14a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a14e:	3078      	adds	r0, #120	; 0x78
    a150:	f003 fc67 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a154:	b138      	cbz	r0, a166 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x157e>
    a156:	6860      	ldr	r0, [r4, #4]
    a158:	2101      	movs	r1, #1
    a15a:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    a15e:	210f      	movs	r1, #15
    a160:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a164:	bd10      	pop	{r4, pc}
    a166:	f240 6106 	movw	r1, #1542	; 0x606
    a16a:	2036      	movs	r0, #54	; 0x36
    a16c:	f7f9 fdf6 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a170:	2000011c 	.word	0x2000011c
    a174:	4809      	ldr	r0, [pc, #36]	; (a19c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15b4>)
    a176:	b510      	push	{r4, lr}
    a178:	6840      	ldr	r0, [r0, #4]
    a17a:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a17e:	2912      	cmp	r1, #18
    a180:	d004      	beq.n	a18c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15a4>
    a182:	f240 610e 	movw	r1, #1550	; 0x60e
    a186:	2036      	movs	r0, #54	; 0x36
    a188:	f7f9 fde8 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a18c:	2101      	movs	r1, #1
    a18e:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    a192:	2111      	movs	r1, #17
    a194:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a198:	bd10      	pop	{r4, pc}
    a19a:	0000      	.short	0x0000
    a19c:	2000011c 	.word	0x2000011c
    a1a0:	b510      	push	{r4, lr}
    a1a2:	4c0a      	ldr	r4, [pc, #40]	; (a1cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15e4>)
    a1a4:	2300      	movs	r3, #0
    a1a6:	4619      	mov	r1, r3
    a1a8:	6860      	ldr	r0, [r4, #4]
    a1aa:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a1ae:	3078      	adds	r0, #120	; 0x78
    a1b0:	f003 fc37 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a1b4:	b120      	cbz	r0, a1c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15d8>
    a1b6:	6861      	ldr	r1, [r4, #4]
    a1b8:	201f      	movs	r0, #31
    a1ba:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a1be:	bd10      	pop	{r4, pc}
    a1c0:	f240 615c 	movw	r1, #1628	; 0x65c
    a1c4:	2036      	movs	r0, #54	; 0x36
    a1c6:	f7f9 fdc9 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a1ca:	0000      	.short	0x0000
    a1cc:	2000011c 	.word	0x2000011c
    a1d0:	b570      	push	{r4, r5, r6, lr}
    a1d2:	4c1d      	ldr	r4, [pc, #116]	; (a248 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1660>)
    a1d4:	6860      	ldr	r0, [r4, #4]
    a1d6:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    a1da:	b911      	cbnz	r1, a1e2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15fa>
    a1dc:	f890 1127 	ldrb.w	r1, [r0, #295]	; 0x127
    a1e0:	b179      	cbz	r1, a202 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x161a>
    a1e2:	2100      	movs	r1, #0
    a1e4:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    a1e8:	2224      	movs	r2, #36	; 0x24
    a1ea:	2500      	movs	r5, #0
    a1ec:	2b21      	cmp	r3, #33	; 0x21
    a1ee:	d00a      	beq.n	a206 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x161e>
    a1f0:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
    a1f4:	2b23      	cmp	r3, #35	; 0x23
    a1f6:	d01a      	beq.n	a22e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1646>
    a1f8:	f44f 61d1 	mov.w	r1, #1672	; 0x688
    a1fc:	2036      	movs	r0, #54	; 0x36
    a1fe:	f7f9 fdad 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a202:	2101      	movs	r1, #1
    a204:	e7ee      	b.n	a1e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15fc>
    a206:	b161      	cbz	r1, a222 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x163a>
    a208:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    a20c:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    a210:	2801      	cmp	r0, #1
    a212:	d102      	bne.n	a21a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1632>
    a214:	2000      	movs	r0, #0
    a216:	f7ff fac7 	bl	97a8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    a21a:	6860      	ldr	r0, [r4, #4]
    a21c:	f880 513e 	strb.w	r5, [r0, #318]	; 0x13e
    a220:	e001      	b.n	a226 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x163e>
    a222:	f880 2086 	strb.w	r2, [r0, #134]	; 0x86
    a226:	6860      	ldr	r0, [r4, #4]
    a228:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    a22c:	bd70      	pop	{r4, r5, r6, pc}
    a22e:	b129      	cbz	r1, a23c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1654>
    a230:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    a234:	2000      	movs	r0, #0
    a236:	f7ff fab7 	bl	97a8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    a23a:	e001      	b.n	a240 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1658>
    a23c:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
    a240:	6860      	ldr	r0, [r4, #4]
    a242:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    a246:	bd70      	pop	{r4, r5, r6, pc}
    a248:	2000011c 	.word	0x2000011c
    a24c:	4903      	ldr	r1, [pc, #12]	; (a25c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1674>)
    a24e:	2000      	movs	r0, #0
    a250:	6849      	ldr	r1, [r1, #4]
    a252:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a256:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    a25a:	4770      	bx	lr
    a25c:	2000011c 	.word	0x2000011c
    a260:	4807      	ldr	r0, [pc, #28]	; (a280 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1698>)
    a262:	b510      	push	{r4, lr}
    a264:	6840      	ldr	r0, [r0, #4]
    a266:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a26a:	2918      	cmp	r1, #24
    a26c:	d004      	beq.n	a278 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1690>
    a26e:	f240 611e 	movw	r1, #1566	; 0x61e
    a272:	2036      	movs	r0, #54	; 0x36
    a274:	f7f9 fd72 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a278:	211a      	movs	r1, #26
    a27a:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a27e:	bd10      	pop	{r4, pc}
    a280:	2000011c 	.word	0x2000011c
    a284:	b510      	push	{r4, lr}
    a286:	4c0a      	ldr	r4, [pc, #40]	; (a2b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16c8>)
    a288:	2300      	movs	r3, #0
    a28a:	2101      	movs	r1, #1
    a28c:	6860      	ldr	r0, [r4, #4]
    a28e:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    a292:	3078      	adds	r0, #120	; 0x78
    a294:	f003 fbc5 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a298:	2800      	cmp	r0, #0
    a29a:	d108      	bne.n	a2ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16c6>
    a29c:	6860      	ldr	r0, [r4, #4]
    a29e:	2108      	movs	r1, #8
    a2a0:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    a2a4:	2100      	movs	r1, #0
    a2a6:	f880 10b8 	strb.w	r1, [r0, #184]	; 0xb8
    a2aa:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    a2ae:	bd10      	pop	{r4, pc}
    a2b0:	2000011c 	.word	0x2000011c
    a2b4:	b570      	push	{r4, r5, r6, lr}
    a2b6:	4c0e      	ldr	r4, [pc, #56]	; (a2f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1708>)
    a2b8:	2300      	movs	r3, #0
    a2ba:	4619      	mov	r1, r3
    a2bc:	6860      	ldr	r0, [r4, #4]
    a2be:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a2c2:	3078      	adds	r0, #120	; 0x78
    a2c4:	f003 fbad 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a2c8:	2500      	movs	r5, #0
    a2ca:	b110      	cbz	r0, a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16ea>
    a2cc:	6860      	ldr	r0, [r4, #4]
    a2ce:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    a2d2:	6860      	ldr	r0, [r4, #4]
    a2d4:	2300      	movs	r3, #0
    a2d6:	4619      	mov	r1, r3
    a2d8:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a2dc:	3078      	adds	r0, #120	; 0x78
    a2de:	f003 fba0 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a2e2:	2800      	cmp	r0, #0
    a2e4:	d002      	beq.n	a2ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1704>
    a2e6:	6860      	ldr	r0, [r4, #4]
    a2e8:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    a2ec:	bd70      	pop	{r4, r5, r6, pc}
    a2ee:	0000      	.short	0x0000
    a2f0:	2000011c 	.word	0x2000011c
    a2f4:	b570      	push	{r4, r5, r6, lr}
    a2f6:	4d16      	ldr	r5, [pc, #88]	; (a350 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1768>)
    a2f8:	f04f 0400 	mov.w	r4, #0
    a2fc:	6868      	ldr	r0, [r5, #4]
    a2fe:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    a302:	0789      	lsls	r1, r1, #30
    a304:	d411      	bmi.n	a32a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1742>
    a306:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a30a:	2300      	movs	r3, #0
    a30c:	4619      	mov	r1, r3
    a30e:	3078      	adds	r0, #120	; 0x78
    a310:	f003 fb87 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a314:	b120      	cbz	r0, a320 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1738>
    a316:	6869      	ldr	r1, [r5, #4]
    a318:	2001      	movs	r0, #1
    a31a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a31e:	e008      	b.n	a332 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x174a>
    a320:	f240 612b 	movw	r1, #1579	; 0x62b
    a324:	2036      	movs	r0, #54	; 0x36
    a326:	f7f9 fd19 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a32a:	f880 40b8 	strb.w	r4, [r0, #184]	; 0xb8
    a32e:	f880 4158 	strb.w	r4, [r0, #344]	; 0x158
    a332:	6868      	ldr	r0, [r5, #4]
    a334:	2300      	movs	r3, #0
    a336:	4619      	mov	r1, r3
    a338:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a33c:	3078      	adds	r0, #120	; 0x78
    a33e:	f003 fb70 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a342:	2800      	cmp	r0, #0
    a344:	d002      	beq.n	a34c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1764>
    a346:	6868      	ldr	r0, [r5, #4]
    a348:	f880 40bc 	strb.w	r4, [r0, #188]	; 0xbc
    a34c:	bd70      	pop	{r4, r5, r6, pc}
    a34e:	0000      	.short	0x0000
    a350:	2000011c 	.word	0x2000011c
    a354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a356:	4d4c      	ldr	r5, [pc, #304]	; (a488 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a0>)
    a358:	4607      	mov	r7, r0
    a35a:	460e      	mov	r6, r1
    a35c:	6868      	ldr	r0, [r5, #4]
    a35e:	f100 0478 	add.w	r4, r0, #120	; 0x78
    a362:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    a366:	f88d 0000 	strb.w	r0, [sp]
    a36a:	9800      	ldr	r0, [sp, #0]
    a36c:	9000      	str	r0, [sp, #0]
    a36e:	f89d 0000 	ldrb.w	r0, [sp]
    a372:	b930      	cbnz	r0, a382 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x179a>
    a374:	7c22      	ldrb	r2, [r4, #16]
    a376:	2300      	movs	r3, #0
    a378:	2101      	movs	r1, #1
    a37a:	4620      	mov	r0, r4
    a37c:	f003 fb51 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a380:	b110      	cbz	r0, a388 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17a0>
    a382:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    a384:	1c40      	adds	r0, r0, #1
    a386:	8760      	strh	r0, [r4, #58]	; 0x3a
    a388:	2001      	movs	r0, #1
    a38a:	213d      	movs	r1, #61	; 0x3d
    a38c:	bbf7      	cbnz	r7, a40c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1824>
    a38e:	782a      	ldrb	r2, [r5, #0]
    a390:	2a02      	cmp	r2, #2
    a392:	d006      	beq.n	a3a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17ba>
    a394:	2a01      	cmp	r2, #1
    a396:	d006      	beq.n	a3a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17be>
    a398:	b1c6      	cbz	r6, a3cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17e4>
    a39a:	06f2      	lsls	r2, r6, #27
    a39c:	d507      	bpl.n	a3ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17c6>
    a39e:	211e      	movs	r1, #30
    a3a0:	e043      	b.n	a42a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a3a2:	2116      	movs	r1, #22
    a3a4:	e041      	b.n	a42a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a3a6:	6869      	ldr	r1, [r5, #4]
    a3a8:	f891 112c 	ldrb.w	r1, [r1, #300]	; 0x12c
    a3ac:	e03d      	b.n	a42a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a3ae:	0732      	lsls	r2, r6, #28
    a3b0:	d43b      	bmi.n	a42a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a3b2:	07b1      	lsls	r1, r6, #30
    a3b4:	d001      	beq.n	a3ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17d2>
    a3b6:	212a      	movs	r1, #42	; 0x2a
    a3b8:	e037      	b.n	a42a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a3ba:	06b1      	lsls	r1, r6, #26
    a3bc:	d404      	bmi.n	a3c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17e0>
    a3be:	f44f 6135 	mov.w	r1, #2896	; 0xb50
    a3c2:	2036      	movs	r0, #54	; 0x36
    a3c4:	f7f9 fcca 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a3c8:	2123      	movs	r1, #35	; 0x23
    a3ca:	e02e      	b.n	a42a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a3cc:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    a3d0:	b129      	cbz	r1, a3de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17f6>
    a3d2:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    a3d4:	1c4a      	adds	r2, r1, #1
    a3d6:	87a2      	strh	r2, [r4, #60]	; 0x3c
    a3d8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    a3da:	4291      	cmp	r1, r2
    a3dc:	d21d      	bcs.n	a41a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    a3de:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    a3e2:	b139      	cbz	r1, a3f4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x180c>
    a3e4:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    a3e8:	1c4a      	adds	r2, r1, #1
    a3ea:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
    a3ee:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    a3f0:	4291      	cmp	r1, r2
    a3f2:	d212      	bcs.n	a41a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    a3f4:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    a3f6:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    a3f8:	428a      	cmp	r2, r1
    a3fa:	d30b      	bcc.n	a414 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x182c>
    a3fc:	686b      	ldr	r3, [r5, #4]
    a3fe:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
    a402:	f88d 3000 	strb.w	r3, [sp]
    a406:	9b00      	ldr	r3, [sp, #0]
    a408:	9300      	str	r3, [sp, #0]
    a40a:	e000      	b.n	a40e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1826>
    a40c:	e00d      	b.n	a42a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a40e:	f89d 3000 	ldrb.w	r3, [sp]
    a412:	b913      	cbnz	r3, a41a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    a414:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    a416:	429a      	cmp	r2, r3
    a418:	d301      	bcc.n	a41e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1836>
    a41a:	2122      	movs	r1, #34	; 0x22
    a41c:	e005      	b.n	a42a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a41e:	7c62      	ldrb	r2, [r4, #17]
    a420:	b1f2      	cbz	r2, a460 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1878>
    a422:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    a424:	428a      	cmp	r2, r1
    a426:	d304      	bcc.n	a432 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x184a>
    a428:	2108      	movs	r1, #8
    a42a:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    a42e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    a432:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    a436:	f88d 0000 	strb.w	r0, [sp]
    a43a:	9800      	ldr	r0, [sp, #0]
    a43c:	9000      	str	r0, [sp, #0]
    a43e:	f89d 0000 	ldrb.w	r0, [sp]
    a442:	b1d8      	cbz	r0, a47c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1894>
    a444:	2000      	movs	r0, #0
    a446:	7360      	strb	r0, [r4, #13]
    a448:	73a0      	strb	r0, [r4, #14]
    a44a:	7460      	strb	r0, [r4, #17]
    a44c:	2102      	movs	r1, #2
    a44e:	6868      	ldr	r0, [r5, #4]
    a450:	f7fd fa66 	bl	7920 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    a454:	6868      	ldr	r0, [r5, #4]
    a456:	f890 10fc 	ldrb.w	r1, [r0, #252]	; 0xfc
    a45a:	2901      	cmp	r1, #1
    a45c:	d005      	beq.n	a46a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1882>
    a45e:	e009      	b.n	a474 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x188c>
    a460:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
    a462:	2906      	cmp	r1, #6
    a464:	d3e5      	bcc.n	a432 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x184a>
    a466:	213e      	movs	r1, #62	; 0x3e
    a468:	e7df      	b.n	a42a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a46a:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    a46e:	7801      	ldrb	r1, [r0, #0]
    a470:	1e49      	subs	r1, r1, #1
    a472:	7001      	strb	r1, [r0, #0]
    a474:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a478:	f7fb bdb0 	b.w	5fdc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a47c:	6868      	ldr	r0, [r5, #4]
    a47e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a482:	2100      	movs	r1, #0
    a484:	f7fd ba4c 	b.w	7920 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    a488:	2000011c 	.word	0x2000011c
    a48c:	4804      	ldr	r0, [pc, #16]	; (a4a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18b8>)
    a48e:	b510      	push	{r4, lr}
    a490:	6840      	ldr	r0, [r0, #4]
    a492:	8800      	ldrh	r0, [r0, #0]
    a494:	f7fa f860 	bl	4558 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    a498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a49c:	f002 bfee 	b.w	d47c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    a4a0:	2000011c 	.word	0x2000011c
    a4a4:	4a19      	ldr	r2, [pc, #100]	; (a50c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1924>)
    a4a6:	2901      	cmp	r1, #1
    a4a8:	6852      	ldr	r2, [r2, #4]
    a4aa:	d010      	beq.n	a4ce <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e6>
    a4ac:	2100      	movs	r1, #0
    a4ae:	b1c8      	cbz	r0, a4e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18fc>
    a4b0:	2801      	cmp	r0, #1
    a4b2:	d022      	beq.n	a4fa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1912>
    a4b4:	2803      	cmp	r0, #3
    a4b6:	d109      	bne.n	a4cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a4b8:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    a4bc:	2813      	cmp	r0, #19
    a4be:	d005      	beq.n	a4cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a4c0:	2816      	cmp	r0, #22
    a4c2:	d003      	beq.n	a4cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a4c4:	2818      	cmp	r0, #24
    a4c6:	d001      	beq.n	a4cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a4c8:	f882 115a 	strb.w	r1, [r2, #346]	; 0x15a
    a4cc:	4770      	bx	lr
    a4ce:	f892 00fc 	ldrb.w	r0, [r2, #252]	; 0xfc
    a4d2:	2801      	cmp	r0, #1
    a4d4:	d0fa      	beq.n	a4cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a4d6:	bf00      	nop
    a4d8:	f8d2 0128 	ldr.w	r0, [r2, #296]	; 0x128
    a4dc:	7801      	ldrb	r1, [r0, #0]
    a4de:	1e49      	subs	r1, r1, #1
    a4e0:	7001      	strb	r1, [r0, #0]
    a4e2:	4770      	bx	lr
    a4e4:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    a4e8:	f8b2 3146 	ldrh.w	r3, [r2, #326]	; 0x146
    a4ec:	1ac0      	subs	r0, r0, r3
    a4ee:	b200      	sxth	r0, r0
    a4f0:	2800      	cmp	r0, #0
    a4f2:	dbf6      	blt.n	a4e2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18fa>
    a4f4:	f882 1144 	strb.w	r1, [r2, #324]	; 0x144
    a4f8:	4770      	bx	lr
    a4fa:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    a4fe:	f8b2 1130 	ldrh.w	r1, [r2, #304]	; 0x130
    a502:	1a40      	subs	r0, r0, r1
    a504:	b200      	sxth	r0, r0
    a506:	2800      	cmp	r0, #0
    a508:	dae6      	bge.n	a4d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18f0>
    a50a:	4770      	bx	lr
    a50c:	2000011c 	.word	0x2000011c

0000a510 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    a510:	b510      	push	{r4, lr}
    a512:	6941      	ldr	r1, [r0, #20]
    a514:	b119      	cbz	r1, a51e <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    a516:	6842      	ldr	r2, [r0, #4]
    a518:	684b      	ldr	r3, [r1, #4]
    a51a:	429a      	cmp	r2, r3
    a51c:	d203      	bcs.n	a526 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    a51e:	21c1      	movs	r1, #193	; 0xc1
    a520:	2037      	movs	r0, #55	; 0x37
    a522:	f7f9 fc1b 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a526:	6902      	ldr	r2, [r0, #16]
    a528:	610a      	str	r2, [r1, #16]
    a52a:	68c3      	ldr	r3, [r0, #12]
    a52c:	60cb      	str	r3, [r1, #12]
    a52e:	b10a      	cbz	r2, a534 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    a530:	60d1      	str	r1, [r2, #12]
    a532:	e001      	b.n	a538 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    a534:	4a06      	ldr	r2, [pc, #24]	; (a550 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    a536:	6011      	str	r1, [r2, #0]
    a538:	68ca      	ldr	r2, [r1, #12]
    a53a:	b132      	cbz	r2, a54a <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    a53c:	6111      	str	r1, [r2, #16]
    a53e:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
    a542:	4410      	add	r0, r2
    a544:	684a      	ldr	r2, [r1, #4]
    a546:	1a80      	subs	r0, r0, r2
    a548:	e000      	b.n	a54c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    a54a:	2000      	movs	r0, #0
    a54c:	6088      	str	r0, [r1, #8]
    a54e:	bd10      	pop	{r4, pc}
    a550:	200001f4 	.word	0x200001f4

0000a554 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    a554:	b510      	push	{r4, lr}
    a556:	2200      	movs	r2, #0
    a558:	6101      	str	r1, [r0, #16]
    a55a:	b189      	cbz	r1, a580 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    a55c:	68cb      	ldr	r3, [r1, #12]
    a55e:	60c8      	str	r0, [r1, #12]
    a560:	60c3      	str	r3, [r0, #12]
    a562:	b103      	cbz	r3, a566 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    a564:	6118      	str	r0, [r3, #16]
    a566:	6901      	ldr	r1, [r0, #16]
    a568:	6082      	str	r2, [r0, #8]
    a56a:	2900      	cmp	r1, #0
    a56c:	d00f      	beq.n	a58e <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    a56e:	688b      	ldr	r3, [r1, #8]
    a570:	b163      	cbz	r3, a58c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    a572:	6844      	ldr	r4, [r0, #4]
    a574:	42a3      	cmp	r3, r4
    a576:	d207      	bcs.n	a588 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    a578:	212a      	movs	r1, #42	; 0x2a
    a57a:	2037      	movs	r0, #55	; 0x37
    a57c:	f7f9 fbee 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a580:	4903      	ldr	r1, [pc, #12]	; (a590 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    a582:	60c2      	str	r2, [r0, #12]
    a584:	6008      	str	r0, [r1, #0]
    a586:	e7ee      	b.n	a566 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    a588:	1b1b      	subs	r3, r3, r4
    a58a:	6083      	str	r3, [r0, #8]
    a58c:	608a      	str	r2, [r1, #8]
    a58e:	bd10      	pop	{r4, pc}
    a590:	200001f4 	.word	0x200001f4

0000a594 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    a594:	6901      	ldr	r1, [r0, #16]
    a596:	b149      	cbz	r1, a5ac <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    a598:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    a59c:	441a      	add	r2, r3
    a59e:	688b      	ldr	r3, [r1, #8]
    a5a0:	441a      	add	r2, r3
    a5a2:	608a      	str	r2, [r1, #8]
    a5a4:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    a5a8:	60d1      	str	r1, [r2, #12]
    a5aa:	e002      	b.n	a5b2 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    a5ac:	4a06      	ldr	r2, [pc, #24]	; (a5c8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
    a5ae:	68c1      	ldr	r1, [r0, #12]
    a5b0:	6011      	str	r1, [r2, #0]
    a5b2:	e9d0 1003 	ldrd	r1, r0, [r0, #12]
    a5b6:	b109      	cbz	r1, a5bc <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x28>
    a5b8:	6108      	str	r0, [r1, #16]
    a5ba:	4770      	bx	lr
    a5bc:	2800      	cmp	r0, #0
    a5be:	d0fc      	beq.n	a5ba <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x26>
    a5c0:	2100      	movs	r1, #0
    a5c2:	6081      	str	r1, [r0, #8]
    a5c4:	4770      	bx	lr
    a5c6:	0000      	.short	0x0000
    a5c8:	200001f4 	.word	0x200001f4

0000a5cc <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    a5cc:	b510      	push	{r4, lr}
    a5ce:	4604      	mov	r4, r0
    a5d0:	490a      	ldr	r1, [pc, #40]	; (a5fc <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    a5d2:	2000      	movs	r0, #0
    a5d4:	4602      	mov	r2, r0
    a5d6:	6809      	ldr	r1, [r1, #0]
    a5d8:	1e43      	subs	r3, r0, #1
    a5da:	e008      	b.n	a5ee <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    a5dc:	688a      	ldr	r2, [r1, #8]
    a5de:	42a2      	cmp	r2, r4
    a5e0:	d303      	bcc.n	a5ea <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    a5e2:	429a      	cmp	r2, r3
    a5e4:	d201      	bcs.n	a5ea <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    a5e6:	4613      	mov	r3, r2
    a5e8:	4608      	mov	r0, r1
    a5ea:	460a      	mov	r2, r1
    a5ec:	68c9      	ldr	r1, [r1, #12]
    a5ee:	2900      	cmp	r1, #0
    a5f0:	d1f4      	bne.n	a5dc <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    a5f2:	2800      	cmp	r0, #0
    a5f4:	d100      	bne.n	a5f8 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    a5f6:	4610      	mov	r0, r2
    a5f8:	bd10      	pop	{r4, pc}
    a5fa:	0000      	.short	0x0000
    a5fc:	200001f4 	.word	0x200001f4

0000a600 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>:
    a600:	4801      	ldr	r0, [pc, #4]	; (a608 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I+0x8>)
    a602:	6800      	ldr	r0, [r0, #0]
    a604:	4770      	bx	lr
    a606:	0000      	.short	0x0000
    a608:	200001f4 	.word	0x200001f4

0000a60c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    a60c:	4804      	ldr	r0, [pc, #16]	; (a620 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    a60e:	6801      	ldr	r1, [r0, #0]
    a610:	2000      	movs	r0, #0
    a612:	e001      	b.n	a618 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    a614:	4608      	mov	r0, r1
    a616:	68c9      	ldr	r1, [r1, #12]
    a618:	2900      	cmp	r1, #0
    a61a:	d1fb      	bne.n	a614 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    a61c:	4770      	bx	lr
    a61e:	0000      	.short	0x0000
    a620:	200001f4 	.word	0x200001f4

0000a624 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    a624:	4801      	ldr	r0, [pc, #4]	; (a62c <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    a626:	2100      	movs	r1, #0
    a628:	6001      	str	r1, [r0, #0]
    a62a:	4770      	bx	lr
    a62c:	200001f4 	.word	0x200001f4

0000a630 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    a630:	4903      	ldr	r1, [pc, #12]	; (a640 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    a632:	2000      	movs	r0, #0
    a634:	6809      	ldr	r1, [r1, #0]
    a636:	2900      	cmp	r1, #0
    a638:	d000      	beq.n	a63c <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    a63a:	200c      	movs	r0, #12
    a63c:	4770      	bx	lr
    a63e:	0000      	.short	0x0000
    a640:	200001f4 	.word	0x200001f4

0000a644 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>:
    a644:	b500      	push	{lr}
    a646:	7941      	ldrb	r1, [r0, #5]
    a648:	b095      	sub	sp, #84	; 0x54
    a64a:	b141      	cbz	r1, a65e <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a64c:	2901      	cmp	r1, #1
    a64e:	d006      	beq.n	a65e <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a650:	2902      	cmp	r1, #2
    a652:	d004      	beq.n	a65e <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a654:	2903      	cmp	r1, #3
    a656:	d002      	beq.n	a65e <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a658:	2012      	movs	r0, #18
    a65a:	b015      	add	sp, #84	; 0x54
    a65c:	bd00      	pop	{pc}
    a65e:	7901      	ldrb	r1, [r0, #4]
    a660:	f88d 1000 	strb.w	r1, [sp]
    a664:	7b01      	ldrb	r1, [r0, #12]
    a666:	f88d 1001 	strb.w	r1, [sp, #1]
    a66a:	7942      	ldrb	r2, [r0, #5]
    a66c:	2100      	movs	r1, #0
    a66e:	2301      	movs	r3, #1
    a670:	b3e2      	cbz	r2, a6ec <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xa8>
    a672:	2a02      	cmp	r2, #2
    a674:	d03b      	beq.n	a6ee <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
    a676:	f88d 3002 	strb.w	r3, [sp, #2]
    a67a:	bf00      	nop
    a67c:	f8d0 2006 	ldr.w	r2, [r0, #6]
    a680:	f8cd 2003 	str.w	r2, [sp, #3]
    a684:	8942      	ldrh	r2, [r0, #10]
    a686:	f8ad 2007 	strh.w	r2, [sp, #7]
    a68a:	f88d 3009 	strb.w	r3, [sp, #9]
    a68e:	f830 2b01 	ldrh.w	r2, [r0], #1
    a692:	f240 2371 	movw	r3, #625	; 0x271
    a696:	435a      	muls	r2, r3
    a698:	9203      	str	r2, [sp, #12]
    a69a:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    a69e:	435a      	muls	r2, r3
    a6a0:	9206      	str	r2, [sp, #24]
    a6a2:	8982      	ldrh	r2, [r0, #12]
    a6a4:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    a6a8:	89c2      	ldrh	r2, [r0, #14]
    a6aa:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    a6ae:	8a02      	ldrh	r2, [r0, #16]
    a6b0:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    a6b4:	8a42      	ldrh	r2, [r0, #18]
    a6b6:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    a6ba:	8a82      	ldrh	r2, [r0, #20]
    a6bc:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    a6c0:	8ac0      	ldrh	r0, [r0, #22]
    a6c2:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    a6c6:	2007      	movs	r0, #7
    a6c8:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    a6cc:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    a6d0:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    a6d4:	9806      	ldr	r0, [sp, #24]
    a6d6:	f000 fb95 	bl	ae04 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x170>
    a6da:	b158      	cbz	r0, a6f4 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
    a6dc:	9803      	ldr	r0, [sp, #12]
    a6de:	f000 fb85 	bl	adec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x158>
    a6e2:	b138      	cbz	r0, a6f4 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
    a6e4:	4668      	mov	r0, sp
    a6e6:	f000 f89f 	bl	a828 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>
    a6ea:	e7b6      	b.n	a65a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>
    a6ec:	e7ff      	b.n	a6ee <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
    a6ee:	f88d 1002 	strb.w	r1, [sp, #2]
    a6f2:	e7c3      	b.n	a67c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x38>
    a6f4:	2030      	movs	r0, #48	; 0x30
    a6f6:	e7b0      	b.n	a65a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>

0000a6f8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    a6f8:	4903      	ldr	r1, [pc, #12]	; (a708 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    a6fa:	884a      	ldrh	r2, [r1, #2]
    a6fc:	8002      	strh	r2, [r0, #0]
    a6fe:	7809      	ldrb	r1, [r1, #0]
    a700:	7081      	strb	r1, [r0, #2]
    a702:	2000      	movs	r0, #0
    a704:	4770      	bx	lr
    a706:	0000      	.short	0x0000
    a708:	20001064 	.word	0x20001064

0000a70c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    a70c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a70e:	460c      	mov	r4, r1
    a710:	4605      	mov	r5, r0
    a712:	8800      	ldrh	r0, [r0, #0]
    a714:	4669      	mov	r1, sp
    a716:	f003 f92a 	bl	d96e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a71a:	0001      	movs	r1, r0
    a71c:	f04f 0000 	mov.w	r0, #0
    a720:	d005      	beq.n	a72e <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x22>
    a722:	f8c4 0002 	str.w	r0, [r4, #2]
    a726:	71a0      	strb	r0, [r4, #6]
    a728:	8020      	strh	r0, [r4, #0]
    a72a:	2002      	movs	r0, #2
    a72c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a72e:	9901      	ldr	r1, [sp, #4]
    a730:	f111 0178 	adds.w	r1, r1, #120	; 0x78
    a734:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    a738:	f8d1 2016 	ldr.w	r2, [r1, #22]
    a73c:	f8c4 2002 	str.w	r2, [r4, #2]
    a740:	7e8a      	ldrb	r2, [r1, #26]
    a742:	71a2      	strb	r2, [r4, #6]
    a744:	882a      	ldrh	r2, [r5, #0]
    a746:	8022      	strh	r2, [r4, #0]
    a748:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    a74c:	f88d 2008 	strb.w	r2, [sp, #8]
    a750:	9a02      	ldr	r2, [sp, #8]
    a752:	9202      	str	r2, [sp, #8]
    a754:	f89d 2008 	ldrb.w	r2, [sp, #8]
    a758:	2a00      	cmp	r2, #0
    a75a:	d1eb      	bne.n	a734 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x28>
    a75c:	2000      	movs	r0, #0
    a75e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000a760 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    a760:	b51c      	push	{r2, r3, r4, lr}
    a762:	8800      	ldrh	r0, [r0, #0]
    a764:	4669      	mov	r1, sp
    a766:	f003 f902 	bl	d96e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a76a:	2800      	cmp	r0, #0
    a76c:	d106      	bne.n	a77c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1c>
    a76e:	f89d 0000 	ldrb.w	r0, [sp]
    a772:	b120      	cbz	r0, a77e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1e>
    a774:	480b      	ldr	r0, [pc, #44]	; (a7a4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x44>)
    a776:	7800      	ldrb	r0, [r0, #0]
    a778:	b190      	cbz	r0, a7a0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x40>
    a77a:	2002      	movs	r0, #2
    a77c:	bd1c      	pop	{r2, r3, r4, pc}
    a77e:	9801      	ldr	r0, [sp, #4]
    a780:	f004 ff67 	bl	f652 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
    a784:	2800      	cmp	r0, #0
    a786:	d0f8      	beq.n	a77a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1a>
    a788:	9801      	ldr	r0, [sp, #4]
    a78a:	f890 0159 	ldrb.w	r0, [r0, #345]	; 0x159
    a78e:	b108      	cbz	r0, a794 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x34>
    a790:	203a      	movs	r0, #58	; 0x3a
    a792:	bd1c      	pop	{r2, r3, r4, pc}
    a794:	9901      	ldr	r1, [sp, #4]
    a796:	2001      	movs	r0, #1
    a798:	f881 0159 	strb.w	r0, [r1, #345]	; 0x159
    a79c:	2000      	movs	r0, #0
    a79e:	bd1c      	pop	{r2, r3, r4, pc}
    a7a0:	2011      	movs	r0, #17
    a7a2:	bd1c      	pop	{r2, r3, r4, pc}
    a7a4:	200001f8 	.word	0x200001f8

0000a7a8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    a7a8:	b510      	push	{r4, lr}
    a7aa:	4604      	mov	r4, r0
    a7ac:	f004 ff48 	bl	f640 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    a7b0:	b130      	cbz	r0, a7c0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    a7b2:	4804      	ldr	r0, [pc, #16]	; (a7c4 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    a7b4:	8881      	ldrh	r1, [r0, #4]
    a7b6:	8021      	strh	r1, [r4, #0]
    a7b8:	88c0      	ldrh	r0, [r0, #6]
    a7ba:	8060      	strh	r0, [r4, #2]
    a7bc:	2000      	movs	r0, #0
    a7be:	bd10      	pop	{r4, pc}
    a7c0:	2001      	movs	r0, #1
    a7c2:	bd10      	pop	{r4, pc}
    a7c4:	20000206 	.word	0x20000206

0000a7c8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    a7c8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a7ca:	4605      	mov	r5, r0
    a7cc:	f000 fbf8 	bl	afc0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a7d0:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a7d4:	b310      	cbz	r0, a81c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    a7d6:	2400      	movs	r4, #0
    a7d8:	a802      	add	r0, sp, #8
    a7da:	f88d 4004 	strb.w	r4, [sp, #4]
    a7de:	f88d 4008 	strb.w	r4, [sp, #8]
    a7e2:	9000      	str	r0, [sp, #0]
    a7e4:	78aa      	ldrb	r2, [r5, #2]
    a7e6:	7869      	ldrb	r1, [r5, #1]
    a7e8:	7828      	ldrb	r0, [r5, #0]
    a7ea:	ab01      	add	r3, sp, #4
    a7ec:	f004 ffd5 	bl	f79a <__kernel_ram_size+0x82>
    a7f0:	2800      	cmp	r0, #0
    a7f2:	d112      	bne.n	a81a <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    a7f4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a7f8:	f004 fd4c 	bl	f294 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    a7fc:	b180      	cbz	r0, a820 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    a7fe:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a802:	f004 fd47 	bl	f294 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    a806:	b158      	cbz	r0, a820 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    a808:	4806      	ldr	r0, [pc, #24]	; (a824 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    a80a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    a80e:	7381      	strb	r1, [r0, #14]
    a810:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a814:	73c1      	strb	r1, [r0, #15]
    a816:	8204      	strh	r4, [r0, #16]
    a818:	2000      	movs	r0, #0
    a81a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a81c:	2001      	movs	r0, #1
    a81e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a820:	2011      	movs	r0, #17
    a822:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a824:	20001064 	.word	0x20001064

0000a828 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>:
    a828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a82c:	a1a4      	add	r1, pc, #656	; (adr r1, aac0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x298>)
    a82e:	4605      	mov	r5, r0
    a830:	e9d1 8700 	ldrd	r8, r7, [r1]
    a834:	7a40      	ldrb	r0, [r0, #9]
    a836:	b08d      	sub	sp, #52	; 0x34
    a838:	0781      	lsls	r1, r0, #30
    a83a:	d502      	bpl.n	a842 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1a>
    a83c:	f040 0001 	orr.w	r0, r0, #1
    a840:	7268      	strb	r0, [r5, #9]
    a842:	4628      	mov	r0, r5
    a844:	f004 fd85 	bl	f352 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x156>
    a848:	2800      	cmp	r0, #0
    a84a:	d10c      	bne.n	a866 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    a84c:	f004 ff1c 	bl	f688 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    a850:	b940      	cbnz	r0, a864 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
    a852:	f7fb fbbd 	bl	5fd0 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY>
    a856:	b928      	cbnz	r0, a864 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
    a858:	f7fb fe76 	bl	6548 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    a85c:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    a860:	39ff      	subs	r1, #255	; 0xff
    a862:	d003      	beq.n	a86c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x44>
    a864:	200c      	movs	r0, #12
    a866:	b00d      	add	sp, #52	; 0x34
    a868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a86c:	7828      	ldrb	r0, [r5, #0]
    a86e:	f04f 0b00 	mov.w	fp, #0
    a872:	f04f 0a01 	mov.w	sl, #1
    a876:	b9e0      	cbnz	r0, a8b2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x8a>
    a878:	f895 9002 	ldrb.w	r9, [r5, #2]
    a87c:	1cee      	adds	r6, r5, #3
    a87e:	a909      	add	r1, sp, #36	; 0x24
    a880:	2000      	movs	r0, #0
    a882:	f002 ff13 	bl	d6ac <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    a886:	b178      	cbz	r0, a8a8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x80>
    a888:	f240 2109 	movw	r1, #521	; 0x209
    a88c:	e112      	b.n	aab4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x28c>
    a88e:	4648      	mov	r0, r9
    a890:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a892:	f004 f914 	bl	eabe <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    a896:	78a1      	ldrb	r1, [r4, #2]
    a898:	4288      	cmp	r0, r1
    a89a:	d105      	bne.n	a8a8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x80>
    a89c:	2206      	movs	r2, #6
    a89e:	4631      	mov	r1, r6
    a8a0:	1ce0      	adds	r0, r4, #3
    a8a2:	f001 fe47 	bl	c534 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    a8a6:	b328      	cbz	r0, a8f4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xcc>
    a8a8:	a809      	add	r0, sp, #36	; 0x24
    a8aa:	f7f9 fc87 	bl	41bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    a8ae:	2800      	cmp	r0, #0
    a8b0:	d0ed      	beq.n	a88e <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x66>
    a8b2:	2103      	movs	r1, #3
    a8b4:	f105 0018 	add.w	r0, r5, #24
    a8b8:	f000 fab0 	bl	ae1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x188>
    a8bc:	2200      	movs	r2, #0
    a8be:	4611      	mov	r1, r2
    a8c0:	a802      	add	r0, sp, #8
    a8c2:	f7f9 fca1 	bl	4208 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    a8c6:	0004      	movs	r4, r0
    a8c8:	d016      	beq.n	a8f8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xd0>
    a8ca:	2100      	movs	r1, #0
    a8cc:	f7fb f948 	bl	5b60 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    a8d0:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    a8d4:	8020      	strh	r0, [r4, #0]
    a8d6:	487c      	ldr	r0, [pc, #496]	; (aac8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a0>)
    a8d8:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    a8dc:	f004 feb0 	bl	f640 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    a8e0:	497a      	ldr	r1, [pc, #488]	; (aacc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a4>)
    a8e2:	2800      	cmp	r0, #0
    a8e4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    a8e8:	d008      	beq.n	a8fc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xd4>
    a8ea:	884b      	ldrh	r3, [r1, #2]
    a8ec:	888a      	ldrh	r2, [r1, #4]
    a8ee:	84c3      	strh	r3, [r0, #38]	; 0x26
    a8f0:	8502      	strh	r2, [r0, #40]	; 0x28
    a8f2:	e006      	b.n	a902 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xda>
    a8f4:	200b      	movs	r0, #11
    a8f6:	e7b6      	b.n	a866 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    a8f8:	2009      	movs	r0, #9
    a8fa:	e7b4      	b.n	a866 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    a8fc:	221b      	movs	r2, #27
    a8fe:	84c2      	strh	r2, [r0, #38]	; 0x26
    a900:	8502      	strh	r2, [r0, #40]	; 0x28
    a902:	4689      	mov	r9, r1
    a904:	4608      	mov	r0, r1
    a906:	7849      	ldrb	r1, [r1, #1]
    a908:	9100      	str	r1, [sp, #0]
    a90a:	7803      	ldrb	r3, [r0, #0]
    a90c:	8882      	ldrh	r2, [r0, #4]
    a90e:	f8b9 1002 	ldrh.w	r1, [r9, #2]
    a912:	8820      	ldrh	r0, [r4, #0]
    a914:	f7f9 fd5a 	bl	43cc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    a918:	b110      	cbz	r0, a920 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf8>
    a91a:	f640 6199 	movw	r1, #3737	; 0xe99
    a91e:	e0c9      	b.n	aab4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x28c>
    a920:	f003 fd5f 	bl	e3e2 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>
    a924:	6120      	str	r0, [r4, #16]
    a926:	a06a      	add	r0, pc, #424	; (adr r0, aad0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a8>)
    a928:	f104 0618 	add.w	r6, r4, #24
    a92c:	6800      	ldr	r0, [r0, #0]
    a92e:	9000      	str	r0, [sp, #0]
    a930:	2103      	movs	r1, #3
    a932:	4668      	mov	r0, sp
    a934:	f7f9 faae 	bl	3e94 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    a938:	2000      	movs	r0, #0
    a93a:	4669      	mov	r1, sp
    a93c:	5c0a      	ldrb	r2, [r1, r0]
    a93e:	5432      	strb	r2, [r6, r0]
    a940:	1c40      	adds	r0, r0, #1
    a942:	b2c0      	uxtb	r0, r0
    a944:	2803      	cmp	r0, #3
    a946:	d3f9      	bcc.n	a93c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x114>
    a948:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
    a94a:	f003 f81c 	bl	d986 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    a94e:	60e0      	str	r0, [r4, #12]
    a950:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    a952:	82a0      	strh	r0, [r4, #20]
    a954:	8ee8      	ldrh	r0, [r5, #54]	; 0x36
    a956:	82e0      	strh	r0, [r4, #22]
    a958:	7a68      	ldrb	r0, [r5, #9]
    a95a:	f004 fc7a 	bl	f252 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    a95e:	f8d9 1008 	ldr.w	r1, [r9, #8]
    a962:	464e      	mov	r6, r9
    a964:	4620      	mov	r0, r4
    a966:	62e1      	str	r1, [r4, #44]	; 0x2c
    a968:	f003 fed0 	bl	e70c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>
    a96c:	f8c4 808e 	str.w	r8, [r4, #142]	; 0x8e
    a970:	46d1      	mov	r9, sl
    a972:	4650      	mov	r0, sl
    a974:	f884 7092 	strb.w	r7, [r4, #146]	; 0x92
    a978:	f884 012e 	strb.w	r0, [r4, #302]	; 0x12e
    a97c:	4852      	ldr	r0, [pc, #328]	; (aac8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a0>)
    a97e:	3808      	subs	r0, #8
    a980:	6843      	ldr	r3, [r0, #4]
    a982:	b123      	cbz	r3, a98e <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x166>
    a984:	2201      	movs	r2, #1
    a986:	f504 7199 	add.w	r1, r4, #306	; 0x132
    a98a:	4620      	mov	r0, r4
    a98c:	4798      	blx	r3
    a98e:	8821      	ldrh	r1, [r4, #0]
    a990:	f8ad 1014 	strh.w	r1, [sp, #20]
    a994:	7bb1      	ldrb	r1, [r6, #14]
    a996:	f88d 1016 	strb.w	r1, [sp, #22]
    a99a:	7bf1      	ldrb	r1, [r6, #15]
    a99c:	f88d 1017 	strb.w	r1, [sp, #23]
    a9a0:	8a31      	ldrh	r1, [r6, #16]
    a9a2:	f8ad 1018 	strh.w	r1, [sp, #24]
    a9a6:	a908      	add	r1, sp, #32
    a9a8:	9100      	str	r1, [sp, #0]
    a9aa:	2000      	movs	r0, #0
    a9ac:	ab07      	add	r3, sp, #28
    a9ae:	aa05      	add	r2, sp, #20
    a9b0:	4621      	mov	r1, r4
    a9b2:	f004 fe06 	bl	f5c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    a9b6:	0006      	movs	r6, r0
    a9b8:	d10f      	bne.n	a9da <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1b2>
    a9ba:	f89d 001c 	ldrb.w	r0, [sp, #28]
    a9be:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    a9c2:	f89d 0020 	ldrb.w	r0, [sp, #32]
    a9c6:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    a9ca:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    a9ce:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
    a9d2:	a909      	add	r1, sp, #36	; 0x24
    a9d4:	4620      	mov	r0, r4
    a9d6:	f003 f8c4 	bl	db62 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    a9da:	46d8      	mov	r8, fp
    a9dc:	f88d b00c 	strb.w	fp, [sp, #12]
    a9e0:	2101      	movs	r1, #1
    a9e2:	a803      	add	r0, sp, #12
    a9e4:	f7f9 fa56 	bl	3e94 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    a9e8:	f89d 000c 	ldrb.w	r0, [sp, #12]
    a9ec:	f000 0107 	and.w	r1, r0, #7
    a9f0:	f3c0 02c1 	ubfx	r2, r0, #3, #2
    a9f4:	4411      	add	r1, r2
    a9f6:	f3c0 1040 	ubfx	r0, r0, #5, #1
    a9fa:	4408      	add	r0, r1
    a9fc:	f88d 000c 	strb.w	r0, [sp, #12]
    aa00:	1d40      	adds	r0, r0, #5
    aa02:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    aa06:	2809      	cmp	r0, #9
    aa08:	d202      	bcs.n	aa10 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1e8>
    aa0a:	3008      	adds	r0, #8
    aa0c:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    aa10:	2101      	movs	r1, #1
    aa12:	4620      	mov	r0, r4
    aa14:	f7fb f8a4 	bl	5b60 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    aa18:	7868      	ldrb	r0, [r5, #1]
    aa1a:	f7fb fe69 	bl	66f0 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>
    aa1e:	bbee      	cbnz	r6, aa9c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x274>
    aa20:	78a9      	ldrb	r1, [r5, #2]
    aa22:	7828      	ldrb	r0, [r5, #0]
    aa24:	1cea      	adds	r2, r5, #3
    aa26:	f7fb fe0d 	bl	6644 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>
    aa2a:	b148      	cbz	r0, aa40 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x218>
    aa2c:	f7fb fd34 	bl	6498 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    aa30:	78a9      	ldrb	r1, [r5, #2]
    aa32:	7828      	ldrb	r0, [r5, #0]
    aa34:	1cea      	adds	r2, r5, #3
    aa36:	f7fb fe29 	bl	668c <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>
    aa3a:	0006      	movs	r6, r0
    aa3c:	d002      	beq.n	aa44 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x21c>
    aa3e:	e02f      	b.n	aaa0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    aa40:	2612      	movs	r6, #18
    aa42:	e02d      	b.n	aaa0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    aa44:	78a8      	ldrb	r0, [r5, #2]
    aa46:	f004 f83a 	bl	eabe <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    aa4a:	4602      	mov	r2, r0
    aa4c:	1ceb      	adds	r3, r5, #3
    aa4e:	4621      	mov	r1, r4
    aa50:	2003      	movs	r0, #3
    aa52:	f7fb fd63 	bl	651c <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    aa56:	0006      	movs	r6, r0
    aa58:	d122      	bne.n	aaa0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    aa5a:	464f      	mov	r7, r9
    aa5c:	4648      	mov	r0, r9
    aa5e:	f7fb fdbb 	bl	65d8 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>
    aa62:	0006      	movs	r6, r0
    aa64:	d11c      	bne.n	aaa0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    aa66:	f88d 800c 	strb.w	r8, [sp, #12]
    aa6a:	7a68      	ldrb	r0, [r5, #9]
    aa6c:	07c0      	lsls	r0, r0, #31
    aa6e:	d005      	beq.n	aa7c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x254>
    aa70:	68e8      	ldr	r0, [r5, #12]
    aa72:	9004      	str	r0, [sp, #16]
    aa74:	69a8      	ldr	r0, [r5, #24]
    aa76:	9005      	str	r0, [sp, #20]
    aa78:	f88d 700c 	strb.w	r7, [sp, #12]
    aa7c:	a803      	add	r0, sp, #12
    aa7e:	f7fd f913 	bl	7ca8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    aa82:	4606      	mov	r6, r0
    aa84:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
    aa88:	f7fb fea6 	bl	67d8 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>
    aa8c:	b936      	cbnz	r6, aa9c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x274>
    aa8e:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    aa92:	4620      	mov	r0, r4
    aa94:	f7fd f82a 	bl	7aec <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>
    aa98:	0006      	movs	r6, r0
    aa9a:	e000      	b.n	aa9e <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x276>
    aa9c:	e000      	b.n	aaa0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    aa9e:	d00c      	beq.n	aaba <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x292>
    aaa0:	8820      	ldrh	r0, [r4, #0]
    aaa2:	f002 fe62 	bl	d76a <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    aaa6:	8820      	ldrh	r0, [r4, #0]
    aaa8:	2100      	movs	r1, #0
    aaaa:	f7f9 fbd5 	bl	4258 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    aaae:	b120      	cbz	r0, aaba <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x292>
    aab0:	f640 715f 	movw	r1, #3935	; 0xf5f
    aab4:	2039      	movs	r0, #57	; 0x39
    aab6:	f7f9 f951 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aaba:	4630      	mov	r0, r6
    aabc:	e6d3      	b.n	a866 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    aabe:	0000      	.short	0x0000
    aac0:	ffffffff 	.word	0xffffffff
    aac4:	0000001f 	.word	0x0000001f
    aac8:	20000200 	.word	0x20000200
    aacc:	20001064 	.word	0x20001064
    aad0:	00332211 	.word	0x00332211

0000aad4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    aad4:	7801      	ldrb	r1, [r0, #0]
    aad6:	b171      	cbz	r1, aaf6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    aad8:	7841      	ldrb	r1, [r0, #1]
    aada:	b161      	cbz	r1, aaf6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    aadc:	8841      	ldrh	r1, [r0, #2]
    aade:	291b      	cmp	r1, #27
    aae0:	d309      	bcc.n	aaf6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    aae2:	8881      	ldrh	r1, [r0, #4]
    aae4:	291b      	cmp	r1, #27
    aae6:	d306      	bcc.n	aaf6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    aae8:	4904      	ldr	r1, [pc, #16]	; (aafc <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    aaea:	6802      	ldr	r2, [r0, #0]
    aaec:	600a      	str	r2, [r1, #0]
    aaee:	8880      	ldrh	r0, [r0, #4]
    aaf0:	8088      	strh	r0, [r1, #4]
    aaf2:	2000      	movs	r0, #0
    aaf4:	4770      	bx	lr
    aaf6:	2012      	movs	r0, #18
    aaf8:	4770      	bx	lr
    aafa:	0000      	.short	0x0000
    aafc:	20001064 	.word	0x20001064

0000ab00 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    ab00:	6800      	ldr	r0, [r0, #0]
    ab02:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ab06:	4288      	cmp	r0, r1
    ab08:	d303      	bcc.n	ab12 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    ab0a:	4903      	ldr	r1, [pc, #12]	; (ab18 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    ab0c:	6088      	str	r0, [r1, #8]
    ab0e:	2000      	movs	r0, #0
    ab10:	4770      	bx	lr
    ab12:	2012      	movs	r0, #18
    ab14:	4770      	bx	lr
    ab16:	0000      	.short	0x0000
    ab18:	20001064 	.word	0x20001064

0000ab1c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    ab1c:	b510      	push	{r4, lr}
    ab1e:	b086      	sub	sp, #24
    ab20:	4604      	mov	r4, r0
    ab22:	f004 fc8d 	bl	f440 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x244>
    ab26:	2800      	cmp	r0, #0
    ab28:	d103      	bne.n	ab32 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    ab2a:	f004 fdad 	bl	f688 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    ab2e:	b110      	cbz	r0, ab36 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    ab30:	200c      	movs	r0, #12
    ab32:	b006      	add	sp, #24
    ab34:	bd10      	pop	{r4, pc}
    ab36:	2102      	movs	r1, #2
    ab38:	f104 0010 	add.w	r0, r4, #16
    ab3c:	f000 f96e 	bl	ae1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x188>
    ab40:	78a0      	ldrb	r0, [r4, #2]
    ab42:	f88d 0008 	strb.w	r0, [sp, #8]
    ab46:	78a0      	ldrb	r0, [r4, #2]
    ab48:	f88d 0000 	strb.w	r0, [sp]
    ab4c:	7860      	ldrb	r0, [r4, #1]
    ab4e:	f88d 0003 	strb.w	r0, [sp, #3]
    ab52:	7820      	ldrb	r0, [r4, #0]
    ab54:	f88d 0002 	strb.w	r0, [sp, #2]
    ab58:	7e20      	ldrb	r0, [r4, #24]
    ab5a:	f88d 0004 	strb.w	r0, [sp, #4]
    ab5e:	78a0      	ldrb	r0, [r4, #2]
    ab60:	07c0      	lsls	r0, r0, #31
    ab62:	d00b      	beq.n	ab7c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    ab64:	78e0      	ldrb	r0, [r4, #3]
    ab66:	2801      	cmp	r0, #1
    ab68:	d011      	beq.n	ab8e <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    ab6a:	b190      	cbz	r0, ab92 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    ab6c:	f05f 0000 	movs.w	r0, #0
    ab70:	f88d 0001 	strb.w	r0, [sp, #1]
    ab74:	68a0      	ldr	r0, [r4, #8]
    ab76:	9003      	str	r0, [sp, #12]
    ab78:	6920      	ldr	r0, [r4, #16]
    ab7a:	9004      	str	r0, [sp, #16]
    ab7c:	a802      	add	r0, sp, #8
    ab7e:	f7fd f893 	bl	7ca8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    ab82:	2800      	cmp	r0, #0
    ab84:	d1d5      	bne.n	ab32 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    ab86:	4668      	mov	r0, sp
    ab88:	f7fb fe2e 	bl	67e8 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    ab8c:	e7d1      	b.n	ab32 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    ab8e:	2002      	movs	r0, #2
    ab90:	e7ee      	b.n	ab70 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    ab92:	2001      	movs	r0, #1
    ab94:	e7ec      	b.n	ab70 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

0000ab98 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    ab98:	4a03      	ldr	r2, [pc, #12]	; (aba8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    ab9a:	e9d2 1200 	ldrd	r1, r2, [r2]
    ab9e:	6001      	str	r1, [r0, #0]
    aba0:	6042      	str	r2, [r0, #4]
    aba2:	2000      	movs	r0, #0
    aba4:	4770      	bx	lr
    aba6:	0000      	.short	0x0000
    aba8:	0000aea8 	.word	0x0000aea8

0000abac <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    abac:	b510      	push	{r4, lr}
    abae:	2005      	movs	r0, #5
    abb0:	f000 f9fc 	bl	afac <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    abb4:	f7fd fe48 	bl	8848 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    abb8:	4902      	ldr	r1, [pc, #8]	; (abc4 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    abba:	4801      	ldr	r0, [pc, #4]	; (abc0 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    abbc:	6048      	str	r0, [r1, #4]
    abbe:	bd10      	pop	{r4, pc}
    abc0:	0000acf1 	.word	0x0000acf1
    abc4:	200001f8 	.word	0x200001f8

0000abc8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    abc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    abcc:	b086      	sub	sp, #24
    abce:	468a      	mov	sl, r1
    abd0:	4606      	mov	r6, r0
    abd2:	8800      	ldrh	r0, [r0, #0]
    abd4:	a901      	add	r1, sp, #4
    abd6:	f002 feca 	bl	d96e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    abda:	2800      	cmp	r0, #0
    abdc:	d139      	bne.n	ac52 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    abde:	9802      	ldr	r0, [sp, #8]
    abe0:	f04f 0801 	mov.w	r8, #1
    abe4:	4601      	mov	r1, r0
    abe6:	4689      	mov	r9, r1
    abe8:	f890 11aa 	ldrb.w	r1, [r0, #426]	; 0x1aa
    abec:	f88d 1000 	strb.w	r1, [sp]
    abf0:	9900      	ldr	r1, [sp, #0]
    abf2:	9100      	str	r1, [sp, #0]
    abf4:	f89d 5000 	ldrb.w	r5, [sp]
    abf8:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    abfc:	3078      	adds	r0, #120	; 0x78
    abfe:	2921      	cmp	r1, #33	; 0x21
    ac00:	d100      	bne.n	ac04 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    ac02:	b13d      	cbz	r5, ac14 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    ac04:	2400      	movs	r4, #0
    ac06:	304e      	adds	r0, #78	; 0x4e
    ac08:	2108      	movs	r1, #8
    ac0a:	4607      	mov	r7, r0
    ac0c:	f003 ff4d 	bl	eaaa <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    ac10:	b110      	cbz	r0, ac18 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    ac12:	e007      	b.n	ac24 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    ac14:	2401      	movs	r4, #1
    ac16:	e7f6      	b.n	ac06 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    ac18:	210b      	movs	r1, #11
    ac1a:	4638      	mov	r0, r7
    ac1c:	f003 ff45 	bl	eaaa <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    ac20:	b900      	cbnz	r0, ac24 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    ac22:	b1ac      	cbz	r4, ac50 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    ac24:	a804      	add	r0, sp, #16
    ac26:	9000      	str	r0, [sp, #0]
    ac28:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ac2c:	ab03      	add	r3, sp, #12
    ac2e:	4632      	mov	r2, r6
    ac30:	4649      	mov	r1, r9
    ac32:	f004 fcc6 	bl	f5c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    ac36:	0007      	movs	r7, r0
    ac38:	d10b      	bne.n	ac52 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    ac3a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ac3e:	9c02      	ldr	r4, [sp, #8]
    ac40:	b150      	cbz	r0, ac58 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x90>
    ac42:	f504 74df 	add.w	r4, r4, #446	; 0x1be
    ac46:	bf00      	nop
    ac48:	f884 8001 	strb.w	r8, [r4, #1]
    ac4c:	b94d      	cbnz	r5, ac62 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9a>
    ac4e:	e006      	b.n	ac5e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x96>
    ac50:	201a      	movs	r0, #26
    ac52:	b006      	add	sp, #24
    ac54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ac58:	f504 749f 	add.w	r4, r4, #318	; 0x13e
    ac5c:	e7f4      	b.n	ac48 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x80>
    ac5e:	7820      	ldrb	r0, [r4, #0]
    ac60:	b108      	cbz	r0, ac66 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9e>
    ac62:	273a      	movs	r7, #58	; 0x3a
    ac64:	e012      	b.n	ac8c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc4>
    ac66:	f884 a000 	strb.w	sl, [r4]
    ac6a:	f89d 000c 	ldrb.w	r0, [sp, #12]
    ac6e:	70a0      	strb	r0, [r4, #2]
    ac70:	f89d 1010 	ldrb.w	r1, [sp, #16]
    ac74:	70e1      	strb	r1, [r4, #3]
    ac76:	f88d 0000 	strb.w	r0, [sp]
    ac7a:	f88d 1001 	strb.w	r1, [sp, #1]
    ac7e:	88b0      	ldrh	r0, [r6, #4]
    ac80:	f8ad 0002 	strh.w	r0, [sp, #2]
    ac84:	4669      	mov	r1, sp
    ac86:	4648      	mov	r0, r9
    ac88:	f002 ff6b 	bl	db62 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    ac8c:	2000      	movs	r0, #0
    ac8e:	7060      	strb	r0, [r4, #1]
    ac90:	4638      	mov	r0, r7
    ac92:	e7de      	b.n	ac52 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>

0000ac94 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    ac94:	b510      	push	{r4, lr}
    ac96:	f002 fd7c 	bl	d792 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    ac9a:	f7fa fd07 	bl	56ac <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    ac9e:	f000 f99f 	bl	afe0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    aca2:	f003 fa49 	bl	e138 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    aca6:	4810      	ldr	r0, [pc, #64]	; (ace8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x54>)
    aca8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    acac:	4b0f      	ldr	r3, [pc, #60]	; (acec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    acae:	8281      	strh	r1, [r0, #20]
    acb0:	2100      	movs	r1, #0
    acb2:	7581      	strb	r1, [r0, #22]
    acb4:	8301      	strh	r1, [r0, #24]
    acb6:	221b      	movs	r2, #27
    acb8:	801a      	strh	r2, [r3, #0]
    acba:	f44f 74a4 	mov.w	r4, #328	; 0x148
    acbe:	805c      	strh	r4, [r3, #2]
    acc0:	809a      	strh	r2, [r3, #4]
    acc2:	80dc      	strh	r4, [r3, #6]
    acc4:	7381      	strb	r1, [r0, #14]
    acc6:	73c1      	strb	r1, [r0, #15]
    acc8:	2303      	movs	r3, #3
    acca:	7003      	strb	r3, [r0, #0]
    accc:	2302      	movs	r3, #2
    acce:	7043      	strb	r3, [r0, #1]
    acd0:	8042      	strh	r2, [r0, #2]
    acd2:	8082      	strh	r2, [r0, #4]
    acd4:	f640 62a6 	movw	r2, #3750	; 0xea6
    acd8:	6082      	str	r2, [r0, #8]
    acda:	4a04      	ldr	r2, [pc, #16]	; (acec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    acdc:	1f92      	subs	r2, r2, #6
    acde:	7011      	strb	r1, [r2, #0]
    ace0:	7481      	strb	r1, [r0, #18]
    ace2:	7301      	strb	r1, [r0, #12]
    ace4:	bd10      	pop	{r4, pc}
    ace6:	0000      	.short	0x0000
    ace8:	20001064 	.word	0x20001064
    acec:	20000206 	.word	0x20000206
    acf0:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    acf4:	4692      	mov	sl, r2
    acf6:	460f      	mov	r7, r1
    acf8:	4681      	mov	r9, r0
    acfa:	f004 fca1 	bl	f640 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    acfe:	2800      	cmp	r0, #0
    ad00:	d063      	beq.n	adca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    ad02:	4933      	ldr	r1, [pc, #204]	; (add0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13c>)
    ad04:	f8b9 2054 	ldrh.w	r2, [r9, #84]	; 0x54
    ad08:	f8b9 6052 	ldrh.w	r6, [r9, #82]	; 0x52
    ad0c:	8808      	ldrh	r0, [r1, #0]
    ad0e:	4290      	cmp	r0, r2
    ad10:	d300      	bcc.n	ad14 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x80>
    ad12:	4610      	mov	r0, r2
    ad14:	4680      	mov	r8, r0
    ad16:	8888      	ldrh	r0, [r1, #4]
    ad18:	42b0      	cmp	r0, r6
    ad1a:	d200      	bcs.n	ad1e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8a>
    ad1c:	4606      	mov	r6, r0
    ad1e:	884c      	ldrh	r4, [r1, #2]
    ad20:	f640 0048 	movw	r0, #2120	; 0x848
    ad24:	4284      	cmp	r4, r0
    ad26:	d300      	bcc.n	ad2a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x96>
    ad28:	4604      	mov	r4, r0
    ad2a:	88cd      	ldrh	r5, [r1, #6]
    ad2c:	4285      	cmp	r5, r0
    ad2e:	d300      	bcc.n	ad32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9e>
    ad30:	4605      	mov	r5, r0
    ad32:	4284      	cmp	r4, r0
    ad34:	d300      	bcc.n	ad38 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa4>
    ad36:	4604      	mov	r4, r0
    ad38:	f44f 71a4 	mov.w	r1, #328	; 0x148
    ad3c:	2e1b      	cmp	r6, #27
    ad3e:	d001      	beq.n	ad44 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb0>
    ad40:	428d      	cmp	r5, r1
    ad42:	d104      	bne.n	ad4e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xba>
    ad44:	f1b8 0f1b 	cmp.w	r8, #27
    ad48:	d03f      	beq.n	adca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    ad4a:	428c      	cmp	r4, r1
    ad4c:	d03d      	beq.n	adca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    ad4e:	466a      	mov	r2, sp
    ad50:	4651      	mov	r1, sl
    ad52:	4648      	mov	r0, r9
    ad54:	f004 fbff 	bl	f556 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    ad58:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    ad5c:	4641      	mov	r1, r8
    ad5e:	4540      	cmp	r0, r8
    ad60:	d900      	bls.n	ad64 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd0>
    ad62:	4608      	mov	r0, r1
    ad64:	80f8      	strh	r0, [r7, #6]
    ad66:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    ad6a:	42a1      	cmp	r1, r4
    ad6c:	d800      	bhi.n	ad70 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xdc>
    ad6e:	460c      	mov	r4, r1
    ad70:	813c      	strh	r4, [r7, #8]
    ad72:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    ad76:	42b1      	cmp	r1, r6
    ad78:	d800      	bhi.n	ad7c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe8>
    ad7a:	460e      	mov	r6, r1
    ad7c:	807e      	strh	r6, [r7, #2]
    ad7e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ad82:	42a9      	cmp	r1, r5
    ad84:	d900      	bls.n	ad88 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf4>
    ad86:	4629      	mov	r1, r5
    ad88:	80b9      	strh	r1, [r7, #4]
    ad8a:	2201      	movs	r2, #1
    ad8c:	703a      	strb	r2, [r7, #0]
    ad8e:	381b      	subs	r0, #27
    ad90:	28e0      	cmp	r0, #224	; 0xe0
    ad92:	d902      	bls.n	ad9a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x106>
    ad94:	f44f 6148 	mov.w	r1, #3200	; 0xc80
    ad98:	e014      	b.n	adc4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x130>
    ad9a:	3e1b      	subs	r6, #27
    ad9c:	2ee0      	cmp	r6, #224	; 0xe0
    ad9e:	d902      	bls.n	ada6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x112>
    ada0:	f640 4182 	movw	r1, #3202	; 0xc82
    ada4:	e00e      	b.n	adc4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x130>
    ada6:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    adaa:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    adae:	4284      	cmp	r4, r0
    adb0:	d902      	bls.n	adb8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x124>
    adb2:	f640 4184 	movw	r1, #3204	; 0xc84
    adb6:	e005      	b.n	adc4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x130>
    adb8:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    adbc:	4281      	cmp	r1, r0
    adbe:	d904      	bls.n	adca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    adc0:	f640 4186 	movw	r1, #3206	; 0xc86
    adc4:	2039      	movs	r0, #57	; 0x39
    adc6:	f7f8 ffc9 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    adca:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    adce:	0000      	.short	0x0000
    add0:	20000206 	.word	0x20000206
    add4:	4904      	ldr	r1, [pc, #16]	; (ade8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x154>)
    add6:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    adda:	4288      	cmp	r0, r1
    addc:	d301      	bcc.n	ade2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14e>
    adde:	2000      	movs	r0, #0
    ade0:	4770      	bx	lr
    ade2:	2001      	movs	r0, #1
    ade4:	4770      	bx	lr
    ade6:	0000      	.short	0x0000
    ade8:	0270f3cc 	.word	0x0270f3cc
    adec:	4904      	ldr	r1, [pc, #16]	; (ae00 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x16c>)
    adee:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    adf2:	4288      	cmp	r0, r1
    adf4:	d301      	bcc.n	adfa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
    adf6:	2000      	movs	r0, #0
    adf8:	4770      	bx	lr
    adfa:	2001      	movs	r0, #1
    adfc:	4770      	bx	lr
    adfe:	0000      	.short	0x0000
    ae00:	009c363d 	.word	0x009c363d
    ae04:	4904      	ldr	r1, [pc, #16]	; (ae18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x184>)
    ae06:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    ae0a:	4288      	cmp	r0, r1
    ae0c:	d301      	bcc.n	ae12 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x17e>
    ae0e:	2000      	movs	r0, #0
    ae10:	4770      	bx	lr
    ae12:	2001      	movs	r0, #1
    ae14:	4770      	bx	lr
    ae16:	0000      	.short	0x0000
    ae18:	009c363d 	.word	0x009c363d
    ae1c:	b530      	push	{r4, r5, lr}
    ae1e:	2200      	movs	r2, #0
    ae20:	4d07      	ldr	r5, [pc, #28]	; (ae40 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ac>)
    ae22:	e009      	b.n	ae38 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a4>
    ae24:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    ae28:	462b      	mov	r3, r5
    ae2a:	429c      	cmp	r4, r3
    ae2c:	d800      	bhi.n	ae30 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x19c>
    ae2e:	4623      	mov	r3, r4
    ae30:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    ae34:	1c52      	adds	r2, r2, #1
    ae36:	b2d2      	uxtb	r2, r2
    ae38:	428a      	cmp	r2, r1
    ae3a:	d3f3      	bcc.n	ae24 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x190>
    ae3c:	bd30      	pop	{r4, r5, pc}
    ae3e:	0000      	.short	0x0000
    ae40:	00f42400 	.word	0x00f42400
    ae44:	4a09      	ldr	r2, [pc, #36]	; (ae6c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d8>)
    ae46:	4290      	cmp	r0, r2
    ae48:	d80b      	bhi.n	ae62 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    ae4a:	2901      	cmp	r1, #1
    ae4c:	d002      	beq.n	ae54 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c0>
    ae4e:	2904      	cmp	r1, #4
    ae50:	d003      	beq.n	ae5a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c6>
    ae52:	e008      	b.n	ae66 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d2>
    ae54:	f240 7153 	movw	r1, #1875	; 0x753
    ae58:	e001      	b.n	ae5e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ca>
    ae5a:	f640 11c4 	movw	r1, #2500	; 0x9c4
    ae5e:	4288      	cmp	r0, r1
    ae60:	d201      	bcs.n	ae66 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d2>
    ae62:	2000      	movs	r0, #0
    ae64:	4770      	bx	lr
    ae66:	2001      	movs	r0, #1
    ae68:	4770      	bx	lr
    ae6a:	0000      	.short	0x0000
    ae6c:	0270fd8f 	.word	0x0270fd8f
    ae70:	b510      	push	{r4, lr}
    ae72:	4604      	mov	r4, r0
    ae74:	88c1      	ldrh	r1, [r0, #6]
    ae76:	8880      	ldrh	r0, [r0, #4]
    ae78:	f004 fa21 	bl	f2be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    ae7c:	2800      	cmp	r0, #0
    ae7e:	d10f      	bne.n	aea0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x20c>
    ae80:	8861      	ldrh	r1, [r4, #2]
    ae82:	8820      	ldrh	r0, [r4, #0]
    ae84:	f004 fa1b 	bl	f2be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    ae88:	2800      	cmp	r0, #0
    ae8a:	d109      	bne.n	aea0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x20c>
    ae8c:	4805      	ldr	r0, [pc, #20]	; (aea4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x210>)
    ae8e:	88a1      	ldrh	r1, [r4, #4]
    ae90:	8081      	strh	r1, [r0, #4]
    ae92:	8821      	ldrh	r1, [r4, #0]
    ae94:	8001      	strh	r1, [r0, #0]
    ae96:	88e1      	ldrh	r1, [r4, #6]
    ae98:	80c1      	strh	r1, [r0, #6]
    ae9a:	8861      	ldrh	r1, [r4, #2]
    ae9c:	8041      	strh	r1, [r0, #2]
    ae9e:	2000      	movs	r0, #0
    aea0:	bd10      	pop	{r4, pc}
    aea2:	0000      	.short	0x0000
    aea4:	20000206 	.word	0x20000206
    aea8:	0b12fe0b 	.word	0x0b12fe0b
    aeac:	12fe0059 	.word	0x12fe0059
    aeb0:	05060708 	.word	0x05060708
    aeb4:	00020304 	.word	0x00020304
    aeb8:	f0f4f8fc 	.word	0xf0f4f8fc
    aebc:	0304d8ec 	.word	0x0304d8ec
    aec0:	f4f8fc00 	.word	0xf4f8fc00
    aec4:	00d8ecf0 	.word	0x00d8ecf0

0000aec8 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    aec8:	b510      	push	{r4, lr}
    aeca:	460c      	mov	r4, r1
    aecc:	f7fb f872 	bl	5fb4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    aed0:	4805      	ldr	r0, [pc, #20]	; (aee8 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
    aed2:	6004      	str	r4, [r0, #0]
    aed4:	6840      	ldr	r0, [r0, #4]
    aed6:	f004 fc8f 	bl	f7f8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    aeda:	f004 f985 	bl	f1e8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    aede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aee2:	f7fb ba81 	b.w	63e8 <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA>
    aee6:	0000      	.short	0x0000
    aee8:	20000210 	.word	0x20000210

0000aeec <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    aeec:	b510      	push	{r4, lr}
    aeee:	4c07      	ldr	r4, [pc, #28]	; (af0c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    aef0:	68a0      	ldr	r0, [r4, #8]
    aef2:	f004 fc81 	bl	f7f8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    aef6:	68e0      	ldr	r0, [r4, #12]
    aef8:	f004 fc7e 	bl	f7f8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    aefc:	f002 fc49 	bl	d792 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    af00:	f7fa fbd4 	bl	56ac <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    af04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    af08:	f7ff bec4 	b.w	ac94 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    af0c:	20000210 	.word	0x20000210

0000af10 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>:
    af10:	b500      	push	{lr}
    af12:	4905      	ldr	r1, [pc, #20]	; (af28 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x18>)
    af14:	4805      	ldr	r0, [pc, #20]	; (af2c <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    af16:	f004 fc62 	bl	f7de <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    af1a:	4804      	ldr	r0, [pc, #16]	; (af2c <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    af1c:	4904      	ldr	r1, [pc, #16]	; (af30 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x20>)
    af1e:	1d00      	adds	r0, r0, #4
    af20:	f85d eb04 	ldr.w	lr, [sp], #4
    af24:	f004 bc5b 	b.w	f7de <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    af28:	20000238 	.word	0x20000238
    af2c:	20000214 	.word	0x20000214
    af30:	20000240 	.word	0x20000240

0000af34 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>:
    af34:	b500      	push	{lr}
    af36:	4908      	ldr	r1, [pc, #32]	; (af58 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x24>)
    af38:	4808      	ldr	r0, [pc, #32]	; (af5c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    af3a:	f004 fc50 	bl	f7de <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    af3e:	4807      	ldr	r0, [pc, #28]	; (af5c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    af40:	4907      	ldr	r1, [pc, #28]	; (af60 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x2c>)
    af42:	1d00      	adds	r0, r0, #4
    af44:	f004 fc4b 	bl	f7de <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    af48:	4804      	ldr	r0, [pc, #16]	; (af5c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    af4a:	4906      	ldr	r1, [pc, #24]	; (af64 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x30>)
    af4c:	3008      	adds	r0, #8
    af4e:	f85d eb04 	ldr.w	lr, [sp], #4
    af52:	f004 bc44 	b.w	f7de <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    af56:	0000      	.short	0x0000
    af58:	20000228 	.word	0x20000228
    af5c:	20000214 	.word	0x20000214
    af60:	20000230 	.word	0x20000230
    af64:	20000220 	.word	0x20000220
    af68:	b510      	push	{r4, lr}
    af6a:	f002 fc00 	bl	d76e <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    af6e:	4806      	ldr	r0, [pc, #24]	; (af88 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x54>)
    af70:	f7f9 fdb2 	bl	4ad8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    af74:	2000      	movs	r0, #0
    af76:	f7f9 f8b9 	bl	40ec <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    af7a:	f7fd fdb1 	bl	8ae0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>
    af7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    af82:	f7fb b831 	b.w	5fe8 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>
    af86:	0000      	.short	0x0000
    af88:	200013e5 	.word	0x200013e5
    af8c:	b510      	push	{r4, lr}
    af8e:	f7fb fba7 	bl	66e0 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>
    af92:	f7ff fb47 	bl	a624 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    af96:	f7fc fd7f 	bl	7a98 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>
    af9a:	4803      	ldr	r0, [pc, #12]	; (afa8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x74>)
    af9c:	f7fb fb3c 	bl	6618 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    afa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    afa4:	f7fb b830 	b.w	6008 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q>
    afa8:	200013e5 	.word	0x200013e5

0000afac <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    afac:	2101      	movs	r1, #1
    afae:	4081      	lsls	r1, r0
    afb0:	4802      	ldr	r0, [pc, #8]	; (afbc <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    afb2:	6802      	ldr	r2, [r0, #0]
    afb4:	4311      	orrs	r1, r2
    afb6:	6001      	str	r1, [r0, #0]
    afb8:	4770      	bx	lr
    afba:	0000      	.short	0x0000
    afbc:	20000248 	.word	0x20000248

0000afc0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    afc0:	4801      	ldr	r0, [pc, #4]	; (afc8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    afc2:	6800      	ldr	r0, [r0, #0]
    afc4:	4770      	bx	lr
    afc6:	0000      	.short	0x0000
    afc8:	20000248 	.word	0x20000248

0000afcc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    afcc:	4803      	ldr	r0, [pc, #12]	; (afdc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    afce:	8800      	ldrh	r0, [r0, #0]
    afd0:	f3c0 2000 	ubfx	r0, r0, #8, #1
    afd4:	0040      	lsls	r0, r0, #1
    afd6:	1c40      	adds	r0, r0, #1
    afd8:	4770      	bx	lr
    afda:	0000      	.short	0x0000
    afdc:	20000248 	.word	0x20000248

0000afe0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    afe0:	b510      	push	{r4, lr}
    afe2:	f7f8 fb01 	bl	35e8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    afe6:	2200      	movs	r2, #0
    afe8:	4b08      	ldr	r3, [pc, #32]	; (b00c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    afea:	4611      	mov	r1, r2
    afec:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    aff0:	4284      	cmp	r4, r0
    aff2:	d303      	bcc.n	affc <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    aff4:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    aff8:	7882      	ldrb	r2, [r0, #2]
    affa:	e003      	b.n	b004 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    affc:	1c49      	adds	r1, r1, #1
    affe:	b2c9      	uxtb	r1, r1
    b000:	290c      	cmp	r1, #12
    b002:	d3f3      	bcc.n	afec <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    b004:	4802      	ldr	r0, [pc, #8]	; (b010 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    b006:	7002      	strb	r2, [r0, #0]
    b008:	bd10      	pop	{r4, pc}
    b00a:	0000      	.short	0x0000
    b00c:	0000f864 	.word	0x0000f864
    b010:	2000029d 	.word	0x2000029d

0000b014 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    b014:	4801      	ldr	r0, [pc, #4]	; (b01c <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0x8>)
    b016:	7800      	ldrb	r0, [r0, #0]
    b018:	4770      	bx	lr
    b01a:	0000      	.short	0x0000
    b01c:	2000029d 	.word	0x2000029d

0000b020 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    b020:	b570      	push	{r4, r5, r6, lr}
    b022:	4605      	mov	r5, r0
    b024:	4616      	mov	r6, r2
    b026:	460c      	mov	r4, r1
    b028:	2002      	movs	r0, #2
    b02a:	f000 f9f9 	bl	b420 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b02e:	4906      	ldr	r1, [pc, #24]	; (b048 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    b030:	2001      	movs	r0, #1
    b032:	1ef6      	subs	r6, r6, #3
    b034:	7008      	strb	r0, [r1, #0]
    b036:	4805      	ldr	r0, [pc, #20]	; (b04c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b038:	6006      	str	r6, [r0, #0]
    b03a:	4804      	ldr	r0, [pc, #16]	; (b04c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b03c:	3808      	subs	r0, #8
    b03e:	6005      	str	r5, [r0, #0]
    b040:	1f00      	subs	r0, r0, #4
    b042:	6004      	str	r4, [r0, #0]
    b044:	bd70      	pop	{r4, r5, r6, pc}
    b046:	0000      	.short	0x0000
    b048:	2000029e 	.word	0x2000029e
    b04c:	4000f510 	.word	0x4000f510

0000b050 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    b050:	b510      	push	{r4, lr}
    b052:	4c0c      	ldr	r4, [pc, #48]	; (b084 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    b054:	7820      	ldrb	r0, [r4, #0]
    b056:	b180      	cbz	r0, b07a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    b058:	490b      	ldr	r1, [pc, #44]	; (b088 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    b05a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b05e:	6008      	str	r0, [r1, #0]
    b060:	f000 f86a 	bl	b138 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b064:	2100      	movs	r1, #0
    b066:	b120      	cbz	r0, b072 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    b068:	2001      	movs	r0, #1
    b06a:	7060      	strb	r0, [r4, #1]
    b06c:	4807      	ldr	r0, [pc, #28]	; (b08c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    b06e:	6800      	ldr	r0, [r0, #0]
    b070:	e001      	b.n	b076 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    b072:	7061      	strb	r1, [r4, #1]
    b074:	2010      	movs	r0, #16
    b076:	70a0      	strb	r0, [r4, #2]
    b078:	7021      	strb	r1, [r4, #0]
    b07a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b07e:	2000      	movs	r0, #0
    b080:	f000 b9ce 	b.w	b420 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b084:	2000029e 	.word	0x2000029e
    b088:	4001f508 	.word	0x4001f508
    b08c:	4000f400 	.word	0x4000f400

0000b090 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    b090:	b510      	push	{r4, lr}
    b092:	2002      	movs	r0, #2
    b094:	f000 f9c4 	bl	b420 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b098:	4904      	ldr	r1, [pc, #16]	; (b0ac <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    b09a:	2001      	movs	r0, #1
    b09c:	7008      	strb	r0, [r1, #0]
    b09e:	f000 f859 	bl	b154 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    b0a2:	4903      	ldr	r1, [pc, #12]	; (b0b0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    b0a4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b0a8:	6008      	str	r0, [r1, #0]
    b0aa:	bd10      	pop	{r4, pc}
    b0ac:	2000029e 	.word	0x2000029e
    b0b0:	4001f504 	.word	0x4001f504

0000b0b4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    b0b4:	4803      	ldr	r0, [pc, #12]	; (b0c4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    b0b6:	2100      	movs	r1, #0
    b0b8:	7001      	strb	r1, [r0, #0]
    b0ba:	7041      	strb	r1, [r0, #1]
    b0bc:	2110      	movs	r1, #16
    b0be:	7081      	strb	r1, [r0, #2]
    b0c0:	4770      	bx	lr
    b0c2:	0000      	.short	0x0000
    b0c4:	2000029e 	.word	0x2000029e

0000b0c8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    b0c8:	4807      	ldr	r0, [pc, #28]	; (b0e8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    b0ca:	b510      	push	{r4, lr}
    b0cc:	7801      	ldrb	r1, [r0, #0]
    b0ce:	b141      	cbz	r1, b0e2 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    b0d0:	f000 f832 	bl	b138 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b0d4:	b118      	cbz	r0, b0de <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    b0d6:	4805      	ldr	r0, [pc, #20]	; (b0ec <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    b0d8:	6800      	ldr	r0, [r0, #0]
    b0da:	b2c0      	uxtb	r0, r0
    b0dc:	bd10      	pop	{r4, pc}
    b0de:	2010      	movs	r0, #16
    b0e0:	bd10      	pop	{r4, pc}
    b0e2:	7880      	ldrb	r0, [r0, #2]
    b0e4:	bd10      	pop	{r4, pc}
    b0e6:	0000      	.short	0x0000
    b0e8:	2000029e 	.word	0x2000029e
    b0ec:	4000f400 	.word	0x4000f400

0000b0f0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    b0f0:	4808      	ldr	r0, [pc, #32]	; (b114 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    b0f2:	b510      	push	{r4, lr}
    b0f4:	7801      	ldrb	r1, [r0, #0]
    b0f6:	b159      	cbz	r1, b110 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    b0f8:	4807      	ldr	r0, [pc, #28]	; (b118 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    b0fa:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b0fe:	b128      	cbz	r0, b10c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    b100:	f000 f80c 	bl	b11c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b104:	2800      	cmp	r0, #0
    b106:	d000      	beq.n	b10a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    b108:	2001      	movs	r0, #1
    b10a:	bd10      	pop	{r4, pc}
    b10c:	2002      	movs	r0, #2
    b10e:	bd10      	pop	{r4, pc}
    b110:	7840      	ldrb	r0, [r0, #1]
    b112:	bd10      	pop	{r4, pc}
    b114:	2000029e 	.word	0x2000029e
    b118:	4000f000 	.word	0x4000f000
    b11c:	4805      	ldr	r0, [pc, #20]	; (b134 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    b11e:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    b122:	b111      	cbz	r1, b12a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    b124:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    b128:	b108      	cbz	r0, b12e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    b12a:	2000      	movs	r0, #0
    b12c:	4770      	bx	lr
    b12e:	2001      	movs	r0, #1
    b130:	4770      	bx	lr
    b132:	0000      	.short	0x0000
    b134:	4000f000 	.word	0x4000f000
    b138:	4805      	ldr	r0, [pc, #20]	; (b150 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    b13a:	b510      	push	{r4, lr}
    b13c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b140:	b120      	cbz	r0, b14c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b142:	f7ff ffeb 	bl	b11c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b146:	b108      	cbz	r0, b14c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b148:	2001      	movs	r0, #1
    b14a:	bd10      	pop	{r4, pc}
    b14c:	2000      	movs	r0, #0
    b14e:	bd10      	pop	{r4, pc}
    b150:	4000f000 	.word	0x4000f000
    b154:	4804      	ldr	r0, [pc, #16]	; (b168 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    b156:	2100      	movs	r1, #0
    b158:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b15c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b160:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    b164:	4770      	bx	lr
    b166:	0000      	.short	0x0000
    b168:	4000f000 	.word	0x4000f000

0000b16c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    b16c:	4a08      	ldr	r2, [pc, #32]	; (b190 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    b16e:	b510      	push	{r4, lr}
    b170:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b174:	4907      	ldr	r1, [pc, #28]	; (b194 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    b176:	4610      	mov	r0, r2
    b178:	f7f8 fc8c 	bl	3a94 <mpsl_fem_lna_configuration_set>
    b17c:	2800      	cmp	r0, #0
    b17e:	d005      	beq.n	b18c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b180:	1c40      	adds	r0, r0, #1
    b182:	d003      	beq.n	b18c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b184:	217d      	movs	r1, #125	; 0x7d
    b186:	2040      	movs	r0, #64	; 0x40
    b188:	f7f8 fde8 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b18c:	bd10      	pop	{r4, pc}
    b18e:	0000      	.short	0x0000
    b190:	2000024c 	.word	0x2000024c
    b194:	0000b1c4 	.word	0x0000b1c4

0000b198 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    b198:	4a08      	ldr	r2, [pc, #32]	; (b1bc <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    b19a:	b510      	push	{r4, lr}
    b19c:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b1a0:	4907      	ldr	r1, [pc, #28]	; (b1c0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    b1a2:	4610      	mov	r0, r2
    b1a4:	f7f8 fc82 	bl	3aac <mpsl_fem_pa_configuration_set>
    b1a8:	2800      	cmp	r0, #0
    b1aa:	d005      	beq.n	b1b8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b1ac:	1c40      	adds	r0, r0, #1
    b1ae:	d003      	beq.n	b1b8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b1b0:	2172      	movs	r1, #114	; 0x72
    b1b2:	2040      	movs	r0, #64	; 0x40
    b1b4:	f7f8 fdd2 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1b8:	bd10      	pop	{r4, pc}
    b1ba:	0000      	.short	0x0000
    b1bc:	2000024c 	.word	0x2000024c
    b1c0:	0000b1c4 	.word	0x0000b1c4
    b1c4:	00000001 	.word	0x00000001
    b1c8:	40001110 	.word	0x40001110
	...

0000b1dc <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
    b1dc:	4a07      	ldr	r2, [pc, #28]	; (b1fc <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
    b1de:	b510      	push	{r4, lr}
    b1e0:	7853      	ldrb	r3, [r2, #1]
    b1e2:	b133      	cbz	r3, b1f2 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
    b1e4:	4b06      	ldr	r3, [pc, #24]	; (b200 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
    b1e6:	6019      	str	r1, [r3, #0]
    b1e8:	1d19      	adds	r1, r3, #4
    b1ea:	6008      	str	r0, [r1, #0]
    b1ec:	2001      	movs	r0, #1
    b1ee:	7090      	strb	r0, [r2, #2]
    b1f0:	bd10      	pop	{r4, pc}
    b1f2:	21ba      	movs	r1, #186	; 0xba
    b1f4:	203c      	movs	r0, #60	; 0x3c
    b1f6:	f7f8 fdb1 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1fa:	0000      	.short	0x0000
    b1fc:	200002a1 	.word	0x200002a1
    b200:	4000f50c 	.word	0x4000f50c

0000b204 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
    b204:	4809      	ldr	r0, [pc, #36]	; (b22c <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x28>)
    b206:	b510      	push	{r4, lr}
    b208:	7801      	ldrb	r1, [r0, #0]
    b20a:	b151      	cbz	r1, b222 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    b20c:	7880      	ldrb	r0, [r0, #2]
    b20e:	b140      	cbz	r0, b222 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    b210:	4907      	ldr	r1, [pc, #28]	; (b230 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x2c>)
    b212:	2000      	movs	r0, #0
    b214:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    b218:	4906      	ldr	r1, [pc, #24]	; (b234 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x30>)
    b21a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    b21e:	6008      	str	r0, [r1, #0]
    b220:	bd10      	pop	{r4, pc}
    b222:	21e1      	movs	r1, #225	; 0xe1
    b224:	203c      	movs	r0, #60	; 0x3c
    b226:	f7f8 fd99 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b22a:	0000      	.short	0x0000
    b22c:	200002a1 	.word	0x200002a1
    b230:	4000f000 	.word	0x4000f000
    b234:	4001f504 	.word	0x4001f504

0000b238 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    b238:	b570      	push	{r4, r5, r6, lr}
    b23a:	4c0b      	ldr	r4, [pc, #44]	; (b268 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    b23c:	2500      	movs	r5, #0
    b23e:	7820      	ldrb	r0, [r4, #0]
    b240:	b158      	cbz	r0, b25a <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    b242:	f000 f8e5 	bl	b410 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b246:	4809      	ldr	r0, [pc, #36]	; (b26c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    b248:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    b24c:	b118      	cbz	r0, b256 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1e>
    b24e:	4808      	ldr	r0, [pc, #32]	; (b270 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    b250:	6800      	ldr	r0, [r0, #0]
    b252:	70e0      	strb	r0, [r4, #3]
    b254:	e000      	b.n	b258 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    b256:	70e5      	strb	r5, [r4, #3]
    b258:	7025      	strb	r5, [r4, #0]
    b25a:	2000      	movs	r0, #0
    b25c:	f000 f8e0 	bl	b420 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b260:	7065      	strb	r5, [r4, #1]
    b262:	70a5      	strb	r5, [r4, #2]
    b264:	bd70      	pop	{r4, r5, r6, pc}
    b266:	0000      	.short	0x0000
    b268:	200002a1 	.word	0x200002a1
    b26c:	4000f000 	.word	0x4000f000
    b270:	4000f400 	.word	0x4000f400

0000b274 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
    b274:	480d      	ldr	r0, [pc, #52]	; (b2ac <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>)
    b276:	b510      	push	{r4, lr}
    b278:	7801      	ldrb	r1, [r0, #0]
    b27a:	b191      	cbz	r1, b2a2 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    b27c:	7880      	ldrb	r0, [r0, #2]
    b27e:	b180      	cbz	r0, b2a2 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    b280:	490b      	ldr	r1, [pc, #44]	; (b2b0 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x3c>)
    b282:	2000      	movs	r0, #0
    b284:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    b288:	4a0a      	ldr	r2, [pc, #40]	; (b2b4 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    b28a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    b28e:	6010      	str	r0, [r2, #0]
    b290:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    b294:	2a01      	cmp	r2, #1
    b296:	d103      	bne.n	b2a0 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2c>
    b298:	604a      	str	r2, [r1, #4]
    b29a:	4906      	ldr	r1, [pc, #24]	; (b2b4 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    b29c:	1d09      	adds	r1, r1, #4
    b29e:	6008      	str	r0, [r1, #0]
    b2a0:	bd10      	pop	{r4, pc}
    b2a2:	21d1      	movs	r1, #209	; 0xd1
    b2a4:	203c      	movs	r0, #60	; 0x3c
    b2a6:	f7f8 fd59 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2aa:	0000      	.short	0x0000
    b2ac:	200002a1 	.word	0x200002a1
    b2b0:	4000f000 	.word	0x4000f000
    b2b4:	4001f504 	.word	0x4001f504

0000b2b8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    b2b8:	4803      	ldr	r0, [pc, #12]	; (b2c8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
    b2ba:	2100      	movs	r1, #0
    b2bc:	7001      	strb	r1, [r0, #0]
    b2be:	7041      	strb	r1, [r0, #1]
    b2c0:	7081      	strb	r1, [r0, #2]
    b2c2:	70c1      	strb	r1, [r0, #3]
    b2c4:	4770      	bx	lr
    b2c6:	0000      	.short	0x0000
    b2c8:	200002a1 	.word	0x200002a1

0000b2cc <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
    b2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b2d0:	4605      	mov	r5, r0
    b2d2:	461c      	mov	r4, r3
    b2d4:	4690      	mov	r8, r2
    b2d6:	460f      	mov	r7, r1
    b2d8:	2001      	movs	r0, #1
    b2da:	f000 f8a1 	bl	b420 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b2de:	4e12      	ldr	r6, [pc, #72]	; (b328 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x5c>)
    b2e0:	4812      	ldr	r0, [pc, #72]	; (b32c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b2e2:	7134      	strb	r4, [r6, #4]
    b2e4:	6007      	str	r7, [r0, #0]
    b2e6:	4911      	ldr	r1, [pc, #68]	; (b32c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b2e8:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
    b2ec:	1f09      	subs	r1, r1, #4
    b2ee:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    b2f2:	6008      	str	r0, [r1, #0]
    b2f4:	f001 f8de 	bl	c4b4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b2f8:	b938      	cbnz	r0, b30a <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3e>
    b2fa:	480c      	ldr	r0, [pc, #48]	; (b32c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b2fc:	3010      	adds	r0, #16
    b2fe:	6801      	ldr	r1, [r0, #0]
    b300:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    b304:	ea41 0108 	orr.w	r1, r1, r8
    b308:	6001      	str	r1, [r0, #0]
    b30a:	f000 f881 	bl	b410 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b30e:	b93d      	cbnz	r5, b320 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x54>
    b310:	4808      	ldr	r0, [pc, #32]	; (b334 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
    b312:	4a07      	ldr	r2, [pc, #28]	; (b330 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    b314:	4906      	ldr	r1, [pc, #24]	; (b330 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    b316:	3afc      	subs	r2, #252	; 0xfc
    b318:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b31c:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    b320:	2001      	movs	r0, #1
    b322:	7070      	strb	r0, [r6, #1]
    b324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b328:	200002a1 	.word	0x200002a1
    b32c:	4000f508 	.word	0x4000f508
    b330:	4000f100 	.word	0x4000f100
    b334:	4001f088 	.word	0x4001f088

0000b338 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
    b338:	4808      	ldr	r0, [pc, #32]	; (b35c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
    b33a:	b510      	push	{r4, lr}
    b33c:	7841      	ldrb	r1, [r0, #1]
    b33e:	b149      	cbz	r1, b354 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
    b340:	2101      	movs	r1, #1
    b342:	7001      	strb	r1, [r0, #0]
    b344:	4806      	ldr	r0, [pc, #24]	; (b360 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
    b346:	2200      	movs	r2, #0
    b348:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    b34c:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    b350:	6001      	str	r1, [r0, #0]
    b352:	bd10      	pop	{r4, pc}
    b354:	21c5      	movs	r1, #197	; 0xc5
    b356:	203c      	movs	r0, #60	; 0x3c
    b358:	f7f8 fd00 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b35c:	200002a1 	.word	0x200002a1
    b360:	4000f000 	.word	0x4000f000

0000b364 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    b364:	4806      	ldr	r0, [pc, #24]	; (b380 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    b366:	7801      	ldrb	r1, [r0, #0]
    b368:	b141      	cbz	r1, b37c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    b36a:	4806      	ldr	r0, [pc, #24]	; (b384 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    b36c:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    b370:	2800      	cmp	r0, #0
    b372:	d002      	beq.n	b37a <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    b374:	4804      	ldr	r0, [pc, #16]	; (b388 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    b376:	6800      	ldr	r0, [r0, #0]
    b378:	b2c0      	uxtb	r0, r0
    b37a:	4770      	bx	lr
    b37c:	78c0      	ldrb	r0, [r0, #3]
    b37e:	4770      	bx	lr
    b380:	200002a1 	.word	0x200002a1
    b384:	4000f000 	.word	0x4000f000
    b388:	4000f400 	.word	0x4000f400

0000b38c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    b38c:	4901      	ldr	r1, [pc, #4]	; (b394 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    b38e:	2001      	movs	r0, #1
    b390:	6088      	str	r0, [r1, #8]
    b392:	4770      	bx	lr
    b394:	4000f000 	.word	0x4000f000

0000b398 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    b398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b39c:	2800      	cmp	r0, #0
    b39e:	d02e      	beq.n	b3fe <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    b3a0:	4818      	ldr	r0, [pc, #96]	; (b404 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    b3a2:	7800      	ldrb	r0, [r0, #0]
    b3a4:	b1b0      	cbz	r0, b3d4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    b3a6:	4d18      	ldr	r5, [pc, #96]	; (b408 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    b3a8:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b3ac:	2800      	cmp	r0, #0
    b3ae:	d126      	bne.n	b3fe <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    b3b0:	2702      	movs	r7, #2
    b3b2:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    b3b6:	4c15      	ldr	r4, [pc, #84]	; (b40c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    b3b8:	6820      	ldr	r0, [r4, #0]
    b3ba:	43c0      	mvns	r0, r0
    b3bc:	f340 1600 	sbfx	r6, r0, #4, #1
    b3c0:	6820      	ldr	r0, [r4, #0]
    b3c2:	f040 0010 	orr.w	r0, r0, #16
    b3c6:	6020      	str	r0, [r4, #0]
    b3c8:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    b3cc:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b3d0:	1c76      	adds	r6, r6, #1
    b3d2:	e009      	b.n	b3e8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x50>
    b3d4:	f240 1153 	movw	r1, #339	; 0x153
    b3d8:	203c      	movs	r0, #60	; 0x3c
    b3da:	f7f8 fcbf 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b3de:	bf00      	nop
    b3e0:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    b3e4:	f7f8 fb00 	bl	39e8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    b3e8:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b3ec:	2800      	cmp	r0, #0
    b3ee:	d0f7      	beq.n	b3e0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x48>
    b3f0:	b91e      	cbnz	r6, b3fa <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    b3f2:	6820      	ldr	r0, [r4, #0]
    b3f4:	f020 0010 	bic.w	r0, r0, #16
    b3f8:	6020      	str	r0, [r4, #0]
    b3fa:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    b3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b402:	0000      	.short	0x0000
    b404:	200002a1 	.word	0x200002a1
    b408:	4000f000 	.word	0x4000f000
    b40c:	e000ed10 	.word	0xe000ed10
    b410:	4902      	ldr	r1, [pc, #8]	; (b41c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
    b412:	4801      	ldr	r0, [pc, #4]	; (b418 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    b414:	6008      	str	r0, [r1, #0]
    b416:	4770      	bx	lr
    b418:	02020000 	.word	0x02020000
    b41c:	4001f508 	.word	0x4001f508

0000b420 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    b420:	b510      	push	{r4, lr}
    b422:	4604      	mov	r4, r0
    b424:	f000 f822 	bl	b46c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    b428:	2c00      	cmp	r4, #0
    b42a:	d017      	beq.n	b45c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    b42c:	4a0c      	ldr	r2, [pc, #48]	; (b460 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b42e:	480c      	ldr	r0, [pc, #48]	; (b460 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b430:	490c      	ldr	r1, [pc, #48]	; (b464 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    b432:	3214      	adds	r2, #20
    b434:	4b0c      	ldr	r3, [pc, #48]	; (b468 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    b436:	2c01      	cmp	r4, #1
    b438:	d005      	beq.n	b446 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    b43a:	2c02      	cmp	r4, #2
    b43c:	d008      	beq.n	b450 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    b43e:	2183      	movs	r1, #131	; 0x83
    b440:	203d      	movs	r0, #61	; 0x3d
    b442:	f7f8 fc8b 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b446:	2402      	movs	r4, #2
    b448:	6004      	str	r4, [r0, #0]
    b44a:	6011      	str	r1, [r2, #0]
    b44c:	0620      	lsls	r0, r4, #24
    b44e:	e004      	b.n	b45a <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    b450:	2403      	movs	r4, #3
    b452:	6004      	str	r4, [r0, #0]
    b454:	6011      	str	r1, [r2, #0]
    b456:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b45a:	6018      	str	r0, [r3, #0]
    b45c:	bd10      	pop	{r4, pc}
    b45e:	0000      	.short	0x0000
    b460:	4000f500 	.word	0x4000f500
    b464:	200014e7 	.word	0x200014e7
    b468:	4001f504 	.word	0x4001f504
    b46c:	4804      	ldr	r0, [pc, #16]	; (b480 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    b46e:	2100      	movs	r1, #0
    b470:	6001      	str	r1, [r0, #0]
    b472:	6001      	str	r1, [r0, #0]
    b474:	4903      	ldr	r1, [pc, #12]	; (b484 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    b476:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    b47a:	6008      	str	r0, [r1, #0]
    b47c:	4770      	bx	lr
    b47e:	0000      	.short	0x0000
    b480:	4000f500 	.word	0x4000f500
    b484:	4001f508 	.word	0x4001f508

0000b488 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    b488:	4805      	ldr	r0, [pc, #20]	; (b4a0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    b48a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b48e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    b492:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b496:	2100      	movs	r1, #0
    b498:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    b49c:	4770      	bx	lr
    b49e:	0000      	.short	0x0000
    b4a0:	40001000 	.word	0x40001000

0000b4a4 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    b4a4:	4904      	ldr	r1, [pc, #16]	; (b4b8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    b4a6:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    b4aa:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    b4ae:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    b4b2:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    b4b6:	4770      	bx	lr
    b4b8:	40001000 	.word	0x40001000

0000b4bc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    b4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b4be:	4c23      	ldr	r4, [pc, #140]	; (b54c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>)
    b4c0:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b4c4:	f010 0f10 	tst.w	r0, #16
    b4c8:	d001      	beq.n	b4ce <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    b4ca:	2701      	movs	r7, #1
    b4cc:	e000      	b.n	b4d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    b4ce:	2700      	movs	r7, #0
    b4d0:	2010      	movs	r0, #16
    b4d2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    b4d6:	2002      	movs	r0, #2
    b4d8:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    b4dc:	481c      	ldr	r0, [pc, #112]	; (b550 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    b4de:	2500      	movs	r5, #0
    b4e0:	491d      	ldr	r1, [pc, #116]	; (b558 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    b4e2:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    b4e6:	481b      	ldr	r0, [pc, #108]	; (b554 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    b4e8:	6008      	str	r0, [r1, #0]
    b4ea:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    b4ee:	f44f 7688 	mov.w	r6, #272	; 0x110
    b4f2:	f010 0fff 	tst.w	r0, #255	; 0xff
    b4f6:	d018      	beq.n	b52a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    b4f8:	20ff      	movs	r0, #255	; 0xff
    b4fa:	f88d 0000 	strb.w	r0, [sp]
    b4fe:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b502:	2001      	movs	r0, #1
    b504:	6120      	str	r0, [r4, #16]
    b506:	e004      	b.n	b512 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x56>
    b508:	f89d 0000 	ldrb.w	r0, [sp]
    b50c:	1e40      	subs	r0, r0, #1
    b50e:	f88d 0000 	strb.w	r0, [sp]
    b512:	f89d 0000 	ldrb.w	r0, [sp]
    b516:	b128      	cbz	r0, b524 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x68>
    b518:	4631      	mov	r1, r6
    b51a:	4620      	mov	r0, r4
    b51c:	f004 fa71 	bl	fa02 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    b520:	2800      	cmp	r0, #0
    b522:	d0f1      	beq.n	b508 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4c>
    b524:	f89d 0000 	ldrb.w	r0, [sp]
    b528:	b158      	cbz	r0, b542 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x86>
    b52a:	f000 fc91 	bl	be50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    b52e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b532:	f000 fe0d 	bl	c150 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    b536:	2f00      	cmp	r7, #0
    b538:	d002      	beq.n	b540 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
    b53a:	2010      	movs	r0, #16
    b53c:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    b540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b542:	f240 718f 	movw	r1, #1935	; 0x78f
    b546:	203e      	movs	r0, #62	; 0x3e
    b548:	f7f8 fc08 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b54c:	40001000 	.word	0x40001000
    b550:	200011a4 	.word	0x200011a4
    b554:	0c0e0000 	.word	0x0c0e0000
    b558:	4001f508 	.word	0x4001f508

0000b55c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    b55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b560:	4d20      	ldr	r5, [pc, #128]	; (b5e4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    b562:	4607      	mov	r7, r0
    b564:	4688      	mov	r8, r1
    b566:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    b56a:	07c1      	lsls	r1, r0, #31
    b56c:	d018      	beq.n	b5a0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    b56e:	4a1e      	ldr	r2, [pc, #120]	; (b5e8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    b570:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    b574:	6011      	str	r1, [r2, #0]
    b576:	4c1d      	ldr	r4, [pc, #116]	; (b5ec <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    b578:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    b57c:	f041 0101 	orr.w	r1, r1, #1
    b580:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    b584:	f040 0002 	orr.w	r0, r0, #2
    b588:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    b58c:	4640      	mov	r0, r8
    b58e:	f000 fe43 	bl	c218 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b592:	f000 fbfb 	bl	bd8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b596:	2601      	movs	r6, #1
    b598:	b13f      	cbz	r7, b5aa <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    b59a:	2f01      	cmp	r7, #1
    b59c:	d00e      	beq.n	b5bc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    b59e:	e016      	b.n	b5ce <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b5a0:	f240 611a 	movw	r1, #1562	; 0x61a
    b5a4:	203e      	movs	r0, #62	; 0x3e
    b5a6:	f7f8 fbd9 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5aa:	4640      	mov	r0, r8
    b5ac:	f000 fc1e 	bl	bdec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    b5b0:	4640      	mov	r0, r8
    b5b2:	f000 fbcf 	bl	bd54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b5b6:	726e      	strb	r6, [r5, #9]
    b5b8:	6026      	str	r6, [r4, #0]
    b5ba:	e008      	b.n	b5ce <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b5bc:	f000 fc3e 	bl	be3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b5c0:	f000 fd8c 	bl	c0dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    b5c4:	2002      	movs	r0, #2
    b5c6:	7268      	strb	r0, [r5, #9]
    b5c8:	f000 fcb0 	bl	bf2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    b5cc:	6066      	str	r6, [r4, #4]
    b5ce:	4808      	ldr	r0, [pc, #32]	; (b5f0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    b5d0:	64c6      	str	r6, [r0, #76]	; 0x4c
    b5d2:	4807      	ldr	r0, [pc, #28]	; (b5f0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    b5d4:	300c      	adds	r0, #12
    b5d6:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    b5da:	4638      	mov	r0, r7
    b5dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b5e0:	f004 b9f7 	b.w	f9d2 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b5e4:	200011a4 	.word	0x200011a4
    b5e8:	4001f504 	.word	0x4001f504
    b5ec:	40001000 	.word	0x40001000
    b5f0:	40008000 	.word	0x40008000

0000b5f4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    b5f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b5f8:	4d35      	ldr	r5, [pc, #212]	; (b6d0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    b5fa:	4606      	mov	r6, r0
    b5fc:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b600:	4689      	mov	r9, r1
    b602:	6028      	str	r0, [r5, #0]
    b604:	4c33      	ldr	r4, [pc, #204]	; (b6d4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    b606:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    b60a:	f040 0002 	orr.w	r0, r0, #2
    b60e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    b612:	4608      	mov	r0, r1
    b614:	f000 fe00 	bl	c218 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b618:	f000 fbb8 	bl	bd8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b61c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6d8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    b620:	2700      	movs	r7, #0
    b622:	b116      	cbz	r6, b62a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    b624:	2e01      	cmp	r6, #1
    b626:	d027      	beq.n	b678 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    b628:	e03f      	b.n	b6aa <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    b62a:	4648      	mov	r0, r9
    b62c:	f000 fbde 	bl	bdec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    b630:	79e0      	ldrb	r0, [r4, #7]
    b632:	2801      	cmp	r0, #1
    b634:	d105      	bne.n	b642 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    b636:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b63a:	f041 0108 	orr.w	r1, r1, #8
    b63e:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b642:	4648      	mov	r0, r9
    b644:	f000 fb86 	bl	bd54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b648:	2001      	movs	r0, #1
    b64a:	7260      	strb	r0, [r4, #9]
    b64c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b64e:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    b652:	62a0      	str	r0, [r4, #40]	; 0x28
    b654:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b658:	6028      	str	r0, [r5, #0]
    b65a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b65e:	f1b9 0f02 	cmp.w	r9, #2
    b662:	d007      	beq.n	b674 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    b664:	f640 0034 	movw	r0, #2100	; 0x834
    b668:	f649 72ec 	movw	r2, #40940	; 0x9fec
    b66c:	4410      	add	r0, r2
    b66e:	fbb0 f7f1 	udiv	r7, r0, r1
    b672:	e01a      	b.n	b6aa <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    b674:	4608      	mov	r0, r1
    b676:	e7f7      	b.n	b668 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    b678:	f000 fbe0 	bl	be3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b67c:	f000 fd2e 	bl	c0dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    b680:	79e0      	ldrb	r0, [r4, #7]
    b682:	2801      	cmp	r0, #1
    b684:	d105      	bne.n	b692 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    b686:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b68a:	f041 0104 	orr.w	r1, r1, #4
    b68e:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b692:	2002      	movs	r0, #2
    b694:	7260      	strb	r0, [r4, #9]
    b696:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b698:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    b69c:	62a0      	str	r0, [r4, #40]	; 0x28
    b69e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    b6a2:	6028      	str	r0, [r5, #0]
    b6a4:	2729      	movs	r7, #41	; 0x29
    b6a6:	f000 fc41 	bl	bf2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    b6aa:	f000 fc2b 	bl	bf04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    b6ae:	f000 fddb 	bl	c268 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    b6b2:	6800      	ldr	r0, [r0, #0]
    b6b4:	2801      	cmp	r0, #1
    b6b6:	d006      	beq.n	b6c6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    b6b8:	2100      	movs	r1, #0
    b6ba:	4630      	mov	r0, r6
    b6bc:	f004 f989 	bl	f9d2 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b6c0:	4638      	mov	r0, r7
    b6c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b6c6:	f7ff fef9 	bl	b4bc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b6ca:	2000      	movs	r0, #0
    b6cc:	e7f9      	b.n	b6c2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    b6ce:	0000      	.short	0x0000
    b6d0:	4001f504 	.word	0x4001f504
    b6d4:	200011a4 	.word	0x200011a4
    b6d8:	40001000 	.word	0x40001000

0000b6dc <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    b6dc:	b510      	push	{r4, lr}
    b6de:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    b6e0:	4901      	ldr	r1, [pc, #4]	; (b6e8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    b6e2:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    b6e6:	bd10      	pop	{r4, pc}
    b6e8:	20001194 	.word	0x20001194

0000b6ec <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    b6ec:	b570      	push	{r4, r5, r6, lr}
    b6ee:	4c11      	ldr	r4, [pc, #68]	; (b734 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    b6f0:	4606      	mov	r6, r0
    b6f2:	2002      	movs	r0, #2
    b6f4:	7320      	strb	r0, [r4, #12]
    b6f6:	2596      	movs	r5, #150	; 0x96
    b6f8:	f000 f85e 	bl	b7b8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    b6fc:	4602      	mov	r2, r0
    b6fe:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    b702:	f894 1020 	ldrb.w	r1, [r4, #32]
    b706:	2801      	cmp	r0, #1
    b708:	d00f      	beq.n	b72a <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3e>
    b70a:	4628      	mov	r0, r5
    b70c:	f004 f983 	bl	fa16 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    b710:	6120      	str	r0, [r4, #16]
    b712:	4809      	ldr	r0, [pc, #36]	; (b738 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    b714:	2100      	movs	r1, #0
    b716:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b71a:	6921      	ldr	r1, [r4, #16]
    b71c:	69e0      	ldr	r0, [r4, #28]
    b71e:	4408      	add	r0, r1
    b720:	4905      	ldr	r1, [pc, #20]	; (b738 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    b722:	1d09      	adds	r1, r1, #4
    b724:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b728:	bd70      	pop	{r4, r5, r6, pc}
    b72a:	4633      	mov	r3, r6
    b72c:	4628      	mov	r0, r5
    b72e:	f004 f98e 	bl	fa4e <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    b732:	e7ed      	b.n	b710 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    b734:	200011a4 	.word	0x200011a4
    b738:	40008000 	.word	0x40008000

0000b73c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    b73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b740:	2238      	movs	r2, #56	; 0x38
    b742:	2100      	movs	r1, #0
    b744:	4813      	ldr	r0, [pc, #76]	; (b794 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    b746:	f000 ff81 	bl	c64c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b74a:	f000 fd01 	bl	c150 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    b74e:	f000 fe86 	bl	c45e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b752:	4d11      	ldr	r5, [pc, #68]	; (b798 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b754:	4e10      	ldr	r6, [pc, #64]	; (b798 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b756:	2400      	movs	r4, #0
    b758:	4f0f      	ldr	r7, [pc, #60]	; (b798 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b75a:	3508      	adds	r5, #8
    b75c:	3610      	adds	r6, #16
    b75e:	b928      	cbnz	r0, b76c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b760:	f000 fe94 	bl	c48c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    b764:	b910      	cbnz	r0, b76c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b766:	f000 fe9b 	bl	c4a0 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    b76a:	b108      	cbz	r0, b770 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    b76c:	2224      	movs	r2, #36	; 0x24
    b76e:	e006      	b.n	b77e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b770:	f000 fed6 	bl	c520 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    b774:	b910      	cbnz	r0, b77c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    b776:	f000 fec9 	bl	c50c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    b77a:	b140      	cbz	r0, b78e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    b77c:	2240      	movs	r2, #64	; 0x40
    b77e:	21ff      	movs	r1, #255	; 0xff
    b780:	4638      	mov	r0, r7
    b782:	f000 ff63 	bl	c64c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b786:	602c      	str	r4, [r5, #0]
    b788:	6034      	str	r4, [r6, #0]
    b78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b78e:	2238      	movs	r2, #56	; 0x38
    b790:	e7f5      	b.n	b77e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b792:	0000      	.short	0x0000
    b794:	200011a4 	.word	0x200011a4
    b798:	40000e00 	.word	0x40000e00

0000b79c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    b79c:	4805      	ldr	r0, [pc, #20]	; (b7b4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x18>)
    b79e:	b510      	push	{r4, lr}
    b7a0:	69c0      	ldr	r0, [r0, #28]
    b7a2:	2800      	cmp	r0, #0
    b7a4:	d104      	bne.n	b7b0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x14>
    b7a6:	f240 11fb 	movw	r1, #507	; 0x1fb
    b7aa:	203e      	movs	r0, #62	; 0x3e
    b7ac:	f7f8 fad6 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b7b0:	bd10      	pop	{r4, pc}
    b7b2:	0000      	.short	0x0000
    b7b4:	200011a4 	.word	0x200011a4

0000b7b8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    b7b8:	4814      	ldr	r0, [pc, #80]	; (b80c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    b7ba:	b510      	push	{r4, lr}
    b7bc:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    b7c0:	7a40      	ldrb	r0, [r0, #9]
    b7c2:	b141      	cbz	r1, b7d6 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    b7c4:	2902      	cmp	r1, #2
    b7c6:	d00b      	beq.n	b7e0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    b7c8:	2802      	cmp	r0, #2
    b7ca:	d009      	beq.n	b7e0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    b7cc:	2901      	cmp	r1, #1
    b7ce:	d00b      	beq.n	b7e8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    b7d0:	2801      	cmp	r0, #1
    b7d2:	d009      	beq.n	b7e8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    b7d4:	e016      	b.n	b804 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    b7d6:	2800      	cmp	r0, #0
    b7d8:	d1f6      	bne.n	b7c8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    b7da:	f240 117d 	movw	r1, #381	; 0x17d
    b7de:	e00e      	b.n	b7fe <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x46>
    b7e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b7e4:	f000 bc2a 	b.w	c03c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    b7e8:	4809      	ldr	r0, [pc, #36]	; (b810 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    b7ea:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    b7ee:	f000 000f 	and.w	r0, r0, #15
    b7f2:	2803      	cmp	r0, #3
    b7f4:	d006      	beq.n	b804 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    b7f6:	2804      	cmp	r0, #4
    b7f8:	d006      	beq.n	b808 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x50>
    b7fa:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    b7fe:	203e      	movs	r0, #62	; 0x3e
    b800:	f7f8 faac 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b804:	2001      	movs	r0, #1
    b806:	bd10      	pop	{r4, pc}
    b808:	2002      	movs	r0, #2
    b80a:	bd10      	pop	{r4, pc}
    b80c:	200011a4 	.word	0x200011a4
    b810:	40001000 	.word	0x40001000

0000b814 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    b814:	b510      	push	{r4, lr}
    b816:	f000 fc7d 	bl	c114 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    b81a:	f7ff fe4f 	bl	b4bc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b81e:	f004 f86e 	bl	f8fe <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    b822:	480f      	ldr	r0, [pc, #60]	; (b860 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    b824:	4a0f      	ldr	r2, [pc, #60]	; (b864 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    b826:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b828:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    b82c:	6011      	str	r1, [r2, #0]
    b82e:	2400      	movs	r4, #0
    b830:	6284      	str	r4, [r0, #40]	; 0x28
    b832:	7304      	strb	r4, [r0, #12]
    b834:	61c4      	str	r4, [r0, #28]
    b836:	6184      	str	r4, [r0, #24]
    b838:	f000 fc6c 	bl	c114 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    b83c:	480a      	ldr	r0, [pc, #40]	; (b868 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    b83e:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    b842:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    b846:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    b84a:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    b84e:	2001      	movs	r0, #1
    b850:	f004 f88e 	bl	f970 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    b854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b858:	2001      	movs	r0, #1
    b85a:	f004 b87c 	b.w	f956 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    b85e:	0000      	.short	0x0000
    b860:	200011a4 	.word	0x200011a4
    b864:	4001f508 	.word	0x4001f508
    b868:	40008000 	.word	0x40008000

0000b86c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    b86c:	b570      	push	{r4, r5, r6, lr}
    b86e:	2001      	movs	r0, #1
    b870:	f004 f87e 	bl	f970 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    b874:	4c37      	ldr	r4, [pc, #220]	; (b954 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    b876:	2000      	movs	r0, #0
    b878:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    b87c:	2001      	movs	r0, #1
    b87e:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    b882:	f000 fe23 	bl	c4cc <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b886:	4d34      	ldr	r5, [pc, #208]	; (b958 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b888:	b118      	cbz	r0, b892 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    b88a:	6828      	ldr	r0, [r5, #0]
    b88c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    b890:	6028      	str	r0, [r5, #0]
    b892:	f000 fe0f 	bl	c4b4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b896:	b128      	cbz	r0, b8a4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    b898:	6828      	ldr	r0, [r5, #0]
    b89a:	4930      	ldr	r1, [pc, #192]	; (b95c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    b89c:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    b8a0:	4308      	orrs	r0, r1
    b8a2:	6028      	str	r0, [r5, #0]
    b8a4:	f000 fe22 	bl	c4ec <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b8a8:	b138      	cbz	r0, b8ba <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    b8aa:	482b      	ldr	r0, [pc, #172]	; (b958 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b8ac:	1d00      	adds	r0, r0, #4
    b8ae:	6801      	ldr	r1, [r0, #0]
    b8b0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    b8b4:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    b8b8:	6001      	str	r1, [r0, #0]
    b8ba:	4927      	ldr	r1, [pc, #156]	; (b958 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b8bc:	4828      	ldr	r0, [pc, #160]	; (b960 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    b8be:	313c      	adds	r1, #60	; 0x3c
    b8c0:	6008      	str	r0, [r1, #0]
    b8c2:	f7f8 f8ff 	bl	3ac4 <mpsl_fem_device_config_254_apply_get>
    b8c6:	b140      	cbz	r0, b8da <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    b8c8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b8cc:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    b8d0:	1c41      	adds	r1, r0, #1
    b8d2:	d002      	beq.n	b8da <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    b8d4:	4920      	ldr	r1, [pc, #128]	; (b958 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b8d6:	3110      	adds	r1, #16
    b8d8:	6008      	str	r0, [r1, #0]
    b8da:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    b8de:	6e00      	ldr	r0, [r0, #96]	; 0x60
    b8e0:	1c41      	adds	r1, r0, #1
    b8e2:	d004      	beq.n	b8ee <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    b8e4:	491f      	ldr	r1, [pc, #124]	; (b964 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    b8e6:	680a      	ldr	r2, [r1, #0]
    b8e8:	f360 4217 	bfi	r2, r0, #16, #8
    b8ec:	600a      	str	r2, [r1, #0]
    b8ee:	f240 1103 	movw	r1, #259	; 0x103
    b8f2:	f240 605b 	movw	r0, #1627	; 0x65b
    b8f6:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    b8fa:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    b8fe:	2001      	movs	r0, #1
    b900:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    b904:	f000 fc88 	bl	c218 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b908:	f240 1001 	movw	r0, #257	; 0x101
    b90c:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    b910:	2002      	movs	r0, #2
    b912:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    b916:	4915      	ldr	r1, [pc, #84]	; (b96c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    b918:	4813      	ldr	r0, [pc, #76]	; (b968 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    b91a:	6008      	str	r0, [r1, #0]
    b91c:	4914      	ldr	r1, [pc, #80]	; (b970 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    b91e:	2000      	movs	r0, #0
    b920:	4d14      	ldr	r5, [pc, #80]	; (b974 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    b922:	8608      	strh	r0, [r1, #48]	; 0x30
    b924:	3110      	adds	r1, #16
    b926:	61c8      	str	r0, [r1, #28]
    b928:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    b92c:	7028      	strb	r0, [r5, #0]
    b92e:	2001      	movs	r0, #1
    b930:	f004 f811 	bl	f956 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    b934:	2010      	movs	r0, #16
    b936:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    b93a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b93e:	2002      	movs	r0, #2
    b940:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    b944:	6868      	ldr	r0, [r5, #4]
    b946:	2800      	cmp	r0, #0
    b948:	d002      	beq.n	b950 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    b94a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b94e:	4700      	bx	r0
    b950:	bd70      	pop	{r4, r5, r6, pc}
    b952:	0000      	.short	0x0000
    b954:	40001000 	.word	0x40001000
    b958:	4000173c 	.word	0x4000173c
    b95c:	80000096 	.word	0x80000096
    b960:	8900002c 	.word	0x8900002c
    b964:	4000158c 	.word	0x4000158c
    b968:	0c0e0000 	.word	0x0c0e0000
    b96c:	4001f508 	.word	0x4001f508
    b970:	20001194 	.word	0x20001194
    b974:	20000264 	.word	0x20000264

0000b978 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    b978:	4901      	ldr	r1, [pc, #4]	; (b980 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    b97a:	7508      	strb	r0, [r1, #20]
    b97c:	4770      	bx	lr
    b97e:	0000      	.short	0x0000
    b980:	200011a4 	.word	0x200011a4

0000b984 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    b984:	4905      	ldr	r1, [pc, #20]	; (b99c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    b986:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    b98a:	4805      	ldr	r0, [pc, #20]	; (b9a0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    b98c:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    b990:	f041 0101 	orr.w	r1, r1, #1
    b994:	7001      	strb	r1, [r0, #0]
    b996:	f000 ba7b 	b.w	be90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    b99a:	0000      	.short	0x0000
    b99c:	40001000 	.word	0x40001000
    b9a0:	200011a4 	.word	0x200011a4

0000b9a4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    b9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b9a8:	4e36      	ldr	r6, [pc, #216]	; (ba84 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    b9aa:	4607      	mov	r7, r0
    b9ac:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b9b0:	4689      	mov	r9, r1
    b9b2:	4614      	mov	r4, r2
    b9b4:	6030      	str	r0, [r6, #0]
    b9b6:	4610      	mov	r0, r2
    b9b8:	f000 fc2e 	bl	c218 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b9bc:	f000 f9e6 	bl	bd8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b9c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; ba88 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>
    b9c4:	4d31      	ldr	r5, [pc, #196]	; (ba8c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    b9c6:	f04f 0801 	mov.w	r8, #1
    b9ca:	b127      	cbz	r7, b9d6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    b9cc:	2f01      	cmp	r7, #1
    b9ce:	d01d      	beq.n	ba0c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    b9d0:	f240 710f 	movw	r1, #1807	; 0x70f
    b9d4:	e04c      	b.n	ba70 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>
    b9d6:	4620      	mov	r0, r4
    b9d8:	f000 fa08 	bl	bdec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    b9dc:	4620      	mov	r0, r4
    b9de:	f000 f9b9 	bl	bd54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b9e2:	2c02      	cmp	r4, #2
    b9e4:	d00f      	beq.n	ba06 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    b9e6:	f640 0034 	movw	r0, #2100	; 0x834
    b9ea:	bf00      	nop
    b9ec:	f649 51f8 	movw	r1, #40440	; 0x9df8
    b9f0:	4401      	add	r1, r0
    b9f2:	4648      	mov	r0, r9
    b9f4:	f000 fbb4 	bl	c160 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    b9f8:	4604      	mov	r4, r0
    b9fa:	4650      	mov	r0, sl
    b9fc:	f000 fb9c 	bl	c138 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    ba00:	f885 8009 	strb.w	r8, [r5, #9]
    ba04:	e014      	b.n	ba30 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    ba06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    ba0a:	e7ef      	b.n	b9ec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    ba0c:	f000 fa16 	bl	be3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    ba10:	f000 fb64 	bl	c0dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    ba14:	f000 fa8a 	bl	bf2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    ba18:	f649 71ba 	movw	r1, #40890	; 0x9fba
    ba1c:	4648      	mov	r0, r9
    ba1e:	f000 fb9f 	bl	c160 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    ba22:	4604      	mov	r4, r0
    ba24:	4818      	ldr	r0, [pc, #96]	; (ba88 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    ba26:	1d00      	adds	r0, r0, #4
    ba28:	f000 fb86 	bl	c138 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    ba2c:	2002      	movs	r0, #2
    ba2e:	7268      	strb	r0, [r5, #9]
    ba30:	f8df 905c 	ldr.w	r9, [pc, #92]	; ba90 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>
    ba34:	f8c9 4540 	str.w	r4, [r9, #1344]	; 0x540
    ba38:	4917      	ldr	r1, [pc, #92]	; (ba98 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    ba3a:	4816      	ldr	r0, [pc, #88]	; (ba94 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    ba3c:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    ba40:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    ba42:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    ba46:	62a8      	str	r0, [r5, #40]	; 0x28
    ba48:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    ba4c:	6030      	str	r0, [r6, #0]
    ba4e:	2010      	movs	r0, #16
    ba50:	f8ca 0304 	str.w	r0, [sl, #772]	; 0x304
    ba54:	03c0      	lsls	r0, r0, #15
    ba56:	6030      	str	r0, [r6, #0]
    ba58:	f000 fa54 	bl	bf04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    ba5c:	f8c9 804c 	str.w	r8, [r9, #76]	; 0x4c
    ba60:	480b      	ldr	r0, [pc, #44]	; (ba90 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    ba62:	300c      	adds	r0, #12
    ba64:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    ba68:	42a0      	cmp	r0, r4
    ba6a:	d304      	bcc.n	ba76 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd2>
    ba6c:	f240 7136 	movw	r1, #1846	; 0x736
    ba70:	203e      	movs	r0, #62	; 0x3e
    ba72:	f7f8 f973 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba76:	4621      	mov	r1, r4
    ba78:	4638      	mov	r0, r7
    ba7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ba7e:	f003 bfa8 	b.w	f9d2 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    ba82:	0000      	.short	0x0000
    ba84:	4001f504 	.word	0x4001f504
    ba88:	40001000 	.word	0x40001000
    ba8c:	200011a4 	.word	0x200011a4
    ba90:	40008000 	.word	0x40008000
    ba94:	40008140 	.word	0x40008140
    ba98:	4001f098 	.word	0x4001f098

0000ba9c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    ba9c:	4b0d      	ldr	r3, [pc, #52]	; (bad4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    ba9e:	b510      	push	{r4, lr}
    baa0:	71d8      	strb	r0, [r3, #7]
    baa2:	729a      	strb	r2, [r3, #10]
    baa4:	b151      	cbz	r1, babc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    baa6:	2002      	movs	r0, #2
    baa8:	7218      	strb	r0, [r3, #8]
    baaa:	2801      	cmp	r0, #1
    baac:	d008      	beq.n	bac0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    baae:	2802      	cmp	r0, #2
    bab0:	d00f      	beq.n	bad2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    bab2:	f640 1112 	movw	r1, #2322	; 0x912
    bab6:	203e      	movs	r0, #62	; 0x3e
    bab8:	f7f8 f950 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    babc:	2001      	movs	r0, #1
    babe:	e7f3      	b.n	baa8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    bac0:	7a58      	ldrb	r0, [r3, #9]
    bac2:	2802      	cmp	r0, #2
    bac4:	d105      	bne.n	bad2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    bac6:	f000 f9b9 	bl	be3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    baca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bace:	f000 bb05 	b.w	c0dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    bad2:	bd10      	pop	{r4, pc}
    bad4:	200011a4 	.word	0x200011a4

0000bad8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    bad8:	4902      	ldr	r1, [pc, #8]	; (bae4 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    bada:	2000      	movs	r0, #0
    badc:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    bae0:	4770      	bx	lr
    bae2:	0000      	.short	0x0000
    bae4:	40008000 	.word	0x40008000

0000bae8 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    bae8:	b538      	push	{r3, r4, r5, lr}
    baea:	4c0b      	ldr	r4, [pc, #44]	; (bb18 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    baec:	4605      	mov	r5, r0
    baee:	f44f 718e 	mov.w	r1, #284	; 0x11c
    baf2:	4620      	mov	r0, r4
    baf4:	f003 ff85 	bl	fa02 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    baf8:	2800      	cmp	r0, #0
    bafa:	d00c      	beq.n	bb16 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2e>
    bafc:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    bb00:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    bb04:	4240      	negs	r0, r0
    bb06:	7028      	strb	r0, [r5, #0]
    bb08:	2000      	movs	r0, #0
    bb0a:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
    bb0e:	4803      	ldr	r0, [pc, #12]	; (bb1c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    bb10:	6800      	ldr	r0, [r0, #0]
    bb12:	9000      	str	r0, [sp, #0]
    bb14:	2001      	movs	r0, #1
    bb16:	bd38      	pop	{r3, r4, r5, pc}
    bb18:	40001000 	.word	0x40001000
    bb1c:	4000111c 	.word	0x4000111c

0000bb20 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    bb20:	4903      	ldr	r1, [pc, #12]	; (bb30 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    bb22:	0e02      	lsrs	r2, r0, #24
    bb24:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    bb28:	0200      	lsls	r0, r0, #8
    bb2a:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    bb2e:	4770      	bx	lr
    bb30:	40001000 	.word	0x40001000

0000bb34 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    bb34:	6800      	ldr	r0, [r0, #0]
    bb36:	4903      	ldr	r1, [pc, #12]	; (bb44 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    bb38:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bb3c:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    bb40:	4770      	bx	lr
    bb42:	0000      	.short	0x0000
    bb44:	40001000 	.word	0x40001000

0000bb48 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    bb48:	b510      	push	{r4, lr}
    bb4a:	f000 fb41 	bl	c1d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    bb4e:	4807      	ldr	r0, [pc, #28]	; (bb6c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x24>)
    bb50:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    bb54:	b2c0      	uxtb	r0, r0
    bb56:	2803      	cmp	r0, #3
    bb58:	d001      	beq.n	bb5e <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x16>
    bb5a:	280b      	cmp	r0, #11
    bb5c:	d104      	bne.n	bb68 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>
    bb5e:	f44f 7121 	mov.w	r1, #644	; 0x284
    bb62:	203e      	movs	r0, #62	; 0x3e
    bb64:	f7f8 f8fa 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bb68:	bd10      	pop	{r4, pc}
    bb6a:	0000      	.short	0x0000
    bb6c:	40001000 	.word	0x40001000

0000bb70 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    bb70:	4901      	ldr	r1, [pc, #4]	; (bb78 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    bb72:	7548      	strb	r0, [r1, #21]
    bb74:	4770      	bx	lr
    bb76:	0000      	.short	0x0000
    bb78:	200011a4 	.word	0x200011a4

0000bb7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    bb7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bb80:	4853      	ldr	r0, [pc, #332]	; (bcd0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bb82:	f04f 0a01 	mov.w	sl, #1
    bb86:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    bb8a:	4851      	ldr	r0, [pc, #324]	; (bcd0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bb8c:	300c      	adds	r0, #12
    bb8e:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    bb92:	4850      	ldr	r0, [pc, #320]	; (bcd4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    bb94:	f8d0 0504 	ldr.w	r0, [r0, #1284]	; 0x504
    bb98:	4c4f      	ldr	r4, [pc, #316]	; (bcd8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    bb9a:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    bb9e:	f000 f957 	bl	be50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    bba2:	494e      	ldr	r1, [pc, #312]	; (bcdc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    bba4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    bba6:	6008      	str	r0, [r1, #0]
    bba8:	f8df 9134 	ldr.w	r9, [pc, #308]	; bce0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>
    bbac:	2600      	movs	r6, #0
    bbae:	62a6      	str	r6, [r4, #40]	; 0x28
    bbb0:	f8d9 1200 	ldr.w	r1, [r9, #512]	; 0x200
    bbb4:	f240 121d 	movw	r2, #285	; 0x11d
    bbb8:	4391      	bics	r1, r2
    bbba:	f8c9 1200 	str.w	r1, [r9, #512]	; 0x200
    bbbe:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    bbc2:	f000 f9c5 	bl	bf50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x208>
    bbc6:	4605      	mov	r5, r0
    bbc8:	4841      	ldr	r0, [pc, #260]	; (bcd0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bbca:	3008      	adds	r0, #8
    bbcc:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bbd0:	61e0      	str	r0, [r4, #28]
    bbd2:	f7ff fdf1 	bl	b7b8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    bbd6:	f884 0020 	strb.w	r0, [r4, #32]
    bbda:	7a60      	ldrb	r0, [r4, #9]
    bbdc:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    bbe0:	61a6      	str	r6, [r4, #24]
    bbe2:	4e40      	ldr	r6, [pc, #256]	; (bce4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    bbe4:	07a8      	lsls	r0, r5, #30
    bbe6:	d502      	bpl.n	bbee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x72>
    bbe8:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    bbec:	61a0      	str	r0, [r4, #24]
    bbee:	0728      	lsls	r0, r5, #28
    bbf0:	d502      	bpl.n	bbf8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x7c>
    bbf2:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    bbf6:	61a0      	str	r0, [r4, #24]
    bbf8:	f04f 0800 	mov.w	r8, #0
    bbfc:	4639      	mov	r1, r7
    bbfe:	4628      	mov	r0, r5
    bc00:	f000 fa32 	bl	c068 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x320>
    bc04:	b918      	cbnz	r0, bc0e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    bc06:	f8c9 a010 	str.w	sl, [r9, #16]
    bc0a:	f04f 0801 	mov.w	r8, #1
    bc0e:	4f32      	ldr	r7, [pc, #200]	; (bcd8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    bc10:	07e8      	lsls	r0, r5, #31
    bc12:	f1a7 0710 	sub.w	r7, r7, #16
    bc16:	d002      	beq.n	bc1e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa2>
    bc18:	6838      	ldr	r0, [r7, #0]
    bc1a:	4780      	blx	r0
    bc1c:	e031      	b.n	bc82 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    bc1e:	07a8      	lsls	r0, r5, #30
    bc20:	d526      	bpl.n	bc70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf4>
    bc22:	0768      	lsls	r0, r5, #29
    bc24:	d41e      	bmi.n	bc64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bc26:	f000 fc61 	bl	c4ec <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bc2a:	b9d8      	cbnz	r0, bc64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bc2c:	f000 fc4e 	bl	c4cc <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bc30:	b9c0      	cbnz	r0, bc64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bc32:	482d      	ldr	r0, [pc, #180]	; (bce8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    bc34:	6800      	ldr	r0, [r0, #0]
    bc36:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    bc3a:	f3c0 6100 	ubfx	r1, r0, #24, #1
    bc3e:	f000 030f 	and.w	r3, r0, #15
    bc42:	f3c0 1203 	ubfx	r2, r0, #4, #4
    bc46:	f3c0 2003 	ubfx	r0, r0, #8, #4
    bc4a:	b159      	cbz	r1, bc64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bc4c:	b10b      	cbz	r3, bc52 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    bc4e:	b102      	cbz	r2, bc52 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    bc50:	b940      	cbnz	r0, bc64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bc52:	4825      	ldr	r0, [pc, #148]	; (bce8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    bc54:	1d00      	adds	r0, r0, #4
    bc56:	6800      	ldr	r0, [r0, #0]
    bc58:	b120      	cbz	r0, bc64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bc5a:	f1bc 0f03 	cmp.w	ip, #3
    bc5e:	d201      	bcs.n	bc64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bc60:	f045 0504 	orr.w	r5, r5, #4
    bc64:	f345 0080 	sbfx	r0, r5, #2, #1
    bc68:	4641      	mov	r1, r8
    bc6a:	1c40      	adds	r0, r0, #1
    bc6c:	687a      	ldr	r2, [r7, #4]
    bc6e:	e007      	b.n	bc80 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    bc70:	f015 0f28 	tst.w	r5, #40	; 0x28
    bc74:	d005      	beq.n	bc82 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    bc76:	f345 1140 	sbfx	r1, r5, #5, #1
    bc7a:	68ba      	ldr	r2, [r7, #8]
    bc7c:	4640      	mov	r0, r8
    bc7e:	1c49      	adds	r1, r1, #1
    bc80:	4790      	blx	r2
    bc82:	06e8      	lsls	r0, r5, #27
    bc84:	d501      	bpl.n	bc8a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x10e>
    bc86:	68f8      	ldr	r0, [r7, #12]
    bc88:	4780      	blx	r0
    bc8a:	7a60      	ldrb	r0, [r4, #9]
    bc8c:	2802      	cmp	r0, #2
    bc8e:	d11c      	bne.n	bcca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    bc90:	7b20      	ldrb	r0, [r4, #12]
    bc92:	2800      	cmp	r0, #0
    bc94:	d019      	beq.n	bcca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    bc96:	2802      	cmp	r0, #2
    bc98:	d004      	beq.n	bca4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x128>
    bc9a:	2801      	cmp	r0, #1
    bc9c:	d006      	beq.n	bcac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    bc9e:	f640 21e1 	movw	r1, #2785	; 0xae1
    bca2:	e009      	b.n	bcb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    bca4:	6921      	ldr	r1, [r4, #16]
    bca6:	69e0      	ldr	r0, [r4, #28]
    bca8:	4408      	add	r0, r1
    bcaa:	e008      	b.n	bcbe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    bcac:	69e1      	ldr	r1, [r4, #28]
    bcae:	6920      	ldr	r0, [r4, #16]
    bcb0:	4288      	cmp	r0, r1
    bcb2:	d804      	bhi.n	bcbe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    bcb4:	f640 21e2 	movw	r1, #2786	; 0xae2
    bcb8:	203e      	movs	r0, #62	; 0x3e
    bcba:	f7f8 f84f 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bcbe:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    bcc2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bcc6:	f000 ba17 	b.w	c0f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>
    bcca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bcce:	0000      	.short	0x0000
    bcd0:	40008000 	.word	0x40008000
    bcd4:	4000b000 	.word	0x4000b000
    bcd8:	200011a4 	.word	0x200011a4
    bcdc:	4001f508 	.word	0x4001f508
    bce0:	40001000 	.word	0x40001000
    bce4:	40008004 	.word	0x40008004
    bce8:	40001450 	.word	0x40001450

0000bcec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    bcec:	b570      	push	{r4, r5, r6, lr}
    bcee:	4b15      	ldr	r3, [pc, #84]	; (bd44 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x58>)
    bcf0:	888c      	ldrh	r4, [r1, #4]
    bcf2:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    bcf6:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    bcfa:	780c      	ldrb	r4, [r1, #0]
    bcfc:	f8d1 1001 	ldr.w	r1, [r1, #1]
    bd00:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    bd04:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    bd08:	f8d3 4640 	ldr.w	r4, [r3, #1600]	; 0x640
    bd0c:	2101      	movs	r1, #1
    bd0e:	4081      	lsls	r1, r0
    bd10:	430c      	orrs	r4, r1
    bd12:	b2e4      	uxtb	r4, r4
    bd14:	b132      	cbz	r2, bd24 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x38>
    bd16:	2a01      	cmp	r2, #1
    bd18:	d00a      	beq.n	bd30 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44>
    bd1a:	f240 41ac 	movw	r1, #1196	; 0x4ac
    bd1e:	203e      	movs	r0, #62	; 0x3e
    bd20:	f7f8 f81c 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd24:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    bd28:	f3c0 2007 	ubfx	r0, r0, #8, #8
    bd2c:	4388      	bics	r0, r1
    bd2e:	e004      	b.n	bd3a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e>
    bd30:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    bd34:	ea41 2010 	orr.w	r0, r1, r0, lsr #8
    bd38:	b2c0      	uxtb	r0, r0
    bd3a:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    bd3e:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    bd42:	bd70      	pop	{r4, r5, r6, pc}
    bd44:	40001000 	.word	0x40001000

0000bd48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    bd48:	4901      	ldr	r1, [pc, #4]	; (bd50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    bd4a:	2001      	movs	r0, #1
    bd4c:	7008      	strb	r0, [r1, #0]
    bd4e:	4770      	bx	lr
    bd50:	20000264 	.word	0x20000264
    bd54:	b510      	push	{r4, lr}
    bd56:	4604      	mov	r4, r0
    bd58:	f000 fbc8 	bl	c4ec <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bd5c:	2800      	cmp	r0, #0
    bd5e:	d00e      	beq.n	bd7e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    bd60:	4a09      	ldr	r2, [pc, #36]	; (bd88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    bd62:	6811      	ldr	r1, [r2, #0]
    bd64:	0650      	lsls	r0, r2, #25
    bd66:	2c02      	cmp	r4, #2
    bd68:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    bd6c:	d008      	beq.n	bd80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    bd6e:	f3c0 2006 	ubfx	r0, r0, #8, #7
    bd72:	bf00      	nop
    bd74:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    bd78:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    bd7c:	6010      	str	r0, [r2, #0]
    bd7e:	bd10      	pop	{r4, pc}
    bd80:	f3c0 6006 	ubfx	r0, r0, #24, #7
    bd84:	e7f6      	b.n	bd74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    bd86:	0000      	.short	0x0000
    bd88:	40001588 	.word	0x40001588
    bd8c:	4815      	ldr	r0, [pc, #84]	; (bde4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x9c>)
    bd8e:	7d41      	ldrb	r1, [r0, #21]
    bd90:	2925      	cmp	r1, #37	; 0x25
    bd92:	d00a      	beq.n	bdaa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x62>
    bd94:	2926      	cmp	r1, #38	; 0x26
    bd96:	d00b      	beq.n	bdb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    bd98:	2927      	cmp	r1, #39	; 0x27
    bd9a:	d00c      	beq.n	bdb6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6e>
    bd9c:	7d40      	ldrb	r0, [r0, #21]
    bd9e:	0040      	lsls	r0, r0, #1
    bda0:	290a      	cmp	r1, #10
    bda2:	d80b      	bhi.n	bdbc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x74>
    bda4:	f600 1064 	addw	r0, r0, #2404	; 0x964
    bda8:	e00a      	b.n	bdc0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>
    bdaa:	f640 1062 	movw	r0, #2402	; 0x962
    bdae:	e00f      	b.n	bdd0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    bdb0:	f640 107a 	movw	r0, #2426	; 0x97a
    bdb4:	e00c      	b.n	bdd0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    bdb6:	f44f 601b 	mov.w	r0, #2480	; 0x9b0
    bdba:	e009      	b.n	bdd0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    bdbc:	f600 1066 	addw	r0, r0, #2406	; 0x966
    bdc0:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    bdc4:	d204      	bcs.n	bdd0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    bdc6:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    bdca:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    bdce:	e001      	b.n	bdd4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>
    bdd0:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    bdd4:	4a04      	ldr	r2, [pc, #16]	; (bde8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa0>)
    bdd6:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    bdda:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    bdde:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    bde2:	4770      	bx	lr
    bde4:	200011a4 	.word	0x200011a4
    bde8:	40001000 	.word	0x40001000
    bdec:	4912      	ldr	r1, [pc, #72]	; (be38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    bdee:	b508      	push	{r3, lr}
    bdf0:	f991 2014 	ldrsb.w	r2, [r1, #20]
    bdf4:	7d49      	ldrb	r1, [r1, #21]
    bdf6:	2801      	cmp	r0, #1
    bdf8:	d00a      	beq.n	be10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>
    bdfa:	2802      	cmp	r0, #2
    bdfc:	d00a      	beq.n	be14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    bdfe:	2804      	cmp	r0, #4
    be00:	d00a      	beq.n	be18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>
    be02:	2808      	cmp	r0, #8
    be04:	d00a      	beq.n	be1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    be06:	f240 31ed 	movw	r1, #1005	; 0x3ed
    be0a:	2006      	movs	r0, #6
    be0c:	f7f7 ffa6 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be10:	2000      	movs	r0, #0
    be12:	e004      	b.n	be1e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    be14:	2001      	movs	r0, #1
    be16:	e002      	b.n	be1e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    be18:	2003      	movs	r0, #3
    be1a:	e000      	b.n	be1e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    be1c:	2002      	movs	r0, #2
    be1e:	466b      	mov	r3, sp
    be20:	f7f4 fad6 	bl	3d0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    be24:	b118      	cbz	r0, be2e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe6>
    be26:	f240 41de 	movw	r1, #1246	; 0x4de
    be2a:	203e      	movs	r0, #62	; 0x3e
    be2c:	e7ee      	b.n	be0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc4>
    be2e:	f99d 0000 	ldrsb.w	r0, [sp]
    be32:	f000 f9eb 	bl	c20c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    be36:	bd08      	pop	{r3, pc}
    be38:	200011a4 	.word	0x200011a4
    be3c:	4803      	ldr	r0, [pc, #12]	; (be4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>)
    be3e:	7a01      	ldrb	r1, [r0, #8]
    be40:	2901      	cmp	r1, #1
    be42:	d102      	bne.n	be4a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x102>
    be44:	7a80      	ldrb	r0, [r0, #10]
    be46:	f7ff bfd1 	b.w	bdec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    be4a:	4770      	bx	lr
    be4c:	200011a4 	.word	0x200011a4
    be50:	4805      	ldr	r0, [pc, #20]	; (be68 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x120>)
    be52:	7a40      	ldrb	r0, [r0, #9]
    be54:	2801      	cmp	r0, #1
    be56:	d003      	beq.n	be60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x118>
    be58:	2802      	cmp	r0, #2
    be5a:	d103      	bne.n	be64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x11c>
    be5c:	f003 bd37 	b.w	f8ce <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    be60:	f003 bd41 	b.w	f8e6 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    be64:	4770      	bx	lr
    be66:	0000      	.short	0x0000
    be68:	200011a4 	.word	0x200011a4
    be6c:	4807      	ldr	r0, [pc, #28]	; (be8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x144>)
    be6e:	2100      	movs	r1, #0
    be70:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    be74:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    be78:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    be7c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    be80:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    be84:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    be88:	4770      	bx	lr
    be8a:	0000      	.short	0x0000
    be8c:	40001000 	.word	0x40001000
    be90:	4818      	ldr	r0, [pc, #96]	; (bef4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>)
    be92:	b510      	push	{r4, lr}
    be94:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    be98:	07c1      	lsls	r1, r0, #31
    be9a:	d029      	beq.n	bef0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    be9c:	0781      	lsls	r1, r0, #30
    be9e:	d514      	bpl.n	beca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x182>
    bea0:	4815      	ldr	r0, [pc, #84]	; (bef8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    bea2:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    bea6:	f041 0101 	orr.w	r1, r1, #1
    beaa:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    beae:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    beb2:	b2c0      	uxtb	r0, r0
    beb4:	280b      	cmp	r0, #11
    beb6:	d005      	beq.n	bec4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    beb8:	280a      	cmp	r0, #10
    beba:	d003      	beq.n	bec4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    bebc:	2803      	cmp	r0, #3
    bebe:	d001      	beq.n	bec4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    bec0:	2802      	cmp	r0, #2
    bec2:	d115      	bne.n	bef0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    bec4:	f240 510f 	movw	r1, #1295	; 0x50f
    bec8:	e00f      	b.n	beea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a2>
    beca:	0740      	lsls	r0, r0, #29
    becc:	d510      	bpl.n	bef0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    bece:	480a      	ldr	r0, [pc, #40]	; (bef8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    bed0:	490a      	ldr	r1, [pc, #40]	; (befc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b4>)
    bed2:	3008      	adds	r0, #8
    bed4:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    bed8:	f44f 71a0 	mov.w	r1, #320	; 0x140
    bedc:	4808      	ldr	r0, [pc, #32]	; (bf00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b8>)
    bede:	f003 fd95 	bl	fa0c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    bee2:	2800      	cmp	r0, #0
    bee4:	d004      	beq.n	bef0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    bee6:	f240 5117 	movw	r1, #1303	; 0x517
    beea:	203e      	movs	r0, #62	; 0x3e
    beec:	f7f7 ff36 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bef0:	bd10      	pop	{r4, pc}
    bef2:	0000      	.short	0x0000
    bef4:	200011a4 	.word	0x200011a4
    bef8:	40001000 	.word	0x40001000
    befc:	4001f098 	.word	0x4001f098
    bf00:	40008000 	.word	0x40008000
    bf04:	4808      	ldr	r0, [pc, #32]	; (bf28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e0>)
    bf06:	4601      	mov	r1, r0
    bf08:	79c2      	ldrb	r2, [r0, #7]
    bf0a:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    bf0e:	b112      	cbz	r2, bf16 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ce>
    bf10:	2a01      	cmp	r2, #1
    bf12:	d003      	beq.n	bf1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d4>
    bf14:	e006      	b.n	bf24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1dc>
    bf16:	f041 0102 	orr.w	r1, r1, #2
    bf1a:	e001      	b.n	bf20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d8>
    bf1c:	f041 0104 	orr.w	r1, r1, #4
    bf20:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    bf24:	f7ff bfb4 	b.w	be90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    bf28:	200011a4 	.word	0x200011a4
    bf2c:	b510      	push	{r4, lr}
    bf2e:	f000 fadd 	bl	c4ec <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bf32:	2800      	cmp	r0, #0
    bf34:	d108      	bne.n	bf48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    bf36:	f000 fac9 	bl	c4cc <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bf3a:	2800      	cmp	r0, #0
    bf3c:	d104      	bne.n	bf48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    bf3e:	4803      	ldr	r0, [pc, #12]	; (bf4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>)
    bf40:	6801      	ldr	r1, [r0, #0]
    bf42:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    bf46:	6001      	str	r1, [r0, #0]
    bf48:	bd10      	pop	{r4, pc}
    bf4a:	0000      	.short	0x0000
    bf4c:	40001568 	.word	0x40001568
    bf50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf54:	4d35      	ldr	r5, [pc, #212]	; (c02c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e4>)
    bf56:	2400      	movs	r4, #0
    bf58:	7b28      	ldrb	r0, [r5, #12]
    bf5a:	b138      	cbz	r0, bf6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    bf5c:	f44f 71a2 	mov.w	r1, #324	; 0x144
    bf60:	4833      	ldr	r0, [pc, #204]	; (c030 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
    bf62:	f003 fd53 	bl	fa0c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    bf66:	b108      	cbz	r0, bf6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    bf68:	2601      	movs	r6, #1
    bf6a:	e000      	b.n	bf6e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    bf6c:	2600      	movs	r6, #0
    bf6e:	7a68      	ldrb	r0, [r5, #9]
    bf70:	4f30      	ldr	r7, [pc, #192]	; (c034 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>)
    bf72:	f44f 7186 	mov.w	r1, #268	; 0x10c
    bf76:	2801      	cmp	r0, #1
    bf78:	d002      	beq.n	bf80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x238>
    bf7a:	2802      	cmp	r0, #2
    bf7c:	d008      	beq.n	bf90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    bf7e:	e018      	b.n	bfb2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    bf80:	4638      	mov	r0, r7
    bf82:	f003 fd3e 	bl	fa02 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    bf86:	b108      	cbz	r0, bf8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>
    bf88:	2408      	movs	r4, #8
    bf8a:	e012      	b.n	bfb2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    bf8c:	2400      	movs	r4, #0
    bf8e:	e010      	b.n	bfb2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    bf90:	4638      	mov	r0, r7
    bf92:	f003 fd36 	bl	fa02 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    bf96:	b100      	cbz	r0, bf9a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x252>
    bf98:	2002      	movs	r0, #2
    bf9a:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
    bf9e:	43c9      	mvns	r1, r1
    bfa0:	f341 0100 	sbfx	r1, r1, #0, #1
    bfa4:	1c49      	adds	r1, r1, #1
    bfa6:	d001      	beq.n	bfac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x264>
    bfa8:	2400      	movs	r4, #0
    bfaa:	e000      	b.n	bfae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x266>
    bfac:	2404      	movs	r4, #4
    bfae:	4304      	orrs	r4, r0
    bfb0:	4334      	orrs	r4, r6
    bfb2:	f014 0f0b 	tst.w	r4, #11
    bfb6:	d107      	bne.n	bfc8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x280>
    bfb8:	f44f 7188 	mov.w	r1, #272	; 0x110
    bfbc:	4638      	mov	r0, r7
    bfbe:	f003 fd20 	bl	fa02 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    bfc2:	b100      	cbz	r0, bfc6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x27e>
    bfc4:	2010      	movs	r0, #16
    bfc6:	4304      	orrs	r4, r0
    bfc8:	481b      	ldr	r0, [pc, #108]	; (c038 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    bfca:	7800      	ldrb	r0, [r0, #0]
    bfcc:	b1f8      	cbz	r0, c00e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c6>
    bfce:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    bfd2:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    bfd6:	d007      	beq.n	bfe8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    bfd8:	f44f 718a 	mov.w	r1, #276	; 0x114
    bfdc:	4638      	mov	r0, r7
    bfde:	f003 fd10 	bl	fa02 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    bfe2:	b108      	cbz	r0, bfe8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    bfe4:	2001      	movs	r0, #1
    bfe6:	e000      	b.n	bfea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    bfe8:	2000      	movs	r0, #0
    bfea:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    bfee:	b13e      	cbz	r6, c000 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    bff0:	f44f 718c 	mov.w	r1, #280	; 0x118
    bff4:	4638      	mov	r0, r7
    bff6:	f003 fd04 	bl	fa02 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    bffa:	b108      	cbz	r0, c000 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    bffc:	2001      	movs	r0, #1
    bffe:	e000      	b.n	c002 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ba>
    c000:	2000      	movs	r0, #0
    c002:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    c006:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    c00a:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    c00e:	f7ff ff2d 	bl	be6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x124>
    c012:	06e0      	lsls	r0, r4, #27
    c014:	d506      	bpl.n	c024 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c016:	0720      	lsls	r0, r4, #28
    c018:	d404      	bmi.n	c024 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c01a:	7a68      	ldrb	r0, [r5, #9]
    c01c:	2801      	cmp	r0, #1
    c01e:	d101      	bne.n	c024 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c020:	f044 0420 	orr.w	r4, r4, #32
    c024:	4620      	mov	r0, r4
    c026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c02a:	0000      	.short	0x0000
    c02c:	200011a4 	.word	0x200011a4
    c030:	40008000 	.word	0x40008000
    c034:	40001000 	.word	0x40001000
    c038:	20000264 	.word	0x20000264
    c03c:	4809      	ldr	r0, [pc, #36]	; (c064 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>)
    c03e:	b510      	push	{r4, lr}
    c040:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    c044:	f000 000f 	and.w	r0, r0, #15
    c048:	2803      	cmp	r0, #3
    c04a:	d006      	beq.n	c05a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x312>
    c04c:	2804      	cmp	r0, #4
    c04e:	d006      	beq.n	c05e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x316>
    c050:	f240 11dd 	movw	r1, #477	; 0x1dd
    c054:	203e      	movs	r0, #62	; 0x3e
    c056:	f7f7 fe81 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c05a:	2001      	movs	r0, #1
    c05c:	bd10      	pop	{r4, pc}
    c05e:	2002      	movs	r0, #2
    c060:	bd10      	pop	{r4, pc}
    c062:	0000      	.short	0x0000
    c064:	40001000 	.word	0x40001000
    c068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c06c:	4c19      	ldr	r4, [pc, #100]	; (c0d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>)
    c06e:	460d      	mov	r5, r1
    c070:	7a21      	ldrb	r1, [r4, #8]
    c072:	b129      	cbz	r1, c080 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x338>
    c074:	f010 0f11 	tst.w	r0, #17
    c078:	d00b      	beq.n	c092 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34a>
    c07a:	f7ff fa1f 	bl	b4bc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c07e:	e027      	b.n	c0d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    c080:	4915      	ldr	r1, [pc, #84]	; (c0d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>)
    c082:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c086:	6008      	str	r0, [r1, #0]
    c088:	f000 f862 	bl	c150 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    c08c:	2000      	movs	r0, #0
    c08e:	7320      	strb	r0, [r4, #12]
    c090:	e01e      	b.n	c0d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    c092:	2901      	cmp	r1, #1
    c094:	d001      	beq.n	c09a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x352>
    c096:	2601      	movs	r6, #1
    c098:	e000      	b.n	c09c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    c09a:	2600      	movs	r6, #0
    c09c:	79e0      	ldrb	r0, [r4, #7]
    c09e:	2801      	cmp	r0, #1
    c0a0:	d00e      	beq.n	c0c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x378>
    c0a2:	2700      	movs	r7, #0
    c0a4:	f000 f854 	bl	c150 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    c0a8:	2196      	movs	r1, #150	; 0x96
    c0aa:	4630      	mov	r0, r6
    c0ac:	f000 f866 	bl	c17c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    c0b0:	4601      	mov	r1, r0
    c0b2:	b14f      	cbz	r7, c0c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x380>
    c0b4:	353b      	adds	r5, #59	; 0x3b
    c0b6:	428d      	cmp	r5, r1
    c0b8:	d904      	bls.n	c0c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37c>
    c0ba:	2000      	movs	r0, #0
    c0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c0c0:	2701      	movs	r7, #1
    c0c2:	e7ef      	b.n	c0a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    c0c4:	2001      	movs	r0, #1
    c0c6:	71e0      	strb	r0, [r4, #7]
    c0c8:	7aa2      	ldrb	r2, [r4, #10]
    c0ca:	4630      	mov	r0, r6
    c0cc:	f7ff fc6a 	bl	b9a4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    c0d0:	2001      	movs	r0, #1
    c0d2:	e7f3      	b.n	c0bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    c0d4:	200011a4 	.word	0x200011a4
    c0d8:	4001f508 	.word	0x4001f508
    c0dc:	4805      	ldr	r0, [pc, #20]	; (c0f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    c0de:	2100      	movs	r1, #0
    c0e0:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    c0e4:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c0e8:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    c0ec:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c0f0:	4770      	bx	lr
    c0f2:	0000      	.short	0x0000
    c0f4:	40001000 	.word	0x40001000
    c0f8:	4804      	ldr	r0, [pc, #16]	; (c10c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    c0fa:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c0fc:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c100:	6281      	str	r1, [r0, #40]	; 0x28
    c102:	4903      	ldr	r1, [pc, #12]	; (c110 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>)
    c104:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    c108:	6008      	str	r0, [r1, #0]
    c10a:	4770      	bx	lr
    c10c:	200011a4 	.word	0x200011a4
    c110:	4001f504 	.word	0x4001f504
    c114:	4a07      	ldr	r2, [pc, #28]	; (c134 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    c116:	2000      	movs	r0, #0
    c118:	3208      	adds	r2, #8
    c11a:	4906      	ldr	r1, [pc, #24]	; (c134 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    c11c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c120:	1d0a      	adds	r2, r1, #4
    c122:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c126:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c12a:	4902      	ldr	r1, [pc, #8]	; (c134 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    c12c:	310c      	adds	r1, #12
    c12e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c132:	4770      	bx	lr
    c134:	40008000 	.word	0x40008000
    c138:	4903      	ldr	r1, [pc, #12]	; (c148 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x400>)
    c13a:	79c9      	ldrb	r1, [r1, #7]
    c13c:	2900      	cmp	r1, #0
    c13e:	d102      	bne.n	c146 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fe>
    c140:	4902      	ldr	r1, [pc, #8]	; (c14c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x404>)
    c142:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c146:	4770      	bx	lr
    c148:	200011a4 	.word	0x200011a4
    c14c:	4001f098 	.word	0x4001f098
    c150:	4802      	ldr	r0, [pc, #8]	; (c15c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>)
    c152:	2100      	movs	r1, #0
    c154:	71c1      	strb	r1, [r0, #7]
    c156:	7201      	strb	r1, [r0, #8]
    c158:	7241      	strb	r1, [r0, #9]
    c15a:	4770      	bx	lr
    c15c:	200011a4 	.word	0x200011a4
    c160:	4a05      	ldr	r2, [pc, #20]	; (c178 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
    c162:	79d2      	ldrb	r2, [r2, #7]
    c164:	2a01      	cmp	r2, #1
    c166:	d006      	beq.n	c176 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x42e>
    c168:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c16c:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    c170:	fbb1 f1f2 	udiv	r1, r1, r2
    c174:	1a40      	subs	r0, r0, r1
    c176:	4770      	bx	lr
    c178:	200011a4 	.word	0x200011a4
    c17c:	b570      	push	{r4, r5, r6, lr}
    c17e:	4c13      	ldr	r4, [pc, #76]	; (c1cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x484>)
    c180:	4603      	mov	r3, r0
    c182:	460d      	mov	r5, r1
    c184:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    c188:	2000      	movs	r0, #0
    c18a:	b15a      	cbz	r2, c1a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    c18c:	4621      	mov	r1, r4
    c18e:	f891 1020 	ldrb.w	r1, [r1, #32]
    c192:	b163      	cbz	r3, c1ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x466>
    c194:	2b01      	cmp	r3, #1
    c196:	d111      	bne.n	c1bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x474>
    c198:	2a01      	cmp	r2, #1
    c19a:	4628      	mov	r0, r5
    c19c:	d012      	beq.n	c1c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47c>
    c19e:	f003 fc7a 	bl	fa96 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    c1a2:	e009      	b.n	c1b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    c1a4:	f240 7152 	movw	r1, #1874	; 0x752
    c1a8:	203e      	movs	r0, #62	; 0x3e
    c1aa:	f7f7 fdd7 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1ae:	2a01      	cmp	r2, #1
    c1b0:	4628      	mov	r0, r5
    c1b2:	d004      	beq.n	c1be <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x476>
    c1b4:	f003 fc7d 	bl	fab2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    c1b8:	69e1      	ldr	r1, [r4, #28]
    c1ba:	4408      	add	r0, r1
    c1bc:	bd70      	pop	{r4, r5, r6, pc}
    c1be:	f003 fc92 	bl	fae6 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    c1c2:	e7f9      	b.n	c1b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    c1c4:	f003 fc80 	bl	fac8 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    c1c8:	e7f6      	b.n	c1b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    c1ca:	0000      	.short	0x0000
    c1cc:	200011a4 	.word	0x200011a4
    c1d0:	b510      	push	{r4, lr}
    c1d2:	2200      	movs	r2, #0
    c1d4:	2901      	cmp	r1, #1
    c1d6:	d008      	beq.n	c1ea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a2>
    c1d8:	2902      	cmp	r1, #2
    c1da:	d004      	beq.n	c1e6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
    c1dc:	f240 2163 	movw	r1, #611	; 0x263
    c1e0:	203e      	movs	r0, #62	; 0x3e
    c1e2:	f7f7 fdbb 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c1ea:	4905      	ldr	r1, [pc, #20]	; (c200 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4b8>)
    c1ec:	430a      	orrs	r2, r1
    c1ee:	4905      	ldr	r1, [pc, #20]	; (c204 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    c1f0:	600a      	str	r2, [r1, #0]
    c1f2:	4905      	ldr	r1, [pc, #20]	; (c208 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c0>)
    c1f4:	4308      	orrs	r0, r1
    c1f6:	4903      	ldr	r1, [pc, #12]	; (c204 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    c1f8:	1d09      	adds	r1, r1, #4
    c1fa:	6008      	str	r0, [r1, #0]
    c1fc:	bd10      	pop	{r4, pc}
    c1fe:	0000      	.short	0x0000
    c200:	00100108 	.word	0x00100108
    c204:	40001514 	.word	0x40001514
    c208:	02030000 	.word	0x02030000

0000c20c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    c20c:	4901      	ldr	r1, [pc, #4]	; (c214 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    c20e:	b2c0      	uxtb	r0, r0
    c210:	6008      	str	r0, [r1, #0]
    c212:	4770      	bx	lr
    c214:	4000150c 	.word	0x4000150c

0000c218 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    c218:	b510      	push	{r4, lr}
    c21a:	4907      	ldr	r1, [pc, #28]	; (c238 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    c21c:	2801      	cmp	r0, #1
    c21e:	d005      	beq.n	c22c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    c220:	2802      	cmp	r0, #2
    c222:	d005      	beq.n	c230 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    c224:	218b      	movs	r1, #139	; 0x8b
    c226:	203f      	movs	r0, #63	; 0x3f
    c228:	f7f7 fd98 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c22c:	2003      	movs	r0, #3
    c22e:	e000      	b.n	c232 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    c230:	2004      	movs	r0, #4
    c232:	6008      	str	r0, [r1, #0]
    c234:	bd10      	pop	{r4, pc}
    c236:	0000      	.short	0x0000
    c238:	40001510 	.word	0x40001510

0000c23c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    c23c:	4770      	bx	lr
    c23e:	2100      	movs	r1, #0
    c240:	7081      	strb	r1, [r0, #2]
    c242:	7001      	strb	r1, [r0, #0]
    c244:	7041      	strb	r1, [r0, #1]
    c246:	4770      	bx	lr

0000c248 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    c248:	b570      	push	{r4, r5, r6, lr}
    c24a:	f7f4 f8db 	bl	404 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    c24e:	4605      	mov	r5, r0
    c250:	2400      	movs	r4, #0
    c252:	e006      	b.n	c262 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    c254:	4620      	mov	r0, r4
    c256:	f7f4 f8db 	bl	410 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c25a:	f7ff fff0 	bl	c23e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    c25e:	1c64      	adds	r4, r4, #1
    c260:	b2e4      	uxtb	r4, r4
    c262:	42ac      	cmp	r4, r5
    c264:	d3f6      	bcc.n	c254 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    c266:	bd70      	pop	{r4, r5, r6, pc}

0000c268 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    c268:	2000      	movs	r0, #0
    c26a:	f7f6 bedb 	b.w	3024 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000c26e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    c26e:	b510      	push	{r4, lr}
    c270:	f7f6 fbae 	bl	29d0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    c274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c278:	f000 b800 	b.w	c27c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000c27c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    c27c:	0a41      	lsrs	r1, r0, #9
    c27e:	f643 5209 	movw	r2, #15625	; 0x3d09
    c282:	4351      	muls	r1, r2
    c284:	f3c0 0008 	ubfx	r0, r0, #0, #9
    c288:	fb10 f002 	smulbb	r0, r0, r2
    c28c:	f500 7080 	add.w	r0, r0, #256	; 0x100
    c290:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    c294:	4770      	bx	lr

0000c296 <MPSL_IRQ_RADIO_Handler>:
    c296:	f7f5 b9c3 	b.w	1620 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    c29a:	2800      	cmp	r0, #0
    c29c:	db09      	blt.n	c2b2 <MPSL_IRQ_RADIO_Handler+0x1c>
    c29e:	f000 021f 	and.w	r2, r0, #31
    c2a2:	2101      	movs	r1, #1
    c2a4:	4091      	lsls	r1, r2
    c2a6:	0940      	lsrs	r0, r0, #5
    c2a8:	0080      	lsls	r0, r0, #2
    c2aa:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c2ae:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c2b2:	4770      	bx	lr
    c2b4:	2800      	cmp	r0, #0
    c2b6:	db0d      	blt.n	c2d4 <MPSL_IRQ_RADIO_Handler+0x3e>
    c2b8:	f000 021f 	and.w	r2, r0, #31
    c2bc:	2101      	movs	r1, #1
    c2be:	4091      	lsls	r1, r2
    c2c0:	0940      	lsrs	r0, r0, #5
    c2c2:	0080      	lsls	r0, r0, #2
    c2c4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c2c8:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c2cc:	f3bf 8f4f 	dsb	sy
    c2d0:	f3bf 8f6f 	isb	sy
    c2d4:	4770      	bx	lr

0000c2d6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c2d6:	b570      	push	{r4, r5, r6, lr}
    c2d8:	4602      	mov	r2, r0
    c2da:	2000      	movs	r0, #0
    c2dc:	2900      	cmp	r1, #0
    c2de:	d01d      	beq.n	c31c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    c2e0:	fba2 0101 	umull	r0, r1, r2, r1
    c2e4:	0a40      	lsrs	r0, r0, #9
    c2e6:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    c2ea:	0a49      	lsrs	r1, r1, #9
    c2ec:	1c40      	adds	r0, r0, #1
    c2ee:	f141 0100 	adc.w	r1, r1, #0
    c2f2:	f240 72a1 	movw	r2, #1953	; 0x7a1
    c2f6:	1883      	adds	r3, r0, r2
    c2f8:	f141 0100 	adc.w	r1, r1, #0
    c2fc:	1c5b      	adds	r3, r3, #1
    c2fe:	f141 0400 	adc.w	r4, r1, #0
    c302:	2100      	movs	r1, #0
    c304:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    c308:	41a1      	sbcs	r1, r4
    c30a:	d203      	bcs.n	c314 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    c30c:	2171      	movs	r1, #113	; 0x71
    c30e:	206d      	movs	r0, #109	; 0x6d
    c310:	f7f7 fa44 	bl	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c314:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    c318:	fbb0 f0f2 	udiv	r0, r0, r2
    c31c:	bd70      	pop	{r4, r5, r6, pc}
    c31e:	5840      	ldr	r0, [r0, r1]
    c320:	2800      	cmp	r0, #0
    c322:	d000      	beq.n	c326 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    c324:	2001      	movs	r0, #1
    c326:	4770      	bx	lr
    c328:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    c32c:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    c330:	f002 0201 	and.w	r2, r2, #1
    c334:	03c0      	lsls	r0, r0, #15
    c336:	d503      	bpl.n	c340 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c338:	428a      	cmp	r2, r1
    c33a:	d101      	bne.n	c340 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c33c:	2001      	movs	r0, #1
    c33e:	4770      	bx	lr
    c340:	2000      	movs	r0, #0
    c342:	4770      	bx	lr

0000c344 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    c344:	b510      	push	{r4, lr}
    c346:	2101      	movs	r1, #1
    c348:	0788      	lsls	r0, r1, #30
    c34a:	f7f7 f9d1 	bl	36f0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c34e:	2800      	cmp	r0, #0
    c350:	d000      	beq.n	c354 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    c352:	2001      	movs	r0, #1
    c354:	bd10      	pop	{r4, pc}

0000c356 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    c356:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c35a:	2101      	movs	r1, #1
    c35c:	6001      	str	r1, [r0, #0]
    c35e:	4770      	bx	lr

0000c360 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    c360:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c364:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    c368:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    c36c:	f002 0203 	and.w	r2, r2, #3
    c370:	03c9      	lsls	r1, r1, #15
    c372:	d503      	bpl.n	c37c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c374:	4282      	cmp	r2, r0
    c376:	d101      	bne.n	c37c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c378:	2001      	movs	r0, #1
    c37a:	4770      	bx	lr
    c37c:	2000      	movs	r0, #0
    c37e:	4770      	bx	lr

0000c380 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    c380:	b510      	push	{r4, lr}
    c382:	2100      	movs	r1, #0
    c384:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c388:	f7f7 f9b2 	bl	36f0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c38c:	2800      	cmp	r0, #0
    c38e:	d000      	beq.n	c392 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    c390:	2001      	movs	r0, #1
    c392:	bd10      	pop	{r4, pc}
    c394:	2800      	cmp	r0, #0
    c396:	db09      	blt.n	c3ac <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    c398:	f000 021f 	and.w	r2, r0, #31
    c39c:	2101      	movs	r1, #1
    c39e:	4091      	lsls	r1, r2
    c3a0:	0940      	lsrs	r0, r0, #5
    c3a2:	0080      	lsls	r0, r0, #2
    c3a4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c3a8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c3ac:	4770      	bx	lr
    c3ae:	2800      	cmp	r0, #0
    c3b0:	db0d      	blt.n	c3ce <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    c3b2:	f000 021f 	and.w	r2, r0, #31
    c3b6:	2101      	movs	r1, #1
    c3b8:	4091      	lsls	r1, r2
    c3ba:	0940      	lsrs	r0, r0, #5
    c3bc:	0080      	lsls	r0, r0, #2
    c3be:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c3c2:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c3c6:	f3bf 8f4f 	dsb	sy
    c3ca:	f3bf 8f6f 	isb	sy
    c3ce:	4770      	bx	lr
    c3d0:	00021000 	.word	0x00021000
    c3d4:	000000fa 	.word	0x000000fa
    c3d8:	24625723 	.word	0x24625723
    c3dc:	578f3123 	.word	0x578f3123
    c3e0:	2fd1ee74 	.word	0x2fd1ee74
    c3e4:	4594c088 	.word	0x4594c088
    c3e8:	36f9a2f7 	.word	0x36f9a2f7
    c3ec:	2800      	cmp	r0, #0
    c3ee:	db09      	blt.n	c404 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    c3f0:	f000 021f 	and.w	r2, r0, #31
    c3f4:	2101      	movs	r1, #1
    c3f6:	4091      	lsls	r1, r2
    c3f8:	0940      	lsrs	r0, r0, #5
    c3fa:	0080      	lsls	r0, r0, #2
    c3fc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c400:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c404:	4770      	bx	lr

0000c406 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    c406:	f3ef 8110 	mrs	r1, PRIMASK
    c40a:	b672      	cpsid	i
    c40c:	7802      	ldrb	r2, [r0, #0]
    c40e:	2a01      	cmp	r2, #1
    c410:	d001      	beq.n	c416 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    c412:	2201      	movs	r2, #1
    c414:	e000      	b.n	c418 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    c416:	2200      	movs	r2, #0
    c418:	2301      	movs	r3, #1
    c41a:	7003      	strb	r3, [r0, #0]
    c41c:	b901      	cbnz	r1, c420 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    c41e:	b662      	cpsie	i
    c420:	b10a      	cbz	r2, c426 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    c422:	2000      	movs	r0, #0
    c424:	4770      	bx	lr
    c426:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c42a:	4770      	bx	lr

0000c42c <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    c42c:	2100      	movs	r1, #0
    c42e:	7001      	strb	r1, [r0, #0]
    c430:	4608      	mov	r0, r1
    c432:	4770      	bx	lr

0000c434 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    c434:	f3ef 8110 	mrs	r1, PRIMASK
    c438:	b672      	cpsid	i
    c43a:	2200      	movs	r2, #0
    c43c:	7002      	strb	r2, [r0, #0]
    c43e:	b901      	cbnz	r1, c442 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    c440:	b662      	cpsie	i
    c442:	2000      	movs	r0, #0
    c444:	4770      	bx	lr

0000c446 <mpsl_low_priority_process>:
    c446:	f7f7 ba95 	b.w	3974 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000c44a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    c44a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c44e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c452:	280f      	cmp	r0, #15
    c454:	d001      	beq.n	c45a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    c456:	2000      	movs	r0, #0
    c458:	4770      	bx	lr
    c45a:	2001      	movs	r0, #1
    c45c:	4770      	bx	lr

0000c45e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    c45e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c462:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c466:	280a      	cmp	r0, #10
    c468:	d001      	beq.n	c46e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    c46a:	2000      	movs	r0, #0
    c46c:	4770      	bx	lr
    c46e:	2001      	movs	r0, #1
    c470:	4770      	bx	lr

0000c472 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    c472:	b500      	push	{lr}
    c474:	f7ff fff3 	bl	c45e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c478:	b120      	cbz	r0, c484 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    c47a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c47e:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c482:	b108      	cbz	r0, c488 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    c484:	2000      	movs	r0, #0
    c486:	bd00      	pop	{pc}
    c488:	2001      	movs	r0, #1
    c48a:	bd00      	pop	{pc}

0000c48c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    c48c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c490:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c494:	280e      	cmp	r0, #14
    c496:	d001      	beq.n	c49c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    c498:	2000      	movs	r0, #0
    c49a:	4770      	bx	lr
    c49c:	2001      	movs	r0, #1
    c49e:	4770      	bx	lr

0000c4a0 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    c4a0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4a4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c4a8:	2810      	cmp	r0, #16
    c4aa:	d001      	beq.n	c4b0 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    c4ac:	2000      	movs	r0, #0
    c4ae:	4770      	bx	lr
    c4b0:	2001      	movs	r0, #1
    c4b2:	4770      	bx	lr

0000c4b4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    c4b4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4b8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c4bc:	2806      	cmp	r0, #6
    c4be:	d003      	beq.n	c4c8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c4c0:	1c40      	adds	r0, r0, #1
    c4c2:	d001      	beq.n	c4c8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c4c4:	2000      	movs	r0, #0
    c4c6:	4770      	bx	lr
    c4c8:	2001      	movs	r0, #1
    c4ca:	4770      	bx	lr

0000c4cc <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    c4cc:	b500      	push	{lr}
    c4ce:	f7ff fff1 	bl	c4b4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c4d2:	b148      	cbz	r0, c4e8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c4d4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4d8:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c4dc:	2806      	cmp	r0, #6
    c4de:	d303      	bcc.n	c4e8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c4e0:	1c40      	adds	r0, r0, #1
    c4e2:	d001      	beq.n	c4e8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c4e4:	2001      	movs	r0, #1
    c4e6:	bd00      	pop	{pc}
    c4e8:	2000      	movs	r0, #0
    c4ea:	bd00      	pop	{pc}

0000c4ec <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    c4ec:	b500      	push	{lr}
    c4ee:	f7ff ffe1 	bl	c4b4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c4f2:	b138      	cbz	r0, c504 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    c4f4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4f8:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c4fc:	2806      	cmp	r0, #6
    c4fe:	d303      	bcc.n	c508 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c500:	1c40      	adds	r0, r0, #1
    c502:	d001      	beq.n	c508 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c504:	2000      	movs	r0, #0
    c506:	bd00      	pop	{pc}
    c508:	2001      	movs	r0, #1
    c50a:	bd00      	pop	{pc}

0000c50c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    c50c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c510:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c514:	280d      	cmp	r0, #13
    c516:	d001      	beq.n	c51c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    c518:	2000      	movs	r0, #0
    c51a:	4770      	bx	lr
    c51c:	2001      	movs	r0, #1
    c51e:	4770      	bx	lr

0000c520 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    c520:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c524:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c528:	2808      	cmp	r0, #8
    c52a:	d001      	beq.n	c530 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    c52c:	2000      	movs	r0, #0
    c52e:	4770      	bx	lr
    c530:	2001      	movs	r0, #1
    c532:	4770      	bx	lr

0000c534 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    c534:	2a00      	cmp	r2, #0
    c536:	bf04      	itt	eq
    c538:	2000      	moveq	r0, #0
    c53a:	4770      	bxeq	lr
    c53c:	1e52      	subs	r2, r2, #1
    c53e:	d007      	beq.n	c550 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    c540:	7803      	ldrb	r3, [r0, #0]
    c542:	f891 c000 	ldrb.w	ip, [r1]
    c546:	4563      	cmp	r3, ip
    c548:	bf04      	itt	eq
    c54a:	1c40      	addeq	r0, r0, #1
    c54c:	1c49      	addeq	r1, r1, #1
    c54e:	d0f5      	beq.n	c53c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    c550:	7800      	ldrb	r0, [r0, #0]
    c552:	7809      	ldrb	r1, [r1, #0]
    c554:	1a40      	subs	r0, r0, r1
    c556:	4770      	bx	lr

0000c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    c558:	b4f0      	push	{r4, r5, r6, r7}
    c55a:	ea80 0c01 	eor.w	ip, r0, r1
    c55e:	4603      	mov	r3, r0
    c560:	f01c 0f03 	tst.w	ip, #3
    c564:	d13c      	bne.n	c5e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c566:	f013 0f03 	tst.w	r3, #3
    c56a:	d00b      	beq.n	c584 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    c56c:	2a00      	cmp	r2, #0
    c56e:	bf04      	itt	eq
    c570:	bcf0      	popeq	{r4, r5, r6, r7}
    c572:	4770      	bxeq	lr
    c574:	f811 cb01 	ldrb.w	ip, [r1], #1
    c578:	f803 cb01 	strb.w	ip, [r3], #1
    c57c:	1e52      	subs	r2, r2, #1
    c57e:	f013 0f03 	tst.w	r3, #3
    c582:	d1f3      	bne.n	c56c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    c584:	2a03      	cmp	r2, #3
    c586:	d94f      	bls.n	c628 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c588:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c58c:	d24c      	bcs.n	c628 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c58e:	f1c2 0c00 	rsb	ip, r2, #0
    c592:	ea4f 74ec 	mov.w	r4, ip, asr #31
    c596:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    c59a:	ea4f 0cac 	mov.w	ip, ip, asr #2
    c59e:	f1cc 0c00 	rsb	ip, ip, #0
    c5a2:	f1bc 0f00 	cmp.w	ip, #0
    c5a6:	dd1b      	ble.n	c5e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c5a8:	1f0d      	subs	r5, r1, #4
    c5aa:	1f1c      	subs	r4, r3, #4
    c5ac:	f01c 0f01 	tst.w	ip, #1
    c5b0:	d003      	beq.n	c5ba <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    c5b2:	f855 6f04 	ldr.w	r6, [r5, #4]!
    c5b6:	f844 6f04 	str.w	r6, [r4, #4]!
    c5ba:	ea5f 066c 	movs.w	r6, ip, asr #1
    c5be:	d007      	beq.n	c5d0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    c5c0:	686f      	ldr	r7, [r5, #4]
    c5c2:	6067      	str	r7, [r4, #4]
    c5c4:	f855 7f08 	ldr.w	r7, [r5, #8]!
    c5c8:	f844 7f08 	str.w	r7, [r4, #8]!
    c5cc:	1e76      	subs	r6, r6, #1
    c5ce:	d1f7      	bne.n	c5c0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    c5d0:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    c5d4:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    c5d8:	f1cc 0c00 	rsb	ip, ip, #0
    c5dc:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    c5e0:	2a00      	cmp	r2, #0
    c5e2:	bf04      	itt	eq
    c5e4:	bcf0      	popeq	{r4, r5, r6, r7}
    c5e6:	4770      	bxeq	lr
    c5e8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c5ec:	d226      	bcs.n	c63c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c5ee:	2a00      	cmp	r2, #0
    c5f0:	bfdc      	itt	le
    c5f2:	bcf0      	pople	{r4, r5, r6, r7}
    c5f4:	4770      	bxle	lr
    c5f6:	1e49      	subs	r1, r1, #1
    c5f8:	1e5b      	subs	r3, r3, #1
    c5fa:	f012 0f01 	tst.w	r2, #1
    c5fe:	d003      	beq.n	c608 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    c600:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    c604:	f803 cf01 	strb.w	ip, [r3, #1]!
    c608:	1052      	asrs	r2, r2, #1
    c60a:	bf04      	itt	eq
    c60c:	bcf0      	popeq	{r4, r5, r6, r7}
    c60e:	4770      	bxeq	lr
    c610:	f891 c001 	ldrb.w	ip, [r1, #1]
    c614:	f883 c001 	strb.w	ip, [r3, #1]
    c618:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    c61c:	f803 cf02 	strb.w	ip, [r3, #2]!
    c620:	1e52      	subs	r2, r2, #1
    c622:	d1f5      	bne.n	c610 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    c624:	bcf0      	pop	{r4, r5, r6, r7}
    c626:	4770      	bx	lr
    c628:	2a04      	cmp	r2, #4
    c62a:	d3d9      	bcc.n	c5e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c62c:	f851 cb04 	ldr.w	ip, [r1], #4
    c630:	1f12      	subs	r2, r2, #4
    c632:	f843 cb04 	str.w	ip, [r3], #4
    c636:	2a04      	cmp	r2, #4
    c638:	d2f8      	bcs.n	c62c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    c63a:	e7d1      	b.n	c5e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c63c:	f811 cb01 	ldrb.w	ip, [r1], #1
    c640:	f803 cb01 	strb.w	ip, [r3], #1
    c644:	1e52      	subs	r2, r2, #1
    c646:	d1f9      	bne.n	c63c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c648:	bcf0      	pop	{r4, r5, r6, r7}
    c64a:	4770      	bx	lr

0000c64c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    c64c:	b470      	push	{r4, r5, r6}
    c64e:	4603      	mov	r3, r0
    c650:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    c654:	f010 0f03 	tst.w	r0, #3
    c658:	d009      	beq.n	c66e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    c65a:	2a00      	cmp	r2, #0
    c65c:	bf04      	itt	eq
    c65e:	bc70      	popeq	{r4, r5, r6}
    c660:	4770      	bxeq	lr
    c662:	f803 cb01 	strb.w	ip, [r3], #1
    c666:	1e52      	subs	r2, r2, #1
    c668:	f013 0f03 	tst.w	r3, #3
    c66c:	d1f5      	bne.n	c65a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    c66e:	b2c9      	uxtb	r1, r1
    c670:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c674:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    c678:	2a03      	cmp	r2, #3
    c67a:	d939      	bls.n	c6f0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c67c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c680:	d236      	bcs.n	c6f0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c682:	4251      	negs	r1, r2
    c684:	17cc      	asrs	r4, r1, #31
    c686:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    c68a:	1089      	asrs	r1, r1, #2
    c68c:	424e      	negs	r6, r1
    c68e:	2e00      	cmp	r6, #0
    c690:	dd11      	ble.n	c6b6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c692:	1f19      	subs	r1, r3, #4
    c694:	f016 0f01 	tst.w	r6, #1
    c698:	bf18      	it	ne
    c69a:	f841 5f04 	strne.w	r5, [r1, #4]!
    c69e:	1074      	asrs	r4, r6, #1
    c6a0:	d004      	beq.n	c6ac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    c6a2:	604d      	str	r5, [r1, #4]
    c6a4:	f841 5f08 	str.w	r5, [r1, #8]!
    c6a8:	1e64      	subs	r4, r4, #1
    c6aa:	d1fa      	bne.n	c6a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    c6ac:	4271      	negs	r1, r6
    c6ae:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    c6b2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    c6b6:	2a00      	cmp	r2, #0
    c6b8:	bf04      	itt	eq
    c6ba:	bc70      	popeq	{r4, r5, r6}
    c6bc:	4770      	bxeq	lr
    c6be:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c6c2:	d21d      	bcs.n	c700 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c6c4:	2a00      	cmp	r2, #0
    c6c6:	bfdc      	itt	le
    c6c8:	bc70      	pople	{r4, r5, r6}
    c6ca:	4770      	bxle	lr
    c6cc:	1e59      	subs	r1, r3, #1
    c6ce:	f012 0f01 	tst.w	r2, #1
    c6d2:	bf18      	it	ne
    c6d4:	f801 cf01 	strbne.w	ip, [r1, #1]!
    c6d8:	1052      	asrs	r2, r2, #1
    c6da:	bf04      	itt	eq
    c6dc:	bc70      	popeq	{r4, r5, r6}
    c6de:	4770      	bxeq	lr
    c6e0:	f881 c001 	strb.w	ip, [r1, #1]
    c6e4:	f801 cf02 	strb.w	ip, [r1, #2]!
    c6e8:	1e52      	subs	r2, r2, #1
    c6ea:	d1f9      	bne.n	c6e0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    c6ec:	bc70      	pop	{r4, r5, r6}
    c6ee:	4770      	bx	lr
    c6f0:	2a04      	cmp	r2, #4
    c6f2:	d3e0      	bcc.n	c6b6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c6f4:	1f12      	subs	r2, r2, #4
    c6f6:	f843 5b04 	str.w	r5, [r3], #4
    c6fa:	2a04      	cmp	r2, #4
    c6fc:	d2fa      	bcs.n	c6f4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    c6fe:	e7da      	b.n	c6b6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c700:	f803 cb01 	strb.w	ip, [r3], #1
    c704:	1e52      	subs	r2, r2, #1
    c706:	d1fb      	bne.n	c700 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c708:	bc70      	pop	{r4, r5, r6}
    c70a:	4770      	bx	lr
    c70c:	f04f 30ff 	mov.w	r0, #4294967295
    c710:	4770      	bx	lr
    c712:	2000      	movs	r0, #0
    c714:	4770      	bx	lr
    c716:	2000      	movs	r0, #0
    c718:	4770      	bx	lr
    c71a:	f04f 30ff 	mov.w	r0, #4294967295
    c71e:	4770      	bx	lr
    c720:	4770      	bx	lr
    c722:	4770      	bx	lr
    c724:	2000      	movs	r0, #0
    c726:	4770      	bx	lr
    c728:	f04f 30ff 	mov.w	r0, #4294967295
    c72c:	4770      	bx	lr
    c72e:	f04f 30ff 	mov.w	r0, #4294967295
    c732:	4770      	bx	lr
    c734:	2100      	movs	r1, #0
    c736:	7001      	strb	r1, [r0, #0]
    c738:	4770      	bx	lr
    c73a:	f04f 30ff 	mov.w	r0, #4294967295
    c73e:	4770      	bx	lr
    c740:	f04f 30ff 	mov.w	r0, #4294967295
    c744:	4770      	bx	lr
    c746:	2000      	movs	r0, #0
    c748:	4770      	bx	lr
    c74a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c74e:	4606      	mov	r6, r0
    c750:	460c      	mov	r4, r1
    c752:	7808      	ldrb	r0, [r1, #0]
    c754:	7849      	ldrb	r1, [r1, #1]
    c756:	2700      	movs	r7, #0
    c758:	4408      	add	r0, r1
    c75a:	4691      	mov	r9, r2
    c75c:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    c760:	463d      	mov	r5, r7
    c762:	e00e      	b.n	c782 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x136>
    c764:	7a23      	ldrb	r3, [r4, #8]
    c766:	2b02      	cmp	r3, #2
    c768:	d200      	bcs.n	c76c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x120>
    c76a:	2302      	movs	r3, #2
    c76c:	79e2      	ldrb	r2, [r4, #7]
    c76e:	2a03      	cmp	r2, #3
    c770:	d200      	bcs.n	c774 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x128>
    c772:	2203      	movs	r2, #3
    c774:	79a1      	ldrb	r1, [r4, #6]
    c776:	7960      	ldrb	r0, [r4, #5]
    c778:	f000 ffb3 	bl	d6e2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    c77c:	1c6d      	adds	r5, r5, #1
    c77e:	4407      	add	r7, r0
    c780:	b2ed      	uxtb	r5, r5
    c782:	4545      	cmp	r5, r8
    c784:	d3ee      	bcc.n	c764 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x118>
    c786:	6830      	ldr	r0, [r6, #0]
    c788:	1cc0      	adds	r0, r0, #3
    c78a:	f020 0003 	bic.w	r0, r0, #3
    c78e:	6030      	str	r0, [r6, #0]
    c790:	f1b9 0f00 	cmp.w	r9, #0
    c794:	d000      	beq.n	c798 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x14c>
    c796:	2000      	movs	r0, #0
    c798:	463a      	mov	r2, r7
    c79a:	4641      	mov	r1, r8
    c79c:	f7f7 fe94 	bl	44c8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c7a0:	6831      	ldr	r1, [r6, #0]
    c7a2:	4408      	add	r0, r1
    c7a4:	6030      	str	r0, [r6, #0]
    c7a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000c7aa <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    c7aa:	2000      	movs	r0, #0
    c7ac:	4770      	bx	lr

0000c7ae <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    c7ae:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    c7b0:	4604      	mov	r4, r0
    c7b2:	1d01      	adds	r1, r0, #4
    c7b4:	4668      	mov	r0, sp
    c7b6:	f7f9 fb23 	bl	5e00 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    c7ba:	2800      	cmp	r0, #0
    c7bc:	d004      	beq.n	c7c8 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    c7be:	4669      	mov	r1, sp
    c7c0:	4620      	mov	r0, r4
    c7c2:	f000 f848 	bl	c856 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    c7c6:	2001      	movs	r0, #1
    c7c8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000c7ca <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c7ca:	b50e      	push	{r1, r2, r3, lr}
    c7cc:	4601      	mov	r1, r0
    c7ce:	4668      	mov	r0, sp
    c7d0:	f000 f827 	bl	c822 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c7d4:	4668      	mov	r0, sp
    c7d6:	f001 fc51 	bl	e07c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c7da:	bd0e      	pop	{r1, r2, r3, pc}

0000c7dc <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    c7dc:	b510      	push	{r4, lr}
    c7de:	4604      	mov	r4, r0
    c7e0:	4620      	mov	r0, r4
    c7e2:	f7f7 fbb1 	bl	3f48 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    c7e6:	2800      	cmp	r0, #0
    c7e8:	d006      	beq.n	c7f8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    c7ea:	78a1      	ldrb	r1, [r4, #2]
    c7ec:	7820      	ldrb	r0, [r4, #0]
    c7ee:	f000 f804 	bl	c7fa <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    c7f2:	2800      	cmp	r0, #0
    c7f4:	d0f4      	beq.n	c7e0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    c7f6:	2001      	movs	r0, #1
    c7f8:	bd10      	pop	{r4, pc}
    c7fa:	b570      	push	{r4, r5, r6, lr}
    c7fc:	460c      	mov	r4, r1
    c7fe:	4605      	mov	r5, r0
    c800:	f7f7 fbfe 	bl	4000 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    c804:	2800      	cmp	r0, #0
    c806:	d002      	beq.n	c80e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    c808:	2d3e      	cmp	r5, #62	; 0x3e
    c80a:	d001      	beq.n	c810 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    c80c:	2001      	movs	r0, #1
    c80e:	bd70      	pop	{r4, r5, r6, pc}
    c810:	2c12      	cmp	r4, #18
    c812:	d004      	beq.n	c81e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    c814:	4620      	mov	r0, r4
    c816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c81a:	f7f7 bc0d 	b.w	4038 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c81e:	2000      	movs	r0, #0
    c820:	bd70      	pop	{r4, r5, r6, pc}

0000c822 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c822:	880a      	ldrh	r2, [r1, #0]
    c824:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c828:	8002      	strh	r2, [r0, #0]
    c82a:	884a      	ldrh	r2, [r1, #2]
    c82c:	8042      	strh	r2, [r0, #2]
    c82e:	784a      	ldrb	r2, [r1, #1]
    c830:	0993      	lsrs	r3, r2, #6
    c832:	2200      	movs	r2, #0
    c834:	7142      	strb	r2, [r0, #5]
    c836:	784b      	ldrb	r3, [r1, #1]
    c838:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c83c:	b11b      	cbz	r3, c846 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c83e:	2b01      	cmp	r3, #1
    c840:	d005      	beq.n	c84e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c842:	2b02      	cmp	r3, #2
    c844:	d005      	beq.n	c852 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c846:	7102      	strb	r2, [r0, #4]
    c848:	1d09      	adds	r1, r1, #4
    c84a:	6081      	str	r1, [r0, #8]
    c84c:	4770      	bx	lr
    c84e:	2201      	movs	r2, #1
    c850:	e7f9      	b.n	c846 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c852:	2202      	movs	r2, #2
    c854:	e7f7      	b.n	c846 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c856 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c856:	b510      	push	{r4, lr}
    c858:	460c      	mov	r4, r1
    c85a:	7809      	ldrb	r1, [r1, #0]
    c85c:	7001      	strb	r1, [r0, #0]
    c85e:	7841      	ldrb	r1, [r0, #1]
    c860:	f021 010f 	bic.w	r1, r1, #15
    c864:	7041      	strb	r1, [r0, #1]
    c866:	8822      	ldrh	r2, [r4, #0]
    c868:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c86c:	4311      	orrs	r1, r2
    c86e:	7041      	strb	r1, [r0, #1]
    c870:	78a2      	ldrb	r2, [r4, #2]
    c872:	7082      	strb	r2, [r0, #2]
    c874:	8862      	ldrh	r2, [r4, #2]
    c876:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    c87a:	0a12      	lsrs	r2, r2, #8
    c87c:	70c2      	strb	r2, [r0, #3]
    c87e:	7041      	strb	r1, [r0, #1]
    c880:	7922      	ldrb	r2, [r4, #4]
    c882:	f002 0203 	and.w	r2, r2, #3
    c886:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    c88a:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    c88e:	7041      	strb	r1, [r0, #1]
    c890:	7962      	ldrb	r2, [r4, #5]
    c892:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    c896:	7041      	strb	r1, [r0, #1]
    c898:	68a1      	ldr	r1, [r4, #8]
    c89a:	1d02      	adds	r2, r0, #4
    c89c:	4291      	cmp	r1, r2
    c89e:	d006      	beq.n	c8ae <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    c8a0:	8862      	ldrh	r2, [r4, #2]
    c8a2:	2afb      	cmp	r2, #251	; 0xfb
    c8a4:	d300      	bcc.n	c8a8 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    c8a6:	22fb      	movs	r2, #251	; 0xfb
    c8a8:	1d00      	adds	r0, r0, #4
    c8aa:	f7ff fe55 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c8ae:	78a0      	ldrb	r0, [r4, #2]
    c8b0:	1d00      	adds	r0, r0, #4
    c8b2:	b2c0      	uxtb	r0, r0
    c8b4:	bd10      	pop	{r4, pc}

0000c8b6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    c8b6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c8ba:	4604      	mov	r4, r0
    c8bc:	f891 c000 	ldrb.w	ip, [r1]
    c8c0:	2000      	movs	r0, #0
    c8c2:	270c      	movs	r7, #12
    c8c4:	223e      	movs	r2, #62	; 0x3e
    c8c6:	2612      	movs	r6, #18
    c8c8:	25ff      	movs	r5, #255	; 0xff
    c8ca:	f04f 0b14 	mov.w	fp, #20
    c8ce:	f04f 0e13 	mov.w	lr, #19
    c8d2:	f04f 0a05 	mov.w	sl, #5
    c8d6:	f104 030d 	add.w	r3, r4, #13
    c8da:	f04f 0911 	mov.w	r9, #17
    c8de:	f1bc 0f20 	cmp.w	ip, #32
    c8e2:	d272      	bcs.n	c9ca <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    c8e4:	e8df f00c 	tbb	[pc, ip]
    c8e8:	29271071 	.word	0x29271071
    c8ec:	a46dfc2e 	.word	0xa46dfc2e
    c8f0:	fbdac0ae 	.word	0xfbdac0ae
    c8f4:	f7f8f9fa 	.word	0xf7f8f9fa
    c8f8:	507171f6 	.word	0x507171f6
    c8fc:	f3f4f572 	.word	0xf3f4f572
    c900:	eff0f1f2 	.word	0xeff0f1f2
    c904:	ec71edee 	.word	0xec71edee
    c908:	7027      	strb	r7, [r4, #0]
    c90a:	7908      	ldrb	r0, [r1, #4]
    c90c:	70a0      	strb	r0, [r4, #2]
    c90e:	7948      	ldrb	r0, [r1, #5]
    c910:	70e0      	strb	r0, [r4, #3]
    c912:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c916:	0a00      	lsrs	r0, r0, #8
    c918:	7120      	strb	r0, [r4, #4]
    c91a:	79c8      	ldrb	r0, [r1, #7]
    c91c:	7160      	strb	r0, [r4, #5]
    c91e:	7a08      	ldrb	r0, [r1, #8]
    c920:	71a0      	strb	r0, [r4, #6]
    c922:	8908      	ldrh	r0, [r1, #8]
    c924:	0a00      	lsrs	r0, r0, #8
    c926:	71e0      	strb	r0, [r4, #7]
    c928:	7a88      	ldrb	r0, [r1, #10]
    c92a:	7220      	strb	r0, [r4, #8]
    c92c:	8948      	ldrh	r0, [r1, #10]
    c92e:	0a00      	lsrs	r0, r0, #8
    c930:	7260      	strb	r0, [r4, #9]
    c932:	2008      	movs	r0, #8
    c934:	e154      	b.n	cbe0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    c936:	2010      	movs	r0, #16
    c938:	e000      	b.n	c93c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x86>
    c93a:	201a      	movs	r0, #26
    c93c:	7020      	strb	r0, [r4, #0]
    c93e:	7908      	ldrb	r0, [r1, #4]
    c940:	70a0      	strb	r0, [r4, #2]
    c942:	e154      	b.n	cbee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x338>
    c944:	7022      	strb	r2, [r4, #0]
    c946:	2002      	movs	r0, #2
    c948:	70a0      	strb	r0, [r4, #2]
    c94a:	7908      	ldrb	r0, [r1, #4]
    c94c:	70e0      	strb	r0, [r4, #3]
    c94e:	7b88      	ldrb	r0, [r1, #14]
    c950:	7120      	strb	r0, [r4, #4]
    c952:	7948      	ldrb	r0, [r1, #5]
    c954:	7160      	strb	r0, [r4, #5]
    c956:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c95a:	f8c4 0006 	str.w	r0, [r4, #6]
    c95e:	8948      	ldrh	r0, [r1, #10]
    c960:	8160      	strh	r0, [r4, #10]
    c962:	7b08      	ldrb	r0, [r1, #12]
    c964:	7320      	strb	r0, [r4, #12]
    c966:	7b0e      	ldrb	r6, [r1, #12]
    c968:	1d0d      	adds	r5, r1, #4
    c96a:	2e1f      	cmp	r6, #31
    c96c:	d300      	bcc.n	c970 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xba>
    c96e:	261f      	movs	r6, #31
    c970:	4618      	mov	r0, r3
    c972:	4632      	mov	r2, r6
    c974:	f105 010b 	add.w	r1, r5, #11
    c978:	f7ff fdee 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c97c:	360d      	adds	r6, #13
    c97e:	7a69      	ldrb	r1, [r5, #9]
    c980:	55a1      	strb	r1, [r4, r6]
    c982:	1e76      	subs	r6, r6, #1
    c984:	b2f0      	uxtb	r0, r6
    c986:	e129      	b.n	cbdc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    c988:	7022      	strb	r2, [r4, #0]
    c98a:	200b      	movs	r0, #11
    c98c:	70a0      	strb	r0, [r4, #2]
    c98e:	7908      	ldrb	r0, [r1, #4]
    c990:	70e0      	strb	r0, [r4, #3]
    c992:	7948      	ldrb	r0, [r1, #5]
    c994:	7120      	strb	r0, [r4, #4]
    c996:	7988      	ldrb	r0, [r1, #6]
    c998:	7160      	strb	r0, [r4, #5]
    c99a:	f8d1 0007 	ldr.w	r0, [r1, #7]
    c99e:	f8c4 0006 	str.w	r0, [r4, #6]
    c9a2:	f8b1 000b 	ldrh.w	r0, [r1, #11]
    c9a6:	8160      	strh	r0, [r4, #10]
    c9a8:	7b48      	ldrb	r0, [r1, #13]
    c9aa:	7320      	strb	r0, [r4, #12]
    c9ac:	f8d1 000e 	ldr.w	r0, [r1, #14]
    c9b0:	f8c4 000d 	str.w	r0, [r4, #13]
    c9b4:	8a48      	ldrh	r0, [r1, #18]
    c9b6:	f8a4 0011 	strh.w	r0, [r4, #17]
    c9ba:	7d08      	ldrb	r0, [r1, #20]
    c9bc:	74e0      	strb	r0, [r4, #19]
    c9be:	4630      	mov	r0, r6
    c9c0:	e10e      	b.n	cbe0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    c9c2:	4620      	mov	r0, r4
    c9c4:	f000 f98d 	bl	cce2 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    c9c8:	e108      	b.n	cbdc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    c9ca:	e10b      	b.n	cbe4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    c9cc:	7022      	strb	r2, [r4, #0]
    c9ce:	200a      	movs	r0, #10
    c9d0:	70a0      	strb	r0, [r4, #2]
    c9d2:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    c9d6:	70e0      	strb	r0, [r4, #3]
    c9d8:	7888      	ldrb	r0, [r1, #2]
    c9da:	7120      	strb	r0, [r4, #4]
    c9dc:	8848      	ldrh	r0, [r1, #2]
    c9de:	0a00      	lsrs	r0, r0, #8
    c9e0:	7160      	strb	r0, [r4, #5]
    c9e2:	7908      	ldrb	r0, [r1, #4]
    c9e4:	71a0      	strb	r0, [r4, #6]
    c9e6:	7948      	ldrb	r0, [r1, #5]
    c9e8:	71e0      	strb	r0, [r4, #7]
    c9ea:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c9ee:	60a0      	str	r0, [r4, #8]
    c9f0:	8948      	ldrh	r0, [r1, #10]
    c9f2:	81a0      	strh	r0, [r4, #12]
    c9f4:	68c8      	ldr	r0, [r1, #12]
    c9f6:	f8c4 000e 	str.w	r0, [r4, #14]
    c9fa:	8a08      	ldrh	r0, [r1, #16]
    c9fc:	8260      	strh	r0, [r4, #18]
    c9fe:	f8d1 0012 	ldr.w	r0, [r1, #18]
    ca02:	6160      	str	r0, [r4, #20]
    ca04:	8ac8      	ldrh	r0, [r1, #22]
    ca06:	8320      	strh	r0, [r4, #24]
    ca08:	7e08      	ldrb	r0, [r1, #24]
    ca0a:	76a0      	strb	r0, [r4, #26]
    ca0c:	8b08      	ldrh	r0, [r1, #24]
    ca0e:	0a00      	lsrs	r0, r0, #8
    ca10:	76e0      	strb	r0, [r4, #27]
    ca12:	7e88      	ldrb	r0, [r1, #26]
    ca14:	7720      	strb	r0, [r4, #28]
    ca16:	8b48      	ldrh	r0, [r1, #26]
    ca18:	0a00      	lsrs	r0, r0, #8
    ca1a:	7760      	strb	r0, [r4, #29]
    ca1c:	7f08      	ldrb	r0, [r1, #28]
    ca1e:	77a0      	strb	r0, [r4, #30]
    ca20:	8b88      	ldrh	r0, [r1, #28]
    ca22:	0a00      	lsrs	r0, r0, #8
    ca24:	77e0      	strb	r0, [r4, #31]
    ca26:	7f88      	ldrb	r0, [r1, #30]
    ca28:	f884 0020 	strb.w	r0, [r4, #32]
    ca2c:	201f      	movs	r0, #31
    ca2e:	e0d7      	b.n	cbe0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    ca30:	7022      	strb	r2, [r4, #0]
    ca32:	f884 b002 	strb.w	fp, [r4, #2]
    ca36:	7908      	ldrb	r0, [r1, #4]
    ca38:	70e0      	strb	r0, [r4, #3]
    ca3a:	8888      	ldrh	r0, [r1, #4]
    ca3c:	0a00      	lsrs	r0, r0, #8
    ca3e:	7120      	strb	r0, [r4, #4]
    ca40:	7988      	ldrb	r0, [r1, #6]
    ca42:	e0ed      	b.n	cc20 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    ca44:	7022      	strb	r2, [r4, #0]
    ca46:	2004      	movs	r0, #4
    ca48:	70a0      	strb	r0, [r4, #2]
    ca4a:	7908      	ldrb	r0, [r1, #4]
    ca4c:	70e0      	strb	r0, [r4, #3]
    ca4e:	7988      	ldrb	r0, [r1, #6]
    ca50:	7120      	strb	r0, [r4, #4]
    ca52:	88c8      	ldrh	r0, [r1, #6]
    ca54:	0a00      	lsrs	r0, r0, #8
    ca56:	7160      	strb	r0, [r4, #5]
    ca58:	6888      	ldr	r0, [r1, #8]
    ca5a:	f8c4 0006 	str.w	r0, [r4, #6]
    ca5e:	68c8      	ldr	r0, [r1, #12]
    ca60:	f8c4 000a 	str.w	r0, [r4, #10]
    ca64:	200c      	movs	r0, #12
    ca66:	e0bb      	b.n	cbe0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    ca68:	7022      	strb	r2, [r4, #0]
    ca6a:	2003      	movs	r0, #3
    ca6c:	70a0      	strb	r0, [r4, #2]
    ca6e:	7908      	ldrb	r0, [r1, #4]
    ca70:	70e0      	strb	r0, [r4, #3]
    ca72:	7988      	ldrb	r0, [r1, #6]
    ca74:	7120      	strb	r0, [r4, #4]
    ca76:	88c8      	ldrh	r0, [r1, #6]
    ca78:	0a00      	lsrs	r0, r0, #8
    ca7a:	7160      	strb	r0, [r4, #5]
    ca7c:	7a08      	ldrb	r0, [r1, #8]
    ca7e:	71a0      	strb	r0, [r4, #6]
    ca80:	8908      	ldrh	r0, [r1, #8]
    ca82:	0a00      	lsrs	r0, r0, #8
    ca84:	71e0      	strb	r0, [r4, #7]
    ca86:	7a88      	ldrb	r0, [r1, #10]
    ca88:	7220      	strb	r0, [r4, #8]
    ca8a:	8948      	ldrh	r0, [r1, #10]
    ca8c:	0a00      	lsrs	r0, r0, #8
    ca8e:	7260      	strb	r0, [r4, #9]
    ca90:	7b08      	ldrb	r0, [r1, #12]
    ca92:	72a0      	strb	r0, [r4, #10]
    ca94:	8988      	ldrh	r0, [r1, #12]
    ca96:	0a00      	lsrs	r0, r0, #8
    ca98:	72e0      	strb	r0, [r4, #11]
    ca9a:	e120      	b.n	ccde <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    ca9c:	7022      	strb	r2, [r4, #0]
    ca9e:	f884 a002 	strb.w	sl, [r4, #2]
    caa2:	7908      	ldrb	r0, [r1, #4]
    caa4:	70e0      	strb	r0, [r4, #3]
    caa6:	8888      	ldrh	r0, [r1, #4]
    caa8:	0a00      	lsrs	r0, r0, #8
    caaa:	7120      	strb	r0, [r4, #4]
    caac:	f8d1 0006 	ldr.w	r0, [r1, #6]
    cab0:	f8c4 0005 	str.w	r0, [r4, #5]
    cab4:	f8d1 000a 	ldr.w	r0, [r1, #10]
    cab8:	f8c4 0009 	str.w	r0, [r4, #9]
    cabc:	89c8      	ldrh	r0, [r1, #14]
    cabe:	e010      	b.n	cae2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22c>
    cac0:	e0fa      	b.n	ccb8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x402>
    cac2:	e0ce      	b.n	cc62 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
    cac4:	e0af      	b.n	cc26 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    cac6:	e0da      	b.n	cc7e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c8>
    cac8:	e0e8      	b.n	cc9c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e6>
    caca:	e0a1      	b.n	cc10 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    cacc:	e08c      	b.n	cbe8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    cace:	e090      	b.n	cbf2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33c>
    cad0:	e033      	b.n	cb3a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    cad2:	e02f      	b.n	cb34 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    cad4:	e043      	b.n	cb5e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a8>
    cad6:	e03d      	b.n	cb54 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29e>
    cad8:	e021      	b.n	cb1e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x268>
    cada:	e015      	b.n	cb08 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x252>
    cadc:	e008      	b.n	caf0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    cade:	e004      	b.n	caea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    cae0:	e046      	b.n	cb70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
    cae2:	f8a4 000d 	strh.w	r0, [r4, #13]
    cae6:	200d      	movs	r0, #13
    cae8:	e07a      	b.n	cbe0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    caea:	f884 9000 	strb.w	r9, [r4]
    caee:	e038      	b.n	cb62 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ac>
    caf0:	f884 a000 	strb.w	sl, [r4]
    caf4:	7908      	ldrb	r0, [r1, #4]
    caf6:	70a0      	strb	r0, [r4, #2]
    caf8:	7948      	ldrb	r0, [r1, #5]
    cafa:	70e0      	strb	r0, [r4, #3]
    cafc:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    cb00:	0a00      	lsrs	r0, r0, #8
    cb02:	7120      	strb	r0, [r4, #4]
    cb04:	79c8      	ldrb	r0, [r1, #7]
    cb06:	e08b      	b.n	cc20 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    cb08:	2008      	movs	r0, #8
    cb0a:	7020      	strb	r0, [r4, #0]
    cb0c:	7908      	ldrb	r0, [r1, #4]
    cb0e:	70a0      	strb	r0, [r4, #2]
    cb10:	7988      	ldrb	r0, [r1, #6]
    cb12:	70e0      	strb	r0, [r4, #3]
    cb14:	88c8      	ldrh	r0, [r1, #6]
    cb16:	0a00      	lsrs	r0, r0, #8
    cb18:	7120      	strb	r0, [r4, #4]
    cb1a:	7a08      	ldrb	r0, [r1, #8]
    cb1c:	e080      	b.n	cc20 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    cb1e:	2030      	movs	r0, #48	; 0x30
    cb20:	7020      	strb	r0, [r4, #0]
    cb22:	7908      	ldrb	r0, [r1, #4]
    cb24:	70a0      	strb	r0, [r4, #2]
    cb26:	7988      	ldrb	r0, [r1, #6]
    cb28:	70e0      	strb	r0, [r4, #3]
    cb2a:	88c8      	ldrh	r0, [r1, #6]
    cb2c:	0a00      	lsrs	r0, r0, #8
    cb2e:	7120      	strb	r0, [r4, #4]
    cb30:	2003      	movs	r0, #3
    cb32:	e055      	b.n	cbe0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cb34:	7022      	strb	r2, [r4, #0]
    cb36:	2007      	movs	r0, #7
    cb38:	e077      	b.n	cc2a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    cb3a:	7022      	strb	r2, [r4, #0]
    cb3c:	70a7      	strb	r7, [r4, #2]
    cb3e:	7908      	ldrb	r0, [r1, #4]
    cb40:	70e0      	strb	r0, [r4, #3]
    cb42:	7988      	ldrb	r0, [r1, #6]
    cb44:	7120      	strb	r0, [r4, #4]
    cb46:	88c8      	ldrh	r0, [r1, #6]
    cb48:	0a00      	lsrs	r0, r0, #8
    cb4a:	7160      	strb	r0, [r4, #5]
    cb4c:	7a08      	ldrb	r0, [r1, #8]
    cb4e:	71a0      	strb	r0, [r4, #6]
    cb50:	7a48      	ldrb	r0, [r1, #9]
    cb52:	e05a      	b.n	cc0a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    cb54:	4620      	mov	r0, r4
    cb56:	1d09      	adds	r1, r1, #4
    cb58:	f7f7 fa24 	bl	3fa4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xac>
    cb5c:	e03e      	b.n	cbdc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    cb5e:	2057      	movs	r0, #87	; 0x57
    cb60:	7020      	strb	r0, [r4, #0]
    cb62:	7908      	ldrb	r0, [r1, #4]
    cb64:	70a0      	strb	r0, [r4, #2]
    cb66:	8888      	ldrh	r0, [r1, #4]
    cb68:	0a00      	lsrs	r0, r0, #8
    cb6a:	70e0      	strb	r0, [r4, #3]
    cb6c:	2002      	movs	r0, #2
    cb6e:	e037      	b.n	cbe0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cb70:	7022      	strb	r2, [r4, #0]
    cb72:	220d      	movs	r2, #13
    cb74:	70a2      	strb	r2, [r4, #2]
    cb76:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    cb7a:	70e2      	strb	r2, [r4, #3]
    cb7c:	894a      	ldrh	r2, [r1, #10]
    cb7e:	80a2      	strh	r2, [r4, #4]
    cb80:	784a      	ldrb	r2, [r1, #1]
    cb82:	71a2      	strb	r2, [r4, #6]
    cb84:	f8d1 2002 	ldr.w	r2, [r1, #2]
    cb88:	f8c4 2007 	str.w	r2, [r4, #7]
    cb8c:	88ca      	ldrh	r2, [r1, #6]
    cb8e:	f8a4 200b 	strh.w	r2, [r4, #11]
    cb92:	7b0a      	ldrb	r2, [r1, #12]
    cb94:	4620      	mov	r0, r4
    cb96:	7362      	strb	r2, [r4, #13]
    cb98:	7b4a      	ldrb	r2, [r1, #13]
    cb9a:	7382      	strb	r2, [r0, #14]
    cb9c:	7b8a      	ldrb	r2, [r1, #14]
    cb9e:	73c2      	strb	r2, [r0, #15]
    cba0:	7e8a      	ldrb	r2, [r1, #26]
    cba2:	7402      	strb	r2, [r0, #16]
    cba4:	7a4a      	ldrb	r2, [r1, #9]
    cba6:	7442      	strb	r2, [r0, #17]
    cba8:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    cbac:	f8ad 2000 	strh.w	r2, [sp]
    cbb0:	8242      	strh	r2, [r0, #18]
    cbb2:	7cca      	ldrb	r2, [r1, #19]
    cbb4:	7502      	strb	r2, [r0, #20]
    cbb6:	694a      	ldr	r2, [r1, #20]
    cbb8:	f8c0 2015 	str.w	r2, [r0, #21]
    cbbc:	8b0a      	ldrh	r2, [r1, #24]
    cbbe:	f8a0 2019 	strh.w	r2, [r0, #25]
    cbc2:	7a0a      	ldrb	r2, [r1, #8]
    cbc4:	76c2      	strb	r2, [r0, #27]
    cbc6:	7a0d      	ldrb	r5, [r1, #8]
    cbc8:	2de5      	cmp	r5, #229	; 0xe5
    cbca:	d300      	bcc.n	cbce <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x318>
    cbcc:	25e5      	movs	r5, #229	; 0xe5
    cbce:	462a      	mov	r2, r5
    cbd0:	301c      	adds	r0, #28
    cbd2:	311c      	adds	r1, #28
    cbd4:	f7ff fcc0 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cbd8:	351a      	adds	r5, #26
    cbda:	b2e8      	uxtb	r0, r5
    cbdc:	2800      	cmp	r0, #0
    cbde:	d001      	beq.n	cbe4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    cbe0:	7060      	strb	r0, [r4, #1]
    cbe2:	1c80      	adds	r0, r0, #2
    cbe4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cbe8:	7022      	strb	r2, [r4, #0]
    cbea:	f884 9002 	strb.w	r9, [r4, #2]
    cbee:	2001      	movs	r0, #1
    cbf0:	e7f6      	b.n	cbe0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cbf2:	7022      	strb	r2, [r4, #0]
    cbf4:	70a6      	strb	r6, [r4, #2]
    cbf6:	7908      	ldrb	r0, [r1, #4]
    cbf8:	70e0      	strb	r0, [r4, #3]
    cbfa:	7948      	ldrb	r0, [r1, #5]
    cbfc:	7120      	strb	r0, [r4, #4]
    cbfe:	7988      	ldrb	r0, [r1, #6]
    cc00:	7160      	strb	r0, [r4, #5]
    cc02:	88c8      	ldrh	r0, [r1, #6]
    cc04:	0a00      	lsrs	r0, r0, #8
    cc06:	71a0      	strb	r0, [r4, #6]
    cc08:	7a08      	ldrb	r0, [r1, #8]
    cc0a:	71e0      	strb	r0, [r4, #7]
    cc0c:	2006      	movs	r0, #6
    cc0e:	e7e7      	b.n	cbe0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cc10:	7025      	strb	r5, [r4, #0]
    cc12:	20a1      	movs	r0, #161	; 0xa1
    cc14:	70a0      	strb	r0, [r4, #2]
    cc16:	7908      	ldrb	r0, [r1, #4]
    cc18:	70e0      	strb	r0, [r4, #3]
    cc1a:	7948      	ldrb	r0, [r1, #5]
    cc1c:	7120      	strb	r0, [r4, #4]
    cc1e:	2000      	movs	r0, #0
    cc20:	7160      	strb	r0, [r4, #5]
    cc22:	2004      	movs	r0, #4
    cc24:	e7dc      	b.n	cbe0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cc26:	7025      	strb	r5, [r4, #0]
    cc28:	20a2      	movs	r0, #162	; 0xa2
    cc2a:	70a0      	strb	r0, [r4, #2]
    cc2c:	7908      	ldrb	r0, [r1, #4]
    cc2e:	70e0      	strb	r0, [r4, #3]
    cc30:	8888      	ldrh	r0, [r1, #4]
    cc32:	0a00      	lsrs	r0, r0, #8
    cc34:	7120      	strb	r0, [r4, #4]
    cc36:	7988      	ldrb	r0, [r1, #6]
    cc38:	7160      	strb	r0, [r4, #5]
    cc3a:	88c8      	ldrh	r0, [r1, #6]
    cc3c:	0a00      	lsrs	r0, r0, #8
    cc3e:	71a0      	strb	r0, [r4, #6]
    cc40:	7a08      	ldrb	r0, [r1, #8]
    cc42:	71e0      	strb	r0, [r4, #7]
    cc44:	8908      	ldrh	r0, [r1, #8]
    cc46:	0a00      	lsrs	r0, r0, #8
    cc48:	7220      	strb	r0, [r4, #8]
    cc4a:	7a88      	ldrb	r0, [r1, #10]
    cc4c:	7260      	strb	r0, [r4, #9]
    cc4e:	8948      	ldrh	r0, [r1, #10]
    cc50:	0a00      	lsrs	r0, r0, #8
    cc52:	72a0      	strb	r0, [r4, #10]
    cc54:	7b08      	ldrb	r0, [r1, #12]
    cc56:	72e0      	strb	r0, [r4, #11]
    cc58:	8988      	ldrh	r0, [r1, #12]
    cc5a:	0a00      	lsrs	r0, r0, #8
    cc5c:	7320      	strb	r0, [r4, #12]
    cc5e:	200b      	movs	r0, #11
    cc60:	e7be      	b.n	cbe0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cc62:	7025      	strb	r5, [r4, #0]
    cc64:	20a3      	movs	r0, #163	; 0xa3
    cc66:	70a0      	strb	r0, [r4, #2]
    cc68:	7908      	ldrb	r0, [r1, #4]
    cc6a:	70e0      	strb	r0, [r4, #3]
    cc6c:	8888      	ldrh	r0, [r1, #4]
    cc6e:	0a00      	lsrs	r0, r0, #8
    cc70:	7120      	strb	r0, [r4, #4]
    cc72:	7988      	ldrb	r0, [r1, #6]
    cc74:	7160      	strb	r0, [r4, #5]
    cc76:	79c8      	ldrb	r0, [r1, #7]
    cc78:	71a0      	strb	r0, [r4, #6]
    cc7a:	2005      	movs	r0, #5
    cc7c:	e7b0      	b.n	cbe0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cc7e:	7022      	strb	r2, [r4, #0]
    cc80:	f884 e002 	strb.w	lr, [r4, #2]
    cc84:	7908      	ldrb	r0, [r1, #4]
    cc86:	70e0      	strb	r0, [r4, #3]
    cc88:	7948      	ldrb	r0, [r1, #5]
    cc8a:	7120      	strb	r0, [r4, #4]
    cc8c:	f8d1 0006 	ldr.w	r0, [r1, #6]
    cc90:	f8c4 0005 	str.w	r0, [r4, #5]
    cc94:	8948      	ldrh	r0, [r1, #10]
    cc96:	f8a4 0009 	strh.w	r0, [r4, #9]
    cc9a:	e020      	b.n	ccde <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    cc9c:	7025      	strb	r5, [r4, #0]
    cc9e:	20a4      	movs	r0, #164	; 0xa4
    cca0:	70a0      	strb	r0, [r4, #2]
    cca2:	7908      	ldrb	r0, [r1, #4]
    cca4:	70e0      	strb	r0, [r4, #3]
    cca6:	8888      	ldrh	r0, [r1, #4]
    cca8:	0a00      	lsrs	r0, r0, #8
    ccaa:	7120      	strb	r0, [r4, #4]
    ccac:	7988      	ldrb	r0, [r1, #6]
    ccae:	7160      	strb	r0, [r4, #5]
    ccb0:	79c8      	ldrb	r0, [r1, #7]
    ccb2:	71a0      	strb	r0, [r4, #6]
    ccb4:	2007      	movs	r0, #7
    ccb6:	e793      	b.n	cbe0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    ccb8:	7025      	strb	r5, [r4, #0]
    ccba:	2080      	movs	r0, #128	; 0x80
    ccbc:	70a0      	strb	r0, [r4, #2]
    ccbe:	888a      	ldrh	r2, [r1, #4]
    ccc0:	f8a4 2003 	strh.w	r2, [r4, #3]
    ccc4:	88ca      	ldrh	r2, [r1, #6]
    ccc6:	f8a4 2005 	strh.w	r2, [r4, #5]
    ccca:	7a0a      	ldrb	r2, [r1, #8]
    cccc:	71e2      	strb	r2, [r4, #7]
    ccce:	7a4a      	ldrb	r2, [r1, #9]
    ccd0:	8122      	strh	r2, [r4, #8]
    ccd2:	7a8a      	ldrb	r2, [r1, #10]
    ccd4:	72a2      	strb	r2, [r4, #10]
    ccd6:	7ac9      	ldrb	r1, [r1, #11]
    ccd8:	f001 0101 	and.w	r1, r1, #1
    ccdc:	72e1      	strb	r1, [r4, #11]
    ccde:	200a      	movs	r0, #10
    cce0:	e77e      	b.n	cbe0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>

0000cce2 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    cce2:	223e      	movs	r2, #62	; 0x3e
    cce4:	7002      	strb	r2, [r0, #0]
    cce6:	2201      	movs	r2, #1
    cce8:	7082      	strb	r2, [r0, #2]
    ccea:	790a      	ldrb	r2, [r1, #4]
    ccec:	70c2      	strb	r2, [r0, #3]
    ccee:	798a      	ldrb	r2, [r1, #6]
    ccf0:	7102      	strb	r2, [r0, #4]
    ccf2:	88ca      	ldrh	r2, [r1, #6]
    ccf4:	0a12      	lsrs	r2, r2, #8
    ccf6:	7142      	strb	r2, [r0, #5]
    ccf8:	7a0a      	ldrb	r2, [r1, #8]
    ccfa:	7182      	strb	r2, [r0, #6]
    ccfc:	7a4a      	ldrb	r2, [r1, #9]
    ccfe:	71c2      	strb	r2, [r0, #7]
    cd00:	f8d1 200a 	ldr.w	r2, [r1, #10]
    cd04:	6082      	str	r2, [r0, #8]
    cd06:	89ca      	ldrh	r2, [r1, #14]
    cd08:	8182      	strh	r2, [r0, #12]
    cd0a:	7c0a      	ldrb	r2, [r1, #16]
    cd0c:	7382      	strb	r2, [r0, #14]
    cd0e:	8a0a      	ldrh	r2, [r1, #16]
    cd10:	0a12      	lsrs	r2, r2, #8
    cd12:	73c2      	strb	r2, [r0, #15]
    cd14:	7c8a      	ldrb	r2, [r1, #18]
    cd16:	7402      	strb	r2, [r0, #16]
    cd18:	8a4a      	ldrh	r2, [r1, #18]
    cd1a:	0a12      	lsrs	r2, r2, #8
    cd1c:	7442      	strb	r2, [r0, #17]
    cd1e:	7d0a      	ldrb	r2, [r1, #20]
    cd20:	7482      	strb	r2, [r0, #18]
    cd22:	8a8a      	ldrh	r2, [r1, #20]
    cd24:	0a12      	lsrs	r2, r2, #8
    cd26:	74c2      	strb	r2, [r0, #19]
    cd28:	7d89      	ldrb	r1, [r1, #22]
    cd2a:	7501      	strb	r1, [r0, #20]
    cd2c:	2013      	movs	r0, #19
    cd2e:	4770      	bx	lr

0000cd30 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    cd30:	223e      	movs	r2, #62	; 0x3e
    cd32:	7002      	strb	r2, [r0, #0]
    cd34:	2201      	movs	r2, #1
    cd36:	7082      	strb	r2, [r0, #2]
    cd38:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    cd3c:	70c2      	strb	r2, [r0, #3]
    cd3e:	788a      	ldrb	r2, [r1, #2]
    cd40:	7102      	strb	r2, [r0, #4]
    cd42:	884a      	ldrh	r2, [r1, #2]
    cd44:	0a12      	lsrs	r2, r2, #8
    cd46:	7142      	strb	r2, [r0, #5]
    cd48:	790a      	ldrb	r2, [r1, #4]
    cd4a:	7182      	strb	r2, [r0, #6]
    cd4c:	794a      	ldrb	r2, [r1, #5]
    cd4e:	71c2      	strb	r2, [r0, #7]
    cd50:	f8d1 2006 	ldr.w	r2, [r1, #6]
    cd54:	6082      	str	r2, [r0, #8]
    cd56:	894a      	ldrh	r2, [r1, #10]
    cd58:	8182      	strh	r2, [r0, #12]
    cd5a:	7e0a      	ldrb	r2, [r1, #24]
    cd5c:	7382      	strb	r2, [r0, #14]
    cd5e:	8b0a      	ldrh	r2, [r1, #24]
    cd60:	0a12      	lsrs	r2, r2, #8
    cd62:	73c2      	strb	r2, [r0, #15]
    cd64:	7e8a      	ldrb	r2, [r1, #26]
    cd66:	7402      	strb	r2, [r0, #16]
    cd68:	8b4a      	ldrh	r2, [r1, #26]
    cd6a:	0a12      	lsrs	r2, r2, #8
    cd6c:	7442      	strb	r2, [r0, #17]
    cd6e:	7f0a      	ldrb	r2, [r1, #28]
    cd70:	7482      	strb	r2, [r0, #18]
    cd72:	8b8a      	ldrh	r2, [r1, #28]
    cd74:	0a12      	lsrs	r2, r2, #8
    cd76:	74c2      	strb	r2, [r0, #19]
    cd78:	7f89      	ldrb	r1, [r1, #30]
    cd7a:	7501      	strb	r1, [r0, #20]
    cd7c:	2113      	movs	r1, #19
    cd7e:	7041      	strb	r1, [r0, #1]
    cd80:	4608      	mov	r0, r1
    cd82:	4770      	bx	lr

0000cd84 <sdc_hci_data_get>:
    cd84:	b510      	push	{r4, lr}
    cd86:	b120      	cbz	r0, cd92 <sdc_hci_data_get+0xe>
    cd88:	f7ff fd11 	bl	c7ae <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    cd8c:	b120      	cbz	r0, cd98 <sdc_hci_data_get+0x14>
    cd8e:	2000      	movs	r0, #0
    cd90:	bd10      	pop	{r4, pc}
    cd92:	f06f 0015 	mvn.w	r0, #21
    cd96:	bd10      	pop	{r4, pc}
    cd98:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cd9c:	bd10      	pop	{r4, pc}

0000cd9e <sdc_hci_data_put>:
    cd9e:	b510      	push	{r4, lr}
    cda0:	f06f 0415 	mvn.w	r4, #21
    cda4:	b120      	cbz	r0, cdb0 <sdc_hci_data_put+0x12>
    cda6:	f7ff fd10 	bl	c7ca <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    cdaa:	b108      	cbz	r0, cdb0 <sdc_hci_data_put+0x12>
    cdac:	2000      	movs	r0, #0
    cdae:	bd10      	pop	{r4, pc}
    cdb0:	4620      	mov	r0, r4
    cdb2:	bd10      	pop	{r4, pc}

0000cdb4 <sdc_hci_evt_get>:
    cdb4:	b510      	push	{r4, lr}
    cdb6:	b120      	cbz	r0, cdc2 <sdc_hci_evt_get+0xe>
    cdb8:	f7ff fd10 	bl	c7dc <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    cdbc:	b120      	cbz	r0, cdc8 <sdc_hci_evt_get+0x14>
    cdbe:	2000      	movs	r0, #0
    cdc0:	bd10      	pop	{r4, pc}
    cdc2:	f06f 0015 	mvn.w	r0, #21
    cdc6:	bd10      	pop	{r4, pc}
    cdc8:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cdcc:	bd10      	pop	{r4, pc}

0000cdce <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    cdce:	f002 b98e 	b.w	f0ee <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000cdd2 <sdc_hci_cmd_cb_read_transmit_power_level>:
    cdd2:	f002 b9cd 	b.w	f170 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000cdd6 <sdc_hci_cmd_cb_set_event_mask>:
    cdd6:	b510      	push	{r4, lr}
    cdd8:	f7f7 f942 	bl	4060 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    cddc:	2000      	movs	r0, #0
    cdde:	bd10      	pop	{r4, pc}

0000cde0 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    cde0:	b510      	push	{r4, lr}
    cde2:	f7f7 f94b 	bl	407c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    cde6:	2000      	movs	r0, #0
    cde8:	bd10      	pop	{r4, pc}

0000cdea <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    cdea:	f002 b9dd 	b.w	f1a8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000cdee <sdc_hci_cmd_vs_conn_event_extend>:
    cdee:	b508      	push	{r3, lr}
    cdf0:	7800      	ldrb	r0, [r0, #0]
    cdf2:	f88d 0000 	strb.w	r0, [sp]
    cdf6:	4668      	mov	r0, sp
    cdf8:	f002 f94b 	bl	f092 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    cdfc:	bd08      	pop	{r3, pc}

0000cdfe <sdc_hci_cmd_vs_conn_update>:
    cdfe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ce00:	2100      	movs	r1, #0
    ce02:	9100      	str	r1, [sp, #0]
    ce04:	9101      	str	r1, [sp, #4]
    ce06:	9102      	str	r1, [sp, #8]
    ce08:	9103      	str	r1, [sp, #12]
    ce0a:	f8d0 1002 	ldr.w	r1, [r0, #2]
    ce0e:	f641 524c 	movw	r2, #7500	; 0x1d4c
    ce12:	4291      	cmp	r1, r2
    ce14:	d304      	bcc.n	ce20 <sdc_hci_cmd_vs_conn_update+0x22>
    ce16:	f240 42e2 	movw	r2, #1250	; 0x4e2
    ce1a:	fbb1 f1f2 	udiv	r1, r1, r2
    ce1e:	e005      	b.n	ce2c <sdc_hci_cmd_vs_conn_update+0x2e>
    ce20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ce24:	fbb1 f1f2 	udiv	r1, r1, r2
    ce28:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    ce2c:	8802      	ldrh	r2, [r0, #0]
    ce2e:	b289      	uxth	r1, r1
    ce30:	f8ad 2000 	strh.w	r2, [sp]
    ce34:	f8ad 1002 	strh.w	r1, [sp, #2]
    ce38:	f8ad 1004 	strh.w	r1, [sp, #4]
    ce3c:	88c1      	ldrh	r1, [r0, #6]
    ce3e:	f8ad 1006 	strh.w	r1, [sp, #6]
    ce42:	8900      	ldrh	r0, [r0, #8]
    ce44:	f8ad 0008 	strh.w	r0, [sp, #8]
    ce48:	4668      	mov	r0, sp
    ce4a:	f001 fed9 	bl	ec00 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    ce4e:	b004      	add	sp, #16
    ce50:	bd10      	pop	{r4, pc}

0000ce52 <sdc_hci_cmd_vs_event_length_set>:
    ce52:	f7fd be55 	b.w	ab00 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000ce56 <sdc_hci_cmd_vs_llpm_mode_set>:
    ce56:	2001      	movs	r0, #1
    ce58:	4770      	bx	lr

0000ce5a <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    ce5a:	7800      	ldrb	r0, [r0, #0]
    ce5c:	b100      	cbz	r0, ce60 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    ce5e:	2001      	movs	r0, #1
    ce60:	f002 b8ef 	b.w	f042 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000ce64 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    ce64:	b570      	push	{r4, r5, r6, lr}
    ce66:	4605      	mov	r5, r0
    ce68:	2210      	movs	r2, #16
    ce6a:	2100      	movs	r1, #0
    ce6c:	f7ff fbee 	bl	c64c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ce70:	2210      	movs	r2, #16
    ce72:	2100      	movs	r1, #0
    ce74:	f105 0010 	add.w	r0, r5, #16
    ce78:	f7ff fbe8 	bl	c64c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ce7c:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    ce80:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    ce84:	1c40      	adds	r0, r0, #1
    ce86:	d10b      	bne.n	cea0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    ce88:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    ce8c:	1c40      	adds	r0, r0, #1
    ce8e:	d107      	bne.n	cea0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    ce90:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    ce94:	1c40      	adds	r0, r0, #1
    ce96:	d103      	bne.n	cea0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    ce98:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    ce9c:	1c40      	adds	r0, r0, #1
    ce9e:	d00b      	beq.n	ceb8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    cea0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    cea4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    cea8:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    ceac:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    ceb0:	612a      	str	r2, [r5, #16]
    ceb2:	6168      	str	r0, [r5, #20]
    ceb4:	61a9      	str	r1, [r5, #24]
    ceb6:	61eb      	str	r3, [r5, #28]
    ceb8:	2000      	movs	r0, #0
    ceba:	f7f7 fdcd 	bl	4a58 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    cebe:	b918      	cbnz	r0, cec8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    cec0:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    cec4:	07c0      	lsls	r0, r0, #31
    cec6:	d118      	bne.n	cefa <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    cec8:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    cecc:	1c40      	adds	r0, r0, #1
    cece:	d10b      	bne.n	cee8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    ced0:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    ced4:	1c40      	adds	r0, r0, #1
    ced6:	d107      	bne.n	cee8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    ced8:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    cedc:	1c40      	adds	r0, r0, #1
    cede:	d103      	bne.n	cee8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cee0:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    cee4:	1c40      	adds	r0, r0, #1
    cee6:	d008      	beq.n	cefa <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    cee8:	f854 0f90 	ldr.w	r0, [r4, #144]!
    ceec:	6861      	ldr	r1, [r4, #4]
    ceee:	68a2      	ldr	r2, [r4, #8]
    cef0:	68e3      	ldr	r3, [r4, #12]
    cef2:	6028      	str	r0, [r5, #0]
    cef4:	6069      	str	r1, [r5, #4]
    cef6:	60aa      	str	r2, [r5, #8]
    cef8:	60eb      	str	r3, [r5, #12]
    cefa:	2000      	movs	r0, #0
    cefc:	bd70      	pop	{r4, r5, r6, pc}

0000cefe <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    cefe:	b538      	push	{r3, r4, r5, lr}
    cf00:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    cf04:	4604      	mov	r4, r0
    cf06:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    cf0a:	1c40      	adds	r0, r0, #1
    cf0c:	d105      	bne.n	cf1a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    cf0e:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    cf12:	43c0      	mvns	r0, r0
    cf14:	0400      	lsls	r0, r0, #16
    cf16:	0c00      	lsrs	r0, r0, #16
    cf18:	d03e      	beq.n	cf98 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    cf1a:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    cf1e:	07c0      	lsls	r0, r0, #31
    cf20:	d03a      	beq.n	cf98 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    cf22:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    cf26:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    cf2a:	f8ad 1000 	strh.w	r1, [sp]
    cf2e:	f8c4 0001 	str.w	r0, [r4, #1]
    cf32:	f8bd 0000 	ldrh.w	r0, [sp]
    cf36:	f8a4 0005 	strh.w	r0, [r4, #5]
    cf3a:	79a0      	ldrb	r0, [r4, #6]
    cf3c:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    cf40:	71a0      	strb	r0, [r4, #6]
    cf42:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    cf46:	1c40      	adds	r0, r0, #1
    cf48:	d00f      	beq.n	cf6a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    cf4a:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    cf4e:	1c40      	adds	r0, r0, #1
    cf50:	d00b      	beq.n	cf6a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    cf52:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    cf56:	1c40      	adds	r0, r0, #1
    cf58:	d007      	beq.n	cf6a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    cf5a:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    cf5e:	1c40      	adds	r0, r0, #1
    cf60:	d003      	beq.n	cf6a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    cf62:	2000      	movs	r0, #0
    cf64:	f7f7 fd78 	bl	4a58 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    cf68:	b140      	cbz	r0, cf7c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    cf6a:	2210      	movs	r2, #16
    cf6c:	2100      	movs	r1, #0
    cf6e:	1de0      	adds	r0, r4, #7
    cf70:	f7ff fb6c 	bl	c64c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cf74:	2001      	movs	r0, #1
    cf76:	7020      	strb	r0, [r4, #0]
    cf78:	2000      	movs	r0, #0
    cf7a:	bd38      	pop	{r3, r4, r5, pc}
    cf7c:	f855 2f90 	ldr.w	r2, [r5, #144]!
    cf80:	6869      	ldr	r1, [r5, #4]
    cf82:	68a8      	ldr	r0, [r5, #8]
    cf84:	68eb      	ldr	r3, [r5, #12]
    cf86:	f8c4 2007 	str.w	r2, [r4, #7]
    cf8a:	f8c4 100b 	str.w	r1, [r4, #11]
    cf8e:	f8c4 000f 	str.w	r0, [r4, #15]
    cf92:	f8c4 3013 	str.w	r3, [r4, #19]
    cf96:	e7ed      	b.n	cf74 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    cf98:	2000      	movs	r0, #0
    cf9a:	e7ec      	b.n	cf76 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000cf9c <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    cf9c:	f002 b86b 	b.w	f076 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000cfa0 <sdc_hci_cmd_ip_read_bd_addr>:
    cfa0:	f002 b8b6 	b.w	f110 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000cfa4 <sdc_hci_cmd_ip_read_local_version_information>:
    cfa4:	f7fd bdf8 	b.w	ab98 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000cfa8 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    cfa8:	f001 bde1 	b.w	eb6e <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000cfac <sdc_hci_cmd_le_add_device_to_white_list>:
    cfac:	f001 bdfa 	b.w	eba4 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000cfb0 <sdc_hci_cmd_le_clear_resolving_list>:
    cfb0:	f001 be0f 	b.w	ebd2 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000cfb4 <sdc_hci_cmd_le_clear_white_list>:
    cfb4:	f001 be1a 	b.w	ebec <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000cfb8 <sdc_hci_cmd_le_conn_update>:
    cfb8:	f001 be22 	b.w	ec00 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>

0000cfbc <sdc_hci_cmd_le_create_conn>:
    cfbc:	f7fd bb42 	b.w	a644 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>

0000cfc0 <sdc_hci_cmd_le_create_conn_cancel>:
    cfc0:	f001 be60 	b.w	ec84 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>

0000cfc4 <sdc_hci_cmd_le_enable_encryption>:
    cfc4:	f001 bff4 	b.w	efb0 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>

0000cfc8 <sdc_hci_cmd_le_encrypt>:
    cfc8:	f001 be84 	b.w	ecd4 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000cfcc <sdc_hci_cmd_le_rand>:
    cfcc:	f001 be8b 	b.w	ece6 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000cfd0 <sdc_hci_cmd_le_read_buffer_size>:
    cfd0:	f7fd bb92 	b.w	a6f8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000cfd4 <sdc_hci_cmd_le_read_channel_map>:
    cfd4:	f7fd bb9a 	b.w	a70c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000cfd8 <sdc_hci_cmd_le_read_max_data_length>:
    cfd8:	f001 be8b 	b.w	ecf2 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000cfdc <sdc_hci_cmd_le_read_phy>:
    cfdc:	f001 be99 	b.w	ed12 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000cfe0 <sdc_hci_cmd_le_read_remote_features>:
    cfe0:	f7fd bbbe 	b.w	a760 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000cfe4 <sdc_hci_cmd_le_read_resolving_list_size>:
    cfe4:	f001 bec0 	b.w	ed68 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000cfe8 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    cfe8:	f7fd bbde 	b.w	a7a8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000cfec <sdc_hci_cmd_le_read_transmit_power>:
    cfec:	f001 bec0 	b.w	ed70 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000cff0 <sdc_hci_cmd_le_read_white_list_size>:
    cff0:	f001 bec7 	b.w	ed82 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000cff4 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    cff4:	f001 bec9 	b.w	ed8a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000cff8 <sdc_hci_cmd_le_remove_device_from_white_list>:
    cff8:	f001 bee0 	b.w	edbc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000cffc <sdc_hci_cmd_le_set_address_resolution_enable>:
    cffc:	f001 bef3 	b.w	ede6 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000d000 <sdc_hci_cmd_le_set_data_length>:
    d000:	f001 beff 	b.w	ee02 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d004 <sdc_hci_cmd_le_set_default_phy>:
    d004:	f7fd bbe0 	b.w	a7c8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d008 <sdc_hci_cmd_le_set_event_mask>:
    d008:	b510      	push	{r4, lr}
    d00a:	f7f7 f823 	bl	4054 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d00e:	2000      	movs	r0, #0
    d010:	bd10      	pop	{r4, pc}

0000d012 <sdc_hci_cmd_le_set_host_channel_classification>:
    d012:	f001 bf1d 	b.w	ee50 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>

0000d016 <sdc_hci_cmd_le_set_phy>:
    d016:	f001 bf3b 	b.w	ee90 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d01a <sdc_hci_cmd_le_set_privacy_mode>:
    d01a:	f001 bf59 	b.w	eed0 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000d01e <sdc_hci_cmd_le_set_random_address>:
    d01e:	f001 bf6d 	b.w	eefc <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d022 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    d022:	f001 bf79 	b.w	ef18 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000d026 <sdc_hci_cmd_le_set_scan_enable>:
    d026:	f001 bf80 	b.w	ef2a <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0000d02a <sdc_hci_cmd_le_set_scan_params>:
    d02a:	f001 bf94 	b.w	ef56 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>

0000d02e <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d02e:	f001 bff1 	b.w	f014 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d032 <sdc_hci_cmd_lc_disconnect>:
    d032:	f001 bd4b 	b.w	eacc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d036 <sdc_hci_cmd_lc_read_remote_version_information>:
    d036:	f002 b877 	b.w	f128 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d03a:	b570      	push	{r4, r5, r6, lr}
    d03c:	880b      	ldrh	r3, [r1, #0]
    d03e:	7f04      	ldrb	r4, [r0, #28]
    d040:	f100 0524 	add.w	r5, r0, #36	; 0x24
    d044:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    d048:	8802      	ldrh	r2, [r0, #0]
    d04a:	4435      	add	r5, r6
    d04c:	1da4      	adds	r4, r4, #6
    d04e:	882d      	ldrh	r5, [r5, #0]
    d050:	4422      	add	r2, r4
    d052:	b292      	uxth	r2, r2
    d054:	4425      	add	r5, r4
    d056:	1e54      	subs	r4, r2, #1
    d058:	442c      	add	r4, r5
    d05a:	fb94 f4f2 	sdiv	r4, r4, r2
    d05e:	fb02 6204 	mla	r2, r2, r4, r6
    d062:	8840      	ldrh	r0, [r0, #2]
    d064:	b292      	uxth	r2, r2
    d066:	4290      	cmp	r0, r2
    d068:	d903      	bls.n	d072 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d06a:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d06e:	4310      	orrs	r0, r2
    d070:	e002      	b.n	d078 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d072:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d076:	4398      	bics	r0, r3
    d078:	8008      	strh	r0, [r1, #0]
    d07a:	bd70      	pop	{r4, r5, r6, pc}
    d07c:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    d080:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d084:	429a      	cmp	r2, r3
    d086:	d107      	bne.n	d098 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d088:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d08c:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d090:	4288      	cmp	r0, r1
    d092:	d001      	beq.n	d098 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d094:	2001      	movs	r0, #1
    d096:	4770      	bx	lr
    d098:	2000      	movs	r0, #0
    d09a:	4770      	bx	lr

0000d09c <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    d09c:	b570      	push	{r4, r5, r6, lr}
    d09e:	7f00      	ldrb	r0, [r0, #28]
    d0a0:	461c      	mov	r4, r3
    d0a2:	1d80      	adds	r0, r0, #6
    d0a4:	4408      	add	r0, r1
    d0a6:	4613      	mov	r3, r2
    d0a8:	8809      	ldrh	r1, [r1, #0]
    d0aa:	9a04      	ldr	r2, [sp, #16]
    d0ac:	1cc9      	adds	r1, r1, #3
    d0ae:	b289      	uxth	r1, r1
    d0b0:	1915      	adds	r5, r2, r4
    d0b2:	1ec0      	subs	r0, r0, #3
    d0b4:	428d      	cmp	r5, r1
    d0b6:	d805      	bhi.n	d0c4 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    d0b8:	1881      	adds	r1, r0, r2
    d0ba:	4622      	mov	r2, r4
    d0bc:	4618      	mov	r0, r3
    d0be:	f7ff fa4b 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d0c2:	e000      	b.n	d0c6 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    d0c4:	2400      	movs	r4, #0
    d0c6:	4620      	mov	r0, r4
    d0c8:	bd70      	pop	{r4, r5, r6, pc}

0000d0ca <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    d0ca:	b570      	push	{r4, r5, r6, lr}
    d0cc:	7f00      	ldrb	r0, [r0, #28]
    d0ce:	461c      	mov	r4, r3
    d0d0:	1d80      	adds	r0, r0, #6
    d0d2:	4408      	add	r0, r1
    d0d4:	4613      	mov	r3, r2
    d0d6:	8809      	ldrh	r1, [r1, #0]
    d0d8:	9a04      	ldr	r2, [sp, #16]
    d0da:	1cc9      	adds	r1, r1, #3
    d0dc:	b289      	uxth	r1, r1
    d0de:	1915      	adds	r5, r2, r4
    d0e0:	1ec0      	subs	r0, r0, #3
    d0e2:	428d      	cmp	r5, r1
    d0e4:	d805      	bhi.n	d0f2 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    d0e6:	4410      	add	r0, r2
    d0e8:	4622      	mov	r2, r4
    d0ea:	4619      	mov	r1, r3
    d0ec:	f7ff fa34 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d0f0:	e000      	b.n	d0f4 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    d0f2:	2400      	movs	r4, #0
    d0f4:	4620      	mov	r0, r4
    d0f6:	bd70      	pop	{r4, r5, r6, pc}

0000d0f8 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d0f8:	8881      	ldrh	r1, [r0, #4]
    d0fa:	88c0      	ldrh	r0, [r0, #6]
    d0fc:	4288      	cmp	r0, r1
    d0fe:	d101      	bne.n	d104 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d100:	2001      	movs	r0, #1
    d102:	4770      	bx	lr
    d104:	2000      	movs	r0, #0
    d106:	4770      	bx	lr

0000d108 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    d108:	8881      	ldrh	r1, [r0, #4]
    d10a:	8900      	ldrh	r0, [r0, #8]
    d10c:	4288      	cmp	r0, r1
    d10e:	d101      	bne.n	d114 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    d110:	2001      	movs	r0, #1
    d112:	4770      	bx	lr
    d114:	2000      	movs	r0, #0
    d116:	4770      	bx	lr

0000d118 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d118:	b570      	push	{r4, r5, r6, lr}
    d11a:	4604      	mov	r4, r0
    d11c:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d120:	8880      	ldrh	r0, [r0, #4]
    d122:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d126:	4401      	add	r1, r0
    d128:	8a20      	ldrh	r0, [r4, #16]
    d12a:	2800      	cmp	r0, #0
    d12c:	d01a      	beq.n	d164 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d12e:	89a2      	ldrh	r2, [r4, #12]
    d130:	2500      	movs	r5, #0
    d132:	4410      	add	r0, r2
    d134:	b280      	uxth	r0, r0
    d136:	81a0      	strh	r0, [r4, #12]
    d138:	880a      	ldrh	r2, [r1, #0]
    d13a:	4290      	cmp	r0, r2
    d13c:	d905      	bls.n	d14a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    d13e:	f240 1163 	movw	r1, #355	; 0x163
    d142:	f04f 0014 	mov.w	r0, #20
    d146:	f7f6 fe09 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d14a:	d109      	bne.n	d160 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d14c:	69a0      	ldr	r0, [r4, #24]
    d14e:	b108      	cbz	r0, d154 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    d150:	7f40      	ldrb	r0, [r0, #29]
    d152:	7088      	strb	r0, [r1, #2]
    d154:	f104 0104 	add.w	r1, r4, #4
    d158:	4620      	mov	r0, r4
    d15a:	f7ff ff6e 	bl	d03a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d15e:	81a5      	strh	r5, [r4, #12]
    d160:	8225      	strh	r5, [r4, #16]
    d162:	2001      	movs	r0, #1
    d164:	bd70      	pop	{r4, r5, r6, pc}

0000d166 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d168:	4604      	mov	r4, r0
    d16a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    d16e:	88c0      	ldrh	r0, [r0, #6]
    d170:	460e      	mov	r6, r1
    d172:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d176:	8a60      	ldrh	r0, [r4, #18]
    d178:	19d9      	adds	r1, r3, r7
    d17a:	b108      	cbz	r0, d180 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    d17c:	42b0      	cmp	r0, r6
    d17e:	d201      	bcs.n	d184 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    d180:	2000      	movs	r0, #0
    d182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d184:	89e0      	ldrh	r0, [r4, #14]
    d186:	2500      	movs	r5, #0
    d188:	b140      	cbz	r0, d19c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    d18a:	f8b1 c000 	ldrh.w	ip, [r1]
    d18e:	4560      	cmp	r0, ip
    d190:	d008      	beq.n	d1a4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d192:	f240 214b 	movw	r1, #587	; 0x24b
    d196:	2014      	movs	r0, #20
    d198:	f7f6 fde0 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d19c:	7f60      	ldrb	r0, [r4, #29]
    d19e:	7088      	strb	r0, [r1, #2]
    d1a0:	800d      	strh	r5, [r1, #0]
    d1a2:	e00e      	b.n	d1c2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d1a4:	f894 c01c 	ldrb.w	ip, [r4, #28]
    d1a8:	4418      	add	r0, r3
    d1aa:	f10c 0c06 	add.w	ip, ip, #6
    d1ae:	44bc      	add	ip, r7
    d1b0:	4460      	add	r0, ip
    d1b2:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    d1b6:	f820 cc03 	strh.w	ip, [r0, #-3]
    d1ba:	f894 c020 	ldrb.w	ip, [r4, #32]
    d1be:	f800 cc01 	strb.w	ip, [r0, #-1]
    d1c2:	89e0      	ldrh	r0, [r4, #14]
    d1c4:	4430      	add	r0, r6
    d1c6:	81e0      	strh	r0, [r4, #14]
    d1c8:	8808      	ldrh	r0, [r1, #0]
    d1ca:	4430      	add	r0, r6
    d1cc:	8008      	strh	r0, [r1, #0]
    d1ce:	b19a      	cbz	r2, d1f8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    d1d0:	1da1      	adds	r1, r4, #6
    d1d2:	4620      	mov	r0, r4
    d1d4:	f7ff ff31 	bl	d03a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d1d8:	81e5      	strh	r5, [r4, #14]
    d1da:	7f60      	ldrb	r0, [r4, #29]
    d1dc:	1c40      	adds	r0, r0, #1
    d1de:	7760      	strb	r0, [r4, #29]
    d1e0:	7da0      	ldrb	r0, [r4, #22]
    d1e2:	f88d 0000 	strb.w	r0, [sp]
    d1e6:	9800      	ldr	r0, [sp, #0]
    d1e8:	9000      	str	r0, [sp, #0]
    d1ea:	f89d 0000 	ldrb.w	r0, [sp]
    d1ee:	b178      	cbz	r0, d210 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    d1f0:	88e0      	ldrh	r0, [r4, #6]
    d1f2:	82a0      	strh	r0, [r4, #20]
    d1f4:	75a5      	strb	r5, [r4, #22]
    d1f6:	e00b      	b.n	d210 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    d1f8:	7f20      	ldrb	r0, [r4, #28]
    d1fa:	89e1      	ldrh	r1, [r4, #14]
    d1fc:	1d80      	adds	r0, r0, #6
    d1fe:	4438      	add	r0, r7
    d200:	4419      	add	r1, r3
    d202:	4408      	add	r0, r1
    d204:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d208:	83e1      	strh	r1, [r4, #30]
    d20a:	7880      	ldrb	r0, [r0, #2]
    d20c:	f884 0020 	strb.w	r0, [r4, #32]
    d210:	8265      	strh	r5, [r4, #18]
    d212:	2001      	movs	r0, #1
    d214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d216 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d216:	1cc0      	adds	r0, r0, #3
    d218:	4770      	bx	lr

0000d21a <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    d21a:	b510      	push	{r4, lr}
    d21c:	88c2      	ldrh	r2, [r0, #6]
    d21e:	8943      	ldrh	r3, [r0, #10]
    d220:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
    d224:	f423 4400 	bic.w	r4, r3, #32768	; 0x8000
    d228:	1a61      	subs	r1, r4, r1
    d22a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    d22e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    d232:	429a      	cmp	r2, r3
    d234:	d101      	bne.n	d23a <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    d236:	8842      	ldrh	r2, [r0, #2]
    d238:	4411      	add	r1, r2
    d23a:	7f02      	ldrb	r2, [r0, #28]
    d23c:	8800      	ldrh	r0, [r0, #0]
    d23e:	4410      	add	r0, r2
    d240:	1d80      	adds	r0, r0, #6
    d242:	b280      	uxth	r0, r0
    d244:	fb91 f0f0 	sdiv	r0, r1, r0
    d248:	b280      	uxth	r0, r0
    d24a:	bd10      	pop	{r4, pc}

0000d24c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d24c:	b510      	push	{r4, lr}
    d24e:	4604      	mov	r4, r0
    d250:	88c0      	ldrh	r0, [r0, #6]
    d252:	88a1      	ldrh	r1, [r4, #4]
    d254:	4281      	cmp	r1, r0
    d256:	d007      	beq.n	d268 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d258:	89a0      	ldrh	r0, [r4, #12]
    d25a:	b928      	cbnz	r0, d268 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d25c:	8a20      	ldrh	r0, [r4, #16]
    d25e:	b918      	cbnz	r0, d268 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d260:	88a0      	ldrh	r0, [r4, #4]
    d262:	8aa1      	ldrh	r1, [r4, #20]
    d264:	4288      	cmp	r0, r1
    d266:	d101      	bne.n	d26c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    d268:	2000      	movs	r0, #0
    d26a:	bd10      	pop	{r4, pc}
    d26c:	1d21      	adds	r1, r4, #4
    d26e:	4620      	mov	r0, r4
    d270:	f7ff fee3 	bl	d03a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d274:	2000      	movs	r0, #0
    d276:	8220      	strh	r0, [r4, #16]
    d278:	2001      	movs	r0, #1
    d27a:	bd10      	pop	{r4, pc}

0000d27c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d27c:	b510      	push	{r4, lr}
    d27e:	4604      	mov	r4, r0
    d280:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d284:	88c0      	ldrh	r0, [r0, #6]
    d286:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d28a:	4402      	add	r2, r0
    d28c:	8820      	ldrh	r0, [r4, #0]
    d28e:	2845      	cmp	r0, #69	; 0x45
    d290:	d200      	bcs.n	d294 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d292:	2045      	movs	r0, #69	; 0x45
    d294:	4288      	cmp	r0, r1
    d296:	d204      	bcs.n	d2a2 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d298:	f240 1119 	movw	r1, #281	; 0x119
    d29c:	2014      	movs	r0, #20
    d29e:	f7f6 fd5d 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d2a2:	7de0      	ldrb	r0, [r4, #23]
    d2a4:	2800      	cmp	r0, #0
    d2a6:	d003      	beq.n	d2b0 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d2a8:	8810      	ldrh	r0, [r2, #0]
    d2aa:	4288      	cmp	r0, r1
    d2ac:	d201      	bcs.n	d2b2 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d2ae:	2000      	movs	r0, #0
    d2b0:	bd10      	pop	{r4, pc}
    d2b2:	8011      	strh	r1, [r2, #0]
    d2b4:	1da1      	adds	r1, r4, #6
    d2b6:	4620      	mov	r0, r4
    d2b8:	f7ff febf 	bl	d03a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d2bc:	2000      	movs	r0, #0
    d2be:	75e0      	strb	r0, [r4, #23]
    d2c0:	2001      	movs	r0, #1
    d2c2:	bd10      	pop	{r4, pc}

0000d2c4 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    d2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d2c8:	8941      	ldrh	r1, [r0, #10]
    d2ca:	8886      	ldrh	r6, [r0, #4]
    d2cc:	4604      	mov	r4, r0
    d2ce:	2500      	movs	r5, #0
    d2d0:	f100 070a 	add.w	r7, r0, #10
    d2d4:	e006      	b.n	d2e4 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    d2d6:	4639      	mov	r1, r7
    d2d8:	4620      	mov	r0, r4
    d2da:	f7ff feae 	bl	d03a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d2de:	1c6d      	adds	r5, r5, #1
    d2e0:	8961      	ldrh	r1, [r4, #10]
    d2e2:	b2ad      	uxth	r5, r5
    d2e4:	42b1      	cmp	r1, r6
    d2e6:	d1f6      	bne.n	d2d6 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    d2e8:	4628      	mov	r0, r5
    d2ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d2ee <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d2ee:	b530      	push	{r4, r5, lr}
    d2f0:	88c4      	ldrh	r4, [r0, #6]
    d2f2:	8881      	ldrh	r1, [r0, #4]
    d2f4:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d2f8:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d2fc:	4413      	add	r3, r2
    d2fe:	8882      	ldrh	r2, [r0, #4]
    d300:	8a85      	ldrh	r5, [r0, #20]
    d302:	42aa      	cmp	r2, r5
    d304:	d012      	beq.n	d32c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d306:	42a1      	cmp	r1, r4
    d308:	d010      	beq.n	d32c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d30a:	8981      	ldrh	r1, [r0, #12]
    d30c:	b971      	cbnz	r1, d32c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d30e:	6982      	ldr	r2, [r0, #24]
    d310:	b172      	cbz	r2, d330 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d312:	4610      	mov	r0, r2
    d314:	f7ff fef8 	bl	d108 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    d318:	b950      	cbnz	r0, d330 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d31a:	8910      	ldrh	r0, [r2, #8]
    d31c:	3224      	adds	r2, #36	; 0x24
    d31e:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d322:	4410      	add	r0, r2
    d324:	7899      	ldrb	r1, [r3, #2]
    d326:	7880      	ldrb	r0, [r0, #2]
    d328:	4288      	cmp	r0, r1
    d32a:	d101      	bne.n	d330 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d32c:	2000      	movs	r0, #0
    d32e:	bd30      	pop	{r4, r5, pc}
    d330:	4618      	mov	r0, r3
    d332:	bd30      	pop	{r4, r5, pc}

0000d334 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d334:	8803      	ldrh	r3, [r0, #0]
    d336:	2b45      	cmp	r3, #69	; 0x45
    d338:	d200      	bcs.n	d33c <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d33a:	2345      	movs	r3, #69	; 0x45
    d33c:	8013      	strh	r3, [r2, #0]
    d33e:	88c2      	ldrh	r2, [r0, #6]
    d340:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
    d344:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d348:	441a      	add	r2, r3
    d34a:	600a      	str	r2, [r1, #0]
    d34c:	89c0      	ldrh	r0, [r0, #14]
    d34e:	4770      	bx	lr

0000d350 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d350:	7f00      	ldrb	r0, [r0, #28]
    d352:	1d80      	adds	r0, r0, #6
    d354:	4408      	add	r0, r1
    d356:	1ec0      	subs	r0, r0, #3
    d358:	6010      	str	r0, [r2, #0]
    d35a:	8808      	ldrh	r0, [r1, #0]
    d35c:	4770      	bx	lr

0000d35e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d35e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d362:	460e      	mov	r6, r1
    d364:	88c1      	ldrh	r1, [r0, #6]
    d366:	8902      	ldrh	r2, [r0, #8]
    d368:	4604      	mov	r4, r0
    d36a:	f100 0824 	add.w	r8, r0, #36	; 0x24
    d36e:	8800      	ldrh	r0, [r0, #0]
    d370:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    d374:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    d378:	2845      	cmp	r0, #69	; 0x45
    d37a:	d200      	bcs.n	d37e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d37c:	2045      	movs	r0, #69	; 0x45
    d37e:	42b0      	cmp	r0, r6
    d380:	d203      	bcs.n	d38a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d382:	21db      	movs	r1, #219	; 0xdb
    d384:	2014      	movs	r0, #20
    d386:	f7f6 fce9 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d38a:	4610      	mov	r0, r2
    d38c:	f7ff fe76 	bl	d07c <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d390:	b110      	cbz	r0, d398 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d392:	2000      	movs	r0, #0
    d394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d398:	42af      	cmp	r7, r5
    d39a:	d908      	bls.n	d3ae <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d39c:	7f21      	ldrb	r1, [r4, #28]
    d39e:	1b78      	subs	r0, r7, r5
    d3a0:	1a40      	subs	r0, r0, r1
    d3a2:	1f80      	subs	r0, r0, #6
    d3a4:	4286      	cmp	r6, r0
    d3a6:	dd02      	ble.n	d3ae <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d3a8:	2000      	movs	r0, #0
    d3aa:	75e0      	strb	r0, [r4, #23]
    d3ac:	e7f1      	b.n	d392 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d3ae:	eb08 0005 	add.w	r0, r8, r5
    d3b2:	2101      	movs	r1, #1
    d3b4:	8006      	strh	r6, [r0, #0]
    d3b6:	75e1      	strb	r1, [r4, #23]
    d3b8:	e7ec      	b.n	d394 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d3ba <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d3ba:	b538      	push	{r3, r4, r5, lr}
    d3bc:	88c4      	ldrh	r4, [r0, #6]
    d3be:	8881      	ldrh	r1, [r0, #4]
    d3c0:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d3c4:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d3c8:	441a      	add	r2, r3
    d3ca:	42a1      	cmp	r1, r4
    d3cc:	d010      	beq.n	d3f0 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d3ce:	8983      	ldrh	r3, [r0, #12]
    d3d0:	8a05      	ldrh	r5, [r0, #16]
    d3d2:	8812      	ldrh	r2, [r2, #0]
    d3d4:	442b      	add	r3, r5
    d3d6:	4293      	cmp	r3, r2
    d3d8:	d308      	bcc.n	d3ec <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d3da:	f8ad 1000 	strh.w	r1, [sp]
    d3de:	4669      	mov	r1, sp
    d3e0:	f7ff fe2b 	bl	d03a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d3e4:	f8bd 0000 	ldrh.w	r0, [sp]
    d3e8:	42a0      	cmp	r0, r4
    d3ea:	d001      	beq.n	d3f0 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d3ec:	2001      	movs	r0, #1
    d3ee:	bd38      	pop	{r3, r4, r5, pc}
    d3f0:	2000      	movs	r0, #0
    d3f2:	bd38      	pop	{r3, r4, r5, pc}

0000d3f4 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d3f4:	b570      	push	{r4, r5, r6, lr}
    d3f6:	88c6      	ldrh	r6, [r0, #6]
    d3f8:	8885      	ldrh	r5, [r0, #4]
    d3fa:	4603      	mov	r3, r0
    d3fc:	f100 0424 	add.w	r4, r0, #36	; 0x24
    d400:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    d404:	4420      	add	r0, r4
    d406:	42b5      	cmp	r5, r6
    d408:	d102      	bne.n	d410 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d40a:	2000      	movs	r0, #0
    d40c:	8218      	strh	r0, [r3, #16]
    d40e:	bd70      	pop	{r4, r5, r6, pc}
    d410:	8804      	ldrh	r4, [r0, #0]
    d412:	899d      	ldrh	r5, [r3, #12]
    d414:	7f1e      	ldrb	r6, [r3, #28]
    d416:	1b64      	subs	r4, r4, r5
    d418:	4435      	add	r5, r6
    d41a:	4428      	add	r0, r5
    d41c:	880d      	ldrh	r5, [r1, #0]
    d41e:	b2a4      	uxth	r4, r4
    d420:	1cc0      	adds	r0, r0, #3
    d422:	42a5      	cmp	r5, r4
    d424:	d900      	bls.n	d428 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d426:	800c      	strh	r4, [r1, #0]
    d428:	899c      	ldrh	r4, [r3, #12]
    d42a:	b124      	cbz	r4, d436 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d42c:	2400      	movs	r4, #0
    d42e:	7014      	strb	r4, [r2, #0]
    d430:	8809      	ldrh	r1, [r1, #0]
    d432:	8219      	strh	r1, [r3, #16]
    d434:	bd70      	pop	{r4, r5, r6, pc}
    d436:	2401      	movs	r4, #1
    d438:	e7f9      	b.n	d42e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d43a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    d43a:	b508      	push	{r3, lr}
    d43c:	8a81      	ldrh	r1, [r0, #20]
    d43e:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    d442:	3aff      	subs	r2, #255	; 0xff
    d444:	d008      	beq.n	d458 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    d446:	7d82      	ldrb	r2, [r0, #22]
    d448:	f88d 2000 	strb.w	r2, [sp]
    d44c:	9a00      	ldr	r2, [sp, #0]
    d44e:	9200      	str	r2, [sp, #0]
    d450:	f89d 2000 	ldrb.w	r2, [sp]
    d454:	b952      	cbnz	r2, d46c <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    d456:	e004      	b.n	d462 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    d458:	f44f 7162 	mov.w	r1, #904	; 0x388
    d45c:	2014      	movs	r0, #20
    d45e:	f7f6 fc7d 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d462:	8880      	ldrh	r0, [r0, #4]
    d464:	4281      	cmp	r1, r0
    d466:	d101      	bne.n	d46c <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    d468:	2000      	movs	r0, #0
    d46a:	bd08      	pop	{r3, pc}
    d46c:	2001      	movs	r0, #1
    d46e:	bd08      	pop	{r3, pc}

0000d470 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    d470:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d474:	8281      	strh	r1, [r0, #20]
    d476:	2100      	movs	r1, #0
    d478:	7581      	strb	r1, [r0, #22]
    d47a:	4770      	bx	lr

0000d47c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    d47c:	b510      	push	{r4, lr}
    d47e:	8a81      	ldrh	r1, [r0, #20]
    d480:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    d484:	3aff      	subs	r2, #255	; 0xff
    d486:	d004      	beq.n	d492 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    d488:	f44f 7159 	mov.w	r1, #868	; 0x364
    d48c:	2014      	movs	r0, #20
    d48e:	f7f6 fc65 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d492:	88c1      	ldrh	r1, [r0, #6]
    d494:	8281      	strh	r1, [r0, #20]
    d496:	89c1      	ldrh	r1, [r0, #14]
    d498:	b109      	cbz	r1, d49e <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    d49a:	2101      	movs	r1, #1
    d49c:	e000      	b.n	d4a0 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    d49e:	2100      	movs	r1, #0
    d4a0:	7581      	strb	r1, [r0, #22]
    d4a2:	bd10      	pop	{r4, pc}

0000d4a4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4a8:	461d      	mov	r5, r3
    d4aa:	4616      	mov	r6, r2
    d4ac:	9f06      	ldr	r7, [sp, #24]
    d4ae:	460b      	mov	r3, r1
    d4b0:	4604      	mov	r4, r0
    d4b2:	463a      	mov	r2, r7
    d4b4:	4629      	mov	r1, r5
    d4b6:	4630      	mov	r0, r6
    d4b8:	f000 f84f 	bl	d55a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d4bc:	4283      	cmp	r3, r0
    d4be:	d201      	bcs.n	d4c4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d4c0:	21a8      	movs	r1, #168	; 0xa8
    d4c2:	e018      	b.n	d4f6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    d4c4:	1ce0      	adds	r0, r4, #3
    d4c6:	f020 0103 	bic.w	r1, r0, #3
    d4ca:	4620      	mov	r0, r4
    d4cc:	42a1      	cmp	r1, r4
    d4ce:	d001      	beq.n	d4d4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    d4d0:	21a9      	movs	r1, #169	; 0xa9
    d4d2:	e010      	b.n	d4f6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    d4d4:	2224      	movs	r2, #36	; 0x24
    d4d6:	2100      	movs	r1, #0
    d4d8:	f7ff f8b8 	bl	c64c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d4dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
    d4e0:	82a0      	strh	r0, [r4, #20]
    d4e2:	19a8      	adds	r0, r5, r6
    d4e4:	1d80      	adds	r0, r0, #6
    d4e6:	4378      	muls	r0, r7
    d4e8:	b280      	uxth	r0, r0
    d4ea:	7725      	strb	r5, [r4, #28]
    d4ec:	8060      	strh	r0, [r4, #2]
    d4ee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d4f2:	d903      	bls.n	d4fc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    d4f4:	21af      	movs	r1, #175	; 0xaf
    d4f6:	2014      	movs	r0, #20
    d4f8:	f7f6 fc30 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4fc:	8026      	strh	r6, [r4, #0]
    d4fe:	2000      	movs	r0, #0
    d500:	7760      	strb	r0, [r4, #29]
    d502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d506 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    d506:	6181      	str	r1, [r0, #24]
    d508:	6188      	str	r0, [r1, #24]
    d50a:	4770      	bx	lr

0000d50c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d510:	460b      	mov	r3, r1
    d512:	4604      	mov	r4, r0
    d514:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d518:	8905      	ldrh	r5, [r0, #8]
    d51a:	8946      	ldrh	r6, [r0, #10]
    d51c:	8880      	ldrh	r0, [r0, #4]
    d51e:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    d522:	4439      	add	r1, r7
    d524:	460f      	mov	r7, r1
    d526:	4285      	cmp	r5, r0
    d528:	d102      	bne.n	d530 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    d52a:	2000      	movs	r0, #0
    d52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d530:	b10a      	cbz	r2, d536 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    d532:	1cc8      	adds	r0, r1, #3
    d534:	6010      	str	r0, [r2, #0]
    d536:	b123      	cbz	r3, d542 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    d538:	7f22      	ldrb	r2, [r4, #28]
    d53a:	1cf9      	adds	r1, r7, #3
    d53c:	4618      	mov	r0, r3
    d53e:	f7ff f80b 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d542:	883f      	ldrh	r7, [r7, #0]
    d544:	f104 0108 	add.w	r1, r4, #8
    d548:	4620      	mov	r0, r4
    d54a:	f7ff fd76 	bl	d03a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d54e:	42b5      	cmp	r5, r6
    d550:	d101      	bne.n	d556 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    d552:	8920      	ldrh	r0, [r4, #8]
    d554:	8160      	strh	r0, [r4, #10]
    d556:	4638      	mov	r0, r7
    d558:	e7e8      	b.n	d52c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000d55a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d55a:	4401      	add	r1, r0
    d55c:	1d89      	adds	r1, r1, #6
    d55e:	4351      	muls	r1, r2
    d560:	b28a      	uxth	r2, r1
    d562:	2100      	movs	r1, #0
    d564:	2845      	cmp	r0, #69	; 0x45
    d566:	d201      	bcs.n	d56c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    d568:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    d56c:	3224      	adds	r2, #36	; 0x24
    d56e:	1850      	adds	r0, r2, r1
    d570:	b280      	uxth	r0, r0
    d572:	4770      	bx	lr

0000d574 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d578:	4688      	mov	r8, r1
    d57a:	88c1      	ldrh	r1, [r0, #6]
    d57c:	4604      	mov	r4, r0
    d57e:	8900      	ldrh	r0, [r0, #8]
    d580:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    d584:	f104 0524 	add.w	r5, r4, #36	; 0x24
    d588:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d58c:	eb05 0906 	add.w	r9, r5, r6
    d590:	f7ff fd74 	bl	d07c <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d594:	2200      	movs	r2, #0
    d596:	b998      	cbnz	r0, d5c0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d598:	8820      	ldrh	r0, [r4, #0]
    d59a:	2845      	cmp	r0, #69	; 0x45
    d59c:	d200      	bcs.n	d5a0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d59e:	2045      	movs	r0, #69	; 0x45
    d5a0:	42b7      	cmp	r7, r6
    d5a2:	d906      	bls.n	d5b2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d5a4:	7f23      	ldrb	r3, [r4, #28]
    d5a6:	1bb9      	subs	r1, r7, r6
    d5a8:	1ac9      	subs	r1, r1, r3
    d5aa:	1f89      	subs	r1, r1, #6
    d5ac:	4281      	cmp	r1, r0
    d5ae:	da00      	bge.n	d5b2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d5b0:	4608      	mov	r0, r1
    d5b2:	89e1      	ldrh	r1, [r4, #14]
    d5b4:	b111      	cbz	r1, d5bc <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d5b6:	f8b9 3000 	ldrh.w	r3, [r9]
    d5ba:	1ac0      	subs	r0, r0, r3
    d5bc:	4540      	cmp	r0, r8
    d5be:	da03      	bge.n	d5c8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d5c0:	8262      	strh	r2, [r4, #18]
    d5c2:	2000      	movs	r0, #0
    d5c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d5c8:	7f20      	ldrb	r0, [r4, #28]
    d5ca:	4429      	add	r1, r5
    d5cc:	1d80      	adds	r0, r0, #6
    d5ce:	4430      	add	r0, r6
    d5d0:	4408      	add	r0, r1
    d5d2:	f8a4 8012 	strh.w	r8, [r4, #18]
    d5d6:	1ec0      	subs	r0, r0, #3
    d5d8:	e7f4      	b.n	d5c4 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d5da <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    d5da:	2100      	movs	r1, #0
    d5dc:	81c1      	strh	r1, [r0, #14]
    d5de:	8241      	strh	r1, [r0, #18]
    d5e0:	7581      	strb	r1, [r0, #22]
    d5e2:	4770      	bx	lr

0000d5e4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d5e4:	b570      	push	{r4, r5, r6, lr}
    d5e6:	2300      	movs	r3, #0
    d5e8:	2908      	cmp	r1, #8
    d5ea:	d204      	bcs.n	d5f6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    d5ec:	f240 11cb 	movw	r1, #459	; 0x1cb
    d5f0:	2015      	movs	r0, #21
    d5f2:	f7f6 fbb3 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d5f6:	6802      	ldr	r2, [r0, #0]
    d5f8:	b90a      	cbnz	r2, d5fe <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d5fa:	e01e      	b.n	d63a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d5fc:	4610      	mov	r0, r2
    d5fe:	6802      	ldr	r2, [r0, #0]
    d600:	8893      	ldrh	r3, [r2, #4]
    d602:	428b      	cmp	r3, r1
    d604:	d002      	beq.n	d60c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    d606:	6813      	ldr	r3, [r2, #0]
    d608:	2b00      	cmp	r3, #0
    d60a:	d1f7      	bne.n	d5fc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    d60c:	8894      	ldrh	r4, [r2, #4]
    d60e:	4613      	mov	r3, r2
    d610:	428c      	cmp	r4, r1
    d612:	d101      	bne.n	d618 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    d614:	6811      	ldr	r1, [r2, #0]
    d616:	e00d      	b.n	d634 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    d618:	f101 0508 	add.w	r5, r1, #8
    d61c:	b2ae      	uxth	r6, r5
    d61e:	2500      	movs	r5, #0
    d620:	42b4      	cmp	r4, r6
    d622:	d309      	bcc.n	d638 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    d624:	1a64      	subs	r4, r4, r1
    d626:	4411      	add	r1, r2
    d628:	600d      	str	r5, [r1, #0]
    d62a:	808c      	strh	r4, [r1, #4]
    d62c:	6802      	ldr	r2, [r0, #0]
    d62e:	6812      	ldr	r2, [r2, #0]
    d630:	6002      	str	r2, [r0, #0]
    d632:	600a      	str	r2, [r1, #0]
    d634:	6001      	str	r1, [r0, #0]
    d636:	e000      	b.n	d63a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d638:	2300      	movs	r3, #0
    d63a:	4618      	mov	r0, r3
    d63c:	bd70      	pop	{r4, r5, r6, pc}

0000d63e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d63e:	b510      	push	{r4, lr}
    d640:	000c      	movs	r4, r1
    d642:	d006      	beq.n	d652 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    d644:	2c08      	cmp	r4, #8
    d646:	d209      	bcs.n	d65c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    d648:	f240 1195 	movw	r1, #405	; 0x195
    d64c:	2015      	movs	r0, #21
    d64e:	f7f6 fb85 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d652:	b108      	cbz	r0, d658 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d654:	2100      	movs	r1, #0
    d656:	6001      	str	r1, [r0, #0]
    d658:	2000      	movs	r0, #0
    d65a:	bd10      	pop	{r4, pc}
    d65c:	b118      	cbz	r0, d666 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    d65e:	b2a1      	uxth	r1, r4
    d660:	6800      	ldr	r0, [r0, #0]
    d662:	f000 f814 	bl	d68e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d666:	1d20      	adds	r0, r4, #4
    d668:	bd10      	pop	{r4, pc}

0000d66a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d66a:	2100      	movs	r1, #0
    d66c:	6802      	ldr	r2, [r0, #0]
    d66e:	e003      	b.n	d678 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d670:	8893      	ldrh	r3, [r2, #4]
    d672:	6812      	ldr	r2, [r2, #0]
    d674:	4419      	add	r1, r3
    d676:	b289      	uxth	r1, r1
    d678:	2a00      	cmp	r2, #0
    d67a:	d1f9      	bne.n	d670 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d67c:	f000 b807 	b.w	d68e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d680 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d680:	2300      	movs	r3, #0
    d682:	600b      	str	r3, [r1, #0]
    d684:	808a      	strh	r2, [r1, #4]
    d686:	6802      	ldr	r2, [r0, #0]
    d688:	600a      	str	r2, [r1, #0]
    d68a:	6001      	str	r1, [r0, #0]
    d68c:	4770      	bx	lr
    d68e:	2300      	movs	r3, #0
    d690:	6043      	str	r3, [r0, #4]
    d692:	1d02      	adds	r2, r0, #4
    d694:	8101      	strh	r1, [r0, #8]
    d696:	6002      	str	r2, [r0, #0]
    d698:	4770      	bx	lr

0000d69a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d69a:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d69e:	3aff      	subs	r2, #255	; 0xff
    d6a0:	d000      	beq.n	d6a4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xa>
    d6a2:	b109      	cbz	r1, d6a8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xe>
    d6a4:	2000      	movs	r0, #0
    d6a6:	4770      	bx	lr
    d6a8:	f7f6 be38 	b.w	431c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>

0000d6ac <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    d6ac:	b570      	push	{r4, r5, r6, lr}
    d6ae:	4605      	mov	r5, r0
    d6b0:	460c      	mov	r4, r1
    d6b2:	4608      	mov	r0, r1
    d6b4:	f000 f854 	bl	d760 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    d6b8:	b108      	cbz	r0, d6be <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    d6ba:	2010      	movs	r0, #16
    d6bc:	bd70      	pop	{r4, r5, r6, pc}
    d6be:	b10d      	cbz	r5, d6c4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x18>
    d6c0:	2007      	movs	r0, #7
    d6c2:	bd70      	pop	{r4, r5, r6, pc}
    d6c4:	7025      	strb	r5, [r4, #0]
    d6c6:	2000      	movs	r0, #0
    d6c8:	8060      	strh	r0, [r4, #2]
    d6ca:	bd70      	pop	{r4, r5, r6, pc}
    d6cc:	b510      	push	{r4, lr}
    d6ce:	4604      	mov	r4, r0
    d6d0:	f7f6 fe70 	bl	43b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    d6d4:	42a0      	cmp	r0, r4
    d6d6:	d901      	bls.n	d6dc <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x30>
    d6d8:	2001      	movs	r0, #1
    d6da:	bd10      	pop	{r4, pc}
    d6dc:	2000      	movs	r0, #0
    d6de:	bd10      	pop	{r4, pc}
    d6e0:	4770      	bx	lr

0000d6e2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d6e2:	b570      	push	{r4, r5, r6, lr}
    d6e4:	460e      	mov	r6, r1
    d6e6:	461d      	mov	r5, r3
    d6e8:	4611      	mov	r1, r2
    d6ea:	f000 f811 	bl	d710 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    d6ee:	4604      	mov	r4, r0
    d6f0:	4629      	mov	r1, r5
    d6f2:	4630      	mov	r0, r6
    d6f4:	f000 f803 	bl	d6fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    d6f8:	4420      	add	r0, r4
    d6fa:	1d00      	adds	r0, r0, #4
    d6fc:	bd70      	pop	{r4, r5, r6, pc}
    d6fe:	b510      	push	{r4, lr}
    d700:	460a      	mov	r2, r1
    d702:	2101      	movs	r1, #1
    d704:	f7ff ff29 	bl	d55a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d708:	1cc0      	adds	r0, r0, #3
    d70a:	f020 0003 	bic.w	r0, r0, #3
    d70e:	bd10      	pop	{r4, pc}
    d710:	b510      	push	{r4, lr}
    d712:	460a      	mov	r2, r1
    d714:	2101      	movs	r1, #1
    d716:	f7ff ff20 	bl	d55a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d71a:	1cc0      	adds	r0, r0, #3
    d71c:	f020 0003 	bic.w	r0, r0, #3
    d720:	bd10      	pop	{r4, pc}
    d722:	2800      	cmp	r0, #0
    d724:	db09      	blt.n	d73a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x58>
    d726:	f000 021f 	and.w	r2, r0, #31
    d72a:	2101      	movs	r1, #1
    d72c:	4091      	lsls	r1, r2
    d72e:	0940      	lsrs	r0, r0, #5
    d730:	0080      	lsls	r0, r0, #2
    d732:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d736:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d73a:	4770      	bx	lr
    d73c:	5840      	ldr	r0, [r0, r1]
    d73e:	2800      	cmp	r0, #0
    d740:	d000      	beq.n	d744 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    d742:	2001      	movs	r0, #1
    d744:	4770      	bx	lr

0000d746 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d746:	f7f6 bffb 	b.w	4740 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000d74a <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    d74a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d74e:	2000      	movs	r0, #0
    d750:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    d754:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    d758:	2001      	movs	r0, #1
    d75a:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    d75e:	4770      	bx	lr

0000d760 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    d760:	b108      	cbz	r0, d766 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    d762:	2000      	movs	r0, #0
    d764:	4770      	bx	lr
    d766:	2001      	movs	r0, #1
    d768:	4770      	bx	lr

0000d76a <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d76a:	f7f7 b93b 	b.w	49e4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d76e <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d76e:	f7f7 b929 	b.w	49c4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d772 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d772:	b510      	push	{r4, lr}
    d774:	2900      	cmp	r1, #0
    d776:	4604      	mov	r4, r0
    d778:	f04f 0106 	mov.w	r1, #6
    d77c:	d002      	beq.n	d784 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d77e:	f7f6 fb7b 	bl	3e78 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d782:	e001      	b.n	d788 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d784:	f7f6 fb94 	bl	3eb0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d788:	7960      	ldrb	r0, [r4, #5]
    d78a:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d78e:	7160      	strb	r0, [r4, #5]
    d790:	bd10      	pop	{r4, pc}

0000d792 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d792:	4770      	bx	lr

0000d794 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d794:	b530      	push	{r4, r5, lr}
    d796:	460c      	mov	r4, r1
    d798:	4605      	mov	r5, r0
    d79a:	b08d      	sub	sp, #52	; 0x34
    d79c:	f04f 0103 	mov.w	r1, #3
    d7a0:	f104 0003 	add.w	r0, r4, #3
    d7a4:	b112      	cbz	r2, d7ac <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d7a6:	f7f6 fb67 	bl	3e78 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d7aa:	e001      	b.n	d7b0 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d7ac:	f7f6 fb80 	bl	3eb0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d7b0:	7960      	ldrb	r0, [r4, #5]
    d7b2:	220d      	movs	r2, #13
    d7b4:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d7b8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d7bc:	7160      	strb	r0, [r4, #5]
    d7be:	2100      	movs	r1, #0
    d7c0:	a804      	add	r0, sp, #16
    d7c2:	f7fe ff43 	bl	c64c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d7c6:	78e0      	ldrb	r0, [r4, #3]
    d7c8:	f88d 001f 	strb.w	r0, [sp, #31]
    d7cc:	7920      	ldrb	r0, [r4, #4]
    d7ce:	f88d 001e 	strb.w	r0, [sp, #30]
    d7d2:	7960      	ldrb	r0, [r4, #5]
    d7d4:	f88d 001d 	strb.w	r0, [sp, #29]
    d7d8:	2210      	movs	r2, #16
    d7da:	4629      	mov	r1, r5
    d7dc:	4668      	mov	r0, sp
    d7de:	f7fe febb 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d7e2:	4668      	mov	r0, sp
    d7e4:	f7ff ffaf 	bl	d746 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d7e8:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d7ec:	7020      	strb	r0, [r4, #0]
    d7ee:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d7f2:	7060      	strb	r0, [r4, #1]
    d7f4:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d7f8:	70a0      	strb	r0, [r4, #2]
    d7fa:	b00d      	add	sp, #52	; 0x34
    d7fc:	bd30      	pop	{r4, r5, pc}

0000d7fe <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    d7fe:	b530      	push	{r4, r5, lr}
    d800:	b08d      	sub	sp, #52	; 0x34
    d802:	460c      	mov	r4, r1
    d804:	4605      	mov	r5, r0
    d806:	220d      	movs	r2, #13
    d808:	2100      	movs	r1, #0
    d80a:	a804      	add	r0, sp, #16
    d80c:	f7fe ff1e 	bl	c64c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d810:	78e0      	ldrb	r0, [r4, #3]
    d812:	f88d 001f 	strb.w	r0, [sp, #31]
    d816:	7920      	ldrb	r0, [r4, #4]
    d818:	f88d 001e 	strb.w	r0, [sp, #30]
    d81c:	7960      	ldrb	r0, [r4, #5]
    d81e:	f88d 001d 	strb.w	r0, [sp, #29]
    d822:	2210      	movs	r2, #16
    d824:	4629      	mov	r1, r5
    d826:	4668      	mov	r0, sp
    d828:	f7fe fe96 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d82c:	4668      	mov	r0, sp
    d82e:	f7ff ff8a 	bl	d746 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d832:	7820      	ldrb	r0, [r4, #0]
    d834:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    d838:	4288      	cmp	r0, r1
    d83a:	d10c      	bne.n	d856 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d83c:	7860      	ldrb	r0, [r4, #1]
    d83e:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    d842:	4288      	cmp	r0, r1
    d844:	d107      	bne.n	d856 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d846:	78a0      	ldrb	r0, [r4, #2]
    d848:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    d84c:	4288      	cmp	r0, r1
    d84e:	d102      	bne.n	d856 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d850:	2001      	movs	r0, #1
    d852:	b00d      	add	sp, #52	; 0x34
    d854:	bd30      	pop	{r4, r5, pc}
    d856:	2000      	movs	r0, #0
    d858:	e7fb      	b.n	d852 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

0000d85a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    d85a:	f7f7 bc87 	b.w	516c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    d85e:	b510      	push	{r4, lr}
    d860:	2801      	cmp	r0, #1
    d862:	d008      	beq.n	d876 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x1c>
    d864:	2802      	cmp	r0, #2
    d866:	d004      	beq.n	d872 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    d868:	f240 31ad 	movw	r1, #941	; 0x3ad
    d86c:	2006      	movs	r0, #6
    d86e:	f7f6 fa75 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d872:	2001      	movs	r0, #1
    d874:	bd10      	pop	{r4, pc}
    d876:	2000      	movs	r0, #0
    d878:	bd10      	pop	{r4, pc}
    d87a:	2900      	cmp	r1, #0
    d87c:	d004      	beq.n	d888 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2e>
    d87e:	2801      	cmp	r0, #1
    d880:	d003      	beq.n	d88a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d882:	2901      	cmp	r1, #1
    d884:	d001      	beq.n	d88a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d886:	2002      	movs	r0, #2
    d888:	4770      	bx	lr
    d88a:	2001      	movs	r0, #1
    d88c:	4770      	bx	lr
    d88e:	f7ff bdb1 	b.w	d3f4 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000d892 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    d892:	2101      	movs	r1, #1
    d894:	f7f8 b87e 	b.w	5994 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000d898 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    d898:	b510      	push	{r4, lr}
    d89a:	f002 f806 	bl	f8aa <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    d89e:	b118      	cbz	r0, d8a8 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    d8a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d8a4:	f7fd bc10 	b.w	b0c8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    d8a8:	20ff      	movs	r0, #255	; 0xff
    d8aa:	bd10      	pop	{r4, pc}

0000d8ac <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    d8ac:	b510      	push	{r4, lr}
    d8ae:	f7f8 f8b9 	bl	5a24 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d8b2:	2810      	cmp	r0, #16
    d8b4:	d003      	beq.n	d8be <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    d8b6:	f7f8 f885 	bl	59c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    d8ba:	2810      	cmp	r0, #16
    d8bc:	d100      	bne.n	d8c0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    d8be:	2008      	movs	r0, #8
    d8c0:	bd10      	pop	{r4, pc}

0000d8c2 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    d8c2:	b510      	push	{r4, lr}
    d8c4:	f7f8 f8ae 	bl	5a24 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d8c8:	2810      	cmp	r0, #16
    d8ca:	d007      	beq.n	d8dc <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d8cc:	f7f8 f87a 	bl	59c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    d8d0:	2810      	cmp	r0, #16
    d8d2:	d003      	beq.n	d8dc <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d8d4:	f7f8 f8ee 	bl	5ab4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    d8d8:	2001      	movs	r0, #1
    d8da:	bd10      	pop	{r4, pc}
    d8dc:	2000      	movs	r0, #0
    d8de:	bd10      	pop	{r4, pc}

0000d8e0 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    d8e0:	b510      	push	{r4, lr}
    d8e2:	f7f8 f89f 	bl	5a24 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d8e6:	2810      	cmp	r0, #16
    d8e8:	d003      	beq.n	d8f2 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    d8ea:	f7f8 f92b 	bl	5b44 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    d8ee:	2001      	movs	r0, #1
    d8f0:	bd10      	pop	{r4, pc}
    d8f2:	2000      	movs	r0, #0
    d8f4:	bd10      	pop	{r4, pc}

0000d8f6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    d8f6:	b570      	push	{r4, r5, r6, lr}
    d8f8:	460e      	mov	r6, r1
    d8fa:	b08c      	sub	sp, #48	; 0x30
    d8fc:	4614      	mov	r4, r2
    d8fe:	4601      	mov	r1, r0
    d900:	461d      	mov	r5, r3
    d902:	2210      	movs	r2, #16
    d904:	4668      	mov	r0, sp
    d906:	f000 f9b8 	bl	dc7a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d90a:	2210      	movs	r2, #16
    d90c:	4631      	mov	r1, r6
    d90e:	a804      	add	r0, sp, #16
    d910:	f000 f9b3 	bl	dc7a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d914:	4668      	mov	r0, sp
    d916:	f7ff ff16 	bl	d746 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d91a:	a908      	add	r1, sp, #32
    d91c:	f04f 0210 	mov.w	r2, #16
    d920:	4628      	mov	r0, r5
    d922:	b11c      	cbz	r4, d92c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    d924:	f000 f9a9 	bl	dc7a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d928:	b00c      	add	sp, #48	; 0x30
    d92a:	bd70      	pop	{r4, r5, r6, pc}
    d92c:	f7fe fe14 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d930:	e7fa      	b.n	d928 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>
    d932:	0781      	lsls	r1, r0, #30
    d934:	d501      	bpl.n	d93a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x44>
    d936:	2002      	movs	r0, #2
    d938:	4770      	bx	lr
    d93a:	07c0      	lsls	r0, r0, #31
    d93c:	d0fc      	beq.n	d938 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x42>
    d93e:	2001      	movs	r0, #1
    d940:	4770      	bx	lr

0000d942 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>:
    d942:	b530      	push	{r4, r5, lr}
    d944:	4605      	mov	r5, r0
    d946:	7900      	ldrb	r0, [r0, #4]
    d948:	0940      	lsrs	r0, r0, #5
    d94a:	d10e      	bne.n	d96a <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    d94c:	2400      	movs	r4, #0
    d94e:	4623      	mov	r3, r4
    d950:	5ce8      	ldrb	r0, [r5, r3]
    d952:	f000 f855 	bl	da00 <sym_TVQ52UL2BTPMYHVZ54PCMYQBSDBT5KZ4Z4A63DQ>
    d956:	1c5b      	adds	r3, r3, #1
    d958:	4420      	add	r0, r4
    d95a:	b2db      	uxtb	r3, r3
    d95c:	b2c4      	uxtb	r4, r0
    d95e:	2b05      	cmp	r3, #5
    d960:	d3f6      	bcc.n	d950 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0xe>
    d962:	2c01      	cmp	r4, #1
    d964:	d901      	bls.n	d96a <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    d966:	2001      	movs	r0, #1
    d968:	bd30      	pop	{r4, r5, pc}
    d96a:	2000      	movs	r0, #0
    d96c:	bd30      	pop	{r4, r5, pc}

0000d96e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    d96e:	b510      	push	{r4, lr}
    d970:	460c      	mov	r4, r1
    d972:	2100      	movs	r1, #0
    d974:	f7ff fe91 	bl	d69a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    d978:	6060      	str	r0, [r4, #4]
    d97a:	b110      	cbz	r0, d982 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    d97c:	2000      	movs	r0, #0
    d97e:	7020      	strb	r0, [r4, #0]
    d980:	bd10      	pop	{r4, pc}
    d982:	2002      	movs	r0, #2
    d984:	bd10      	pop	{r4, pc}

0000d986 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    d986:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d98a:	4348      	muls	r0, r1
    d98c:	4770      	bx	lr

0000d98e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    d98e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d992:	fbb0 f0f1 	udiv	r0, r0, r1
    d996:	b280      	uxth	r0, r0
    d998:	4770      	bx	lr

0000d99a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    d99a:	b570      	push	{r4, r5, r6, lr}
    d99c:	4604      	mov	r4, r0
    d99e:	4290      	cmp	r0, r2
    d9a0:	d20b      	bcs.n	d9ba <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    d9a2:	1b10      	subs	r0, r2, r4
    d9a4:	2865      	cmp	r0, #101	; 0x65
    d9a6:	d200      	bcs.n	d9aa <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    d9a8:	2065      	movs	r0, #101	; 0x65
    d9aa:	1825      	adds	r5, r4, r0
    d9ac:	428d      	cmp	r5, r1
    d9ae:	d803      	bhi.n	d9b8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    d9b0:	2104      	movs	r1, #4
    d9b2:	f7f3 fcaf 	bl	1314 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    d9b6:	b108      	cbz	r0, d9bc <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    d9b8:	4620      	mov	r0, r4
    d9ba:	bd70      	pop	{r4, r5, r6, pc}
    d9bc:	4628      	mov	r0, r5
    d9be:	bd70      	pop	{r4, r5, r6, pc}

0000d9c0 <sym_GYGF5D6AIJ7H7OKIHC3CN5ZKO53JXIO7G3W4UPQ>:
    d9c0:	f000 3155 	and.w	r1, r0, #1431655765	; 0x55555555
    d9c4:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    d9c8:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    d9cc:	4408      	add	r0, r1
    d9ce:	f000 3133 	and.w	r1, r0, #858993459	; 0x33333333
    d9d2:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
    d9d6:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    d9da:	4408      	add	r0, r1
    d9dc:	f000 310f 	and.w	r1, r0, #252645135	; 0xf0f0f0f
    d9e0:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
    d9e4:	ea02 1010 	and.w	r0, r2, r0, lsr #4
    d9e8:	4408      	add	r0, r1
    d9ea:	f000 11ff 	and.w	r1, r0, #16711935	; 0xff00ff
    d9ee:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
    d9f2:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    d9f6:	4408      	add	r0, r1
    d9f8:	b281      	uxth	r1, r0
    d9fa:	eb01 4010 	add.w	r0, r1, r0, lsr #16
    d9fe:	4770      	bx	lr

0000da00 <sym_TVQ52UL2BTPMYHVZ54PCMYQBSDBT5KZ4Z4A63DQ>:
    da00:	f000 0155 	and.w	r1, r0, #85	; 0x55
    da04:	2255      	movs	r2, #85	; 0x55
    da06:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    da0a:	4408      	add	r0, r1
    da0c:	f000 0133 	and.w	r1, r0, #51	; 0x33
    da10:	2233      	movs	r2, #51	; 0x33
    da12:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    da16:	4408      	add	r0, r1
    da18:	f000 010f 	and.w	r1, r0, #15
    da1c:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    da20:	4770      	bx	lr

0000da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    da22:	b510      	push	{r4, lr}
    da24:	f1a2 030f 	sub.w	r3, r2, #15
    da28:	290c      	cmp	r1, #12
    da2a:	d24f      	bcs.n	dacc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da2c:	e8df f001 	tbb	[pc, r1]
    da30:	120d0806 	.word	0x120d0806
    da34:	2f271815 	.word	0x2f271815
    da38:	3d354c32 	.word	0x3d354c32
    da3c:	b3a2      	cbz	r2, daa8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x86>
    da3e:	e045      	b.n	dacc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da40:	2a07      	cmp	r2, #7
    da42:	d045      	beq.n	dad0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da44:	2a08      	cmp	r2, #8
    da46:	d043      	beq.n	dad0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da48:	e040      	b.n	dacc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da4a:	2a0c      	cmp	r2, #12
    da4c:	d040      	beq.n	dad0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da4e:	2a0b      	cmp	r2, #11
    da50:	d03e      	beq.n	dad0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da52:	e03b      	b.n	dacc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da54:	2a0d      	cmp	r2, #13
    da56:	d03b      	beq.n	dad0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da58:	e038      	b.n	dacc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da5a:	2b0c      	cmp	r3, #12
    da5c:	d938      	bls.n	dad0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da5e:	e035      	b.n	dacc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da60:	2a12      	cmp	r2, #18
    da62:	d035      	beq.n	dad0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da64:	2a11      	cmp	r2, #17
    da66:	d033      	beq.n	dad0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da68:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    da6c:	b120      	cbz	r0, da78 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x56>
    da6e:	2a12      	cmp	r2, #18
    da70:	d32c      	bcc.n	dacc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da72:	2a1a      	cmp	r2, #26
    da74:	d92c      	bls.n	dad0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da76:	e029      	b.n	dacc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da78:	2a16      	cmp	r2, #22
    da7a:	d2fa      	bcs.n	da72 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x50>
    da7c:	e026      	b.n	dacc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da7e:	2b03      	cmp	r3, #3
    da80:	d926      	bls.n	dad0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da82:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    da86:	b308      	cbz	r0, dacc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da88:	2a1b      	cmp	r2, #27
    da8a:	d921      	bls.n	dad0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da8c:	e01e      	b.n	dacc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da8e:	2a04      	cmp	r2, #4
    da90:	d01e      	beq.n	dad0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da92:	e01b      	b.n	dacc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da94:	2a01      	cmp	r2, #1
    da96:	d01b      	beq.n	dad0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da98:	e018      	b.n	dacc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da9a:	2a1c      	cmp	r2, #28
    da9c:	d018      	beq.n	dad0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da9e:	2a1d      	cmp	r2, #29
    daa0:	d016      	beq.n	dad0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    daa2:	2a1e      	cmp	r2, #30
    daa4:	d014      	beq.n	dad0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    daa6:	e011      	b.n	dacc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    daa8:	e012      	b.n	dad0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    daaa:	2a1f      	cmp	r2, #31
    daac:	d010      	beq.n	dad0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    daae:	2a20      	cmp	r2, #32
    dab0:	d00e      	beq.n	dad0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dab2:	2a21      	cmp	r2, #33	; 0x21
    dab4:	d00c      	beq.n	dad0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dab6:	2a22      	cmp	r2, #34	; 0x22
    dab8:	d00a      	beq.n	dad0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    daba:	2a23      	cmp	r2, #35	; 0x23
    dabc:	d008      	beq.n	dad0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dabe:	2a24      	cmp	r2, #36	; 0x24
    dac0:	d006      	beq.n	dad0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dac2:	2a26      	cmp	r2, #38	; 0x26
    dac4:	d004      	beq.n	dad0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dac6:	e001      	b.n	dacc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    dac8:	2a05      	cmp	r2, #5
    daca:	d001      	beq.n	dad0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dacc:	2000      	movs	r0, #0
    dace:	bd10      	pop	{r4, pc}
    dad0:	2001      	movs	r0, #1
    dad2:	bd10      	pop	{r4, pc}

0000dad4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    dad4:	280c      	cmp	r0, #12
    dad6:	d013      	beq.n	db00 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dad8:	280b      	cmp	r0, #11
    dada:	d011      	beq.n	db00 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dadc:	280d      	cmp	r0, #13
    dade:	d00f      	beq.n	db00 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dae0:	281f      	cmp	r0, #31
    dae2:	d00d      	beq.n	db00 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dae4:	2820      	cmp	r0, #32
    dae6:	d00b      	beq.n	db00 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dae8:	2821      	cmp	r0, #33	; 0x21
    daea:	d009      	beq.n	db00 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    daec:	2822      	cmp	r0, #34	; 0x22
    daee:	d007      	beq.n	db00 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    daf0:	2823      	cmp	r0, #35	; 0x23
    daf2:	d005      	beq.n	db00 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    daf4:	2824      	cmp	r0, #36	; 0x24
    daf6:	d003      	beq.n	db00 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    daf8:	2826      	cmp	r0, #38	; 0x26
    dafa:	d001      	beq.n	db00 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dafc:	2000      	movs	r0, #0
    dafe:	4770      	bx	lr
    db00:	2001      	movs	r0, #1
    db02:	4770      	bx	lr

0000db04 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    db04:	f011 0f0c 	tst.w	r1, #12
    db08:	d016      	beq.n	db38 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    db0a:	074a      	lsls	r2, r1, #29
    db0c:	f44f 7116 	mov.w	r1, #600	; 0x258
    db10:	2a00      	cmp	r2, #0
    db12:	da02      	bge.n	db1a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    db14:	f04f 0210 	mov.w	r2, #16
    db18:	e001      	b.n	db1e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    db1a:	f04f 0240 	mov.w	r2, #64	; 0x40
    db1e:	da01      	bge.n	db24 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    db20:	f04f 0196 	mov.w	r1, #150	; 0x96
    db24:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    db28:	eba0 0301 	sub.w	r3, r0, r1
    db2c:	4288      	cmp	r0, r1
    db2e:	d910      	bls.n	db52 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    db30:	fb93 f0f2 	sdiv	r0, r3, r2
    db34:	b280      	uxth	r0, r0
    db36:	4770      	bx	lr
    db38:	2902      	cmp	r1, #2
    db3a:	d002      	beq.n	db42 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    db3c:	2870      	cmp	r0, #112	; 0x70
    db3e:	d80a      	bhi.n	db56 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    db40:	e007      	b.n	db52 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    db42:	283c      	cmp	r0, #60	; 0x3c
    db44:	d905      	bls.n	db52 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    db46:	383c      	subs	r0, #60	; 0x3c
    db48:	17c1      	asrs	r1, r0, #31
    db4a:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    db4e:	1080      	asrs	r0, r0, #2
    db50:	e7f0      	b.n	db34 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    db52:	2000      	movs	r0, #0
    db54:	e7ee      	b.n	db34 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    db56:	3870      	subs	r0, #112	; 0x70
    db58:	17c1      	asrs	r1, r0, #31
    db5a:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    db5e:	10c0      	asrs	r0, r0, #3
    db60:	e7e8      	b.n	db34 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000db62 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    db62:	6809      	ldr	r1, [r1, #0]
    db64:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    db68:	4770      	bx	lr

0000db6a <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>:
    db6a:	2801      	cmp	r0, #1
    db6c:	d002      	beq.n	db74 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    db6e:	2802      	cmp	r0, #2
    db70:	d000      	beq.n	db74 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    db72:	2000      	movs	r0, #0
    db74:	4770      	bx	lr

0000db76 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    db76:	b510      	push	{r4, lr}
    db78:	f640 12c4 	movw	r2, #2500	; 0x9c4
    db7c:	2901      	cmp	r1, #1
    db7e:	d006      	beq.n	db8e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    db80:	2902      	cmp	r1, #2
    db82:	d005      	beq.n	db90 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    db84:	f240 31b1 	movw	r1, #945	; 0x3b1
    db88:	2029      	movs	r0, #41	; 0x29
    db8a:	f7f6 f8e7 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db8e:	b108      	cbz	r0, db94 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    db90:	4610      	mov	r0, r2
    db92:	bd10      	pop	{r4, pc}
    db94:	f240 40e2 	movw	r0, #1250	; 0x4e2
    db98:	bd10      	pop	{r4, pc}

0000db9a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
    db9a:	b530      	push	{r4, r5, lr}
    db9c:	242a      	movs	r4, #42	; 0x2a
    db9e:	2523      	movs	r5, #35	; 0x23
    dba0:	2a16      	cmp	r2, #22
    dba2:	d105      	bne.n	dbb0 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x16>
    dba4:	280c      	cmp	r0, #12
    dba6:	d007      	beq.n	dbb8 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    dba8:	280d      	cmp	r0, #13
    dbaa:	d005      	beq.n	dbb8 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    dbac:	281f      	cmp	r0, #31
    dbae:	d005      	beq.n	dbbc <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
    dbb0:	b171      	cbz	r1, dbd0 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
    dbb2:	2a16      	cmp	r2, #22
    dbb4:	d10c      	bne.n	dbd0 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
    dbb6:	e004      	b.n	dbc2 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x28>
    dbb8:	701c      	strb	r4, [r3, #0]
    dbba:	e000      	b.n	dbbe <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x24>
    dbbc:	701d      	strb	r5, [r3, #0]
    dbbe:	2001      	movs	r0, #1
    dbc0:	bd30      	pop	{r4, r5, pc}
    dbc2:	7808      	ldrb	r0, [r1, #0]
    dbc4:	2801      	cmp	r0, #1
    dbc6:	d0f7      	beq.n	dbb8 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    dbc8:	2800      	cmp	r0, #0
    dbca:	d0f5      	beq.n	dbb8 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    dbcc:	2816      	cmp	r0, #22
    dbce:	d0f5      	beq.n	dbbc <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
    dbd0:	2000      	movs	r0, #0
    dbd2:	bd30      	pop	{r4, r5, pc}

0000dbd4 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
    dbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dbd6:	b2cf      	uxtb	r7, r1
    dbd8:	4606      	mov	r6, r0
    dbda:	f3c1 2407 	ubfx	r4, r1, #8, #8
    dbde:	4621      	mov	r1, r4
    dbe0:	4638      	mov	r0, r7
    dbe2:	f000 f8ca 	bl	dd7a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    dbe6:	b2f5      	uxtb	r5, r6
    dbe8:	f3c6 2607 	ubfx	r6, r6, #8, #8
    dbec:	b920      	cbnz	r0, dbf8 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
    dbee:	4631      	mov	r1, r6
    dbf0:	4628      	mov	r0, r5
    dbf2:	f000 f8c2 	bl	dd7a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    dbf6:	b140      	cbz	r0, dc0a <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
    dbf8:	4027      	ands	r7, r4
    dbfa:	4035      	ands	r5, r6
    dbfc:	403d      	ands	r5, r7
    dbfe:	4644      	mov	r4, r8
    dc00:	f365 0407 	bfi	r4, r5, #0, #8
    dc04:	f365 240f 	bfi	r4, r5, #8, #8
    dc08:	e006      	b.n	dc18 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x44>
    dc0a:	4025      	ands	r5, r4
    dc0c:	4644      	mov	r4, r8
    dc0e:	f365 0407 	bfi	r4, r5, #0, #8
    dc12:	403e      	ands	r6, r7
    dc14:	f366 240f 	bfi	r4, r6, #8, #8
    dc18:	b2e0      	uxtb	r0, r4
    dc1a:	f7ff fe8a 	bl	d932 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    dc1e:	f88d 0000 	strb.w	r0, [sp]
    dc22:	f3c4 2007 	ubfx	r0, r4, #8, #8
    dc26:	f7ff fe84 	bl	d932 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    dc2a:	f88d 0001 	strb.w	r0, [sp, #1]
    dc2e:	f8bd 0000 	ldrh.w	r0, [sp]
    dc32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000dc34 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    dc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc38:	460c      	mov	r4, r1
    dc3a:	4605      	mov	r5, r0
    dc3c:	68c6      	ldr	r6, [r0, #12]
    dc3e:	f7f3 ffc3 	bl	1bc8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    dc42:	b198      	cbz	r0, dc6c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    dc44:	b1bc      	cbz	r4, dc76 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    dc46:	4630      	mov	r0, r6
    dc48:	68e9      	ldr	r1, [r5, #12]
    dc4a:	f7f3 fcb1 	bl	15b0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    dc4e:	2800      	cmp	r0, #0
    dc50:	dd11      	ble.n	dc76 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    dc52:	4420      	add	r0, r4
    dc54:	1e40      	subs	r0, r0, #1
    dc56:	fbb0 f7f4 	udiv	r7, r0, r4
    dc5a:	fb07 f104 	mul.w	r1, r7, r4
    dc5e:	4630      	mov	r0, r6
    dc60:	f7f3 fc74 	bl	154c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    dc64:	60e8      	str	r0, [r5, #12]
    dc66:	4638      	mov	r0, r7
    dc68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dc6c:	f240 2136 	movw	r1, #566	; 0x236
    dc70:	2029      	movs	r0, #41	; 0x29
    dc72:	f7f6 f873 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc76:	2000      	movs	r0, #0
    dc78:	e7f6      	b.n	dc68 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000dc7a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    dc7a:	b530      	push	{r4, r5, lr}
    dc7c:	4613      	mov	r3, r2
    dc7e:	e006      	b.n	dc8e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    dc80:	18cc      	adds	r4, r1, r3
    dc82:	1ad5      	subs	r5, r2, r3
    dc84:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    dc88:	1e5b      	subs	r3, r3, #1
    dc8a:	5544      	strb	r4, [r0, r5]
    dc8c:	b2db      	uxtb	r3, r3
    dc8e:	2b00      	cmp	r3, #0
    dc90:	d1f6      	bne.n	dc80 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    dc92:	bd30      	pop	{r4, r5, pc}

0000dc94 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    dc94:	b538      	push	{r3, r4, r5, lr}
    dc96:	4605      	mov	r5, r0
    dc98:	460c      	mov	r4, r1
    dc9a:	4668      	mov	r0, sp
    dc9c:	f7fd ff24 	bl	bae8 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    dca0:	b310      	cbz	r0, dce8 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    dca2:	f99d 0000 	ldrsb.w	r0, [sp]
    dca6:	7260      	strb	r0, [r4, #9]
    dca8:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    dcac:	72a1      	strb	r1, [r4, #10]
    dcae:	f994 100b 	ldrsb.w	r1, [r4, #11]
    dcb2:	2200      	movs	r2, #0
    dcb4:	1a41      	subs	r1, r0, r1
    dcb6:	d500      	bpl.n	dcba <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    dcb8:	4249      	negs	r1, r1
    dcba:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    dcbe:	428b      	cmp	r3, r1
    dcc0:	dc10      	bgt.n	dce4 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    dcc2:	2bff      	cmp	r3, #255	; 0xff
    dcc4:	d00e      	beq.n	dce4 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    dcc6:	7b21      	ldrb	r1, [r4, #12]
    dcc8:	1c49      	adds	r1, r1, #1
    dcca:	b2c9      	uxtb	r1, r1
    dccc:	7321      	strb	r1, [r4, #12]
    dcce:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    dcd2:	4299      	cmp	r1, r3
    dcd4:	d802      	bhi.n	dcdc <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    dcd6:	7ae1      	ldrb	r1, [r4, #11]
    dcd8:	297f      	cmp	r1, #127	; 0x7f
    dcda:	d103      	bne.n	dce4 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    dcdc:	72e0      	strb	r0, [r4, #11]
    dcde:	2000      	movs	r0, #0
    dce0:	7320      	strb	r0, [r4, #12]
    dce2:	2201      	movs	r2, #1
    dce4:	4610      	mov	r0, r2
    dce6:	bd38      	pop	{r3, r4, r5, pc}
    dce8:	207f      	movs	r0, #127	; 0x7f
    dcea:	7260      	strb	r0, [r4, #9]
    dcec:	2000      	movs	r0, #0
    dcee:	bd38      	pop	{r3, r4, r5, pc}

0000dcf0 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    dcf0:	2300      	movs	r3, #0
    dcf2:	6283      	str	r3, [r0, #40]	; 0x28
    dcf4:	8602      	strh	r2, [r0, #48]	; 0x30
    dcf6:	f240 2371 	movw	r3, #625	; 0x271
    dcfa:	435a      	muls	r2, r3
    dcfc:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    dd00:	1e52      	subs	r2, r2, #1
    dd02:	fbb2 f1f1 	udiv	r1, r2, r1
    dd06:	62c1      	str	r1, [r0, #44]	; 0x2c
    dd08:	4770      	bx	lr

0000dd0a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    dd0a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dd0e:	4348      	muls	r0, r1
    dd10:	4770      	bx	lr

0000dd12 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    dd12:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dd16:	fbb0 f0f1 	udiv	r0, r0, r1
    dd1a:	b280      	uxth	r0, r0
    dd1c:	4770      	bx	lr

0000dd1e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    dd1e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dd22:	fb10 f001 	smulbb	r0, r0, r1
    dd26:	4770      	bx	lr

0000dd28 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    dd28:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dd2c:	fbb0 f0f1 	udiv	r0, r0, r1
    dd30:	b2c0      	uxtb	r0, r0
    dd32:	4770      	bx	lr

0000dd34 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    dd34:	b510      	push	{r4, lr}
    dd36:	2300      	movs	r3, #0
    dd38:	461a      	mov	r2, r3
    dd3a:	e003      	b.n	dd44 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    dd3c:	5c84      	ldrb	r4, [r0, r2]
    dd3e:	4323      	orrs	r3, r4
    dd40:	1c52      	adds	r2, r2, #1
    dd42:	b2d2      	uxtb	r2, r2
    dd44:	428a      	cmp	r2, r1
    dd46:	d3f9      	bcc.n	dd3c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    dd48:	b10b      	cbz	r3, dd4e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    dd4a:	2000      	movs	r0, #0
    dd4c:	bd10      	pop	{r4, pc}
    dd4e:	2001      	movs	r0, #1
    dd50:	bd10      	pop	{r4, pc}
    dd52:	b510      	push	{r4, lr}
    dd54:	4604      	mov	r4, r0
    dd56:	f7fd f933 	bl	afc0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    dd5a:	f644 112b 	movw	r1, #18731	; 0x492b
    dd5e:	4008      	ands	r0, r1
    dd60:	2101      	movs	r1, #1
    dd62:	7561      	strb	r1, [r4, #21]
    dd64:	f884 004e 	strb.w	r0, [r4, #78]	; 0x4e
    dd68:	0a00      	lsrs	r0, r0, #8
    dd6a:	f884 004f 	strb.w	r0, [r4, #79]	; 0x4f
    dd6e:	20fe      	movs	r0, #254	; 0xfe
    dd70:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    dd74:	207f      	movs	r0, #127	; 0x7f
    dd76:	7260      	strb	r0, [r4, #9]
    dd78:	bd10      	pop	{r4, pc}
    dd7a:	2801      	cmp	r0, #1
    dd7c:	d002      	beq.n	dd84 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x50>
    dd7e:	2802      	cmp	r0, #2
    dd80:	d003      	beq.n	dd8a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x56>
    dd82:	e004      	b.n	dd8e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    dd84:	2901      	cmp	r1, #1
    dd86:	d004      	beq.n	dd92 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    dd88:	e001      	b.n	dd8e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    dd8a:	2902      	cmp	r1, #2
    dd8c:	d001      	beq.n	dd92 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    dd8e:	2000      	movs	r0, #0
    dd90:	4770      	bx	lr
    dd92:	2001      	movs	r0, #1
    dd94:	4770      	bx	lr

0000dd96 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    dd96:	b510      	push	{r4, lr}
    dd98:	4604      	mov	r4, r0
    dd9a:	f890 0020 	ldrb.w	r0, [r0, #32]
    dd9e:	b108      	cbz	r0, dda4 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    dda0:	2825      	cmp	r0, #37	; 0x25
    dda2:	d901      	bls.n	dda8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    dda4:	2012      	movs	r0, #18
    dda6:	bd10      	pop	{r4, pc}
    dda8:	b12a      	cbz	r2, ddb6 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    ddaa:	7d60      	ldrb	r0, [r4, #21]
    ddac:	b128      	cbz	r0, ddba <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    ddae:	2801      	cmp	r0, #1
    ddb0:	d009      	beq.n	ddc6 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    ddb2:	201f      	movs	r0, #31
    ddb4:	bd10      	pop	{r4, pc}
    ddb6:	2000      	movs	r0, #0
    ddb8:	bd10      	pop	{r4, pc}
    ddba:	4620      	mov	r0, r4
    ddbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ddc0:	4611      	mov	r1, r2
    ddc2:	f7f7 bfb5 	b.w	5d30 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    ddc6:	88a2      	ldrh	r2, [r4, #4]
    ddc8:	6909      	ldr	r1, [r1, #16]
    ddca:	f104 0015 	add.w	r0, r4, #21
    ddce:	f7f7 ff5b 	bl	5c88 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    ddd2:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    ddd6:	e7ee      	b.n	ddb6 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000ddd8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    ddd8:	b530      	push	{r4, r5, lr}
    ddda:	1c42      	adds	r2, r0, #1
    dddc:	428a      	cmp	r2, r1
    ddde:	d004      	beq.n	ddea <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    dde0:	680a      	ldr	r2, [r1, #0]
    dde2:	f8c0 2001 	str.w	r2, [r0, #1]
    dde6:	7909      	ldrb	r1, [r1, #4]
    dde8:	7141      	strb	r1, [r0, #5]
    ddea:	7941      	ldrb	r1, [r0, #5]
    ddec:	f001 011f 	and.w	r1, r1, #31
    ddf0:	7141      	strb	r1, [r0, #5]
    ddf2:	2100      	movs	r1, #0
    ddf4:	72c1      	strb	r1, [r0, #11]
    ddf6:	1843      	adds	r3, r0, r1
    ddf8:	1c49      	adds	r1, r1, #1
    ddfa:	785c      	ldrb	r4, [r3, #1]
    ddfc:	b2c9      	uxtb	r1, r1
    ddfe:	f004 0201 	and.w	r2, r4, #1
    de02:	0864      	lsrs	r4, r4, #1
    de04:	f004 0501 	and.w	r5, r4, #1
    de08:	4415      	add	r5, r2
    de0a:	0862      	lsrs	r2, r4, #1
    de0c:	f002 0401 	and.w	r4, r2, #1
    de10:	442c      	add	r4, r5
    de12:	0852      	lsrs	r2, r2, #1
    de14:	f002 0501 	and.w	r5, r2, #1
    de18:	442c      	add	r4, r5
    de1a:	0852      	lsrs	r2, r2, #1
    de1c:	f002 0501 	and.w	r5, r2, #1
    de20:	442c      	add	r4, r5
    de22:	0852      	lsrs	r2, r2, #1
    de24:	f002 0501 	and.w	r5, r2, #1
    de28:	442c      	add	r4, r5
    de2a:	0852      	lsrs	r2, r2, #1
    de2c:	f002 0501 	and.w	r5, r2, #1
    de30:	442c      	add	r4, r5
    de32:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    de36:	719a      	strb	r2, [r3, #6]
    de38:	7ac3      	ldrb	r3, [r0, #11]
    de3a:	2905      	cmp	r1, #5
    de3c:	441a      	add	r2, r3
    de3e:	72c2      	strb	r2, [r0, #11]
    de40:	d3d9      	bcc.n	ddf6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    de42:	bd30      	pop	{r4, r5, pc}

0000de44 <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>:
    de44:	68c0      	ldr	r0, [r0, #12]
    de46:	6008      	str	r0, [r1, #0]
    de48:	4770      	bx	lr

0000de4a <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>:
    de4a:	6842      	ldr	r2, [r0, #4]
    de4c:	600a      	str	r2, [r1, #0]
    de4e:	6880      	ldr	r0, [r0, #8]
    de50:	6048      	str	r0, [r1, #4]
    de52:	4770      	bx	lr

0000de54 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>:
    de54:	6842      	ldr	r2, [r0, #4]
    de56:	600a      	str	r2, [r1, #0]
    de58:	6880      	ldr	r0, [r0, #8]
    de5a:	6048      	str	r0, [r1, #4]
    de5c:	4770      	bx	lr

0000de5e <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    de5e:	7800      	ldrb	r0, [r0, #0]
    de60:	f000 0003 	and.w	r0, r0, #3
    de64:	4770      	bx	lr

0000de66 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    de66:	8880      	ldrh	r0, [r0, #4]
    de68:	4770      	bx	lr

0000de6a <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    de6a:	88c0      	ldrh	r0, [r0, #6]
    de6c:	4770      	bx	lr

0000de6e <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    de6e:	8900      	ldrh	r0, [r0, #8]
    de70:	4770      	bx	lr

0000de72 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    de72:	8940      	ldrh	r0, [r0, #10]
    de74:	4770      	bx	lr

0000de76 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    de76:	7900      	ldrb	r0, [r0, #4]
    de78:	4770      	bx	lr

0000de7a <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    de7a:	7900      	ldrb	r0, [r0, #4]
    de7c:	4770      	bx	lr

0000de7e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    de7e:	8901      	ldrh	r1, [r0, #8]
    de80:	291b      	cmp	r1, #27
    de82:	d30c      	bcc.n	de9e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    de84:	8941      	ldrh	r1, [r0, #10]
    de86:	f44f 72a4 	mov.w	r2, #328	; 0x148
    de8a:	4291      	cmp	r1, r2
    de8c:	d307      	bcc.n	de9e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    de8e:	8881      	ldrh	r1, [r0, #4]
    de90:	291b      	cmp	r1, #27
    de92:	d304      	bcc.n	de9e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    de94:	88c0      	ldrh	r0, [r0, #6]
    de96:	4290      	cmp	r0, r2
    de98:	d301      	bcc.n	de9e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    de9a:	2001      	movs	r0, #1
    de9c:	4770      	bx	lr
    de9e:	2000      	movs	r0, #0
    dea0:	4770      	bx	lr

0000dea2 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    dea2:	b510      	push	{r4, lr}
    dea4:	29fb      	cmp	r1, #251	; 0xfb
    dea6:	d904      	bls.n	deb2 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    dea8:	f44f 61af 	mov.w	r1, #1400	; 0x578
    deac:	202a      	movs	r0, #42	; 0x2a
    deae:	f7f5 ff55 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    deb2:	7041      	strb	r1, [r0, #1]
    deb4:	bd10      	pop	{r4, pc}

0000deb6 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    deb6:	7901      	ldrb	r1, [r0, #4]
    deb8:	0749      	lsls	r1, r1, #29
    deba:	d004      	beq.n	dec6 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    debc:	7940      	ldrb	r0, [r0, #5]
    debe:	0740      	lsls	r0, r0, #29
    dec0:	d001      	beq.n	dec6 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    dec2:	2001      	movs	r0, #1
    dec4:	4770      	bx	lr
    dec6:	2000      	movs	r0, #0
    dec8:	4770      	bx	lr

0000deca <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>:
    deca:	7901      	ldrb	r1, [r0, #4]
    decc:	0749      	lsls	r1, r1, #29
    dece:	d004      	beq.n	deda <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
    ded0:	7940      	ldrb	r0, [r0, #5]
    ded2:	0740      	lsls	r0, r0, #29
    ded4:	d001      	beq.n	deda <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
    ded6:	2001      	movs	r0, #1
    ded8:	4770      	bx	lr
    deda:	2000      	movs	r0, #0
    dedc:	4770      	bx	lr

0000dede <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    dede:	7900      	ldrb	r0, [r0, #4]
    dee0:	4770      	bx	lr

0000dee2 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    dee2:	7940      	ldrb	r0, [r0, #5]
    dee4:	4770      	bx	lr

0000dee6 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    dee6:	7101      	strb	r1, [r0, #4]
    dee8:	4770      	bx	lr

0000deea <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    deea:	7141      	strb	r1, [r0, #5]
    deec:	4770      	bx	lr

0000deee <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>:
    deee:	680a      	ldr	r2, [r1, #0]
    def0:	6042      	str	r2, [r0, #4]
    def2:	7909      	ldrb	r1, [r1, #4]
    def4:	7201      	strb	r1, [r0, #8]
    def6:	4770      	bx	lr

0000def8 <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>:
    def8:	72c1      	strb	r1, [r0, #11]
    defa:	0a09      	lsrs	r1, r1, #8
    defc:	7301      	strb	r1, [r0, #12]
    defe:	4770      	bx	lr

0000df00 <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>:
    df00:	8809      	ldrh	r1, [r1, #0]
    df02:	8181      	strh	r1, [r0, #12]
    df04:	4770      	bx	lr

0000df06 <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>:
    df06:	6809      	ldr	r1, [r1, #0]
    df08:	f8c0 1016 	str.w	r1, [r0, #22]
    df0c:	4770      	bx	lr

0000df0e <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>:
    df0e:	680a      	ldr	r2, [r1, #0]
    df10:	6042      	str	r2, [r0, #4]
    df12:	6849      	ldr	r1, [r1, #4]
    df14:	6081      	str	r1, [r0, #8]
    df16:	4770      	bx	lr

0000df18 <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>:
    df18:	680a      	ldr	r2, [r1, #0]
    df1a:	f840 2f0e 	str.w	r2, [r0, #14]!
    df1e:	6849      	ldr	r1, [r1, #4]
    df20:	6041      	str	r1, [r0, #4]
    df22:	4770      	bx	lr

0000df24 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    df24:	680a      	ldr	r2, [r1, #0]
    df26:	6042      	str	r2, [r0, #4]
    df28:	6849      	ldr	r1, [r1, #4]
    df2a:	6081      	str	r1, [r0, #8]
    df2c:	4770      	bx	lr

0000df2e <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    df2e:	7802      	ldrb	r2, [r0, #0]
    df30:	f001 0103 	and.w	r1, r1, #3
    df34:	f022 0203 	bic.w	r2, r2, #3
    df38:	430a      	orrs	r2, r1
    df3a:	7002      	strb	r2, [r0, #0]
    df3c:	4770      	bx	lr

0000df3e <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>:
    df3e:	7101      	strb	r1, [r0, #4]
    df40:	4770      	bx	lr

0000df42 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    df42:	7101      	strb	r1, [r0, #4]
    df44:	0a09      	lsrs	r1, r1, #8
    df46:	7141      	strb	r1, [r0, #5]
    df48:	4770      	bx	lr

0000df4a <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    df4a:	7181      	strb	r1, [r0, #6]
    df4c:	0a09      	lsrs	r1, r1, #8
    df4e:	71c1      	strb	r1, [r0, #7]
    df50:	4770      	bx	lr

0000df52 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    df52:	7201      	strb	r1, [r0, #8]
    df54:	0a09      	lsrs	r1, r1, #8
    df56:	7241      	strb	r1, [r0, #9]
    df58:	4770      	bx	lr

0000df5a <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    df5a:	7281      	strb	r1, [r0, #10]
    df5c:	0a09      	lsrs	r1, r1, #8
    df5e:	72c1      	strb	r1, [r0, #11]
    df60:	4770      	bx	lr

0000df62 <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>:
    df62:	7181      	strb	r1, [r0, #6]
    df64:	0a09      	lsrs	r1, r1, #8
    df66:	71c1      	strb	r1, [r0, #7]
    df68:	4770      	bx	lr

0000df6a <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>:
    df6a:	7141      	strb	r1, [r0, #5]
    df6c:	4770      	bx	lr

0000df6e <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>:
    df6e:	7841      	ldrb	r1, [r0, #1]
    df70:	7800      	ldrb	r0, [r0, #0]
    df72:	f010 000f 	ands.w	r0, r0, #15
    df76:	d005      	beq.n	df84 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    df78:	2801      	cmp	r0, #1
    df7a:	d007      	beq.n	df8c <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x1e>
    df7c:	2802      	cmp	r0, #2
    df7e:	d001      	beq.n	df84 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    df80:	2806      	cmp	r0, #6
    df82:	d105      	bne.n	df90 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    df84:	1f89      	subs	r1, r1, #6
    df86:	291f      	cmp	r1, #31
    df88:	d904      	bls.n	df94 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    df8a:	e001      	b.n	df90 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    df8c:	290c      	cmp	r1, #12
    df8e:	d001      	beq.n	df94 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    df90:	2000      	movs	r0, #0
    df92:	4770      	bx	lr
    df94:	2001      	movs	r0, #1
    df96:	4770      	bx	lr

0000df98 <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>:
    df98:	7800      	ldrb	r0, [r0, #0]
    df9a:	09c0      	lsrs	r0, r0, #7
    df9c:	4770      	bx	lr

0000df9e <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>:
    df9e:	f850 2f03 	ldr.w	r2, [r0, #3]!
    dfa2:	600a      	str	r2, [r1, #0]
    dfa4:	8880      	ldrh	r0, [r0, #4]
    dfa6:	8088      	strh	r0, [r1, #4]
    dfa8:	4770      	bx	lr

0000dfaa <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>:
    dfaa:	7800      	ldrb	r0, [r0, #0]
    dfac:	f3c0 1080 	ubfx	r0, r0, #6, #1
    dfb0:	4770      	bx	lr

0000dfb2 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>:
    dfb2:	7801      	ldrb	r1, [r0, #0]
    dfb4:	f001 010f 	and.w	r1, r1, #15
    dfb8:	2904      	cmp	r1, #4
    dfba:	d105      	bne.n	dfc8 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    dfbc:	7840      	ldrb	r0, [r0, #1]
    dfbe:	1f80      	subs	r0, r0, #6
    dfc0:	281f      	cmp	r0, #31
    dfc2:	d801      	bhi.n	dfc8 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    dfc4:	2001      	movs	r0, #1
    dfc6:	4770      	bx	lr
    dfc8:	2000      	movs	r0, #0
    dfca:	4770      	bx	lr

0000dfcc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    dfcc:	b510      	push	{r4, lr}
    dfce:	7802      	ldrb	r2, [r0, #0]
    dfd0:	f001 030f 	and.w	r3, r1, #15
    dfd4:	f022 020f 	bic.w	r2, r2, #15
    dfd8:	431a      	orrs	r2, r3
    dfda:	7002      	strb	r2, [r0, #0]
    dfdc:	2907      	cmp	r1, #7
    dfde:	d20c      	bcs.n	dffa <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    dfe0:	e8df f001 	tbb	[pc, r1]
    dfe4:	06040604 	.word	0x06040604
    dfe8:	00040804 	.word	0x00040804
    dfec:	2106      	movs	r1, #6
    dfee:	e002      	b.n	dff6 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    dff0:	210c      	movs	r1, #12
    dff2:	e000      	b.n	dff6 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    dff4:	2122      	movs	r1, #34	; 0x22
    dff6:	7041      	strb	r1, [r0, #1]
    dff8:	bd10      	pop	{r4, pc}
    dffa:	216e      	movs	r1, #110	; 0x6e
    dffc:	202a      	movs	r0, #42	; 0x2a
    dffe:	f7f5 fead 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e002 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    e002:	680a      	ldr	r2, [r1, #0]
    e004:	f840 2f09 	str.w	r2, [r0, #9]!
    e008:	8889      	ldrh	r1, [r1, #4]
    e00a:	8081      	strh	r1, [r0, #4]
    e00c:	4770      	bx	lr

0000e00e <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    e00e:	7802      	ldrb	r2, [r0, #0]
    e010:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    e014:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    e018:	7002      	strb	r2, [r0, #0]
    e01a:	4770      	bx	lr

0000e01c <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    e01c:	680a      	ldr	r2, [r1, #0]
    e01e:	f840 2f03 	str.w	r2, [r0, #3]!
    e022:	8889      	ldrh	r1, [r1, #4]
    e024:	8081      	strh	r1, [r0, #4]
    e026:	4770      	bx	lr

0000e028 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    e028:	7802      	ldrb	r2, [r0, #0]
    e02a:	2340      	movs	r3, #64	; 0x40
    e02c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    e030:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e034:	430a      	orrs	r2, r1
    e036:	7002      	strb	r2, [r0, #0]
    e038:	4770      	bx	lr

0000e03a <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    e03a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e03e:	4604      	mov	r4, r0
    e040:	2000      	movs	r0, #0
    e042:	f7f6 f86f 	bl	4124 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e046:	2600      	movs	r6, #0
    e048:	4605      	mov	r5, r0
    e04a:	4637      	mov	r7, r6
    e04c:	e00e      	b.n	e06c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
    e04e:	8820      	ldrh	r0, [r4, #0]
    e050:	1c40      	adds	r0, r0, #1
    e052:	b280      	uxth	r0, r0
    e054:	8020      	strh	r0, [r4, #0]
    e056:	42a8      	cmp	r0, r5
    e058:	d300      	bcc.n	e05c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
    e05a:	8027      	strh	r7, [r4, #0]
    e05c:	8820      	ldrh	r0, [r4, #0]
    e05e:	4669      	mov	r1, sp
    e060:	f7ff fc85 	bl	d96e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e064:	2800      	cmp	r0, #0
    e066:	d007      	beq.n	e078 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
    e068:	1c76      	adds	r6, r6, #1
    e06a:	b2f6      	uxtb	r6, r6
    e06c:	42ae      	cmp	r6, r5
    e06e:	d3ee      	bcc.n	e04e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
    e070:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e074:	8020      	strh	r0, [r4, #0]
    e076:	2012      	movs	r0, #18
    e078:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0000e07c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e07c:	b510      	push	{r4, lr}
    e07e:	7901      	ldrb	r1, [r0, #4]
    e080:	b119      	cbz	r1, e08a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e082:	2901      	cmp	r1, #1
    e084:	d006      	beq.n	e094 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e086:	2000      	movs	r0, #0
    e088:	bd10      	pop	{r4, pc}
    e08a:	8842      	ldrh	r2, [r0, #2]
    e08c:	6883      	ldr	r3, [r0, #8]
    e08e:	8800      	ldrh	r0, [r0, #0]
    e090:	2102      	movs	r1, #2
    e092:	e003      	b.n	e09c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e094:	8842      	ldrh	r2, [r0, #2]
    e096:	6883      	ldr	r3, [r0, #8]
    e098:	8800      	ldrh	r0, [r0, #0]
    e09a:	2101      	movs	r1, #1
    e09c:	f7f7 feda 	bl	5e54 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
    e0a0:	b908      	cbnz	r0, e0a6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e0a2:	f7f7 ff25 	bl	5ef0 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e0a6:	2001      	movs	r0, #1
    e0a8:	bd10      	pop	{r4, pc}
    e0aa:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e0ae:	460e      	mov	r6, r1
    e0b0:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    e0b4:	4617      	mov	r7, r2
    e0b6:	39ff      	subs	r1, #255	; 0xff
    e0b8:	d014      	beq.n	e0e4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    e0ba:	8030      	strh	r0, [r6, #0]
    e0bc:	2100      	movs	r1, #0
    e0be:	7171      	strb	r1, [r6, #5]
    e0c0:	f7f6 fa4a 	bl	4558 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e0c4:	4604      	mov	r4, r0
    e0c6:	f7ff f912 	bl	d2ee <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    e0ca:	0005      	movs	r5, r0
    e0cc:	d00a      	beq.n	e0e4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    e0ce:	4620      	mov	r0, r4
    e0d0:	4629      	mov	r1, r5
    e0d2:	aa01      	add	r2, sp, #4
    e0d4:	f7ff f93c 	bl	d350 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    e0d8:	8070      	strh	r0, [r6, #2]
    e0da:	b130      	cbz	r0, e0ea <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    e0dc:	28fb      	cmp	r0, #251	; 0xfb
    e0de:	d906      	bls.n	e0ee <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
    e0e0:	21ae      	movs	r1, #174	; 0xae
    e0e2:	e026      	b.n	e132 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e0e4:	2000      	movs	r0, #0
    e0e6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e0ea:	21ad      	movs	r1, #173	; 0xad
    e0ec:	e021      	b.n	e132 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e0ee:	9801      	ldr	r0, [sp, #4]
    e0f0:	f7ff feb5 	bl	de5e <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    e0f4:	2801      	cmp	r0, #1
    e0f6:	d003      	beq.n	e100 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    e0f8:	2802      	cmp	r0, #2
    e0fa:	d001      	beq.n	e100 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    e0fc:	21bd      	movs	r1, #189	; 0xbd
    e0fe:	e018      	b.n	e132 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e100:	7130      	strb	r0, [r6, #4]
    e102:	4629      	mov	r1, r5
    e104:	8873      	ldrh	r3, [r6, #2]
    e106:	2503      	movs	r5, #3
    e108:	4620      	mov	r0, r4
    e10a:	463a      	mov	r2, r7
    e10c:	9500      	str	r5, [sp, #0]
    e10e:	f7fe ffc5 	bl	d09c <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    e112:	4620      	mov	r0, r4
    e114:	60b7      	str	r7, [r6, #8]
    e116:	f7ff f899 	bl	d24c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    e11a:	b138      	cbz	r0, e12c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
    e11c:	2100      	movs	r1, #0
    e11e:	4620      	mov	r0, r4
    e120:	460a      	mov	r2, r1
    e122:	f7ff f9f3 	bl	d50c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    e126:	b118      	cbz	r0, e130 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
    e128:	2001      	movs	r0, #1
    e12a:	e7dc      	b.n	e0e6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
    e12c:	21cd      	movs	r1, #205	; 0xcd
    e12e:	e000      	b.n	e132 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e130:	21d2      	movs	r1, #210	; 0xd2
    e132:	202b      	movs	r0, #43	; 0x2b
    e134:	f7f5 fe12 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e138 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e138:	f7f8 b8d6 	b.w	62e8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2e0>
    e13c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e140:	4604      	mov	r4, r0
    e142:	2000      	movs	r0, #0
    e144:	f7f5 ffee 	bl	4124 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e148:	4605      	mov	r5, r0
    e14a:	1c40      	adds	r0, r0, #1
    e14c:	2600      	movs	r6, #0
    e14e:	b2c7      	uxtb	r7, r0
    e150:	46b0      	mov	r8, r6
    e152:	e017      	b.n	e184 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4c>
    e154:	8820      	ldrh	r0, [r4, #0]
    e156:	1c40      	adds	r0, r0, #1
    e158:	b280      	uxth	r0, r0
    e15a:	8020      	strh	r0, [r4, #0]
    e15c:	42b8      	cmp	r0, r7
    e15e:	d302      	bcc.n	e166 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x2e>
    e160:	4640      	mov	r0, r8
    e162:	f8a4 8000 	strh.w	r8, [r4]
    e166:	b280      	uxth	r0, r0
    e168:	42a8      	cmp	r0, r5
    e16a:	d304      	bcc.n	e176 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3e>
    e16c:	42b8      	cmp	r0, r7
    e16e:	d202      	bcs.n	e176 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3e>
    e170:	2000      	movs	r0, #0
    e172:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e176:	4669      	mov	r1, sp
    e178:	f7ff fbf9 	bl	d96e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e17c:	2800      	cmp	r0, #0
    e17e:	d0f8      	beq.n	e172 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3a>
    e180:	1c76      	adds	r6, r6, #1
    e182:	b2f6      	uxtb	r6, r6
    e184:	42be      	cmp	r6, r7
    e186:	d3e5      	bcc.n	e154 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x1c>
    e188:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e18c:	8020      	strh	r0, [r4, #0]
    e18e:	2012      	movs	r0, #18
    e190:	e7ef      	b.n	e172 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3a>

0000e192 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    e192:	b570      	push	{r4, r5, r6, lr}
    e194:	8050      	strh	r0, [r2, #2]
    e196:	890c      	ldrh	r4, [r1, #8]
    e198:	8094      	strh	r4, [r2, #4]
    e19a:	898b      	ldrh	r3, [r1, #12]
    e19c:	80d3      	strh	r3, [r2, #6]
    e19e:	8948      	ldrh	r0, [r1, #10]
    e1a0:	8110      	strh	r0, [r2, #8]
    e1a2:	89cd      	ldrh	r5, [r1, #14]
    e1a4:	8155      	strh	r5, [r2, #10]
    e1a6:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    e1a8:	42ae      	cmp	r6, r5
    e1aa:	d108      	bne.n	e1be <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e1ac:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    e1ae:	4285      	cmp	r5, r0
    e1b0:	d105      	bne.n	e1be <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e1b2:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    e1b4:	429d      	cmp	r5, r3
    e1b6:	d102      	bne.n	e1be <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e1b8:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    e1ba:	42a3      	cmp	r3, r4
    e1bc:	d001      	beq.n	e1c2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    e1be:	2301      	movs	r3, #1
    e1c0:	e000      	b.n	e1c4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    e1c2:	2300      	movs	r3, #0
    e1c4:	7313      	strb	r3, [r2, #12]
    e1c6:	8548      	strh	r0, [r1, #42]	; 0x2a
    e1c8:	8950      	ldrh	r0, [r2, #10]
    e1ca:	85c8      	strh	r0, [r1, #46]	; 0x2e
    e1cc:	8890      	ldrh	r0, [r2, #4]
    e1ce:	8588      	strh	r0, [r1, #44]	; 0x2c
    e1d0:	88d0      	ldrh	r0, [r2, #6]
    e1d2:	8608      	strh	r0, [r1, #48]	; 0x30
    e1d4:	2001      	movs	r0, #1
    e1d6:	7010      	strb	r0, [r2, #0]
    e1d8:	bd70      	pop	{r4, r5, r6, pc}

0000e1da <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e1da:	b510      	push	{r4, lr}
    e1dc:	888c      	ldrh	r4, [r1, #4]
    e1de:	890a      	ldrh	r2, [r1, #8]
    e1e0:	884b      	ldrh	r3, [r1, #2]
    e1e2:	88c9      	ldrh	r1, [r1, #6]
    e1e4:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e1e8:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e1ec:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e1f0:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e1f4:	bd10      	pop	{r4, pc}

0000e1f6 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e1f6:	b570      	push	{r4, r5, r6, lr}
    e1f8:	4615      	mov	r5, r2
    e1fa:	460c      	mov	r4, r1
    e1fc:	f000 f8c7 	bl	e38e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    e200:	3096      	adds	r0, #150	; 0x96
    e202:	4428      	add	r0, r5
    e204:	42a0      	cmp	r0, r4
    e206:	d801      	bhi.n	e20c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e208:	1a20      	subs	r0, r4, r0
    e20a:	bd70      	pop	{r4, r5, r6, pc}
    e20c:	2000      	movs	r0, #0
    e20e:	bd70      	pop	{r4, r5, r6, pc}

0000e210 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e214:	4604      	mov	r4, r0
    e216:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    e218:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    e21a:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    e21e:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e222:	4285      	cmp	r5, r0
    e224:	d300      	bcc.n	e228 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    e226:	4605      	mov	r5, r0
    e228:	4620      	mov	r0, r4
    e22a:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    e22e:	f000 f89e 	bl	e36e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e232:	4601      	mov	r1, r0
    e234:	86e5      	strh	r5, [r4, #54]	; 0x36
    e236:	8761      	strh	r1, [r4, #58]	; 0x3a
    e238:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e23a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e23e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    e240:	4680      	mov	r8, r0
    e242:	42aa      	cmp	r2, r5
    e244:	d200      	bcs.n	e248 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    e246:	462a      	mov	r2, r5
    e248:	428b      	cmp	r3, r1
    e24a:	d200      	bcs.n	e24e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    e24c:	460b      	mov	r3, r1
    e24e:	8202      	strh	r2, [r0, #16]
    e250:	f8a8 3012 	strh.w	r3, [r8, #18]
    e254:	42bd      	cmp	r5, r7
    e256:	d101      	bne.n	e25c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    e258:	42b1      	cmp	r1, r6
    e25a:	d001      	beq.n	e260 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e25c:	2001      	movs	r0, #1
    e25e:	e000      	b.n	e262 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e260:	2000      	movs	r0, #0
    e262:	4681      	mov	r9, r0
    e264:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e268:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e26c:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e26e:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e270:	4285      	cmp	r5, r0
    e272:	d300      	bcc.n	e276 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    e274:	4605      	mov	r5, r0
    e276:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e27a:	4620      	mov	r0, r4
    e27c:	f000 f87f 	bl	e37e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    e280:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e284:	2902      	cmp	r1, #2
    e286:	d108      	bne.n	e29a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    e288:	42af      	cmp	r7, r5
    e28a:	d200      	bcs.n	e28e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    e28c:	463d      	mov	r5, r7
    e28e:	4286      	cmp	r6, r0
    e290:	d200      	bcs.n	e294 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    e292:	4630      	mov	r0, r6
    e294:	2100      	movs	r1, #0
    e296:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e29a:	f8a8 5008 	strh.w	r5, [r8, #8]
    e29e:	f8a8 000c 	strh.w	r0, [r8, #12]
    e2a2:	42bd      	cmp	r5, r7
    e2a4:	d101      	bne.n	e2aa <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e2a6:	42b0      	cmp	r0, r6
    e2a8:	d001      	beq.n	e2ae <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    e2aa:	2001      	movs	r0, #1
    e2ac:	e000      	b.n	e2b0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    e2ae:	2000      	movs	r0, #0
    e2b0:	ea40 0009 	orr.w	r0, r0, r9
    e2b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e2b8 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    e2b8:	6840      	ldr	r0, [r0, #4]
    e2ba:	4770      	bx	lr

0000e2bc <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e2c0:	4616      	mov	r6, r2
    e2c2:	460f      	mov	r7, r1
    e2c4:	4604      	mov	r4, r0
    e2c6:	f000 f862 	bl	e38e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    e2ca:	4605      	mov	r5, r0
    e2cc:	463a      	mov	r2, r7
    e2ce:	68e1      	ldr	r1, [r4, #12]
    e2d0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e2d2:	f000 f847 	bl	e364 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    e2d6:	19a9      	adds	r1, r5, r6
    e2d8:	4281      	cmp	r1, r0
    e2da:	d300      	bcc.n	e2de <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e2dc:	4608      	mov	r0, r1
    e2de:	6320      	str	r0, [r4, #48]	; 0x30
    e2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e2e4 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e2e4:	221b      	movs	r2, #27
    e2e6:	8402      	strh	r2, [r0, #32]
    e2e8:	8382      	strh	r2, [r0, #28]
    e2ea:	82c2      	strh	r2, [r0, #22]
    e2ec:	8282      	strh	r2, [r0, #20]
    e2ee:	8142      	strh	r2, [r0, #10]
    e2f0:	8202      	strh	r2, [r0, #16]
    e2f2:	8102      	strh	r2, [r0, #8]
    e2f4:	8542      	strh	r2, [r0, #42]	; 0x2a
    e2f6:	8582      	strh	r2, [r0, #44]	; 0x2c
    e2f8:	8482      	strh	r2, [r0, #36]	; 0x24
    e2fa:	2900      	cmp	r1, #0
    e2fc:	d10a      	bne.n	e314 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e2fe:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e302:	8441      	strh	r1, [r0, #34]	; 0x22
    e304:	83c1      	strh	r1, [r0, #30]
    e306:	8341      	strh	r1, [r0, #26]
    e308:	8301      	strh	r1, [r0, #24]
    e30a:	81c1      	strh	r1, [r0, #14]
    e30c:	8241      	strh	r1, [r0, #18]
    e30e:	8181      	strh	r1, [r0, #12]
    e310:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e312:	8601      	strh	r1, [r0, #48]	; 0x30
    e314:	4770      	bx	lr

0000e316 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e316:	6800      	ldr	r0, [r0, #0]
    e318:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e31c:	4290      	cmp	r0, r2
    e31e:	d903      	bls.n	e328 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e320:	1a40      	subs	r0, r0, r1
    e322:	389c      	subs	r0, #156	; 0x9c
    e324:	0840      	lsrs	r0, r0, #1
    e326:	4770      	bx	lr
    e328:	2000      	movs	r0, #0
    e32a:	4770      	bx	lr

0000e32c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e32c:	b510      	push	{r4, lr}
    e32e:	9c02      	ldr	r4, [sp, #8]
    e330:	8281      	strh	r1, [r0, #20]
    e332:	82c2      	strh	r2, [r0, #22]
    e334:	8303      	strh	r3, [r0, #24]
    e336:	8344      	strh	r4, [r0, #26]
    e338:	bd10      	pop	{r4, pc}

0000e33a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    e33a:	8050      	strh	r0, [r2, #2]
    e33c:	8a88      	ldrh	r0, [r1, #20]
    e33e:	8090      	strh	r0, [r2, #4]
    e340:	8ac8      	ldrh	r0, [r1, #22]
    e342:	80d0      	strh	r0, [r2, #6]
    e344:	8b08      	ldrh	r0, [r1, #24]
    e346:	8110      	strh	r0, [r2, #8]
    e348:	8b48      	ldrh	r0, [r1, #26]
    e34a:	8150      	strh	r0, [r2, #10]
    e34c:	2001      	movs	r0, #1
    e34e:	7010      	strb	r0, [r2, #0]
    e350:	4770      	bx	lr
    e352:	2902      	cmp	r1, #2
    e354:	d003      	beq.n	e35e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    e356:	00c0      	lsls	r0, r0, #3
    e358:	3070      	adds	r0, #112	; 0x70
    e35a:	b280      	uxth	r0, r0
    e35c:	4770      	bx	lr
    e35e:	0080      	lsls	r0, r0, #2
    e360:	303c      	adds	r0, #60	; 0x3c
    e362:	e7fa      	b.n	e35a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    e364:	4288      	cmp	r0, r1
    e366:	d300      	bcc.n	e36a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    e368:	4608      	mov	r0, r1
    e36a:	1a80      	subs	r0, r0, r2
    e36c:	4770      	bx	lr
    e36e:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    e372:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    e376:	4281      	cmp	r1, r0
    e378:	d200      	bcs.n	e37c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    e37a:	4608      	mov	r0, r1
    e37c:	4770      	bx	lr
    e37e:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e382:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e386:	4281      	cmp	r1, r0
    e388:	d200      	bcs.n	e38c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    e38a:	4608      	mov	r0, r1
    e38c:	4770      	bx	lr
    e38e:	2196      	movs	r1, #150	; 0x96
    e390:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e394:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e398:	f000 b800 	b.w	e39c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    e39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e3a0:	460d      	mov	r5, r1
    e3a2:	4606      	mov	r6, r0
    e3a4:	4698      	mov	r8, r3
    e3a6:	4617      	mov	r7, r2
    e3a8:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e3aa:	4611      	mov	r1, r2
    e3ac:	f7ff ffd1 	bl	e352 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e3b0:	4604      	mov	r4, r0
    e3b2:	4639      	mov	r1, r7
    e3b4:	4630      	mov	r0, r6
    e3b6:	f7ff ffe2 	bl	e37e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    e3ba:	42a0      	cmp	r0, r4
    e3bc:	d200      	bcs.n	e3c0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    e3be:	4604      	mov	r4, r0
    e3c0:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e3c2:	4641      	mov	r1, r8
    e3c4:	f7ff ffc5 	bl	e352 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e3c8:	4607      	mov	r7, r0
    e3ca:	4641      	mov	r1, r8
    e3cc:	4630      	mov	r0, r6
    e3ce:	f7ff ffce 	bl	e36e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e3d2:	42b8      	cmp	r0, r7
    e3d4:	d300      	bcc.n	e3d8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
    e3d6:	4638      	mov	r0, r7
    e3d8:	4420      	add	r0, r4
    e3da:	4428      	add	r0, r5
    e3dc:	1d80      	adds	r0, r0, #6
    e3de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e3e2 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>:
    e3e2:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    e3e4:	2700      	movs	r7, #0
    e3e6:	463d      	mov	r5, r7
    e3e8:	2623      	movs	r6, #35	; 0x23
    e3ea:	f7f8 f82f 	bl	644c <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x58>
    e3ee:	4604      	mov	r4, r0
    e3f0:	f7f8 f800 	bl	63f4 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>
    e3f4:	b190      	cbz	r0, e41c <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3a>
    e3f6:	4669      	mov	r1, sp
    e3f8:	2000      	movs	r0, #0
    e3fa:	f7ff f957 	bl	d6ac <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    e3fe:	e003      	b.n	e408 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x26>
    e400:	9802      	ldr	r0, [sp, #8]
    e402:	6901      	ldr	r1, [r0, #16]
    e404:	42a1      	cmp	r1, r4
    e406:	d009      	beq.n	e41c <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3a>
    e408:	4668      	mov	r0, sp
    e40a:	f7f5 fed7 	bl	41bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e40e:	2800      	cmp	r0, #0
    e410:	d0f6      	beq.n	e400 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x1e>
    e412:	4625      	mov	r5, r4
    e414:	4620      	mov	r0, r4
    e416:	f7f7 ffb1 	bl	637c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    e41a:	4607      	mov	r7, r0
    e41c:	1e76      	subs	r6, r6, #1
    e41e:	d001      	beq.n	e424 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x42>
    e420:	2f00      	cmp	r7, #0
    e422:	d0e2      	beq.n	e3ea <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x8>
    e424:	b10d      	cbz	r5, e42a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x48>
    e426:	4628      	mov	r0, r5
    e428:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e42a:	f240 1177 	movw	r1, #375	; 0x177
    e42e:	200f      	movs	r0, #15
    e430:	f7f5 fc94 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e434:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e438:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e43c:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e440:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e444:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e448:	ea10 0f40 	tst.w	r0, r0, lsl #1
    e44c:	d001      	beq.n	e452 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x70>
    e44e:	2000      	movs	r0, #0
    e450:	4770      	bx	lr
    e452:	2001      	movs	r0, #1
    e454:	4770      	bx	lr

0000e456 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    e456:	b510      	push	{r4, lr}
    e458:	4604      	mov	r4, r0
    e45a:	2108      	movs	r1, #8
    e45c:	4620      	mov	r0, r4
    e45e:	f7f5 fd27 	bl	3eb0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e462:	6820      	ldr	r0, [r4, #0]
    e464:	2800      	cmp	r0, #0
    e466:	d102      	bne.n	e46e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x18>
    e468:	6860      	ldr	r0, [r4, #4]
    e46a:	2800      	cmp	r0, #0
    e46c:	d0f5      	beq.n	e45a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
    e46e:	bd10      	pop	{r4, pc}
    e470:	2801      	cmp	r0, #1
    e472:	d102      	bne.n	e47a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x24>
    e474:	7948      	ldrb	r0, [r1, #5]
    e476:	0980      	lsrs	r0, r0, #6
    e478:	d001      	beq.n	e47e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x28>
    e47a:	2000      	movs	r0, #0
    e47c:	4770      	bx	lr
    e47e:	2001      	movs	r0, #1
    e480:	4770      	bx	lr
    e482:	2801      	cmp	r0, #1
    e484:	d106      	bne.n	e494 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    e486:	7948      	ldrb	r0, [r1, #5]
    e488:	2101      	movs	r1, #1
    e48a:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    e48e:	d101      	bne.n	e494 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    e490:	2001      	movs	r0, #1
    e492:	4770      	bx	lr
    e494:	2000      	movs	r0, #0
    e496:	4770      	bx	lr
    e498:	b118      	cbz	r0, e4a2 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4c>
    e49a:	2802      	cmp	r0, #2
    e49c:	d001      	beq.n	e4a2 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4c>
    e49e:	2001      	movs	r0, #1
    e4a0:	4770      	bx	lr
    e4a2:	2000      	movs	r0, #0
    e4a4:	4770      	bx	lr
    e4a6:	2802      	cmp	r0, #2
    e4a8:	d003      	beq.n	e4b2 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x5c>
    e4aa:	2803      	cmp	r0, #3
    e4ac:	d001      	beq.n	e4b2 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x5c>
    e4ae:	2000      	movs	r0, #0
    e4b0:	4770      	bx	lr
    e4b2:	2001      	movs	r0, #1
    e4b4:	4770      	bx	lr

0000e4b6 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    e4b6:	f7f9 b819 	b.w	74ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4ec>
    e4ba:	b510      	push	{r4, lr}
    e4bc:	f7f8 fe64 	bl	7188 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x188>
    e4c0:	f7f8 fa06 	bl	68d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    e4c4:	f7fc fffa 	bl	b4bc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e4c8:	2005      	movs	r0, #5
    e4ca:	bd10      	pop	{r4, pc}
    e4cc:	b510      	push	{r4, lr}
    e4ce:	f7f8 fe5b 	bl	7188 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x188>
    e4d2:	f7fc fff3 	bl	b4bc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e4d6:	2005      	movs	r0, #5
    e4d8:	bd10      	pop	{r4, pc}
    e4da:	b530      	push	{r4, r5, lr}
    e4dc:	b089      	sub	sp, #36	; 0x24
    e4de:	4605      	mov	r5, r0
    e4e0:	f7f8 fe52 	bl	7188 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x188>
    e4e4:	7828      	ldrb	r0, [r5, #0]
    e4e6:	4669      	mov	r1, sp
    e4e8:	f000 040f 	and.w	r4, r0, #15
    e4ec:	4622      	mov	r2, r4
    e4ee:	4628      	mov	r0, r5
    e4f0:	f7f9 f9bc 	bl	786c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    e4f4:	2200      	movs	r2, #0
    e4f6:	4621      	mov	r1, r4
    e4f8:	4668      	mov	r0, sp
    e4fa:	f7f8 fa69 	bl	69d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13c>
    e4fe:	4621      	mov	r1, r4
    e500:	4668      	mov	r0, sp
    e502:	f7f8 fdc1 	bl	7088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>
    e506:	4604      	mov	r4, r0
    e508:	f7f8 f9e2 	bl	68d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    e50c:	b009      	add	sp, #36	; 0x24
    e50e:	4620      	mov	r0, r4
    e510:	bd30      	pop	{r4, r5, pc}
    e512:	f240 21f2 	movw	r1, #754	; 0x2f2
    e516:	2032      	movs	r0, #50	; 0x32
    e518:	f7f5 fc20 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e51c:	b510      	push	{r4, lr}
    e51e:	f7f8 fe33 	bl	7188 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x188>
    e522:	f7fc ffcb 	bl	b4bc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e52a:	f7f8 bff7 	b.w	751c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x51c>
    e52e:	f7f8 bfdd 	b.w	74ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4ec>
    e532:	f7ff b81f 	b.w	d574 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>

0000e536 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>:
    e536:	b5f0      	push	{r4, r5, r6, r7, lr}
    e538:	b08b      	sub	sp, #44	; 0x2c
    e53a:	4607      	mov	r7, r0
    e53c:	f7f6 f840 	bl	45c0 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e540:	4604      	mov	r4, r0
    e542:	f7fe fed4 	bl	d2ee <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    e546:	0005      	movs	r5, r0
    e548:	d00c      	beq.n	e564 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x2e>
    e54a:	4620      	mov	r0, r4
    e54c:	4629      	mov	r1, r5
    e54e:	466a      	mov	r2, sp
    e550:	f7fe fefe 	bl	d350 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    e554:	4606      	mov	r6, r0
    e556:	f7f6 f82d 	bl	45b4 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e55a:	42b0      	cmp	r0, r6
    e55c:	d005      	beq.n	e56a <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x34>
    e55e:	f44f 7198 	mov.w	r1, #304	; 0x130
    e562:	e033      	b.n	e5cc <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x96>
    e564:	2000      	movs	r0, #0
    e566:	b00b      	add	sp, #44	; 0x2c
    e568:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e56a:	a901      	add	r1, sp, #4
    e56c:	9800      	ldr	r0, [sp, #0]
    e56e:	f000 f8b4 	bl	e6da <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    e572:	1d3e      	adds	r6, r7, #4
    e574:	4628      	mov	r0, r5
    e576:	f7fe fe4e 	bl	d216 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    e57a:	4605      	mov	r5, r0
    e57c:	4601      	mov	r1, r0
    e57e:	221c      	movs	r2, #28
    e580:	4630      	mov	r0, r6
    e582:	f7fd ffe9 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e586:	7aa8      	ldrb	r0, [r5, #10]
    e588:	f04f 0500 	mov.w	r5, #0
    e58c:	06c1      	lsls	r1, r0, #27
    e58e:	d50d      	bpl.n	e5ac <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    e590:	0740      	lsls	r0, r0, #29
    e592:	d40a      	bmi.n	e5aa <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x74>
    e594:	f89d 2014 	ldrb.w	r2, [sp, #20]
    e598:	f106 001c 	add.w	r0, r6, #28
    e59c:	9904      	ldr	r1, [sp, #16]
    e59e:	f7fd ffdb 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e5a2:	f89d 0014 	ldrb.w	r0, [sp, #20]
    e5a6:	7230      	strb	r0, [r6, #8]
    e5a8:	e000      	b.n	e5ac <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    e5aa:	7235      	strb	r5, [r6, #8]
    e5ac:	707d      	strb	r5, [r7, #1]
    e5ae:	2005      	movs	r0, #5
    e5b0:	7038      	strb	r0, [r7, #0]
    e5b2:	4620      	mov	r0, r4
    e5b4:	f7fe fe4a 	bl	d24c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    e5b8:	b130      	cbz	r0, e5c8 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x92>
    e5ba:	2100      	movs	r1, #0
    e5bc:	4620      	mov	r0, r4
    e5be:	460a      	mov	r2, r1
    e5c0:	f7fe ffa4 	bl	d50c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    e5c4:	2001      	movs	r0, #1
    e5c6:	e7ce      	b.n	e566 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x30>
    e5c8:	f240 1173 	movw	r1, #371	; 0x173
    e5cc:	2033      	movs	r0, #51	; 0x33
    e5ce:	f7f5 fbc5 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e5d2 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    e5d2:	b510      	push	{r4, lr}
    e5d4:	f7f5 fff4 	bl	45c0 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e5d8:	f000 f874 	bl	e6c4 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    e5dc:	4604      	mov	r4, r0
    e5de:	221c      	movs	r2, #28
    e5e0:	2100      	movs	r1, #0
    e5e2:	f7fe f833 	bl	c64c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e5e6:	207f      	movs	r0, #127	; 0x7f
    e5e8:	76a0      	strb	r0, [r4, #26]
    e5ea:	21ff      	movs	r1, #255	; 0xff
    e5ec:	73a1      	strb	r1, [r4, #14]
    e5ee:	7061      	strb	r1, [r4, #1]
    e5f0:	74e1      	strb	r1, [r4, #19]
    e5f2:	7aa0      	ldrb	r0, [r4, #10]
    e5f4:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    e5f8:	3020      	adds	r0, #32
    e5fa:	72a0      	strb	r0, [r4, #10]
    e5fc:	bd10      	pop	{r4, pc}

0000e5fe <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>:
    e5fe:	f7ff bfe8 	b.w	e5d2 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>

0000e602 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    e602:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e606:	461e      	mov	r6, r3
    e608:	4617      	mov	r7, r2
    e60a:	4689      	mov	r9, r1
    e60c:	4682      	mov	sl, r0
    e60e:	f8dd 8020 	ldr.w	r8, [sp, #32]
    e612:	f7f5 ffd5 	bl	45c0 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e616:	4604      	mov	r4, r0
    e618:	f7fe fdff 	bl	d21a <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    e61c:	2801      	cmp	r0, #1
    e61e:	d034      	beq.n	e68a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    e620:	4620      	mov	r0, r4
    e622:	f000 f84f 	bl	e6c4 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    e626:	4604      	mov	r4, r0
    e628:	221c      	movs	r2, #28
    e62a:	2100      	movs	r1, #0
    e62c:	f7fe f80e 	bl	c64c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e630:	2501      	movs	r5, #1
    e632:	7025      	strb	r5, [r4, #0]
    e634:	1c63      	adds	r3, r4, #1
    e636:	1ca2      	adds	r2, r4, #2
    e638:	4649      	mov	r1, r9
    e63a:	4650      	mov	r0, sl
    e63c:	f000 f827 	bl	e68e <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    e640:	f884 8009 	strb.w	r8, [r4, #9]
    e644:	7aa0      	ldrb	r0, [r4, #10]
    e646:	21ff      	movs	r1, #255	; 0xff
    e648:	f367 0000 	bfi	r0, r7, #0, #1
    e64c:	f040 001a 	orr.w	r0, r0, #26
    e650:	72a0      	strb	r0, [r4, #10]
    e652:	7325      	strb	r5, [r4, #12]
    e654:	2000      	movs	r0, #0
    e656:	7360      	strb	r0, [r4, #13]
    e658:	73a1      	strb	r1, [r4, #14]
    e65a:	74e1      	strb	r1, [r4, #19]
    e65c:	207f      	movs	r0, #127	; 0x7f
    e65e:	76a0      	strb	r0, [r4, #26]
    e660:	76e6      	strb	r6, [r4, #27]
    e662:	f7f5 ffa7 	bl	45b4 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e666:	4604      	mov	r4, r0
    e668:	f7f5 ffaa 	bl	45c0 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e66c:	2201      	movs	r2, #1
    e66e:	4621      	mov	r1, r4
    e670:	f000 f831 	bl	e6d6 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    e674:	b120      	cbz	r0, e680 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x7e>
    e676:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e67a:	2005      	movs	r0, #5
    e67c:	f7f9 b9be 	b.w	79fc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    e680:	f240 21c9 	movw	r1, #713	; 0x2c9
    e684:	2033      	movs	r0, #51	; 0x33
    e686:	f7f5 fb69 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e68e:	b510      	push	{r4, lr}
    e690:	461c      	mov	r4, r3
    e692:	460b      	mov	r3, r1
    e694:	29ff      	cmp	r1, #255	; 0xff
    e696:	d00d      	beq.n	e6b4 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xb2>
    e698:	4621      	mov	r1, r4
    e69a:	4618      	mov	r0, r3
    e69c:	f7f7 f82c 	bl	56f8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    e6a0:	b120      	cbz	r0, e6ac <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xaa>
    e6a2:	7820      	ldrb	r0, [r4, #0]
    e6a4:	f040 0002 	orr.w	r0, r0, #2
    e6a8:	7020      	strb	r0, [r4, #0]
    e6aa:	bd10      	pop	{r4, pc}
    e6ac:	2150      	movs	r1, #80	; 0x50
    e6ae:	2033      	movs	r0, #51	; 0x33
    e6b0:	f7f5 fb54 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6b4:	7c41      	ldrb	r1, [r0, #17]
    e6b6:	7021      	strb	r1, [r4, #0]
    e6b8:	6840      	ldr	r0, [r0, #4]
    e6ba:	6801      	ldr	r1, [r0, #0]
    e6bc:	6011      	str	r1, [r2, #0]
    e6be:	8880      	ldrh	r0, [r0, #4]
    e6c0:	8090      	strh	r0, [r2, #4]
    e6c2:	bd10      	pop	{r4, pc}
    e6c4:	b51c      	push	{r2, r3, r4, lr}
    e6c6:	4669      	mov	r1, sp
    e6c8:	aa01      	add	r2, sp, #4
    e6ca:	f7fe fe33 	bl	d334 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    e6ce:	9800      	ldr	r0, [sp, #0]
    e6d0:	f7fe fda1 	bl	d216 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    e6d4:	bd1c      	pop	{r2, r3, r4, pc}
    e6d6:	f7fe bd46 	b.w	d166 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

0000e6da <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    e6da:	7802      	ldrb	r2, [r0, #0]
    e6dc:	f002 020f 	and.w	r2, r2, #15
    e6e0:	f7f9 b8c4 	b.w	786c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    e6e4:	2800      	cmp	r0, #0
    e6e6:	db04      	blt.n	e6f2 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x18>
    e6e8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e6ec:	f890 0400 	ldrb.w	r0, [r0, #1024]	; 0x400
    e6f0:	e005      	b.n	e6fe <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x24>
    e6f2:	f000 000f 	and.w	r0, r0, #15
    e6f6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e6fa:	f890 0d14 	ldrb.w	r0, [r0, #3348]	; 0xd14
    e6fe:	0940      	lsrs	r0, r0, #5
    e700:	4770      	bx	lr
    e702:	6940      	ldr	r0, [r0, #20]
    e704:	2800      	cmp	r0, #0
    e706:	d000      	beq.n	e70a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x30>
    e708:	2001      	movs	r0, #1
    e70a:	4770      	bx	lr

0000e70c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>:
    e70c:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    e710:	4770      	bx	lr
    e712:	b510      	push	{r4, lr}
    e714:	2808      	cmp	r0, #8
    e716:	d00a      	beq.n	e72e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x22>
    e718:	2804      	cmp	r0, #4
    e71a:	d00a      	beq.n	e732 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x26>
    e71c:	2802      	cmp	r0, #2
    e71e:	d00a      	beq.n	e736 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2a>
    e720:	2108      	movs	r1, #8
    e722:	2801      	cmp	r0, #1
    e724:	d009      	beq.n	e73a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2e>
    e726:	21d9      	movs	r1, #217	; 0xd9
    e728:	2005      	movs	r0, #5
    e72a:	f7f5 fb17 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e72e:	2140      	movs	r1, #64	; 0x40
    e730:	e7f7      	b.n	e722 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x16>
    e732:	2110      	movs	r1, #16
    e734:	e7f5      	b.n	e722 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x16>
    e736:	2104      	movs	r1, #4
    e738:	e7f3      	b.n	e722 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x16>
    e73a:	222a      	movs	r2, #42	; 0x2a
    e73c:	2028      	movs	r0, #40	; 0x28
    e73e:	fb11 0002 	smlabb	r0, r1, r2, r0
    e742:	b280      	uxth	r0, r0
    e744:	bd10      	pop	{r4, pc}
    e746:	2000      	movs	r0, #0
    e748:	4770      	bx	lr
    e74a:	b570      	push	{r4, r5, r6, lr}
    e74c:	4604      	mov	r4, r0
    e74e:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    e752:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    e756:	f000 f80c 	bl	e772 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x66>
    e75a:	4605      	mov	r5, r0
    e75c:	f000 f857 	bl	e80e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    e760:	4601      	mov	r1, r0
    e762:	462a      	mov	r2, r5
    e764:	4620      	mov	r0, r4
    e766:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e76a:	f7ff bda7 	b.w	e2bc <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    e76e:	f7f3 b85d 	b.w	182c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    e772:	b510      	push	{r4, lr}
    e774:	4604      	mov	r4, r0
    e776:	4608      	mov	r0, r1
    e778:	f001 f919 	bl	f9ae <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e77c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e780:	2c02      	cmp	r4, #2
    e782:	d00a      	beq.n	e79a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x8e>
    e784:	f640 0234 	movw	r2, #2100	; 0x834
    e788:	4410      	add	r0, r2
    e78a:	f24a 5295 	movw	r2, #42389	; 0xa595
    e78e:	4410      	add	r0, r2
    e790:	fbb0 f0f1 	udiv	r0, r0, r1
    e794:	f200 1037 	addw	r0, r0, #311	; 0x137
    e798:	bd10      	pop	{r4, pc}
    e79a:	460a      	mov	r2, r1
    e79c:	e7f4      	b.n	e788 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7c>
    e79e:	b510      	push	{r4, lr}
    e7a0:	4604      	mov	r4, r0
    e7a2:	2000      	movs	r0, #0
    e7a4:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    e7a8:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    e7ac:	f7f3 fc8a 	bl	20c4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e7b0:	b140      	cbz	r0, e7c4 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xb8>
    e7b2:	2020      	movs	r0, #32
    e7b4:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    e7b8:	f504 7084 	add.w	r0, r4, #264	; 0x108
    e7bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7c0:	f7fb bee8 	b.w	a594 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    e7c4:	f44f 61a6 	mov.w	r1, #1328	; 0x530
    e7c8:	2035      	movs	r0, #53	; 0x35
    e7ca:	f7f5 fac7 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e7ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    e7d0:	4613      	mov	r3, r2
    e7d2:	460a      	mov	r2, r1
    e7d4:	4604      	mov	r4, r0
    e7d6:	4601      	mov	r1, r0
    e7d8:	4668      	mov	r0, sp
    e7da:	f7f9 fcf5 	bl	81c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c8>
    e7de:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    e7e2:	4669      	mov	r1, sp
    e7e4:	f7ff ffc3 	bl	e76e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    e7e8:	2800      	cmp	r0, #0
    e7ea:	d104      	bne.n	e7f6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xea>
    e7ec:	f640 2139 	movw	r1, #2617	; 0xa39
    e7f0:	2035      	movs	r0, #53	; 0x35
    e7f2:	f7f5 fab3 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e7f6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    e7f8:	b510      	push	{r4, lr}
    e7fa:	245b      	movs	r4, #91	; 0x5b
    e7fc:	f001 f895 	bl	f92a <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    e800:	b910      	cbnz	r0, e808 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xfc>
    e802:	f001 f888 	bl	f916 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    e806:	b100      	cbz	r0, e80a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xfe>
    e808:	2462      	movs	r4, #98	; 0x62
    e80a:	4620      	mov	r0, r4
    e80c:	bd10      	pop	{r4, pc}
    e80e:	b510      	push	{r4, lr}
    e810:	f7ff fff2 	bl	e7f8 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    e814:	3069      	adds	r0, #105	; 0x69
    e816:	b280      	uxth	r0, r0
    e818:	bd10      	pop	{r4, pc}
    e81a:	b510      	push	{r4, lr}
    e81c:	f7ff ffec 	bl	e7f8 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    e820:	30ff      	adds	r0, #255	; 0xff
    e822:	b280      	uxth	r0, r0
    e824:	bd10      	pop	{r4, pc}
    e826:	b1d0      	cbz	r0, e85e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x152>
    e828:	2908      	cmp	r1, #8
    e82a:	d011      	beq.n	e850 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x144>
    e82c:	2904      	cmp	r1, #4
    e82e:	d00b      	beq.n	e848 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x13c>
    e830:	2000      	movs	r0, #0
    e832:	2902      	cmp	r1, #2
    e834:	d010      	beq.n	e858 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x14c>
    e836:	2108      	movs	r1, #8
    e838:	3028      	adds	r0, #40	; 0x28
    e83a:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
    e83e:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    e842:	4408      	add	r0, r1
    e844:	3098      	adds	r0, #152	; 0x98
    e846:	4770      	bx	lr
    e848:	f44f 70bf 	mov.w	r0, #382	; 0x17e
    e84c:	2110      	movs	r1, #16
    e84e:	e7f4      	b.n	e83a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12e>
    e850:	f44f 70c8 	mov.w	r0, #400	; 0x190
    e854:	2140      	movs	r1, #64	; 0x40
    e856:	e7f0      	b.n	e83a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12e>
    e858:	2104      	movs	r1, #4
    e85a:	3018      	adds	r0, #24
    e85c:	e7ed      	b.n	e83a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12e>
    e85e:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    e862:	4770      	bx	lr
    e864:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e868:	f001 0307 	and.w	r3, r1, #7
    e86c:	7802      	ldrb	r2, [r0, #0]
    e86e:	2101      	movs	r1, #1
    e870:	4099      	lsls	r1, r3
    e872:	438a      	bics	r2, r1
    e874:	7002      	strb	r2, [r0, #0]
    e876:	4770      	bx	lr

0000e878 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    e878:	f7f5 bdfa 	b.w	4470 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000e87c <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>:
    e87c:	2000      	movs	r0, #0
    e87e:	4770      	bx	lr

0000e880 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>:
    e880:	b538      	push	{r3, r4, r5, lr}
    e882:	460d      	mov	r5, r1
    e884:	4604      	mov	r4, r0
    e886:	e050      	b.n	e92a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaa>
    e888:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    e88c:	1c40      	adds	r0, r0, #1
    e88e:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
    e892:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    e896:	1c40      	adds	r0, r0, #1
    e898:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
    e89c:	4620      	mov	r0, r4
    e89e:	f000 f8e1 	bl	ea64 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    e8a2:	b198      	cbz	r0, e8cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    e8a4:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    e8a8:	1c40      	adds	r0, r0, #1
    e8aa:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    e8ae:	4620      	mov	r0, r4
    e8b0:	f000 f86e 	bl	e990 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    e8b4:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
    e8b8:	4288      	cmp	r0, r1
    e8ba:	d307      	bcc.n	e8cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    e8bc:	2000      	movs	r0, #0
    e8be:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    e8c2:	2001      	movs	r0, #1
    e8c4:	f884 018e 	strb.w	r0, [r4, #398]	; 0x18e
    e8c8:	f7f7 fb88 	bl	5fdc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e8cc:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    e8d0:	b120      	cbz	r0, e8dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c>
    e8d2:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
    e8d6:	1c40      	adds	r0, r0, #1
    e8d8:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
    e8dc:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    e8e0:	b120      	cbz	r0, e8ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c>
    e8e2:	f8b4 00ba 	ldrh.w	r0, [r4, #186]	; 0xba
    e8e6:	1c40      	adds	r0, r0, #1
    e8e8:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
    e8ec:	f894 013c 	ldrb.w	r0, [r4, #316]	; 0x13c
    e8f0:	f88d 0000 	strb.w	r0, [sp]
    e8f4:	9800      	ldr	r0, [sp, #0]
    e8f6:	9000      	str	r0, [sp, #0]
    e8f8:	f89d 0000 	ldrb.w	r0, [sp]
    e8fc:	b940      	cbnz	r0, e910 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x90>
    e8fe:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
    e902:	2300      	movs	r3, #0
    e904:	2101      	movs	r1, #1
    e906:	f104 0078 	add.w	r0, r4, #120	; 0x78
    e90a:	f7ff f88a 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e90e:	b120      	cbz	r0, e91a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9a>
    e910:	f8b4 00b2 	ldrh.w	r0, [r4, #178]	; 0xb2
    e914:	1c40      	adds	r0, r0, #1
    e916:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
    e91a:	4620      	mov	r0, r4
    e91c:	f000 f847 	bl	e9ae <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    e920:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    e924:	1c40      	adds	r0, r0, #1
    e926:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    e92a:	1e6d      	subs	r5, r5, #1
    e92c:	b2ad      	uxth	r5, r5
    e92e:	d2ab      	bcs.n	e888 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x8>
    e930:	bd38      	pop	{r3, r4, r5, pc}

0000e932 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>:
    e932:	b510      	push	{r4, lr}
    e934:	f7fa fd9a 	bl	946c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    e938:	b128      	cbz	r0, e946 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14>
    e93a:	2000      	movs	r0, #0
    e93c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e940:	4601      	mov	r1, r0
    e942:	f7fa bd3f 	b.w	93c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    e946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e94a:	f7f6 ba33 	b.w	4db4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    e94e:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    e952:	28fe      	cmp	r0, #254	; 0xfe
    e954:	d001      	beq.n	e95a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28>
    e956:	2001      	movs	r0, #1
    e958:	4770      	bx	lr
    e95a:	2000      	movs	r0, #0
    e95c:	4770      	bx	lr
    e95e:	b510      	push	{r4, lr}
    e960:	2801      	cmp	r0, #1
    e962:	d006      	beq.n	e972 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    e964:	2802      	cmp	r0, #2
    e966:	d004      	beq.n	e972 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    e968:	f240 2163 	movw	r1, #611	; 0x263
    e96c:	2006      	movs	r0, #6
    e96e:	f7f5 f9f5 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e972:	bd10      	pop	{r4, pc}
    e974:	2801      	cmp	r0, #1
    e976:	d002      	beq.n	e97e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    e978:	2802      	cmp	r0, #2
    e97a:	d105      	bne.n	e988 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    e97c:	e002      	b.n	e984 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x52>
    e97e:	2901      	cmp	r1, #1
    e980:	d004      	beq.n	e98c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    e982:	e001      	b.n	e988 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    e984:	2902      	cmp	r1, #2
    e986:	d001      	beq.n	e98c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    e988:	2000      	movs	r0, #0
    e98a:	4770      	bx	lr
    e98c:	2001      	movs	r0, #1
    e98e:	4770      	bx	lr
    e990:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    e994:	428a      	cmp	r2, r1
    e996:	d301      	bcc.n	e99c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6a>
    e998:	1a51      	subs	r1, r2, r1
    e99a:	e000      	b.n	e99e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6c>
    e99c:	2100      	movs	r1, #0
    e99e:	8a82      	ldrh	r2, [r0, #20]
    e9a0:	1d52      	adds	r2, r2, #5
    e9a2:	428a      	cmp	r2, r1
    e9a4:	d302      	bcc.n	e9ac <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7a>
    e9a6:	2101      	movs	r1, #1
    e9a8:	f880 10ac 	strb.w	r1, [r0, #172]	; 0xac
    e9ac:	4770      	bx	lr
    e9ae:	b570      	push	{r4, r5, r6, lr}
    e9b0:	4604      	mov	r4, r0
    e9b2:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    e9b6:	2500      	movs	r5, #0
    e9b8:	2601      	movs	r6, #1
    e9ba:	280c      	cmp	r0, #12
    e9bc:	d02c      	beq.n	ea18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe6>
    e9be:	280d      	cmp	r0, #13
    e9c0:	d129      	bne.n	ea16 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    e9c2:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    e9c6:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    e9ca:	1c40      	adds	r0, r0, #1
    e9cc:	4288      	cmp	r0, r1
    e9ce:	d122      	bne.n	ea16 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    e9d0:	8820      	ldrh	r0, [r4, #0]
    e9d2:	f8a4 01ca 	strh.w	r0, [r4, #458]	; 0x1ca
    e9d6:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    e9da:	f7fe ffd8 	bl	d98e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    e9de:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    e9e2:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    e9e6:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    e9ea:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    e9ee:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    e9f2:	f884 51c8 	strb.w	r5, [r4, #456]	; 0x1c8
    e9f6:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
    e9fa:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    e9fe:	2102      	movs	r1, #2
    ea00:	4620      	mov	r0, r4
    ea02:	f7f7 f8ad 	bl	5b60 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    ea06:	f7f7 fae9 	bl	5fdc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ea0a:	2103      	movs	r1, #3
    ea0c:	4620      	mov	r0, r4
    ea0e:	f7f8 ff87 	bl	7920 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    ea12:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    ea16:	bd70      	pop	{r4, r5, r6, pc}
    ea18:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    ea1c:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
    ea20:	1c40      	adds	r0, r0, #1
    ea22:	4288      	cmp	r0, r1
    ea24:	d1f7      	bne.n	ea16 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    ea26:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    ea2a:	f8d0 1001 	ldr.w	r1, [r0, #1]
    ea2e:	f8c4 108e 	str.w	r1, [r4, #142]	; 0x8e
    ea32:	7940      	ldrb	r0, [r0, #5]
    ea34:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    ea38:	2103      	movs	r1, #3
    ea3a:	4620      	mov	r0, r4
    ea3c:	f7f7 f890 	bl	5b60 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    ea40:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    ea44:	7800      	ldrb	r0, [r0, #0]
    ea46:	b140      	cbz	r0, ea5a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x128>
    ea48:	2101      	movs	r1, #1
    ea4a:	20fe      	movs	r0, #254	; 0xfe
    ea4c:	f7fb fd2a 	bl	a4a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18bc>
    ea50:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    ea54:	f884 60c8 	strb.w	r6, [r4, #200]	; 0xc8
    ea58:	bd70      	pop	{r4, r5, r6, pc}
    ea5a:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    ea5e:	2036      	movs	r0, #54	; 0x36
    ea60:	f7f5 f97c 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea64:	b510      	push	{r4, lr}
    ea66:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    ea6a:	b941      	cbnz	r1, ea7e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14c>
    ea6c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ea70:	2300      	movs	r3, #0
    ea72:	2106      	movs	r1, #6
    ea74:	3078      	adds	r0, #120	; 0x78
    ea76:	f7fe ffd4 	bl	da22 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ea7a:	2800      	cmp	r0, #0
    ea7c:	d000      	beq.n	ea80 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14e>
    ea7e:	2001      	movs	r0, #1
    ea80:	bd10      	pop	{r4, pc}

0000ea82 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    ea82:	b510      	push	{r4, lr}
    ea84:	460c      	mov	r4, r1
    ea86:	4601      	mov	r1, r0
    ea88:	4610      	mov	r0, r2
    ea8a:	f7f2 fd91 	bl	15b0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    ea8e:	2800      	cmp	r0, #0
    ea90:	da06      	bge.n	eaa0 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x1e>
    ea92:	1a21      	subs	r1, r4, r0
    ea94:	1e49      	subs	r1, r1, #1
    ea96:	fbb1 f1f4 	udiv	r1, r1, r4
    ea9a:	fb01 0004 	mla	r0, r1, r4, r0
    ea9e:	bd10      	pop	{r4, pc}
    eaa0:	fb90 f1f4 	sdiv	r1, r0, r4
    eaa4:	fb01 0014 	mls	r0, r1, r4, r0
    eaa8:	bd10      	pop	{r4, pc}
    eaaa:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    eaae:	f001 0107 	and.w	r1, r1, #7
    eab2:	7800      	ldrb	r0, [r0, #0]
    eab4:	2201      	movs	r2, #1
    eab6:	408a      	lsls	r2, r1
    eab8:	4010      	ands	r0, r2
    eaba:	40c8      	lsrs	r0, r1
    eabc:	4770      	bx	lr
    eabe:	b118      	cbz	r0, eac8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    eac0:	2802      	cmp	r0, #2
    eac2:	d001      	beq.n	eac8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    eac4:	2001      	movs	r0, #1
    eac6:	4770      	bx	lr
    eac8:	2000      	movs	r0, #0
    eaca:	4770      	bx	lr

0000eacc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    eacc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    eace:	7881      	ldrb	r1, [r0, #2]
    ead0:	4604      	mov	r4, r0
    ead2:	291a      	cmp	r1, #26
    ead4:	d025      	beq.n	eb22 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    ead6:	dc0e      	bgt.n	eaf6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
    ead8:	2916      	cmp	r1, #22
    eada:	d22d      	bcs.n	eb38 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    eadc:	e8df f001 	tbb	[pc, r1]
    eae0:	2c2c2c2c 	.word	0x2c2c2c2c
    eae4:	2c2c212c 	.word	0x2c2c212c
    eae8:	2c2c2c2c 	.word	0x2c2c2c2c
    eaec:	2c2c2c2c 	.word	0x2c2c2c2c
    eaf0:	212c2c2c 	.word	0x212c2c2c
    eaf4:	2121      	.short	0x2121
    eaf6:	292a      	cmp	r1, #42	; 0x2a
    eaf8:	d01e      	beq.n	eb38 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    eafa:	dc0b      	bgt.n	eb14 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
    eafc:	f1a1 011e 	sub.w	r1, r1, #30
    eb00:	290c      	cmp	r1, #12
    eb02:	d219      	bcs.n	eb38 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    eb04:	e8df f001 	tbb	[pc, r1]
    eb08:	18181818 	.word	0x18181818
    eb0c:	18181818 	.word	0x18181818
    eb10:	0d181818 	.word	0x0d181818
    eb14:	393a      	subs	r1, #58	; 0x3a
    eb16:	2904      	cmp	r1, #4
    eb18:	d20e      	bcs.n	eb38 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    eb1a:	e8df f001 	tbb	[pc, r1]
    eb1e:	020d      	.short	0x020d
    eb20:	020d      	.short	0x020d
    eb22:	8820      	ldrh	r0, [r4, #0]
    eb24:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    eb28:	d206      	bcs.n	eb38 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    eb2a:	2701      	movs	r7, #1
    eb2c:	4669      	mov	r1, sp
    eb2e:	f7fe ff1e 	bl	d96e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    eb32:	b118      	cbz	r0, eb3c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    eb34:	2002      	movs	r0, #2
    eb36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    eb38:	2012      	movs	r0, #18
    eb3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    eb3c:	9d01      	ldr	r5, [sp, #4]
    eb3e:	4668      	mov	r0, sp
    eb40:	462e      	mov	r6, r5
    eb42:	f505 759e 	add.w	r5, r5, #316	; 0x13c
    eb46:	f206 163d 	addw	r6, r6, #317	; 0x13d
    eb4a:	f000 fd7f 	bl	f64c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x450>
    eb4e:	b138      	cbz	r0, eb60 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x94>
    eb50:	7828      	ldrb	r0, [r5, #0]
    eb52:	f88d 0008 	strb.w	r0, [sp, #8]
    eb56:	9802      	ldr	r0, [sp, #8]
    eb58:	9002      	str	r0, [sp, #8]
    eb5a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    eb5e:	b108      	cbz	r0, eb64 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x98>
    eb60:	200c      	movs	r0, #12
    eb62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    eb64:	702f      	strb	r7, [r5, #0]
    eb66:	78a0      	ldrb	r0, [r4, #2]
    eb68:	7030      	strb	r0, [r6, #0]
    eb6a:	2000      	movs	r0, #0
    eb6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000eb6e <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    eb6e:	b510      	push	{r4, lr}
    eb70:	4604      	mov	r4, r0
    eb72:	7800      	ldrb	r0, [r0, #0]
    eb74:	b118      	cbz	r0, eb7e <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    eb76:	2801      	cmp	r0, #1
    eb78:	d001      	beq.n	eb7e <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    eb7a:	2012      	movs	r0, #18
    eb7c:	bd10      	pop	{r4, pc}
    eb7e:	f000 fd7c 	bl	f67a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    eb82:	b120      	cbz	r0, eb8e <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    eb84:	f7f6 fdb2 	bl	56ec <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    eb88:	b108      	cbz	r0, eb8e <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    eb8a:	200c      	movs	r0, #12
    eb8c:	bd10      	pop	{r4, pc}
    eb8e:	7820      	ldrb	r0, [r4, #0]
    eb90:	f7ff ff95 	bl	eabe <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    eb94:	1de2      	adds	r2, r4, #7
    eb96:	f104 0317 	add.w	r3, r4, #23
    eb9a:	1c61      	adds	r1, r4, #1
    eb9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eba0:	f7f6 bdd6 	b.w	5750 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000eba4 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    eba4:	b510      	push	{r4, lr}
    eba6:	4604      	mov	r4, r0
    eba8:	f000 fe0e 	bl	f7c8 <__kernel_ram_size+0xb0>
    ebac:	b108      	cbz	r0, ebb2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    ebae:	200c      	movs	r0, #12
    ebb0:	bd10      	pop	{r4, pc}
    ebb2:	7820      	ldrb	r0, [r4, #0]
    ebb4:	b118      	cbz	r0, ebbe <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    ebb6:	2801      	cmp	r0, #1
    ebb8:	d001      	beq.n	ebbe <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    ebba:	2012      	movs	r0, #18
    ebbc:	bd10      	pop	{r4, pc}
    ebbe:	f7ff ff7e 	bl	eabe <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    ebc2:	1c61      	adds	r1, r4, #1
    ebc4:	f7f6 fe68 	bl	5898 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    ebc8:	b108      	cbz	r0, ebce <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    ebca:	2000      	movs	r0, #0
    ebcc:	bd10      	pop	{r4, pc}
    ebce:	2007      	movs	r0, #7
    ebd0:	bd10      	pop	{r4, pc}

0000ebd2 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    ebd2:	b510      	push	{r4, lr}
    ebd4:	f000 fd51 	bl	f67a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    ebd8:	b120      	cbz	r0, ebe4 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    ebda:	f7f6 fd87 	bl	56ec <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ebde:	b108      	cbz	r0, ebe4 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    ebe0:	200c      	movs	r0, #12
    ebe2:	bd10      	pop	{r4, pc}
    ebe4:	f7f6 fdfa 	bl	57dc <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    ebe8:	2000      	movs	r0, #0
    ebea:	bd10      	pop	{r4, pc}

0000ebec <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    ebec:	b510      	push	{r4, lr}
    ebee:	f000 fdeb 	bl	f7c8 <__kernel_ram_size+0xb0>
    ebf2:	b108      	cbz	r0, ebf8 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    ebf4:	200c      	movs	r0, #12
    ebf6:	bd10      	pop	{r4, pc}
    ebf8:	f7f6 fe76 	bl	58e8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    ebfc:	2000      	movs	r0, #0
    ebfe:	bd10      	pop	{r4, pc}

0000ec00 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    ec00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ec02:	4605      	mov	r5, r0
    ec04:	f000 fafa 	bl	f1fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    ec08:	2800      	cmp	r0, #0
    ec0a:	d112      	bne.n	ec32 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x32>
    ec0c:	8828      	ldrh	r0, [r5, #0]
    ec0e:	2100      	movs	r1, #0
    ec10:	f7fe fd43 	bl	d69a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ec14:	0004      	movs	r4, r0
    ec16:	d00d      	beq.n	ec34 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    ec18:	f000 fd1b 	bl	f652 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
    ec1c:	b150      	cbz	r0, ec34 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    ec1e:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    ec22:	f88d 0000 	strb.w	r0, [sp]
    ec26:	9800      	ldr	r0, [sp, #0]
    ec28:	9000      	str	r0, [sp, #0]
    ec2a:	f89d 0000 	ldrb.w	r0, [sp]
    ec2e:	b118      	cbz	r0, ec38 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    ec30:	203a      	movs	r0, #58	; 0x3a
    ec32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ec34:	2002      	movs	r0, #2
    ec36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ec38:	88a8      	ldrh	r0, [r5, #4]
    ec3a:	f7fe fea4 	bl	d986 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    ec3e:	4606      	mov	r6, r0
    ec40:	4601      	mov	r1, r0
    ec42:	2008      	movs	r0, #8
    ec44:	f7ff f86b 	bl	dd1e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    ec48:	4601      	mov	r1, r0
    ec4a:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    ec4e:	4281      	cmp	r1, r0
    ec50:	d301      	bcc.n	ec56 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x56>
    ec52:	42b0      	cmp	r0, r6
    ec54:	d301      	bcc.n	ec5a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x5a>
    ec56:	2012      	movs	r0, #18
    ec58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ec5a:	4631      	mov	r1, r6
    ec5c:	2005      	movs	r0, #5
    ec5e:	f7ff f85e 	bl	dd1e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    ec62:	f8a4 0148 	strh.w	r0, [r4, #328]	; 0x148
    ec66:	2000      	movs	r0, #0
    ec68:	e9c4 0653 	strd	r0, r6, [r4, #332]	; 0x14c
    ec6c:	88e8      	ldrh	r0, [r5, #6]
    ec6e:	f8a4 0154 	strh.w	r0, [r4, #340]	; 0x154
    ec72:	8928      	ldrh	r0, [r5, #8]
    ec74:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    ec78:	f504 74a2 	add.w	r4, r4, #324	; 0x144
    ec7c:	2001      	movs	r0, #1
    ec7e:	7020      	strb	r0, [r4, #0]
    ec80:	2000      	movs	r0, #0
    ec82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ec84 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>:
    ec84:	b508      	push	{r3, lr}
    ec86:	f7f7 f9a3 	bl	5fd0 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY>
    ec8a:	b970      	cbnz	r0, ecaa <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
    ec8c:	f7f9 f806 	bl	7c9c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    ec90:	2805      	cmp	r0, #5
    ec92:	d005      	beq.n	eca0 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x1c>
    ec94:	f7f7 fc58 	bl	6548 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    ec98:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    ec9c:	39ff      	subs	r1, #255	; 0xff
    ec9e:	d004      	beq.n	ecaa <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
    eca0:	4668      	mov	r0, sp
    eca2:	f7f8 ff67 	bl	7b74 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>
    eca6:	b110      	cbz	r0, ecae <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x2a>
    eca8:	e012      	b.n	ecd0 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x4c>
    ecaa:	200c      	movs	r0, #12
    ecac:	bd08      	pop	{r3, pc}
    ecae:	9800      	ldr	r0, [sp, #0]
    ecb0:	8800      	ldrh	r0, [r0, #0]
    ecb2:	f7fe fd5a 	bl	d76a <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    ecb6:	9800      	ldr	r0, [sp, #0]
    ecb8:	2100      	movs	r1, #0
    ecba:	8800      	ldrh	r0, [r0, #0]
    ecbc:	f7f5 facc 	bl	4258 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ecc0:	b120      	cbz	r0, eccc <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x48>
    ecc2:	f640 717f 	movw	r1, #3967	; 0xf7f
    ecc6:	2039      	movs	r0, #57	; 0x39
    ecc8:	f7f5 f848 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eccc:	f7f7 f978 	bl	5fc0 <sym_QG7T3WZZ6IR4SNPFZNDFKFWZROS2N7DDO6SYZAA>
    ecd0:	2000      	movs	r0, #0
    ecd2:	bd08      	pop	{r3, pc}

0000ecd4 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    ecd4:	b510      	push	{r4, lr}
    ecd6:	460b      	mov	r3, r1
    ecd8:	2201      	movs	r2, #1
    ecda:	f100 0110 	add.w	r1, r0, #16
    ecde:	f7fe fe0a 	bl	d8f6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    ece2:	2000      	movs	r0, #0
    ece4:	bd10      	pop	{r4, pc}

0000ece6 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    ece6:	b510      	push	{r4, lr}
    ece8:	2108      	movs	r1, #8
    ecea:	f7f5 f8e1 	bl	3eb0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    ecee:	2000      	movs	r0, #0
    ecf0:	bd10      	pop	{r4, pc}

0000ecf2 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    ecf2:	b510      	push	{r4, lr}
    ecf4:	4604      	mov	r4, r0
    ecf6:	f000 fca3 	bl	f640 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    ecfa:	b140      	cbz	r0, ed0e <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    ecfc:	20fb      	movs	r0, #251	; 0xfb
    ecfe:	8020      	strh	r0, [r4, #0]
    ed00:	f640 0148 	movw	r1, #2120	; 0x848
    ed04:	8061      	strh	r1, [r4, #2]
    ed06:	80a0      	strh	r0, [r4, #4]
    ed08:	80e1      	strh	r1, [r4, #6]
    ed0a:	2000      	movs	r0, #0
    ed0c:	bd10      	pop	{r4, pc}
    ed0e:	2001      	movs	r0, #1
    ed10:	bd10      	pop	{r4, pc}

0000ed12 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    ed12:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    ed14:	460d      	mov	r5, r1
    ed16:	4606      	mov	r6, r0
    ed18:	f7fc f952 	bl	afc0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    ed1c:	f3c0 2000 	ubfx	r0, r0, #8, #1
    ed20:	b300      	cbz	r0, ed64 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x52>
    ed22:	8830      	ldrh	r0, [r6, #0]
    ed24:	4669      	mov	r1, sp
    ed26:	f7fe fe22 	bl	d96e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ed2a:	2800      	cmp	r0, #0
    ed2c:	d119      	bne.n	ed62 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x50>
    ed2e:	9c01      	ldr	r4, [sp, #4]
    ed30:	2700      	movs	r7, #0
    ed32:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    ed36:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    ed3a:	f000 fa94 	bl	f266 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    ed3e:	70a8      	strb	r0, [r5, #2]
    ed40:	7860      	ldrb	r0, [r4, #1]
    ed42:	f000 fa90 	bl	f266 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    ed46:	70e8      	strb	r0, [r5, #3]
    ed48:	78a0      	ldrb	r0, [r4, #2]
    ed4a:	f88d 0008 	strb.w	r0, [sp, #8]
    ed4e:	9802      	ldr	r0, [sp, #8]
    ed50:	9002      	str	r0, [sp, #8]
    ed52:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ed56:	3c6a      	subs	r4, #106	; 0x6a
    ed58:	2800      	cmp	r0, #0
    ed5a:	d1ea      	bne.n	ed32 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x20>
    ed5c:	8830      	ldrh	r0, [r6, #0]
    ed5e:	8028      	strh	r0, [r5, #0]
    ed60:	2000      	movs	r0, #0
    ed62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ed64:	2001      	movs	r0, #1
    ed66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000ed68 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    ed68:	2108      	movs	r1, #8
    ed6a:	7001      	strb	r1, [r0, #0]
    ed6c:	2000      	movs	r0, #0
    ed6e:	4770      	bx	lr

0000ed70 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    ed70:	b510      	push	{r4, lr}
    ed72:	4604      	mov	r4, r0
    ed74:	20d8      	movs	r0, #216	; 0xd8
    ed76:	7020      	strb	r0, [r4, #0]
    ed78:	f000 fc43 	bl	f602 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x406>
    ed7c:	7060      	strb	r0, [r4, #1]
    ed7e:	2000      	movs	r0, #0
    ed80:	bd10      	pop	{r4, pc}

0000ed82 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    ed82:	2108      	movs	r1, #8
    ed84:	7001      	strb	r1, [r0, #0]
    ed86:	2000      	movs	r0, #0
    ed88:	4770      	bx	lr

0000ed8a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    ed8a:	b510      	push	{r4, lr}
    ed8c:	4604      	mov	r4, r0
    ed8e:	7800      	ldrb	r0, [r0, #0]
    ed90:	b108      	cbz	r0, ed96 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    ed92:	2801      	cmp	r0, #1
    ed94:	d110      	bne.n	edb8 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    ed96:	f000 fc70 	bl	f67a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    ed9a:	b120      	cbz	r0, eda6 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    ed9c:	f7f6 fca6 	bl	56ec <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    eda0:	b108      	cbz	r0, eda6 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    eda2:	200c      	movs	r0, #12
    eda4:	bd10      	pop	{r4, pc}
    eda6:	7820      	ldrb	r0, [r4, #0]
    eda8:	f7ff fe89 	bl	eabe <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    edac:	1c61      	adds	r1, r4, #1
    edae:	f7fe fd88 	bl	d8c2 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    edb2:	b108      	cbz	r0, edb8 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    edb4:	2000      	movs	r0, #0
    edb6:	bd10      	pop	{r4, pc}
    edb8:	2012      	movs	r0, #18
    edba:	bd10      	pop	{r4, pc}

0000edbc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    edbc:	b510      	push	{r4, lr}
    edbe:	4604      	mov	r4, r0
    edc0:	f000 fd02 	bl	f7c8 <__kernel_ram_size+0xb0>
    edc4:	b108      	cbz	r0, edca <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    edc6:	200c      	movs	r0, #12
    edc8:	bd10      	pop	{r4, pc}
    edca:	7820      	ldrb	r0, [r4, #0]
    edcc:	b108      	cbz	r0, edd2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    edce:	2801      	cmp	r0, #1
    edd0:	d107      	bne.n	ede2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    edd2:	f7ff fe74 	bl	eabe <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    edd6:	1c61      	adds	r1, r4, #1
    edd8:	f7fe fd82 	bl	d8e0 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    eddc:	b108      	cbz	r0, ede2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    edde:	2000      	movs	r0, #0
    ede0:	bd10      	pop	{r4, pc}
    ede2:	2012      	movs	r0, #18
    ede4:	bd10      	pop	{r4, pc}

0000ede6 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    ede6:	b510      	push	{r4, lr}
    ede8:	4604      	mov	r4, r0
    edea:	f000 fc46 	bl	f67a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    edee:	b108      	cbz	r0, edf4 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    edf0:	200c      	movs	r0, #12
    edf2:	bd10      	pop	{r4, pc}
    edf4:	7820      	ldrb	r0, [r4, #0]
    edf6:	f000 0001 	and.w	r0, r0, #1
    edfa:	f7f6 fc71 	bl	56e0 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    edfe:	2000      	movs	r0, #0
    ee00:	bd10      	pop	{r4, pc}

0000ee02 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    ee02:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ee04:	460d      	mov	r5, r1
    ee06:	4604      	mov	r4, r0
    ee08:	f000 fc1a 	bl	f640 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    ee0c:	b130      	cbz	r0, ee1c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    ee0e:	88a2      	ldrh	r2, [r4, #4]
    ee10:	f244 2090 	movw	r0, #17040	; 0x4290
    ee14:	4282      	cmp	r2, r0
    ee16:	d903      	bls.n	ee20 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    ee18:	2012      	movs	r0, #18
    ee1a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ee1c:	2001      	movs	r0, #1
    ee1e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ee20:	f640 0048 	movw	r0, #2120	; 0x848
    ee24:	4282      	cmp	r2, r0
    ee26:	d300      	bcc.n	ee2a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    ee28:	4602      	mov	r2, r0
    ee2a:	8820      	ldrh	r0, [r4, #0]
    ee2c:	f8ad 0000 	strh.w	r0, [sp]
    ee30:	8860      	ldrh	r0, [r4, #2]
    ee32:	f8ad 0002 	strh.w	r0, [sp, #2]
    ee36:	f8ad 2004 	strh.w	r2, [sp, #4]
    ee3a:	8860      	ldrh	r0, [r4, #2]
    ee3c:	f8ad 0006 	strh.w	r0, [sp, #6]
    ee40:	f8ad 2008 	strh.w	r2, [sp, #8]
    ee44:	8820      	ldrh	r0, [r4, #0]
    ee46:	8028      	strh	r0, [r5, #0]
    ee48:	4668      	mov	r0, sp
    ee4a:	f000 fc28 	bl	f69e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a2>
    ee4e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ee50 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>:
    ee50:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ee52:	4604      	mov	r4, r0
    ee54:	f7fe fd75 	bl	d942 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>
    ee58:	b160      	cbz	r0, ee74 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x24>
    ee5a:	4620      	mov	r0, r4
    ee5c:	f7f6 ff06 	bl	5c6c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
    ee60:	4669      	mov	r1, sp
    ee62:	2000      	movs	r0, #0
    ee64:	f7fe fc22 	bl	d6ac <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    ee68:	b150      	cbz	r0, ee80 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x30>
    ee6a:	f241 0104 	movw	r1, #4100	; 0x1004
    ee6e:	2039      	movs	r0, #57	; 0x39
    ee70:	f7f4 ff74 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee74:	2012      	movs	r0, #18
    ee76:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ee78:	9802      	ldr	r0, [sp, #8]
    ee7a:	f880 412e 	strb.w	r4, [r0, #302]	; 0x12e
    ee7e:	e000      	b.n	ee82 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x32>
    ee80:	2401      	movs	r4, #1
    ee82:	4668      	mov	r0, sp
    ee84:	f7f5 f99a 	bl	41bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    ee88:	2800      	cmp	r0, #0
    ee8a:	d0f5      	beq.n	ee78 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x28>
    ee8c:	2000      	movs	r0, #0
    ee8e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ee90 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    ee90:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ee92:	4604      	mov	r4, r0
    ee94:	f7fc f894 	bl	afc0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    ee98:	f3c0 2000 	ubfx	r0, r0, #8, #1
    ee9c:	b1b0      	cbz	r0, eecc <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    ee9e:	f10d 0007 	add.w	r0, sp, #7
    eea2:	9000      	str	r0, [sp, #0]
    eea4:	7922      	ldrb	r2, [r4, #4]
    eea6:	78e1      	ldrb	r1, [r4, #3]
    eea8:	78a0      	ldrb	r0, [r4, #2]
    eeaa:	f10d 0306 	add.w	r3, sp, #6
    eeae:	f000 fc74 	bl	f79a <__kernel_ram_size+0x82>
    eeb2:	2800      	cmp	r0, #0
    eeb4:	d109      	bne.n	eeca <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    eeb6:	8820      	ldrh	r0, [r4, #0]
    eeb8:	f8ad 0004 	strh.w	r0, [sp, #4]
    eebc:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    eec0:	f8ad 0008 	strh.w	r0, [sp, #8]
    eec4:	a801      	add	r0, sp, #4
    eec6:	f000 f8f8 	bl	f0ba <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    eeca:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    eecc:	2001      	movs	r0, #1
    eece:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000eed0 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    eed0:	b510      	push	{r4, lr}
    eed2:	4604      	mov	r4, r0
    eed4:	f000 fbd1 	bl	f67a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    eed8:	b120      	cbz	r0, eee4 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    eeda:	f7f6 fc07 	bl	56ec <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    eede:	b108      	cbz	r0, eee4 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    eee0:	200c      	movs	r0, #12
    eee2:	bd10      	pop	{r4, pc}
    eee4:	7820      	ldrb	r0, [r4, #0]
    eee6:	f7ff fdea 	bl	eabe <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    eeea:	79e2      	ldrb	r2, [r4, #7]
    eeec:	1c61      	adds	r1, r4, #1
    eeee:	f7f6 fb97 	bl	5620 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    eef2:	b108      	cbz	r0, eef8 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    eef4:	2000      	movs	r0, #0
    eef6:	bd10      	pop	{r4, pc}
    eef8:	2002      	movs	r0, #2
    eefa:	bd10      	pop	{r4, pc}

0000eefc <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    eefc:	b510      	push	{r4, lr}
    eefe:	4604      	mov	r4, r0
    ef00:	2001      	movs	r0, #1
    ef02:	f000 f9bb 	bl	f27c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
    ef06:	b128      	cbz	r0, ef14 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    ef08:	4621      	mov	r1, r4
    ef0a:	2001      	movs	r0, #1
    ef0c:	f7f5 fd90 	bl	4a30 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    ef10:	2000      	movs	r0, #0
    ef12:	bd10      	pop	{r4, pc}
    ef14:	200c      	movs	r0, #12
    ef16:	bd10      	pop	{r4, pc}

0000ef18 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    ef18:	b510      	push	{r4, lr}
    ef1a:	8800      	ldrh	r0, [r0, #0]
    ef1c:	f7f6 fc74 	bl	5808 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    ef20:	b108      	cbz	r0, ef26 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    ef22:	2000      	movs	r0, #0
    ef24:	bd10      	pop	{r4, pc}
    ef26:	2030      	movs	r0, #48	; 0x30
    ef28:	bd10      	pop	{r4, pc}

0000ef2a <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    ef2a:	b51c      	push	{r2, r3, r4, lr}
    ef2c:	7801      	ldrb	r1, [r0, #0]
    ef2e:	f88d 1000 	strb.w	r1, [sp]
    ef32:	7840      	ldrb	r0, [r0, #1]
    ef34:	f88d 0001 	strb.w	r0, [sp, #1]
    ef38:	2000      	movs	r0, #0
    ef3a:	f8ad 0002 	strh.w	r0, [sp, #2]
    ef3e:	f8ad 0004 	strh.w	r0, [sp, #4]
    ef42:	4601      	mov	r1, r0
    ef44:	4668      	mov	r0, sp
    ef46:	f000 f9e4 	bl	f312 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x116>
    ef4a:	2800      	cmp	r0, #0
    ef4c:	d102      	bne.n	ef54 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    ef4e:	4668      	mov	r0, sp
    ef50:	f000 f9c3 	bl	f2da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xde>
    ef54:	bd1c      	pop	{r2, r3, r4, pc}

0000ef56 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    ef56:	b500      	push	{lr}
    ef58:	b087      	sub	sp, #28
    ef5a:	7941      	ldrb	r1, [r0, #5]
    ef5c:	f88d 1000 	strb.w	r1, [sp]
    ef60:	7981      	ldrb	r1, [r0, #6]
    ef62:	f88d 1001 	strb.w	r1, [sp, #1]
    ef66:	2101      	movs	r1, #1
    ef68:	f88d 1002 	strb.w	r1, [sp, #2]
    ef6c:	7801      	ldrb	r1, [r0, #0]
    ef6e:	f88d 1003 	strb.w	r1, [sp, #3]
    ef72:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    ef76:	f240 2271 	movw	r2, #625	; 0x271
    ef7a:	4351      	muls	r1, r2
    ef7c:	9102      	str	r1, [sp, #8]
    ef7e:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    ef82:	4350      	muls	r0, r2
    ef84:	9004      	str	r0, [sp, #16]
    ef86:	2007      	movs	r0, #7
    ef88:	f88d 0018 	strb.w	r0, [sp, #24]
    ef8c:	2000      	movs	r0, #0
    ef8e:	f88d 0019 	strb.w	r0, [sp, #25]
    ef92:	9804      	ldr	r0, [sp, #16]
    ef94:	f7fb ff36 	bl	ae04 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x170>
    ef98:	b140      	cbz	r0, efac <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    ef9a:	9802      	ldr	r0, [sp, #8]
    ef9c:	f7fb ff26 	bl	adec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x158>
    efa0:	b120      	cbz	r0, efac <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    efa2:	4668      	mov	r0, sp
    efa4:	f7fb fdba 	bl	ab1c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    efa8:	b007      	add	sp, #28
    efaa:	bd00      	pop	{pc}
    efac:	2030      	movs	r0, #48	; 0x30
    efae:	e7fb      	b.n	efa8 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0000efb0 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>:
    efb0:	b570      	push	{r4, r5, r6, lr}
    efb2:	4605      	mov	r5, r0
    efb4:	8800      	ldrh	r0, [r0, #0]
    efb6:	2100      	movs	r1, #0
    efb8:	f7fe fb6f 	bl	d69a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    efbc:	0004      	movs	r4, r0
    efbe:	d007      	beq.n	efd0 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    efc0:	f000 fb47 	bl	f652 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
    efc4:	b120      	cbz	r0, efd0 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    efc6:	f894 015a 	ldrb.w	r0, [r4, #346]	; 0x15a
    efca:	b118      	cbz	r0, efd4 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x24>
    efcc:	203a      	movs	r0, #58	; 0x3a
    efce:	bd70      	pop	{r4, r5, r6, pc}
    efd0:	2002      	movs	r0, #2
    efd2:	bd70      	pop	{r4, r5, r6, pc}
    efd4:	2100      	movs	r1, #0
    efd6:	f104 00c6 	add.w	r0, r4, #198	; 0xc6
    efda:	f7ff fd66 	bl	eaaa <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    efde:	2801      	cmp	r0, #1
    efe0:	d001      	beq.n	efe6 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x36>
    efe2:	201a      	movs	r0, #26
    efe4:	bd70      	pop	{r4, r5, r6, pc}
    efe6:	f8d5 1002 	ldr.w	r1, [r5, #2]
    efea:	f8c4 115b 	str.w	r1, [r4, #347]	; 0x15b
    efee:	f8d5 1006 	ldr.w	r1, [r5, #6]
    eff2:	f8c4 115f 	str.w	r1, [r4, #351]	; 0x15f
    eff6:	8969      	ldrh	r1, [r5, #10]
    eff8:	f8a4 1163 	strh.w	r1, [r4, #355]	; 0x163
    effc:	2210      	movs	r2, #16
    effe:	f105 010c 	add.w	r1, r5, #12
    f002:	f204 1065 	addw	r0, r4, #357	; 0x165
    f006:	f7fd faa7 	bl	c558 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f00a:	2001      	movs	r0, #1
    f00c:	f884 015a 	strb.w	r0, [r4, #346]	; 0x15a
    f010:	2000      	movs	r0, #0
    f012:	bd70      	pop	{r4, r5, r6, pc}

0000f014 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    f014:	b51c      	push	{r2, r3, r4, lr}
    f016:	4604      	mov	r4, r0
    f018:	f000 fb12 	bl	f640 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f01c:	b178      	cbz	r0, f03e <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    f01e:	8820      	ldrh	r0, [r4, #0]
    f020:	f8ad 0000 	strh.w	r0, [sp]
    f024:	8860      	ldrh	r0, [r4, #2]
    f026:	f8ad 0002 	strh.w	r0, [sp, #2]
    f02a:	8820      	ldrh	r0, [r4, #0]
    f02c:	f8ad 0004 	strh.w	r0, [sp, #4]
    f030:	8860      	ldrh	r0, [r4, #2]
    f032:	f8ad 0006 	strh.w	r0, [sp, #6]
    f036:	4668      	mov	r0, sp
    f038:	f7fb ff1a 	bl	ae70 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1dc>
    f03c:	bd1c      	pop	{r2, r3, r4, pc}
    f03e:	2001      	movs	r0, #1
    f040:	bd1c      	pop	{r2, r3, r4, pc}

0000f042 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    f042:	b510      	push	{r4, lr}
    f044:	f7f5 fd18 	bl	4a78 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    f048:	2000      	movs	r0, #0
    f04a:	bd10      	pop	{r4, pc}

0000f04c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    f04c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f04e:	460c      	mov	r4, r1
    f050:	4605      	mov	r5, r0
    f052:	f000 faf5 	bl	f640 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f056:	b160      	cbz	r0, f072 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    f058:	4669      	mov	r1, sp
    f05a:	4628      	mov	r0, r5
    f05c:	f7fe fc87 	bl	d96e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f060:	2800      	cmp	r0, #0
    f062:	d105      	bne.n	f070 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    f064:	2101      	movs	r1, #1
    f066:	4622      	mov	r2, r4
    f068:	9801      	ldr	r0, [sp, #4]
    f06a:	f000 fa74 	bl	f556 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    f06e:	2000      	movs	r0, #0
    f070:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f072:	2001      	movs	r0, #1
    f074:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f076 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    f076:	b510      	push	{r4, lr}
    f078:	4604      	mov	r4, r0
    f07a:	2000      	movs	r0, #0
    f07c:	f000 f8fe 	bl	f27c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
    f080:	b128      	cbz	r0, f08e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    f082:	4621      	mov	r1, r4
    f084:	2000      	movs	r0, #0
    f086:	f7f5 fcd3 	bl	4a30 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f08a:	2000      	movs	r0, #0
    f08c:	bd10      	pop	{r4, pc}
    f08e:	200c      	movs	r0, #12
    f090:	bd10      	pop	{r4, pc}

0000f092 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    f092:	b510      	push	{r4, lr}
    f094:	7800      	ldrb	r0, [r0, #0]
    f096:	f000 0001 	and.w	r0, r0, #1
    f09a:	f7f8 fd73 	bl	7b84 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
    f09e:	2000      	movs	r0, #0
    f0a0:	bd10      	pop	{r4, pc}

0000f0a2 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    f0a2:	b510      	push	{r4, lr}
    f0a4:	4604      	mov	r4, r0
    f0a6:	f000 facb 	bl	f640 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f0aa:	b120      	cbz	r0, f0b6 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    f0ac:	4620      	mov	r0, r4
    f0ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0b2:	f000 baf4 	b.w	f69e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a2>
    f0b6:	2001      	movs	r0, #1
    f0b8:	bd10      	pop	{r4, pc}

0000f0ba <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    f0ba:	b510      	push	{r4, lr}
    f0bc:	4604      	mov	r4, r0
    f0be:	8880      	ldrh	r0, [r0, #4]
    f0c0:	b128      	cbz	r0, f0ce <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f0c2:	2801      	cmp	r0, #1
    f0c4:	d003      	beq.n	f0ce <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f0c6:	2802      	cmp	r0, #2
    f0c8:	d001      	beq.n	f0ce <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f0ca:	2012      	movs	r0, #18
    f0cc:	bd10      	pop	{r4, pc}
    f0ce:	78e0      	ldrb	r0, [r4, #3]
    f0d0:	f000 f8e0 	bl	f294 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    f0d4:	b148      	cbz	r0, f0ea <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    f0d6:	78a0      	ldrb	r0, [r4, #2]
    f0d8:	f000 f8dc 	bl	f294 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    f0dc:	b128      	cbz	r0, f0ea <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    f0de:	4620      	mov	r0, r4
    f0e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0e4:	2101      	movs	r1, #1
    f0e6:	f7fb bd6f 	b.w	abc8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    f0ea:	2011      	movs	r0, #17
    f0ec:	bd10      	pop	{r4, pc}

0000f0ee <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    f0ee:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f0f0:	460c      	mov	r4, r1
    f0f2:	4605      	mov	r5, r0
    f0f4:	8800      	ldrh	r0, [r0, #0]
    f0f6:	4669      	mov	r1, sp
    f0f8:	f7fe fc39 	bl	d96e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f0fc:	2800      	cmp	r0, #0
    f0fe:	d106      	bne.n	f10e <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    f100:	9801      	ldr	r0, [sp, #4]
    f102:	8829      	ldrh	r1, [r5, #0]
    f104:	8021      	strh	r1, [r4, #0]
    f106:	f8b0 00a8 	ldrh.w	r0, [r0, #168]	; 0xa8
    f10a:	8060      	strh	r0, [r4, #2]
    f10c:	2000      	movs	r0, #0
    f10e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f110 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    f110:	b510      	push	{r4, lr}
    f112:	4604      	mov	r4, r0
    f114:	4601      	mov	r1, r0
    f116:	2000      	movs	r0, #0
    f118:	f7f5 fc72 	bl	4a00 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f11c:	b910      	cbnz	r0, f124 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    f11e:	2000      	movs	r0, #0
    f120:	6020      	str	r0, [r4, #0]
    f122:	80a0      	strh	r0, [r4, #4]
    f124:	2000      	movs	r0, #0
    f126:	bd10      	pop	{r4, pc}

0000f128 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    f128:	b51c      	push	{r2, r3, r4, lr}
    f12a:	8800      	ldrh	r0, [r0, #0]
    f12c:	4669      	mov	r1, sp
    f12e:	f7fe fc1e 	bl	d96e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f132:	b968      	cbnz	r0, f150 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    f134:	4668      	mov	r0, sp
    f136:	f000 fa89 	bl	f64c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x450>
    f13a:	b148      	cbz	r0, f150 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    f13c:	9801      	ldr	r0, [sp, #4]
    f13e:	2201      	movs	r2, #1
    f140:	4601      	mov	r1, r0
    f142:	f890 3158 	ldrb.w	r3, [r0, #344]	; 0x158
    f146:	3078      	adds	r0, #120	; 0x78
    f148:	f501 71ac 	add.w	r1, r1, #344	; 0x158
    f14c:	b92b      	cbnz	r3, f15a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    f14e:	e001      	b.n	f154 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
    f150:	2002      	movs	r0, #2
    f152:	bd1c      	pop	{r2, r3, r4, pc}
    f154:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
    f158:	b10b      	cbz	r3, f15e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x36>
    f15a:	203a      	movs	r0, #58	; 0x3a
    f15c:	bd1c      	pop	{r2, r3, r4, pc}
    f15e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    f162:	079b      	lsls	r3, r3, #30
    f164:	d100      	bne.n	f168 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x40>
    f166:	700a      	strb	r2, [r1, #0]
    f168:	f880 2047 	strb.w	r2, [r0, #71]	; 0x47
    f16c:	2000      	movs	r0, #0
    f16e:	bd1c      	pop	{r2, r3, r4, pc}

0000f170 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    f170:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f172:	460c      	mov	r4, r1
    f174:	4605      	mov	r5, r0
    f176:	8800      	ldrh	r0, [r0, #0]
    f178:	4669      	mov	r1, sp
    f17a:	f7fe fbf8 	bl	d96e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f17e:	b108      	cbz	r0, f184 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    f180:	2002      	movs	r0, #2
    f182:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f184:	78a8      	ldrb	r0, [r5, #2]
    f186:	b130      	cbz	r0, f196 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    f188:	f000 fa3b 	bl	f602 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x406>
    f18c:	70a0      	strb	r0, [r4, #2]
    f18e:	8828      	ldrh	r0, [r5, #0]
    f190:	8020      	strh	r0, [r4, #0]
    f192:	2000      	movs	r0, #0
    f194:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f196:	9801      	ldr	r0, [sp, #4]
    f198:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    f19c:	e7f6      	b.n	f18c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000f19e <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    f19e:	b510      	push	{r4, lr}
    f1a0:	f7fb fea4 	bl	aeec <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    f1a4:	2000      	movs	r0, #0
    f1a6:	bd10      	pop	{r4, pc}

0000f1a8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    f1a8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f1ac:	4604      	mov	r4, r0
    f1ae:	8840      	ldrh	r0, [r0, #2]
    f1b0:	460d      	mov	r5, r1
    f1b2:	b1b8      	cbz	r0, f1e4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    f1b4:	8820      	ldrh	r0, [r4, #0]
    f1b6:	4669      	mov	r1, sp
    f1b8:	f7fe fbd9 	bl	d96e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f1bc:	2800      	cmp	r0, #0
    f1be:	d10f      	bne.n	f1e0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    f1c0:	8820      	ldrh	r0, [r4, #0]
    f1c2:	8028      	strh	r0, [r5, #0]
    f1c4:	9e01      	ldr	r6, [sp, #4]
    f1c6:	f106 050c 	add.w	r5, r6, #12
    f1ca:	3678      	adds	r6, #120	; 0x78
    f1cc:	682f      	ldr	r7, [r5, #0]
    f1ce:	8862      	ldrh	r2, [r4, #2]
    f1d0:	4639      	mov	r1, r7
    f1d2:	4630      	mov	r0, r6
    f1d4:	f7fe fd8c 	bl	dcf0 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    f1d8:	6828      	ldr	r0, [r5, #0]
    f1da:	42b8      	cmp	r0, r7
    f1dc:	d1f6      	bne.n	f1cc <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
    f1de:	2000      	movs	r0, #0
    f1e0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f1e4:	2012      	movs	r0, #18
    f1e6:	e7fb      	b.n	f1e0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0000f1e8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    f1e8:	f7fb bd54 	b.w	ac94 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000f1ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    f1ec:	b510      	push	{r4, lr}
    f1ee:	2008      	movs	r0, #8
    f1f0:	f7fb fedc 	bl	afac <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    f1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f1f8:	f7f9 bcde 	b.w	8bb8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>

0000f1fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
    f1fc:	b510      	push	{r4, lr}
    f1fe:	4604      	mov	r4, r0
    f200:	2000      	movs	r0, #0
    f202:	8822      	ldrh	r2, [r4, #0]
    f204:	b086      	sub	sp, #24
    f206:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
    f20a:	39ff      	subs	r1, #255	; 0xff
    f20c:	d008      	beq.n	f220 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
    f20e:	a903      	add	r1, sp, #12
    f210:	4610      	mov	r0, r2
    f212:	f7fe fbac 	bl	d96e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f216:	b110      	cbz	r0, f21e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
    f218:	2002      	movs	r0, #2
    f21a:	b006      	add	sp, #24
    f21c:	bd10      	pop	{r4, pc}
    f21e:	9804      	ldr	r0, [sp, #16]
    f220:	8921      	ldrh	r1, [r4, #8]
    f222:	89a3      	ldrh	r3, [r4, #12]
    f224:	8962      	ldrh	r2, [r4, #10]
    f226:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    f22a:	88e3      	ldrh	r3, [r4, #6]
    f22c:	88a2      	ldrh	r2, [r4, #4]
    f22e:	8861      	ldrh	r1, [r4, #2]
    f230:	f000 f966 	bl	f500 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
    f234:	b108      	cbz	r0, f23a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
    f236:	2000      	movs	r0, #0
    f238:	e7ef      	b.n	f21a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    f23a:	2030      	movs	r0, #48	; 0x30
    f23c:	e7ed      	b.n	f21a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    f23e:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f242:	4288      	cmp	r0, r1
    f244:	d303      	bcc.n	f24e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x52>
    f246:	f640 0148 	movw	r1, #2120	; 0x848
    f24a:	4288      	cmp	r0, r1
    f24c:	d300      	bcc.n	f250 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54>
    f24e:	4608      	mov	r0, r1
    f250:	4770      	bx	lr
    f252:	07c1      	lsls	r1, r0, #31
    f254:	d001      	beq.n	f25a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5e>
    f256:	2001      	movs	r0, #1
    f258:	4770      	bx	lr
    f25a:	0780      	lsls	r0, r0, #30
    f25c:	d501      	bpl.n	f262 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x66>
    f25e:	2002      	movs	r0, #2
    f260:	4770      	bx	lr
    f262:	2000      	movs	r0, #0
    f264:	4770      	bx	lr
    f266:	b510      	push	{r4, lr}
    f268:	2801      	cmp	r0, #1
    f26a:	d006      	beq.n	f27a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
    f26c:	2802      	cmp	r0, #2
    f26e:	d004      	beq.n	f27a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
    f270:	f240 2163 	movw	r1, #611	; 0x263
    f274:	2006      	movs	r0, #6
    f276:	f7f4 fd71 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f27a:	bd10      	pop	{r4, pc}
    f27c:	b510      	push	{r4, lr}
    f27e:	f000 fa03 	bl	f688 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    f282:	b128      	cbz	r0, f290 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x94>
    f284:	f7f7 fafe 	bl	6884 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    f288:	2801      	cmp	r0, #1
    f28a:	d001      	beq.n	f290 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x94>
    f28c:	2000      	movs	r0, #0
    f28e:	bd10      	pop	{r4, pc}
    f290:	2001      	movs	r0, #1
    f292:	bd10      	pop	{r4, pc}
    f294:	b510      	push	{r4, lr}
    f296:	0004      	movs	r4, r0
    f298:	d005      	beq.n	f2a6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
    f29a:	f7fb fe97 	bl	afcc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f29e:	4384      	bics	r4, r0
    f2a0:	d001      	beq.n	f2a6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
    f2a2:	2000      	movs	r0, #0
    f2a4:	bd10      	pop	{r4, pc}
    f2a6:	2001      	movs	r0, #1
    f2a8:	bd10      	pop	{r4, pc}
    f2aa:	28fb      	cmp	r0, #251	; 0xfb
    f2ac:	d803      	bhi.n	f2b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xba>
    f2ae:	f640 0048 	movw	r0, #2120	; 0x848
    f2b2:	4281      	cmp	r1, r0
    f2b4:	d901      	bls.n	f2ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xbe>
    f2b6:	2011      	movs	r0, #17
    f2b8:	4770      	bx	lr
    f2ba:	2000      	movs	r0, #0
    f2bc:	4770      	bx	lr
    f2be:	381b      	subs	r0, #27
    f2c0:	28e1      	cmp	r0, #225	; 0xe1
    f2c2:	d206      	bcs.n	f2d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd6>
    f2c4:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    f2c8:	d303      	bcc.n	f2d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd6>
    f2ca:	f244 2090 	movw	r0, #17040	; 0x4290
    f2ce:	4281      	cmp	r1, r0
    f2d0:	d901      	bls.n	f2d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xda>
    f2d2:	2012      	movs	r0, #18
    f2d4:	4770      	bx	lr
    f2d6:	2000      	movs	r0, #0
    f2d8:	4770      	bx	lr
    f2da:	b510      	push	{r4, lr}
    f2dc:	4604      	mov	r4, r0
    f2de:	7800      	ldrb	r0, [r0, #0]
    f2e0:	2801      	cmp	r0, #1
    f2e2:	d009      	beq.n	f2f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfc>
    f2e4:	f7f8 fcda 	bl	7c9c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    f2e8:	2805      	cmp	r0, #5
    f2ea:	d003      	beq.n	f2f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xf8>
    f2ec:	f7f8 fca0 	bl	7c30 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    f2f0:	2800      	cmp	r0, #0
    f2f2:	d000      	beq.n	f2f6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfa>
    f2f4:	200c      	movs	r0, #12
    f2f6:	bd10      	pop	{r4, pc}
    f2f8:	f7f7 fa52 	bl	67a0 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
    f2fc:	b138      	cbz	r0, f30e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x112>
    f2fe:	f7f7 f8cb 	bl	6498 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    f302:	88a1      	ldrh	r1, [r4, #4]
    f304:	8860      	ldrh	r0, [r4, #2]
    f306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f30a:	f7f8 bc55 	b.w	7bb8 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>
    f30e:	2012      	movs	r0, #18
    f310:	bd10      	pop	{r4, pc}
    f312:	7802      	ldrb	r2, [r0, #0]
    f314:	2a01      	cmp	r2, #1
    f316:	d001      	beq.n	f31c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x120>
    f318:	b1ba      	cbz	r2, f34a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f31a:	e018      	b.n	f34e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f31c:	7842      	ldrb	r2, [r0, #1]
    f31e:	b13a      	cbz	r2, f330 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
    f320:	2a01      	cmp	r2, #1
    f322:	d005      	beq.n	f330 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
    f324:	2a02      	cmp	r2, #2
    f326:	d112      	bne.n	f34e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f328:	b189      	cbz	r1, f34e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f32a:	8881      	ldrh	r1, [r0, #4]
    f32c:	b179      	cbz	r1, f34e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f32e:	e000      	b.n	f332 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x136>
    f330:	b159      	cbz	r1, f34a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f332:	8841      	ldrh	r1, [r0, #2]
    f334:	b149      	cbz	r1, f34a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f336:	8880      	ldrh	r0, [r0, #4]
    f338:	b138      	cbz	r0, f34a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f33a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    f33e:	0049      	lsls	r1, r1, #1
    f340:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    f344:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
    f348:	d201      	bcs.n	f34e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f34a:	2000      	movs	r0, #0
    f34c:	4770      	bx	lr
    f34e:	2012      	movs	r0, #18
    f350:	4770      	bx	lr
    f352:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    f356:	7a45      	ldrb	r5, [r0, #9]
    f358:	4604      	mov	r4, r0
    f35a:	0768      	lsls	r0, r5, #29
    f35c:	d06c      	beq.n	f438 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f35e:	08e8      	lsrs	r0, r5, #3
    f360:	d16a      	bne.n	f438 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f362:	2d02      	cmp	r5, #2
    f364:	d068      	beq.n	f438 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f366:	f7fb fe31 	bl	afcc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f36a:	ea25 0000 	bic.w	r0, r5, r0
    f36e:	0740      	lsls	r0, r0, #29
    f370:	d102      	bne.n	f378 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17c>
    f372:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    f376:	b110      	cbz	r0, f37e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x182>
    f378:	2011      	movs	r0, #17
    f37a:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    f37e:	2d01      	cmp	r5, #1
    f380:	d15a      	bne.n	f438 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f382:	27ff      	movs	r7, #255	; 0xff
    f384:	2101      	movs	r1, #1
    f386:	69a0      	ldr	r0, [r4, #24]
    f388:	f7fb fd5c 	bl	ae44 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1b0>
    f38c:	b3e8      	cbz	r0, f40a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x20e>
    f38e:	46a8      	mov	r8, r5
    f390:	2600      	movs	r6, #0
    f392:	4635      	mov	r5, r6
    f394:	42bd      	cmp	r5, r7
    f396:	d02f      	beq.n	f3f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fc>
    f398:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    f39c:	6988      	ldr	r0, [r1, #24]
    f39e:	68c9      	ldr	r1, [r1, #12]
    f3a0:	4288      	cmp	r0, r1
    f3a2:	d849      	bhi.n	f438 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f3a4:	4406      	add	r6, r0
    f3a6:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    f3aa:	4681      	mov	r9, r0
    f3ac:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
    f3ae:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    f3b2:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    f3b4:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    f3b8:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    f3ba:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    f3bc:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    f3be:	2000      	movs	r0, #0
    f3c0:	f000 f89e 	bl	f500 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
    f3c4:	b308      	cbz	r0, f40a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x20e>
    f3c6:	b1bd      	cbz	r5, f3f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fc>
    f3c8:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
    f3cc:	f8b9 0022 	ldrh.w	r0, [r9, #34]	; 0x22
    f3d0:	4281      	cmp	r1, r0
    f3d2:	d131      	bne.n	f438 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f3d4:	f8b9 102a 	ldrh.w	r1, [r9, #42]	; 0x2a
    f3d8:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
    f3dc:	4281      	cmp	r1, r0
    f3de:	d12b      	bne.n	f438 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f3e0:	f8b9 1030 	ldrh.w	r1, [r9, #48]	; 0x30
    f3e4:	f8b9 002e 	ldrh.w	r0, [r9, #46]	; 0x2e
    f3e8:	4281      	cmp	r1, r0
    f3ea:	d125      	bne.n	f438 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f3ec:	f8b9 1036 	ldrh.w	r1, [r9, #54]	; 0x36
    f3f0:	f8b9 0034 	ldrh.w	r0, [r9, #52]	; 0x34
    f3f4:	4281      	cmp	r1, r0
    f3f6:	d11f      	bne.n	f438 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f3f8:	1c6d      	adds	r5, r5, #1
    f3fa:	b2ed      	uxtb	r5, r5
    f3fc:	4545      	cmp	r5, r8
    f3fe:	d3c9      	bcc.n	f394 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x198>
    f400:	68e0      	ldr	r0, [r4, #12]
    f402:	42b0      	cmp	r0, r6
    f404:	d318      	bcc.n	f438 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f406:	7820      	ldrb	r0, [r4, #0]
    f408:	e000      	b.n	f40c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x210>
    f40a:	e003      	b.n	f414 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x218>
    f40c:	b120      	cbz	r0, f418 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21c>
    f40e:	2801      	cmp	r0, #1
    f410:	d112      	bne.n	f438 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f412:	e004      	b.n	f41e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x222>
    f414:	2030      	movs	r0, #48	; 0x30
    f416:	e7b0      	b.n	f37a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
    f418:	78a0      	ldrb	r0, [r4, #2]
    f41a:	2800      	cmp	r0, #0
    f41c:	d1f7      	bne.n	f40e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x212>
    f41e:	7860      	ldrb	r0, [r4, #1]
    f420:	b128      	cbz	r0, f42e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
    f422:	2801      	cmp	r0, #1
    f424:	d003      	beq.n	f42e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
    f426:	2802      	cmp	r0, #2
    f428:	d001      	beq.n	f42e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
    f42a:	2803      	cmp	r0, #3
    f42c:	d104      	bne.n	f438 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f42e:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    f432:	b108      	cbz	r0, f438 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f434:	2807      	cmp	r0, #7
    f436:	d901      	bls.n	f43c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x240>
    f438:	2012      	movs	r0, #18
    f43a:	e79e      	b.n	f37a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
    f43c:	2000      	movs	r0, #0
    f43e:	e79c      	b.n	f37a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
    f440:	b570      	push	{r4, r5, r6, lr}
    f442:	4604      	mov	r4, r0
    f444:	7800      	ldrb	r0, [r0, #0]
    f446:	2500      	movs	r5, #0
    f448:	2801      	cmp	r0, #1
    f44a:	d004      	beq.n	f456 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
    f44c:	b118      	cbz	r0, f456 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
    f44e:	2802      	cmp	r0, #2
    f450:	d001      	beq.n	f456 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
    f452:	2803      	cmp	r0, #3
    f454:	d139      	bne.n	f4ca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    f456:	7860      	ldrb	r0, [r4, #1]
    f458:	b128      	cbz	r0, f466 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
    f45a:	2801      	cmp	r0, #1
    f45c:	d003      	beq.n	f466 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
    f45e:	2802      	cmp	r0, #2
    f460:	d001      	beq.n	f466 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
    f462:	2803      	cmp	r0, #3
    f464:	d131      	bne.n	f4ca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    f466:	7e60      	ldrb	r0, [r4, #25]
    f468:	b948      	cbnz	r0, f47e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x282>
    f46a:	78a0      	ldrb	r0, [r4, #2]
    f46c:	2801      	cmp	r0, #1
    f46e:	d12c      	bne.n	f4ca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    f470:	f7fb fdac 	bl	afcc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f474:	4601      	mov	r1, r0
    f476:	78a0      	ldrb	r0, [r4, #2]
    f478:	ea30 0101 	bics.w	r1, r0, r1
    f47c:	d001      	beq.n	f482 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x286>
    f47e:	2011      	movs	r0, #17
    f480:	bd70      	pop	{r4, r5, r6, pc}
    f482:	07c0      	lsls	r0, r0, #31
    f484:	d006      	beq.n	f494 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x298>
    f486:	78e0      	ldrb	r0, [r4, #3]
    f488:	2301      	movs	r3, #1
    f48a:	6922      	ldr	r2, [r4, #16]
    f48c:	68a1      	ldr	r1, [r4, #8]
    f48e:	f000 f820 	bl	f4d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
    f492:	4605      	mov	r5, r0
    f494:	78a0      	ldrb	r0, [r4, #2]
    f496:	0780      	lsls	r0, r0, #30
    f498:	d506      	bpl.n	f4a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ac>
    f49a:	78e0      	ldrb	r0, [r4, #3]
    f49c:	2302      	movs	r3, #2
    f49e:	6922      	ldr	r2, [r4, #16]
    f4a0:	68a1      	ldr	r1, [r4, #8]
    f4a2:	f000 f816 	bl	f4d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
    f4a6:	4305      	orrs	r5, r0
    f4a8:	78a0      	ldrb	r0, [r4, #2]
    f4aa:	0740      	lsls	r0, r0, #29
    f4ac:	d506      	bpl.n	f4bc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c0>
    f4ae:	78e0      	ldrb	r0, [r4, #3]
    f4b0:	2304      	movs	r3, #4
    f4b2:	6922      	ldr	r2, [r4, #16]
    f4b4:	68a1      	ldr	r1, [r4, #8]
    f4b6:	f000 f80c 	bl	f4d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
    f4ba:	4305      	orrs	r5, r0
    f4bc:	b10d      	cbz	r5, f4c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c6>
    f4be:	4628      	mov	r0, r5
    f4c0:	bd70      	pop	{r4, r5, r6, pc}
    f4c2:	7e20      	ldrb	r0, [r4, #24]
    f4c4:	b108      	cbz	r0, f4ca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    f4c6:	2807      	cmp	r0, #7
    f4c8:	d901      	bls.n	f4ce <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d2>
    f4ca:	2012      	movs	r0, #18
    f4cc:	bd70      	pop	{r4, r5, r6, pc}
    f4ce:	2000      	movs	r0, #0
    f4d0:	bd70      	pop	{r4, r5, r6, pc}
    f4d2:	b570      	push	{r4, r5, r6, lr}
    f4d4:	4614      	mov	r4, r2
    f4d6:	460d      	mov	r5, r1
    f4d8:	b108      	cbz	r0, f4de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e2>
    f4da:	2801      	cmp	r0, #1
    f4dc:	d10a      	bne.n	f4f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f8>
    f4de:	4619      	mov	r1, r3
    f4e0:	4610      	mov	r0, r2
    f4e2:	f7fb fcaf 	bl	ae44 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1b0>
    f4e6:	b138      	cbz	r0, f4f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2fc>
    f4e8:	4628      	mov	r0, r5
    f4ea:	f7fb fc73 	bl	add4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x140>
    f4ee:	b118      	cbz	r0, f4f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2fc>
    f4f0:	42ac      	cmp	r4, r5
    f4f2:	d903      	bls.n	f4fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x300>
    f4f4:	2012      	movs	r0, #18
    f4f6:	bd70      	pop	{r4, r5, r6, pc}
    f4f8:	2030      	movs	r0, #48	; 0x30
    f4fa:	bd70      	pop	{r4, r5, r6, pc}
    f4fc:	2000      	movs	r0, #0
    f4fe:	bd70      	pop	{r4, r5, r6, pc}
    f500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f504:	461d      	mov	r5, r3
    f506:	4610      	mov	r0, r2
    f508:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    f50c:	1f8b      	subs	r3, r1, #6
    f50e:	f640 427a 	movw	r2, #3194	; 0xc7a
    f512:	9e08      	ldr	r6, [sp, #32]
    f514:	4293      	cmp	r3, r2
    f516:	d81c      	bhi.n	f552 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f518:	1f83      	subs	r3, r0, #6
    f51a:	4293      	cmp	r3, r2
    f51c:	d819      	bhi.n	f552 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f51e:	4281      	cmp	r1, r0
    f520:	d817      	bhi.n	f552 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f522:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    f526:	d214      	bcs.n	f552 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f528:	f1a4 010a 	sub.w	r1, r4, #10
    f52c:	1f12      	subs	r2, r2, #4
    f52e:	4291      	cmp	r1, r2
    f530:	d80f      	bhi.n	f552 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f532:	f7fe fa28 	bl	d986 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    f536:	1c6d      	adds	r5, r5, #1
    f538:	4368      	muls	r0, r5
    f53a:	f240 2171 	movw	r1, #625	; 0x271
    f53e:	0040      	lsls	r0, r0, #1
    f540:	434c      	muls	r4, r1
    f542:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    f546:	d204      	bcs.n	f552 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f548:	42b7      	cmp	r7, r6
    f54a:	d802      	bhi.n	f552 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f54c:	2001      	movs	r0, #1
    f54e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f552:	2000      	movs	r0, #0
    f554:	e7fb      	b.n	f54e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x352>
    f556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f55a:	4606      	mov	r6, r0
    f55c:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    f560:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    f564:	4615      	mov	r5, r2
    f566:	302c      	adds	r0, #44	; 0x2c
    f568:	f7f8 fb12 	bl	7b90 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>
    f56c:	4680      	mov	r8, r0
    f56e:	2102      	movs	r1, #2
    f570:	f7fe fac8 	bl	db04 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f574:	4287      	cmp	r7, r0
    f576:	d200      	bcs.n	f57a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
    f578:	4638      	mov	r0, r7
    f57a:	4607      	mov	r7, r0
    f57c:	2102      	movs	r1, #2
    f57e:	4640      	mov	r0, r8
    f580:	f7fe fac0 	bl	db04 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f584:	4284      	cmp	r4, r0
    f586:	d200      	bcs.n	f58a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x38e>
    f588:	4620      	mov	r0, r4
    f58a:	8831      	ldrh	r1, [r6, #0]
    f58c:	8029      	strh	r1, [r5, #0]
    f58e:	2f1b      	cmp	r7, #27
    f590:	d913      	bls.n	f5ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3be>
    f592:	2ffb      	cmp	r7, #251	; 0xfb
    f594:	d300      	bcc.n	f598 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x39c>
    f596:	27fb      	movs	r7, #251	; 0xfb
    f598:	806f      	strh	r7, [r5, #2]
    f59a:	281b      	cmp	r0, #27
    f59c:	d90f      	bls.n	f5be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c2>
    f59e:	28fb      	cmp	r0, #251	; 0xfb
    f5a0:	d300      	bcc.n	f5a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
    f5a2:	20fb      	movs	r0, #251	; 0xfb
    f5a4:	80e8      	strh	r0, [r5, #6]
    f5a6:	4640      	mov	r0, r8
    f5a8:	f7ff fe49 	bl	f23e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
    f5ac:	80a8      	strh	r0, [r5, #4]
    f5ae:	4640      	mov	r0, r8
    f5b0:	f7ff fe45 	bl	f23e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
    f5b4:	8128      	strh	r0, [r5, #8]
    f5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f5ba:	271b      	movs	r7, #27
    f5bc:	e7ec      	b.n	f598 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x39c>
    f5be:	201b      	movs	r0, #27
    f5c0:	e7f0      	b.n	f5a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
    f5c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f5c6:	7890      	ldrb	r0, [r2, #2]
    f5c8:	9e06      	ldr	r6, [sp, #24]
    f5ca:	461d      	mov	r5, r3
    f5cc:	4614      	mov	r4, r2
    f5ce:	b908      	cbnz	r0, f5d4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d8>
    f5d0:	f7fb fcfc 	bl	afcc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f5d4:	78e4      	ldrb	r4, [r4, #3]
    f5d6:	4607      	mov	r7, r0
    f5d8:	b914      	cbnz	r4, f5e0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e4>
    f5da:	f7fb fcf7 	bl	afcc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f5de:	4604      	mov	r4, r0
    f5e0:	b16f      	cbz	r7, f5fe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
    f5e2:	b164      	cbz	r4, f5fe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
    f5e4:	4638      	mov	r0, r7
    f5e6:	f7ff fe34 	bl	f252 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    f5ea:	4620      	mov	r0, r4
    f5ec:	f7ff fe31 	bl	f252 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    f5f0:	b12f      	cbz	r7, f5fe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
    f5f2:	b124      	cbz	r4, f5fe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
    f5f4:	702f      	strb	r7, [r5, #0]
    f5f6:	7034      	strb	r4, [r6, #0]
    f5f8:	2000      	movs	r0, #0
    f5fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f5fe:	2009      	movs	r0, #9
    f600:	e7fb      	b.n	f5fa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3fe>
    f602:	b510      	push	{r4, lr}
    f604:	f7fc ff4c 	bl	c4a0 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    f608:	b928      	cbnz	r0, f616 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41a>
    f60a:	f7fc ff7f 	bl	c50c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    f60e:	b910      	cbnz	r0, f616 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41a>
    f610:	f7fc ff86 	bl	c520 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    f614:	b108      	cbz	r0, f61a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41e>
    f616:	2008      	movs	r0, #8
    f618:	bd10      	pop	{r4, pc}
    f61a:	f7fc ff16 	bl	c44a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    f61e:	b940      	cbnz	r0, f632 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x436>
    f620:	f7fc ff1d 	bl	c45e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    f624:	b928      	cbnz	r0, f632 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x436>
    f626:	f7fc ff31 	bl	c48c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    f62a:	b910      	cbnz	r0, f632 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x436>
    f62c:	f7fc ff42 	bl	c4b4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    f630:	b108      	cbz	r0, f636 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x43a>
    f632:	2004      	movs	r0, #4
    f634:	bd10      	pop	{r4, pc}
    f636:	f240 519c 	movw	r1, #1436	; 0x59c
    f63a:	2039      	movs	r0, #57	; 0x39
    f63c:	f7f4 fb8e 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f640:	b510      	push	{r4, lr}
    f642:	f7fb fcbd 	bl	afc0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f646:	f3c0 1040 	ubfx	r0, r0, #5, #1
    f64a:	bd10      	pop	{r4, pc}
    f64c:	6840      	ldr	r0, [r0, #4]
    f64e:	f000 b800 	b.w	f652 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
    f652:	b508      	push	{r3, lr}
    f654:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    f658:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
    f65c:	f88d 0000 	strb.w	r0, [sp]
    f660:	9800      	ldr	r0, [sp, #0]
    f662:	9000      	str	r0, [sp, #0]
    f664:	f89d 0000 	ldrb.w	r0, [sp]
    f668:	1e40      	subs	r0, r0, #1
    f66a:	4208      	tst	r0, r1
    f66c:	d003      	beq.n	f676 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47a>
    f66e:	2904      	cmp	r1, #4
    f670:	d001      	beq.n	f676 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47a>
    f672:	2001      	movs	r0, #1
    f674:	bd08      	pop	{r3, pc}
    f676:	2000      	movs	r0, #0
    f678:	bd08      	pop	{r3, pc}
    f67a:	b510      	push	{r4, lr}
    f67c:	f000 f804 	bl	f688 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    f680:	2800      	cmp	r0, #0
    f682:	d000      	beq.n	f686 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48a>
    f684:	2001      	movs	r0, #1
    f686:	bd10      	pop	{r4, pc}
    f688:	b510      	push	{r4, lr}
    f68a:	f7f8 fb07 	bl	7c9c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    f68e:	2804      	cmp	r0, #4
    f690:	d003      	beq.n	f69a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x49e>
    f692:	2805      	cmp	r0, #5
    f694:	d001      	beq.n	f69a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x49e>
    f696:	2000      	movs	r0, #0
    f698:	bd10      	pop	{r4, pc}
    f69a:	2001      	movs	r0, #1
    f69c:	bd10      	pop	{r4, pc}
    f69e:	b5f0      	push	{r4, r5, r6, r7, lr}
    f6a0:	b089      	sub	sp, #36	; 0x24
    f6a2:	4604      	mov	r4, r0
    f6a4:	8800      	ldrh	r0, [r0, #0]
    f6a6:	a906      	add	r1, sp, #24
    f6a8:	f7fe f961 	bl	d96e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f6ac:	2800      	cmp	r0, #0
    f6ae:	d143      	bne.n	f738 <__kernel_ram_size+0x20>
    f6b0:	9807      	ldr	r0, [sp, #28]
    f6b2:	2601      	movs	r6, #1
    f6b4:	f890 119e 	ldrb.w	r1, [r0, #414]	; 0x19e
    f6b8:	f88d 1008 	strb.w	r1, [sp, #8]
    f6bc:	9902      	ldr	r1, [sp, #8]
    f6be:	9102      	str	r1, [sp, #8]
    f6c0:	f89d 1008 	ldrb.w	r1, [sp, #8]
    f6c4:	f88d 100c 	strb.w	r1, [sp, #12]
    f6c8:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    f6cc:	3078      	adds	r0, #120	; 0x78
    f6ce:	291d      	cmp	r1, #29
    f6d0:	d102      	bne.n	f6d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4dc>
    f6d2:	f89d 100c 	ldrb.w	r1, [sp, #12]
    f6d6:	b141      	cbz	r1, f6ea <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ee>
    f6d8:	2100      	movs	r1, #0
    f6da:	f88d 1004 	strb.w	r1, [sp, #4]
    f6de:	2105      	movs	r1, #5
    f6e0:	304e      	adds	r0, #78	; 0x4e
    f6e2:	f7ff f9e2 	bl	eaaa <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    f6e6:	b110      	cbz	r0, f6ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f2>
    f6e8:	e004      	b.n	f6f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f8>
    f6ea:	2101      	movs	r1, #1
    f6ec:	e7f5      	b.n	f6da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4de>
    f6ee:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f6f2:	b300      	cbz	r0, f736 <__kernel_ram_size+0x1e>
    f6f4:	8921      	ldrh	r1, [r4, #8]
    f6f6:	88e0      	ldrh	r0, [r4, #6]
    f6f8:	f7ff fde1 	bl	f2be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    f6fc:	2800      	cmp	r0, #0
    f6fe:	d11b      	bne.n	f738 <__kernel_ram_size+0x20>
    f700:	88a1      	ldrh	r1, [r4, #4]
    f702:	8860      	ldrh	r0, [r4, #2]
    f704:	f7ff fddb 	bl	f2be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    f708:	2800      	cmp	r0, #0
    f70a:	d115      	bne.n	f738 <__kernel_ram_size+0x20>
    f70c:	8921      	ldrh	r1, [r4, #8]
    f70e:	88e0      	ldrh	r0, [r4, #6]
    f710:	f7ff fdcb 	bl	f2aa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
    f714:	2800      	cmp	r0, #0
    f716:	d10f      	bne.n	f738 <__kernel_ram_size+0x20>
    f718:	88a1      	ldrh	r1, [r4, #4]
    f71a:	8860      	ldrh	r0, [r4, #2]
    f71c:	f7ff fdc5 	bl	f2aa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
    f720:	0007      	movs	r7, r0
    f722:	d109      	bne.n	f738 <__kernel_ram_size+0x20>
    f724:	9807      	ldr	r0, [sp, #28]
    f726:	f500 7599 	add.w	r5, r0, #306	; 0x132
    f72a:	706e      	strb	r6, [r5, #1]
    f72c:	f89d 100c 	ldrb.w	r1, [sp, #12]
    f730:	b121      	cbz	r1, f73c <__kernel_ram_size+0x24>
    f732:	273a      	movs	r7, #58	; 0x3a
    f734:	e02d      	b.n	f792 <__kernel_ram_size+0x7a>
    f736:	201a      	movs	r0, #26
    f738:	b009      	add	sp, #36	; 0x24
    f73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f73c:	4631      	mov	r1, r6
    f73e:	aa03      	add	r2, sp, #12
    f740:	f7ff ff09 	bl	f556 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    f744:	8861      	ldrh	r1, [r4, #2]
    f746:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    f74a:	4281      	cmp	r1, r0
    f74c:	d200      	bcs.n	f750 <__kernel_ram_size+0x38>
    f74e:	4608      	mov	r0, r1
    f750:	80e8      	strh	r0, [r5, #6]
    f752:	88a1      	ldrh	r1, [r4, #4]
    f754:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    f758:	4281      	cmp	r1, r0
    f75a:	d200      	bcs.n	f75e <__kernel_ram_size+0x46>
    f75c:	4608      	mov	r0, r1
    f75e:	8128      	strh	r0, [r5, #8]
    f760:	88e2      	ldrh	r2, [r4, #6]
    f762:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    f766:	428a      	cmp	r2, r1
    f768:	d200      	bcs.n	f76c <__kernel_ram_size+0x54>
    f76a:	4611      	mov	r1, r2
    f76c:	8069      	strh	r1, [r5, #2]
    f76e:	8922      	ldrh	r2, [r4, #8]
    f770:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    f774:	428a      	cmp	r2, r1
    f776:	d200      	bcs.n	f77a <__kernel_ram_size+0x62>
    f778:	4611      	mov	r1, r2
    f77a:	f640 0248 	movw	r2, #2120	; 0x848
    f77e:	80a9      	strh	r1, [r5, #4]
    f780:	4291      	cmp	r1, r2
    f782:	d300      	bcc.n	f786 <__kernel_ram_size+0x6e>
    f784:	4611      	mov	r1, r2
    f786:	80a9      	strh	r1, [r5, #4]
    f788:	4290      	cmp	r0, r2
    f78a:	d200      	bcs.n	f78e <__kernel_ram_size+0x76>
    f78c:	4602      	mov	r2, r0
    f78e:	812a      	strh	r2, [r5, #8]
    f790:	702e      	strb	r6, [r5, #0]
    f792:	2000      	movs	r0, #0
    f794:	7068      	strb	r0, [r5, #1]
    f796:	4638      	mov	r0, r7
    f798:	e7ce      	b.n	f738 <__kernel_ram_size+0x20>
    f79a:	b530      	push	{r4, r5, lr}
    f79c:	f340 0400 	sbfx	r4, r0, #0, #1
    f7a0:	f340 0040 	sbfx	r0, r0, #1, #1
    f7a4:	1c40      	adds	r0, r0, #1
    f7a6:	9d03      	ldr	r5, [sp, #12]
    f7a8:	1c64      	adds	r4, r4, #1
    f7aa:	d000      	beq.n	f7ae <__kernel_ram_size+0x96>
    f7ac:	b119      	cbz	r1, f7b6 <__kernel_ram_size+0x9e>
    f7ae:	b100      	cbz	r0, f7b2 <__kernel_ram_size+0x9a>
    f7b0:	b10a      	cbz	r2, f7b6 <__kernel_ram_size+0x9e>
    f7b2:	b91c      	cbnz	r4, f7bc <__kernel_ram_size+0xa4>
    f7b4:	e001      	b.n	f7ba <__kernel_ram_size+0xa2>
    f7b6:	2011      	movs	r0, #17
    f7b8:	bd30      	pop	{r4, r5, pc}
    f7ba:	2100      	movs	r1, #0
    f7bc:	7019      	strb	r1, [r3, #0]
    f7be:	b900      	cbnz	r0, f7c2 <__kernel_ram_size+0xaa>
    f7c0:	2200      	movs	r2, #0
    f7c2:	702a      	strb	r2, [r5, #0]
    f7c4:	2000      	movs	r0, #0
    f7c6:	bd30      	pop	{r4, r5, pc}
    f7c8:	b510      	push	{r4, lr}
    f7ca:	f7ff ff5d 	bl	f688 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    f7ce:	b120      	cbz	r0, f7da <__kernel_ram_size+0xc2>
    f7d0:	f7f7 f860 	bl	6894 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
    f7d4:	b108      	cbz	r0, f7da <__kernel_ram_size+0xc2>
    f7d6:	2001      	movs	r0, #1
    f7d8:	bd10      	pop	{r4, pc}
    f7da:	2000      	movs	r0, #0
    f7dc:	bd10      	pop	{r4, pc}

0000f7de <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
    f7de:	6802      	ldr	r2, [r0, #0]
    f7e0:	b912      	cbnz	r2, f7e8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
    f7e2:	6001      	str	r1, [r0, #0]
    f7e4:	4770      	bx	lr
    f7e6:	4602      	mov	r2, r0
    f7e8:	6850      	ldr	r0, [r2, #4]
    f7ea:	b108      	cbz	r0, f7f0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
    f7ec:	428a      	cmp	r2, r1
    f7ee:	d1fa      	bne.n	f7e6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
    f7f0:	428a      	cmp	r2, r1
    f7f2:	d0f7      	beq.n	f7e4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
    f7f4:	6051      	str	r1, [r2, #4]
    f7f6:	4770      	bx	lr
    f7f8:	b510      	push	{r4, lr}
    f7fa:	4604      	mov	r4, r0
    f7fc:	e002      	b.n	f804 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
    f7fe:	6820      	ldr	r0, [r4, #0]
    f800:	4780      	blx	r0
    f802:	6864      	ldr	r4, [r4, #4]
    f804:	2c00      	cmp	r4, #0
    f806:	d1fa      	bne.n	f7fe <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x20>
    f808:	bd10      	pop	{r4, pc}
    f80a:	b510      	push	{r4, lr}
    f80c:	2000      	movs	r0, #0
    f80e:	f7f4 fc6d 	bl	40ec <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    f812:	f7f4 fe8d 	bl	4530 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
    f816:	f7f5 f8d5 	bl	49c4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
    f81a:	f7f5 fabd 	bl	4d98 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    f81e:	2800      	cmp	r0, #0
    f820:	d003      	beq.n	f82a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4c>
    f822:	21b8      	movs	r1, #184	; 0xb8
    f824:	2001      	movs	r0, #1
    f826:	f7f4 fa99 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f82a:	bd10      	pop	{r4, pc}
    f82c:	b510      	push	{r4, lr}
    f82e:	f000 f80a 	bl	f846 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
    f832:	f7ff f823 	bl	e87c <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>
    f836:	2800      	cmp	r0, #0
    f838:	d004      	beq.n	f844 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x66>
    f83a:	f240 1135 	movw	r1, #309	; 0x135
    f83e:	2001      	movs	r0, #1
    f840:	f7f4 fa8c 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f844:	bd10      	pop	{r4, pc}
    f846:	b510      	push	{r4, lr}
    f848:	f7f8 f944 	bl	7ad4 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
    f84c:	b120      	cbz	r0, f858 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x7a>
    f84e:	f240 111d 	movw	r1, #285	; 0x11d
    f852:	2001      	movs	r0, #1
    f854:	f7f4 fa82 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f858:	f7f6 ff6c 	bl	6734 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    f85c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f860:	f7fa bee6 	b.w	a630 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
    f864:	000b0001 	.word	0x000b0001
    f868:	000a0002 	.word	0x000a0002
    f86c:	00090005 	.word	0x00090005
    f870:	0008000a 	.word	0x0008000a
    f874:	00070014 	.word	0x00070014
    f878:	0006001e 	.word	0x0006001e
    f87c:	00050032 	.word	0x00050032
    f880:	0004004b 	.word	0x0004004b
    f884:	00030064 	.word	0x00030064
    f888:	00020096 	.word	0x00020096
    f88c:	000100fa 	.word	0x000100fa
    f890:	000001f4 	.word	0x000001f4

0000f894 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    f894:	b510      	push	{r4, lr}
    f896:	f7fb ff51 	bl	b73c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    f89a:	f000 f850 	bl	f93e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    f89e:	f7fb fc09 	bl	b0b4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    f8a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f8a6:	f7fb bd07 	b.w	b2b8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000f8aa <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    f8aa:	b510      	push	{r4, lr}
    f8ac:	24c8      	movs	r4, #200	; 0xc8
    f8ae:	1e64      	subs	r4, r4, #1
    f8b0:	b2e4      	uxtb	r4, r4
    f8b2:	f7fb fc1d 	bl	b0f0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    f8b6:	2802      	cmp	r0, #2
    f8b8:	d003      	beq.n	f8c2 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    f8ba:	2801      	cmp	r0, #1
    f8bc:	d000      	beq.n	f8c0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    f8be:	2000      	movs	r0, #0
    f8c0:	bd10      	pop	{r4, pc}
    f8c2:	2c00      	cmp	r4, #0
    f8c4:	d1f3      	bne.n	f8ae <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    f8c6:	2193      	movs	r1, #147	; 0x93
    f8c8:	203b      	movs	r0, #59	; 0x3b
    f8ca:	f7f4 fa47 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f8ce <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
    f8ce:	b510      	push	{r4, lr}
    f8d0:	f7f4 f8da 	bl	3a88 <mpsl_fem_lna_configuration_clear>
    f8d4:	2800      	cmp	r0, #0
    f8d6:	d005      	beq.n	f8e4 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    f8d8:	1c40      	adds	r0, r0, #1
    f8da:	d003      	beq.n	f8e4 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    f8dc:	2150      	movs	r1, #80	; 0x50
    f8de:	2040      	movs	r0, #64	; 0x40
    f8e0:	f7f4 fa3c 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8e4:	bd10      	pop	{r4, pc}

0000f8e6 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
    f8e6:	b510      	push	{r4, lr}
    f8e8:	f7f4 f8da 	bl	3aa0 <mpsl_fem_pa_configuration_clear>
    f8ec:	2800      	cmp	r0, #0
    f8ee:	d005      	beq.n	f8fc <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f8f0:	1c40      	adds	r0, r0, #1
    f8f2:	d003      	beq.n	f8fc <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f8f4:	2149      	movs	r1, #73	; 0x49
    f8f6:	2040      	movs	r0, #64	; 0x40
    f8f8:	f7f4 fa30 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8fc:	bd10      	pop	{r4, pc}

0000f8fe <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
    f8fe:	b510      	push	{r4, lr}
    f900:	f7f4 f8bc 	bl	3a7c <mpsl_fem_disable>
    f904:	2800      	cmp	r0, #0
    f906:	d005      	beq.n	f914 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    f908:	1c40      	adds	r0, r0, #1
    f90a:	d003      	beq.n	f914 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    f90c:	2157      	movs	r1, #87	; 0x57
    f90e:	2040      	movs	r0, #64	; 0x40
    f910:	f7f4 fa24 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f914:	bd10      	pop	{r4, pc}

0000f916 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
    f916:	b510      	push	{r4, lr}
    f918:	2100      	movs	r1, #0
    f91a:	4608      	mov	r0, r1
    f91c:	f7f4 f8ba 	bl	3a94 <mpsl_fem_lna_configuration_set>
    f920:	b108      	cbz	r0, f926 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
    f922:	2000      	movs	r0, #0
    f924:	bd10      	pop	{r4, pc}
    f926:	2001      	movs	r0, #1
    f928:	bd10      	pop	{r4, pc}

0000f92a <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
    f92a:	b508      	push	{r3, lr}
    f92c:	4668      	mov	r0, sp
    f92e:	f7f4 f8c3 	bl	3ab8 <mpsl_fem_pa_is_configured>
    f932:	f89d 0000 	ldrb.w	r0, [sp]
    f936:	2800      	cmp	r0, #0
    f938:	d000      	beq.n	f93c <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
    f93a:	2001      	movs	r0, #1
    f93c:	bd08      	pop	{r3, pc}

0000f93e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    f93e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    f942:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    f946:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    f94a:	f3bf 8f4f 	dsb	sy
    f94e:	f3bf 8f6f 	isb	sy
    f952:	f7fb bd8b 	b.w	b46c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    f956:	2800      	cmp	r0, #0
    f958:	db09      	blt.n	f96e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    f95a:	f000 021f 	and.w	r2, r0, #31
    f95e:	2101      	movs	r1, #1
    f960:	4091      	lsls	r1, r2
    f962:	0940      	lsrs	r0, r0, #5
    f964:	0080      	lsls	r0, r0, #2
    f966:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f96a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    f96e:	4770      	bx	lr
    f970:	2800      	cmp	r0, #0
    f972:	db0d      	blt.n	f990 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    f974:	f000 021f 	and.w	r2, r0, #31
    f978:	2101      	movs	r1, #1
    f97a:	4091      	lsls	r1, r2
    f97c:	0940      	lsrs	r0, r0, #5
    f97e:	0080      	lsls	r0, r0, #2
    f980:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f984:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    f988:	f3bf 8f4f 	dsb	sy
    f98c:	f3bf 8f6f 	isb	sy
    f990:	4770      	bx	lr

0000f992 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    f992:	b510      	push	{r4, lr}
    f994:	2801      	cmp	r0, #1
    f996:	d006      	beq.n	f9a6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
    f998:	2802      	cmp	r0, #2
    f99a:	d006      	beq.n	f9aa <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
    f99c:	f640 3141 	movw	r1, #2881	; 0xb41
    f9a0:	203e      	movs	r0, #62	; 0x3e
    f9a2:	f7f4 f9db 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9a6:	2028      	movs	r0, #40	; 0x28
    f9a8:	bd10      	pop	{r4, pc}
    f9aa:	2018      	movs	r0, #24
    f9ac:	bd10      	pop	{r4, pc}

0000f9ae <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    f9ae:	b510      	push	{r4, lr}
    f9b0:	2801      	cmp	r0, #1
    f9b2:	d006      	beq.n	f9c2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
    f9b4:	2802      	cmp	r0, #2
    f9b6:	d007      	beq.n	f9c8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
    f9b8:	f640 3155 	movw	r1, #2901	; 0xb55
    f9bc:	203e      	movs	r0, #62	; 0x3e
    f9be:	f7f4 f9cd 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9c2:	f641 6014 	movw	r0, #7700	; 0x1e14
    f9c6:	bd10      	pop	{r4, pc}
    f9c8:	f241 1030 	movw	r0, #4400	; 0x1130
    f9cc:	bd10      	pop	{r4, pc}

0000f9ce <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    f9ce:	f7fc bbff 	b.w	c1d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    f9d2:	b510      	push	{r4, lr}
    f9d4:	460a      	mov	r2, r1
    f9d6:	b130      	cbz	r0, f9e6 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
    f9d8:	2801      	cmp	r0, #1
    f9da:	d00b      	beq.n	f9f4 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
    f9dc:	f240 6114 	movw	r1, #1556	; 0x614
    f9e0:	203e      	movs	r0, #62	; 0x3e
    f9e2:	f7f4 f9bb 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f9ea:	f102 0128 	add.w	r1, r2, #40	; 0x28
    f9ee:	4610      	mov	r0, r2
    f9f0:	f7fb bbd2 	b.w	b198 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    f9f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f9f8:	f102 0129 	add.w	r1, r2, #41	; 0x29
    f9fc:	4610      	mov	r0, r2
    f9fe:	f7fb bbb5 	b.w	b16c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>
    fa02:	5840      	ldr	r0, [r0, r1]
    fa04:	2800      	cmp	r0, #0
    fa06:	d000      	beq.n	fa0a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3c>
    fa08:	2001      	movs	r0, #1
    fa0a:	4770      	bx	lr
    fa0c:	5840      	ldr	r0, [r0, r1]
    fa0e:	2800      	cmp	r0, #0
    fa10:	d000      	beq.n	fa14 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x46>
    fa12:	2001      	movs	r0, #1
    fa14:	4770      	bx	lr

0000fa16 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    fa16:	b570      	push	{r4, r5, r6, lr}
    fa18:	4605      	mov	r5, r0
    fa1a:	4614      	mov	r4, r2
    fa1c:	4608      	mov	r0, r1
    fa1e:	f7ff ffc6 	bl	f9ae <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fa22:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    fa26:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    fa2a:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
    fa2e:	4620      	mov	r0, r4
    fa30:	f7ff ffbd 	bl	f9ae <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fa34:	4428      	add	r0, r5
    fa36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fa3a:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    fa3e:	fbb0 f5f1 	udiv	r5, r0, r1
    fa42:	4620      	mov	r0, r4
    fa44:	f7ff ffa5 	bl	f992 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    fa48:	4428      	add	r0, r5
    fa4a:	1d40      	adds	r0, r0, #5
    fa4c:	bd70      	pop	{r4, r5, r6, pc}

0000fa4e <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    fa4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fa52:	4607      	mov	r7, r0
    fa54:	461d      	mov	r5, r3
    fa56:	460e      	mov	r6, r1
    fa58:	4614      	mov	r4, r2
    fa5a:	4610      	mov	r0, r2
    fa5c:	f7ff ffa7 	bl	f9ae <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fa60:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    fa64:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
    fa68:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    fa6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    fa70:	2e02      	cmp	r6, #2
    fa72:	d00e      	beq.n	fa92 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
    fa74:	f240 52dc 	movw	r2, #1500	; 0x5dc
    fa78:	4411      	add	r1, r2
    fa7a:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
    fa7e:	fbb1 f6f0 	udiv	r6, r1, r0
    fa82:	4620      	mov	r0, r4
    fa84:	f7ff ff85 	bl	f992 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    fa88:	4430      	add	r0, r6
    fa8a:	4428      	add	r0, r5
    fa8c:	1d40      	adds	r0, r0, #5
    fa8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fa92:	4602      	mov	r2, r0
    fa94:	e7f0      	b.n	fa78 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

0000fa96 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    fa96:	b510      	push	{r4, lr}
    fa98:	4604      	mov	r4, r0
    fa9a:	4608      	mov	r0, r1
    fa9c:	f7ff ff87 	bl	f9ae <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    faa0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    faa4:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    faa8:	fbb0 f0f1 	udiv	r0, r0, r1
    faac:	1a20      	subs	r0, r4, r0
    faae:	1e80      	subs	r0, r0, #2
    fab0:	bd10      	pop	{r4, pc}

0000fab2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    fab2:	b510      	push	{r4, lr}
    fab4:	4604      	mov	r4, r0
    fab6:	4608      	mov	r0, r1
    fab8:	f7ff ff79 	bl	f9ae <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fabc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fac0:	fbb0 f0f1 	udiv	r0, r0, r1
    fac4:	1a20      	subs	r0, r4, r0
    fac6:	bd10      	pop	{r4, pc}

0000fac8 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    fac8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    facc:	2902      	cmp	r1, #2
    face:	d008      	beq.n	fae2 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
    fad0:	f240 51dc 	movw	r1, #1500	; 0x5dc
    fad4:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    fad8:	fbb1 f1f2 	udiv	r1, r1, r2
    fadc:	4408      	add	r0, r1
    fade:	1e80      	subs	r0, r0, #2
    fae0:	4770      	bx	lr
    fae2:	4611      	mov	r1, r2
    fae4:	e7f6      	b.n	fad4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0000fae6 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    fae6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    faea:	2902      	cmp	r1, #2
    faec:	d007      	beq.n	fafe <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
    faee:	f240 51dc 	movw	r1, #1500	; 0x5dc
    faf2:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    faf6:	fbb1 f1f2 	udiv	r1, r1, r2
    fafa:	4408      	add	r0, r1
    fafc:	4770      	bx	lr
    fafe:	4611      	mov	r1, r2
    fb00:	e7f7      	b.n	faf2 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
    fb02:	080c      	.short	0x080c
    fb04:	010d1702 	.word	0x010d1702
    fb08:	09090201 	.word	0x09090201
    fb0c:	02060101 	.word	0x02060101
    fb10:	03181809 	.word	0x03181809
    fb14:	09090101 	.word	0x09090101
    fb18:	0303      	.short	0x0303
    fb1a:	05          	.byte	0x05
    fb1b:	55          	.byte	0x55
    fb1c:	26255555 	.word	0x26255555
    fb20:	27          	.byte	0x27
    fb21:	01          	.byte	0x01
    fb22:	0103      	.short	0x0103
    fb24:	01          	.byte	0x01
    fb25:	01          	.byte	0x01
	...

0000fb28 <scan_filter_match>:

//Callback function for a matching name
void scan_filter_match(struct bt_scan_device_info *device_info,
		       struct bt_scan_filter_match *filter_match,
		       bool connectable)
{
    fb28:	b510      	push	{r4, lr}

	//Get the rssi
	rssiVal=device_info->recv_info->rssi;

	if (active_print == 1){
    fb2a:	490e      	ldr	r1, [pc, #56]	; (fb64 <scan_filter_match+0x3c>)
	rssiVal=device_info->recv_info->rssi;
    fb2c:	6803      	ldr	r3, [r0, #0]
	if (active_print == 1){
    fb2e:	6809      	ldr	r1, [r1, #0]
	rssiVal=device_info->recv_info->rssi;
    fb30:	4c0d      	ldr	r4, [pc, #52]	; (fb68 <scan_filter_match+0x40>)
    fb32:	f993 3005 	ldrsb.w	r3, [r3, #5]
    fb36:	6023      	str	r3, [r4, #0]
	if (active_print == 1){
    fb38:	2901      	cmp	r1, #1
    fb3a:	d105      	bne.n	fb48 <scan_filter_match+0x20>
		shell_print(main_shell,"rssi: %i",rssiVal);
    fb3c:	480b      	ldr	r0, [pc, #44]	; (fb6c <scan_filter_match+0x44>)
    fb3e:	4a0c      	ldr	r2, [pc, #48]	; (fb70 <scan_filter_match+0x48>)
    fb40:	6800      	ldr	r0, [r0, #0]
    fb42:	2108      	movs	r1, #8
    fb44:	f00f ff03 	bl	1f94e <shell_fprintf>
	}

	if (rssi_number == 20){
    fb48:	4b0a      	ldr	r3, [pc, #40]	; (fb74 <scan_filter_match+0x4c>)
		rssi_number = 0;
	}
	average_rssi[rssi_number] = rssiVal;
    fb4a:	490b      	ldr	r1, [pc, #44]	; (fb78 <scan_filter_match+0x50>)
	if (rssi_number == 20){
    fb4c:	681a      	ldr	r2, [r3, #0]
	average_rssi[rssi_number] = rssiVal;
    fb4e:	6820      	ldr	r0, [r4, #0]
	if (rssi_number == 20){
    fb50:	2a14      	cmp	r2, #20
		rssi_number = 0;
    fb52:	bf04      	itt	eq
    fb54:	2200      	moveq	r2, #0
    fb56:	601a      	streq	r2, [r3, #0]
	average_rssi[rssi_number] = rssiVal;
    fb58:	681a      	ldr	r2, [r3, #0]
    fb5a:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	rssi_number++;
    fb5e:	3201      	adds	r2, #1
    fb60:	601a      	str	r2, [r3, #0]
}
    fb62:	bd10      	pop	{r4, pc}
    fb64:	20002050 	.word	0x20002050
    fb68:	20002120 	.word	0x20002120
    fb6c:	2000211c 	.word	0x2000211c
    fb70:	000243e4 	.word	0x000243e4
    fb74:	20002124 	.word	0x20002124
    fb78:	20002054 	.word	0x20002054

0000fb7c <scan_connecting_error>:


//Scanning error
void scan_connecting_error(struct bt_scan_device_info *device_info)
{
	shell_print(main_shell,"Connection to peer failed!\n");
    fb7c:	4b02      	ldr	r3, [pc, #8]	; (fb88 <scan_connecting_error+0xc>)
    fb7e:	4a03      	ldr	r2, [pc, #12]	; (fb8c <scan_connecting_error+0x10>)
    fb80:	6818      	ldr	r0, [r3, #0]
    fb82:	2108      	movs	r1, #8
    fb84:	f00f bee3 	b.w	1f94e <shell_fprintf>
    fb88:	2000211c 	.word	0x2000211c
    fb8c:	0002437c 	.word	0x0002437c

0000fb90 <cmd_print_stop>:
	return 0;
}

static int cmd_print_stop(const struct shell *shell, size_t argc,
				    char **argv, void *data)
{
    fb90:	b510      	push	{r4, lr}
	active_print =0;
    fb92:	4b04      	ldr	r3, [pc, #16]	; (fba4 <cmd_print_stop+0x14>)
	shell_print(shell,"Active rssi print off");
    fb94:	4a04      	ldr	r2, [pc, #16]	; (fba8 <cmd_print_stop+0x18>)
	active_print =0;
    fb96:	2400      	movs	r4, #0
	shell_print(shell,"Active rssi print off");
    fb98:	2108      	movs	r1, #8
	active_print =0;
    fb9a:	601c      	str	r4, [r3, #0]
	shell_print(shell,"Active rssi print off");
    fb9c:	f00f fed7 	bl	1f94e <shell_fprintf>
	return 0;
}
    fba0:	4620      	mov	r0, r4
    fba2:	bd10      	pop	{r4, pc}
    fba4:	20002050 	.word	0x20002050
    fba8:	00024399 	.word	0x00024399

0000fbac <cmd_print_start>:
{
    fbac:	b508      	push	{r3, lr}
	active_print = 1;
    fbae:	4b05      	ldr	r3, [pc, #20]	; (fbc4 <cmd_print_start+0x18>)
    fbb0:	2201      	movs	r2, #1
    fbb2:	601a      	str	r2, [r3, #0]
	main_shell = shell;
    fbb4:	4b04      	ldr	r3, [pc, #16]	; (fbc8 <cmd_print_start+0x1c>)
	shell_print(shell,"Active rssi print on");
    fbb6:	4a05      	ldr	r2, [pc, #20]	; (fbcc <cmd_print_start+0x20>)
	main_shell = shell;
    fbb8:	6018      	str	r0, [r3, #0]
	shell_print(shell,"Active rssi print on");
    fbba:	2108      	movs	r1, #8
    fbbc:	f00f fec7 	bl	1f94e <shell_fprintf>
}
    fbc0:	2000      	movs	r0, #0
    fbc2:	bd08      	pop	{r3, pc}
    fbc4:	20002050 	.word	0x20002050
    fbc8:	2000211c 	.word	0x2000211c
    fbcc:	000243b0 	.word	0x000243b0

0000fbd0 <cmd_average_rssi>:
	return 0;
}

static int cmd_average_rssi(const struct shell *shell, size_t argc,
				    char **argv)
{
    fbd0:	b510      	push	{r4, lr}
	int tot = 0;
	int values = 50; 
	for (int i =0; i<50 ;i++)
    fbd2:	2300      	movs	r3, #0
    fbd4:	4c08      	ldr	r4, [pc, #32]	; (fbf8 <cmd_average_rssi+0x28>)
	int tot = 0;
    fbd6:	461a      	mov	r2, r3
	{
		if (average_rssi[i] == 0){
    fbd8:	f854 1b04 	ldr.w	r1, [r4], #4
    fbdc:	3301      	adds	r3, #1
    fbde:	b111      	cbz	r1, fbe6 <cmd_average_rssi+0x16>
	for (int i =0; i<50 ;i++)
    fbe0:	2b32      	cmp	r3, #50	; 0x32
			values = i+1;
			break;
		}
		tot += average_rssi[i];
    fbe2:	440a      	add	r2, r1
	for (int i =0; i<50 ;i++)
    fbe4:	d1f8      	bne.n	fbd8 <cmd_average_rssi+0x8>
	}
	tot = tot/values;
	
	shell_print(shell,"Average rssi value %i",tot);
    fbe6:	fb92 f3f3 	sdiv	r3, r2, r3
    fbea:	2108      	movs	r1, #8
    fbec:	4a03      	ldr	r2, [pc, #12]	; (fbfc <cmd_average_rssi+0x2c>)
    fbee:	f00f feae 	bl	1f94e <shell_fprintf>
	return 0;
}
    fbf2:	2000      	movs	r0, #0
    fbf4:	bd10      	pop	{r4, pc}
    fbf6:	bf00      	nop
    fbf8:	20002054 	.word	0x20002054
    fbfc:	000243c6 	.word	0x000243c6

0000fc00 <cmd_rssi_signal>:
{
    fc00:	b508      	push	{r3, lr}
	shell_print(shell,"Latest rssi: %i",rssiVal);
    fc02:	4b04      	ldr	r3, [pc, #16]	; (fc14 <cmd_rssi_signal+0x14>)
    fc04:	4a04      	ldr	r2, [pc, #16]	; (fc18 <cmd_rssi_signal+0x18>)
    fc06:	681b      	ldr	r3, [r3, #0]
    fc08:	2108      	movs	r1, #8
    fc0a:	f00f fea0 	bl	1f94e <shell_fprintf>
}
    fc0e:	2000      	movs	r0, #0
    fc10:	bd08      	pop	{r3, pc}
    fc12:	bf00      	nop
    fc14:	20002120 	.word	0x20002120
    fc18:	000243dd 	.word	0x000243dd

0000fc1c <cmd_change_name>:
	return 0;
}

static int cmd_change_name(const struct shell *shell, size_t argc,
				    char **argv)
{
    fc1c:	b538      	push	{r3, r4, r5, lr}
    fc1e:	4615      	mov	r5, r2
    fc20:	4604      	mov	r4, r0
	bt_scan_filter_remove_all();
    fc22:	f003 ff49 	bl	13ab8 <bt_scan_filter_remove_all>
	int err;

	// Add the target name to the filter
	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_NAME, argv[1]);
    fc26:	6869      	ldr	r1, [r5, #4]
    fc28:	2000      	movs	r0, #0
    fc2a:	f003 ff0b 	bl	13a44 <bt_scan_filter_add>
	if (err) {
    fc2e:	b130      	cbz	r0, fc3e <cmd_change_name+0x22>
		shell_print(shell,"Scanning filters cannot be set\n");
    fc30:	4a06      	ldr	r2, [pc, #24]	; (fc4c <cmd_change_name+0x30>)
    fc32:	2108      	movs	r1, #8
    fc34:	4620      	mov	r0, r4
    fc36:	f00f fe8a 	bl	1f94e <shell_fprintf>
	} 
	else{
		shell_print(shell,"The target device name was set to: %s",argv[1]);
	}
	return 0;
}
    fc3a:	2000      	movs	r0, #0
    fc3c:	bd38      	pop	{r3, r4, r5, pc}
		shell_print(shell,"The target device name was set to: %s",argv[1]);
    fc3e:	686b      	ldr	r3, [r5, #4]
    fc40:	4a03      	ldr	r2, [pc, #12]	; (fc50 <cmd_change_name+0x34>)
    fc42:	2108      	movs	r1, #8
    fc44:	4620      	mov	r0, r4
    fc46:	f00f fe82 	bl	1f94e <shell_fprintf>
    fc4a:	e7f6      	b.n	fc3a <cmd_change_name+0x1e>
    fc4c:	000243ee 	.word	0x000243ee
    fc50:	0002440f 	.word	0x0002440f

0000fc54 <cmd_stop_scan>:
{
    fc54:	b510      	push	{r4, lr}
    fc56:	4604      	mov	r4, r0
	err = bt_scan_stop();
    fc58:	f010 fd2d 	bl	206b6 <bt_scan_stop>
	if (err == -EALREADY) {
    fc5c:	f110 0f78 	cmn.w	r0, #120	; 0x78
	err = bt_scan_stop();
    fc60:	4603      	mov	r3, r0
	if (err == -EALREADY) {
    fc62:	d105      	bne.n	fc70 <cmd_stop_scan+0x1c>
		shell_print(shell,"Scanning is not on \n");
    fc64:	4a07      	ldr	r2, [pc, #28]	; (fc84 <cmd_stop_scan+0x30>)
		shell_print(shell,"Scanning has stopped \n");
    fc66:	2108      	movs	r1, #8
    fc68:	4620      	mov	r0, r4
    fc6a:	f00f fe70 	bl	1f94e <shell_fprintf>
    fc6e:	e005      	b.n	fc7c <cmd_stop_scan+0x28>
	else if (err){
    fc70:	b130      	cbz	r0, fc80 <cmd_stop_scan+0x2c>
		shell_print(shell,"Scanning failed to stop, err %d\n", err);
    fc72:	4a05      	ldr	r2, [pc, #20]	; (fc88 <cmd_stop_scan+0x34>)
    fc74:	2108      	movs	r1, #8
    fc76:	4620      	mov	r0, r4
    fc78:	f00f fe69 	bl	1f94e <shell_fprintf>
}
    fc7c:	2000      	movs	r0, #0
    fc7e:	bd10      	pop	{r4, pc}
		shell_print(shell,"Scanning has stopped \n");
    fc80:	4a02      	ldr	r2, [pc, #8]	; (fc8c <cmd_stop_scan+0x38>)
    fc82:	e7f0      	b.n	fc66 <cmd_stop_scan+0x12>
    fc84:	00024436 	.word	0x00024436
    fc88:	0002444c 	.word	0x0002444c
    fc8c:	0002446e 	.word	0x0002446e

0000fc90 <cmd_active_start>:
{
    fc90:	b510      	push	{r4, lr}
    fc92:	4604      	mov	r4, r0
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    fc94:	2001      	movs	r0, #1
    fc96:	f004 f855 	bl	13d44 <bt_scan_start>
			if (err == -EALREADY)
    fc9a:	f110 0f78 	cmn.w	r0, #120	; 0x78
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    fc9e:	4603      	mov	r3, r0
			if (err == -EALREADY)
    fca0:	d105      	bne.n	fcae <cmd_active_start+0x1e>
				shell_print(shell,"Scanning already enable \n");
    fca2:	4a08      	ldr	r2, [pc, #32]	; (fcc4 <cmd_active_start+0x34>)
				shell_print(shell,"Active scanning on");
    fca4:	2108      	movs	r1, #8
    fca6:	4620      	mov	r0, r4
    fca8:	f00f fe51 	bl	1f94e <shell_fprintf>
    fcac:	e005      	b.n	fcba <cmd_active_start+0x2a>
			else if (err) {
    fcae:	b130      	cbz	r0, fcbe <cmd_active_start+0x2e>
				shell_print(shell,"Scanning failed to start, err %d\n", err);
    fcb0:	4a05      	ldr	r2, [pc, #20]	; (fcc8 <cmd_active_start+0x38>)
    fcb2:	2108      	movs	r1, #8
    fcb4:	4620      	mov	r0, r4
    fcb6:	f00f fe4a 	bl	1f94e <shell_fprintf>
}
    fcba:	2000      	movs	r0, #0
    fcbc:	bd10      	pop	{r4, pc}
				shell_print(shell,"Active scanning on");
    fcbe:	4a03      	ldr	r2, [pc, #12]	; (fccc <cmd_active_start+0x3c>)
    fcc0:	e7f0      	b.n	fca4 <cmd_active_start+0x14>
    fcc2:	bf00      	nop
    fcc4:	00024486 	.word	0x00024486
    fcc8:	000244a1 	.word	0x000244a1
    fccc:	000244c4 	.word	0x000244c4

0000fcd0 <cmd_enable_scan>:
{
    fcd0:	b5f0      	push	{r4, r5, r6, r7, lr}
	main_shell = shell;
    fcd2:	4e22      	ldr	r6, [pc, #136]	; (fd5c <cmd_enable_scan+0x8c>)
{
    fcd4:	b08b      	sub	sp, #44	; 0x2c
	main_shell = shell;
    fcd6:	6030      	str	r0, [r6, #0]
{
    fcd8:	4604      	mov	r4, r0
	err = bt_enable(NULL);
    fcda:	2000      	movs	r0, #0
    fcdc:	f006 fc2a 	bl	16534 <bt_enable>
		if (err) {
    fce0:	4605      	mov	r5, r0
    fce2:	b138      	cbz	r0, fcf4 <cmd_enable_scan+0x24>
			shell_print(shell,"Cold not enable Bluetooth\n");
    fce4:	4a1e      	ldr	r2, [pc, #120]	; (fd60 <cmd_enable_scan+0x90>)
			shell_print(shell,"Scanning module enable \n");
    fce6:	4620      	mov	r0, r4
    fce8:	2108      	movs	r1, #8
    fcea:	f00f fe30 	bl	1f94e <shell_fprintf>
}
    fcee:	2000      	movs	r0, #0
    fcf0:	b00b      	add	sp, #44	; 0x2c
    fcf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			shell_print(shell,"Bluetooth initialized\n");
    fcf4:	4a1b      	ldr	r2, [pc, #108]	; (fd64 <cmd_enable_scan+0x94>)
    fcf6:	2108      	movs	r1, #8
    fcf8:	4620      	mov	r0, r4
    fcfa:	f00f fe28 	bl	1f94e <shell_fprintf>
	struct bt_le_scan_param scan_param = {
    fcfe:	ab05      	add	r3, sp, #20
    fd00:	2214      	movs	r2, #20
    fd02:	4629      	mov	r1, r5
    fd04:	4618      	mov	r0, r3
    fd06:	f011 f853 	bl	20db0 <memset>
    fd0a:	2701      	movs	r7, #1
    fd0c:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
    fd10:	e9cd 7206 	strd	r7, r2, [sp, #24]
		.conn_param = BT_LE_CONN_PARAM_DEFAULT,
    fd14:	4a14      	ldr	r2, [pc, #80]	; (fd68 <cmd_enable_scan+0x98>)
	struct bt_scan_init_param scan_init = {
    fd16:	9002      	str	r0, [sp, #8]
		.conn_param = BT_LE_CONN_PARAM_DEFAULT,
    fd18:	6851      	ldr	r1, [r2, #4]
    fd1a:	6810      	ldr	r0, [r2, #0]
	struct bt_scan_init_param scan_init = {
    fd1c:	f88d 500c 	strb.w	r5, [sp, #12]
		.conn_param = BT_LE_CONN_PARAM_DEFAULT,
    fd20:	466b      	mov	r3, sp
    fd22:	c303      	stmia	r3!, {r0, r1}
	bt_scan_init(&scan_init);
    fd24:	4618      	mov	r0, r3
	struct bt_scan_init_param scan_init = {
    fd26:	f8cd d010 	str.w	sp, [sp, #16]
	bt_scan_init(&scan_init);
    fd2a:	f003 ffd1 	bl	13cd0 <bt_scan_init>
	bt_scan_cb_register(&scan_cb);
    fd2e:	480f      	ldr	r0, [pc, #60]	; (fd6c <cmd_enable_scan+0x9c>)
    fd30:	f003 fe78 	bl	13a24 <bt_scan_cb_register>
	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_NAME, target);
    fd34:	490e      	ldr	r1, [pc, #56]	; (fd70 <cmd_enable_scan+0xa0>)
    fd36:	4628      	mov	r0, r5
    fd38:	f003 fe84 	bl	13a44 <bt_scan_filter_add>
	if (err) {
    fd3c:	4601      	mov	r1, r0
    fd3e:	b130      	cbz	r0, fd4e <cmd_enable_scan+0x7e>
		shell_print(main_shell,"Scanning filters cannot be set\n");
    fd40:	4a0c      	ldr	r2, [pc, #48]	; (fd74 <cmd_enable_scan+0xa4>)
		shell_print(main_shell,"Filters cannot be turned on\n");
    fd42:	6830      	ldr	r0, [r6, #0]
    fd44:	2108      	movs	r1, #8
    fd46:	f00f fe02 	bl	1f94e <shell_fprintf>
			shell_print(shell,"Scanning module enable \n");
    fd4a:	4a0b      	ldr	r2, [pc, #44]	; (fd78 <cmd_enable_scan+0xa8>)
    fd4c:	e7cb      	b.n	fce6 <cmd_enable_scan+0x16>
	err = bt_scan_filter_enable(BT_SCAN_NAME_FILTER, false);
    fd4e:	4638      	mov	r0, r7
    fd50:	f003 fee4 	bl	13b1c <bt_scan_filter_enable>
	if (err) {
    fd54:	2800      	cmp	r0, #0
    fd56:	d0f8      	beq.n	fd4a <cmd_enable_scan+0x7a>
		shell_print(main_shell,"Filters cannot be turned on\n");
    fd58:	4a08      	ldr	r2, [pc, #32]	; (fd7c <cmd_enable_scan+0xac>)
    fd5a:	e7f2      	b.n	fd42 <cmd_enable_scan+0x72>
    fd5c:	2000211c 	.word	0x2000211c
    fd60:	000244d8 	.word	0x000244d8
    fd64:	000244f4 	.word	0x000244f4
    fd68:	0002370c 	.word	0x0002370c
    fd6c:	20000410 	.word	0x20000410
    fd70:	0002450c 	.word	0x0002450c
    fd74:	000243ee 	.word	0x000243ee
    fd78:	00024532 	.word	0x00024532
    fd7c:	00024514 	.word	0x00024514

0000fd80 <cmd_passive_start>:
{
    fd80:	b510      	push	{r4, lr}
    fd82:	4604      	mov	r4, r0
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_PASSIVE);
    fd84:	2000      	movs	r0, #0
    fd86:	f003 ffdd 	bl	13d44 <bt_scan_start>
			if (err == -EALREADY)
    fd8a:	f110 0f78 	cmn.w	r0, #120	; 0x78
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_PASSIVE);
    fd8e:	4603      	mov	r3, r0
			if (err == -EALREADY)
    fd90:	d105      	bne.n	fd9e <cmd_passive_start+0x1e>
				shell_print(shell,"Scanning already enable \n");
    fd92:	4a08      	ldr	r2, [pc, #32]	; (fdb4 <cmd_passive_start+0x34>)
				shell_print(shell,"Passive scanning on");
    fd94:	2108      	movs	r1, #8
    fd96:	4620      	mov	r0, r4
    fd98:	f00f fdd9 	bl	1f94e <shell_fprintf>
    fd9c:	e005      	b.n	fdaa <cmd_passive_start+0x2a>
			else if (err) {
    fd9e:	b130      	cbz	r0, fdae <cmd_passive_start+0x2e>
				shell_print(shell,"Scanning failed to start, err %d\n", err);
    fda0:	4a05      	ldr	r2, [pc, #20]	; (fdb8 <cmd_passive_start+0x38>)
    fda2:	2108      	movs	r1, #8
    fda4:	4620      	mov	r0, r4
    fda6:	f00f fdd2 	bl	1f94e <shell_fprintf>
}
    fdaa:	2000      	movs	r0, #0
    fdac:	bd10      	pop	{r4, pc}
				shell_print(shell,"Passive scanning on");
    fdae:	4a03      	ldr	r2, [pc, #12]	; (fdbc <cmd_passive_start+0x3c>)
    fdb0:	e7f0      	b.n	fd94 <cmd_passive_start+0x14>
    fdb2:	bf00      	nop
    fdb4:	00024486 	.word	0x00024486
    fdb8:	000244a1 	.word	0x000244a1
    fdbc:	0002454c 	.word	0x0002454c

0000fdc0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    fdc0:	680b      	ldr	r3, [r1, #0]
    fdc2:	3301      	adds	r3, #1
    fdc4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    fdc6:	4b01      	ldr	r3, [pc, #4]	; (fdcc <char_out+0xc>)
    fdc8:	681b      	ldr	r3, [r3, #0]
    fdca:	4718      	bx	r3
    fdcc:	20000418 	.word	0x20000418

0000fdd0 <__printk_hook_install>:
	_char_out = fn;
    fdd0:	4b01      	ldr	r3, [pc, #4]	; (fdd8 <__printk_hook_install+0x8>)
    fdd2:	6018      	str	r0, [r3, #0]
}
    fdd4:	4770      	bx	lr
    fdd6:	bf00      	nop
    fdd8:	20000418 	.word	0x20000418

0000fddc <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    fddc:	b507      	push	{r0, r1, r2, lr}
    fdde:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    fde0:	2100      	movs	r1, #0
{
    fde2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    fde4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    fde6:	4803      	ldr	r0, [pc, #12]	; (fdf4 <vprintk+0x18>)
    fde8:	a901      	add	r1, sp, #4
    fdea:	f000 f8ff 	bl	ffec <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    fdee:	b003      	add	sp, #12
    fdf0:	f85d fb04 	ldr.w	pc, [sp], #4
    fdf4:	0000fdc1 	.word	0x0000fdc1

0000fdf8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    fdf8:	b530      	push	{r4, r5, lr}
    fdfa:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    fdfc:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    fe00:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    fe02:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    fe04:	a901      	add	r1, sp, #4
    fe06:	4805      	ldr	r0, [pc, #20]	; (fe1c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    fe08:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    fe0a:	f000 f8ef 	bl	ffec <cbvprintf>

	if (ctx.count < ctx.max) {
    fe0e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    fe12:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    fe14:	bfb8      	it	lt
    fe16:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    fe18:	b005      	add	sp, #20
    fe1a:	bd30      	pop	{r4, r5, pc}
    fe1c:	0001e4ad 	.word	0x0001e4ad

0000fe20 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    fe20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fe24:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    fe28:	f019 0808 	ands.w	r8, r9, #8
{
    fe2c:	4604      	mov	r4, r0
    fe2e:	4693      	mov	fp, r2
	if (processing) {
    fe30:	d00d      	beq.n	fe4e <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    fe32:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    fe34:	bf0c      	ite	eq
    fe36:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    fe3a:	f049 0920 	orrne.w	r9, r9, #32
    fe3e:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    fe42:	f38b 8811 	msr	BASEPRI, fp
    fe46:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    fe4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fe4e:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    fe52:	2902      	cmp	r1, #2
    fe54:	d107      	bne.n	fe66 <process_event+0x46>
			evt = process_recheck(mgr);
    fe56:	4620      	mov	r0, r4
    fe58:	f00e fb55 	bl	1e506 <process_recheck>
		if (evt == EVT_NOP) {
    fe5c:	2800      	cmp	r0, #0
    fe5e:	d0f0      	beq.n	fe42 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    fe60:	2801      	cmp	r0, #1
    fe62:	8b23      	ldrh	r3, [r4, #24]
    fe64:	d150      	bne.n	ff08 <process_event+0xe8>
			res = mgr->last_res;
    fe66:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fe68:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    fe6a:	2f00      	cmp	r7, #0
    fe6c:	da15      	bge.n	fe9a <process_event+0x7a>
		*clients = mgr->clients;
    fe6e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fe70:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    fe74:	e9c4 8800 	strd	r8, r8, [r4]
    fe78:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    fe7c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    fe7e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    fe80:	8b21      	ldrh	r1, [r4, #24]
    fe82:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    fe86:	45ca      	cmp	sl, r9
    fe88:	d002      	beq.n	fe90 <process_event+0x70>
		if (do_monitors
    fe8a:	68a3      	ldr	r3, [r4, #8]
    fe8c:	2b00      	cmp	r3, #0
    fe8e:	d15c      	bne.n	ff4a <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    fe90:	b90d      	cbnz	r5, fe96 <process_event+0x76>
		    || (transit != NULL)) {
    fe92:	2e00      	cmp	r6, #0
    fe94:	d074      	beq.n	ff80 <process_event+0x160>
    fe96:	2300      	movs	r3, #0
    fe98:	e058      	b.n	ff4c <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fe9a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    fe9e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    fea0:	2a01      	cmp	r2, #1
    fea2:	d820      	bhi.n	fee6 <process_event+0xc6>
		*clients = mgr->clients;
    fea4:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    fea8:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    feaa:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    feac:	b289      	uxth	r1, r1
	list->tail = NULL;
    feae:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    feb2:	d10c      	bne.n	fece <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    feb4:	2d00      	cmp	r5, #0
    feb6:	462b      	mov	r3, r5
    feb8:	bf38      	it	cc
    feba:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    febc:	b12b      	cbz	r3, feca <process_event+0xaa>
				mgr->refs += 1U;
    febe:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    fec0:	681b      	ldr	r3, [r3, #0]
    fec2:	3201      	adds	r2, #1
    fec4:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    fec6:	2b00      	cmp	r3, #0
    fec8:	d1f8      	bne.n	febc <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    feca:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    fece:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    fed0:	4620      	mov	r0, r4
    fed2:	f00e fb18 	bl	1e506 <process_recheck>
    fed6:	4606      	mov	r6, r0
    fed8:	2800      	cmp	r0, #0
    feda:	d0d1      	beq.n	fe80 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    fedc:	8b23      	ldrh	r3, [r4, #24]
    fede:	f043 0320 	orr.w	r3, r3, #32
    fee2:	8323      	strh	r3, [r4, #24]
    fee4:	e7cb      	b.n	fe7e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    fee6:	2b04      	cmp	r3, #4
    fee8:	d10c      	bne.n	ff04 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    feea:	f021 0107 	bic.w	r1, r1, #7
    feee:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    fef0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    fef2:	4620      	mov	r0, r4
    fef4:	f00e fb07 	bl	1e506 <process_recheck>
    fef8:	4605      	mov	r5, r0
    fefa:	2800      	cmp	r0, #0
    fefc:	d0bf      	beq.n	fe7e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    fefe:	f041 0120 	orr.w	r1, r1, #32
    ff02:	8321      	strh	r1, [r4, #24]
    ff04:	2500      	movs	r5, #0
    ff06:	e7ba      	b.n	fe7e <process_event+0x5e>
		} else if (evt == EVT_START) {
    ff08:	2803      	cmp	r0, #3
    ff0a:	d109      	bne.n	ff20 <process_event+0x100>
			transit = mgr->transitions->start;
    ff0c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ff0e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    ff12:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ff14:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    ff18:	8323      	strh	r3, [r4, #24]
}
    ff1a:	2500      	movs	r5, #0
		res = 0;
    ff1c:	462f      	mov	r7, r5
    ff1e:	e7af      	b.n	fe80 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    ff20:	2804      	cmp	r0, #4
    ff22:	d106      	bne.n	ff32 <process_event+0x112>
			transit = mgr->transitions->stop;
    ff24:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ff26:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    ff2a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ff2c:	f043 0304 	orr.w	r3, r3, #4
    ff30:	e7f2      	b.n	ff18 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    ff32:	2805      	cmp	r0, #5
    ff34:	d106      	bne.n	ff44 <process_event+0x124>
			transit = mgr->transitions->reset;
    ff36:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ff38:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    ff3c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ff3e:	f043 0305 	orr.w	r3, r3, #5
    ff42:	e7e9      	b.n	ff18 <process_event+0xf8>
    ff44:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    ff46:	462e      	mov	r6, r5
    ff48:	e7e8      	b.n	ff1c <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    ff4a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    ff4c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    ff50:	8321      	strh	r1, [r4, #24]
    ff52:	f38b 8811 	msr	BASEPRI, fp
    ff56:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    ff5a:	bb03      	cbnz	r3, ff9e <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    ff5c:	2d00      	cmp	r5, #0
    ff5e:	d133      	bne.n	ffc8 <process_event+0x1a8>
			if (transit != NULL) {
    ff60:	b116      	cbz	r6, ff68 <process_event+0x148>
				transit(mgr, transition_complete);
    ff62:	4921      	ldr	r1, [pc, #132]	; (ffe8 <process_event+0x1c8>)
    ff64:	4620      	mov	r0, r4
    ff66:	47b0      	blx	r6
	__asm__ volatile(
    ff68:	f04f 0340 	mov.w	r3, #64	; 0x40
    ff6c:	f3ef 8b11 	mrs	fp, BASEPRI
    ff70:	f383 8812 	msr	BASEPRI_MAX, r3
    ff74:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    ff78:	8b23      	ldrh	r3, [r4, #24]
    ff7a:	f023 0308 	bic.w	r3, r3, #8
    ff7e:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    ff80:	8b23      	ldrh	r3, [r4, #24]
    ff82:	06da      	lsls	r2, r3, #27
    ff84:	d528      	bpl.n	ffd8 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    ff86:	f023 0310 	bic.w	r3, r3, #16
    ff8a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    ff8c:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    ff8e:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    ff92:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    ff96:	2900      	cmp	r1, #0
    ff98:	f47f af5b 	bne.w	fe52 <process_event+0x32>
out:
    ff9c:	e751      	b.n	fe42 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ff9e:	68a1      	ldr	r1, [r4, #8]
    ffa0:	2900      	cmp	r1, #0
    ffa2:	d0db      	beq.n	ff5c <process_event+0x13c>
	return node->next;
    ffa4:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    ffa6:	f8d1 b004 	ldr.w	fp, [r1, #4]
    ffaa:	2b00      	cmp	r3, #0
    ffac:	bf38      	it	cc
    ffae:	2300      	movcc	r3, #0
    ffb0:	4699      	mov	r9, r3
    ffb2:	4652      	mov	r2, sl
    ffb4:	463b      	mov	r3, r7
    ffb6:	4620      	mov	r0, r4
    ffb8:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ffba:	f1b9 0f00 	cmp.w	r9, #0
    ffbe:	d0cd      	beq.n	ff5c <process_event+0x13c>
    ffc0:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    ffc4:	4649      	mov	r1, r9
    ffc6:	e7ee      	b.n	ffa6 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ffc8:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    ffca:	463b      	mov	r3, r7
    ffcc:	4652      	mov	r2, sl
    ffce:	4620      	mov	r0, r4
    ffd0:	682d      	ldr	r5, [r5, #0]
    ffd2:	f00e fab4 	bl	1e53e <notify_one>
    ffd6:	e7c1      	b.n	ff5c <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    ffd8:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    ffdc:	bf1e      	ittt	ne
    ffde:	f023 0320 	bicne.w	r3, r3, #32
    ffe2:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    ffe4:	2102      	movne	r1, #2
    ffe6:	e7d2      	b.n	ff8e <process_event+0x16e>
    ffe8:	0001e56b 	.word	0x0001e56b

0000ffec <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    ffec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fff0:	b091      	sub	sp, #68	; 0x44
    fff2:	468b      	mov	fp, r1
    fff4:	9002      	str	r0, [sp, #8]
    fff6:	4692      	mov	sl, r2
    fff8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    fffa:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    fffc:	f89a 0000 	ldrb.w	r0, [sl]
   10000:	b908      	cbnz	r0, 10006 <CONFIG_PM_SRAM_SIZE+0x6>
			OUTC(' ');
			--width;
		}
	}

	return count;
   10002:	4628      	mov	r0, r5
   10004:	e35e      	b.n	106c4 <CONFIG_PM_SRAM_SIZE+0x6c4>
		if (*fp != '%') {
   10006:	2825      	cmp	r0, #37	; 0x25
   10008:	f10a 0701 	add.w	r7, sl, #1
   1000c:	d007      	beq.n	1001e <CONFIG_PM_SRAM_SIZE+0x1e>
			OUTC('%');
   1000e:	9b02      	ldr	r3, [sp, #8]
   10010:	4659      	mov	r1, fp
   10012:	4798      	blx	r3
   10014:	2800      	cmp	r0, #0
   10016:	f2c0 8355 	blt.w	106c4 <CONFIG_PM_SRAM_SIZE+0x6c4>
   1001a:	3501      	adds	r5, #1
			break;
   1001c:	e210      	b.n	10440 <CONFIG_PM_SRAM_SIZE+0x440>
		} state = {
   1001e:	2218      	movs	r2, #24
   10020:	2100      	movs	r1, #0
   10022:	a80a      	add	r0, sp, #40	; 0x28
   10024:	f010 fec4 	bl	20db0 <memset>
	if (*sp == '%') {
   10028:	f89a 3001 	ldrb.w	r3, [sl, #1]
   1002c:	2b25      	cmp	r3, #37	; 0x25
   1002e:	d078      	beq.n	10122 <CONFIG_PM_SRAM_SIZE+0x122>
   10030:	2200      	movs	r2, #0
   10032:	4694      	mov	ip, r2
   10034:	4616      	mov	r6, r2
   10036:	4696      	mov	lr, r2
   10038:	4610      	mov	r0, r2
   1003a:	4639      	mov	r1, r7
		switch (*sp) {
   1003c:	f817 3b01 	ldrb.w	r3, [r7], #1
   10040:	2b2b      	cmp	r3, #43	; 0x2b
   10042:	f000 809d 	beq.w	10180 <CONFIG_PM_SRAM_SIZE+0x180>
   10046:	f200 8094 	bhi.w	10172 <CONFIG_PM_SRAM_SIZE+0x172>
   1004a:	2b20      	cmp	r3, #32
   1004c:	f000 809b 	beq.w	10186 <CONFIG_PM_SRAM_SIZE+0x186>
   10050:	2b23      	cmp	r3, #35	; 0x23
   10052:	f000 809a 	beq.w	1018a <CONFIG_PM_SRAM_SIZE+0x18a>
   10056:	b128      	cbz	r0, 10064 <CONFIG_PM_SRAM_SIZE+0x64>
   10058:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   1005c:	f040 0004 	orr.w	r0, r0, #4
   10060:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   10064:	f1be 0f00 	cmp.w	lr, #0
   10068:	d005      	beq.n	10076 <CONFIG_PM_SRAM_SIZE+0x76>
   1006a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   1006e:	f040 0008 	orr.w	r0, r0, #8
   10072:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   10076:	b12e      	cbz	r6, 10084 <CONFIG_PM_SRAM_SIZE+0x84>
   10078:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   1007c:	f040 0010 	orr.w	r0, r0, #16
   10080:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   10084:	f1bc 0f00 	cmp.w	ip, #0
   10088:	d005      	beq.n	10096 <CONFIG_PM_SRAM_SIZE+0x96>
   1008a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   1008e:	f040 0020 	orr.w	r0, r0, #32
   10092:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   10096:	b12a      	cbz	r2, 100a4 <CONFIG_PM_SRAM_SIZE+0xa4>
   10098:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   1009c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   100a0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   100a4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   100a8:	f002 0044 	and.w	r0, r2, #68	; 0x44
   100ac:	2844      	cmp	r0, #68	; 0x44
   100ae:	d103      	bne.n	100b8 <CONFIG_PM_SRAM_SIZE+0xb8>
		conv->flag_zero = false;
   100b0:	f36f 1286 	bfc	r2, #6, #1
   100b4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   100b8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   100bc:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   100be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   100c2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   100c6:	d17b      	bne.n	101c0 <CONFIG_PM_SRAM_SIZE+0x1c0>
		conv->width_star = true;
   100c8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   100cc:	f042 0201 	orr.w	r2, r2, #1
   100d0:	1c4b      	adds	r3, r1, #1
   100d2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   100d6:	781a      	ldrb	r2, [r3, #0]
   100d8:	2a2e      	cmp	r2, #46	; 0x2e
   100da:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   100de:	bf0c      	ite	eq
   100e0:	2101      	moveq	r1, #1
   100e2:	2100      	movne	r1, #0
   100e4:	f361 0241 	bfi	r2, r1, #1, #1
   100e8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   100ec:	d174      	bne.n	101d8 <CONFIG_PM_SRAM_SIZE+0x1d8>
	if (*sp == '*') {
   100ee:	785a      	ldrb	r2, [r3, #1]
   100f0:	2a2a      	cmp	r2, #42	; 0x2a
   100f2:	d06a      	beq.n	101ca <CONFIG_PM_SRAM_SIZE+0x1ca>
   100f4:	3301      	adds	r3, #1
	size_t val = 0;
   100f6:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   100f8:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   100fa:	4618      	mov	r0, r3
   100fc:	f810 2b01 	ldrb.w	r2, [r0], #1
   10100:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   10104:	2f09      	cmp	r7, #9
   10106:	f240 808e 	bls.w	10226 <CONFIG_PM_SRAM_SIZE+0x226>
	conv->unsupported |= ((conv->prec_value < 0)
   1010a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   1010e:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   10110:	f3c2 0040 	ubfx	r0, r2, #1, #1
   10114:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   10118:	f361 0241 	bfi	r2, r1, #1, #1
   1011c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   10120:	e05a      	b.n	101d8 <CONFIG_PM_SRAM_SIZE+0x1d8>
		conv->specifier = *sp++;
   10122:	f10a 0702 	add.w	r7, sl, #2
   10126:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   1012a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1012e:	07d9      	lsls	r1, r3, #31
   10130:	f140 8149 	bpl.w	103c6 <CONFIG_PM_SRAM_SIZE+0x3c6>
			width = va_arg(ap, int);
   10134:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   10138:	f1b9 0f00 	cmp.w	r9, #0
   1013c:	da07      	bge.n	1014e <CONFIG_PM_SRAM_SIZE+0x14e>
				conv->flag_dash = true;
   1013e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   10142:	f042 0204 	orr.w	r2, r2, #4
   10146:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
   1014a:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
   1014e:	075a      	lsls	r2, r3, #29
   10150:	f140 8142 	bpl.w	103d8 <CONFIG_PM_SRAM_SIZE+0x3d8>
			int arg = va_arg(ap, int);
   10154:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   10158:	f1b8 0f00 	cmp.w	r8, #0
   1015c:	f280 8141 	bge.w	103e2 <CONFIG_PM_SRAM_SIZE+0x3e2>
				conv->prec_present = false;
   10160:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   10164:	f36f 0341 	bfc	r3, #1, #1
   10168:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   1016c:	f04f 38ff 	mov.w	r8, #4294967295
   10170:	e137      	b.n	103e2 <CONFIG_PM_SRAM_SIZE+0x3e2>
		switch (*sp) {
   10172:	2b2d      	cmp	r3, #45	; 0x2d
   10174:	d00c      	beq.n	10190 <CONFIG_PM_SRAM_SIZE+0x190>
   10176:	2b30      	cmp	r3, #48	; 0x30
   10178:	f47f af6d 	bne.w	10056 <CONFIG_PM_SRAM_SIZE+0x56>
			conv->flag_zero = true;
   1017c:	2201      	movs	r2, #1
	} while (loop);
   1017e:	e75c      	b.n	1003a <CONFIG_PM_SRAM_SIZE+0x3a>
			conv->flag_plus = true;
   10180:	f04f 0e01 	mov.w	lr, #1
   10184:	e759      	b.n	1003a <CONFIG_PM_SRAM_SIZE+0x3a>
			conv->flag_space = true;
   10186:	2601      	movs	r6, #1
   10188:	e757      	b.n	1003a <CONFIG_PM_SRAM_SIZE+0x3a>
			conv->flag_hash = true;
   1018a:	f04f 0c01 	mov.w	ip, #1
   1018e:	e754      	b.n	1003a <CONFIG_PM_SRAM_SIZE+0x3a>
		switch (*sp) {
   10190:	2001      	movs	r0, #1
   10192:	e752      	b.n	1003a <CONFIG_PM_SRAM_SIZE+0x3a>
		val = 10U * val + *sp++ - '0';
   10194:	fb0c 0202 	mla	r2, ip, r2, r0
   10198:	3a30      	subs	r2, #48	; 0x30
   1019a:	4633      	mov	r3, r6
   1019c:	461e      	mov	r6, r3
   1019e:	f816 0b01 	ldrb.w	r0, [r6], #1
   101a2:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   101a6:	2f09      	cmp	r7, #9
   101a8:	d9f4      	bls.n	10194 <CONFIG_PM_SRAM_SIZE+0x194>
	if (sp != wp) {
   101aa:	4299      	cmp	r1, r3
   101ac:	d093      	beq.n	100d6 <CONFIG_PM_SRAM_SIZE+0xd6>
		conv->unsupported |= ((conv->width_value < 0)
   101ae:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   101b2:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   101b4:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   101b6:	f362 0141 	bfi	r1, r2, #1, #1
   101ba:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   101be:	e78a      	b.n	100d6 <CONFIG_PM_SRAM_SIZE+0xd6>
   101c0:	460b      	mov	r3, r1
	size_t val = 0;
   101c2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   101c4:	f04f 0c0a 	mov.w	ip, #10
   101c8:	e7e8      	b.n	1019c <CONFIG_PM_SRAM_SIZE+0x19c>
		conv->prec_star = true;
   101ca:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   101ce:	f042 0204 	orr.w	r2, r2, #4
   101d2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   101d6:	3302      	adds	r3, #2
	switch (*sp) {
   101d8:	461f      	mov	r7, r3
   101da:	f817 2b01 	ldrb.w	r2, [r7], #1
   101de:	2a6c      	cmp	r2, #108	; 0x6c
   101e0:	d041      	beq.n	10266 <CONFIG_PM_SRAM_SIZE+0x266>
   101e2:	d825      	bhi.n	10230 <CONFIG_PM_SRAM_SIZE+0x230>
   101e4:	2a68      	cmp	r2, #104	; 0x68
   101e6:	d02b      	beq.n	10240 <CONFIG_PM_SRAM_SIZE+0x240>
   101e8:	2a6a      	cmp	r2, #106	; 0x6a
   101ea:	d046      	beq.n	1027a <CONFIG_PM_SRAM_SIZE+0x27a>
   101ec:	2a4c      	cmp	r2, #76	; 0x4c
   101ee:	d04c      	beq.n	1028a <CONFIG_PM_SRAM_SIZE+0x28a>
   101f0:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   101f2:	f817 2b01 	ldrb.w	r2, [r7], #1
   101f6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   101fa:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   101fe:	2a78      	cmp	r2, #120	; 0x78
   10200:	f200 80d9 	bhi.w	103b6 <CONFIG_PM_SRAM_SIZE+0x3b6>
   10204:	2a57      	cmp	r2, #87	; 0x57
   10206:	d84d      	bhi.n	102a4 <CONFIG_PM_SRAM_SIZE+0x2a4>
   10208:	2a41      	cmp	r2, #65	; 0x41
   1020a:	d003      	beq.n	10214 <CONFIG_PM_SRAM_SIZE+0x214>
   1020c:	3a45      	subs	r2, #69	; 0x45
   1020e:	2a02      	cmp	r2, #2
   10210:	f200 80d1 	bhi.w	103b6 <CONFIG_PM_SRAM_SIZE+0x3b6>
		conv->specifier_cat = SPECIFIER_FP;
   10214:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   10218:	2204      	movs	r2, #4
   1021a:	f362 0302 	bfi	r3, r2, #0, #3
   1021e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   10222:	2301      	movs	r3, #1
			break;
   10224:	e09e      	b.n	10364 <CONFIG_PM_SRAM_SIZE+0x364>
		val = 10U * val + *sp++ - '0';
   10226:	fb06 2101 	mla	r1, r6, r1, r2
   1022a:	3930      	subs	r1, #48	; 0x30
   1022c:	4603      	mov	r3, r0
   1022e:	e764      	b.n	100fa <CONFIG_PM_SRAM_SIZE+0xfa>
	switch (*sp) {
   10230:	2a74      	cmp	r2, #116	; 0x74
   10232:	d026      	beq.n	10282 <CONFIG_PM_SRAM_SIZE+0x282>
   10234:	2a7a      	cmp	r2, #122	; 0x7a
   10236:	d1db      	bne.n	101f0 <CONFIG_PM_SRAM_SIZE+0x1f0>
		conv->length_mod = LENGTH_Z;
   10238:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1023c:	2206      	movs	r2, #6
   1023e:	e00d      	b.n	1025c <CONFIG_PM_SRAM_SIZE+0x25c>
		if (*++sp == 'h') {
   10240:	785a      	ldrb	r2, [r3, #1]
   10242:	2a68      	cmp	r2, #104	; 0x68
   10244:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   10248:	d106      	bne.n	10258 <CONFIG_PM_SRAM_SIZE+0x258>
			conv->length_mod = LENGTH_HH;
   1024a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1024c:	f361 02c6 	bfi	r2, r1, #3, #4
   10250:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   10254:	1c9f      	adds	r7, r3, #2
   10256:	e7cc      	b.n	101f2 <CONFIG_PM_SRAM_SIZE+0x1f2>
			conv->length_mod = LENGTH_H;
   10258:	4613      	mov	r3, r2
   1025a:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   1025c:	f362 03c6 	bfi	r3, r2, #3, #4
   10260:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   10264:	e7c5      	b.n	101f2 <CONFIG_PM_SRAM_SIZE+0x1f2>
		if (*++sp == 'l') {
   10266:	785a      	ldrb	r2, [r3, #1]
   10268:	2a6c      	cmp	r2, #108	; 0x6c
   1026a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1026e:	d101      	bne.n	10274 <CONFIG_PM_SRAM_SIZE+0x274>
			conv->length_mod = LENGTH_LL;
   10270:	2104      	movs	r1, #4
   10272:	e7eb      	b.n	1024c <CONFIG_PM_SRAM_SIZE+0x24c>
			conv->length_mod = LENGTH_L;
   10274:	4613      	mov	r3, r2
   10276:	2203      	movs	r2, #3
   10278:	e7f0      	b.n	1025c <CONFIG_PM_SRAM_SIZE+0x25c>
		conv->length_mod = LENGTH_J;
   1027a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1027e:	2205      	movs	r2, #5
   10280:	e7ec      	b.n	1025c <CONFIG_PM_SRAM_SIZE+0x25c>
		conv->length_mod = LENGTH_T;
   10282:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   10286:	2207      	movs	r2, #7
   10288:	e7e8      	b.n	1025c <CONFIG_PM_SRAM_SIZE+0x25c>
		conv->unsupported = true;
   1028a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1028e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   10292:	f023 0302 	bic.w	r3, r3, #2
   10296:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1029a:	f043 0302 	orr.w	r3, r3, #2
   1029e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   102a2:	e7a6      	b.n	101f2 <CONFIG_PM_SRAM_SIZE+0x1f2>
   102a4:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   102a8:	2920      	cmp	r1, #32
   102aa:	f200 8084 	bhi.w	103b6 <CONFIG_PM_SRAM_SIZE+0x3b6>
   102ae:	a001      	add	r0, pc, #4	; (adr r0, 102b4 <CONFIG_PM_SRAM_SIZE+0x2b4>)
   102b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   102b4:	00010379 	.word	0x00010379
   102b8:	000103b7 	.word	0x000103b7
   102bc:	000103b7 	.word	0x000103b7
   102c0:	000103b7 	.word	0x000103b7
   102c4:	000103b7 	.word	0x000103b7
   102c8:	000103b7 	.word	0x000103b7
   102cc:	000103b7 	.word	0x000103b7
   102d0:	000103b7 	.word	0x000103b7
   102d4:	000103b7 	.word	0x000103b7
   102d8:	00010215 	.word	0x00010215
   102dc:	000103b7 	.word	0x000103b7
   102e0:	00010379 	.word	0x00010379
   102e4:	00010339 	.word	0x00010339
   102e8:	00010215 	.word	0x00010215
   102ec:	00010215 	.word	0x00010215
   102f0:	00010215 	.word	0x00010215
   102f4:	000103b7 	.word	0x000103b7
   102f8:	00010339 	.word	0x00010339
   102fc:	000103b7 	.word	0x000103b7
   10300:	000103b7 	.word	0x000103b7
   10304:	000103b7 	.word	0x000103b7
   10308:	000103b7 	.word	0x000103b7
   1030c:	00010381 	.word	0x00010381
   10310:	00010379 	.word	0x00010379
   10314:	0001039d 	.word	0x0001039d
   10318:	000103b7 	.word	0x000103b7
   1031c:	000103b7 	.word	0x000103b7
   10320:	0001039d 	.word	0x0001039d
   10324:	000103b7 	.word	0x000103b7
   10328:	00010379 	.word	0x00010379
   1032c:	000103b7 	.word	0x000103b7
   10330:	000103b7 	.word	0x000103b7
   10334:	00010379 	.word	0x00010379
		conv->specifier_cat = SPECIFIER_SINT;
   10338:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   1033c:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   1033e:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   10342:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   10346:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   10348:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   1034c:	bf02      	ittt	eq
   1034e:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   10352:	f041 0101 	orreq.w	r1, r1, #1
   10356:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   1035a:	2a63      	cmp	r2, #99	; 0x63
   1035c:	d131      	bne.n	103c2 <CONFIG_PM_SRAM_SIZE+0x3c2>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1035e:	3b00      	subs	r3, #0
   10360:	bf18      	it	ne
   10362:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   10364:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   10368:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1036c:	430b      	orrs	r3, r1
   1036e:	f363 0241 	bfi	r2, r3, #1, #1
   10372:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   10376:	e6d8      	b.n	1012a <CONFIG_PM_SRAM_SIZE+0x12a>
		conv->specifier_cat = SPECIFIER_UINT;
   10378:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   1037c:	2002      	movs	r0, #2
   1037e:	e7de      	b.n	1033e <CONFIG_PM_SRAM_SIZE+0x33e>
		conv->specifier_cat = SPECIFIER_PTR;
   10380:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   10384:	f003 0378 	and.w	r3, r3, #120	; 0x78
   10388:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   1038c:	2103      	movs	r1, #3
   1038e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   10392:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   10394:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   10398:	4143      	adcs	r3, r0
   1039a:	e7e3      	b.n	10364 <CONFIG_PM_SRAM_SIZE+0x364>
		conv->specifier_cat = SPECIFIER_PTR;
   1039c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   103a0:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   103a2:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   103a6:	f361 0202 	bfi	r2, r1, #0, #3
   103aa:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   103ae:	bf14      	ite	ne
   103b0:	2301      	movne	r3, #1
   103b2:	2300      	moveq	r3, #0
   103b4:	e7d6      	b.n	10364 <CONFIG_PM_SRAM_SIZE+0x364>
		conv->invalid = true;
   103b6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   103ba:	f043 0301 	orr.w	r3, r3, #1
   103be:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   103c2:	2300      	movs	r3, #0
   103c4:	e7ce      	b.n	10364 <CONFIG_PM_SRAM_SIZE+0x364>
		} else if (conv->width_present) {
   103c6:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   103ca:	2a00      	cmp	r2, #0
			width = conv->width_value;
   103cc:	bfb4      	ite	lt
   103ce:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
   103d2:	f04f 39ff 	movge.w	r9, #4294967295
   103d6:	e6ba      	b.n	1014e <CONFIG_PM_SRAM_SIZE+0x14e>
		} else if (conv->prec_present) {
   103d8:	079b      	lsls	r3, r3, #30
   103da:	f57f aec7 	bpl.w	1016c <CONFIG_PM_SRAM_SIZE+0x16c>
			precision = conv->prec_value;
   103de:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
   103e2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
   103e6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   103e8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   103ec:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
   103f0:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   103f4:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   103f6:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   103fa:	d136      	bne.n	1046a <CONFIG_PM_SRAM_SIZE+0x46a>
			switch (length_mod) {
   103fc:	1ed3      	subs	r3, r2, #3
   103fe:	2b04      	cmp	r3, #4
   10400:	d820      	bhi.n	10444 <CONFIG_PM_SRAM_SIZE+0x444>
   10402:	e8df f003 	tbb	[pc, r3]
   10406:	0703      	.short	0x0703
   10408:	1f07      	.short	0x1f07
   1040a:	1f          	.byte	0x1f
   1040b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   1040c:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
   10410:	17c1      	asrs	r1, r0, #31
   10412:	e004      	b.n	1041e <CONFIG_PM_SRAM_SIZE+0x41e>
					(sint_value_type)va_arg(ap, intmax_t);
   10414:	3407      	adds	r4, #7
   10416:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   1041a:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
   1041e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   10422:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   10426:	f013 0603 	ands.w	r6, r3, #3
   1042a:	d054      	beq.n	104d6 <CONFIG_PM_SRAM_SIZE+0x4d6>
			OUTS(sp, fp);
   1042c:	9802      	ldr	r0, [sp, #8]
   1042e:	463b      	mov	r3, r7
   10430:	4652      	mov	r2, sl
   10432:	4659      	mov	r1, fp
   10434:	f00e fb2c 	bl	1ea90 <outs>
   10438:	2800      	cmp	r0, #0
   1043a:	f2c0 8143 	blt.w	106c4 <CONFIG_PM_SRAM_SIZE+0x6c4>
   1043e:	4405      	add	r5, r0
			continue;
   10440:	46ba      	mov	sl, r7
   10442:	e5db      	b.n	fffc <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   10444:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
   10448:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1044a:	ea4f 71e0 	mov.w	r1, r0, asr #31
   1044e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   10452:	d105      	bne.n	10460 <CONFIG_PM_SRAM_SIZE+0x460>
				value->uint = (unsigned char)value->uint;
   10454:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   10458:	930a      	str	r3, [sp, #40]	; 0x28
   1045a:	2300      	movs	r3, #0
   1045c:	930b      	str	r3, [sp, #44]	; 0x2c
   1045e:	e7e0      	b.n	10422 <CONFIG_PM_SRAM_SIZE+0x422>
			} else if (length_mod == LENGTH_H) {
   10460:	2a02      	cmp	r2, #2
   10462:	d1de      	bne.n	10422 <CONFIG_PM_SRAM_SIZE+0x422>
				value->sint = (short)value->sint;
   10464:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
   10468:	e7d2      	b.n	10410 <CONFIG_PM_SRAM_SIZE+0x410>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1046a:	2b02      	cmp	r3, #2
   1046c:	d123      	bne.n	104b6 <CONFIG_PM_SRAM_SIZE+0x4b6>
			switch (length_mod) {
   1046e:	1ed3      	subs	r3, r2, #3
   10470:	2b04      	cmp	r3, #4
   10472:	d813      	bhi.n	1049c <CONFIG_PM_SRAM_SIZE+0x49c>
   10474:	e8df f003 	tbb	[pc, r3]
   10478:	120a0a03 	.word	0x120a0a03
   1047c:	12          	.byte	0x12
   1047d:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   1047e:	6820      	ldr	r0, [r4, #0]
   10480:	900a      	str	r0, [sp, #40]	; 0x28
   10482:	2100      	movs	r1, #0
   10484:	1d23      	adds	r3, r4, #4
   10486:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   10488:	461c      	mov	r4, r3
   1048a:	e7ca      	b.n	10422 <CONFIG_PM_SRAM_SIZE+0x422>
					(uint_value_type)va_arg(ap,
   1048c:	3407      	adds	r4, #7
   1048e:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
   10492:	e8f3 0102 	ldrd	r0, r1, [r3], #8
   10496:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
   1049a:	e7f5      	b.n	10488 <CONFIG_PM_SRAM_SIZE+0x488>
					(uint_value_type)va_arg(ap, size_t);
   1049c:	f854 3b04 	ldr.w	r3, [r4], #4
   104a0:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   104a2:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
   104a4:	f04f 0300 	mov.w	r3, #0
   104a8:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   104aa:	d0d3      	beq.n	10454 <CONFIG_PM_SRAM_SIZE+0x454>
			} else if (length_mod == LENGTH_H) {
   104ac:	2a02      	cmp	r2, #2
   104ae:	d1b8      	bne.n	10422 <CONFIG_PM_SRAM_SIZE+0x422>
				value->uint = (unsigned short)value->uint;
   104b0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   104b4:	e7d0      	b.n	10458 <CONFIG_PM_SRAM_SIZE+0x458>
		} else if (specifier_cat == SPECIFIER_FP) {
   104b6:	2b04      	cmp	r3, #4
   104b8:	d107      	bne.n	104ca <CONFIG_PM_SRAM_SIZE+0x4ca>
			if (length_mod == LENGTH_UPPER_L) {
   104ba:	3407      	adds	r4, #7
   104bc:	f024 0407 	bic.w	r4, r4, #7
   104c0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
   104c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   104c8:	e7ab      	b.n	10422 <CONFIG_PM_SRAM_SIZE+0x422>
		} else if (specifier_cat == SPECIFIER_PTR) {
   104ca:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   104cc:	bf04      	itt	eq
   104ce:	f854 3b04 	ldreq.w	r3, [r4], #4
   104d2:	930a      	streq	r3, [sp, #40]	; 0x28
   104d4:	e7a5      	b.n	10422 <CONFIG_PM_SRAM_SIZE+0x422>
		switch (conv->specifier) {
   104d6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   104da:	2878      	cmp	r0, #120	; 0x78
   104dc:	d8b0      	bhi.n	10440 <CONFIG_PM_SRAM_SIZE+0x440>
   104de:	2862      	cmp	r0, #98	; 0x62
   104e0:	d822      	bhi.n	10528 <CONFIG_PM_SRAM_SIZE+0x528>
   104e2:	2825      	cmp	r0, #37	; 0x25
   104e4:	f43f ad93 	beq.w	1000e <CONFIG_PM_SRAM_SIZE+0xe>
   104e8:	2858      	cmp	r0, #88	; 0x58
   104ea:	d1a9      	bne.n	10440 <CONFIG_PM_SRAM_SIZE+0x440>
			bps = encode_uint(value->uint, conv, buf, bpe);
   104ec:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   104f0:	9300      	str	r3, [sp, #0]
   104f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   104f6:	ab04      	add	r3, sp, #16
   104f8:	aa0c      	add	r2, sp, #48	; 0x30
   104fa:	f00e fa7e 	bl	1e9fa <encode_uint>
   104fe:	4682      	mov	sl, r0
			if (precision >= 0) {
   10500:	f1b8 0f00 	cmp.w	r8, #0
   10504:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   10508:	db0c      	blt.n	10524 <CONFIG_PM_SRAM_SIZE+0x524>
				conv->flag_zero = false;
   1050a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   1050e:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   10512:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   10516:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   10518:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   1051c:	d902      	bls.n	10524 <CONFIG_PM_SRAM_SIZE+0x524>
					conv->pad0_value = precision - (int)len;
   1051e:	eba8 0303 	sub.w	r3, r8, r3
   10522:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   10524:	4680      	mov	r8, r0
   10526:	e03d      	b.n	105a4 <CONFIG_PM_SRAM_SIZE+0x5a4>
   10528:	3863      	subs	r0, #99	; 0x63
   1052a:	2815      	cmp	r0, #21
   1052c:	d888      	bhi.n	10440 <CONFIG_PM_SRAM_SIZE+0x440>
   1052e:	a101      	add	r1, pc, #4	; (adr r1, 10534 <CONFIG_PM_SRAM_SIZE+0x534>)
   10530:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
   10534:	000105b5 	.word	0x000105b5
   10538:	00010619 	.word	0x00010619
   1053c:	00010441 	.word	0x00010441
   10540:	00010441 	.word	0x00010441
   10544:	00010441 	.word	0x00010441
   10548:	00010441 	.word	0x00010441
   1054c:	00010619 	.word	0x00010619
   10550:	00010441 	.word	0x00010441
   10554:	00010441 	.word	0x00010441
   10558:	00010441 	.word	0x00010441
   1055c:	00010441 	.word	0x00010441
   10560:	00010677 	.word	0x00010677
   10564:	00010645 	.word	0x00010645
   10568:	00010649 	.word	0x00010649
   1056c:	00010441 	.word	0x00010441
   10570:	00010441 	.word	0x00010441
   10574:	0001058d 	.word	0x0001058d
   10578:	00010441 	.word	0x00010441
   1057c:	00010645 	.word	0x00010645
   10580:	00010441 	.word	0x00010441
   10584:	00010441 	.word	0x00010441
   10588:	00010645 	.word	0x00010645
			if (precision >= 0) {
   1058c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   10590:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   10594:	db0a      	blt.n	105ac <CONFIG_PM_SRAM_SIZE+0x5ac>
				len = strnlen(bps, precision);
   10596:	4641      	mov	r1, r8
   10598:	4650      	mov	r0, sl
   1059a:	f010 fbb3 	bl	20d04 <strnlen>
			bpe = bps + len;
   1059e:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
   105a2:	2600      	movs	r6, #0
		if (bps == NULL) {
   105a4:	f1ba 0f00 	cmp.w	sl, #0
   105a8:	d10c      	bne.n	105c4 <CONFIG_PM_SRAM_SIZE+0x5c4>
   105aa:	e749      	b.n	10440 <CONFIG_PM_SRAM_SIZE+0x440>
				len = strlen(bps);
   105ac:	4650      	mov	r0, sl
   105ae:	f010 fba2 	bl	20cf6 <strlen>
   105b2:	e7f4      	b.n	1059e <CONFIG_PM_SRAM_SIZE+0x59e>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   105b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   105b6:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
   105ba:	2600      	movs	r6, #0
			bpe = buf + 1;
   105bc:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
   105c0:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
   105c4:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   105c8:	b106      	cbz	r6, 105cc <CONFIG_PM_SRAM_SIZE+0x5cc>
			nj_len += 1U;
   105ca:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   105cc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   105d0:	06d0      	lsls	r0, r2, #27
   105d2:	d56b      	bpl.n	106ac <CONFIG_PM_SRAM_SIZE+0x6ac>
			nj_len += 2U;
   105d4:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   105d6:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   105d8:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   105da:	bf48      	it	mi
   105dc:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   105de:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   105e0:	bf48      	it	mi
   105e2:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   105e4:	f1b9 0f00 	cmp.w	r9, #0
   105e8:	dd79      	ble.n	106de <CONFIG_PM_SRAM_SIZE+0x6de>
			if (!conv->flag_dash) {
   105ea:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   105ee:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   105f2:	f3c2 0380 	ubfx	r3, r2, #2, #1
   105f6:	9303      	str	r3, [sp, #12]
   105f8:	0753      	lsls	r3, r2, #29
   105fa:	d470      	bmi.n	106de <CONFIG_PM_SRAM_SIZE+0x6de>
				if (conv->flag_zero) {
   105fc:	0650      	lsls	r0, r2, #25
   105fe:	d564      	bpl.n	106ca <CONFIG_PM_SRAM_SIZE+0x6ca>
					if (sign != 0) {
   10600:	b146      	cbz	r6, 10614 <CONFIG_PM_SRAM_SIZE+0x614>
						OUTC(sign);
   10602:	9b02      	ldr	r3, [sp, #8]
   10604:	4659      	mov	r1, fp
   10606:	4630      	mov	r0, r6
   10608:	4798      	blx	r3
   1060a:	2800      	cmp	r0, #0
   1060c:	db5a      	blt.n	106c4 <CONFIG_PM_SRAM_SIZE+0x6c4>
						sign = 0;
   1060e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   10610:	3501      	adds	r5, #1
						sign = 0;
   10612:	461e      	mov	r6, r3
					pad = '0';
   10614:	2330      	movs	r3, #48	; 0x30
   10616:	e059      	b.n	106cc <CONFIG_PM_SRAM_SIZE+0x6cc>
			if (conv->flag_plus) {
   10618:	071e      	lsls	r6, r3, #28
   1061a:	d411      	bmi.n	10640 <CONFIG_PM_SRAM_SIZE+0x640>
				sign = ' ';
   1061c:	f013 0610 	ands.w	r6, r3, #16
   10620:	bf18      	it	ne
   10622:	2620      	movne	r6, #32
			sint = value->sint;
   10624:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   10628:	2a00      	cmp	r2, #0
   1062a:	f173 0100 	sbcs.w	r1, r3, #0
   1062e:	f6bf af5d 	bge.w	104ec <CONFIG_PM_SRAM_SIZE+0x4ec>
				value->uint = (uint_value_type)-sint;
   10632:	4252      	negs	r2, r2
   10634:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10638:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
   1063c:	262d      	movs	r6, #45	; 0x2d
   1063e:	e755      	b.n	104ec <CONFIG_PM_SRAM_SIZE+0x4ec>
				sign = '+';
   10640:	262b      	movs	r6, #43	; 0x2b
   10642:	e7ef      	b.n	10624 <CONFIG_PM_SRAM_SIZE+0x624>
		switch (conv->specifier) {
   10644:	2600      	movs	r6, #0
   10646:	e751      	b.n	104ec <CONFIG_PM_SRAM_SIZE+0x4ec>
			if (value->ptr != NULL) {
   10648:	980a      	ldr	r0, [sp, #40]	; 0x28
   1064a:	b348      	cbz	r0, 106a0 <CONFIG_PM_SRAM_SIZE+0x6a0>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1064c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   10650:	9300      	str	r3, [sp, #0]
   10652:	aa0c      	add	r2, sp, #48	; 0x30
   10654:	ab04      	add	r3, sp, #16
   10656:	2100      	movs	r1, #0
   10658:	f00e f9cf 	bl	1e9fa <encode_uint>
				conv->altform_0c = true;
   1065c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   10660:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   10664:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   10668:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1066c:	4682      	mov	sl, r0
				conv->altform_0c = true;
   1066e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
   10672:	2600      	movs	r6, #0
				goto prec_int_pad0;
   10674:	e744      	b.n	10500 <CONFIG_PM_SRAM_SIZE+0x500>
				store_count(conv, value->ptr, count);
   10676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   10678:	2a07      	cmp	r2, #7
   1067a:	f63f aee1 	bhi.w	10440 <CONFIG_PM_SRAM_SIZE+0x440>
   1067e:	e8df f002 	tbb	[pc, r2]
   10682:	040d      	.short	0x040d
   10684:	08080d06 	.word	0x08080d06
   10688:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   1068a:	701d      	strb	r5, [r3, #0]
		break;
   1068c:	e6d8      	b.n	10440 <CONFIG_PM_SRAM_SIZE+0x440>
		*(short *)dp = (short)count;
   1068e:	801d      	strh	r5, [r3, #0]
		break;
   10690:	e6d6      	b.n	10440 <CONFIG_PM_SRAM_SIZE+0x440>
		*(intmax_t *)dp = (intmax_t)count;
   10692:	4628      	mov	r0, r5
   10694:	17e9      	asrs	r1, r5, #31
   10696:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   1069a:	e6d1      	b.n	10440 <CONFIG_PM_SRAM_SIZE+0x440>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1069c:	601d      	str	r5, [r3, #0]
		break;
   1069e:	e6cf      	b.n	10440 <CONFIG_PM_SRAM_SIZE+0x440>
			bpe = bps + 5;
   106a0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 10768 <CONFIG_PM_SRAM_SIZE+0x768>
   106a4:	4606      	mov	r6, r0
			bps = "(nil)";
   106a6:	f1a8 0a05 	sub.w	sl, r8, #5
   106aa:	e78b      	b.n	105c4 <CONFIG_PM_SRAM_SIZE+0x5c4>
		} else if (conv->altform_0) {
   106ac:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   106ae:	bf48      	it	mi
   106b0:	3301      	addmi	r3, #1
   106b2:	e790      	b.n	105d6 <CONFIG_PM_SRAM_SIZE+0x5d6>
					OUTC(pad);
   106b4:	4618      	mov	r0, r3
   106b6:	9303      	str	r3, [sp, #12]
   106b8:	4659      	mov	r1, fp
   106ba:	9b02      	ldr	r3, [sp, #8]
   106bc:	4798      	blx	r3
   106be:	2800      	cmp	r0, #0
   106c0:	9b03      	ldr	r3, [sp, #12]
   106c2:	da04      	bge.n	106ce <CONFIG_PM_SRAM_SIZE+0x6ce>
#undef OUTS
#undef OUTC
}
   106c4:	b011      	add	sp, #68	; 0x44
   106c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   106ca:	2320      	movs	r3, #32
   106cc:	444d      	add	r5, r9
   106ce:	464a      	mov	r2, r9
				while (width-- > 0) {
   106d0:	2a00      	cmp	r2, #0
   106d2:	eba5 0109 	sub.w	r1, r5, r9
   106d6:	f109 39ff 	add.w	r9, r9, #4294967295
   106da:	dceb      	bgt.n	106b4 <CONFIG_PM_SRAM_SIZE+0x6b4>
   106dc:	460d      	mov	r5, r1
		if (sign != 0) {
   106de:	b136      	cbz	r6, 106ee <CONFIG_PM_SRAM_SIZE+0x6ee>
			OUTC(sign);
   106e0:	9b02      	ldr	r3, [sp, #8]
   106e2:	4659      	mov	r1, fp
   106e4:	4630      	mov	r0, r6
   106e6:	4798      	blx	r3
   106e8:	2800      	cmp	r0, #0
   106ea:	dbeb      	blt.n	106c4 <CONFIG_PM_SRAM_SIZE+0x6c4>
   106ec:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   106ee:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   106f2:	06d9      	lsls	r1, r3, #27
   106f4:	d401      	bmi.n	106fa <CONFIG_PM_SRAM_SIZE+0x6fa>
   106f6:	071a      	lsls	r2, r3, #28
   106f8:	d506      	bpl.n	10708 <CONFIG_PM_SRAM_SIZE+0x708>
				OUTC('0');
   106fa:	9b02      	ldr	r3, [sp, #8]
   106fc:	4659      	mov	r1, fp
   106fe:	2030      	movs	r0, #48	; 0x30
   10700:	4798      	blx	r3
   10702:	2800      	cmp	r0, #0
   10704:	dbde      	blt.n	106c4 <CONFIG_PM_SRAM_SIZE+0x6c4>
   10706:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   10708:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   1070c:	06db      	lsls	r3, r3, #27
   1070e:	d507      	bpl.n	10720 <CONFIG_PM_SRAM_SIZE+0x720>
				OUTC(conv->specifier);
   10710:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   10714:	9b02      	ldr	r3, [sp, #8]
   10716:	4659      	mov	r1, fp
   10718:	4798      	blx	r3
   1071a:	2800      	cmp	r0, #0
   1071c:	dbd2      	blt.n	106c4 <CONFIG_PM_SRAM_SIZE+0x6c4>
   1071e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   10720:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   10722:	442e      	add	r6, r5
   10724:	1b73      	subs	r3, r6, r5
   10726:	2b00      	cmp	r3, #0
   10728:	dc16      	bgt.n	10758 <CONFIG_PM_SRAM_SIZE+0x758>
			OUTS(bps, bpe);
   1072a:	9802      	ldr	r0, [sp, #8]
   1072c:	4643      	mov	r3, r8
   1072e:	4652      	mov	r2, sl
   10730:	4659      	mov	r1, fp
   10732:	f00e f9ad 	bl	1ea90 <outs>
   10736:	2800      	cmp	r0, #0
   10738:	dbc4      	blt.n	106c4 <CONFIG_PM_SRAM_SIZE+0x6c4>
   1073a:	4405      	add	r5, r0
		while (width > 0) {
   1073c:	44a9      	add	r9, r5
   1073e:	eba9 0305 	sub.w	r3, r9, r5
   10742:	2b00      	cmp	r3, #0
   10744:	f77f ae7c 	ble.w	10440 <CONFIG_PM_SRAM_SIZE+0x440>
			OUTC(' ');
   10748:	9b02      	ldr	r3, [sp, #8]
   1074a:	4659      	mov	r1, fp
   1074c:	2020      	movs	r0, #32
   1074e:	4798      	blx	r3
   10750:	2800      	cmp	r0, #0
   10752:	dbb7      	blt.n	106c4 <CONFIG_PM_SRAM_SIZE+0x6c4>
   10754:	3501      	adds	r5, #1
			--width;
   10756:	e7f2      	b.n	1073e <CONFIG_PM_SRAM_SIZE+0x73e>
				OUTC('0');
   10758:	9b02      	ldr	r3, [sp, #8]
   1075a:	4659      	mov	r1, fp
   1075c:	2030      	movs	r0, #48	; 0x30
   1075e:	4798      	blx	r3
   10760:	2800      	cmp	r0, #0
   10762:	dbaf      	blt.n	106c4 <CONFIG_PM_SRAM_SIZE+0x6c4>
   10764:	3501      	adds	r5, #1
   10766:	e7dd      	b.n	10724 <CONFIG_PM_SRAM_SIZE+0x724>
   10768:	00024753 	.word	0x00024753

0001076c <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   1076c:	b508      	push	{r3, lr}
   1076e:	f04f 0240 	mov.w	r2, #64	; 0x40
   10772:	f3ef 8311 	mrs	r3, BASEPRI
   10776:	f382 8812 	msr	BASEPRI_MAX, r2
   1077a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   1077e:	f004 fa19 	bl	14bb4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   10782:	4803      	ldr	r0, [pc, #12]	; (10790 <sys_reboot+0x24>)
   10784:	f00d fea5 	bl	1e4d2 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   10788:	f003 fbb0 	bl	13eec <arch_cpu_idle>
   1078c:	e7fc      	b.n	10788 <sys_reboot+0x1c>
   1078e:	bf00      	nop
   10790:	00024754 	.word	0x00024754

00010794 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   10794:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   10796:	4910      	ldr	r1, [pc, #64]	; (107d8 <enable_logger+0x44>)
   10798:	4810      	ldr	r0, [pc, #64]	; (107dc <enable_logger+0x48>)
{
   1079a:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   1079c:	2200      	movs	r2, #0
   1079e:	f012 fc01 	bl	22fa4 <k_timer_init>
		/* coverity[OVERRUN] */
		return (k_tid_t) arch_syscall_invoke6(*(uintptr_t *)&new_thread, *(uintptr_t *)&stack, *(uintptr_t *)&stack_size, *(uintptr_t *)&entry, *(uintptr_t *)&p1, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   107a2:	4d0f      	ldr	r5, [pc, #60]	; (107e0 <enable_logger+0x4c>)
   107a4:	490f      	ldr	r1, [pc, #60]	; (107e4 <enable_logger+0x50>)
   107a6:	2200      	movs	r2, #0
   107a8:	2300      	movs	r3, #0
   107aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
   107ae:	2400      	movs	r4, #0
   107b0:	230e      	movs	r3, #14
   107b2:	e9cd 3403 	strd	r3, r4, [sp, #12]
   107b6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   107ba:	4b0b      	ldr	r3, [pc, #44]	; (107e8 <enable_logger+0x54>)
   107bc:	9400      	str	r4, [sp, #0]
   107be:	f44f 7240 	mov.w	r2, #768	; 0x300
   107c2:	4628      	mov	r0, r5
   107c4:	f00c fb8c 	bl	1cee0 <z_impl_k_thread_create>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread, *(uintptr_t *)&str, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
   107c8:	4908      	ldr	r1, [pc, #32]	; (107ec <enable_logger+0x58>)
   107ca:	4628      	mov	r0, r5
   107cc:	f00c fad6 	bl	1cd7c <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   107d0:	4620      	mov	r0, r4
   107d2:	b009      	add	sp, #36	; 0x24
   107d4:	bd30      	pop	{r4, r5, pc}
   107d6:	bf00      	nop
   107d8:	000107f1 	.word	0x000107f1
   107dc:	200015f8 	.word	0x200015f8
   107e0:	20001630 	.word	0x20001630
   107e4:	20003220 	.word	0x20003220
   107e8:	00010c35 	.word	0x00010c35
   107ec:	00024b67 	.word	0x00024b67

000107f0 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   107f0:	4801      	ldr	r0, [pc, #4]	; (107f8 <log_process_thread_timer_expiry_fn+0x8>)
   107f2:	f00c bdcb 	b.w	1d38c <z_impl_k_sem_give>
   107f6:	bf00      	nop
   107f8:	2000077c 	.word	0x2000077c

000107fc <log_core_init>:
	panic_mode = false;
   107fc:	4a0d      	ldr	r2, [pc, #52]	; (10834 <log_core_init+0x38>)
{
   107fe:	b508      	push	{r3, lr}
	panic_mode = false;
   10800:	2300      	movs	r3, #0
   10802:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   10804:	4a0c      	ldr	r2, [pc, #48]	; (10838 <log_core_init+0x3c>)
   10806:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
   10808:	4b0c      	ldr	r3, [pc, #48]	; (1083c <log_core_init+0x40>)
   1080a:	4a0d      	ldr	r2, [pc, #52]	; (10840 <log_core_init+0x44>)
   1080c:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   1080e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10812:	f000 fda1 	bl	11358 <log_output_timestamp_freq_set>
		log_msg_pool_init();
   10816:	f000 fb35 	bl	10e84 <log_msg_pool_init>
		log_list_init(&list);
   1081a:	480a      	ldr	r0, [pc, #40]	; (10844 <log_core_init+0x48>)
   1081c:	f00e fb48 	bl	1eeb0 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   10820:	2308      	movs	r3, #8
   10822:	4909      	ldr	r1, [pc, #36]	; (10848 <log_core_init+0x4c>)
   10824:	4809      	ldr	r0, [pc, #36]	; (1084c <log_core_init+0x50>)
   10826:	2248      	movs	r2, #72	; 0x48
   10828:	f011 fff4 	bl	22814 <k_mem_slab_init>
}
   1082c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_runtime_filters_init();
   10830:	f000 ba62 	b.w	10cf8 <z_log_runtime_filters_init>
   10834:	200027f1 	.word	0x200027f1
   10838:	2000212c 	.word	0x2000212c
   1083c:	2000041c 	.word	0x2000041c
   10840:	0001eeef 	.word	0x0001eeef
   10844:	20002134 	.word	0x20002134
   10848:	200066e8 	.word	0x200066e8
   1084c:	2000213c 	.word	0x2000213c

00010850 <log_init>:
{
   10850:	b570      	push	{r4, r5, r6, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   10852:	4b12      	ldr	r3, [pc, #72]	; (1089c <log_init+0x4c>)
   10854:	f3bf 8f5b 	dmb	ish
   10858:	e853 5f00 	ldrex	r5, [r3]
   1085c:	1c6a      	adds	r2, r5, #1
   1085e:	e843 2100 	strex	r1, r2, [r3]
   10862:	2900      	cmp	r1, #0
   10864:	d1f8      	bne.n	10858 <log_init+0x8>
   10866:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   1086a:	b92d      	cbnz	r5, 10878 <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   1086c:	4c0c      	ldr	r4, [pc, #48]	; (108a0 <log_init+0x50>)
   1086e:	4e0d      	ldr	r6, [pc, #52]	; (108a4 <log_init+0x54>)
   10870:	1b36      	subs	r6, r6, r4
   10872:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   10874:	42b5      	cmp	r5, r6
   10876:	db00      	blt.n	1087a <log_init+0x2a>
}
   10878:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   1087a:	7b23      	ldrb	r3, [r4, #12]
   1087c:	b153      	cbz	r3, 10894 <log_init+0x44>
			if (backend->api->init != NULL) {
   1087e:	6823      	ldr	r3, [r4, #0]
   10880:	699b      	ldr	r3, [r3, #24]
   10882:	b10b      	cbz	r3, 10888 <log_init+0x38>
				backend->api->init(backend);
   10884:	4620      	mov	r0, r4
   10886:	4798      	blx	r3
			log_backend_enable(backend,
   10888:	6863      	ldr	r3, [r4, #4]
   1088a:	2204      	movs	r2, #4
   1088c:	6819      	ldr	r1, [r3, #0]
   1088e:	4620      	mov	r0, r4
   10890:	f000 fac8 	bl	10e24 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   10894:	3501      	adds	r5, #1
   10896:	3410      	adds	r4, #16
   10898:	e7ec      	b.n	10874 <log_init+0x24>
   1089a:	bf00      	nop
   1089c:	20002130 	.word	0x20002130
   108a0:	000235f0 	.word	0x000235f0
   108a4:	00023610 	.word	0x00023610

000108a8 <get_msg>:
{
   108a8:	b510      	push	{r4, lr}
   108aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   108ae:	f3ef 8411 	mrs	r4, BASEPRI
   108b2:	f383 8812 	msr	BASEPRI_MAX, r3
   108b6:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   108ba:	4804      	ldr	r0, [pc, #16]	; (108cc <get_msg+0x24>)
   108bc:	f00e fb08 	bl	1eed0 <log_list_head_get>
	__asm__ volatile(
   108c0:	f384 8811 	msr	BASEPRI, r4
   108c4:	f3bf 8f6f 	isb	sy
}
   108c8:	bd10      	pop	{r4, pc}
   108ca:	bf00      	nop
   108cc:	20002134 	.word	0x20002134

000108d0 <z_log_notify_backend_enabled>:
{
   108d0:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   108d2:	4c04      	ldr	r4, [pc, #16]	; (108e4 <z_log_notify_backend_enabled+0x14>)
   108d4:	7822      	ldrb	r2, [r4, #0]
   108d6:	b912      	cbnz	r2, 108de <z_log_notify_backend_enabled+0xe>
   108d8:	4803      	ldr	r0, [pc, #12]	; (108e8 <z_log_notify_backend_enabled+0x18>)
   108da:	f00c fd57 	bl	1d38c <z_impl_k_sem_give>
	backend_attached = true;
   108de:	2301      	movs	r3, #1
   108e0:	7023      	strb	r3, [r4, #0]
}
   108e2:	bd10      	pop	{r4, pc}
   108e4:	200027f0 	.word	0x200027f0
   108e8:	2000077c 	.word	0x2000077c

000108ec <z_log_dropped>:
   108ec:	4b0c      	ldr	r3, [pc, #48]	; (10920 <z_log_dropped+0x34>)
   108ee:	f3bf 8f5b 	dmb	ish
   108f2:	e853 2f00 	ldrex	r2, [r3]
   108f6:	3201      	adds	r2, #1
   108f8:	e843 2100 	strex	r1, r2, [r3]
   108fc:	2900      	cmp	r1, #0
   108fe:	d1f8      	bne.n	108f2 <z_log_dropped+0x6>
   10900:	f3bf 8f5b 	dmb	ish
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   10904:	f3bf 8f5b 	dmb	ish
   10908:	4b06      	ldr	r3, [pc, #24]	; (10924 <z_log_dropped+0x38>)
   1090a:	e853 2f00 	ldrex	r2, [r3]
   1090e:	3a01      	subs	r2, #1
   10910:	e843 2100 	strex	r1, r2, [r3]
   10914:	2900      	cmp	r1, #0
   10916:	d1f8      	bne.n	1090a <z_log_dropped+0x1e>
   10918:	f3bf 8f5b 	dmb	ish
}
   1091c:	4770      	bx	lr
   1091e:	bf00      	nop
   10920:	2000212c 	.word	0x2000212c
   10924:	20002128 	.word	0x20002128

00010928 <z_log_dropped_read_and_clear>:
}
   10928:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1092a:	4b06      	ldr	r3, [pc, #24]	; (10944 <z_log_dropped_read_and_clear+0x1c>)
   1092c:	f3bf 8f5b 	dmb	ish
   10930:	4602      	mov	r2, r0
   10932:	e853 0f00 	ldrex	r0, [r3]
   10936:	e843 2100 	strex	r1, r2, [r3]
   1093a:	2900      	cmp	r1, #0
   1093c:	d1f9      	bne.n	10932 <z_log_dropped_read_and_clear+0xa>
   1093e:	f3bf 8f5b 	dmb	ish
   10942:	4770      	bx	lr
   10944:	2000212c 	.word	0x2000212c

00010948 <dropped_notify>:
{
   10948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   1094a:	f7ff ffed 	bl	10928 <z_log_dropped_read_and_clear>
   1094e:	4c0a      	ldr	r4, [pc, #40]	; (10978 <dropped_notify+0x30>)
   10950:	4d0a      	ldr	r5, [pc, #40]	; (1097c <dropped_notify+0x34>)
   10952:	1b2d      	subs	r5, r5, r4
   10954:	4607      	mov	r7, r0
   10956:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   10958:	2600      	movs	r6, #0
   1095a:	42ae      	cmp	r6, r5
   1095c:	db00      	blt.n	10960 <dropped_notify+0x18>
}
   1095e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   10960:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   10962:	795b      	ldrb	r3, [r3, #5]
   10964:	b12b      	cbz	r3, 10972 <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
   10966:	6823      	ldr	r3, [r4, #0]
   10968:	691b      	ldr	r3, [r3, #16]
   1096a:	b113      	cbz	r3, 10972 <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
   1096c:	4639      	mov	r1, r7
   1096e:	4620      	mov	r0, r4
   10970:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   10972:	3601      	adds	r6, #1
   10974:	3410      	adds	r4, #16
   10976:	e7f0      	b.n	1095a <dropped_notify+0x12>
   10978:	000235f0 	.word	0x000235f0
   1097c:	00023610 	.word	0x00023610

00010980 <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   10980:	4b16      	ldr	r3, [pc, #88]	; (109dc <z_log_strdup+0x5c>)
   10982:	4298      	cmp	r0, r3
{
   10984:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10986:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   10988:	d302      	bcc.n	10990 <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   1098a:	4b15      	ldr	r3, [pc, #84]	; (109e0 <z_log_strdup+0x60>)
   1098c:	4298      	cmp	r0, r3
   1098e:	d320      	bcc.n	109d2 <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   10990:	4814      	ldr	r0, [pc, #80]	; (109e4 <z_log_strdup+0x64>)
   10992:	2200      	movs	r2, #0
   10994:	2300      	movs	r3, #0
   10996:	a901      	add	r1, sp, #4
   10998:	f00c f988 	bl	1ccac <k_mem_slab_alloc>
	if (err != 0) {
   1099c:	4605      	mov	r5, r0
   1099e:	b9d8      	cbnz	r0, 109d8 <z_log_strdup+0x58>
   109a0:	2201      	movs	r2, #1
   109a2:	9b01      	ldr	r3, [sp, #4]
   109a4:	f3bf 8f5b 	dmb	ish
   109a8:	e853 1f00 	ldrex	r1, [r3]
   109ac:	e843 2000 	strex	r0, r2, [r3]
   109b0:	2800      	cmp	r0, #0
   109b2:	d1f9      	bne.n	109a8 <z_log_strdup+0x28>
   109b4:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   109b8:	9801      	ldr	r0, [sp, #4]
   109ba:	4621      	mov	r1, r4
   109bc:	2241      	movs	r2, #65	; 0x41
   109be:	3004      	adds	r0, #4
   109c0:	f010 f978 	bl	20cb4 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   109c4:	9c01      	ldr	r4, [sp, #4]
   109c6:	237e      	movs	r3, #126	; 0x7e
   109c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   109cc:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
	return dup->buf;
   109d0:	3404      	adds	r4, #4
}
   109d2:	4620      	mov	r0, r4
   109d4:	b003      	add	sp, #12
   109d6:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
   109d8:	4c03      	ldr	r4, [pc, #12]	; (109e8 <z_log_strdup+0x68>)
   109da:	e7fa      	b.n	109d2 <z_log_strdup+0x52>
   109dc:	000232d4 	.word	0x000232d4
   109e0:	00026f2c 	.word	0x00026f2c
   109e4:	2000213c 	.word	0x2000213c
   109e8:	0002477d 	.word	0x0002477d

000109ec <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   109ec:	b150      	cbz	r0, 10a04 <log_is_strdup+0x18>
   109ee:	4b06      	ldr	r3, [pc, #24]	; (10a08 <log_is_strdup+0x1c>)
   109f0:	4298      	cmp	r0, r3
   109f2:	d306      	bcc.n	10a02 <log_is_strdup+0x16>
   109f4:	f503 7310 	add.w	r3, r3, #576	; 0x240
   109f8:	4298      	cmp	r0, r3
   109fa:	bf2c      	ite	cs
   109fc:	2000      	movcs	r0, #0
   109fe:	2001      	movcc	r0, #1
   10a00:	4770      	bx	lr
   10a02:	2000      	movs	r0, #0
}
   10a04:	4770      	bx	lr
   10a06:	bf00      	nop
   10a08:	200066e8 	.word	0x200066e8

00010a0c <z_impl_log_process>:
	if (!backend_attached && !bypass) {
   10a0c:	4b4c      	ldr	r3, [pc, #304]	; (10b40 <z_impl_log_process+0x134>)
   10a0e:	781b      	ldrb	r3, [r3, #0]
{
   10a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10a14:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
   10a16:	b903      	cbnz	r3, 10a1a <z_impl_log_process+0xe>
   10a18:	b1a0      	cbz	r0, 10a44 <z_impl_log_process+0x38>
	msg = get_msg();
   10a1a:	f7ff ff45 	bl	108a8 <get_msg>
	if (msg.msg) {
   10a1e:	4604      	mov	r4, r0
   10a20:	b118      	cbz	r0, 10a2a <z_impl_log_process+0x1e>
		if (!bypass) {
   10a22:	b19d      	cbz	r5, 10a4c <z_impl_log_process+0x40>
			log_msg_put(msg.msg);
   10a24:	4620      	mov	r0, r4
   10a26:	f00e fb7e 	bl	1f126 <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
   10a2a:	b92d      	cbnz	r5, 10a38 <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
   10a2c:	4b45      	ldr	r3, [pc, #276]	; (10b44 <z_impl_log_process+0x138>)
	if (!bypass && z_log_dropped_pending()) {
   10a2e:	681b      	ldr	r3, [r3, #0]
   10a30:	2b00      	cmp	r3, #0
   10a32:	dd01      	ble.n	10a38 <z_impl_log_process+0x2c>
		dropped_notify();
   10a34:	f7ff ff88 	bl	10948 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   10a38:	4843      	ldr	r0, [pc, #268]	; (10b48 <z_impl_log_process+0x13c>)
   10a3a:	f00e fa47 	bl	1eecc <log_list_head_peek>
   10a3e:	1e05      	subs	r5, r0, #0
   10a40:	bf18      	it	ne
   10a42:	2501      	movne	r5, #1
}
   10a44:	4628      	mov	r0, r5
   10a46:	b003      	add	sp, #12
   10a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   10a4c:	4b3f      	ldr	r3, [pc, #252]	; (10b4c <z_impl_log_process+0x140>)
   10a4e:	f3bf 8f5b 	dmb	ish
   10a52:	e853 2f00 	ldrex	r2, [r3]
   10a56:	3a01      	subs	r2, #1
   10a58:	e843 2100 	strex	r1, r2, [r3]
   10a5c:	2900      	cmp	r1, #0
   10a5e:	d1f8      	bne.n	10a52 <z_impl_log_process+0x46>
   10a60:	f3bf 8f5b 	dmb	ish
		    !panic_mode) {
   10a64:	4b3a      	ldr	r3, [pc, #232]	; (10b50 <z_impl_log_process+0x144>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
   10a66:	781b      	ldrb	r3, [r3, #0]
   10a68:	b9b3      	cbnz	r3, 10a98 <z_impl_log_process+0x8c>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   10a6a:	7a23      	ldrb	r3, [r4, #8]
	if (!log_msg_is_std(msg)) {
   10a6c:	07da      	lsls	r2, r3, #31
   10a6e:	d413      	bmi.n	10a98 <z_impl_log_process+0x8c>
	msg_str = log_msg_str_get(msg);
   10a70:	f00e fb6c 	bl	1f14c <log_msg_str_get>
   10a74:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   10a76:	4620      	mov	r0, r4
   10a78:	f00e fb33 	bl	1f0e2 <log_msg_nargs_get>
   10a7c:	4601      	mov	r1, r0
   10a7e:	4640      	mov	r0, r8
   10a80:	f00e fa39 	bl	1eef6 <z_log_get_s_mask>
 *
 * @return Source ID.
 */
static inline uint32_t log_dynamic_source_id(struct log_source_dynamic_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
   10a84:	4a33      	ldr	r2, [pc, #204]	; (10b54 <z_impl_log_process+0x148>)
   10a86:	4b34      	ldr	r3, [pc, #208]	; (10b58 <z_impl_log_process+0x14c>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   10a88:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 10b70 <z_impl_log_process+0x164>
   10a8c:	1ad3      	subs	r3, r2, r3
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   10a8e:	4606      	mov	r6, r0
   10a90:	ea4f 0a93 	mov.w	sl, r3, lsr #2
   10a94:	4691      	mov	r9, r2
	while (mask) {
   10a96:	b936      	cbnz	r6, 10aa6 <z_impl_log_process+0x9a>
	return __log_backends_end - __log_backends_start;
   10a98:	4e30      	ldr	r6, [pc, #192]	; (10b5c <z_impl_log_process+0x150>)
   10a9a:	4b31      	ldr	r3, [pc, #196]	; (10b60 <z_impl_log_process+0x154>)
   10a9c:	1b9b      	subs	r3, r3, r6
   10a9e:	ea4f 1823 	mov.w	r8, r3, asr #4
   10aa2:	2700      	movs	r7, #0
   10aa4:	e048      	b.n	10b38 <z_impl_log_process+0x12c>
		idx = 31 - __builtin_clz(mask);
   10aa6:	fab6 f786 	clz	r7, r6
   10aaa:	f1c7 071f 	rsb	r7, r7, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   10aae:	4639      	mov	r1, r7
   10ab0:	4620      	mov	r0, r4
   10ab2:	f00e fb19 	bl	1f0e8 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   10ab6:	4b2b      	ldr	r3, [pc, #172]	; (10b64 <z_impl_log_process+0x158>)
   10ab8:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
   10aba:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   10abc:	d302      	bcc.n	10ac4 <z_impl_log_process+0xb8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   10abe:	4b2a      	ldr	r3, [pc, #168]	; (10b68 <z_impl_log_process+0x15c>)
   10ac0:	4298      	cmp	r0, r3
   10ac2:	d31b      	bcc.n	10afc <z_impl_log_process+0xf0>
   10ac4:	4610      	mov	r0, r2
   10ac6:	f7ff ff91 	bl	109ec <log_is_strdup>
   10aca:	b9b8      	cbnz	r0, 10afc <z_impl_log_process+0xf0>
   10acc:	4b27      	ldr	r3, [pc, #156]	; (10b6c <z_impl_log_process+0x160>)
   10ace:	429a      	cmp	r2, r3
   10ad0:	d014      	beq.n	10afc <z_impl_log_process+0xf0>
	return msg->hdr.ids.source_id;
   10ad2:	8961      	ldrh	r1, [r4, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   10ad4:	f3c1 1189 	ubfx	r1, r1, #6, #10
   10ad8:	f000 f92c 	bl	10d34 <log_source_name_get>
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   10adc:	f8d9 3000 	ldr.w	r3, [r9]
   10ae0:	075b      	lsls	r3, r3, #29
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   10ae2:	4602      	mov	r2, r0
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   10ae4:	d00a      	beq.n	10afc <z_impl_log_process+0xf0>
   10ae6:	ea4f 138a 	mov.w	r3, sl, lsl #6
   10aea:	f043 0301 	orr.w	r3, r3, #1
   10aee:	f8ad 3000 	strh.w	r3, [sp]
   10af2:	4639      	mov	r1, r7
   10af4:	4643      	mov	r3, r8
   10af6:	4658      	mov	r0, fp
   10af8:	f00e fa57 	bl	1efaa <log_3>
		mask &= ~BIT(idx);
   10afc:	2301      	movs	r3, #1
   10afe:	fa03 f707 	lsl.w	r7, r3, r7
   10b02:	ea26 0607 	bic.w	r6, r6, r7
   10b06:	e7c6      	b.n	10a96 <z_impl_log_process+0x8a>
	return backend->cb->active;
   10b08:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
   10b0a:	795b      	ldrb	r3, [r3, #5]
   10b0c:	b193      	cbz	r3, 10b34 <z_impl_log_process+0x128>
	return msg->hdr.ids.level;
   10b0e:	7aa1      	ldrb	r1, [r4, #10]
	return msg->hdr.ids.source_id;
   10b10:	8962      	ldrh	r2, [r4, #10]
	return msg->hdr.ids.level;
   10b12:	f001 0907 	and.w	r9, r1, #7
	backend_level = log_filter_get(backend, domain_id,
   10b16:	2301      	movs	r3, #1
   10b18:	f3c2 1289 	ubfx	r2, r2, #6, #10
   10b1c:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   10b20:	4630      	mov	r0, r6
   10b22:	f000 f995 	bl	10e50 <log_filter_get>
			if (log_backend_is_active(backend) &&
   10b26:	4581      	cmp	r9, r0
   10b28:	d804      	bhi.n	10b34 <z_impl_log_process+0x128>
	backend->api->put(backend, msg);
   10b2a:	6833      	ldr	r3, [r6, #0]
   10b2c:	4621      	mov	r1, r4
   10b2e:	685b      	ldr	r3, [r3, #4]
   10b30:	4630      	mov	r0, r6
   10b32:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   10b34:	3701      	adds	r7, #1
   10b36:	3610      	adds	r6, #16
   10b38:	4547      	cmp	r7, r8
   10b3a:	dbe5      	blt.n	10b08 <z_impl_log_process+0xfc>
   10b3c:	e772      	b.n	10a24 <z_impl_log_process+0x18>
   10b3e:	bf00      	nop
   10b40:	200027f0 	.word	0x200027f0
   10b44:	2000212c 	.word	0x2000212c
   10b48:	20002134 	.word	0x20002134
   10b4c:	20002128 	.word	0x20002128
   10b50:	200027f1 	.word	0x200027f1
   10b54:	20000684 	.word	0x20000684
   10b58:	20000654 	.word	0x20000654
   10b5c:	000235f0 	.word	0x000235f0
   10b60:	00023610 	.word	0x00023610
   10b64:	000232d4 	.word	0x000232d4
   10b68:	00026f2c 	.word	0x00026f2c
   10b6c:	0002477d 	.word	0x0002477d
   10b70:	00024797 	.word	0x00024797

00010b74 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   10b74:	4b28      	ldr	r3, [pc, #160]	; (10c18 <msg_finalize+0xa4>)
{
   10b76:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
   10b78:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   10b7a:	8141      	strh	r1, [r0, #10]
{
   10b7c:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   10b7e:	4798      	blx	r3
   10b80:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   10b82:	f04f 0340 	mov.w	r3, #64	; 0x40
   10b86:	f3ef 8511 	mrs	r5, BASEPRI
   10b8a:	f383 8812 	msr	BASEPRI_MAX, r3
   10b8e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   10b92:	4822      	ldr	r0, [pc, #136]	; (10c1c <msg_finalize+0xa8>)
   10b94:	4621      	mov	r1, r4
   10b96:	f00e f98f 	bl	1eeb8 <log_list_add_tail>
	__asm__ volatile(
   10b9a:	f385 8811 	msr	BASEPRI, r5
   10b9e:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   10ba2:	f3bf 8f5b 	dmb	ish
   10ba6:	4b1e      	ldr	r3, [pc, #120]	; (10c20 <msg_finalize+0xac>)
   10ba8:	e853 2f00 	ldrex	r2, [r3]
   10bac:	1c51      	adds	r1, r2, #1
   10bae:	e843 1000 	strex	r0, r1, [r3]
   10bb2:	2800      	cmp	r0, #0
   10bb4:	d1f8      	bne.n	10ba8 <msg_finalize+0x34>
   10bb6:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   10bba:	4b1a      	ldr	r3, [pc, #104]	; (10c24 <msg_finalize+0xb0>)
   10bbc:	781b      	ldrb	r3, [r3, #0]
   10bbe:	b183      	cbz	r3, 10be2 <msg_finalize+0x6e>
	__asm__ volatile(
   10bc0:	f04f 0340 	mov.w	r3, #64	; 0x40
   10bc4:	f3ef 8411 	mrs	r4, BASEPRI
   10bc8:	f383 8812 	msr	BASEPRI_MAX, r3
   10bcc:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   10bd0:	2000      	movs	r0, #0
   10bd2:	f7ff ff1b 	bl	10a0c <z_impl_log_process>
	__asm__ volatile(
   10bd6:	f384 8811 	msr	BASEPRI, r4
   10bda:	f3bf 8f6f 	isb	sy
}
   10bde:	b003      	add	sp, #12
   10be0:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && cnt == 0) {
   10be2:	4b11      	ldr	r3, [pc, #68]	; (10c28 <msg_finalize+0xb4>)
   10be4:	681b      	ldr	r3, [r3, #0]
   10be6:	2b00      	cmp	r3, #0
   10be8:	d0f9      	beq.n	10bde <msg_finalize+0x6a>
   10bea:	b952      	cbnz	r2, 10c02 <msg_finalize+0x8e>
	z_impl_k_timer_start(timer, duration, period);
   10bec:	2200      	movs	r2, #0
   10bee:	2300      	movs	r3, #0
   10bf0:	e9cd 2300 	strd	r2, r3, [sp]
   10bf4:	480d      	ldr	r0, [pc, #52]	; (10c2c <msg_finalize+0xb8>)
   10bf6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   10bfa:	2300      	movs	r3, #0
   10bfc:	f00d fb20 	bl	1e240 <z_impl_k_timer_start>
   10c00:	e7ed      	b.n	10bde <msg_finalize+0x6a>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   10c02:	2a0a      	cmp	r2, #10
   10c04:	d1eb      	bne.n	10bde <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
   10c06:	4809      	ldr	r0, [pc, #36]	; (10c2c <msg_finalize+0xb8>)
   10c08:	f012 f9d8 	bl	22fbc <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   10c0c:	4808      	ldr	r0, [pc, #32]	; (10c30 <msg_finalize+0xbc>)
}
   10c0e:	b003      	add	sp, #12
   10c10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   10c14:	f00c bbba 	b.w	1d38c <z_impl_k_sem_give>
   10c18:	2000041c 	.word	0x2000041c
   10c1c:	20002134 	.word	0x20002134
   10c20:	20002128 	.word	0x20002128
   10c24:	200027f1 	.word	0x200027f1
   10c28:	20002158 	.word	0x20002158
   10c2c:	200015f8 	.word	0x200015f8
   10c30:	2000077c 	.word	0x2000077c

00010c34 <log_process_thread_func>:
{
   10c34:	b510      	push	{r4, lr}
	log_init();
   10c36:	f7ff fe0b 	bl	10850 <log_init>
	return z_impl_z_current_get();
   10c3a:	f00d f8c5 	bl	1ddc8 <z_impl_z_current_get>
	proc_tid = process_tid;
   10c3e:	4b0c      	ldr	r3, [pc, #48]	; (10c70 <log_process_thread_func+0x3c>)
   10c40:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   10c42:	b130      	cbz	r0, 10c52 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   10c44:	4b0b      	ldr	r3, [pc, #44]	; (10c74 <log_process_thread_func+0x40>)
	    process_tid &&
   10c46:	681b      	ldr	r3, [r3, #0]
   10c48:	2b09      	cmp	r3, #9
   10c4a:	dd02      	ble.n	10c52 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
   10c4c:	480a      	ldr	r0, [pc, #40]	; (10c78 <log_process_thread_func+0x44>)
   10c4e:	f00c fb9d 	bl	1d38c <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   10c52:	4c09      	ldr	r4, [pc, #36]	; (10c78 <log_process_thread_func+0x44>)
   10c54:	2000      	movs	r0, #0
   10c56:	f7ff fed9 	bl	10a0c <z_impl_log_process>
		if (log_process(false) == false) {
   10c5a:	2800      	cmp	r0, #0
   10c5c:	d1fa      	bne.n	10c54 <log_process_thread_func+0x20>
   10c5e:	f04f 32ff 	mov.w	r2, #4294967295
   10c62:	f04f 33ff 	mov.w	r3, #4294967295
   10c66:	4620      	mov	r0, r4
   10c68:	f00c fbb6 	bl	1d3d8 <z_impl_k_sem_take>
   10c6c:	e7f2      	b.n	10c54 <log_process_thread_func+0x20>
   10c6e:	bf00      	nop
   10c70:	20002158 	.word	0x20002158
   10c74:	20002128 	.word	0x20002128
   10c78:	2000077c 	.word	0x2000077c

00010c7c <z_impl_log_panic>:
{
   10c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   10c7e:	4f0e      	ldr	r7, [pc, #56]	; (10cb8 <z_impl_log_panic+0x3c>)
   10c80:	783d      	ldrb	r5, [r7, #0]
   10c82:	b975      	cbnz	r5, 10ca2 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
   10c84:	4c0d      	ldr	r4, [pc, #52]	; (10cbc <z_impl_log_panic+0x40>)
   10c86:	4e0e      	ldr	r6, [pc, #56]	; (10cc0 <z_impl_log_panic+0x44>)
	log_init();
   10c88:	f7ff fde2 	bl	10850 <log_init>
   10c8c:	1b36      	subs	r6, r6, r4
   10c8e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   10c90:	42b5      	cmp	r5, r6
   10c92:	db07      	blt.n	10ca4 <z_impl_log_panic+0x28>
   10c94:	2000      	movs	r0, #0
   10c96:	f7ff feb9 	bl	10a0c <z_impl_log_process>
		while (log_process(false) == true) {
   10c9a:	2800      	cmp	r0, #0
   10c9c:	d1fa      	bne.n	10c94 <z_impl_log_panic+0x18>
	panic_mode = true;
   10c9e:	2301      	movs	r3, #1
   10ca0:	703b      	strb	r3, [r7, #0]
}
   10ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   10ca4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   10ca6:	795b      	ldrb	r3, [r3, #5]
   10ca8:	b11b      	cbz	r3, 10cb2 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
   10caa:	6823      	ldr	r3, [r4, #0]
   10cac:	4620      	mov	r0, r4
   10cae:	695b      	ldr	r3, [r3, #20]
   10cb0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   10cb2:	3501      	adds	r5, #1
   10cb4:	3410      	adds	r4, #16
   10cb6:	e7eb      	b.n	10c90 <z_impl_log_panic+0x14>
   10cb8:	200027f1 	.word	0x200027f1
   10cbc:	000235f0 	.word	0x000235f0
   10cc0:	00023610 	.word	0x00023610

00010cc4 <z_log_free>:
{
   10cc4:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   10cc6:	3804      	subs	r0, #4
   10cc8:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   10cca:	f3bf 8f5b 	dmb	ish
   10cce:	e850 3f00 	ldrex	r3, [r0]
   10cd2:	1e5a      	subs	r2, r3, #1
   10cd4:	e840 2100 	strex	r1, r2, [r0]
   10cd8:	2900      	cmp	r1, #0
   10cda:	d1f8      	bne.n	10cce <z_log_free+0xa>
   10cdc:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
   10ce0:	2b01      	cmp	r3, #1
   10ce2:	d103      	bne.n	10cec <z_log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   10ce4:	4803      	ldr	r0, [pc, #12]	; (10cf4 <z_log_free+0x30>)
   10ce6:	a901      	add	r1, sp, #4
   10ce8:	f011 fdaf 	bl	2284a <k_mem_slab_free>
}
   10cec:	b003      	add	sp, #12
   10cee:	f85d fb04 	ldr.w	pc, [sp], #4
   10cf2:	bf00      	nop
   10cf4:	2000213c 	.word	0x2000213c

00010cf8 <z_log_runtime_filters_init>:
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   10cf8:	480b      	ldr	r0, [pc, #44]	; (10d28 <z_log_runtime_filters_init+0x30>)
   10cfa:	4b0c      	ldr	r3, [pc, #48]	; (10d2c <z_log_runtime_filters_init+0x34>)
{
	return __log_const_start[source_id].level;
}

void z_log_runtime_filters_init(void)
{
   10cfc:	b530      	push	{r4, r5, lr}
   10cfe:	1a1b      	subs	r3, r3, r0
   10d00:	4c0b      	ldr	r4, [pc, #44]	; (10d30 <z_log_runtime_filters_init+0x38>)
   10d02:	08db      	lsrs	r3, r3, #3
	 *
	 * Each log source's aggregated runtime level is set to match its
	 * compile-time level. When backends are attached later on in
	 * log_init(), they'll be initialized to the same value.
	 */
	for (int i = 0; i < z_log_sources_count(); i++) {
   10d04:	2100      	movs	r1, #0
	return __log_const_start[source_id].level;
   10d06:	3004      	adds	r0, #4
	for (int i = 0; i < z_log_sources_count(); i++) {
   10d08:	4299      	cmp	r1, r3
   10d0a:	d100      	bne.n	10d0e <z_log_runtime_filters_init+0x16>

		LOG_FILTER_SLOT_SET(filters,
				    LOG_FILTER_AGGR_SLOT_IDX,
				    level);
	}
}
   10d0c:	bd30      	pop	{r4, r5, pc}
		LOG_FILTER_SLOT_SET(filters,
   10d0e:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
   10d12:	6825      	ldr	r5, [r4, #0]
   10d14:	f002 0207 	and.w	r2, r2, #7
   10d18:	f025 0507 	bic.w	r5, r5, #7
   10d1c:	432a      	orrs	r2, r5
   10d1e:	f844 2b04 	str.w	r2, [r4], #4
	for (int i = 0; i < z_log_sources_count(); i++) {
   10d22:	3101      	adds	r1, #1
   10d24:	e7f0      	b.n	10d08 <z_log_runtime_filters_init+0x10>
   10d26:	bf00      	nop
   10d28:	00023520 	.word	0x00023520
   10d2c:	000235f0 	.word	0x000235f0
   10d30:	20000654 	.word	0x20000654

00010d34 <log_source_name_get>:
   10d34:	4a04      	ldr	r2, [pc, #16]	; (10d48 <log_source_name_get+0x14>)
   10d36:	4b05      	ldr	r3, [pc, #20]	; (10d4c <log_source_name_get+0x18>)
   10d38:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   10d3a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   10d3e:	bf34      	ite	cc
   10d40:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   10d44:	2000      	movcs	r0, #0
}
   10d46:	4770      	bx	lr
   10d48:	00023520 	.word	0x00023520
   10d4c:	000235f0 	.word	0x000235f0

00010d50 <z_impl_log_filter_set>:
}

uint32_t z_impl_log_filter_set(struct log_backend const *const backend,
			       uint32_t domain_id, int16_t source_id,
			       uint32_t level)
{
   10d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10d54:	4689      	mov	r9, r1
   10d56:	4616      	mov	r6, r2
   10d58:	4698      	mov	r8, r3
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING)) {
		uint32_t new_aggr_filter;

		uint32_t *filters = z_log_dynamic_filters_get(source_id);

		if (backend == NULL) {
   10d5a:	4604      	mov	r4, r0
   10d5c:	b9b0      	cbnz	r0, 10d8c <z_impl_log_filter_set+0x3c>
	return __log_backends_end - __log_backends_start;
   10d5e:	4b21      	ldr	r3, [pc, #132]	; (10de4 <z_impl_log_filter_set+0x94>)
   10d60:	4f21      	ldr	r7, [pc, #132]	; (10de8 <z_impl_log_filter_set+0x98>)
   10d62:	1aff      	subs	r7, r7, r3
   10d64:	113f      	asrs	r7, r7, #4
			struct log_backend const *iter_backend;
			uint32_t max = 0U;
   10d66:	4605      	mov	r5, r0
   10d68:	469a      	mov	sl, r3
			uint32_t current;

			for (int i = 0; i < log_backend_count_get(); i++) {
   10d6a:	42bc      	cmp	r4, r7
   10d6c:	db02      	blt.n	10d74 <z_impl_log_filter_set+0x24>
					    new_aggr_filter);
		}
	}

	return level;
}
   10d6e:	4628      	mov	r0, r5
   10d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		/* coverity[OVERRUN] */
		return (uint32_t) arch_syscall_invoke4(*(uintptr_t *)&backend, *(uintptr_t *)&domain_id, *(uintptr_t *)&source_id, *(uintptr_t *)&level, K_SYSCALL_LOG_FILTER_SET);
	}
#endif
	compiler_barrier();
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
   10d74:	eb0a 1004 	add.w	r0, sl, r4, lsl #4
   10d78:	4643      	mov	r3, r8
   10d7a:	4632      	mov	r2, r6
   10d7c:	4649      	mov	r1, r9
   10d7e:	f7ff ffe7 	bl	10d50 <z_impl_log_filter_set>
				max = MAX(current, max);
   10d82:	4285      	cmp	r5, r0
   10d84:	bf38      	it	cc
   10d86:	4605      	movcc	r5, r0
			for (int i = 0; i < log_backend_count_get(); i++) {
   10d88:	3401      	adds	r4, #1
   10d8a:	e7ee      	b.n	10d6a <z_impl_log_filter_set+0x1a>
	return __log_const_start[source_id].level;
   10d8c:	4b17      	ldr	r3, [pc, #92]	; (10dec <z_impl_log_filter_set+0x9c>)
			LOG_FILTER_SLOT_SET(filters,
   10d8e:	4918      	ldr	r1, [pc, #96]	; (10df0 <z_impl_log_filter_set+0xa0>)
	return __log_const_start[source_id].level;
   10d90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3

		return LOG_FILTER_SLOT_GET(filters,
					   log_backend_id_get(backend));
	}

	return log_compiled_level_get(source_id);
   10d94:	791d      	ldrb	r5, [r3, #4]
	return backend->cb->id;
   10d96:	6843      	ldr	r3, [r0, #4]
			LOG_FILTER_SLOT_SET(filters,
   10d98:	791a      	ldrb	r2, [r3, #4]
   10d9a:	2307      	movs	r3, #7
   10d9c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   10da0:	fa03 f002 	lsl.w	r0, r3, r2
			level = MIN(level, max);
   10da4:	4545      	cmp	r5, r8
			LOG_FILTER_SLOT_SET(filters,
   10da6:	f851 3026 	ldr.w	r3, [r1, r6, lsl #2]
			level = MIN(level, max);
   10daa:	bf28      	it	cs
   10dac:	4645      	movcs	r5, r8
			LOG_FILTER_SLOT_SET(filters,
   10dae:	ea23 0300 	bic.w	r3, r3, r0
   10db2:	f005 0007 	and.w	r0, r5, #7
   10db6:	fa00 f202 	lsl.w	r2, r0, r2
   10dba:	4313      	orrs	r3, r2
	uint32_t max_filter = LOG_LEVEL_NONE;
   10dbc:	2000      	movs	r0, #0
			LOG_FILTER_SLOT_SET(filters,
   10dbe:	2203      	movs	r2, #3
		uint32_t tmp_filter = LOG_FILTER_SLOT_GET(&filters, i);
   10dc0:	fa23 f402 	lsr.w	r4, r3, r2
   10dc4:	f004 0407 	and.w	r4, r4, #7
   10dc8:	42a0      	cmp	r0, r4
   10dca:	f102 0203 	add.w	r2, r2, #3
   10dce:	bf38      	it	cc
   10dd0:	4620      	movcc	r0, r4
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
   10dd2:	2a1e      	cmp	r2, #30
   10dd4:	d1f4      	bne.n	10dc0 <z_impl_log_filter_set+0x70>
			LOG_FILTER_SLOT_SET(filters,
   10dd6:	f023 0307 	bic.w	r3, r3, #7
   10dda:	4303      	orrs	r3, r0
   10ddc:	f841 3026 	str.w	r3, [r1, r6, lsl #2]
	return level;
   10de0:	e7c5      	b.n	10d6e <z_impl_log_filter_set+0x1e>
   10de2:	bf00      	nop
   10de4:	000235f0 	.word	0x000235f0
   10de8:	00023610 	.word	0x00023610
   10dec:	00023520 	.word	0x00023520
   10df0:	20000654 	.word	0x20000654

00010df4 <backend_filter_set>:
{
   10df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10df6:	4c09      	ldr	r4, [pc, #36]	; (10e1c <backend_filter_set+0x28>)
   10df8:	4b09      	ldr	r3, [pc, #36]	; (10e20 <backend_filter_set+0x2c>)
   10dfa:	1ae4      	subs	r4, r4, r3
   10dfc:	4606      	mov	r6, r0
   10dfe:	460f      	mov	r7, r1
   10e00:	08e4      	lsrs	r4, r4, #3
		for (int i = 0; i < z_log_sources_count(); i++) {
   10e02:	2500      	movs	r5, #0
   10e04:	42a5      	cmp	r5, r4
   10e06:	d100      	bne.n	10e0a <backend_filter_set+0x16>
}
   10e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10e0a:	2100      	movs	r1, #0
   10e0c:	b22a      	sxth	r2, r5
   10e0e:	463b      	mov	r3, r7
   10e10:	4630      	mov	r0, r6
   10e12:	f7ff ff9d 	bl	10d50 <z_impl_log_filter_set>
		for (int i = 0; i < z_log_sources_count(); i++) {
   10e16:	3501      	adds	r5, #1
   10e18:	e7f4      	b.n	10e04 <backend_filter_set+0x10>
   10e1a:	bf00      	nop
   10e1c:	000235f0 	.word	0x000235f0
   10e20:	00023520 	.word	0x00023520

00010e24 <log_backend_enable>:
	id += backend - log_backend_get(0);
   10e24:	4b09      	ldr	r3, [pc, #36]	; (10e4c <log_backend_enable+0x28>)
   10e26:	1ac3      	subs	r3, r0, r3
{
   10e28:	b570      	push	{r4, r5, r6, lr}
	id += backend - log_backend_get(0);
   10e2a:	111b      	asrs	r3, r3, #4
	log_backend_id_set(backend, id);
   10e2c:	6846      	ldr	r6, [r0, #4]
{
   10e2e:	4604      	mov	r4, r0
	id += backend - log_backend_get(0);
   10e30:	3301      	adds	r3, #1
{
   10e32:	460d      	mov	r5, r1
	log_backend_id_set(backend, id);
   10e34:	7133      	strb	r3, [r6, #4]
	backend_filter_set(backend, level);
   10e36:	4611      	mov	r1, r2
   10e38:	f7ff ffdc 	bl	10df4 <backend_filter_set>
	log_backend_activate(backend, ctx);
   10e3c:	6863      	ldr	r3, [r4, #4]
	backend->cb->active = true;
   10e3e:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
   10e40:	601d      	str	r5, [r3, #0]
	backend->cb->active = true;
   10e42:	715a      	strb	r2, [r3, #5]
}
   10e44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
   10e48:	f7ff bd42 	b.w	108d0 <z_log_notify_backend_enabled>
   10e4c:	000235f0 	.word	0x000235f0

00010e50 <log_filter_get>:
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
   10e50:	b163      	cbz	r3, 10e6c <log_filter_get+0x1c>
		if (source_id < 0) {
   10e52:	2a00      	cmp	r2, #0
   10e54:	db0f      	blt.n	10e76 <log_filter_get+0x26>
	return backend->cb->id;
   10e56:	6843      	ldr	r3, [r0, #4]
		return LOG_FILTER_SLOT_GET(filters,
   10e58:	4908      	ldr	r1, [pc, #32]	; (10e7c <log_filter_get+0x2c>)
   10e5a:	7918      	ldrb	r0, [r3, #4]
   10e5c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   10e60:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
   10e64:	40d8      	lsrs	r0, r3
   10e66:	f000 0007 	and.w	r0, r0, #7
   10e6a:	4770      	bx	lr
	return __log_const_start[source_id].level;
   10e6c:	4b04      	ldr	r3, [pc, #16]	; (10e80 <log_filter_get+0x30>)
   10e6e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
	return log_compiled_level_get(source_id);
   10e72:	7910      	ldrb	r0, [r2, #4]
   10e74:	4770      	bx	lr
			return LOG_LEVEL_DBG;
   10e76:	2004      	movs	r0, #4
}
   10e78:	4770      	bx	lr
   10e7a:	bf00      	nop
   10e7c:	20000654 	.word	0x20000654
   10e80:	00023520 	.word	0x00023520

00010e84 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   10e84:	2320      	movs	r3, #32
   10e86:	4902      	ldr	r1, [pc, #8]	; (10e90 <log_msg_pool_init+0xc>)
   10e88:	4802      	ldr	r0, [pc, #8]	; (10e94 <log_msg_pool_init+0x10>)
   10e8a:	461a      	mov	r2, r3
   10e8c:	f011 bcc2 	b.w	22814 <k_mem_slab_init>
   10e90:	20006928 	.word	0x20006928
   10e94:	2000215c 	.word	0x2000215c

00010e98 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
   10e98:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
   10e9a:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   10e9c:	4d09      	ldr	r5, [pc, #36]	; (10ec4 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   10e9e:	9301      	str	r3, [sp, #4]
	return z_impl_log_process(bypass);
   10ea0:	2001      	movs	r0, #1
   10ea2:	f7ff fdb3 	bl	10a0c <z_impl_log_process>
   10ea6:	4604      	mov	r4, r0
			z_log_dropped();
   10ea8:	f7ff fd20 	bl	108ec <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   10eac:	2200      	movs	r2, #0
   10eae:	2300      	movs	r3, #0
   10eb0:	a901      	add	r1, sp, #4
   10eb2:	4628      	mov	r0, r5
   10eb4:	f00b fefa 	bl	1ccac <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   10eb8:	b108      	cbz	r0, 10ebe <log_msg_no_space_handle+0x26>
   10eba:	2c00      	cmp	r4, #0
   10ebc:	d1f0      	bne.n	10ea0 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   10ebe:	9801      	ldr	r0, [sp, #4]
   10ec0:	b003      	add	sp, #12
   10ec2:	bd30      	pop	{r4, r5, pc}
   10ec4:	2000215c 	.word	0x2000215c

00010ec8 <log_msg_chunk_alloc>:
{
   10ec8:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
   10eca:	2300      	movs	r3, #0
   10ecc:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   10ece:	4807      	ldr	r0, [pc, #28]	; (10eec <log_msg_chunk_alloc+0x24>)
   10ed0:	2200      	movs	r2, #0
   10ed2:	2300      	movs	r3, #0
   10ed4:	a901      	add	r1, sp, #4
   10ed6:	f00b fee9 	bl	1ccac <k_mem_slab_alloc>
	if (err != 0) {
   10eda:	b110      	cbz	r0, 10ee2 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   10edc:	f7ff ffdc 	bl	10e98 <log_msg_no_space_handle>
   10ee0:	9001      	str	r0, [sp, #4]
}
   10ee2:	9801      	ldr	r0, [sp, #4]
   10ee4:	b003      	add	sp, #12
   10ee6:	f85d fb04 	ldr.w	pc, [sp], #4
   10eea:	bf00      	nop
   10eec:	2000215c 	.word	0x2000215c

00010ef0 <msg_free>:
{
   10ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   10ef2:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   10ef4:	7a45      	ldrb	r5, [r0, #9]
{
   10ef6:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
   10ef8:	092d      	lsrs	r5, r5, #4
{
   10efa:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   10efc:	07d8      	lsls	r0, r3, #31
   10efe:	d41c      	bmi.n	10f3a <msg_free+0x4a>
   10f00:	b1dd      	cbz	r5, 10f3a <msg_free+0x4a>
		uint32_t smask = 0U;
   10f02:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
   10f04:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   10f06:	9801      	ldr	r0, [sp, #4]
   10f08:	4631      	mov	r1, r6
   10f0a:	f00e f8ed 	bl	1f0e8 <log_msg_arg_get>
   10f0e:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   10f10:	f7ff fd6c 	bl	109ec <log_is_strdup>
   10f14:	b170      	cbz	r0, 10f34 <msg_free+0x44>
				if (smask == 0U) {
   10f16:	b934      	cbnz	r4, 10f26 <msg_free+0x36>
					smask = z_log_get_s_mask(
   10f18:	9b01      	ldr	r3, [sp, #4]
   10f1a:	4629      	mov	r1, r5
   10f1c:	6918      	ldr	r0, [r3, #16]
   10f1e:	f00d ffea 	bl	1eef6 <z_log_get_s_mask>
					if (smask == 0U) {
   10f22:	4604      	mov	r4, r0
   10f24:	b148      	cbz	r0, 10f3a <msg_free+0x4a>
				if (smask & BIT(i)) {
   10f26:	fa24 f306 	lsr.w	r3, r4, r6
   10f2a:	07d9      	lsls	r1, r3, #31
   10f2c:	d502      	bpl.n	10f34 <msg_free+0x44>
					z_log_free(buf);
   10f2e:	4638      	mov	r0, r7
   10f30:	f7ff fec8 	bl	10cc4 <z_log_free>
		for (i = 0U; i < nargs; i++) {
   10f34:	3601      	adds	r6, #1
   10f36:	42ae      	cmp	r6, r5
   10f38:	d3e5      	bcc.n	10f06 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
   10f3a:	9b01      	ldr	r3, [sp, #4]
   10f3c:	7a1a      	ldrb	r2, [r3, #8]
   10f3e:	0792      	lsls	r2, r2, #30
   10f40:	d504      	bpl.n	10f4c <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
   10f42:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   10f44:	4c08      	ldr	r4, [pc, #32]	; (10f68 <msg_free+0x78>)
   10f46:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   10f48:	9b03      	ldr	r3, [sp, #12]
   10f4a:	b92b      	cbnz	r3, 10f58 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   10f4c:	4806      	ldr	r0, [pc, #24]	; (10f68 <msg_free+0x78>)
   10f4e:	a901      	add	r1, sp, #4
   10f50:	f011 fc7b 	bl	2284a <k_mem_slab_free>
}
   10f54:	b005      	add	sp, #20
   10f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   10f58:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   10f5a:	a903      	add	r1, sp, #12
   10f5c:	4620      	mov	r0, r4
   10f5e:	f011 fc74 	bl	2284a <k_mem_slab_free>
		cont = next;
   10f62:	9503      	str	r5, [sp, #12]
   10f64:	e7f0      	b.n	10f48 <msg_free+0x58>
   10f66:	bf00      	nop
   10f68:	2000215c 	.word	0x2000215c

00010f6c <log_msg_mem_get_free>:
	return slab->num_blocks - slab->num_used;
   10f6c:	4b02      	ldr	r3, [pc, #8]	; (10f78 <log_msg_mem_get_free+0xc>)
   10f6e:	6898      	ldr	r0, [r3, #8]
   10f70:	699b      	ldr	r3, [r3, #24]
}

uint32_t log_msg_mem_get_free(void)
{
	return k_mem_slab_num_free_get(&log_msg_pool);
}
   10f72:	1ac0      	subs	r0, r0, r3
   10f74:	4770      	bx	lr
   10f76:	bf00      	nop
   10f78:	2000215c 	.word	0x2000215c

00010f7c <log_msg_mem_get_used>:

uint32_t log_msg_mem_get_used(void)
{
	return k_mem_slab_num_used_get(&log_msg_pool);
}
   10f7c:	4b01      	ldr	r3, [pc, #4]	; (10f84 <log_msg_mem_get_used+0x8>)
   10f7e:	6998      	ldr	r0, [r3, #24]
   10f80:	4770      	bx	lr
   10f82:	bf00      	nop
   10f84:	2000215c 	.word	0x2000215c

00010f88 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   10f88:	b40e      	push	{r1, r2, r3}
   10f8a:	b503      	push	{r0, r1, lr}
   10f8c:	ab03      	add	r3, sp, #12
   10f8e:	4601      	mov	r1, r0
   10f90:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   10f94:	4804      	ldr	r0, [pc, #16]	; (10fa8 <print_formatted+0x20>)
	va_start(args, fmt);
   10f96:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   10f98:	f7ff f828 	bl	ffec <cbvprintf>
	va_end(args);

	return length;
}
   10f9c:	b002      	add	sp, #8
   10f9e:	f85d eb04 	ldr.w	lr, [sp], #4
   10fa2:	b003      	add	sp, #12
   10fa4:	4770      	bx	lr
   10fa6:	bf00      	nop
   10fa8:	0001f59b 	.word	0x0001f59b

00010fac <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   10fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fb0:	b087      	sub	sp, #28
   10fb2:	461f      	mov	r7, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   10fb4:	f001 0301 	and.w	r3, r1, #1
{
   10fb8:	9205      	str	r2, [sp, #20]
   10fba:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
   10fbe:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   10fc2:	9304      	str	r3, [sp, #16]
{
   10fc4:	4606      	mov	r6, r0
   10fc6:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   10fc8:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   10fcc:	f001 0508 	and.w	r5, r1, #8
	const char *tag = z_log_get_tag();
   10fd0:	f00e f81d 	bl	1f00e <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   10fd4:	4602      	mov	r2, r0
   10fd6:	2800      	cmp	r0, #0
   10fd8:	d044      	beq.n	11064 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
   10fda:	4939      	ldr	r1, [pc, #228]	; (110c0 <prefix_print+0x114>)
   10fdc:	4630      	mov	r0, r6
   10fde:	f7ff ffd3 	bl	10f88 <print_formatted>
   10fe2:	4604      	mov	r4, r0
	}

	if (stamp) {
   10fe4:	f1bb 0f00 	cmp.w	fp, #0
   10fe8:	d008      	beq.n	10ffc <prefix_print+0x50>
	if (!format) {
   10fea:	f018 0f44 	tst.w	r8, #68	; 0x44
   10fee:	d13b      	bne.n	11068 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
   10ff0:	4934      	ldr	r1, [pc, #208]	; (110c4 <prefix_print+0x118>)
   10ff2:	463a      	mov	r2, r7
   10ff4:	4630      	mov	r0, r6
   10ff6:	f7ff ffc7 	bl	10f88 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   10ffa:	4404      	add	r4, r0
	if (color) {
   10ffc:	9b04      	ldr	r3, [sp, #16]
   10ffe:	b153      	cbz	r3, 11016 <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
   11000:	4b31      	ldr	r3, [pc, #196]	; (110c8 <prefix_print+0x11c>)
		print_formatted(output, "%s", log_color);
   11002:	4932      	ldr	r1, [pc, #200]	; (110cc <prefix_print+0x120>)
		const char *log_color = start && (colors[level] != NULL) ?
   11004:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
   11008:	4b31      	ldr	r3, [pc, #196]	; (110d0 <prefix_print+0x124>)
   1100a:	4630      	mov	r0, r6
   1100c:	2a00      	cmp	r2, #0
   1100e:	bf08      	it	eq
   11010:	461a      	moveq	r2, r3
   11012:	f7ff ffb9 	bl	10f88 <print_formatted>
	if (level_on) {
   11016:	b13d      	cbz	r5, 11028 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
   11018:	4b2e      	ldr	r3, [pc, #184]	; (110d4 <prefix_print+0x128>)
   1101a:	492f      	ldr	r1, [pc, #188]	; (110d8 <prefix_print+0x12c>)
   1101c:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
   11020:	4630      	mov	r0, r6
   11022:	f7ff ffb1 	bl	10f88 <print_formatted>
   11026:	4605      	mov	r5, r0
	if (source_id >= 0) {
   11028:	f1ba 0f00 	cmp.w	sl, #0
   1102c:	db16      	blt.n	1105c <prefix_print+0xb0>
		total += print_formatted(output,
   1102e:	9b05      	ldr	r3, [sp, #20]
   11030:	2b00      	cmp	r3, #0
   11032:	d043      	beq.n	110bc <prefix_print+0x110>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   11034:	2301      	movs	r3, #1
   11036:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
   1103a:	4b28      	ldr	r3, [pc, #160]	; (110dc <prefix_print+0x130>)
   1103c:	4f28      	ldr	r7, [pc, #160]	; (110e0 <prefix_print+0x134>)
   1103e:	f019 0f10 	tst.w	r9, #16
   11042:	bf18      	it	ne
   11044:	461f      	movne	r7, r3
   11046:	4651      	mov	r1, sl
   11048:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   1104c:	f7ff fe72 	bl	10d34 <log_source_name_get>
   11050:	4639      	mov	r1, r7
   11052:	4602      	mov	r2, r0
   11054:	4630      	mov	r0, r6
   11056:	f7ff ff97 	bl	10f88 <print_formatted>
   1105a:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
   1105c:	1928      	adds	r0, r5, r4
   1105e:	b007      	add	sp, #28
   11060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   11064:	4604      	mov	r4, r0
   11066:	e7bd      	b.n	10fe4 <prefix_print+0x38>
	} else if (freq != 0U) {
   11068:	4b1e      	ldr	r3, [pc, #120]	; (110e4 <prefix_print+0x138>)
   1106a:	6818      	ldr	r0, [r3, #0]
   1106c:	2800      	cmp	r0, #0
   1106e:	d0c4      	beq.n	10ffa <prefix_print+0x4e>
		timestamp /= timestamp_div;
   11070:	4b1d      	ldr	r3, [pc, #116]	; (110e8 <prefix_print+0x13c>)
   11072:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
   11076:	6819      	ldr	r1, [r3, #0]
   11078:	fbb7 f7f1 	udiv	r7, r7, r1
		total_seconds = timestamp / freq;
   1107c:	fbb7 f1f0 	udiv	r1, r7, r0
		remainder = timestamp % freq;
   11080:	fb00 7711 	mls	r7, r0, r1, r7
   11084:	fbb1 f2fc 	udiv	r2, r1, ip
   11088:	fb0c 1c12 	mls	ip, ip, r2, r1
		ms = (remainder * 1000U) / freq;
   1108c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   11090:	434f      	muls	r7, r1
		mins = seconds / 60U;
   11092:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   11096:	fbb7 f8f0 	udiv	r8, r7, r0
   1109a:	fb00 7718 	mls	r7, r0, r8, r7
   1109e:	434f      	muls	r7, r1
		mins = seconds / 60U;
   110a0:	fbbc f3fe 	udiv	r3, ip, lr
			length = print_formatted(output,
   110a4:	fb0e c113 	mls	r1, lr, r3, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   110a8:	fbb7 f0f0 	udiv	r0, r7, r0
			length = print_formatted(output,
   110ac:	9100      	str	r1, [sp, #0]
   110ae:	e9cd 8001 	strd	r8, r0, [sp, #4]
   110b2:	490e      	ldr	r1, [pc, #56]	; (110ec <prefix_print+0x140>)
   110b4:	4630      	mov	r0, r6
   110b6:	f7ff ff67 	bl	10f88 <print_formatted>
   110ba:	e79e      	b.n	10ffa <prefix_print+0x4e>
		total += print_formatted(output,
   110bc:	4f08      	ldr	r7, [pc, #32]	; (110e0 <prefix_print+0x134>)
   110be:	e7c2      	b.n	11046 <prefix_print+0x9a>
   110c0:	000247e9 	.word	0x000247e9
   110c4:	000247ed 	.word	0x000247ed
   110c8:	000238dc 	.word	0x000238dc
   110cc:	00024e7a 	.word	0x00024e7a
   110d0:	000247db 	.word	0x000247db
   110d4:	000238f0 	.word	0x000238f0
   110d8:	00024812 	.word	0x00024812
   110dc:	000247e5 	.word	0x000247e5
   110e0:	000247e0 	.word	0x000247e0
   110e4:	20002178 	.word	0x20002178
   110e8:	2000217c 	.word	0x2000217c
   110ec:	000247f6 	.word	0x000247f6

000110f0 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
   110f0:	b538      	push	{r3, r4, r5, lr}
   110f2:	460c      	mov	r4, r1
	if (color) {
   110f4:	07e1      	lsls	r1, r4, #31
{
   110f6:	4605      	mov	r5, r0
	if (color) {
   110f8:	d503      	bpl.n	11102 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
   110fa:	4a08      	ldr	r2, [pc, #32]	; (1111c <postfix_print+0x2c>)
   110fc:	4908      	ldr	r1, [pc, #32]	; (11120 <postfix_print+0x30>)
   110fe:	f7ff ff43 	bl	10f88 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   11102:	06e2      	lsls	r2, r4, #27
   11104:	d408      	bmi.n	11118 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   11106:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   11108:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
   1110a:	bf4c      	ite	mi
   1110c:	4905      	ldrmi	r1, [pc, #20]	; (11124 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   1110e:	4906      	ldrpl	r1, [pc, #24]	; (11128 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
   11110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
   11114:	f7ff bf38 	b.w	10f88 <print_formatted>
}
   11118:	bd38      	pop	{r3, r4, r5, pc}
   1111a:	bf00      	nop
   1111c:	000247db 	.word	0x000247db
   11120:	00024e7a 	.word	0x00024e7a
   11124:	00024484 	.word	0x00024484
   11128:	0002490b 	.word	0x0002490b

0001112c <hexdump_line_print>:
{
   1112c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11130:	461d      	mov	r5, r3
   11132:	9b08      	ldr	r3, [sp, #32]
   11134:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   11136:	06da      	lsls	r2, r3, #27
{
   11138:	4604      	mov	r4, r0
   1113a:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1113c:	d405      	bmi.n	1114a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1113e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   11140:	bf4c      	ite	mi
   11142:	492a      	ldrmi	r1, [pc, #168]	; (111ec <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
   11144:	492a      	ldrpl	r1, [pc, #168]	; (111f0 <hexdump_line_print+0xc4>)
   11146:	f7ff ff1f 	bl	10f88 <print_formatted>
		print_formatted(output, " ");
   1114a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 111f8 <hexdump_line_print+0xcc>
{
   1114e:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
   11152:	45a8      	cmp	r8, r5
   11154:	db2a      	blt.n	111ac <hexdump_line_print+0x80>
			print_formatted(output, "   ");
   11156:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 111fc <hexdump_line_print+0xd0>
			print_formatted(output, "%02x ", data[i]);
   1115a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 11200 <hexdump_line_print+0xd4>
			print_formatted(output, " ");
   1115e:	f8df a098 	ldr.w	sl, [pc, #152]	; 111f8 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11162:	2500      	movs	r5, #0
		if (i < length) {
   11164:	42bd      	cmp	r5, r7
   11166:	d22f      	bcs.n	111c8 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
   11168:	5d72      	ldrb	r2, [r6, r5]
   1116a:	4649      	mov	r1, r9
   1116c:	4620      	mov	r0, r4
   1116e:	f7ff ff0b 	bl	10f88 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11172:	3501      	adds	r5, #1
   11174:	2d10      	cmp	r5, #16
   11176:	d120      	bne.n	111ba <hexdump_line_print+0x8e>
	print_formatted(output, "|");
   11178:	491e      	ldr	r1, [pc, #120]	; (111f4 <hexdump_line_print+0xc8>)
			print_formatted(output, " ");
   1117a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 111f8 <hexdump_line_print+0xcc>
			print_formatted(output, "%c",
   1117e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 11204 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
   11182:	4620      	mov	r0, r4
   11184:	f7ff ff00 	bl	10f88 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11188:	2500      	movs	r5, #0
		if (i < length) {
   1118a:	42af      	cmp	r7, r5
   1118c:	d928      	bls.n	111e0 <hexdump_line_print+0xb4>
			char c = (char)data[i];
   1118e:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
   11190:	f1a2 0320 	sub.w	r3, r2, #32
   11194:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
   11196:	bf28      	it	cs
   11198:	222e      	movcs	r2, #46	; 0x2e
   1119a:	4649      	mov	r1, r9
   1119c:	4620      	mov	r0, r4
   1119e:	f7ff fef3 	bl	10f88 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   111a2:	3501      	adds	r5, #1
   111a4:	2d10      	cmp	r5, #16
   111a6:	d114      	bne.n	111d2 <hexdump_line_print+0xa6>
}
   111a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
   111ac:	4649      	mov	r1, r9
   111ae:	4620      	mov	r0, r4
   111b0:	f7ff feea 	bl	10f88 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   111b4:	f108 0801 	add.w	r8, r8, #1
   111b8:	e7cb      	b.n	11152 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   111ba:	076a      	lsls	r2, r5, #29
   111bc:	d1d2      	bne.n	11164 <hexdump_line_print+0x38>
			print_formatted(output, " ");
   111be:	4651      	mov	r1, sl
   111c0:	4620      	mov	r0, r4
   111c2:	f7ff fee1 	bl	10f88 <print_formatted>
   111c6:	e7cd      	b.n	11164 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
   111c8:	4641      	mov	r1, r8
   111ca:	4620      	mov	r0, r4
   111cc:	f7ff fedc 	bl	10f88 <print_formatted>
   111d0:	e7cf      	b.n	11172 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   111d2:	076b      	lsls	r3, r5, #29
   111d4:	d1d9      	bne.n	1118a <hexdump_line_print+0x5e>
			print_formatted(output, " ");
   111d6:	4641      	mov	r1, r8
   111d8:	4620      	mov	r0, r4
   111da:	f7ff fed5 	bl	10f88 <print_formatted>
   111de:	e7d4      	b.n	1118a <hexdump_line_print+0x5e>
			print_formatted(output, " ");
   111e0:	4641      	mov	r1, r8
   111e2:	4620      	mov	r0, r4
   111e4:	f7ff fed0 	bl	10f88 <print_formatted>
   111e8:	e7db      	b.n	111a2 <hexdump_line_print+0x76>
   111ea:	bf00      	nop
   111ec:	00024484 	.word	0x00024484
   111f0:	0002490b 	.word	0x0002490b
   111f4:	00024822 	.word	0x00024822
   111f8:	00024820 	.word	0x00024820
   111fc:	0002481e 	.word	0x0002481e
   11200:	00024818 	.word	0x00024818
   11204:	000253bc 	.word	0x000253bc

00011208 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   11208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   1120c:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
   1120e:	f013 0807 	ands.w	r8, r3, #7
{
   11212:	4617      	mov	r7, r2
   11214:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   11216:	7a0a      	ldrb	r2, [r1, #8]
   11218:	4605      	mov	r5, r0
   1121a:	460e      	mov	r6, r1
			0 : prefix_print(output, flags, std_msg, timestamp,
   1121c:	d021      	beq.n	11262 <log_output_msg_process+0x5a>
	return msg->hdr.ids.source_id;
   1121e:	8949      	ldrh	r1, [r1, #10]
   11220:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   11224:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   11228:	43d2      	mvns	r2, r2
   1122a:	e9cd 8300 	strd	r8, r3, [sp]
   1122e:	9102      	str	r1, [sp, #8]
   11230:	68f3      	ldr	r3, [r6, #12]
   11232:	f002 0201 	and.w	r2, r2, #1
   11236:	4639      	mov	r1, r7
   11238:	f7ff feb8 	bl	10fac <prefix_print>
   1123c:	4681      	mov	r9, r0
   1123e:	7a34      	ldrb	r4, [r6, #8]
   11240:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   11242:	f014 0401 	ands.w	r4, r4, #1
   11246:	d00e      	beq.n	11266 <log_output_msg_process+0x5e>
		std_print(msg, output);
   11248:	4629      	mov	r1, r5
   1124a:	4630      	mov	r0, r6
   1124c:	f00e f83b 	bl	1f2c6 <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
   11250:	f1b8 0f00 	cmp.w	r8, #0
   11254:	d02b      	beq.n	112ae <log_output_msg_process+0xa6>
		postfix_print(output, flags, level);
   11256:	4642      	mov	r2, r8
   11258:	4639      	mov	r1, r7
   1125a:	4628      	mov	r0, r5
   1125c:	f7ff ff48 	bl	110f0 <postfix_print>
   11260:	e025      	b.n	112ae <log_output_msg_process+0xa6>
			0 : prefix_print(output, flags, std_msg, timestamp,
   11262:	46c1      	mov	r9, r8
   11264:	e7eb      	b.n	1123e <log_output_msg_process+0x36>
	} else if (raw_string) {
   11266:	f1b8 0f00 	cmp.w	r8, #0
   1126a:	d126      	bne.n	112ba <log_output_msg_process+0xb2>
	size_t offset = 0;
   1126c:	4627      	mov	r7, r4
		length = output->size;
   1126e:	68eb      	ldr	r3, [r5, #12]
   11270:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   11272:	aa06      	add	r2, sp, #24
   11274:	463b      	mov	r3, r7
   11276:	68a9      	ldr	r1, [r5, #8]
   11278:	4630      	mov	r0, r6
   1127a:	f00e f810 	bl	1f29e <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   1127e:	9a06      	ldr	r2, [sp, #24]
   11280:	686b      	ldr	r3, [r5, #4]
   11282:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   11284:	b13a      	cbz	r2, 11296 <log_output_msg_process+0x8e>
			eol = (output->buf[length - 1] == '\n');
   11286:	68ab      	ldr	r3, [r5, #8]
   11288:	4413      	add	r3, r2
   1128a:	f813 4c01 	ldrb.w	r4, [r3, #-1]
   1128e:	f1a4 030a 	sub.w	r3, r4, #10
   11292:	425c      	negs	r4, r3
   11294:	415c      	adcs	r4, r3
		log_output_flush(output);
   11296:	4628      	mov	r0, r5
   11298:	f00e f972 	bl	1f580 <log_output_flush>
		offset += length;
   1129c:	9b06      	ldr	r3, [sp, #24]
   1129e:	441f      	add	r7, r3
	} while (length > 0);
   112a0:	2b00      	cmp	r3, #0
   112a2:	d1e4      	bne.n	1126e <log_output_msg_process+0x66>
	if (eol) {
   112a4:	b11c      	cbz	r4, 112ae <log_output_msg_process+0xa6>
		print_formatted(output, "\r");
   112a6:	4914      	ldr	r1, [pc, #80]	; (112f8 <log_output_msg_process+0xf0>)
   112a8:	4628      	mov	r0, r5
   112aa:	f7ff fe6d 	bl	10f88 <print_formatted>
	}

	log_output_flush(output);
   112ae:	4628      	mov	r0, r5
   112b0:	f00e f966 	bl	1f580 <log_output_flush>
}
   112b4:	b00a      	add	sp, #40	; 0x28
   112b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(output, "%s", log_msg_str_get(msg));
   112ba:	4630      	mov	r0, r6
   112bc:	f00d ff46 	bl	1f14c <log_msg_str_get>
   112c0:	490e      	ldr	r1, [pc, #56]	; (112fc <log_output_msg_process+0xf4>)
   112c2:	4602      	mov	r2, r0
   112c4:	4628      	mov	r0, r5
   112c6:	f7ff fe5f 	bl	10f88 <print_formatted>
		length = sizeof(buf);
   112ca:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   112ce:	aa05      	add	r2, sp, #20
   112d0:	4623      	mov	r3, r4
   112d2:	a906      	add	r1, sp, #24
   112d4:	4630      	mov	r0, r6
		length = sizeof(buf);
   112d6:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   112da:	f00d ffe0 	bl	1f29e <log_msg_hexdump_data_get>
		if (length) {
   112de:	9a05      	ldr	r2, [sp, #20]
   112e0:	2a00      	cmp	r2, #0
   112e2:	d0b8      	beq.n	11256 <log_output_msg_process+0x4e>
			hexdump_line_print(output, buf, length,
   112e4:	464b      	mov	r3, r9
   112e6:	9700      	str	r7, [sp, #0]
   112e8:	a906      	add	r1, sp, #24
   112ea:	4628      	mov	r0, r5
   112ec:	f7ff ff1e 	bl	1112c <hexdump_line_print>
			offset += length;
   112f0:	9b05      	ldr	r3, [sp, #20]
   112f2:	441c      	add	r4, r3
		length = sizeof(buf);
   112f4:	e7eb      	b.n	112ce <log_output_msg_process+0xc6>
   112f6:	bf00      	nop
   112f8:	00024824 	.word	0x00024824
   112fc:	00024e7a 	.word	0x00024e7a

00011300 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   11300:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   11302:	f242 730f 	movw	r3, #9999	; 0x270f
   11306:	428b      	cmp	r3, r1
   11308:	bf28      	it	cs
   1130a:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   1130c:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1130e:	4a0f      	ldr	r2, [pc, #60]	; (1134c <log_output_dropped_process+0x4c>)
{
   11310:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   11312:	2105      	movs	r1, #5
   11314:	4668      	mov	r0, sp
   11316:	f00d f8e9 	bl	1e4ec <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1131a:	6863      	ldr	r3, [r4, #4]
   1131c:	490c      	ldr	r1, [pc, #48]	; (11350 <log_output_dropped_process+0x50>)
   1131e:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   11320:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   11322:	220b      	movs	r2, #11
   11324:	4628      	mov	r0, r5
   11326:	f00d ffc1 	bl	1f2ac <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   1132a:	6863      	ldr	r3, [r4, #4]
   1132c:	4632      	mov	r2, r6
   1132e:	4669      	mov	r1, sp
   11330:	4628      	mov	r0, r5
   11332:	685b      	ldr	r3, [r3, #4]
   11334:	f00d ffba 	bl	1f2ac <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   11338:	6863      	ldr	r3, [r4, #4]
   1133a:	4906      	ldr	r1, [pc, #24]	; (11354 <log_output_dropped_process+0x54>)
   1133c:	685b      	ldr	r3, [r3, #4]
   1133e:	221b      	movs	r2, #27
   11340:	4628      	mov	r0, r5
   11342:	f00d ffb3 	bl	1f2ac <buffer_write>
		     output->control_block->ctx);
}
   11346:	b002      	add	sp, #8
   11348:	bd70      	pop	{r4, r5, r6, pc}
   1134a:	bf00      	nop
   1134c:	00026dd9 	.word	0x00026dd9
   11350:	00024862 	.word	0x00024862
   11354:	00024846 	.word	0x00024846

00011358 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   11358:	4a08      	ldr	r2, [pc, #32]	; (1137c <log_output_timestamp_freq_set+0x24>)
{
   1135a:	b510      	push	{r4, lr}
	timestamp_div = 1U;
   1135c:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   1135e:	4c08      	ldr	r4, [pc, #32]	; (11380 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   11360:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   11362:	2100      	movs	r1, #0
   11364:	42a0      	cmp	r0, r4
   11366:	d804      	bhi.n	11372 <log_output_timestamp_freq_set+0x1a>
   11368:	b101      	cbz	r1, 1136c <log_output_timestamp_freq_set+0x14>
   1136a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   1136c:	4b05      	ldr	r3, [pc, #20]	; (11384 <log_output_timestamp_freq_set+0x2c>)
   1136e:	6018      	str	r0, [r3, #0]
}
   11370:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   11372:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   11374:	005b      	lsls	r3, r3, #1
   11376:	2101      	movs	r1, #1
   11378:	e7f4      	b.n	11364 <log_output_timestamp_freq_set+0xc>
   1137a:	bf00      	nop
   1137c:	2000217c 	.word	0x2000217c
   11380:	000f4240 	.word	0x000f4240
   11384:	20002178 	.word	0x20002178

00011388 <severity_lvl_get>:
}


static void severity_lvl_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
   11388:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &dsub_module_name;
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
					severity_lvls_sorted[idx] : NULL;
   1138a:	2804      	cmp	r0, #4
	entry->handler = NULL;
   1138c:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
   1138e:	604b      	str	r3, [r1, #4]
					severity_lvls_sorted[idx] : NULL;
   11390:	bf98      	it	ls
   11392:	4b04      	ldrls	r3, [pc, #16]	; (113a4 <severity_lvl_get+0x1c>)
	entry->subcmd = &dsub_module_name;
   11394:	4a04      	ldr	r2, [pc, #16]	; (113a8 <severity_lvl_get+0x20>)
					severity_lvls_sorted[idx] : NULL;
   11396:	bf98      	it	ls
   11398:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	entry->subcmd = &dsub_module_name;
   1139c:	608a      	str	r2, [r1, #8]
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
   1139e:	600b      	str	r3, [r1, #0]
}
   113a0:	4770      	bx	lr
   113a2:	bf00      	nop
   113a4:	00023944 	.word	0x00023944
   113a8:	00023920 	.word	0x00023920

000113ac <backend_name_get>:
	SHELL_SUBCMD_SET_END
);

static void backend_name_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
   113ac:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &sub_log_backend;
   113ae:	4a08      	ldr	r2, [pc, #32]	; (113d0 <backend_name_get+0x24>)
	entry->syntax  = NULL;
   113b0:	600b      	str	r3, [r1, #0]
	entry->handler = NULL;
   113b2:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
   113b4:	604b      	str	r3, [r1, #4]
	entry->subcmd = &sub_log_backend;
   113b6:	608a      	str	r2, [r1, #8]
	return __log_backends_end - __log_backends_start;
   113b8:	4b06      	ldr	r3, [pc, #24]	; (113d4 <backend_name_get+0x28>)
   113ba:	4a07      	ldr	r2, [pc, #28]	; (113d8 <backend_name_get+0x2c>)
   113bc:	1ad2      	subs	r2, r2, r3

	if (idx < log_backend_count_get()) {
   113be:	ebb0 1f22 	cmp.w	r0, r2, asr #4
		const struct log_backend *backend = log_backend_get(idx);

		entry->syntax = backend->name;
   113c2:	bf3e      	ittt	cc
   113c4:	eb03 1300 	addcc.w	r3, r3, r0, lsl #4
   113c8:	689b      	ldrcc	r3, [r3, #8]
   113ca:	600b      	strcc	r3, [r1, #0]
	}
}
   113cc:	4770      	bx	lr
   113ce:	bf00      	nop
   113d0:	00023a98 	.word	0x00023a98
   113d4:	000235f0 	.word	0x000235f0
   113d8:	00023610 	.word	0x00023610

000113dc <cmd_log_memory_slabs>:
{
   113dc:	b538      	push	{r3, r4, r5, lr}
   113de:	4604      	mov	r4, r0
	slabs_free = log_msg_mem_get_free();
   113e0:	f7ff fdc4 	bl	10f6c <log_msg_mem_get_free>
   113e4:	4605      	mov	r5, r0
	used = log_msg_mem_get_used();
   113e6:	f7ff fdc9 	bl	10f7c <log_msg_mem_get_used>
	shell_print(sh, "Blocks used:\t%d", used);
   113ea:	4a09      	ldr	r2, [pc, #36]	; (11410 <cmd_log_memory_slabs+0x34>)
	used = log_msg_mem_get_used();
   113ec:	4603      	mov	r3, r0
	shell_print(sh, "Blocks used:\t%d", used);
   113ee:	2108      	movs	r1, #8
   113f0:	4620      	mov	r0, r4
   113f2:	f00e faac 	bl	1f94e <shell_fprintf>
	shell_print(sh, "Blocks free:\t%d", slabs_free);
   113f6:	462b      	mov	r3, r5
   113f8:	4620      	mov	r0, r4
   113fa:	4a06      	ldr	r2, [pc, #24]	; (11414 <cmd_log_memory_slabs+0x38>)
   113fc:	2108      	movs	r1, #8
   113fe:	f00e faa6 	bl	1f94e <shell_fprintf>
		shell_print(
   11402:	4620      	mov	r0, r4
   11404:	4a04      	ldr	r2, [pc, #16]	; (11418 <cmd_log_memory_slabs+0x3c>)
   11406:	2108      	movs	r1, #8
   11408:	f00e faa1 	bl	1f94e <shell_fprintf>
}
   1140c:	2000      	movs	r0, #0
   1140e:	bd38      	pop	{r3, r4, r5, pc}
   11410:	0002486e 	.word	0x0002486e
   11414:	0002487f 	.word	0x0002487f
   11418:	00024890 	.word	0x00024890

0001141c <cmd_log_backends_list>:
{
   1141c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   11420:	4c11      	ldr	r4, [pc, #68]	; (11468 <cmd_log_backends_list+0x4c>)
   11422:	4d12      	ldr	r5, [pc, #72]	; (1146c <cmd_log_backends_list+0x50>)
		shell_fprintf(shell, SHELL_NORMAL,
   11424:	f8df 8048 	ldr.w	r8, [pc, #72]	; 11470 <cmd_log_backends_list+0x54>
   11428:	f8df 9048 	ldr.w	r9, [pc, #72]	; 11474 <cmd_log_backends_list+0x58>
   1142c:	f8df a048 	ldr.w	sl, [pc, #72]	; 11478 <cmd_log_backends_list+0x5c>
   11430:	1b2d      	subs	r5, r5, r4
{
   11432:	4607      	mov	r7, r0
   11434:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < backend_count; i++) {
   11436:	2600      	movs	r6, #0
   11438:	42ae      	cmp	r6, r5
   1143a:	db03      	blt.n	11444 <cmd_log_backends_list+0x28>
}
   1143c:	2000      	movs	r0, #0
   1143e:	b002      	add	sp, #8
   11440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			      backend->cb->active ? "enabled" : "disabled",
   11444:	6862      	ldr	r2, [r4, #4]
		shell_fprintf(shell, SHELL_NORMAL,
   11446:	7953      	ldrb	r3, [r2, #5]
   11448:	7912      	ldrb	r2, [r2, #4]
   1144a:	2b00      	cmp	r3, #0
   1144c:	bf14      	ite	ne
   1144e:	4643      	movne	r3, r8
   11450:	464b      	moveq	r3, r9
   11452:	e9cd 3200 	strd	r3, r2, [sp]
   11456:	2108      	movs	r1, #8
   11458:	68a3      	ldr	r3, [r4, #8]
   1145a:	4652      	mov	r2, sl
   1145c:	4638      	mov	r0, r7
   1145e:	f00e fa76 	bl	1f94e <shell_fprintf>
	for (int i = 0; i < backend_count; i++) {
   11462:	3601      	adds	r6, #1
   11464:	3410      	adds	r4, #16
   11466:	e7e7      	b.n	11438 <cmd_log_backends_list+0x1c>
   11468:	000235f0 	.word	0x000235f0
   1146c:	00023610 	.word	0x00023610
   11470:	000248dc 	.word	0x000248dc
   11474:	000248e4 	.word	0x000248e4
   11478:	000248ed 	.word	0x000248ed

0001147c <log_status>:
{
   1147c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11480:	4b24      	ldr	r3, [pc, #144]	; (11514 <log_status+0x98>)
   11482:	4c25      	ldr	r4, [pc, #148]	; (11518 <log_status+0x9c>)
   11484:	1ae4      	subs	r4, r4, r3
	return backend->cb->active;
   11486:	684b      	ldr	r3, [r1, #4]
	if (!log_backend_is_active(backend)) {
   11488:	795b      	ldrb	r3, [r3, #5]
{
   1148a:	b085      	sub	sp, #20
   1148c:	4605      	mov	r5, r0
   1148e:	460e      	mov	r6, r1
   11490:	08e4      	lsrs	r4, r4, #3
	if (!log_backend_is_active(backend)) {
   11492:	b91b      	cbnz	r3, 1149c <log_status+0x20>
		shell_warn(shell, "Logs are halted!");
   11494:	4a21      	ldr	r2, [pc, #132]	; (1151c <log_status+0xa0>)
   11496:	2103      	movs	r1, #3
   11498:	f00e fa59 	bl	1f94e <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
   1149c:	4b20      	ldr	r3, [pc, #128]	; (11520 <log_status+0xa4>)
   1149e:	4a21      	ldr	r2, [pc, #132]	; (11524 <log_status+0xa8>)
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
   114a0:	f8df a088 	ldr.w	sl, [pc, #136]	; 1152c <log_status+0xb0>
   114a4:	f8df b088 	ldr.w	fp, [pc, #136]	; 11530 <log_status+0xb4>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
   114a8:	2108      	movs	r1, #8
   114aa:	4628      	mov	r0, r5
   114ac:	f00e fa4f 	bl	1f94e <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL,
   114b0:	4a1d      	ldr	r2, [pc, #116]	; (11528 <log_status+0xac>)
   114b2:	2108      	movs	r1, #8
   114b4:	4628      	mov	r0, r5
   114b6:	f00e fa4a 	bl	1f94e <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
   114ba:	f04f 0800 	mov.w	r8, #0
   114be:	fa0f f788 	sxth.w	r7, r8
   114c2:	42a7      	cmp	r7, r4
   114c4:	f108 0801 	add.w	r8, r8, #1
   114c8:	d303      	bcc.n	114d2 <log_status+0x56>
}
   114ca:	2000      	movs	r0, #0
   114cc:	b005      	add	sp, #20
   114ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   114d2:	463a      	mov	r2, r7
   114d4:	2301      	movs	r3, #1
   114d6:	2100      	movs	r1, #0
   114d8:	4630      	mov	r0, r6
   114da:	f7ff fcb9 	bl	10e50 <log_filter_get>
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   114de:	2300      	movs	r3, #0
   114e0:	463a      	mov	r2, r7
   114e2:	4619      	mov	r1, r3
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   114e4:	4681      	mov	r9, r0
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   114e6:	4630      	mov	r0, r6
   114e8:	f7ff fcb2 	bl	10e50 <log_filter_get>
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
   114ec:	4639      	mov	r1, r7
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   114ee:	9003      	str	r0, [sp, #12]
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
   114f0:	2000      	movs	r0, #0
   114f2:	f7ff fc1f 	bl	10d34 <log_source_name_get>
   114f6:	9a03      	ldr	r2, [sp, #12]
   114f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
   114fc:	9201      	str	r2, [sp, #4]
   114fe:	f85a 2029 	ldr.w	r2, [sl, r9, lsl #2]
   11502:	9200      	str	r2, [sp, #0]
   11504:	4603      	mov	r3, r0
   11506:	465a      	mov	r2, fp
   11508:	2108      	movs	r1, #8
   1150a:	4628      	mov	r0, r5
   1150c:	f00e fa1f 	bl	1f94e <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
   11510:	e7d5      	b.n	114be <log_status+0x42>
   11512:	bf00      	nop
   11514:	00023520 	.word	0x00023520
   11518:	000235f0 	.word	0x000235f0
   1151c:	0002490e 	.word	0x0002490e
   11520:	00024920 	.word	0x00024920
   11524:	0002492c 	.word	0x0002492c
   11528:	0002494a 	.word	0x0002494a
   1152c:	00023930 	.word	0x00023930
   11530:	00024987 	.word	0x00024987

00011534 <module_name_get>:
{
   11534:	b510      	push	{r4, lr}
	entry->handler = NULL;
   11536:	2300      	movs	r3, #0
	entry->subcmd = &dsub_module_name;
   11538:	4a05      	ldr	r2, [pc, #20]	; (11550 <module_name_get+0x1c>)
	entry->handler = NULL;
   1153a:	60cb      	str	r3, [r1, #12]
{
   1153c:	460c      	mov	r4, r1
	entry->help  = NULL;
   1153e:	604b      	str	r3, [r1, #4]
	entry->subcmd = &dsub_module_name;
   11540:	608a      	str	r2, [r1, #8]
	entry->syntax = log_source_name_get(CONFIG_LOG_DOMAIN_ID, idx);
   11542:	4601      	mov	r1, r0
   11544:	4618      	mov	r0, r3
   11546:	f7ff fbf5 	bl	10d34 <log_source_name_get>
   1154a:	6020      	str	r0, [r4, #0]
}
   1154c:	bd10      	pop	{r4, pc}
   1154e:	bf00      	nop
   11550:	00023920 	.word	0x00023920

00011554 <shell_backend_cmd_execute>:
{
   11554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char const *name = argv[-1];
   11558:	f852 bc04 	ldr.w	fp, [r2, #-4]
	return __log_backends_end - __log_backends_start;
   1155c:	4c18      	ldr	r4, [pc, #96]	; (115c0 <shell_backend_cmd_execute+0x6c>)
   1155e:	4e19      	ldr	r6, [pc, #100]	; (115c4 <shell_backend_cmd_execute+0x70>)
{
   11560:	9300      	str	r3, [sp, #0]
   11562:	4607      	mov	r7, r0
	size_t slen = strlen(name);
   11564:	4658      	mov	r0, fp
{
   11566:	4691      	mov	r9, r2
   11568:	468a      	mov	sl, r1
	size_t slen = strlen(name);
   1156a:	f00f fbc4 	bl	20cf6 <strlen>
   1156e:	1b36      	subs	r6, r6, r4
   11570:	4602      	mov	r2, r0
   11572:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   11574:	f04f 0800 	mov.w	r8, #0
   11578:	45b0      	cmp	r8, r6
   1157a:	db08      	blt.n	1158e <shell_backend_cmd_execute+0x3a>
		shell_error(shell, "Invalid backend: %s", name);
   1157c:	4a12      	ldr	r2, [pc, #72]	; (115c8 <shell_backend_cmd_execute+0x74>)
   1157e:	465b      	mov	r3, fp
   11580:	2101      	movs	r1, #1
   11582:	4638      	mov	r0, r7
   11584:	f00e f9e3 	bl	1f94e <shell_fprintf>
		return -ENOEXEC;
   11588:	f06f 0507 	mvn.w	r5, #7
   1158c:	e013      	b.n	115b6 <shell_backend_cmd_execute+0x62>
		if (strncmp(name, backend->name, slen) == 0) {
   1158e:	68a1      	ldr	r1, [r4, #8]
   11590:	9201      	str	r2, [sp, #4]
   11592:	4658      	mov	r0, fp
   11594:	f00f fbcb 	bl	20d2e <strncmp>
   11598:	3410      	adds	r4, #16
   1159a:	4605      	mov	r5, r0
   1159c:	b118      	cbz	r0, 115a6 <shell_backend_cmd_execute+0x52>
	for (int i = 0; i < log_backend_count_get(); i++) {
   1159e:	9a01      	ldr	r2, [sp, #4]
   115a0:	f108 0801 	add.w	r8, r8, #1
   115a4:	e7e8      	b.n	11578 <shell_backend_cmd_execute+0x24>
		func(shell, backend, argc, argv);
   115a6:	4906      	ldr	r1, [pc, #24]	; (115c0 <shell_backend_cmd_execute+0x6c>)
   115a8:	9c00      	ldr	r4, [sp, #0]
   115aa:	464b      	mov	r3, r9
   115ac:	4652      	mov	r2, sl
   115ae:	eb01 1108 	add.w	r1, r1, r8, lsl #4
   115b2:	4638      	mov	r0, r7
   115b4:	47a0      	blx	r4
}
   115b6:	4628      	mov	r0, r5
   115b8:	b003      	add	sp, #12
   115ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115be:	bf00      	nop
   115c0:	000235f0 	.word	0x000235f0
   115c4:	00023610 	.word	0x00023610
   115c8:	0002499b 	.word	0x0002499b

000115cc <cmd_log_backend_status>:
{
   115cc:	b508      	push	{r3, lr}
	shell_backend_cmd_execute(shell, argc, argv, log_status);
   115ce:	4b02      	ldr	r3, [pc, #8]	; (115d8 <cmd_log_backend_status+0xc>)
   115d0:	f7ff ffc0 	bl	11554 <shell_backend_cmd_execute>
}
   115d4:	2000      	movs	r0, #0
   115d6:	bd08      	pop	{r3, pc}
   115d8:	0001147d 	.word	0x0001147d

000115dc <cmd_log_backend_halt>:
	return shell_backend_cmd_execute(shell, argc, argv, log_halt);
   115dc:	4b01      	ldr	r3, [pc, #4]	; (115e4 <cmd_log_backend_halt+0x8>)
   115de:	f7ff bfb9 	b.w	11554 <shell_backend_cmd_execute>
   115e2:	bf00      	nop
   115e4:	0001f5d1 	.word	0x0001f5d1

000115e8 <cmd_log_backend_go>:
	return shell_backend_cmd_execute(shell, argc, argv, log_go);
   115e8:	4b01      	ldr	r3, [pc, #4]	; (115f0 <cmd_log_backend_go+0x8>)
   115ea:	f7ff bfb3 	b.w	11554 <shell_backend_cmd_execute>
   115ee:	bf00      	nop
   115f0:	0001f5d9 	.word	0x0001f5d9

000115f4 <cmd_log_backend_enable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_enable);
   115f4:	4b01      	ldr	r3, [pc, #4]	; (115fc <cmd_log_backend_enable+0x8>)
   115f6:	f7ff bfad 	b.w	11554 <shell_backend_cmd_execute>
   115fa:	bf00      	nop
   115fc:	000116fd 	.word	0x000116fd

00011600 <cmd_log_backend_disable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_disable);
   11600:	4b01      	ldr	r3, [pc, #4]	; (11608 <cmd_log_backend_disable+0x8>)
   11602:	f7ff bfa7 	b.w	11554 <shell_backend_cmd_execute>
   11606:	bf00      	nop
   11608:	0001f655 	.word	0x0001f655

0001160c <shell_state_precheck>:
{
   1160c:	b510      	push	{r4, lr}
	if (shell->log_backend->control_block->state
   1160e:	69c3      	ldr	r3, [r0, #28]
   11610:	68db      	ldr	r3, [r3, #12]
   11612:	791c      	ldrb	r4, [r3, #4]
   11614:	b92c      	cbnz	r4, 11622 <shell_state_precheck+0x16>
		shell_error(shell, "Shell log backend not initialized.");
   11616:	4a04      	ldr	r2, [pc, #16]	; (11628 <shell_state_precheck+0x1c>)
   11618:	2101      	movs	r1, #1
   1161a:	f00e f998 	bl	1f94e <shell_fprintf>
   1161e:	4620      	mov	r0, r4
}
   11620:	bd10      	pop	{r4, pc}
	return true;
   11622:	2001      	movs	r0, #1
   11624:	e7fc      	b.n	11620 <shell_state_precheck+0x14>
   11626:	bf00      	nop
   11628:	000249b0 	.word	0x000249b0

0001162c <filters_set>:
{
   1162c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11630:	4e2c      	ldr	r6, [pc, #176]	; (116e4 <filters_set+0xb8>)
   11632:	461f      	mov	r7, r3
   11634:	4b2c      	ldr	r3, [pc, #176]	; (116e8 <filters_set+0xbc>)
   11636:	1af6      	subs	r6, r6, r3
	int cnt = all ? z_log_sources_count() : argc;
   11638:	1e15      	subs	r5, r2, #0
{
   1163a:	b085      	sub	sp, #20
   1163c:	ea4f 06d6 	mov.w	r6, r6, lsr #3
	int cnt = all ? z_log_sources_count() : argc;
   11640:	bf14      	ite	ne
   11642:	462b      	movne	r3, r5
   11644:	4633      	moveq	r3, r6
   11646:	9302      	str	r3, [sp, #8]
	if (!backend->cb->active) {
   11648:	684b      	ldr	r3, [r1, #4]
   1164a:	795b      	ldrb	r3, [r3, #5]
{
   1164c:	4680      	mov	r8, r0
   1164e:	4689      	mov	r9, r1
	if (!backend->cb->active) {
   11650:	b91b      	cbnz	r3, 1165a <filters_set+0x2e>
		shell_warn(shell, "Backend not active.");
   11652:	4a26      	ldr	r2, [pc, #152]	; (116ec <filters_set+0xc0>)
   11654:	2103      	movs	r1, #3
   11656:	f00e f97a 	bl	1f94e <shell_fprintf>
				shell_warn(shell, "%s: level set to %s.",
   1165a:	f8df a09c 	ldr.w	sl, [pc, #156]	; 116f8 <filters_set+0xcc>
	for (i = 0U; i < modules_cnt; i++) {
   1165e:	2400      	movs	r4, #0
	for (i = 0; i < cnt; i++) {
   11660:	9b02      	ldr	r3, [sp, #8]
   11662:	429c      	cmp	r4, r3
   11664:	db02      	blt.n	1166c <filters_set+0x40>
}
   11666:	b005      	add	sp, #20
   11668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		id = all ? i : module_id_get(argv[i]);
   1166c:	b3bd      	cbz	r5, 116de <filters_set+0xb2>
   1166e:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
	for (i = 0U; i < modules_cnt; i++) {
   11672:	2300      	movs	r3, #0
   11674:	429e      	cmp	r6, r3
   11676:	d107      	bne.n	11688 <filters_set+0x5c>
			shell_error(shell, "%s: unknown source name.", argv[i]);
   11678:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1167c:	4a1c      	ldr	r2, [pc, #112]	; (116f0 <filters_set+0xc4>)
   1167e:	2101      	movs	r1, #1
   11680:	4640      	mov	r0, r8
   11682:	f00e f964 	bl	1f94e <shell_fprintf>
   11686:	e023      	b.n	116d0 <filters_set+0xa4>
		tmp_name = log_source_name_get(CONFIG_LOG_DOMAIN_ID, i);
   11688:	4619      	mov	r1, r3
   1168a:	2000      	movs	r0, #0
   1168c:	9303      	str	r3, [sp, #12]
   1168e:	f7ff fb51 	bl	10d34 <log_source_name_get>
		if (strncmp(tmp_name, name, 64) == 0) {
   11692:	2240      	movs	r2, #64	; 0x40
   11694:	4659      	mov	r1, fp
   11696:	f00f fb4a 	bl	20d2e <strncmp>
   1169a:	9b03      	ldr	r3, [sp, #12]
   1169c:	b9d0      	cbnz	r0, 116d4 <filters_set+0xa8>
			return i;
   1169e:	461a      	mov	r2, r3
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
   116a0:	2100      	movs	r1, #0
   116a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   116a4:	b212      	sxth	r2, r2
   116a6:	4648      	mov	r0, r9
   116a8:	f7ff fb52 	bl	10d50 <z_impl_log_filter_set>
			if (set_lvl != level) {
   116ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   116ae:	4283      	cmp	r3, r0
   116b0:	4683      	mov	fp, r0
   116b2:	d00d      	beq.n	116d0 <filters_set+0xa4>
						CONFIG_LOG_DOMAIN_ID, i) :
   116b4:	b985      	cbnz	r5, 116d8 <filters_set+0xac>
					log_source_name_get(
   116b6:	4621      	mov	r1, r4
   116b8:	4628      	mov	r0, r5
   116ba:	f7ff fb3b 	bl	10d34 <log_source_name_get>
   116be:	4603      	mov	r3, r0
				shell_warn(shell, "%s: level set to %s.",
   116c0:	f85a 202b 	ldr.w	r2, [sl, fp, lsl #2]
   116c4:	9200      	str	r2, [sp, #0]
   116c6:	2103      	movs	r1, #3
   116c8:	4a0a      	ldr	r2, [pc, #40]	; (116f4 <filters_set+0xc8>)
   116ca:	4640      	mov	r0, r8
   116cc:	f00e f93f 	bl	1f94e <shell_fprintf>
	for (i = 0; i < cnt; i++) {
   116d0:	3401      	adds	r4, #1
   116d2:	e7c5      	b.n	11660 <filters_set+0x34>
	for (i = 0U; i < modules_cnt; i++) {
   116d4:	3301      	adds	r3, #1
   116d6:	e7cd      	b.n	11674 <filters_set+0x48>
						CONFIG_LOG_DOMAIN_ID, i) :
   116d8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   116dc:	e7f0      	b.n	116c0 <filters_set+0x94>
   116de:	4622      	mov	r2, r4
   116e0:	e7de      	b.n	116a0 <filters_set+0x74>
   116e2:	bf00      	nop
   116e4:	000235f0 	.word	0x000235f0
   116e8:	00023520 	.word	0x00023520
   116ec:	000249d4 	.word	0x000249d4
   116f0:	000249ff 	.word	0x000249ff
   116f4:	000249e9 	.word	0x000249e9
   116f8:	00023930 	.word	0x00023930

000116fc <log_enable>:
{
   116fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	severity_level = severity_level_get(argv[1]);
   11700:	f8d3 b004 	ldr.w	fp, [r3, #4]
   11704:	f8df a050 	ldr.w	sl, [pc, #80]	; 11758 <log_enable+0x5c>
{
   11708:	4606      	mov	r6, r0
   1170a:	4688      	mov	r8, r1
   1170c:	4691      	mov	r9, r2
   1170e:	461d      	mov	r5, r3
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
   11710:	2700      	movs	r7, #0
		if (strncmp(str, severity_lvls[i], 4) == 0) {
   11712:	f85a 1b04 	ldr.w	r1, [sl], #4
   11716:	2204      	movs	r2, #4
   11718:	4658      	mov	r0, fp
   1171a:	f00f fb08 	bl	20d2e <strncmp>
   1171e:	4604      	mov	r4, r0
   11720:	b170      	cbz	r0, 11740 <log_enable+0x44>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
   11722:	3701      	adds	r7, #1
   11724:	2f05      	cmp	r7, #5
   11726:	d1f4      	bne.n	11712 <log_enable+0x16>
		shell_error(shell, "Invalid severity: %s", argv[1]);
   11728:	686b      	ldr	r3, [r5, #4]
   1172a:	4a0a      	ldr	r2, [pc, #40]	; (11754 <log_enable+0x58>)
   1172c:	2101      	movs	r1, #1
   1172e:	4630      	mov	r0, r6
   11730:	f00e f90d 	bl	1f94e <shell_fprintf>
   11734:	f06f 0407 	mvn.w	r4, #7
}
   11738:	4620      	mov	r0, r4
   1173a:	b003      	add	sp, #12
   1173c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	filters_set(shell, backend, argc - 2, &argv[2], severity_level);
   11740:	9700      	str	r7, [sp, #0]
   11742:	f105 0308 	add.w	r3, r5, #8
   11746:	f1a9 0202 	sub.w	r2, r9, #2
   1174a:	4641      	mov	r1, r8
   1174c:	4630      	mov	r0, r6
   1174e:	f7ff ff6d 	bl	1162c <filters_set>
	return 0;
   11752:	e7f1      	b.n	11738 <log_enable+0x3c>
   11754:	00024a19 	.word	0x00024a19
   11758:	00023930 	.word	0x00023930

0001175c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   1175c:	4b01      	ldr	r3, [pc, #4]	; (11764 <log_backend_rtt_init+0x8>)
   1175e:	2201      	movs	r2, #1
   11760:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   11762:	4770      	bx	lr
   11764:	20002802 	.word	0x20002802

00011768 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
   11768:	4b02      	ldr	r3, [pc, #8]	; (11774 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   1176a:	4803      	ldr	r0, [pc, #12]	; (11778 <panic+0x10>)
   1176c:	2201      	movs	r2, #1
   1176e:	701a      	strb	r2, [r3, #0]
   11770:	f00d bf06 	b.w	1f580 <log_output_flush>
   11774:	20002803 	.word	0x20002803
   11778:	00023ac4 	.word	0x00023ac4

0001177c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   1177c:	4801      	ldr	r0, [pc, #4]	; (11784 <dropped+0x8>)
   1177e:	f7ff bdbf 	b.w	11300 <log_output_dropped_process>
   11782:	bf00      	nop
   11784:	00023ac4 	.word	0x00023ac4

00011788 <put>:
{
   11788:	b510      	push	{r4, lr}
	log_msg_get(msg);
   1178a:	4608      	mov	r0, r1
   1178c:	460c      	mov	r4, r1
   1178e:	f00d fc9b 	bl	1f0c8 <log_msg_get>
	log_output_msg_process(output, msg, flags);
   11792:	4805      	ldr	r0, [pc, #20]	; (117a8 <put+0x20>)
   11794:	4621      	mov	r1, r4
   11796:	220f      	movs	r2, #15
   11798:	f7ff fd36 	bl	11208 <log_output_msg_process>
	log_msg_put(msg);
   1179c:	4620      	mov	r0, r4
}
   1179e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   117a2:	f00d bcc0 	b.w	1f126 <log_msg_put>
   117a6:	bf00      	nop
   117a8:	00023ac4 	.word	0x00023ac4

000117ac <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   117ac:	4b05      	ldr	r3, [pc, #20]	; (117c4 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
   117ae:	781b      	ldrb	r3, [r3, #0]
   117b0:	b11b      	cbz	r3, 117ba <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
   117b2:	f241 3088 	movw	r0, #5000	; 0x1388
   117b6:	f011 bbc8 	b.w	22f4a <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   117ba:	20a4      	movs	r0, #164	; 0xa4
   117bc:	2100      	movs	r1, #0
   117be:	f00c bae9 	b.w	1dd94 <z_impl_k_sleep>
   117c2:	bf00      	nop
   117c4:	20002803 	.word	0x20002803

000117c8 <data_out_block_mode>:
{
   117c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   117cc:	f8df 9094 	ldr.w	r9, [pc, #148]	; 11864 <data_out_block_mode+0x9c>
	return z_impl_k_mutex_lock(mutex, timeout);
   117d0:	f8df a094 	ldr.w	sl, [pc, #148]	; 11868 <data_out_block_mode+0xa0>
{
   117d4:	4680      	mov	r8, r0
   117d6:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   117d8:	2404      	movs	r4, #4
   117da:	46cb      	mov	fp, r9
		if (!is_sync_mode()) {
   117dc:	f899 5000 	ldrb.w	r5, [r9]
   117e0:	b9cd      	cbnz	r5, 11816 <data_out_block_mode+0x4e>
   117e2:	f04f 33ff 	mov.w	r3, #4294967295
   117e6:	f04f 32ff 	mov.w	r2, #4294967295
   117ea:	4650      	mov	r0, sl
   117ec:	f00b fcd4 	bl	1d198 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   117f0:	463a      	mov	r2, r7
   117f2:	4641      	mov	r1, r8
   117f4:	4628      	mov	r0, r5
   117f6:	f00a fff9 	bl	1c7ec <SEGGER_RTT_WriteSkipNoLock>
   117fa:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
   117fc:	4650      	mov	r0, sl
   117fe:	f00b fd49 	bl	1d294 <z_impl_k_mutex_unlock>
		if (ret) {
   11802:	4d17      	ldr	r5, [pc, #92]	; (11860 <data_out_block_mode+0x98>)
   11804:	b1fe      	cbz	r6, 11846 <data_out_block_mode+0x7e>
	host_present = true;
   11806:	2301      	movs	r3, #1
   11808:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
   1180a:	f89b 3000 	ldrb.w	r3, [fp]
   1180e:	b96b      	cbnz	r3, 1182c <data_out_block_mode+0x64>
}
   11810:	4638      	mov	r0, r7
   11812:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   11816:	463a      	mov	r2, r7
   11818:	4641      	mov	r1, r8
   1181a:	2000      	movs	r0, #0
   1181c:	f00a ffe6 	bl	1c7ec <SEGGER_RTT_WriteSkipNoLock>
   11820:	4606      	mov	r6, r0
   11822:	e7ee      	b.n	11802 <data_out_block_mode+0x3a>
	if (retry_cnt == 0) {
   11824:	b95c      	cbnz	r4, 1183e <data_out_block_mode+0x76>
		host_present = false;
   11826:	702c      	strb	r4, [r5, #0]
   11828:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   1182c:	2000      	movs	r0, #0
   1182e:	f00b f829 	bl	1c884 <SEGGER_RTT_HasDataUp>
   11832:	2800      	cmp	r0, #0
   11834:	d0ec      	beq.n	11810 <data_out_block_mode+0x48>
   11836:	782b      	ldrb	r3, [r5, #0]
   11838:	2b00      	cmp	r3, #0
   1183a:	d1f3      	bne.n	11824 <data_out_block_mode+0x5c>
   1183c:	e7e8      	b.n	11810 <data_out_block_mode+0x48>
			on_failed_write(retry_cnt--);
   1183e:	3c01      	subs	r4, #1
   11840:	f7ff ffb4 	bl	117ac <on_failed_write.part.0>
   11844:	e7f2      	b.n	1182c <data_out_block_mode+0x64>
		} else if (host_present) {
   11846:	782b      	ldrb	r3, [r5, #0]
   11848:	b113      	cbz	r3, 11850 <data_out_block_mode+0x88>
	if (retry_cnt == 0) {
   1184a:	3c01      	subs	r4, #1
   1184c:	d104      	bne.n	11858 <data_out_block_mode+0x90>
		host_present = false;
   1184e:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   11850:	782b      	ldrb	r3, [r5, #0]
   11852:	2b00      	cmp	r3, #0
   11854:	d1c2      	bne.n	117dc <data_out_block_mode+0x14>
   11856:	e7db      	b.n	11810 <data_out_block_mode+0x48>
   11858:	f7ff ffa8 	bl	117ac <on_failed_write.part.0>
   1185c:	e7f8      	b.n	11850 <data_out_block_mode+0x88>
   1185e:	bf00      	nop
   11860:	20002802 	.word	0x20002802
   11864:	20002803 	.word	0x20002803
   11868:	20000724 	.word	0x20000724

0001186c <cmd_kernel_version>:
#include <drivers/timer/system_timer.h>
#include <kernel.h>

static int cmd_kernel_version(const struct shell *shell,
			      size_t argc, char **argv)
{
   1186c:	b513      	push	{r0, r1, r4, lr}
   1186e:	4604      	mov	r4, r0
	uint32_t version = sys_kernel_version_get();
   11870:	f00b fbc0 	bl	1cff4 <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Zephyr version %d.%d.%d",
   11874:	f3c0 2307 	ubfx	r3, r0, #8, #8
   11878:	9301      	str	r3, [sp, #4]
   1187a:	f3c0 4307 	ubfx	r3, r0, #16, #8
   1187e:	9300      	str	r3, [sp, #0]
   11880:	4a04      	ldr	r2, [pc, #16]	; (11894 <cmd_kernel_version+0x28>)
   11882:	0e03      	lsrs	r3, r0, #24
   11884:	2108      	movs	r1, #8
   11886:	4620      	mov	r0, r4
   11888:	f00e f861 	bl	1f94e <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
   1188c:	2000      	movs	r0, #0
   1188e:	b002      	add	sp, #8
   11890:	bd10      	pop	{r4, pc}
   11892:	bf00      	nop
   11894:	00024bdd 	.word	0x00024bdd

00011898 <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *shell,
			     size_t argc, char **argv)
{
   11898:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   1189c:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
   1189e:	f011 fb52 	bl	22f46 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   118a2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   118a6:	fba0 bc05 	umull	fp, ip, r0, r5
   118aa:	fb05 cc01 	mla	ip, r5, r1, ip
   118ae:	ea4f 32db 	mov.w	r2, fp, lsr #15
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Uptime: %u ms", k_uptime_get_32());
   118b2:	ea42 434c 	orr.w	r3, r2, ip, lsl #17
   118b6:	4620      	mov	r0, r4
   118b8:	4a03      	ldr	r2, [pc, #12]	; (118c8 <cmd_kernel_uptime+0x30>)
   118ba:	2108      	movs	r1, #8
   118bc:	f00e f847 	bl	1f94e <shell_fprintf>
	return 0;
}
   118c0:	2000      	movs	r0, #0
   118c2:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   118c6:	bf00      	nop
   118c8:	00024bf6 	.word	0x00024bf6

000118cc <cmd_kernel_threads>:

}

static int cmd_kernel_threads(const struct shell *shell,
			      size_t argc, char **argv)
{
   118cc:	b510      	push	{r4, lr}
   118ce:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Scheduler: %u since last call", sys_clock_elapsed());
   118d0:	f009 fc58 	bl	1b184 <sys_clock_elapsed>
   118d4:	4a08      	ldr	r2, [pc, #32]	; (118f8 <cmd_kernel_threads+0x2c>)
   118d6:	4603      	mov	r3, r0
   118d8:	2108      	movs	r1, #8
   118da:	4620      	mov	r0, r4
   118dc:	f00e f837 	bl	1f94e <shell_fprintf>
	shell_print(shell, "Threads:");
   118e0:	4a06      	ldr	r2, [pc, #24]	; (118fc <cmd_kernel_threads+0x30>)
   118e2:	4620      	mov	r0, r4
   118e4:	2108      	movs	r1, #8
   118e6:	f00e f832 	bl	1f94e <shell_fprintf>
	k_thread_foreach(shell_tdata_dump, (void *)shell);
   118ea:	4805      	ldr	r0, [pc, #20]	; (11900 <cmd_kernel_threads+0x34>)
   118ec:	4621      	mov	r1, r4
   118ee:	f00b fa0d 	bl	1cd0c <k_thread_foreach>
	return 0;
}
   118f2:	2000      	movs	r0, #0
   118f4:	bd10      	pop	{r4, pc}
   118f6:	bf00      	nop
   118f8:	00024c05 	.word	0x00024c05
   118fc:	00024c24 	.word	0x00024c24
   11900:	00011965 	.word	0x00011965

00011904 <cmd_kernel_stacks>:
extern K_KERNEL_STACK_ARRAY_DEFINE(z_interrupt_stacks, CONFIG_MP_NUM_CPUS,
				   CONFIG_ISR_STACK_SIZE);

static int cmd_kernel_stacks(const struct shell *shell,
			     size_t argc, char **argv)
{
   11904:	b530      	push	{r4, r5, lr}
	uint8_t *buf;
	size_t size, unused;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	k_thread_foreach(shell_stack_dump, (void *)shell);
   11906:	4601      	mov	r1, r0
{
   11908:	b087      	sub	sp, #28
   1190a:	4604      	mov	r4, r0
	k_thread_foreach(shell_stack_dump, (void *)shell);
   1190c:	4811      	ldr	r0, [pc, #68]	; (11954 <cmd_kernel_stacks+0x50>)
   1190e:	f00b f9fd 	bl	1cd0c <k_thread_foreach>
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
		buf = Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]);
		size = K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]);

		unused = 0;
		for (size_t i = 0; i < size; i++) {
   11912:	4a11      	ldr	r2, [pc, #68]	; (11958 <cmd_kernel_stacks+0x54>)
		unused = 0;
   11914:	2300      	movs	r3, #0
			if (buf[i] == 0xAAU) {
   11916:	f812 1b01 	ldrb.w	r1, [r2], #1
   1191a:	29aa      	cmp	r1, #170	; 0xaa
   1191c:	d103      	bne.n	11926 <cmd_kernel_stacks+0x22>
				unused++;
   1191e:	3301      	adds	r3, #1
		for (size_t i = 0; i < size; i++) {
   11920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   11924:	d1f7      	bne.n	11916 <cmd_kernel_stacks+0x12>
			} else {
				break;
			}
		}

		shell_print(shell,
   11926:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   1192a:	2264      	movs	r2, #100	; 0x64
   1192c:	434a      	muls	r2, r1
   1192e:	0ad2      	lsrs	r2, r2, #11
   11930:	9205      	str	r2, [sp, #20]
   11932:	2500      	movs	r5, #0
   11934:	f44f 6200 	mov.w	r2, #2048	; 0x800
   11938:	e9cd 1203 	strd	r1, r2, [sp, #12]
   1193c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   11940:	4620      	mov	r0, r4
   11942:	4b06      	ldr	r3, [pc, #24]	; (1195c <cmd_kernel_stacks+0x58>)
   11944:	4a06      	ldr	r2, [pc, #24]	; (11960 <cmd_kernel_stacks+0x5c>)
   11946:	9500      	str	r5, [sp, #0]
   11948:	2108      	movs	r1, #8
   1194a:	f00e f800 	bl	1f94e <shell_fprintf>
			      size - unused, size,
			      ((size - unused) * 100U) / size);
	}

	return 0;
}
   1194e:	4628      	mov	r0, r5
   11950:	b007      	add	sp, #28
   11952:	bd30      	pop	{r4, r5, pc}
   11954:	00011a45 	.word	0x00011a45
   11958:	20005580 	.word	0x20005580
   1195c:	20005560 	.word	0x20005560
   11960:	00024c2e 	.word	0x00024c2e

00011964 <shell_tdata_dump>:
{
   11964:	b5f0      	push	{r4, r5, r6, r7, lr}
   11966:	b087      	sub	sp, #28
	size_t size = thread->stack_info.size;
   11968:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
{
   1196c:	4604      	mov	r4, r0
   1196e:	460d      	mov	r5, r1
	tname = k_thread_name_get(thread);
   11970:	f010 ff9b 	bl	228aa <k_thread_name_get>
   11974:	4606      	mov	r6, r0
	return z_impl_z_current_get();
   11976:	f00c fa27 	bl	1ddc8 <z_impl_z_current_get>
	shell_print(shell, "%s%p %-10s",
   1197a:	4b23      	ldr	r3, [pc, #140]	; (11a08 <shell_tdata_dump+0xa4>)
   1197c:	4a23      	ldr	r2, [pc, #140]	; (11a0c <shell_tdata_dump+0xa8>)
   1197e:	2e00      	cmp	r6, #0
   11980:	bf08      	it	eq
   11982:	461e      	moveq	r6, r3
   11984:	4b22      	ldr	r3, [pc, #136]	; (11a10 <shell_tdata_dump+0xac>)
   11986:	e9cd 4600 	strd	r4, r6, [sp]
   1198a:	4284      	cmp	r4, r0
   1198c:	bf18      	it	ne
   1198e:	4613      	movne	r3, r2
   11990:	2108      	movs	r1, #8
   11992:	4628      	mov	r0, r5
   11994:	4a1f      	ldr	r2, [pc, #124]	; (11a14 <shell_tdata_dump+0xb0>)
   11996:	f00d ffda 	bl	1f94e <shell_fprintf>
	shell_print(shell, "\toptions: 0x%x, priority: %d timeout: %" PRId64,
   1199a:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   1199e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   119a2:	f994 300e 	ldrsb.w	r3, [r4, #14]
   119a6:	4a1c      	ldr	r2, [pc, #112]	; (11a18 <shell_tdata_dump+0xb4>)
   119a8:	9300      	str	r3, [sp, #0]
   119aa:	2108      	movs	r1, #8
   119ac:	7b23      	ldrb	r3, [r4, #12]
   119ae:	4628      	mov	r0, r5
   119b0:	f00d ffcd 	bl	1f94e <shell_fprintf>
	shell_print(shell, "\tstate: %s, entry: %p", k_thread_state_str(thread),
   119b4:	4620      	mov	r0, r4
   119b6:	f00b f9f1 	bl	1cd9c <k_thread_state_str>
   119ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
   119bc:	9200      	str	r2, [sp, #0]
   119be:	4603      	mov	r3, r0
   119c0:	4a16      	ldr	r2, [pc, #88]	; (11a1c <shell_tdata_dump+0xb8>)
   119c2:	2108      	movs	r1, #8
   119c4:	4628      	mov	r0, r5
   119c6:	f00d ffc2 	bl	1f94e <shell_fprintf>
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
   119ca:	a905      	add	r1, sp, #20
   119cc:	4620      	mov	r0, r4
   119ce:	f010 ff70 	bl	228b2 <z_impl_k_thread_stack_space_get>
	if (ret) {
   119d2:	4603      	mov	r3, r0
   119d4:	b130      	cbz	r0, 119e4 <shell_tdata_dump+0x80>
		shell_print(shell,
   119d6:	4a12      	ldr	r2, [pc, #72]	; (11a20 <shell_tdata_dump+0xbc>)
   119d8:	2108      	movs	r1, #8
   119da:	4628      	mov	r0, r5
   119dc:	f00d ffb7 	bl	1f94e <shell_fprintf>
}
   119e0:	b007      	add	sp, #28
   119e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcnt = ((size - unused) * 100U) / size;
   119e4:	9a05      	ldr	r2, [sp, #20]
   119e6:	2364      	movs	r3, #100	; 0x64
   119e8:	1ab9      	subs	r1, r7, r2
		shell_print(shell,
   119ea:	e9cd 2100 	strd	r2, r1, [sp]
		pcnt = ((size - unused) * 100U) / size;
   119ee:	434b      	muls	r3, r1
		shell_print(shell,
   119f0:	4a0c      	ldr	r2, [pc, #48]	; (11a24 <shell_tdata_dump+0xc0>)
		pcnt = ((size - unused) * 100U) / size;
   119f2:	fbb3 f3f7 	udiv	r3, r3, r7
		shell_print(shell,
   119f6:	2108      	movs	r1, #8
   119f8:	e9cd 7302 	strd	r7, r3, [sp, #8]
   119fc:	4628      	mov	r0, r5
   119fe:	463b      	mov	r3, r7
   11a00:	f00d ffa5 	bl	1f94e <shell_fprintf>
}
   11a04:	e7ec      	b.n	119e0 <shell_tdata_dump+0x7c>
   11a06:	bf00      	nop
   11a08:	00024c74 	.word	0x00024c74
   11a0c:	00024820 	.word	0x00024820
   11a10:	00025d74 	.word	0x00025d74
   11a14:	00024c77 	.word	0x00024c77
   11a18:	00024c83 	.word	0x00024c83
   11a1c:	00024caf 	.word	0x00024caf
   11a20:	00024cc6 	.word	0x00024cc6
   11a24:	00024cf3 	.word	0x00024cf3

00011a28 <cmd_kernel_cycles>:
{
   11a28:	b510      	push	{r4, lr}
   11a2a:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   11a2c:	f010 fe12 	bl	22654 <sys_clock_cycle_get_32>
	shell_print(shell, "cycles: %u hw cycles", k_cycle_get_32());
   11a30:	4a03      	ldr	r2, [pc, #12]	; (11a40 <cmd_kernel_cycles+0x18>)
   11a32:	4603      	mov	r3, r0
   11a34:	2108      	movs	r1, #8
   11a36:	4620      	mov	r0, r4
   11a38:	f00d ff89 	bl	1f94e <shell_fprintf>
}
   11a3c:	2000      	movs	r0, #0
   11a3e:	bd10      	pop	{r4, pc}
   11a40:	00024d2a 	.word	0x00024d2a

00011a44 <shell_stack_dump>:
{
   11a44:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t size = thread->stack_info.size;
   11a46:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
{
   11a4a:	b089      	sub	sp, #36	; 0x24
   11a4c:	4604      	mov	r4, r0
   11a4e:	460d      	mov	r5, r1
   11a50:	a907      	add	r1, sp, #28
   11a52:	f010 ff2e 	bl	228b2 <z_impl_k_thread_stack_space_get>
	if (ret) {
   11a56:	4603      	mov	r3, r0
   11a58:	b130      	cbz	r0, 11a68 <shell_stack_dump+0x24>
		shell_print(shell,
   11a5a:	4a10      	ldr	r2, [pc, #64]	; (11a9c <shell_stack_dump+0x58>)
   11a5c:	2108      	movs	r1, #8
   11a5e:	4628      	mov	r0, r5
   11a60:	f00d ff75 	bl	1f94e <shell_fprintf>
}
   11a64:	b009      	add	sp, #36	; 0x24
   11a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tname = k_thread_name_get((struct k_thread *)thread);
   11a68:	4620      	mov	r0, r4
   11a6a:	f010 ff1e 	bl	228aa <k_thread_name_get>
	shell_print((const struct shell *)user_data,
   11a6e:	4f0c      	ldr	r7, [pc, #48]	; (11aa0 <shell_stack_dump+0x5c>)
	pcnt = ((size - unused) * 100U) / size;
   11a70:	9a07      	ldr	r2, [sp, #28]
	shell_print((const struct shell *)user_data,
   11a72:	2800      	cmp	r0, #0
   11a74:	bf08      	it	eq
   11a76:	4638      	moveq	r0, r7
	pcnt = ((size - unused) * 100U) / size;
   11a78:	1ab1      	subs	r1, r6, r2
   11a7a:	2364      	movs	r3, #100	; 0x64
	shell_print((const struct shell *)user_data,
   11a7c:	e9cd 2102 	strd	r2, r1, [sp, #8]
   11a80:	e9cd 0600 	strd	r0, r6, [sp]
	pcnt = ((size - unused) * 100U) / size;
   11a84:	434b      	muls	r3, r1
	shell_print((const struct shell *)user_data,
   11a86:	4a07      	ldr	r2, [pc, #28]	; (11aa4 <shell_stack_dump+0x60>)
	pcnt = ((size - unused) * 100U) / size;
   11a88:	fbb3 f3f6 	udiv	r3, r3, r6
	shell_print((const struct shell *)user_data,
   11a8c:	2108      	movs	r1, #8
   11a8e:	e9cd 6304 	strd	r6, r3, [sp, #16]
   11a92:	4628      	mov	r0, r5
   11a94:	4623      	mov	r3, r4
   11a96:	f00d ff5a 	bl	1f94e <shell_fprintf>
   11a9a:	e7e3      	b.n	11a64 <shell_stack_dump+0x20>
   11a9c:	00024cc6 	.word	0x00024cc6
   11aa0:	00024c74 	.word	0x00024c74
   11aa4:	00024d40 	.word	0x00024d40

00011aa8 <get_device_name>:
};

static const char *get_device_name(const struct device *dev,
				   char *buf,
				   size_t len)
{
   11aa8:	4603      	mov	r3, r0
	const char *name = dev->name;
   11aaa:	6800      	ldr	r0, [r0, #0]
{
   11aac:	b510      	push	{r4, lr}
   11aae:	460c      	mov	r4, r1
   11ab0:	4611      	mov	r1, r2

	if ((name == NULL) || (name[0] == 0)) {
   11ab2:	b108      	cbz	r0, 11ab8 <get_device_name+0x10>
   11ab4:	7802      	ldrb	r2, [r0, #0]
   11ab6:	b922      	cbnz	r2, 11ac2 <get_device_name+0x1a>
		snprintf(buf, len, "[%p]", dev);
   11ab8:	4a02      	ldr	r2, [pc, #8]	; (11ac4 <get_device_name+0x1c>)
   11aba:	4620      	mov	r0, r4
   11abc:	f003 f84a 	bl	14b54 <snprintf>
		name = buf;
   11ac0:	4620      	mov	r0, r4
	}

	return name;
}
   11ac2:	bd10      	pop	{r4, pc}
   11ac4:	00024e4a 	.word	0x00024e4a

00011ac8 <cmd_device_list_visitor>:
	size_t buf_size;
};

static int cmd_device_list_visitor(const struct device *dev,
				   void *context)
{
   11ac8:	b510      	push	{r4, lr}
	const struct cmd_device_list_visitor_context *ctx = context;

	shell_fprintf(ctx->shell, SHELL_NORMAL, "  requires: %s\n",
   11aca:	680c      	ldr	r4, [r1, #0]
   11acc:	e9d1 1201 	ldrd	r1, r2, [r1, #4]
   11ad0:	f7ff ffea 	bl	11aa8 <get_device_name>
   11ad4:	4a03      	ldr	r2, [pc, #12]	; (11ae4 <cmd_device_list_visitor+0x1c>)
   11ad6:	4603      	mov	r3, r0
   11ad8:	2108      	movs	r1, #8
   11ada:	4620      	mov	r0, r4
   11adc:	f00d ff37 	bl	1f94e <shell_fprintf>
		      get_device_name(dev, ctx->buf, ctx->buf_size));

	return 0;
}
   11ae0:	2000      	movs	r0, #0
   11ae2:	bd10      	pop	{r4, pc}
   11ae4:	00024e4f 	.word	0x00024e4f

00011ae8 <cmd_device_list>:

static int cmd_device_list(const struct shell *shell,
			   size_t argc, char **argv)
{
   11ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11aec:	b08a      	sub	sp, #40	; 0x28
   11aee:	4605      	mov	r5, r0
	const struct device *devlist;
	size_t devcnt = z_device_get_all_static(&devlist);
   11af0:	a801      	add	r0, sp, #4
   11af2:	f00a ff21 	bl	1c938 <z_device_get_all_static>
	const struct device *devlist_end = devlist + devcnt;
   11af6:	9b01      	ldr	r3, [sp, #4]
	const struct device *dev;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
   11af8:	4a1b      	ldr	r2, [pc, #108]	; (11b68 <cmd_device_list+0x80>)
	for (dev = devlist; dev < devlist_end; dev++) {
		char buf[20];
		const char *name = get_device_name(dev, buf, sizeof(buf));
		const char *state = "READY";

		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
   11afa:	f8df 8078 	ldr.w	r8, [pc, #120]	; 11b74 <cmd_device_list+0x8c>
		if (!device_is_ready(dev)) {
			state = "DISABLED";
   11afe:	f8df 9078 	ldr.w	r9, [pc, #120]	; 11b78 <cmd_device_list+0x90>
   11b02:	f8df a078 	ldr.w	sl, [pc, #120]	; 11b7c <cmd_device_list+0x94>
	const struct device *devlist_end = devlist + devcnt;
   11b06:	2618      	movs	r6, #24
   11b08:	fb06 3600 	mla	r6, r6, r0, r3
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
   11b0c:	2108      	movs	r1, #8
   11b0e:	4628      	mov	r0, r5
   11b10:	f00d ff1d 	bl	1f94e <shell_fprintf>
	for (dev = devlist; dev < devlist_end; dev++) {
   11b14:	9c01      	ldr	r4, [sp, #4]
   11b16:	42b4      	cmp	r4, r6
   11b18:	d303      	bcc.n	11b22 <cmd_device_list+0x3a>
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
		}
	}

	return 0;
}
   11b1a:	2000      	movs	r0, #0
   11b1c:	b00a      	add	sp, #40	; 0x28
   11b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const char *name = get_device_name(dev, buf, sizeof(buf));
   11b22:	af05      	add	r7, sp, #20
   11b24:	4639      	mov	r1, r7
   11b26:	2214      	movs	r2, #20
   11b28:	4620      	mov	r0, r4
   11b2a:	f7ff ffbd 	bl	11aa8 <get_device_name>
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
   11b2e:	4642      	mov	r2, r8
		const char *name = get_device_name(dev, buf, sizeof(buf));
   11b30:	4603      	mov	r3, r0
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
   11b32:	2108      	movs	r1, #8
   11b34:	4628      	mov	r0, r5
   11b36:	f00d ff0a 	bl	1f94e <shell_fprintf>
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   11b3a:	4620      	mov	r0, r4
   11b3c:	f010 fddc 	bl	226f8 <z_device_ready>
		shell_fprintf(shell, SHELL_NORMAL, " (%s)\n", state);
   11b40:	4a0a      	ldr	r2, [pc, #40]	; (11b6c <cmd_device_list+0x84>)
   11b42:	2800      	cmp	r0, #0
   11b44:	bf14      	ite	ne
   11b46:	464b      	movne	r3, r9
   11b48:	4653      	moveq	r3, sl
   11b4a:	2108      	movs	r1, #8
   11b4c:	4628      	mov	r0, r5
   11b4e:	f00d fefe 	bl	1f94e <shell_fprintf>
			struct cmd_device_list_visitor_context ctx = {
   11b52:	2314      	movs	r3, #20
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
   11b54:	4620      	mov	r0, r4
   11b56:	4906      	ldr	r1, [pc, #24]	; (11b70 <cmd_device_list+0x88>)
			struct cmd_device_list_visitor_context ctx = {
   11b58:	9304      	str	r3, [sp, #16]
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
   11b5a:	aa02      	add	r2, sp, #8
			struct cmd_device_list_visitor_context ctx = {
   11b5c:	e9cd 5702 	strd	r5, r7, [sp, #8]
	for (dev = devlist; dev < devlist_end; dev++) {
   11b60:	3418      	adds	r4, #24
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
   11b62:	f010 fdd3 	bl	2270c <device_required_foreach>
	for (dev = devlist; dev < devlist_end; dev++) {
   11b66:	e7d6      	b.n	11b16 <cmd_device_list+0x2e>
   11b68:	00024e6e 	.word	0x00024e6e
   11b6c:	00024e7d 	.word	0x00024e7d
   11b70:	00011ac9 	.word	0x00011ac9
   11b74:	00024e78 	.word	0x00024e78
   11b78:	00024e5f 	.word	0x00024e5f
   11b7c:	00024e65 	.word	0x00024e65

00011b80 <device_get_config_level>:
{
   11b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   11b84:	4b11      	ldr	r3, [pc, #68]	; (11bcc <device_get_config_level+0x4c>)
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
   11b86:	f8df 9048 	ldr.w	r9, [pc, #72]	; 11bd0 <device_get_config_level+0x50>
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   11b8a:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   11b8e:	3101      	adds	r1, #1
{
   11b90:	b087      	sub	sp, #28
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   11b92:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
{
   11b96:	4606      	mov	r6, r0
	bool devices = false;
   11b98:	2700      	movs	r7, #0
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   11b9a:	45a0      	cmp	r8, r4
   11b9c:	d803      	bhi.n	11ba6 <device_get_config_level+0x26>
}
   11b9e:	4638      	mov	r0, r7
   11ba0:	b007      	add	sp, #28
   11ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11ba6:	4620      	mov	r0, r4
   11ba8:	f010 fda6 	bl	226f8 <z_device_ready>
   11bac:	4605      	mov	r5, r0
   11bae:	b158      	cbz	r0, 11bc8 <device_get_config_level+0x48>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
   11bb0:	2214      	movs	r2, #20
   11bb2:	a901      	add	r1, sp, #4
   11bb4:	4620      	mov	r0, r4
   11bb6:	f7ff ff77 	bl	11aa8 <get_device_name>
   11bba:	464a      	mov	r2, r9
   11bbc:	4603      	mov	r3, r0
   11bbe:	2108      	movs	r1, #8
   11bc0:	4630      	mov	r0, r6
   11bc2:	f00d fec4 	bl	1f94e <shell_fprintf>
			devices = true;
   11bc6:	462f      	mov	r7, r5
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   11bc8:	3418      	adds	r4, #24
   11bca:	e7e6      	b.n	11b9a <device_get_config_level+0x1a>
   11bcc:	00023bd4 	.word	0x00023bd4
   11bd0:	00024e84 	.word	0x00024e84

00011bd4 <cmd_device_levels>:
{
   11bd4:	b510      	push	{r4, lr}
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
   11bd6:	2108      	movs	r1, #8
{
   11bd8:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
   11bda:	4a1e      	ldr	r2, [pc, #120]	; (11c54 <cmd_device_levels+0x80>)
   11bdc:	f00d feb7 	bl	1f94e <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_1);
   11be0:	2100      	movs	r1, #0
   11be2:	4620      	mov	r0, r4
   11be4:	f7ff ffcc 	bl	11b80 <device_get_config_level>
	if (ret == false) {
   11be8:	b920      	cbnz	r0, 11bf4 <cmd_device_levels+0x20>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   11bea:	4a1b      	ldr	r2, [pc, #108]	; (11c58 <cmd_device_levels+0x84>)
   11bec:	2108      	movs	r1, #8
   11bee:	4620      	mov	r0, r4
   11bf0:	f00d fead 	bl	1f94e <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 2:\n");
   11bf4:	2108      	movs	r1, #8
   11bf6:	4620      	mov	r0, r4
   11bf8:	4a18      	ldr	r2, [pc, #96]	; (11c5c <cmd_device_levels+0x88>)
   11bfa:	f00d fea8 	bl	1f94e <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_2);
   11bfe:	2101      	movs	r1, #1
   11c00:	4620      	mov	r0, r4
   11c02:	f7ff ffbd 	bl	11b80 <device_get_config_level>
	if (ret == false) {
   11c06:	b920      	cbnz	r0, 11c12 <cmd_device_levels+0x3e>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   11c08:	4a13      	ldr	r2, [pc, #76]	; (11c58 <cmd_device_levels+0x84>)
   11c0a:	2108      	movs	r1, #8
   11c0c:	4620      	mov	r0, r4
   11c0e:	f00d fe9e 	bl	1f94e <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
   11c12:	2108      	movs	r1, #8
   11c14:	4620      	mov	r0, r4
   11c16:	4a12      	ldr	r2, [pc, #72]	; (11c60 <cmd_device_levels+0x8c>)
   11c18:	f00d fe99 	bl	1f94e <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_POST_KERNEL);
   11c1c:	2102      	movs	r1, #2
   11c1e:	4620      	mov	r0, r4
   11c20:	f7ff ffae 	bl	11b80 <device_get_config_level>
	if (ret == false) {
   11c24:	b920      	cbnz	r0, 11c30 <cmd_device_levels+0x5c>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   11c26:	4a0c      	ldr	r2, [pc, #48]	; (11c58 <cmd_device_levels+0x84>)
   11c28:	2108      	movs	r1, #8
   11c2a:	4620      	mov	r0, r4
   11c2c:	f00d fe8f 	bl	1f94e <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "APPLICATION:\n");
   11c30:	2108      	movs	r1, #8
   11c32:	4620      	mov	r0, r4
   11c34:	4a0b      	ldr	r2, [pc, #44]	; (11c64 <cmd_device_levels+0x90>)
   11c36:	f00d fe8a 	bl	1f94e <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_APPLICATION);
   11c3a:	2103      	movs	r1, #3
   11c3c:	4620      	mov	r0, r4
   11c3e:	f7ff ff9f 	bl	11b80 <device_get_config_level>
	if (ret == false) {
   11c42:	b920      	cbnz	r0, 11c4e <cmd_device_levels+0x7a>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   11c44:	4a04      	ldr	r2, [pc, #16]	; (11c58 <cmd_device_levels+0x84>)
   11c46:	2108      	movs	r1, #8
   11c48:	4620      	mov	r0, r4
   11c4a:	f00d fe80 	bl	1f94e <shell_fprintf>
}
   11c4e:	2000      	movs	r0, #0
   11c50:	bd10      	pop	{r4, pc}
   11c52:	bf00      	nop
   11c54:	00024e8a 	.word	0x00024e8a
   11c58:	00024e99 	.word	0x00024e99
   11c5c:	00024ea1 	.word	0x00024ea1
   11c60:	00024eb0 	.word	0x00024eb0
   11c64:	00024ebe 	.word	0x00024ebe

00011c68 <cmd_devmem>:
{
	mem_addr_t phys_addr, addr;
	uint32_t value = 0;
	uint8_t width;

	if (argc < 2 || argc > 4) {
   11c68:	1e8b      	subs	r3, r1, #2
   11c6a:	2b02      	cmp	r3, #2
{
   11c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c70:	4607      	mov	r7, r0
   11c72:	4688      	mov	r8, r1
   11c74:	4614      	mov	r4, r2
	if (argc < 2 || argc > 4) {
   11c76:	d833      	bhi.n	11ce0 <cmd_devmem+0x78>
		return -EINVAL;
	}

	phys_addr = strtoul(argv[1], NULL, 16);
   11c78:	6860      	ldr	r0, [r4, #4]
   11c7a:	2210      	movs	r2, #16
   11c7c:	2100      	movs	r1, #0
   11c7e:	f00e ff76 	bl	20b6e <strtoul>
	shell_print(sh, "Mapped 0x%lx to 0x%lx\n", phys_addr, addr);
#else
	addr = phys_addr;
#endif /* defined(CONFIG_MMU) || defined(CONFIG_PCIE) */

	if (argc < 3) {
   11c82:	f1b8 0f02 	cmp.w	r8, #2
	phys_addr = strtoul(argv[1], NULL, 16);
   11c86:	4606      	mov	r6, r0
	if (argc < 3) {
   11c88:	d01e      	beq.n	11cc8 <cmd_devmem+0x60>
		width = 32;
	} else {
		width = strtoul(argv[2], NULL, 10);
   11c8a:	68a0      	ldr	r0, [r4, #8]
   11c8c:	220a      	movs	r2, #10
   11c8e:	2100      	movs	r1, #0
   11c90:	f00e ff6d 	bl	20b6e <strtoul>
   11c94:	b2c5      	uxtb	r5, r0
	}

	shell_fprintf(sh, SHELL_NORMAL, "Using data width %d\n", width);
   11c96:	4a21      	ldr	r2, [pc, #132]	; (11d1c <cmd_devmem+0xb4>)
   11c98:	462b      	mov	r3, r5
   11c9a:	2108      	movs	r1, #8
   11c9c:	4638      	mov	r0, r7
   11c9e:	f00d fe56 	bl	1f94e <shell_fprintf>

	if (argc <= 3) {
   11ca2:	f1b8 0f04 	cmp.w	r8, #4
   11ca6:	d01e      	beq.n	11ce6 <cmd_devmem+0x7e>
	switch (width) {
   11ca8:	2d10      	cmp	r5, #16
   11caa:	d00f      	beq.n	11ccc <cmd_devmem+0x64>
   11cac:	2d20      	cmp	r5, #32
   11cae:	d010      	beq.n	11cd2 <cmd_devmem+0x6a>
   11cb0:	2d08      	cmp	r5, #8
   11cb2:	d110      	bne.n	11cd6 <cmd_devmem+0x6e>
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
   11cb4:	7833      	ldrb	r3, [r6, #0]
   11cb6:	b2db      	uxtb	r3, r3
		shell_fprintf(sh, SHELL_NORMAL, "Read value 0x%x\n", value);
   11cb8:	4a19      	ldr	r2, [pc, #100]	; (11d20 <cmd_devmem+0xb8>)
   11cba:	2108      	movs	r1, #8
   11cbc:	4638      	mov	r0, r7
   11cbe:	f00d fe46 	bl	1f94e <shell_fprintf>
	int err = 0;
   11cc2:	2000      	movs	r0, #0
	value = strtoul(argv[3], NULL, 16);

	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);

	return memory_write(sh, addr, width, value);
}
   11cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		width = 32;
   11cc8:	2520      	movs	r5, #32
   11cca:	e7e4      	b.n	11c96 <cmd_devmem+0x2e>
	*(volatile uint8_t *)addr = data;
}

static ALWAYS_INLINE uint16_t sys_read16(mem_addr_t addr)
{
	return *(volatile uint16_t *)addr;
   11ccc:	8833      	ldrh	r3, [r6, #0]
   11cce:	b29b      	uxth	r3, r3
	if (err == 0) {
   11cd0:	e7f2      	b.n	11cb8 <cmd_devmem+0x50>
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
   11cd2:	6833      	ldr	r3, [r6, #0]
   11cd4:	e7f0      	b.n	11cb8 <cmd_devmem+0x50>
		shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
   11cd6:	4a13      	ldr	r2, [pc, #76]	; (11d24 <cmd_devmem+0xbc>)
   11cd8:	2108      	movs	r1, #8
   11cda:	4638      	mov	r0, r7
   11cdc:	f00d fe37 	bl	1f94e <shell_fprintf>
		return -EINVAL;
   11ce0:	f06f 0015 	mvn.w	r0, #21
   11ce4:	e7ee      	b.n	11cc4 <cmd_devmem+0x5c>
	value = strtoul(argv[3], NULL, 16);
   11ce6:	68e0      	ldr	r0, [r4, #12]
   11ce8:	2210      	movs	r2, #16
   11cea:	2100      	movs	r1, #0
   11cec:	f00e ff3f 	bl	20b6e <strtoul>
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
   11cf0:	4a0d      	ldr	r2, [pc, #52]	; (11d28 <cmd_devmem+0xc0>)
   11cf2:	4603      	mov	r3, r0
	value = strtoul(argv[3], NULL, 16);
   11cf4:	4604      	mov	r4, r0
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
   11cf6:	2108      	movs	r1, #8
   11cf8:	4638      	mov	r0, r7
   11cfa:	f00d fe28 	bl	1f94e <shell_fprintf>
	switch (width) {
   11cfe:	2d10      	cmp	r5, #16
   11d00:	d006      	beq.n	11d10 <cmd_devmem+0xa8>
   11d02:	2d20      	cmp	r5, #32
   11d04:	d007      	beq.n	11d16 <cmd_devmem+0xae>
   11d06:	2d08      	cmp	r5, #8
   11d08:	d1e5      	bne.n	11cd6 <cmd_devmem+0x6e>
		sys_write8(value, addr);
   11d0a:	b2e4      	uxtb	r4, r4
	*(volatile uint8_t *)addr = data;
   11d0c:	7034      	strb	r4, [r6, #0]
   11d0e:	e7d8      	b.n	11cc2 <cmd_devmem+0x5a>
		sys_write16(value, addr);
   11d10:	b2a4      	uxth	r4, r4
	*(volatile uint16_t *)addr = data;
   11d12:	8034      	strh	r4, [r6, #0]
   11d14:	e7d5      	b.n	11cc2 <cmd_devmem+0x5a>
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
   11d16:	6034      	str	r4, [r6, #0]
   11d18:	e7d3      	b.n	11cc2 <cmd_devmem+0x5a>
   11d1a:	bf00      	nop
   11d1c:	00024f22 	.word	0x00024f22
   11d20:	00024f4d 	.word	0x00024f4d
   11d24:	00024f37 	.word	0x00024f37
   11d28:	00024f5e 	.word	0x00024f5e

00011d2c <set_bypass>:
{
   11d2c:	b570      	push	{r4, r5, r6, lr}
   11d2e:	4c0f      	ldr	r4, [pc, #60]	; (11d6c <set_bypass+0x40>)
   11d30:	4605      	mov	r5, r0
	if (bypass && in_use) {
   11d32:	7823      	ldrb	r3, [r4, #0]
   11d34:	460e      	mov	r6, r1
   11d36:	b139      	cbz	r1, 11d48 <set_bypass+0x1c>
   11d38:	b133      	cbz	r3, 11d48 <set_bypass+0x1c>
		shell_error(sh, "devmem load supports setting bypass on a single instance.");
   11d3a:	4a0d      	ldr	r2, [pc, #52]	; (11d70 <set_bypass+0x44>)
   11d3c:	2101      	movs	r1, #1
   11d3e:	f00d fe06 	bl	1f94e <shell_fprintf>
   11d42:	f06f 000f 	mvn.w	r0, #15
}
   11d46:	bd70      	pop	{r4, r5, r6, pc}
	in_use = !in_use;
   11d48:	f083 0301 	eor.w	r3, r3, #1
   11d4c:	7023      	strb	r3, [r4, #0]
	if (in_use) {
   11d4e:	b133      	cbz	r3, 11d5e <set_bypass+0x32>
		shell_print(sh, "Loading...\npress ctrl-x ctrl-q to escape");
   11d50:	4a08      	ldr	r2, [pc, #32]	; (11d74 <set_bypass+0x48>)
   11d52:	2108      	movs	r1, #8
   11d54:	4628      	mov	r0, r5
   11d56:	f00d fdfa 	bl	1f94e <shell_fprintf>
		in_use = true;
   11d5a:	2301      	movs	r3, #1
   11d5c:	7023      	strb	r3, [r4, #0]
	shell_set_bypass(sh, bypass);
   11d5e:	4628      	mov	r0, r5
   11d60:	4631      	mov	r1, r6
   11d62:	f00d fe01 	bl	1f968 <shell_set_bypass>
	return 0;
   11d66:	2000      	movs	r0, #0
   11d68:	e7ed      	b.n	11d46 <set_bypass+0x1a>
   11d6a:	bf00      	nop
   11d6c:	20002806 	.word	0x20002806
   11d70:	00024f72 	.word	0x00024f72
   11d74:	00024fad 	.word	0x00024fad

00011d78 <cmd_load>:
{
   11d78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d7c:	4606      	mov	r6, r0
	chunk_element = 0;
   11d7e:	482e      	ldr	r0, [pc, #184]	; (11e38 <cmd_load+0xc0>)
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
   11d80:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 11e50 <cmd_load+0xd8>
		if (!strncmp(arg, "-e", 2)) {
   11d84:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 11e54 <cmd_load+0xdc>
			shell_print(sh, "Unknown option \"%s\"", arg);
   11d88:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 11e58 <cmd_load+0xe0>
	littleendian = false;
   11d8c:	2300      	movs	r3, #0
	chunk_element = 0;
   11d8e:	6003      	str	r3, [r0, #0]
{
   11d90:	460d      	mov	r5, r1
	sum = 0;
   11d92:	482a      	ldr	r0, [pc, #168]	; (11e3c <cmd_load+0xc4>)
	littleendian = false;
   11d94:	492a      	ldr	r1, [pc, #168]	; (11e40 <cmd_load+0xc8>)
	sum = 0;
   11d96:	6003      	str	r3, [r0, #0]
	littleendian = false;
   11d98:	700b      	strb	r3, [r1, #0]
	while (argc >= 2) {
   11d9a:	4614      	mov	r4, r2
   11d9c:	9100      	str	r1, [sp, #0]
   11d9e:	2d01      	cmp	r5, #1
   11da0:	4627      	mov	r7, r4
   11da2:	f854 3f04 	ldr.w	r3, [r4, #4]!
   11da6:	d921      	bls.n	11dec <cmd_load+0x74>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
   11da8:	4618      	mov	r0, r3
   11daa:	2202      	movs	r2, #2
   11dac:	4649      	mov	r1, r9
   11dae:	9301      	str	r3, [sp, #4]
   11db0:	f00e ffbd 	bl	20d2e <strncmp>
   11db4:	9b01      	ldr	r3, [sp, #4]
   11db6:	b988      	cbnz	r0, 11ddc <cmd_load+0x64>
   11db8:	6822      	ldr	r2, [r4, #0]
   11dba:	7892      	ldrb	r2, [r2, #2]
   11dbc:	3a00      	subs	r2, #0
   11dbe:	bf18      	it	ne
   11dc0:	2201      	movne	r2, #1
   11dc2:	eb03 0802 	add.w	r8, r3, r2
		if (!strncmp(arg, "-e", 2)) {
   11dc6:	4651      	mov	r1, sl
   11dc8:	2202      	movs	r2, #2
   11dca:	4640      	mov	r0, r8
   11dcc:	f00e ffaf 	bl	20d2e <strncmp>
   11dd0:	b930      	cbnz	r0, 11de0 <cmd_load+0x68>
			littleendian = true;
   11dd2:	9a00      	ldr	r2, [sp, #0]
   11dd4:	2301      	movs	r3, #1
   11dd6:	7013      	strb	r3, [r2, #0]
		argc--;
   11dd8:	3d01      	subs	r5, #1
   11dda:	e7e0      	b.n	11d9e <cmd_load+0x26>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
   11ddc:	2200      	movs	r2, #0
   11dde:	e7f0      	b.n	11dc2 <cmd_load+0x4a>
		} else if (!strcmp(arg, "--")) {
   11de0:	4649      	mov	r1, r9
   11de2:	4640      	mov	r0, r8
   11de4:	f00e ff97 	bl	20d16 <strcmp>
   11de8:	b9b0      	cbnz	r0, 11e18 <cmd_load+0xa0>
			argv++;
   11dea:	3704      	adds	r7, #4
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
   11dec:	2200      	movs	r2, #0
   11dee:	4611      	mov	r1, r2
   11df0:	6878      	ldr	r0, [r7, #4]
   11df2:	f00e fe46 	bl	20a82 <strtol>
   11df6:	4b13      	ldr	r3, [pc, #76]	; (11e44 <cmd_load+0xcc>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
   11df8:	2200      	movs	r2, #0
   11dfa:	4611      	mov	r1, r2
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
   11dfc:	6018      	str	r0, [r3, #0]
	data = (uint32_t *)strtol(argv[1], NULL, 0);
   11dfe:	6878      	ldr	r0, [r7, #4]
   11e00:	f00e fe3f 	bl	20a82 <strtol>
   11e04:	4b10      	ldr	r3, [pc, #64]	; (11e48 <cmd_load+0xd0>)
	set_bypass(sh, bypass_cb);
   11e06:	4911      	ldr	r1, [pc, #68]	; (11e4c <cmd_load+0xd4>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
   11e08:	6018      	str	r0, [r3, #0]
	set_bypass(sh, bypass_cb);
   11e0a:	4630      	mov	r0, r6
   11e0c:	f7ff ff8e 	bl	11d2c <set_bypass>
}
   11e10:	2000      	movs	r0, #0
   11e12:	b003      	add	sp, #12
   11e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (arg[0] == '-' && arg[1]) {
   11e18:	f898 2000 	ldrb.w	r2, [r8]
   11e1c:	2a2d      	cmp	r2, #45	; 0x2d
   11e1e:	d1e5      	bne.n	11dec <cmd_load+0x74>
   11e20:	f898 2001 	ldrb.w	r2, [r8, #1]
   11e24:	2a00      	cmp	r2, #0
   11e26:	d0e1      	beq.n	11dec <cmd_load+0x74>
			shell_print(sh, "Unknown option \"%s\"", arg);
   11e28:	4643      	mov	r3, r8
   11e2a:	465a      	mov	r2, fp
   11e2c:	2108      	movs	r1, #8
   11e2e:	4630      	mov	r0, r6
   11e30:	f00d fd8d 	bl	1f94e <shell_fprintf>
   11e34:	e7d0      	b.n	11dd8 <cmd_load+0x60>
   11e36:	bf00      	nop
   11e38:	20002198 	.word	0x20002198
   11e3c:	200021a0 	.word	0x200021a0
   11e40:	20002807 	.word	0x20002807
   11e44:	20002194 	.word	0x20002194
   11e48:	2000219c 	.word	0x2000219c
   11e4c:	00011e5d 	.word	0x00011e5d
   11e50:	00024fd7 	.word	0x00024fd7
   11e54:	00024fda 	.word	0x00024fda
   11e58:	00024fdd 	.word	0x00024fdd

00011e5c <bypass_cb>:
{
   11e5c:	b570      	push	{r4, r5, r6, lr}
	if (tail == CHAR_CAN && recv[0] == CHAR_DC1) {
   11e5e:	4b3e      	ldr	r3, [pc, #248]	; (11f58 <bypass_cb+0xfc>)
{
   11e60:	4605      	mov	r5, r0
	if (tail == CHAR_CAN && recv[0] == CHAR_DC1) {
   11e62:	7818      	ldrb	r0, [r3, #0]
   11e64:	2818      	cmp	r0, #24
   11e66:	d102      	bne.n	11e6e <bypass_cb+0x12>
   11e68:	7808      	ldrb	r0, [r1, #0]
   11e6a:	2811      	cmp	r0, #17
   11e6c:	d031      	beq.n	11ed2 <bypass_cb+0x76>
   11e6e:	3a01      	subs	r2, #1
   11e70:	4608      	mov	r0, r1
   11e72:	1854      	adds	r4, r2, r1
		for (int i = 0; i < (len - 1); i++) {
   11e74:	4284      	cmp	r4, r0
   11e76:	d125      	bne.n	11ec4 <bypass_cb+0x68>
	tail = recv[len - 1];
   11e78:	5c8a      	ldrb	r2, [r1, r2]
   11e7a:	701a      	strb	r2, [r3, #0]
	if (is_ascii(*recv)) {
   11e7c:	780a      	ldrb	r2, [r1, #0]
	return (data >= 0x30 && data <= 0x39) || (data >= 0x61 && data <= 0x66) ||
   11e7e:	4c37      	ldr	r4, [pc, #220]	; (11f5c <bypass_cb+0x100>)
   11e80:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   11e84:	2b09      	cmp	r3, #9
   11e86:	d904      	bls.n	11e92 <bypass_cb+0x36>
	if (is_ascii(*recv)) {
   11e88:	f022 0320 	bic.w	r3, r2, #32
   11e8c:	3b41      	subs	r3, #65	; 0x41
   11e8e:	2b05      	cmp	r3, #5
   11e90:	d804      	bhi.n	11e9c <bypass_cb+0x40>
		chunk[chunk_element] = *recv;
   11e92:	6823      	ldr	r3, [r4, #0]
   11e94:	4932      	ldr	r1, [pc, #200]	; (11f60 <bypass_cb+0x104>)
   11e96:	54ca      	strb	r2, [r1, r3]
		chunk_element++;
   11e98:	3301      	adds	r3, #1
   11e9a:	6023      	str	r3, [r4, #0]
	if (chunk_element == 2) {
   11e9c:	6823      	ldr	r3, [r4, #0]
   11e9e:	2b02      	cmp	r3, #2
   11ea0:	d134      	bne.n	11f0c <bypass_cb+0xb0>
		byte = (uint8_t)strtoul(chunk, NULL, 16);
   11ea2:	2210      	movs	r2, #16
   11ea4:	482e      	ldr	r0, [pc, #184]	; (11f60 <bypass_cb+0x104>)
   11ea6:	2100      	movs	r1, #0
   11ea8:	f00e fe61 	bl	20b6e <strtoul>
		*bytes = byte;
   11eac:	4a2d      	ldr	r2, [pc, #180]	; (11f64 <bypass_cb+0x108>)
		byte = (uint8_t)strtoul(chunk, NULL, 16);
   11eae:	6813      	ldr	r3, [r2, #0]
   11eb0:	f803 0b01 	strb.w	r0, [r3], #1
		bytes++;
   11eb4:	6013      	str	r3, [r2, #0]
		sum++;
   11eb6:	4a2c      	ldr	r2, [pc, #176]	; (11f68 <bypass_cb+0x10c>)
   11eb8:	6813      	ldr	r3, [r2, #0]
   11eba:	3301      	adds	r3, #1
   11ebc:	6013      	str	r3, [r2, #0]
		chunk_element = 0;
   11ebe:	2300      	movs	r3, #0
   11ec0:	6023      	str	r3, [r4, #0]
   11ec2:	e023      	b.n	11f0c <bypass_cb+0xb0>
			if (recv[i] == CHAR_CAN && recv[i + 1] == CHAR_DC1) {
   11ec4:	f810 6b01 	ldrb.w	r6, [r0], #1
   11ec8:	2e18      	cmp	r6, #24
   11eca:	d1d3      	bne.n	11e74 <bypass_cb+0x18>
   11ecc:	7806      	ldrb	r6, [r0, #0]
   11ece:	2e11      	cmp	r6, #17
   11ed0:	d1d0      	bne.n	11e74 <bypass_cb+0x18>
		shell_print(sh, "Number of bytes read: %d", sum);
   11ed2:	4c25      	ldr	r4, [pc, #148]	; (11f68 <bypass_cb+0x10c>)
   11ed4:	4a25      	ldr	r2, [pc, #148]	; (11f6c <bypass_cb+0x110>)
   11ed6:	6823      	ldr	r3, [r4, #0]
   11ed8:	2108      	movs	r1, #8
   11eda:	4628      	mov	r0, r5
   11edc:	f00d fd37 	bl	1f94e <shell_fprintf>
		set_bypass(sh, NULL);
   11ee0:	2100      	movs	r1, #0
   11ee2:	4628      	mov	r0, r5
   11ee4:	f7ff ff22 	bl	11d2c <set_bypass>
		if (!littleendian) {
   11ee8:	4b21      	ldr	r3, [pc, #132]	; (11f70 <bypass_cb+0x114>)
   11eea:	7818      	ldrb	r0, [r3, #0]
   11eec:	b970      	cbnz	r0, 11f0c <bypass_cb+0xb0>
   11eee:	4a21      	ldr	r2, [pc, #132]	; (11f74 <bypass_cb+0x118>)
   11ef0:	6823      	ldr	r3, [r4, #0]
   11ef2:	6811      	ldr	r1, [r2, #0]
			while (sum > 4) {
   11ef4:	2b04      	cmp	r3, #4
   11ef6:	dc0a      	bgt.n	11f0e <bypass_cb+0xb2>
   11ef8:	b108      	cbz	r0, 11efe <bypass_cb+0xa2>
   11efa:	6011      	str	r1, [r2, #0]
   11efc:	6023      	str	r3, [r4, #0]
			if (sum % 4 == 0) {
   11efe:	f013 0103 	ands.w	r1, r3, #3
   11f02:	d10b      	bne.n	11f1c <bypass_cb+0xc0>
				*data = __bswap_32(*data);
   11f04:	6812      	ldr	r2, [r2, #0]
   11f06:	6813      	ldr	r3, [r2, #0]
   11f08:	ba1b      	rev	r3, r3
				*data = __bswap_16(*data);
   11f0a:	6013      	str	r3, [r2, #0]
}
   11f0c:	bd70      	pop	{r4, r5, r6, pc}
				*data = __bswap_32(*data);
   11f0e:	6808      	ldr	r0, [r1, #0]
   11f10:	ba00      	rev	r0, r0
   11f12:	f841 0b04 	str.w	r0, [r1], #4
				sum = sum - 4;
   11f16:	3b04      	subs	r3, #4
				data++;
   11f18:	2001      	movs	r0, #1
   11f1a:	e7eb      	b.n	11ef4 <bypass_cb+0x98>
			} else if (sum % 4 == 2) {
   11f1c:	425b      	negs	r3, r3
   11f1e:	f003 0303 	and.w	r3, r3, #3
   11f22:	bf58      	it	pl
   11f24:	4259      	negpl	r1, r3
   11f26:	2902      	cmp	r1, #2
   11f28:	d107      	bne.n	11f3a <bypass_cb+0xde>
				*data = __bswap_16(*data);
   11f2a:	6812      	ldr	r2, [r2, #0]
   11f2c:	6811      	ldr	r1, [r2, #0]
   11f2e:	f3c1 2307 	ubfx	r3, r1, #8, #8
   11f32:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   11f36:	b29b      	uxth	r3, r3
   11f38:	e7e7      	b.n	11f0a <bypass_cb+0xae>
			} else if (sum % 4 == 3) {
   11f3a:	2903      	cmp	r1, #3
   11f3c:	d1e6      	bne.n	11f0c <bypass_cb+0xb0>
				*data = __bswap_24(*data);
   11f3e:	6810      	ldr	r0, [r2, #0]
   11f40:	6802      	ldr	r2, [r0, #0]
   11f42:	0411      	lsls	r1, r2, #16
   11f44:	f3c2 4307 	ubfx	r3, r2, #16, #8
   11f48:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   11f4c:	430b      	orrs	r3, r1
   11f4e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
   11f52:	4313      	orrs	r3, r2
   11f54:	6003      	str	r3, [r0, #0]
   11f56:	e7d9      	b.n	11f0c <bypass_cb+0xb0>
   11f58:	20002808 	.word	0x20002808
   11f5c:	20002198 	.word	0x20002198
   11f60:	20002804 	.word	0x20002804
   11f64:	20002194 	.word	0x20002194
   11f68:	200021a0 	.word	0x200021a0
   11f6c:	00024ff2 	.word	0x00024ff2
   11f70:	20002807 	.word	0x20002807
   11f74:	2000219c 	.word	0x2000219c

00011f78 <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(const struct device *arg)
{
   11f78:	b507      	push	{r0, r1, r2, lr}
   11f7a:	480a      	ldr	r0, [pc, #40]	; (11fa4 <enable_shell_uart+0x2c>)
   11f7c:	f010 fbbc 	bl	226f8 <z_device_ready>
   11f80:	b160      	cbz	r0, 11f9c <enable_shell_uart+0x24>

	if (IS_ENABLED(CONFIG_MCUMGR_SMP_SHELL)) {
		smp_shell_init();
	}

	shell_init(&shell_uart, dev, cfg_flags, log_backend, level);
   11f82:	4a09      	ldr	r2, [pc, #36]	; (11fa8 <enable_shell_uart+0x30>)
   11f84:	4907      	ldr	r1, [pc, #28]	; (11fa4 <enable_shell_uart+0x2c>)
   11f86:	6812      	ldr	r2, [r2, #0]
   11f88:	4808      	ldr	r0, [pc, #32]	; (11fac <enable_shell_uart+0x34>)
   11f8a:	2304      	movs	r3, #4
   11f8c:	9300      	str	r3, [sp, #0]
   11f8e:	2301      	movs	r3, #1
   11f90:	f000 fe06 	bl	12ba0 <shell_init>

	return 0;
   11f94:	2000      	movs	r0, #0
}
   11f96:	b003      	add	sp, #12
   11f98:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENODEV;
   11f9c:	f06f 0012 	mvn.w	r0, #18
   11fa0:	e7f9      	b.n	11f96 <enable_shell_uart+0x1e>
   11fa2:	bf00      	nop
   11fa4:	0002339c 	.word	0x0002339c
   11fa8:	00023c70 	.word	0x00023c70
   11fac:	00023610 	.word	0x00023610

00011fb0 <uart_callback>:
{
   11fb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fb4:	4683      	mov	fp, r0
   11fb6:	460d      	mov	r5, r1
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
   11fb8:	6883      	ldr	r3, [r0, #8]
   11fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11fbc:	b103      	cbz	r3, 11fc0 <uart_callback+0x10>
		return -ENOSYS;
	}
	return api->irq_update(dev);
   11fbe:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
   11fc0:	f8db 3008 	ldr.w	r3, [fp, #8]
   11fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   11fc6:	bb83      	cbnz	r3, 1202a <uart_callback+0x7a>
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
   11fc8:	4b3d      	ldr	r3, [pc, #244]	; (120c0 <uart_callback+0x110>)
   11fca:	4e3e      	ldr	r6, [pc, #248]	; (120c4 <uart_callback+0x114>)
			LOG_WRN("RX ring buffer full.");
   11fcc:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 120c8 <uart_callback+0x118>
   11fd0:	1b9e      	subs	r6, r3, r6
   11fd2:	08b6      	lsrs	r6, r6, #2
   11fd4:	01b6      	lsls	r6, r6, #6
   11fd6:	f04f 0900 	mov.w	r9, #0
   11fda:	4698      	mov	r8, r3
   11fdc:	f046 0602 	orr.w	r6, r6, #2
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
   11fe0:	68e8      	ldr	r0, [r5, #12]
   11fe2:	a901      	add	r1, sp, #4
   11fe4:	6902      	ldr	r2, [r0, #16]
   11fe6:	f00c fd6c 	bl	1eac2 <ring_buf_put_claim>
		if (len > 0) {
   11fea:	4607      	mov	r7, r0
   11fec:	2800      	cmp	r0, #0
   11fee:	d034      	beq.n	1205a <uart_callback+0xaa>
	if (api->fifo_read == NULL) {
   11ff0:	f8db 3008 	ldr.w	r3, [fp, #8]
			rd_len = uart_fifo_read(dev, data, len);
   11ff4:	9901      	ldr	r1, [sp, #4]
   11ff6:	699b      	ldr	r3, [r3, #24]
   11ff8:	b363      	cbz	r3, 12054 <uart_callback+0xa4>
	return api->fifo_read(dev, rx_data, size);
   11ffa:	4602      	mov	r2, r0
   11ffc:	4658      	mov	r0, fp
   11ffe:	4798      	blx	r3
   12000:	4604      	mov	r4, r0
				new_data = true;
   12002:	2c00      	cmp	r4, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
   12004:	68e8      	ldr	r0, [r5, #12]
   12006:	4621      	mov	r1, r4
				new_data = true;
   12008:	bf18      	it	ne
   1200a:	f04f 0901 	movne.w	r9, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
   1200e:	f00c fd74 	bl	1eafa <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
   12012:	b10c      	cbz	r4, 12018 <uart_callback+0x68>
   12014:	42a7      	cmp	r7, r4
   12016:	d0e3      	beq.n	11fe0 <uart_callback+0x30>
	if (new_data) {
   12018:	f1b9 0f00 	cmp.w	r9, #0
   1201c:	d009      	beq.n	12032 <uart_callback+0x82>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
   1201e:	682b      	ldr	r3, [r5, #0]
   12020:	2000      	movs	r0, #0
   12022:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   12026:	4790      	blx	r2
}
   12028:	e003      	b.n	12032 <uart_callback+0x82>
	return api->irq_rx_ready(dev);
   1202a:	4658      	mov	r0, fp
   1202c:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
   1202e:	2800      	cmp	r0, #0
   12030:	d1ca      	bne.n	11fc8 <uart_callback+0x18>
	if (api->irq_tx_ready == NULL) {
   12032:	f8db 3008 	ldr.w	r3, [fp, #8]
   12036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12038:	bb33      	cbnz	r3, 12088 <uart_callback+0xd8>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (uint8_t **)&data,
   1203a:	68a8      	ldr	r0, [r5, #8]
   1203c:	a901      	add	r1, sp, #4
   1203e:	6902      	ldr	r2, [r0, #16]
   12040:	f00c fd94 	bl	1eb6c <ring_buf_get_claim>
	if (len) {
   12044:	4604      	mov	r4, r0
   12046:	bb30      	cbnz	r0, 12096 <uart_callback+0xe6>
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_TX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
   12048:	4658      	mov	r0, fp
   1204a:	f00d fb26 	bl	1f69a <z_impl_uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
   1204e:	682b      	ldr	r3, [r5, #0]
   12050:	60dc      	str	r4, [r3, #12]
   12052:	e02c      	b.n	120ae <uart_callback+0xfe>
		return -ENOSYS;
   12054:	f06f 0457 	mvn.w	r4, #87	; 0x57
   12058:	e7d3      	b.n	12002 <uart_callback+0x52>
			LOG_WRN("RX ring buffer full.");
   1205a:	f8d8 3000 	ldr.w	r3, [r8]
   1205e:	f013 0f06 	tst.w	r3, #6
   12062:	d003      	beq.n	1206c <uart_callback+0xbc>
   12064:	4631      	mov	r1, r6
   12066:	4650      	mov	r0, sl
   12068:	f00c ff65 	bl	1ef36 <log_0>
	if (api->fifo_read == NULL) {
   1206c:	f8db 3008 	ldr.w	r3, [fp, #8]
   12070:	699b      	ldr	r3, [r3, #24]
   12072:	b133      	cbz	r3, 12082 <uart_callback+0xd2>
	return api->fifo_read(dev, rx_data, size);
   12074:	2201      	movs	r2, #1
   12076:	f10d 0103 	add.w	r1, sp, #3
   1207a:	4658      	mov	r0, fp
   1207c:	4798      	blx	r3
   1207e:	4604      	mov	r4, r0
   12080:	e7c7      	b.n	12012 <uart_callback+0x62>
		return -ENOSYS;
   12082:	f06f 0457 	mvn.w	r4, #87	; 0x57
   12086:	e7c4      	b.n	12012 <uart_callback+0x62>
	return api->irq_tx_ready(dev);
   12088:	4658      	mov	r0, fp
   1208a:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
   1208c:	2800      	cmp	r0, #0
   1208e:	d1d4      	bne.n	1203a <uart_callback+0x8a>
}
   12090:	b003      	add	sp, #12
   12092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (api->fifo_fill == NULL) {
   12096:	f8db 3008 	ldr.w	r3, [fp, #8]
		len = uart_fifo_fill(dev, data, len);
   1209a:	9901      	ldr	r1, [sp, #4]
   1209c:	695b      	ldr	r3, [r3, #20]
   1209e:	b163      	cbz	r3, 120ba <uart_callback+0x10a>
	return api->fifo_fill(dev, tx_data, size);
   120a0:	4602      	mov	r2, r0
   120a2:	4658      	mov	r0, fp
   120a4:	4798      	blx	r3
   120a6:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
   120a8:	68a8      	ldr	r0, [r5, #8]
   120aa:	f00c fd89 	bl	1ebc0 <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   120ae:	682b      	ldr	r3, [r5, #0]
   120b0:	2001      	movs	r0, #1
   120b2:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   120b6:	4790      	blx	r2
}
   120b8:	e7ea      	b.n	12090 <uart_callback+0xe0>
		return -ENOSYS;
   120ba:	f06f 0157 	mvn.w	r1, #87	; 0x57
   120be:	e7f3      	b.n	120a8 <uart_callback+0xf8>
   120c0:	200006b0 	.word	0x200006b0
   120c4:	20000654 	.word	0x20000654
   120c8:	00025099 	.word	0x00025099

000120cc <init>:
{
   120cc:	b570      	push	{r4, r5, r6, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
   120ce:	6846      	ldr	r6, [r0, #4]
{
   120d0:	460c      	mov	r4, r1
	sh_uart->ctrl_blk->dev = (const struct device *)config;
   120d2:	6831      	ldr	r1, [r6, #0]
	ring_buf_reset(sh_uart->tx_ringbuf);
   120d4:	68b0      	ldr	r0, [r6, #8]
	sh_uart->ctrl_blk->context = context;
   120d6:	608b      	str	r3, [r1, #8]
 *
 * @param buf Address of ring buffer.
 */
static inline void ring_buf_reset(struct ring_buf *buf)
{
	buf->head = 0;
   120d8:	2500      	movs	r5, #0
	sh_uart->ctrl_blk->handler = evt_handler;
   120da:	e9c1 4200 	strd	r4, r2, [r1]
	buf->tail = 0;
	memset(&buf->misc, 0, sizeof(buf->misc));
   120de:	2208      	movs	r2, #8
	buf->tail = 0;
   120e0:	e9c0 5500 	strd	r5, r5, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
   120e4:	4629      	mov	r1, r5
   120e6:	4410      	add	r0, r2
   120e8:	f00e fe62 	bl	20db0 <memset>
	ring_buf_reset(sh_uart->rx_ringbuf);
   120ec:	68f0      	ldr	r0, [r6, #12]
   120ee:	2208      	movs	r2, #8
	buf->tail = 0;
   120f0:	e9c0 5500 	strd	r5, r5, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
   120f4:	4629      	mov	r1, r5
   120f6:	4410      	add	r0, r2
   120f8:	f00e fe5a 	bl	20db0 <memset>
	sh_uart->ctrl_blk->tx_busy = 0;
   120fc:	6833      	ldr	r3, [r6, #0]
   120fe:	60dd      	str	r5, [r3, #12]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   12100:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   12102:	b12b      	cbz	r3, 12110 <init+0x44>
   12104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   12106:	b11b      	cbz	r3, 12110 <init+0x44>
		api->irq_callback_set(dev, cb, user_data);
   12108:	4905      	ldr	r1, [pc, #20]	; (12120 <init+0x54>)
   1210a:	4632      	mov	r2, r6
   1210c:	4620      	mov	r0, r4
   1210e:	4798      	blx	r3
	if (api->irq_rx_enable != NULL) {
   12110:	68a3      	ldr	r3, [r4, #8]
   12112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12114:	b10b      	cbz	r3, 1211a <init+0x4e>
		api->irq_rx_enable(dev);
   12116:	4620      	mov	r0, r4
   12118:	4798      	blx	r3
}
   1211a:	2000      	movs	r0, #0
   1211c:	bd70      	pop	{r4, r5, r6, pc}
   1211e:	bf00      	nop
   12120:	00011fb1 	.word	0x00011fb1

00012124 <shell_internal_help_print>:
	shell->ctx->cmd_buff_pos = 0;
	shell->ctx->cmd_buff_len = 0;
}

static void shell_internal_help_print(const struct shell *shell)
{
   12124:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP)) {
		return;
	}

	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
   12126:	6881      	ldr	r1, [r0, #8]
{
   12128:	4604      	mov	r4, r0
	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
   1212a:	3108      	adds	r1, #8
   1212c:	f001 f91a 	bl	13364 <z_shell_help_cmd_print>
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
   12130:	68a1      	ldr	r1, [r4, #8]
   12132:	4a03      	ldr	r2, [pc, #12]	; (12140 <shell_internal_help_print+0x1c>)
   12134:	4620      	mov	r0, r4
   12136:	3108      	adds	r1, #8
				  "Subcommands:\n");
}
   12138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
   1213c:	f001 b8b4 	b.w	132a8 <z_shell_help_subcmd_print>
   12140:	000250db 	.word	0x000250db

00012144 <history_handle>:

	z_shell_history_put(shell->history, line, length);
}

static void history_handle(const struct shell *shell, bool up)
{
   12144:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12146:	4604      	mov	r4, r0
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (z_flag_history_exit_get(shell)) {
   12148:	6880      	ldr	r0, [r0, #8]
	return ret;
}

static inline bool z_flag_history_exit_get(const struct shell *sh)
{
	return sh->ctx->ctx.flags.history_exit == 1;
   1214a:	f8d0 3264 	ldr.w	r3, [r0, #612]	; 0x264
   1214e:	075a      	lsls	r2, r3, #29
{
   12150:	460d      	mov	r5, r1
	if (z_flag_history_exit_get(shell)) {
   12152:	d505      	bpl.n	12160 <history_handle+0x1c>
		z_flag_history_exit_set(shell, false);
   12154:	2100      	movs	r1, #0
   12156:	f00d fb6d 	bl	1f834 <z_flag_history_exit_set.isra.0>
		z_shell_history_mode_exit(shell->history);
   1215a:	68e0      	ldr	r0, [r4, #12]
   1215c:	f00e f9b2 	bl	204c4 <z_shell_history_mode_exit>
	}

	/* Backup command if history is entered */
	if (!z_shell_history_active(shell->history)) {
   12160:	68e3      	ldr	r3, [r4, #12]
   12162:	68db      	ldr	r3, [r3, #12]
   12164:	b96b      	cbnz	r3, 12182 <history_handle+0x3e>
		if (up) {
   12166:	2d00      	cmp	r5, #0
   12168:	d037      	beq.n	121da <history_handle+0x96>
			uint16_t cmd_len = z_shell_strlen(shell->ctx->cmd_buff);
   1216a:	68a0      	ldr	r0, [r4, #8]
   1216c:	3042      	adds	r0, #66	; 0x42
   1216e:	f00d fb4e 	bl	1f80e <z_shell_strlen>

			if (cmd_len) {
   12172:	68a3      	ldr	r3, [r4, #8]
   12174:	b398      	cbz	r0, 121de <history_handle+0x9a>
				strcpy(shell->ctx->temp_buff,
   12176:	f103 0142 	add.w	r1, r3, #66	; 0x42
   1217a:	f503 70a1 	add.w	r0, r3, #322	; 0x142
   1217e:	f00e fd8f 	bl	20ca0 <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = z_shell_history_get(shell->history, up,
					   shell->ctx->cmd_buff, &len);
   12182:	68a2      	ldr	r2, [r4, #8]
	history_mode = z_shell_history_get(shell->history, up,
   12184:	68e0      	ldr	r0, [r4, #12]
   12186:	f10d 0306 	add.w	r3, sp, #6
   1218a:	3242      	adds	r2, #66	; 0x42
   1218c:	4629      	mov	r1, r5
   1218e:	f00e f99c 	bl	204ca <z_shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
   12192:	b958      	cbnz	r0, 121ac <history_handle+0x68>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
   12194:	68a0      	ldr	r0, [r4, #8]
   12196:	f500 71a1 	add.w	r1, r0, #322	; 0x142
   1219a:	3042      	adds	r0, #66	; 0x42
   1219c:	f00e fd80 	bl	20ca0 <strcpy>
		len = z_shell_strlen(shell->ctx->cmd_buff);
   121a0:	68a0      	ldr	r0, [r4, #8]
   121a2:	3042      	adds	r0, #66	; 0x42
   121a4:	f00d fb33 	bl	1f80e <z_shell_strlen>
   121a8:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	z_shell_op_cursor_home_move(shell);
   121ac:	4620      	mov	r0, r4
   121ae:	f00d fe7a 	bl	1fea6 <z_shell_op_cursor_home_move>
/* Function sends VT100 command to clear the screen from cursor position to
 * end of the screen.
 */
static inline void z_clear_eos(const struct shell *sh)
{
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
   121b2:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
   121b4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
   121b8:	069b      	lsls	r3, r3, #26
   121ba:	d503      	bpl.n	121c4 <history_handle+0x80>
   121bc:	4909      	ldr	r1, [pc, #36]	; (121e4 <history_handle+0xa0>)
   121be:	6960      	ldr	r0, [r4, #20]
   121c0:	f00d fb2b 	bl	1f81a <z_shell_raw_fprintf>
	z_clear_eos(shell);
	z_shell_print_cmd(shell);
   121c4:	4620      	mov	r0, r4
   121c6:	f000 fec3 	bl	12f50 <z_shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
   121ca:	68a3      	ldr	r3, [r4, #8]
   121cc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   121d0:	87da      	strh	r2, [r3, #62]	; 0x3e
	shell->ctx->cmd_buff_len = len;
   121d2:	879a      	strh	r2, [r3, #60]	; 0x3c
	z_shell_op_cond_next_line(shell);
   121d4:	4620      	mov	r0, r4
   121d6:	f000 fe7d 	bl	12ed4 <z_shell_op_cond_next_line>
}
   121da:	b003      	add	sp, #12
   121dc:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
   121de:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
   121e2:	e7ce      	b.n	12182 <history_handle+0x3e>
   121e4:	00023714 	.word	0x00023714

000121e8 <state_set.constprop.0>:
	shell->ctx->state = state;
   121e8:	6883      	ldr	r3, [r0, #8]
   121ea:	2202      	movs	r2, #2
static inline void state_set(const struct shell *shell, enum shell_state state)
   121ec:	b510      	push	{r4, lr}
	shell->ctx->state = state;
   121ee:	711a      	strb	r2, [r3, #4]
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
   121f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
static inline void state_set(const struct shell *shell, enum shell_state state)
   121f2:	4604      	mov	r4, r0
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
   121f4:	b9cb      	cbnz	r3, 1222a <state_set.constprop.0+0x42>
		cmd_buffer_clear(shell);
   121f6:	6882      	ldr	r2, [r0, #8]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   121f8:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
   121fc:	63d3      	str	r3, [r2, #60]	; 0x3c
		if (z_flag_print_noinit_get(shell)) {
   121fe:	6883      	ldr	r3, [r0, #8]
	return sh->ctx->ctx.flags.print_noinit == 1;
   12200:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
   12204:	04db      	lsls	r3, r3, #19
   12206:	d50b      	bpl.n	12220 <state_set.constprop.0+0x38>
			z_shell_fprintf(shell, SHELL_WARNING, "%s",
   12208:	2103      	movs	r1, #3
   1220a:	4b08      	ldr	r3, [pc, #32]	; (1222c <state_set.constprop.0+0x44>)
   1220c:	4a08      	ldr	r2, [pc, #32]	; (12230 <state_set.constprop.0+0x48>)
   1220e:	f00d fefa 	bl	20006 <z_shell_fprintf>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
   12212:	68a0      	ldr	r0, [r4, #8]
   12214:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   12218:	f500 7019 	add.w	r0, r0, #612	; 0x264
   1221c:	f00d faa8 	bl	1f770 <atomic_and>
		z_shell_print_prompt_and_cmd(shell);
   12220:	4620      	mov	r0, r4
}
   12222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_print_prompt_and_cmd(shell);
   12226:	f000 bfad 	b.w	13184 <z_shell_print_prompt_and_cmd>
}
   1222a:	bd10      	pop	{r4, pc}
   1222c:	000250e9 	.word	0x000250e9
   12230:	00024e7a 	.word	0x00024e7a

00012234 <execute>:
 * the command handler without any preprocessing.
 * Because of that feature, command buffer is processed argument by argument and
 * decision on further processing is based on currently processed command.
 */
static int execute(const struct shell *shell)
{
   12234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct shell_static_entry dloc; /* Memory for dynamic commands. */
	const char *argv[CONFIG_SHELL_ARGC_MAX + 1]; /* +1 reserved for NULL */
	const struct shell_static_entry *parent = selected_cmd_get(shell);
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry help_entry;
	size_t cmd_lvl = 0;
   12238:	2300      	movs	r3, #0
{
   1223a:	b09f      	sub	sp, #124	; 0x7c
	size_t cmd_with_handler_lvl = 0;
	bool wildcard_found = false;
	size_t argc = 0, args_left = SIZE_MAX;
   1223c:	e9cd 3305 	strd	r3, r3, [sp, #20]
	char quote;
	const char **argvp;
	char *cmd_buf = shell->ctx->cmd_buff;
   12240:	6883      	ldr	r3, [r0, #8]
{
   12242:	4604      	mov	r4, r0
	char *cmd_buf = shell->ctx->cmd_buff;
   12244:	3342      	adds	r3, #66	; 0x42
   12246:	9303      	str	r3, [sp, #12]
	bool has_last_handler = false;

	z_shell_op_cursor_end_move(shell);
   12248:	f00d fe33 	bl	1feb2 <z_shell_op_cursor_end_move>
	if (!z_shell_cursor_in_empty_line(shell)) {
   1224c:	4620      	mov	r0, r4
   1224e:	f00d fdb8 	bl	1fdc2 <z_shell_cursor_in_empty_line>
   12252:	b918      	cbnz	r0, 1225c <execute+0x28>
/* Function forcing new line - cannot be replaced with function
 * cursor_down_move.
 */
static inline void z_cursor_next_line_move(const struct shell *sh)
{
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
   12254:	499f      	ldr	r1, [pc, #636]	; (124d4 <execute+0x2a0>)
   12256:	6960      	ldr	r0, [r4, #20]
   12258:	f00d fadf 	bl	1f81a <z_shell_raw_fprintf>
		z_cursor_next_line_move(shell);
	}

	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));
   1225c:	68a0      	ldr	r0, [r4, #8]
   1225e:	2214      	movs	r2, #20
   12260:	2100      	movs	r1, #0
   12262:	3008      	adds	r0, #8
   12264:	f00e fda4 	bl	20db0 <memset>

	if (IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		z_shell_cmd_trim(shell);
   12268:	4620      	mov	r0, r4
   1226a:	f00d fd57 	bl	1fd1c <z_shell_cmd_trim>
		history_put(shell, shell->ctx->cmd_buff,
   1226e:	68a1      	ldr	r1, [r4, #8]
	z_shell_history_put(shell->history, line, length);
   12270:	68e0      	ldr	r0, [r4, #12]
   12272:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
   12274:	3142      	adds	r1, #66	; 0x42
		argvp = &argv[1];
		active_cmd_prepare(parent, &shell->ctx->active_cmd, &help_entry,
				   &cmd_lvl, &cmd_with_handler_lvl, &args_left);
		cmd_lvl++;
	} else {
		help_entry.help = NULL;
   12276:	2600      	movs	r6, #0
	z_shell_history_put(shell->history, line, length);
   12278:	f00e f95e 	bl	20538 <z_shell_history_put>
		z_shell_wildcard_prepare(shell);
   1227c:	4620      	mov	r0, r4
   1227e:	f00e f9e1 	bl	20644 <z_shell_wildcard_prepare>
	size_t argc = 0, args_left = SIZE_MAX;
   12282:	f04f 38ff 	mov.w	r8, #4294967295
	size_t cmd_with_handler_lvl = 0;
   12286:	46b1      	mov	r9, r6
		z_shell_wildcard_prepare(shell);
   12288:	46b2      	mov	sl, r6
   1228a:	af11      	add	r7, sp, #68	; 0x44
   1228c:	9602      	str	r6, [sp, #8]
   1228e:	4635      	mov	r5, r6
   12290:	46b3      	mov	fp, r6
		argvp = &argv[0];
	}

	/* Below loop is analyzing subcommands of found root command. */
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
   12292:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   12296:	2a01      	cmp	r2, #1
   12298:	f000 80d7 	beq.w	1244a <execute+0x216>
   1229c:	2b0b      	cmp	r3, #11
   1229e:	f240 80af 	bls.w	12400 <execute+0x1cc>
			cmd_lvl++;
		}

	}

	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
   122a2:	9b06      	ldr	r3, [sp, #24]
   122a4:	2b02      	cmp	r3, #2
   122a6:	f040 80af 	bne.w	12408 <execute+0x1d4>
		/* argc == 2 indicates that when command string was parsed
		 * there was more characters remaining. It means that number of
		 * arguments exceeds the limit.
		 */
		z_shell_fprintf(shell, SHELL_ERROR, "%s\n",
   122aa:	4b8b      	ldr	r3, [pc, #556]	; (124d8 <execute+0x2a4>)
   122ac:	4a8b      	ldr	r2, [pc, #556]	; (124dc <execute+0x2a8>)
   122ae:	2101      	movs	r1, #1
   122b0:	e014      	b.n	122dc <execute+0xa8>
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
   122b2:	9a03      	ldr	r2, [sp, #12]
   122b4:	2302      	movs	r3, #2
   122b6:	4639      	mov	r1, r7
   122b8:	a806      	add	r0, sp, #24
   122ba:	f00d fbc0 	bl	1fa3e <z_shell_make_argv>
		if (argc == 0) {
   122be:	9906      	ldr	r1, [sp, #24]
		cmd_buf = (char *)argvp[1];
   122c0:	687a      	ldr	r2, [r7, #4]
   122c2:	9203      	str	r2, [sp, #12]
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
   122c4:	4603      	mov	r3, r0
		if (argc == 0) {
   122c6:	b929      	cbnz	r1, 122d4 <execute+0xa0>
			return -ENOEXEC;
   122c8:	f06f 0507 	mvn.w	r5, #7
	/* terminate arguments with NULL */
	argv[cmd_lvl] = NULL;
	/* Executing the deepest found handler. */
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
			&argv[cmd_with_handler_lvl], &help_entry);
}
   122cc:	4628      	mov	r0, r5
   122ce:	b01f      	add	sp, #124	; 0x7c
   122d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ((argc == 1) && (quote != 0)) {
   122d4:	2901      	cmp	r1, #1
   122d6:	d105      	bne.n	122e4 <execute+0xb0>
   122d8:	b120      	cbz	r0, 122e4 <execute+0xb0>
			z_shell_fprintf(shell, SHELL_ERROR,
   122da:	4a81      	ldr	r2, [pc, #516]	; (124e0 <execute+0x2ac>)
   122dc:	4620      	mov	r0, r4
   122de:	f00d fe92 	bl	20006 <z_shell_fprintf>
   122e2:	e7f1      	b.n	122c8 <execute+0x94>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
   122e4:	9b05      	ldr	r3, [sp, #20]
   122e6:	b34b      	cbz	r3, 1233c <execute+0x108>
		    z_shell_help_request(argvp[0])) {
   122e8:	6838      	ldr	r0, [r7, #0]
   122ea:	f001 f85f 	bl	133ac <z_shell_help_request>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
   122ee:	b198      	cbz	r0, 12318 <execute+0xe4>
			if (help_entry.help) {
   122f0:	b166      	cbz	r6, 1230c <execute+0xd8>
				shell->ctx->active_cmd = help_entry;
   122f2:	68a5      	ldr	r5, [r4, #8]
   122f4:	960d      	str	r6, [sp, #52]	; 0x34
   122f6:	3508      	adds	r5, #8
				shell->ctx->active_cmd = *help_entry;
   122f8:	ae0c      	add	r6, sp, #48	; 0x30
   122fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   122fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   122fe:	6833      	ldr	r3, [r6, #0]
   12300:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
   12302:	4620      	mov	r0, r4
   12304:	f7ff ff0e 	bl	12124 <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
   12308:	2501      	movs	r5, #1
   1230a:	e7df      	b.n	122cc <execute+0x98>
			z_shell_fprintf(shell, SHELL_ERROR,
   1230c:	4a75      	ldr	r2, [pc, #468]	; (124e4 <execute+0x2b0>)
		z_shell_fprintf(shell, SHELL_ERROR,
   1230e:	2101      	movs	r1, #1
   12310:	4620      	mov	r0, r4
   12312:	f00d fe78 	bl	20006 <z_shell_fprintf>
		return false;
   12316:	e7d7      	b.n	122c8 <execute+0x94>
		if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && (cmd_lvl > 0)) {
   12318:	9b05      	ldr	r3, [sp, #20]
   1231a:	b17b      	cbz	r3, 1233c <execute+0x108>
			status = z_shell_wildcard_process(shell, entry,
   1231c:	683a      	ldr	r2, [r7, #0]
   1231e:	4629      	mov	r1, r5
   12320:	4620      	mov	r0, r4
   12322:	f001 f9a3 	bl	1366c <z_shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
   12326:	2802      	cmp	r0, #2
   12328:	f000 808f 	beq.w	1244a <execute+0x216>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
   1232c:	2803      	cmp	r0, #3
   1232e:	d005      	beq.n	1233c <execute+0x108>
				++cmd_lvl;
   12330:	9b05      	ldr	r3, [sp, #20]
   12332:	3301      	adds	r3, #1
   12334:	9305      	str	r3, [sp, #20]
				wildcard_found = true;
   12336:	2301      	movs	r3, #1
   12338:	9302      	str	r3, [sp, #8]
				continue;
   1233a:	e7aa      	b.n	12292 <execute+0x5e>
		if (has_last_handler == false) {
   1233c:	f1ba 0f00 	cmp.w	sl, #0
   12340:	d105      	bne.n	1234e <execute+0x11a>
			entry = z_shell_find_cmd(parent, argvp[0], &dloc);
   12342:	6839      	ldr	r1, [r7, #0]
   12344:	aa07      	add	r2, sp, #28
   12346:	4658      	mov	r0, fp
   12348:	f00d fc64 	bl	1fc14 <z_shell_find_cmd>
   1234c:	4605      	mov	r5, r0
		argvp++;
   1234e:	3704      	adds	r7, #4
		args_left--;
   12350:	f108 38ff 	add.w	r8, r8, #4294967295
		if (entry) {
   12354:	2d00      	cmp	r5, #0
   12356:	d041      	beq.n	123dc <execute+0x1a8>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && found && entry->handler) {
   12358:	9b02      	ldr	r3, [sp, #8]
   1235a:	b14b      	cbz	r3, 12370 <execute+0x13c>
   1235c:	68eb      	ldr	r3, [r5, #12]
   1235e:	b13b      	cbz	r3, 12370 <execute+0x13c>
		z_shell_op_cursor_end_move(shell);
   12360:	4620      	mov	r0, r4
   12362:	f00d fda6 	bl	1feb2 <z_shell_op_cursor_end_move>
		z_shell_op_cond_next_line(shell);
   12366:	4620      	mov	r0, r4
   12368:	f000 fdb4 	bl	12ed4 <z_shell_op_cond_next_line>
		z_shell_fprintf(shell, SHELL_ERROR,
   1236c:	4a5e      	ldr	r2, [pc, #376]	; (124e8 <execute+0x2b4>)
   1236e:	e7ce      	b.n	1230e <execute+0xda>
	if (entry->handler) {
   12370:	68eb      	ldr	r3, [r5, #12]
   12372:	b1cb      	cbz	r3, 123a8 <execute+0x174>
		*active_cmd = *entry;
   12374:	68a3      	ldr	r3, [r4, #8]
   12376:	f8dd 9014 	ldr.w	r9, [sp, #20]
   1237a:	46ae      	mov	lr, r5
   1237c:	f103 0c08 	add.w	ip, r3, #8
   12380:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   12384:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   12388:	f8de 3000 	ldr.w	r3, [lr]
   1238c:	f8cc 3000 	str.w	r3, [ip]
		if ((entry->subcmd == NULL)
   12390:	68ab      	ldr	r3, [r5, #8]
   12392:	b94b      	cbnz	r3, 123a8 <execute+0x174>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
   12394:	7c6b      	ldrb	r3, [r5, #17]
   12396:	2bfe      	cmp	r3, #254	; 0xfe
			*args_left = entry->args.mandatory - 1;
   12398:	bf01      	itttt	eq
   1239a:	f895 8010 	ldrbeq.w	r8, [r5, #16]
			*lvl = *lvl + 1;
   1239e:	f109 0301 	addeq.w	r3, r9, #1
			*args_left = entry->args.mandatory - 1;
   123a2:	f108 38ff 	addeq.w	r8, r8, #4294967295
			*lvl = *lvl + 1;
   123a6:	9305      	streq	r3, [sp, #20]
	if (entry->help) {
   123a8:	f8d5 c004 	ldr.w	ip, [r5, #4]
   123ac:	f1bc 0f00 	cmp.w	ip, #0
   123b0:	d008      	beq.n	123c4 <execute+0x190>
		*help_entry = *entry;
   123b2:	46ae      	mov	lr, r5
   123b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   123b8:	ae0c      	add	r6, sp, #48	; 0x30
   123ba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   123bc:	f8de 3000 	ldr.w	r3, [lr]
   123c0:	6033      	str	r3, [r6, #0]
   123c2:	4666      	mov	r6, ip
   123c4:	46ab      	mov	fp, r5
		if (args_left || (argc == 2)) {
   123c6:	f1b8 0f00 	cmp.w	r8, #0
   123ca:	d103      	bne.n	123d4 <execute+0x1a0>
   123cc:	9b06      	ldr	r3, [sp, #24]
   123ce:	2b02      	cmp	r3, #2
   123d0:	f47f af5f 	bne.w	12292 <execute+0x5e>
			cmd_lvl++;
   123d4:	9b05      	ldr	r3, [sp, #20]
   123d6:	3301      	adds	r3, #1
   123d8:	9305      	str	r3, [sp, #20]
   123da:	e75a      	b.n	12292 <execute+0x5e>
			if (cmd_lvl == 0 &&
   123dc:	9b05      	ldr	r3, [sp, #20]
   123de:	b963      	cbnz	r3, 123fa <execute+0x1c6>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
}

static inline bool z_shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
   123e0:	68a3      	ldr	r3, [r4, #8]
   123e2:	69db      	ldr	r3, [r3, #28]
   123e4:	b10b      	cbz	r3, 123ea <execute+0x1b6>
				(!z_shell_in_select_mode(shell) ||
   123e6:	68db      	ldr	r3, [r3, #12]
   123e8:	b93b      	cbnz	r3, 123fa <execute+0x1c6>
				z_shell_fprintf(shell, SHELL_ERROR,
   123ea:	4b40      	ldr	r3, [pc, #256]	; (124ec <execute+0x2b8>)
   123ec:	9300      	str	r3, [sp, #0]
   123ee:	4a40      	ldr	r2, [pc, #256]	; (124f0 <execute+0x2bc>)
   123f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   123f2:	2101      	movs	r1, #1
   123f4:	4620      	mov	r0, r4
   123f6:	f00d fe06 	bl	20006 <z_shell_fprintf>
			has_last_handler = true;
   123fa:	f04f 0a01 	mov.w	sl, #1
   123fe:	e7e2      	b.n	123c6 <execute+0x192>
		&& args_left > 0) {
   12400:	f1b8 0f00 	cmp.w	r8, #0
   12404:	f47f af55 	bne.w	122b2 <execute+0x7e>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
   12408:	9b02      	ldr	r3, [sp, #8]
   1240a:	b14b      	cbz	r3, 12420 <execute+0x1ec>
		z_shell_wildcard_finalize(shell);
   1240c:	4620      	mov	r0, r4
   1240e:	f00e f93e 	bl	2068e <z_shell_wildcard_finalize>
					shell->ctx->cmd_buff,
   12412:	68a2      	ldr	r2, [r4, #8]
		(void)z_shell_make_argv(&cmd_lvl,
   12414:	230c      	movs	r3, #12
   12416:	3242      	adds	r2, #66	; 0x42
   12418:	a911      	add	r1, sp, #68	; 0x44
   1241a:	a805      	add	r0, sp, #20
   1241c:	f00d fb0f 	bl	1fa3e <z_shell_make_argv>
	argv[cmd_lvl] = NULL;
   12420:	9d05      	ldr	r5, [sp, #20]
	if (shell->ctx->active_cmd.handler == NULL) {
   12422:	68a0      	ldr	r0, [r4, #8]
	argv[cmd_lvl] = NULL;
   12424:	ab1e      	add	r3, sp, #120	; 0x78
   12426:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   1242a:	2200      	movs	r2, #0
   1242c:	f843 2c34 	str.w	r2, [r3, #-52]
	if (shell->ctx->active_cmd.handler == NULL) {
   12430:	6943      	ldr	r3, [r0, #20]
   12432:	b973      	cbnz	r3, 12452 <execute+0x21e>
			if (help_entry->help == NULL) {
   12434:	2e00      	cmp	r6, #0
   12436:	f43f af47 	beq.w	122c8 <execute+0x94>
			if (help_entry->help != shell->ctx->active_cmd.help) {
   1243a:	68c3      	ldr	r3, [r0, #12]
   1243c:	42b3      	cmp	r3, r6
   1243e:	f43f af60 	beq.w	12302 <execute+0xce>
				shell->ctx->active_cmd = *help_entry;
   12442:	960d      	str	r6, [sp, #52]	; 0x34
   12444:	f100 0508 	add.w	r5, r0, #8
   12448:	e756      	b.n	122f8 <execute+0xc4>
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
   1244a:	9b05      	ldr	r3, [sp, #20]
   1244c:	2b0b      	cmp	r3, #11
   1244e:	d9db      	bls.n	12408 <execute+0x1d4>
   12450:	e727      	b.n	122a2 <execute+0x6e>
	if (shell->ctx->active_cmd.args.mandatory) {
   12452:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
   12454:	eba5 0509 	sub.w	r5, r5, r9
	if (shell->ctx->active_cmd.args.mandatory) {
   12458:	b1b3      	cbz	r3, 12488 <execute+0x254>
		uint8_t opt8 = shell->ctx->active_cmd.args.optional;
   1245a:	7e42      	ldrb	r2, [r0, #25]
				UINT16_MAX : opt8;
   1245c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12460:	2aff      	cmp	r2, #255	; 0xff
   12462:	bf08      	it	eq
   12464:	460a      	moveq	r2, r1
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
   12466:	429d      	cmp	r5, r3
   12468:	d302      	bcc.n	12470 <execute+0x23c>
   1246a:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
   1246c:	429d      	cmp	r5, r3
   1246e:	d90b      	bls.n	12488 <execute+0x254>
		z_shell_fprintf(shell, SHELL_ERROR,
   12470:	6883      	ldr	r3, [r0, #8]
   12472:	4a20      	ldr	r2, [pc, #128]	; (124f4 <execute+0x2c0>)
   12474:	2101      	movs	r1, #1
   12476:	4620      	mov	r0, r4
   12478:	f00d fdc5 	bl	20006 <z_shell_fprintf>
			shell_internal_help_print(shell);
   1247c:	4620      	mov	r0, r4
   1247e:	f7ff fe51 	bl	12124 <shell_internal_help_print>
		return -EINVAL;
   12482:	f06f 0515 	mvn.w	r5, #21
   12486:	e721      	b.n	122cc <execute+0x98>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, cmd_ctx, val, ret);
   12488:	f44f 6100 	mov.w	r1, #2048	; 0x800
   1248c:	f500 7019 	add.w	r0, r0, #612	; 0x264
   12490:	f00d f95f 	bl	1f752 <atomic_or>
		k_mutex_unlock(&shell->ctx->wr_mtx);
   12494:	68a0      	ldr	r0, [r4, #8]
   12496:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   1249a:	f00d f9b6 	bl	1f80a <k_mutex_unlock>
		ret_val = shell->ctx->active_cmd.handler(shell, argc,
   1249e:	68a3      	ldr	r3, [r4, #8]
   124a0:	aa11      	add	r2, sp, #68	; 0x44
   124a2:	4629      	mov	r1, r5
   124a4:	eb02 0289 	add.w	r2, r2, r9, lsl #2
   124a8:	695b      	ldr	r3, [r3, #20]
   124aa:	4620      	mov	r0, r4
   124ac:	4798      	blx	r3
   124ae:	4605      	mov	r5, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   124b0:	68a0      	ldr	r0, [r4, #8]
   124b2:	f04f 32ff 	mov.w	r2, #4294967295
   124b6:	f04f 33ff 	mov.w	r3, #4294967295
   124ba:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   124be:	f00d f9e3 	bl	1f888 <k_mutex_lock.constprop.0>
   124c2:	68a0      	ldr	r0, [r4, #8]
   124c4:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   124c8:	f500 7019 	add.w	r0, r0, #612	; 0x264
   124cc:	f00d f950 	bl	1f770 <atomic_and>
	return ret;
   124d0:	e6fc      	b.n	122cc <execute+0x98>
   124d2:	bf00      	nop
   124d4:	00024484 	.word	0x00024484
   124d8:	000251a2 	.word	0x000251a2
   124dc:	00024e86 	.word	0x00024e86
   124e0:	0002512d 	.word	0x0002512d
   124e4:	00025141 	.word	0x00025141
   124e8:	0002515f 	.word	0x0002515f
   124ec:	0002518e 	.word	0x0002518e
   124f0:	0002540d 	.word	0x0002540d
   124f4:	000251c6 	.word	0x000251c6

000124f8 <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
   124f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124fc:	4604      	mov	r4, r0
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, processing, val, ret);
   124fe:	6880      	ldr	r0, [r0, #8]
   12500:	b0ab      	sub	sp, #172	; 0xac
   12502:	2101      	movs	r1, #1
   12504:	f500 7019 	add.w	r0, r0, #612	; 0x264
   12508:	f00d f923 	bl	1f752 <atomic_or>
	__ASSERT_NO_MSG(shell->ctx);

	/* atomically set the processing flag */
	z_flag_processing_set(shell, true);

	switch (shell->ctx->state) {
   1250c:	68a3      	ldr	r3, [r4, #8]
   1250e:	791b      	ldrb	r3, [r3, #4]
   12510:	2b02      	cmp	r3, #2
   12512:	d117      	bne.n	12544 <shell_process+0x4c>
	size_t count = 0;
   12514:	2300      	movs	r3, #0
   12516:	930b      	str	r3, [sp, #44]	; 0x2c
		shell_bypass_cb_t bypass = shell->ctx->bypass;
   12518:	68a3      	ldr	r3, [r4, #8]
   1251a:	6860      	ldr	r0, [r4, #4]
   1251c:	6b9e      	ldr	r6, [r3, #56]	; 0x38
		if (bypass) {
   1251e:	6803      	ldr	r3, [r0, #0]
   12520:	691d      	ldr	r5, [r3, #16]
			(void)shell->iface->api->read(shell->iface, buf,
   12522:	ab0b      	add	r3, sp, #44	; 0x2c
		if (bypass) {
   12524:	b1c6      	cbz	r6, 12558 <shell_process+0x60>
			(void)shell->iface->api->read(shell->iface, buf,
   12526:	2210      	movs	r2, #16
   12528:	a91d      	add	r1, sp, #116	; 0x74
   1252a:	47a8      	blx	r5
			if (count) {
   1252c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1252e:	b14a      	cbz	r2, 12544 <shell_process+0x4c>
				bypass(shell, buf, count);
   12530:	a91d      	add	r1, sp, #116	; 0x74
   12532:	4620      	mov	r0, r4
   12534:	47b0      	blx	r6
				if (!(volatile shell_bypass_cb_t *)shell->ctx->bypass) {
   12536:	68a3      	ldr	r3, [r4, #8]
   12538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1253a:	2b00      	cmp	r3, #0
   1253c:	d1ec      	bne.n	12518 <shell_process+0x20>
					state_set(shell, SHELL_STATE_ACTIVE);
   1253e:	4620      	mov	r0, r4
   12540:	f7ff fe52 	bl	121e8 <state_set.constprop.0>
   12544:	68a0      	ldr	r0, [r4, #8]
   12546:	f06f 0101 	mvn.w	r1, #1
   1254a:	f500 7019 	add.w	r0, r0, #612	; 0x264
   1254e:	f00d f90f 	bl	1f770 <atomic_and>
		break;
	}

	/* atomically clear the processing flag */
	z_flag_processing_set(shell, false);
}
   12552:	b02b      	add	sp, #172	; 0xac
   12554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(void)shell->iface->api->read(shell->iface, &data,
   12558:	2201      	movs	r2, #1
   1255a:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
   1255e:	47a8      	blx	r5
		if (count == 0) {
   12560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12562:	2b00      	cmp	r3, #0
   12564:	d0ee      	beq.n	12544 <shell_process+0x4c>
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
   12566:	f99d 202b 	ldrsb.w	r2, [sp, #43]	; 0x2b
		if (ascii_filter(data) != 0) {
   1256a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
   1256e:	68a0      	ldr	r0, [r4, #8]
   12570:	2a00      	cmp	r2, #0
   12572:	dbd1      	blt.n	12518 <shell_process+0x20>
		switch (shell->ctx->receive_state) {
   12574:	7942      	ldrb	r2, [r0, #5]
   12576:	2a03      	cmp	r2, #3
   12578:	f200 82ff 	bhi.w	12b7a <shell_process+0x682>
   1257c:	e8df f012 	tbh	[pc, r2, lsl #1]
   12580:	027f0004 	.word	0x027f0004
   12584:	02fd0296 	.word	0x02fd0296
	if ((data != '\r') && (data != '\n')) {
   12588:	2b0d      	cmp	r3, #13
   1258a:	d01a      	beq.n	125c2 <shell_process+0xca>
   1258c:	2b0a      	cmp	r3, #10
   1258e:	d018      	beq.n	125c2 <shell_process+0xca>
	sh->ctx->ctx.flags.last_nl = val;
   12590:	f8b0 2264 	ldrh.w	r2, [r0, #612]	; 0x264
   12594:	f36f 02ca 	bfc	r2, #3, #8
   12598:	f8a0 2264 	strh.w	r2, [r0, #612]	; 0x264
			switch (data) {
   1259c:	2b09      	cmp	r3, #9
   1259e:	d04d      	beq.n	1263c <shell_process+0x144>
   125a0:	d833      	bhi.n	1260a <shell_process+0x112>
   125a2:	2b00      	cmp	r3, #0
   125a4:	d0b8      	beq.n	12518 <shell_process+0x20>
   125a6:	2b08      	cmp	r3, #8
   125a8:	f000 81cb 	beq.w	12942 <shell_process+0x44a>
   125ac:	f1a3 0220 	sub.w	r2, r3, #32
				if (isprint((int) data)) {
   125b0:	2a5e      	cmp	r2, #94	; 0x5e
   125b2:	f200 81d2 	bhi.w	1295a <shell_process+0x462>
					z_flag_history_exit_set(shell, true);
   125b6:	2101      	movs	r1, #1
   125b8:	f00d f93c 	bl	1f834 <z_flag_history_exit_set.isra.0>
					z_shell_op_char_insert(shell, data);
   125bc:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
   125c0:	e0e9      	b.n	12796 <shell_process+0x29e>
	return sh->ctx->ctx.flags.last_nl;
   125c2:	f8d0 2264 	ldr.w	r2, [r0, #612]	; 0x264
   125c6:	f3c2 02c7 	ubfx	r2, r2, #3, #8
	if ((z_flag_last_nl_get(shell) == 0U) ||
   125ca:	b12a      	cbz	r2, 125d8 <shell_process+0xe0>
   125cc:	f8d0 2264 	ldr.w	r2, [r0, #612]	; 0x264
   125d0:	f3c2 02c7 	ubfx	r2, r2, #3, #8
   125d4:	4293      	cmp	r3, r2
   125d6:	d1e1      	bne.n	1259c <shell_process+0xa4>
	sh->ctx->ctx.flags.last_nl = val;
   125d8:	f8b0 2264 	ldrh.w	r2, [r0, #612]	; 0x264
				if (!shell->ctx->cmd_buff_len) {
   125dc:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
   125de:	f363 02ca 	bfi	r2, r3, #3, #8
   125e2:	f8a0 2264 	strh.w	r2, [r0, #612]	; 0x264
   125e6:	b961      	cbnz	r1, 12602 <shell_process+0x10a>
	z_flag_history_exit_set(shell, false);
   125e8:	f00d f924 	bl	1f834 <z_flag_history_exit_set.isra.0>
	z_shell_history_mode_exit(shell->history);
   125ec:	68e0      	ldr	r0, [r4, #12]
   125ee:	f00d ff69 	bl	204c4 <z_shell_history_mode_exit>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
   125f2:	49ad      	ldr	r1, [pc, #692]	; (128a8 <shell_process+0x3b0>)
   125f4:	6960      	ldr	r0, [r4, #20]
   125f6:	f00d f910 	bl	1f81a <z_shell_raw_fprintf>
		state_set(shell, SHELL_STATE_ACTIVE);
   125fa:	4620      	mov	r0, r4
   125fc:	f7ff fdf4 	bl	121e8 <state_set.constprop.0>
		break;
   12600:	e78a      	b.n	12518 <shell_process+0x20>
					(void)execute(shell);
   12602:	4620      	mov	r0, r4
   12604:	f7ff fe16 	bl	12234 <execute>
				state_set(shell, SHELL_STATE_ACTIVE);
   12608:	e7f7      	b.n	125fa <shell_process+0x102>
   1260a:	2b1b      	cmp	r3, #27
   1260c:	d013      	beq.n	12636 <shell_process+0x13e>
   1260e:	2b7f      	cmp	r3, #127	; 0x7f
   12610:	d1cc      	bne.n	125ac <shell_process+0xb4>
	return sh->ctx->cfg.flags.echo == 1;
   12612:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
   12616:	079d      	lsls	r5, r3, #30
   12618:	f57f af7e 	bpl.w	12518 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
   1261c:	2101      	movs	r1, #1
   1261e:	f00d f909 	bl	1f834 <z_flag_history_exit_set.isra.0>
					if (z_flag_mode_delete_get(shell)) {
   12622:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.mode_delete == 1;
   12624:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   12628:	0719      	lsls	r1, r3, #28
   1262a:	f100 8192 	bmi.w	12952 <shell_process+0x45a>
		z_shell_op_char_delete(shell);
   1262e:	4620      	mov	r0, r4
   12630:	f00d fd2a 	bl	20088 <z_shell_op_char_delete>
		break;
   12634:	e770      	b.n	12518 <shell_process+0x20>
	shell->ctx->receive_state = state;
   12636:	2301      	movs	r3, #1
   12638:	7143      	strb	r3, [r0, #5]
}
   1263a:	e76d      	b.n	12518 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
   1263c:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell) &&
   12640:	079b      	lsls	r3, r3, #30
   12642:	f57f af69 	bpl.w	12518 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
   12646:	2101      	movs	r1, #1
   12648:	f00d f8f4 	bl	1f834 <z_flag_history_exit_set.isra.0>
	uint16_t compl_space = completion_space_get(shell);
   1264c:	68a0      	ldr	r0, [r4, #8]
	if (compl_space == 0U) {
   1264e:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
   12650:	2bff      	cmp	r3, #255	; 0xff
   12652:	f43f af61 	beq.w	12518 <shell_process+0x20>
	memcpy(shell->ctx->temp_buff, shell->ctx->cmd_buff,
   12656:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
   12658:	f100 0142 	add.w	r1, r0, #66	; 0x42
   1265c:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   12660:	f00e fb9b 	bl	20d9a <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
   12664:	68a2      	ldr	r2, [r4, #8]
   12666:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
   12668:	4413      	add	r3, r2
   1266a:	2500      	movs	r5, #0
   1266c:	f883 5142 	strb.w	r5, [r3, #322]	; 0x142
	(void)z_shell_make_argv(argc, *argv, shell->ctx->temp_buff,
   12670:	a91d      	add	r1, sp, #116	; 0x74
   12672:	230c      	movs	r3, #12
   12674:	f502 72a1 	add.w	r2, r2, #322	; 0x142
   12678:	a80d      	add	r0, sp, #52	; 0x34
   1267a:	f00d f9e0 	bl	1fa3e <z_shell_make_argv>
	if (*argc > CONFIG_SHELL_ARGC_MAX) {
   1267e:	990d      	ldr	r1, [sp, #52]	; 0x34
   12680:	290c      	cmp	r1, #12
   12682:	f63f af49 	bhi.w	12518 <shell_process+0x20>
	(*argv)[*argc] = NULL;
   12686:	ab2a      	add	r3, sp, #168	; 0xa8
   12688:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1268c:	f843 5c34 	str.w	r5, [r3, #-52]
	int space = isspace((int)shell->ctx->cmd_buff[
   12690:	68a3      	ldr	r3, [r4, #8]
						shell->ctx->cmd_buff_pos - 1]);
   12692:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
	int space = isspace((int)shell->ctx->cmd_buff[
   12694:	4413      	add	r3, r2
   12696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1269a:	2b20      	cmp	r3, #32
   1269c:	f000 826f 	beq.w	12b7e <shell_process+0x686>
   126a0:	3b09      	subs	r3, #9
   126a2:	2b04      	cmp	r3, #4
   126a4:	f240 826b 	bls.w	12b7e <shell_process+0x686>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
   126a8:	2901      	cmp	r1, #1
   126aa:	d84f      	bhi.n	1274c <shell_process+0x254>
		*complete_arg_idx = Z_SHELL_CMD_ROOT_LVL;
   126ac:	2500      	movs	r5, #0
   126ae:	950c      	str	r5, [sp, #48]	; 0x30
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
   126b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   126b2:	aa2a      	add	r2, sp, #168	; 0xa8
   126b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	*cnt = 0;
   126b8:	2600      	movs	r6, #0
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
   126ba:	f853 ac34 	ldr.w	sl, [r3, #-52]
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
   126be:	4650      	mov	r0, sl
   126c0:	f00d f8a5 	bl	1f80e <z_shell_strlen>
	size_t first = 0;
   126c4:	46b0      	mov	r8, r6
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
   126c6:	4681      	mov	r9, r0
	*longest = 0U;
   126c8:	9604      	str	r6, [sp, #16]
	size_t idx = 0;
   126ca:	4637      	mov	r7, r6
	while ((candidate = z_shell_cmd_get(cmd, idx, &dloc)) != NULL) {
   126cc:	aa18      	add	r2, sp, #96	; 0x60
   126ce:	4639      	mov	r1, r7
   126d0:	4628      	mov	r0, r5
   126d2:	f000 fba1 	bl	12e18 <z_shell_cmd_get>
   126d6:	4683      	mov	fp, r0
   126d8:	2800      	cmp	r0, #0
   126da:	d144      	bne.n	12766 <shell_process+0x26e>
	if (cnt == 1) {
   126dc:	2e01      	cmp	r6, #1
   126de:	d163      	bne.n	127a8 <shell_process+0x2b0>
		autocomplete(shell, cmd, argv[arg_idx], first);
   126e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   126e2:	aa2a      	add	r2, sp, #168	; 0xa8
   126e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = z_shell_strlen(arg);
   126e8:	f853 0c34 	ldr.w	r0, [r3, #-52]
   126ec:	f00d f88f 	bl	1f80e <z_shell_strlen>
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
   126f0:	68a2      	ldr	r2, [r4, #8]
	uint16_t arg_len = z_shell_strlen(arg);
   126f2:	4606      	mov	r6, r0
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
   126f4:	3208      	adds	r2, #8
   126f6:	4641      	mov	r1, r8
   126f8:	4628      	mov	r0, r5
   126fa:	f000 fb8d 	bl	12e18 <z_shell_cmd_get>
   126fe:	4605      	mov	r5, r0
	cmd_len = z_shell_strlen(match->syntax);
   12700:	6800      	ldr	r0, [r0, #0]
   12702:	f00d f884 	bl	1f80e <z_shell_strlen>
	if (cmd_len != arg_len) {
   12706:	4286      	cmp	r6, r0
   12708:	d006      	beq.n	12718 <shell_process+0x220>
		z_shell_op_completion_insert(shell,
   1270a:	6829      	ldr	r1, [r5, #0]
   1270c:	1b82      	subs	r2, r0, r6
   1270e:	b292      	uxth	r2, r2
   12710:	4431      	add	r1, r6
   12712:	4620      	mov	r0, r4
   12714:	f00d fcb6 	bl	20084 <z_shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
   12718:	68a0      	ldr	r0, [r4, #8]
					shell->ctx->cmd_buff_pos])) {
   1271a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
	if (!isspace((int) shell->ctx->cmd_buff[
   1271c:	4403      	add	r3, r0
   1271e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   12722:	2b20      	cmp	r3, #32
   12724:	d03b      	beq.n	1279e <shell_process+0x2a6>
   12726:	3b09      	subs	r3, #9
   12728:	2b04      	cmp	r3, #4
   1272a:	d938      	bls.n	1279e <shell_process+0x2a6>
	return sh->ctx->cfg.flags.insert_mode == 1;
   1272c:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		if (z_flag_insert_mode_get(shell)) {
   12730:	07df      	lsls	r7, r3, #31
   12732:	d52f      	bpl.n	12794 <shell_process+0x29c>
			z_flag_insert_mode_set(shell, false);
   12734:	2100      	movs	r1, #0
   12736:	f00d f88d 	bl	1f854 <z_flag_insert_mode_set.isra.0>
			z_shell_op_char_insert(shell, ' ');
   1273a:	2120      	movs	r1, #32
   1273c:	4620      	mov	r0, r4
   1273e:	f000 fce9 	bl	13114 <z_shell_op_char_insert>
			z_flag_insert_mode_set(shell, true);
   12742:	68a0      	ldr	r0, [r4, #8]
   12744:	2101      	movs	r1, #1
				z_flag_insert_mode_set(shell, !status);
   12746:	f00d f885 	bl	1f854 <z_flag_insert_mode_set.isra.0>
				break;
   1274a:	e6e5      	b.n	12518 <shell_process+0x20>
	search_argc = space ? *argc : *argc - 1;
   1274c:	3901      	subs	r1, #1
	*cmd = z_shell_get_last_command(selected_cmd_get(shell), search_argc,
   1274e:	2000      	movs	r0, #0
   12750:	ab0e      	add	r3, sp, #56	; 0x38
   12752:	9300      	str	r3, [sp, #0]
   12754:	9001      	str	r0, [sp, #4]
   12756:	ab0c      	add	r3, sp, #48	; 0x30
   12758:	aa1d      	add	r2, sp, #116	; 0x74
   1275a:	f00d fa7b 	bl	1fc54 <z_shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
   1275e:	4605      	mov	r5, r0
   12760:	2800      	cmp	r0, #0
   12762:	d1a5      	bne.n	126b0 <shell_process+0x1b8>
   12764:	e6d8      	b.n	12518 <shell_process+0x20>
	return (strncmp(candidate, str, len) == 0) ? true : false;
   12766:	f8db 0000 	ldr.w	r0, [fp]
   1276a:	464a      	mov	r2, r9
   1276c:	4651      	mov	r1, sl
   1276e:	f00e fade 	bl	20d2e <strncmp>
		if (is_candidate) {
   12772:	b968      	cbnz	r0, 12790 <shell_process+0x298>
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
   12774:	f8db 0000 	ldr.w	r0, [fp]
   12778:	f00e fabd 	bl	20cf6 <strlen>
   1277c:	9b04      	ldr	r3, [sp, #16]
   1277e:	4283      	cmp	r3, r0
   12780:	bf38      	it	cc
   12782:	4603      	movcc	r3, r0
   12784:	b29b      	uxth	r3, r3
				*first_idx = idx;
   12786:	2e00      	cmp	r6, #0
   12788:	bf08      	it	eq
   1278a:	46b8      	moveq	r8, r7
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
   1278c:	9304      	str	r3, [sp, #16]
			(*cnt)++;
   1278e:	3601      	adds	r6, #1
		idx++;
   12790:	3701      	adds	r7, #1
   12792:	e79b      	b.n	126cc <shell_process+0x1d4>
			z_shell_op_char_insert(shell, ' ');
   12794:	2120      	movs	r1, #32
					z_shell_op_char_insert(shell, data);
   12796:	4620      	mov	r0, r4
   12798:	f000 fcbc 	bl	13114 <z_shell_op_char_insert>
   1279c:	e6bc      	b.n	12518 <shell_process+0x20>
		z_shell_op_cursor_move(shell, 1);
   1279e:	2101      	movs	r1, #1
   127a0:	4620      	mov	r0, r4
   127a2:	f00d fb22 	bl	1fdea <z_shell_op_cursor_move>
   127a6:	e6b7      	b.n	12518 <shell_process+0x20>
	} else if (cnt > 1) {
   127a8:	f67f aeb6 	bls.w	12518 <shell_process+0x20>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
   127ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   127ae:	aa2a      	add	r2, sp, #168	; 0xa8
   127b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   127b4:	f853 ac34 	ldr.w	sl, [r3, #-52]
	size_t str_len = z_shell_strlen(str);
   127b8:	4650      	mov	r0, sl
   127ba:	f00d f828 	bl	1f80e <z_shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
   127be:	68a3      	ldr	r3, [r4, #8]
	size_t str_len = z_shell_strlen(str);
   127c0:	9006      	str	r0, [sp, #24]
		shell->ctx->vt100_ctx.printed_cmd = 0;
   127c2:	f8a3 b030 	strh.w	fp, [r3, #48]	; 0x30
	longest_option += z_shell_strlen(tab);
   127c6:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 128ac <shell_process+0x3b4>
		shell->ctx->vt100_ctx.printed_cmd = 0;
   127ca:	9605      	str	r6, [sp, #20]
   127cc:	f8cd 800c 	str.w	r8, [sp, #12]
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
   127d0:	68a2      	ldr	r2, [r4, #8]
   127d2:	9903      	ldr	r1, [sp, #12]
   127d4:	3208      	adds	r2, #8
   127d6:	4628      	mov	r0, r5
   127d8:	f000 fb1e 	bl	12e18 <z_shell_cmd_get>
		idx++;
   127dc:	9b03      	ldr	r3, [sp, #12]
   127de:	3301      	adds	r3, #1
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
   127e0:	4607      	mov	r7, r0
		idx++;
   127e2:	9303      	str	r3, [sp, #12]
		if (str && match->syntax &&
   127e4:	f1ba 0f00 	cmp.w	sl, #0
   127e8:	d153      	bne.n	12892 <shell_process+0x39a>
		tab_item_print(shell, match->syntax, longest);
   127ea:	683b      	ldr	r3, [r7, #0]
	if (option == NULL) {
   127ec:	2b00      	cmp	r3, #0
   127ee:	d15f      	bne.n	128b0 <shell_process+0x3b8>
		shell->ctx->vt100_ctx.printed_cmd = 0;
   127f0:	68a2      	ldr	r2, [r4, #8]
   127f2:	8613      	strh	r3, [r2, #48]	; 0x30
	while (cnt) {
   127f4:	9b05      	ldr	r3, [sp, #20]
   127f6:	3b01      	subs	r3, #1
   127f8:	9305      	str	r3, [sp, #20]
   127fa:	d1e9      	bne.n	127d0 <shell_process+0x2d8>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
   127fc:	492a      	ldr	r1, [pc, #168]	; (128a8 <shell_process+0x3b0>)
   127fe:	6960      	ldr	r0, [r4, #20]
   12800:	f00d f80b 	bl	1f81a <z_shell_raw_fprintf>
	z_shell_print_prompt_and_cmd(shell);
   12804:	4620      	mov	r0, r4
   12806:	f000 fcbd 	bl	13184 <z_shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
   1280a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1280c:	aa2a      	add	r2, sp, #168	; 0xa8
   1280e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	size_t idx = first + 1;
   12812:	f108 0901 	add.w	r9, r8, #1
	uint16_t arg_len = z_shell_strlen(arg);
   12816:	f853 0c34 	ldr.w	r0, [r3, #-52]
   1281a:	f00c fff8 	bl	1f80e <z_shell_strlen>
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
   1281e:	4641      	mov	r1, r8
   12820:	aa13      	add	r2, sp, #76	; 0x4c
	uint16_t arg_len = z_shell_strlen(arg);
   12822:	4607      	mov	r7, r0
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
   12824:	4628      	mov	r0, r5
   12826:	f000 faf7 	bl	12e18 <z_shell_cmd_get>
   1282a:	4680      	mov	r8, r0
	strncpy(shell->ctx->temp_buff, match->syntax,
   1282c:	68a0      	ldr	r0, [r4, #8]
   1282e:	f8d8 1000 	ldr.w	r1, [r8]
   12832:	22ff      	movs	r2, #255	; 0xff
   12834:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   12838:	f00e fa3c 	bl	20cb4 <strncpy>
	*str = match->syntax;
   1283c:	f8d8 a000 	ldr.w	sl, [r8]
	uint16_t common = UINT16_MAX;
   12840:	f64f 78ff 	movw	r8, #65535	; 0xffff
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
   12844:	aa18      	add	r2, sp, #96	; 0x60
   12846:	4649      	mov	r1, r9
   12848:	4628      	mov	r0, r5
   1284a:	f109 0b01 	add.w	fp, r9, #1
   1284e:	f000 fae3 	bl	12e18 <z_shell_cmd_get>
		if (match2 == NULL) {
   12852:	2800      	cmp	r0, #0
   12854:	d068      	beq.n	12928 <shell_process+0x430>
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
   12856:	68a3      	ldr	r3, [r4, #8]
   12858:	6800      	ldr	r0, [r0, #0]
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1285a:	f503 73a1 	add.w	r3, r3, #322	; 0x142
	size_t common = 0;
   1285e:	2200      	movs	r2, #0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   12860:	f813 cb01 	ldrb.w	ip, [r3], #1
   12864:	5c81      	ldrb	r1, [r0, r2]
   12866:	4561      	cmp	r1, ip
   12868:	d105      	bne.n	12876 <shell_process+0x37e>
   1286a:	b121      	cbz	r1, 12876 <shell_process+0x37e>
		common++;
   1286c:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1286e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12872:	428a      	cmp	r2, r1
   12874:	d1f4      	bne.n	12860 <shell_process+0x368>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
   12876:	b10f      	cbz	r7, 1287c <shell_process+0x384>
   12878:	42ba      	cmp	r2, r7
   1287a:	db08      	blt.n	1288e <shell_process+0x396>
			common = (curr_common < common) ? curr_common : common;
   1287c:	4590      	cmp	r8, r2
			--cnt;
   1287e:	f106 36ff 	add.w	r6, r6, #4294967295
			common = (curr_common < common) ? curr_common : common;
   12882:	bfa8      	it	ge
   12884:	4690      	movge	r8, r2
	while (cnt > 1) {
   12886:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
   12888:	fa1f f888 	uxth.w	r8, r8
	while (cnt > 1) {
   1288c:	d04c      	beq.n	12928 <shell_process+0x430>
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
   1288e:	46d9      	mov	r9, fp
   12890:	e7d8      	b.n	12844 <shell_process+0x34c>
		if (str && match->syntax &&
   12892:	6800      	ldr	r0, [r0, #0]
   12894:	2800      	cmp	r0, #0
   12896:	d0a8      	beq.n	127ea <shell_process+0x2f2>
	return (strncmp(candidate, str, len) == 0) ? true : false;
   12898:	9a06      	ldr	r2, [sp, #24]
   1289a:	4651      	mov	r1, sl
   1289c:	f00e fa47 	bl	20d2e <strncmp>
		if (str && match->syntax &&
   128a0:	2800      	cmp	r0, #0
   128a2:	d0a2      	beq.n	127ea <shell_process+0x2f2>
   128a4:	e794      	b.n	127d0 <shell_process+0x2d8>
   128a6:	bf00      	nop
   128a8:	00024484 	.word	0x00024484
   128ac:	0002481f 	.word	0x0002481f
	longest_option += z_shell_strlen(tab);
   128b0:	4658      	mov	r0, fp
   128b2:	9307      	str	r3, [sp, #28]
   128b4:	f00c ffab 	bl	1f80e <z_shell_strlen>
   128b8:	9b04      	ldr	r3, [sp, #16]
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
   128ba:	68a1      	ldr	r1, [r4, #8]
	longest_option += z_shell_strlen(tab);
   128bc:	18c2      	adds	r2, r0, r3
   128be:	b292      	uxth	r2, r2
			- z_shell_strlen(tab)) / longest_option;
   128c0:	4658      	mov	r0, fp
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
   128c2:	8d4f      	ldrh	r7, [r1, #42]	; 0x2a
	longest_option += z_shell_strlen(tab);
   128c4:	9209      	str	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
   128c6:	f00c ffa2 	bl	1f80e <z_shell_strlen>
	diff = longest_option - z_shell_strlen(option);
   128ca:	9b07      	ldr	r3, [sp, #28]
			- z_shell_strlen(tab)) / longest_option;
   128cc:	9008      	str	r0, [sp, #32]
	diff = longest_option - z_shell_strlen(option);
   128ce:	4618      	mov	r0, r3
   128d0:	f00c ff9d 	bl	1f80e <z_shell_strlen>
   128d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
   128d6:	9908      	ldr	r1, [sp, #32]
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
   128d8:	9b07      	ldr	r3, [sp, #28]
	diff = longest_option - z_shell_strlen(option);
   128da:	eba2 0900 	sub.w	r9, r2, r0
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
   128de:	68a0      	ldr	r0, [r4, #8]
   128e0:	f8b0 c030 	ldrh.w	ip, [r0, #48]	; 0x30
			- z_shell_strlen(tab)) / longest_option;
   128e4:	1a7f      	subs	r7, r7, r1
   128e6:	fb97 f2f2 	sdiv	r2, r7, r2
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
   128ea:	b292      	uxth	r2, r2
   128ec:	fbbc f1f2 	udiv	r1, ip, r2
   128f0:	fb02 c211 	mls	r2, r2, r1, ip
   128f4:	f10c 0e01 	add.w	lr, ip, #1
   128f8:	b292      	uxth	r2, r2
	diff = longest_option - z_shell_strlen(option);
   128fa:	fa1f f989 	uxth.w	r9, r9
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
   128fe:	f8a0 e030 	strh.w	lr, [r0, #48]	; 0x30
   12902:	b95a      	cbnz	r2, 1291c <shell_process+0x424>
		z_shell_fprintf(shell, SHELL_OPTION, "\n%s%s", tab, option);
   12904:	9300      	str	r3, [sp, #0]
   12906:	4aa0      	ldr	r2, [pc, #640]	; (12b88 <shell_process+0x690>)
   12908:	465b      	mov	r3, fp
   1290a:	2106      	movs	r1, #6
   1290c:	4620      	mov	r0, r4
   1290e:	f00d fb7a 	bl	20006 <z_shell_fprintf>
	z_shell_op_cursor_horiz_move(shell, diff);
   12912:	4649      	mov	r1, r9
   12914:	4620      	mov	r0, r4
   12916:	f000 fac7 	bl	12ea8 <z_shell_op_cursor_horiz_move>
   1291a:	e76b      	b.n	127f4 <shell_process+0x2fc>
		z_shell_fprintf(shell, SHELL_OPTION, "%s", option);
   1291c:	4a9b      	ldr	r2, [pc, #620]	; (12b8c <shell_process+0x694>)
   1291e:	2106      	movs	r1, #6
   12920:	4620      	mov	r0, r4
   12922:	f00d fb70 	bl	20006 <z_shell_fprintf>
   12926:	e7f4      	b.n	12912 <shell_process+0x41a>
	if (common) {
   12928:	f1b8 0f00 	cmp.w	r8, #0
   1292c:	f43f adf4 	beq.w	12518 <shell_process+0x20>
		z_shell_op_completion_insert(shell, &completion[arg_len],
   12930:	eba8 0207 	sub.w	r2, r8, r7
   12934:	b292      	uxth	r2, r2
   12936:	eb0a 0107 	add.w	r1, sl, r7
   1293a:	4620      	mov	r0, r4
   1293c:	f00d fba2 	bl	20084 <z_shell_op_completion_insert>
   12940:	e5ea      	b.n	12518 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
   12942:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
   12946:	079e      	lsls	r6, r3, #30
   12948:	f57f ade6 	bpl.w	12518 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
   1294c:	2101      	movs	r1, #1
   1294e:	f00c ff71 	bl	1f834 <z_flag_history_exit_set.isra.0>
						z_shell_op_char_backspace(shell);
   12952:	4620      	mov	r0, r4
   12954:	f00d fbb3 	bl	200be <z_shell_op_char_backspace>
   12958:	e5de      	b.n	12518 <shell_process+0x20>
   1295a:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
				} else if (z_flag_echo_get(shell)) {
   1295e:	0792      	lsls	r2, r2, #30
   12960:	f57f adda 	bpl.w	12518 <shell_process+0x20>
	switch (data) {
   12964:	3b01      	subs	r3, #1
   12966:	2b16      	cmp	r3, #22
   12968:	f63f add6 	bhi.w	12518 <shell_process+0x20>
   1296c:	a201      	add	r2, pc, #4	; (adr r2, 12974 <shell_process+0x47c>)
   1296e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12972:	bf00      	nop
   12974:	00012b4d 	.word	0x00012b4d
   12978:	000129d1 	.word	0x000129d1
   1297c:	000129d9 	.word	0x000129d9
   12980:	0001262f 	.word	0x0001262f
   12984:	00012b41 	.word	0x00012b41
   12988:	000129f9 	.word	0x000129f9
   1298c:	00012519 	.word	0x00012519
   12990:	00012519 	.word	0x00012519
   12994:	00012519 	.word	0x00012519
   12998:	00012519 	.word	0x00012519
   1299c:	00012a01 	.word	0x00012a01
   129a0:	00012a09 	.word	0x00012a09
   129a4:	00012519 	.word	0x00012519
   129a8:	00012a33 	.word	0x00012a33
   129ac:	00012519 	.word	0x00012519
   129b0:	00012a3d 	.word	0x00012a3d
   129b4:	00012519 	.word	0x00012519
   129b8:	00012519 	.word	0x00012519
   129bc:	00012519 	.word	0x00012519
   129c0:	00012519 	.word	0x00012519
   129c4:	00012a41 	.word	0x00012a41
   129c8:	00012519 	.word	0x00012519
   129cc:	00012a6f 	.word	0x00012a6f
		z_shell_op_left_arrow(shell);
   129d0:	4620      	mov	r0, r4
   129d2:	f00d fa75 	bl	1fec0 <z_shell_op_left_arrow>
		break;
   129d6:	e59f      	b.n	12518 <shell_process+0x20>
		z_shell_op_cursor_end_move(shell);
   129d8:	4620      	mov	r0, r4
   129da:	f00d fa6a 	bl	1feb2 <z_shell_op_cursor_end_move>
		if (!z_shell_cursor_in_empty_line(shell)) {
   129de:	4620      	mov	r0, r4
   129e0:	f00d f9ef 	bl	1fdc2 <z_shell_cursor_in_empty_line>
   129e4:	b918      	cbnz	r0, 129ee <shell_process+0x4f6>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
   129e6:	496a      	ldr	r1, [pc, #424]	; (12b90 <shell_process+0x698>)
   129e8:	6960      	ldr	r0, [r4, #20]
   129ea:	f00c ff16 	bl	1f81a <z_shell_raw_fprintf>
		z_flag_history_exit_set(shell, true);
   129ee:	68a0      	ldr	r0, [r4, #8]
   129f0:	2101      	movs	r1, #1
   129f2:	f00c ff1f 	bl	1f834 <z_flag_history_exit_set.isra.0>
   129f6:	e600      	b.n	125fa <shell_process+0x102>
		z_shell_op_right_arrow(shell);
   129f8:	4620      	mov	r0, r4
   129fa:	f00d fa69 	bl	1fed0 <z_shell_op_right_arrow>
		break;
   129fe:	e58b      	b.n	12518 <shell_process+0x20>
		z_shell_op_delete_from_cursor(shell);
   12a00:	4620      	mov	r0, r4
   12a02:	f00d fa6e 	bl	1fee2 <z_shell_op_delete_from_cursor>
		break;
   12a06:	e587      	b.n	12518 <shell_process+0x20>
	return sh->ctx->cfg.flags.use_vt100 == 1;
   12a08:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
   12a0c:	069f      	lsls	r7, r3, #26
   12a0e:	d503      	bpl.n	12a18 <shell_process+0x520>
   12a10:	4960      	ldr	r1, [pc, #384]	; (12b94 <shell_process+0x69c>)
   12a12:	6960      	ldr	r0, [r4, #20]
   12a14:	f00c ff01 	bl	1f81a <z_shell_raw_fprintf>
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
   12a18:	68a3      	ldr	r3, [r4, #8]
   12a1a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   12a1e:	069e      	lsls	r6, r3, #26
   12a20:	d503      	bpl.n	12a2a <shell_process+0x532>
   12a22:	495d      	ldr	r1, [pc, #372]	; (12b98 <shell_process+0x6a0>)
   12a24:	6960      	ldr	r0, [r4, #20]
   12a26:	f00c fef8 	bl	1f81a <z_shell_raw_fprintf>
		z_shell_print_prompt_and_cmd(shell);
   12a2a:	4620      	mov	r0, r4
   12a2c:	f000 fbaa 	bl	13184 <z_shell_print_prompt_and_cmd>
		break;
   12a30:	e572      	b.n	12518 <shell_process+0x20>
		history_handle(shell, false);
   12a32:	2100      	movs	r1, #0
		history_handle(shell, true);
   12a34:	4620      	mov	r0, r4
   12a36:	f7ff fb85 	bl	12144 <history_handle>
		break;
   12a3a:	e56d      	b.n	12518 <shell_process+0x20>
		history_handle(shell, true);
   12a3c:	2101      	movs	r1, #1
   12a3e:	e7f9      	b.n	12a34 <shell_process+0x53c>
		z_shell_op_cursor_home_move(shell);
   12a40:	4620      	mov	r0, r4
   12a42:	f00d fa30 	bl	1fea6 <z_shell_op_cursor_home_move>
		cmd_buffer_clear(shell);
   12a46:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   12a48:	2200      	movs	r2, #0
   12a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
   12a4e:	63da      	str	r2, [r3, #60]	; 0x3c
		z_flag_history_exit_set(shell, true);
   12a50:	68a0      	ldr	r0, [r4, #8]
   12a52:	2101      	movs	r1, #1
   12a54:	f00c feee 	bl	1f834 <z_flag_history_exit_set.isra.0>
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
   12a58:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
   12a5a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
   12a5e:	069d      	lsls	r5, r3, #26
   12a60:	f57f ad5a 	bpl.w	12518 <shell_process+0x20>
   12a64:	494d      	ldr	r1, [pc, #308]	; (12b9c <shell_process+0x6a4>)
   12a66:	6960      	ldr	r0, [r4, #20]
   12a68:	f00c fed7 	bl	1f81a <z_shell_raw_fprintf>
}
   12a6c:	e554      	b.n	12518 <shell_process+0x20>
		z_shell_op_word_remove(shell);
   12a6e:	4620      	mov	r0, r4
   12a70:	f000 fab4 	bl	12fdc <z_shell_op_word_remove>
		z_flag_history_exit_set(shell, true);
   12a74:	68a0      	ldr	r0, [r4, #8]
   12a76:	2101      	movs	r1, #1
   12a78:	f00c fedc 	bl	1f834 <z_flag_history_exit_set.isra.0>
		break;
   12a7c:	e54c      	b.n	12518 <shell_process+0x20>
			if (data == '[') {
   12a7e:	2b5b      	cmp	r3, #91	; 0x5b
   12a80:	d101      	bne.n	12a86 <shell_process+0x58e>
	shell->ctx->receive_state = state;
   12a82:	2302      	movs	r3, #2
   12a84:	e5d8      	b.n	12638 <shell_process+0x140>
	return sh->ctx->cfg.flags.echo == 1;
   12a86:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
			} else if (z_flag_echo_get(shell)) {
   12a8a:	0790      	lsls	r0, r2, #30
   12a8c:	d506      	bpl.n	12a9c <shell_process+0x5a4>
	if (data == SHELL_VT100_ASCII_ALT_B) {
   12a8e:	2b62      	cmp	r3, #98	; 0x62
   12a90:	d108      	bne.n	12aa4 <shell_process+0x5ac>
		z_shell_op_cursor_word_move(shell, -1);
   12a92:	f04f 31ff 	mov.w	r1, #4294967295
		z_shell_op_cursor_word_move(shell, 1);
   12a96:	4620      	mov	r0, r4
   12a98:	f00d f9cb 	bl	1fe32 <z_shell_op_cursor_word_move>
			receive_state_change(shell, SHELL_RECEIVE_DEFAULT);
   12a9c:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->receive_state = state;
   12a9e:	2200      	movs	r2, #0
   12aa0:	715a      	strb	r2, [r3, #5]
}
   12aa2:	e539      	b.n	12518 <shell_process+0x20>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
   12aa4:	2b66      	cmp	r3, #102	; 0x66
   12aa6:	d1f9      	bne.n	12a9c <shell_process+0x5a4>
		z_shell_op_cursor_word_move(shell, 1);
   12aa8:	2101      	movs	r1, #1
   12aaa:	e7f4      	b.n	12a96 <shell_process+0x59e>
	shell->ctx->receive_state = state;
   12aac:	2200      	movs	r2, #0
   12aae:	7142      	strb	r2, [r0, #5]
			if (!z_flag_echo_get(shell)) {
   12ab0:	68a2      	ldr	r2, [r4, #8]
   12ab2:	f8d2 1260 	ldr.w	r1, [r2, #608]	; 0x260
   12ab6:	0789      	lsls	r1, r1, #30
   12ab8:	f57f ad2e 	bpl.w	12518 <shell_process+0x20>
			switch (data) {
   12abc:	3b31      	subs	r3, #49	; 0x31
   12abe:	2b1b      	cmp	r3, #27
   12ac0:	f63f ad2a 	bhi.w	12518 <shell_process+0x20>
   12ac4:	a101      	add	r1, pc, #4	; (adr r1, 12acc <shell_process+0x5d4>)
   12ac6:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   12aca:	bf00      	nop
   12acc:	00012b49 	.word	0x00012b49
   12ad0:	00012b55 	.word	0x00012b55
   12ad4:	00012b69 	.word	0x00012b69
   12ad8:	00012b3d 	.word	0x00012b3d
   12adc:	00012519 	.word	0x00012519
   12ae0:	00012519 	.word	0x00012519
   12ae4:	00012519 	.word	0x00012519
   12ae8:	00012519 	.word	0x00012519
   12aec:	00012519 	.word	0x00012519
   12af0:	00012519 	.word	0x00012519
   12af4:	00012519 	.word	0x00012519
   12af8:	00012519 	.word	0x00012519
   12afc:	00012519 	.word	0x00012519
   12b00:	00012519 	.word	0x00012519
   12b04:	00012519 	.word	0x00012519
   12b08:	00012519 	.word	0x00012519
   12b0c:	00012a3d 	.word	0x00012a3d
   12b10:	00012a33 	.word	0x00012a33
   12b14:	000129f9 	.word	0x000129f9
   12b18:	000129d1 	.word	0x000129d1
   12b1c:	00012519 	.word	0x00012519
   12b20:	00012b41 	.word	0x00012b41
   12b24:	00012519 	.word	0x00012519
   12b28:	00012b4d 	.word	0x00012b4d
   12b2c:	00012519 	.word	0x00012519
   12b30:	00012519 	.word	0x00012519
   12b34:	00012519 	.word	0x00012519
   12b38:	00012b59 	.word	0x00012b59
	shell->ctx->receive_state = state;
   12b3c:	2303      	movs	r3, #3
   12b3e:	7153      	strb	r3, [r2, #5]
		z_shell_op_cursor_end_move(shell);
   12b40:	4620      	mov	r0, r4
   12b42:	f00d f9b6 	bl	1feb2 <z_shell_op_cursor_end_move>
		break;
   12b46:	e4e7      	b.n	12518 <shell_process+0x20>
	shell->ctx->receive_state = state;
   12b48:	2303      	movs	r3, #3
   12b4a:	7153      	strb	r3, [r2, #5]
		z_shell_op_cursor_home_move(shell);
   12b4c:	4620      	mov	r0, r4
   12b4e:	f00d f9aa 	bl	1fea6 <z_shell_op_cursor_home_move>
		break;
   12b52:	e4e1      	b.n	12518 <shell_process+0x20>
	shell->ctx->receive_state = state;
   12b54:	2303      	movs	r3, #3
   12b56:	7153      	strb	r3, [r2, #5]
				bool status = z_flag_insert_mode_get(shell);
   12b58:	68a0      	ldr	r0, [r4, #8]
	return sh->ctx->cfg.flags.insert_mode == 1;
   12b5a:	f8d0 1260 	ldr.w	r1, [r0, #608]	; 0x260
   12b5e:	f001 0101 	and.w	r1, r1, #1
				z_flag_insert_mode_set(shell, !status);
   12b62:	f081 0101 	eor.w	r1, r1, #1
   12b66:	e5ee      	b.n	12746 <shell_process+0x24e>
	shell->ctx->receive_state = state;
   12b68:	2303      	movs	r3, #3
   12b6a:	7153      	strb	r3, [r2, #5]
				if (z_flag_echo_get(shell)) {
   12b6c:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.echo == 1;
   12b6e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   12b72:	079b      	lsls	r3, r3, #30
   12b74:	f57f acd0 	bpl.w	12518 <shell_process+0x20>
   12b78:	e559      	b.n	1262e <shell_process+0x136>
	shell->ctx->receive_state = state;
   12b7a:	2300      	movs	r3, #0
   12b7c:	e55c      	b.n	12638 <shell_process+0x140>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
   12b7e:	2900      	cmp	r1, #0
   12b80:	f43f ad94 	beq.w	126ac <shell_process+0x1b4>
   12b84:	e5e3      	b.n	1274e <shell_process+0x256>
   12b86:	bf00      	nop
   12b88:	000251e1 	.word	0x000251e1
   12b8c:	00024e7a 	.word	0x00024e7a
   12b90:	00024484 	.word	0x00024484
   12b94:	00023719 	.word	0x00023719
   12b98:	0002371e 	.word	0x0002371e
   12b9c:	00023714 	.word	0x00023714

00012ba0 <shell_init>:
{
   12ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12ba4:	4604      	mov	r4, r0
	if (shell->ctx->tid) {
   12ba6:	6880      	ldr	r0, [r0, #8]
{
   12ba8:	4688      	mov	r8, r1
	if (shell->ctx->tid) {
   12baa:	f8d0 130c 	ldr.w	r1, [r0, #780]	; 0x30c
{
   12bae:	b089      	sub	sp, #36	; 0x24
   12bb0:	4615      	mov	r5, r2
   12bb2:	461f      	mov	r7, r3
	if (shell->ctx->tid) {
   12bb4:	2900      	cmp	r1, #0
   12bb6:	d161      	bne.n	12c7c <shell_init+0xdc>
	memset(sh->ctx, 0, sizeof(*sh->ctx));
   12bb8:	f44f 7244 	mov.w	r2, #784	; 0x310
   12bbc:	f00e f8f8 	bl	20db0 <memset>
	sh->ctx->prompt = sh->default_prompt;
   12bc0:	68a3      	ldr	r3, [r4, #8]
   12bc2:	6822      	ldr	r2, [r4, #0]
	z_shell_history_init(shell->history);
   12bc4:	68e0      	ldr	r0, [r4, #12]
	sh->ctx->prompt = sh->default_prompt;
   12bc6:	601a      	str	r2, [r3, #0]
	z_shell_history_init(shell->history);
   12bc8:	f00d fd22 	bl	20610 <z_shell_history_init>
	k_mutex_init(&sh->ctx->wr_mtx);
   12bcc:	68a0      	ldr	r0, [r4, #8]
   12bce:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_init(mutex);
   12bd2:	f00f fe9d 	bl	22910 <z_impl_k_mutex_init>
   12bd6:	f44f 792a 	mov.w	r9, #680	; 0x2a8
   12bda:	f44f 761a 	mov.w	r6, #616	; 0x268
		k_poll_signal_init(&sh->ctx->signals[i]);
   12bde:	68a0      	ldr	r0, [r4, #8]
   12be0:	4430      	add	r0, r6
		arch_syscall_invoke1(*(uintptr_t *)&sig, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
   12be2:	f010 fb5a 	bl	2329a <z_impl_k_poll_signal_init>
		k_poll_event_init(&sh->ctx->events[i],
   12be6:	68a0      	ldr	r0, [r4, #8]
   12be8:	2200      	movs	r2, #0
   12bea:	1983      	adds	r3, r0, r6
   12bec:	2101      	movs	r1, #1
   12bee:	4448      	add	r0, r9
   12bf0:	3610      	adds	r6, #16
   12bf2:	f010 fb35 	bl	23260 <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
   12bf6:	f5b6 7f2a 	cmp.w	r6, #680	; 0x2a8
   12bfa:	f109 0914 	add.w	r9, r9, #20
   12bfe:	d1ee      	bne.n	12bde <shell_init+0x3e>
		sh->stats->log_lost_cnt = 0;
   12c00:	69a3      	ldr	r3, [r4, #24]
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, tx_rdy, val, ret);
   12c02:	68a0      	ldr	r0, [r4, #8]
   12c04:	2600      	movs	r6, #0
   12c06:	2102      	movs	r1, #2
   12c08:	601e      	str	r6, [r3, #0]
   12c0a:	f500 7019 	add.w	r0, r0, #612	; 0x264
   12c0e:	f00c fda0 	bl	1f752 <atomic_or>
	sh->ctx->vt100_ctx.cons.terminal_wid =
   12c12:	68a3      	ldr	r3, [r4, #8]
	sh->ctx->vt100_ctx.cons.terminal_hei =
   12c14:	4a1b      	ldr	r2, [pc, #108]	; (12c84 <shell_init+0xe4>)
   12c16:	629a      	str	r2, [r3, #40]	; 0x28
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
   12c18:	6818      	ldr	r0, [r3, #0]
   12c1a:	f00c fdf8 	bl	1f80e <z_shell_strlen>
   12c1e:	68a3      	ldr	r3, [r4, #8]
	int ret = sh->iface->api->init(sh->iface, transport_config,
   12c20:	4a19      	ldr	r2, [pc, #100]	; (12c88 <shell_init+0xe8>)
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
   12c22:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	int ret = sh->iface->api->init(sh->iface, transport_config,
   12c26:	6860      	ldr	r0, [r4, #4]
	sh->ctx->cfg.flags = cfg_flags;
   12c28:	f366 0582 	bfi	r5, r6, #2, #1
   12c2c:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
	int ret = sh->iface->api->init(sh->iface, transport_config,
   12c30:	6803      	ldr	r3, [r0, #0]
   12c32:	4641      	mov	r1, r8
   12c34:	681d      	ldr	r5, [r3, #0]
   12c36:	4623      	mov	r3, r4
   12c38:	47a8      	blx	r5
	if (ret == 0) {
   12c3a:	4605      	mov	r5, r0
   12c3c:	b9d0      	cbnz	r0, 12c74 <shell_init+0xd4>
	shell->ctx->state = state;
   12c3e:	68a3      	ldr	r3, [r4, #8]
   12c40:	2201      	movs	r2, #1
   12c42:	711a      	strb	r2, [r3, #4]
	k_tid_t tid = k_thread_create(shell->thread,
   12c44:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12c48:	2200      	movs	r2, #0
   12c4a:	2300      	movs	r3, #0
   12c4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12c50:	230e      	movs	r3, #14
   12c52:	9303      	str	r3, [sp, #12]
   12c54:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12c56:	9504      	str	r5, [sp, #16]
   12c58:	e9cd 7301 	strd	r7, r3, [sp, #4]
   12c5c:	9400      	str	r4, [sp, #0]
   12c5e:	4b0b      	ldr	r3, [pc, #44]	; (12c8c <shell_init+0xec>)
   12c60:	f44f 6200 	mov.w	r2, #2048	; 0x800
   12c64:	f00a f93c 	bl	1cee0 <z_impl_k_thread_create>
	shell->ctx->tid = tid;
   12c68:	68a3      	ldr	r3, [r4, #8]
	k_thread_name_set(tid, shell->thread_name);
   12c6a:	6a61      	ldr	r1, [r4, #36]	; 0x24
	shell->ctx->tid = tid;
   12c6c:	f8c3 030c 	str.w	r0, [r3, #780]	; 0x30c
	return z_impl_k_thread_name_set(thread, str);
   12c70:	f00a f884 	bl	1cd7c <z_impl_k_thread_name_set>
}
   12c74:	4628      	mov	r0, r5
   12c76:	b009      	add	sp, #36	; 0x24
   12c78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EALREADY;
   12c7c:	f06f 0577 	mvn.w	r5, #119	; 0x77
   12c80:	e7f8      	b.n	12c74 <shell_init+0xd4>
   12c82:	bf00      	nop
   12c84:	00500018 	.word	0x00500018
   12c88:	0001f875 	.word	0x0001f875
   12c8c:	00012cdd 	.word	0x00012cdd

00012c90 <shell_start>:
{
   12c90:	b510      	push	{r4, lr}
   12c92:	4604      	mov	r4, r0
	if (state_get(shell) != SHELL_STATE_INITIALIZED) {
   12c94:	6880      	ldr	r0, [r0, #8]
   12c96:	7903      	ldrb	r3, [r0, #4]
   12c98:	2b01      	cmp	r3, #1
   12c9a:	d119      	bne.n	12cd0 <shell_start+0x40>
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   12c9c:	f04f 32ff 	mov.w	r2, #4294967295
   12ca0:	f04f 33ff 	mov.w	r3, #4294967295
   12ca4:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   12ca8:	f00c fdee 	bl	1f888 <k_mutex_lock.constprop.0>
		z_shell_vt100_color_set(shell, SHELL_NORMAL);
   12cac:	2108      	movs	r1, #8
   12cae:	4620      	mov	r0, r4
   12cb0:	f000 f956 	bl	12f60 <z_shell_vt100_color_set>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
   12cb4:	4908      	ldr	r1, [pc, #32]	; (12cd8 <shell_start+0x48>)
   12cb6:	6960      	ldr	r0, [r4, #20]
   12cb8:	f00c fdaf 	bl	1f81a <z_shell_raw_fprintf>
	state_set(shell, SHELL_STATE_ACTIVE);
   12cbc:	4620      	mov	r0, r4
   12cbe:	f7ff fa93 	bl	121e8 <state_set.constprop.0>
	k_mutex_unlock(&shell->ctx->wr_mtx);
   12cc2:	68a0      	ldr	r0, [r4, #8]
   12cc4:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   12cc8:	f00c fd9f 	bl	1f80a <k_mutex_unlock>
	return 0;
   12ccc:	2000      	movs	r0, #0
}
   12cce:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   12cd0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12cd4:	e7fb      	b.n	12cce <shell_start+0x3e>
   12cd6:	bf00      	nop
   12cd8:	00024483 	.word	0x00024483

00012cdc <shell_thread>:
{
   12cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12ce0:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
   12ce2:	6840      	ldr	r0, [r0, #4]
   12ce4:	6803      	ldr	r3, [r0, #0]
{
   12ce6:	460e      	mov	r6, r1
	err = shell->iface->api->enable(shell->iface, false);
   12ce8:	689b      	ldr	r3, [r3, #8]
   12cea:	2100      	movs	r1, #0
{
   12cec:	4615      	mov	r5, r2
	err = shell->iface->api->enable(shell->iface, false);
   12cee:	4798      	blx	r3
	if (err != 0) {
   12cf0:	2800      	cmp	r0, #0
   12cf2:	d14c      	bne.n	12d8e <shell_thread+0xb2>
	if (IS_ENABLED(CONFIG_SHELL_LOG_BACKEND) && log_backend
   12cf4:	b126      	cbz	r6, 12d00 <shell_thread+0x24>
		z_shell_log_backend_enable(shell->log_backend, (void *)shell,
   12cf6:	69e0      	ldr	r0, [r4, #28]
   12cf8:	462a      	mov	r2, r5
   12cfa:	4621      	mov	r1, r4
   12cfc:	f00d fab2 	bl	20264 <z_shell_log_backend_enable>
	err = shell_start(shell);
   12d00:	4620      	mov	r0, r4
   12d02:	f7ff ffc5 	bl	12c90 <shell_start>
	if (err != 0) {
   12d06:	2800      	cmp	r0, #0
   12d08:	d141      	bne.n	12d8e <shell_thread+0xb2>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
   12d0a:	f8df 8094 	ldr.w	r8, [pc, #148]	; 12da0 <shell_thread+0xc4>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
   12d0e:	4f21      	ldr	r7, [pc, #132]	; (12d94 <shell_thread+0xb8>)
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
   12d10:	4e21      	ldr	r6, [pc, #132]	; (12d98 <shell_thread+0xbc>)
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
   12d12:	68a0      	ldr	r0, [r4, #8]
   12d14:	f500 702a 	add.w	r0, r0, #680	; 0x2a8
	return z_impl_k_poll(events, num_events, timeout);
   12d18:	f04f 32ff 	mov.w	r2, #4294967295
   12d1c:	f04f 33ff 	mov.w	r3, #4294967295
   12d20:	2103      	movs	r1, #3
   12d22:	f00b faed 	bl	1e300 <z_impl_k_poll>
		if (err != 0) {
   12d26:	4605      	mov	r5, r0
   12d28:	68a0      	ldr	r0, [r4, #8]
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   12d2a:	f04f 32ff 	mov.w	r2, #4294967295
   12d2e:	f04f 33ff 	mov.w	r3, #4294967295
   12d32:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
		if (err != 0) {
   12d36:	b175      	cbz	r5, 12d56 <shell_thread+0x7a>
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   12d38:	f00c fda6 	bl	1f888 <k_mutex_lock.constprop.0>
			z_shell_fprintf(shell, SHELL_ERROR,
   12d3c:	4620      	mov	r0, r4
   12d3e:	462b      	mov	r3, r5
   12d40:	4a16      	ldr	r2, [pc, #88]	; (12d9c <shell_thread+0xc0>)
   12d42:	2101      	movs	r1, #1
   12d44:	f00d f95f 	bl	20006 <z_shell_fprintf>
			k_mutex_unlock(&shell->ctx->wr_mtx);
   12d48:	68a0      	ldr	r0, [r4, #8]
}
   12d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_mutex_unlock(&shell->ctx->wr_mtx);
   12d4e:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   12d52:	f00c bd5a 	b.w	1f80a <k_mutex_unlock>
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   12d56:	f00c fd97 	bl	1f888 <k_mutex_lock.constprop.0>
		if (shell->iface->api->update) {
   12d5a:	6860      	ldr	r0, [r4, #4]
   12d5c:	6803      	ldr	r3, [r0, #0]
   12d5e:	695b      	ldr	r3, [r3, #20]
   12d60:	b103      	cbz	r3, 12d64 <shell_thread+0x88>
			shell->iface->api->update(shell->iface);
   12d62:	4798      	blx	r3
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
   12d64:	4642      	mov	r2, r8
   12d66:	4620      	mov	r0, r4
   12d68:	2102      	movs	r1, #2
   12d6a:	f00c fd38 	bl	1f7de <shell_signal_handle>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
   12d6e:	463a      	mov	r2, r7
   12d70:	4620      	mov	r0, r4
   12d72:	2100      	movs	r1, #0
   12d74:	f00c fd33 	bl	1f7de <shell_signal_handle>
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
   12d78:	4620      	mov	r0, r4
   12d7a:	4632      	mov	r2, r6
   12d7c:	2101      	movs	r1, #1
   12d7e:	f00c fd2e 	bl	1f7de <shell_signal_handle>
		k_mutex_unlock(&shell->ctx->wr_mtx);
   12d82:	68a0      	ldr	r0, [r4, #8]
   12d84:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   12d88:	f00c fd3f 	bl	1f80a <k_mutex_unlock>
   12d8c:	e7c1      	b.n	12d12 <shell_thread+0x36>
}
   12d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12d92:	bf00      	nop
   12d94:	000124f9 	.word	0x000124f9
   12d98:	0001f88d 	.word	0x0001f88d
   12d9c:	000251e7 	.word	0x000251e7
   12da0:	0001f78f 	.word	0x0001f78f

00012da4 <cmd_help>:
{
	sh->ctx->bypass = bypass;
}

static int cmd_help(const struct shell *shell, size_t argc, char **argv)
{
   12da4:	b510      	push	{r4, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

#if defined(CONFIG_SHELL_TAB)
	shell_print(shell, "Please press the <Tab> button to see all available "
   12da6:	4a0d      	ldr	r2, [pc, #52]	; (12ddc <cmd_help+0x38>)
{
   12da8:	4604      	mov	r4, r0
	shell_print(shell, "Please press the <Tab> button to see all available "
   12daa:	2108      	movs	r1, #8
   12dac:	f00c fdcf 	bl	1f94e <shell_fprintf>
			   "commands.");
#endif

#if defined(CONFIG_SHELL_TAB_AUTOCOMPLETION)
	shell_print(shell,
   12db0:	4620      	mov	r0, r4
   12db2:	4a0b      	ldr	r2, [pc, #44]	; (12de0 <cmd_help+0x3c>)
   12db4:	2108      	movs	r1, #8
   12db6:	f00c fdca 	bl	1f94e <shell_fprintf>
		"You can also use the <Tab> button to prompt or auto-complete"
		" all commands or its subcommands.");
#endif

#if defined(CONFIG_SHELL_HELP)
	shell_print(shell,
   12dba:	4620      	mov	r0, r4
   12dbc:	4a09      	ldr	r2, [pc, #36]	; (12de4 <cmd_help+0x40>)
   12dbe:	2108      	movs	r1, #8
   12dc0:	f00c fdc5 	bl	1f94e <shell_fprintf>
		"You can try to call commands with <-h> or <--help> parameter"
		" for more information.");
#endif

#if defined(CONFIG_SHELL_METAKEYS)
	shell_print(shell,
   12dc4:	4620      	mov	r0, r4
   12dc6:	4a08      	ldr	r2, [pc, #32]	; (12de8 <cmd_help+0x44>)
   12dc8:	2108      	movs	r1, #8
   12dca:	f00c fdc0 	bl	1f94e <shell_fprintf>
		"Please refer to shell documentation for more details.");
#endif

	if (IS_ENABLED(CONFIG_SHELL_HELP)) {
		/* For NULL argument function will print all root commands */
		z_shell_help_subcmd_print(shell, NULL,
   12dce:	4620      	mov	r0, r4
   12dd0:	4a06      	ldr	r2, [pc, #24]	; (12dec <cmd_help+0x48>)
   12dd2:	2100      	movs	r1, #0
   12dd4:	f000 fa68 	bl	132a8 <z_shell_help_subcmd_print>
			shell_print(shell, "  %s", entry->syntax);
		}
	}

	return 0;
}
   12dd8:	2000      	movs	r0, #0
   12dda:	bd10      	pop	{r4, pc}
   12ddc:	000251fe 	.word	0x000251fe
   12de0:	0002523c 	.word	0x0002523c
   12de4:	0002529b 	.word	0x0002529b
   12de8:	000252ef 	.word	0x000252ef
   12dec:	00025389 	.word	0x00025389

00012df0 <z_shell_fprintf_fmt>:
	return 0;
}

void z_shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
			 const char *fmt, va_list args)
{
   12df0:	b510      	push	{r4, lr}
   12df2:	4604      	mov	r4, r0
   12df4:	4613      	mov	r3, r2
	(void)cbvprintf(out_func, (void *)sh_fprintf, fmt, args);
   12df6:	460a      	mov	r2, r1
   12df8:	4601      	mov	r1, r0
   12dfa:	4806      	ldr	r0, [pc, #24]	; (12e14 <z_shell_fprintf_fmt+0x24>)
   12dfc:	f7fd f8f6 	bl	ffec <cbvprintf>

	if (sh_fprintf->ctrl_blk->autoflush) {
   12e00:	6923      	ldr	r3, [r4, #16]
   12e02:	791b      	ldrb	r3, [r3, #4]
   12e04:	b123      	cbz	r3, 12e10 <z_shell_fprintf_fmt+0x20>
		z_shell_fprintf_buffer_flush(sh_fprintf);
   12e06:	4620      	mov	r0, r4
	}
}
   12e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_fprintf_buffer_flush(sh_fprintf);
   12e0c:	f00c bdaf 	b.w	1f96e <z_shell_fprintf_buffer_flush>
}
   12e10:	bd10      	pop	{r4, pc}
   12e12:	bf00      	nop
   12e14:	0001f987 	.word	0x0001f987

00012e18 <z_shell_cmd_get>:

const struct shell_static_entry *z_shell_cmd_get(
					const struct shell_static_entry *parent,
					size_t idx,
					struct shell_static_entry *dloc)
{
   12e18:	b510      	push	{r4, lr}
   12e1a:	460b      	mov	r3, r1
   12e1c:	4614      	mov	r4, r2
	const struct shell_static_entry *res = NULL;

	if (parent == NULL) {
   12e1e:	b950      	cbnz	r0, 12e36 <z_shell_cmd_get+0x1e>
	return ((uint8_t *)__shell_root_cmds_end -
   12e20:	490e      	ldr	r1, [pc, #56]	; (12e5c <z_shell_cmd_get+0x44>)
   12e22:	4a0f      	ldr	r2, [pc, #60]	; (12e60 <z_shell_cmd_get+0x48>)
   12e24:	1a52      	subs	r2, r2, r1
		return  (idx < shell_root_cmd_count()) ?
				shell_root_cmd_get(idx)->u.entry : NULL;
   12e26:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
   12e2a:	d20f      	bcs.n	12e4c <z_shell_cmd_get+0x34>
   12e2c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   12e30:	684c      	ldr	r4, [r1, #4]
			}
		}
	}

	return res;
}
   12e32:	4620      	mov	r0, r4
   12e34:	bd10      	pop	{r4, pc}
	if (parent->subcmd) {
   12e36:	6881      	ldr	r1, [r0, #8]
   12e38:	b141      	cbz	r1, 12e4c <z_shell_cmd_get+0x34>
		if (parent->subcmd->is_dynamic) {
   12e3a:	684a      	ldr	r2, [r1, #4]
   12e3c:	7809      	ldrb	r1, [r1, #0]
   12e3e:	b139      	cbz	r1, 12e50 <z_shell_cmd_get+0x38>
			parent->subcmd->u.dynamic_get(idx, dloc);
   12e40:	4618      	mov	r0, r3
   12e42:	4621      	mov	r1, r4
   12e44:	4790      	blx	r2
			if (dloc->syntax != NULL) {
   12e46:	6823      	ldr	r3, [r4, #0]
   12e48:	2b00      	cmp	r3, #0
   12e4a:	d1f2      	bne.n	12e32 <z_shell_cmd_get+0x1a>
	const struct shell_static_entry *res = NULL;
   12e4c:	2400      	movs	r4, #0
   12e4e:	e7f0      	b.n	12e32 <z_shell_cmd_get+0x1a>
			if (parent->subcmd->u.entry[idx].syntax != NULL) {
   12e50:	2014      	movs	r0, #20
   12e52:	4343      	muls	r3, r0
   12e54:	18d4      	adds	r4, r2, r3
   12e56:	58d3      	ldr	r3, [r2, r3]
   12e58:	e7f6      	b.n	12e48 <z_shell_cmd_get+0x30>
   12e5a:	bf00      	nop
   12e5c:	00023640 	.word	0x00023640
   12e60:	00023698 	.word	0x00023698

00012e64 <z_clear_eos>:
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
   12e64:	6883      	ldr	r3, [r0, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
   12e66:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
   12e6a:	069b      	lsls	r3, r3, #26
   12e6c:	d503      	bpl.n	12e76 <z_clear_eos+0x12>
   12e6e:	4902      	ldr	r1, [pc, #8]	; (12e78 <z_clear_eos+0x14>)
   12e70:	6940      	ldr	r0, [r0, #20]
   12e72:	f00c bf85 	b.w	1fd80 <z_shell_raw_fprintf>
}
   12e76:	4770      	bx	lr
   12e78:	00023724 	.word	0x00023724

00012e7c <z_shell_op_cursor_vert_move>:
#include "shell_ops.h"

#define CMD_CURSOR_LEN 8
void z_shell_op_cursor_vert_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'A' : 'B';
   12e7c:	1e0a      	subs	r2, r1, #0
   12e7e:	dc0d      	bgt.n	12e9c <z_shell_op_cursor_vert_move+0x20>

	if (delta == 0) {
   12e80:	d00e      	beq.n	12ea0 <z_shell_op_cursor_vert_move+0x24>
	char dir = delta > 0 ? 'A' : 'B';
   12e82:	2342      	movs	r3, #66	; 0x42

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
   12e84:	6881      	ldr	r1, [r0, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
   12e86:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260
   12e8a:	0689      	lsls	r1, r1, #26
   12e8c:	d508      	bpl.n	12ea0 <z_shell_op_cursor_vert_move+0x24>
   12e8e:	2a00      	cmp	r2, #0
   12e90:	4904      	ldr	r1, [pc, #16]	; (12ea4 <z_shell_op_cursor_vert_move+0x28>)
   12e92:	6940      	ldr	r0, [r0, #20]
   12e94:	bfb8      	it	lt
   12e96:	4252      	neglt	r2, r2
   12e98:	f00c bf72 	b.w	1fd80 <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'A' : 'B';
   12e9c:	2341      	movs	r3, #65	; 0x41
   12e9e:	e7f1      	b.n	12e84 <z_shell_op_cursor_vert_move+0x8>
}
   12ea0:	4770      	bx	lr
   12ea2:	bf00      	nop
   12ea4:	000253b8 	.word	0x000253b8

00012ea8 <z_shell_op_cursor_horiz_move>:

void z_shell_op_cursor_horiz_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'C' : 'D';
   12ea8:	1e0a      	subs	r2, r1, #0
   12eaa:	dc0d      	bgt.n	12ec8 <z_shell_op_cursor_horiz_move+0x20>

	if (delta == 0) {
   12eac:	d00e      	beq.n	12ecc <z_shell_op_cursor_horiz_move+0x24>
	char dir = delta > 0 ? 'C' : 'D';
   12eae:	2344      	movs	r3, #68	; 0x44

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
   12eb0:	6881      	ldr	r1, [r0, #8]
   12eb2:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260
   12eb6:	0689      	lsls	r1, r1, #26
   12eb8:	d508      	bpl.n	12ecc <z_shell_op_cursor_horiz_move+0x24>
   12eba:	2a00      	cmp	r2, #0
   12ebc:	4904      	ldr	r1, [pc, #16]	; (12ed0 <z_shell_op_cursor_horiz_move+0x28>)
   12ebe:	6940      	ldr	r0, [r0, #20]
   12ec0:	bfb8      	it	lt
   12ec2:	4252      	neglt	r2, r2
   12ec4:	f00c bf5c 	b.w	1fd80 <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'C' : 'D';
   12ec8:	2343      	movs	r3, #67	; 0x43
   12eca:	e7f1      	b.n	12eb0 <z_shell_op_cursor_horiz_move+0x8>
}
   12ecc:	4770      	bx	lr
   12ece:	bf00      	nop
   12ed0:	000253b8 	.word	0x000253b8

00012ed4 <z_shell_op_cond_next_line>:
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
}

void z_shell_op_cond_next_line(const struct shell *shell)
{
   12ed4:	b510      	push	{r4, lr}
   12ed6:	4604      	mov	r4, r0
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
   12ed8:	f00c ff73 	bl	1fdc2 <z_shell_cursor_in_empty_line>
   12edc:	b128      	cbz	r0, 12eea <z_shell_op_cond_next_line+0x16>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
   12ede:	6960      	ldr	r0, [r4, #20]
   12ee0:	4905      	ldr	r1, [pc, #20]	; (12ef8 <z_shell_op_cond_next_line+0x24>)
		z_cursor_next_line_move(shell);
	}
}
   12ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12ee6:	f00c bf4b 	b.w	1fd80 <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
   12eea:	f104 0008 	add.w	r0, r4, #8
   12eee:	f00c ff54 	bl	1fd9a <full_line_cmd.isra.0>
   12ef2:	2800      	cmp	r0, #0
   12ef4:	d1f3      	bne.n	12ede <z_shell_op_cond_next_line+0xa>
}
   12ef6:	bd10      	pop	{r4, pc}
   12ef8:	00024484 	.word	0x00024484

00012efc <z_shell_op_cursor_position_synchronize>:

void z_shell_op_cursor_position_synchronize(const struct shell *shell)
{
   12efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   12f00:	4606      	mov	r6, r0
{
   12f02:	4605      	mov	r5, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   12f04:	f856 4f08 	ldr.w	r4, [r6, #8]!
	bool last_line;

	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   12f08:	f104 0020 	add.w	r0, r4, #32
   12f0c:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
   12f0e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
   12f10:	f00c fd7f 	bl	1fa12 <z_shell_multiline_data_calc>
	last_line = (cons->cur_y == cons->cur_y_end);

	/* In case cursor reaches the bottom line of a terminal, it will
	 * be moved to the next line.
	 */
	if (full_line_cmd(shell)) {
   12f14:	4630      	mov	r0, r6
	last_line = (cons->cur_y == cons->cur_y_end);
   12f16:	f8b4 8024 	ldrh.w	r8, [r4, #36]	; 0x24
   12f1a:	8ce7      	ldrh	r7, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
   12f1c:	f00c ff3d 	bl	1fd9a <full_line_cmd.isra.0>
   12f20:	b118      	cbz	r0, 12f2a <z_shell_op_cursor_position_synchronize+0x2e>
   12f22:	490a      	ldr	r1, [pc, #40]	; (12f4c <z_shell_op_cursor_position_synchronize+0x50>)
   12f24:	6968      	ldr	r0, [r5, #20]
   12f26:	f00c ff2b 	bl	1fd80 <z_shell_raw_fprintf>
		z_cursor_next_line_move(shell);
	}

	if (last_line) {
   12f2a:	45b8      	cmp	r8, r7
   12f2c:	d107      	bne.n	12f3e <z_shell_op_cursor_position_synchronize+0x42>
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
							       cons->cur_x_end);
	} else {
		z_shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
   12f2e:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
   12f30:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
   12f32:	4628      	mov	r0, r5
   12f34:	1ac9      	subs	r1, r1, r3
	}
}
   12f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
   12f3a:	f7ff bfb5 	b.w	12ea8 <z_shell_op_cursor_horiz_move>
		z_shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
   12f3e:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
   12f40:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   12f42:	4628      	mov	r0, r5
   12f44:	1ac9      	subs	r1, r1, r3
   12f46:	f7ff ff99 	bl	12e7c <z_shell_op_cursor_vert_move>
   12f4a:	e7f0      	b.n	12f2e <z_shell_op_cursor_position_synchronize+0x32>
   12f4c:	00024484 	.word	0x00024484

00012f50 <z_shell_print_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void z_shell_print_cmd(const struct shell *shell)
{
	z_shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
   12f50:	6882      	ldr	r2, [r0, #8]
   12f52:	4902      	ldr	r1, [pc, #8]	; (12f5c <z_shell_print_cmd+0xc>)
   12f54:	6940      	ldr	r0, [r0, #20]
   12f56:	3242      	adds	r2, #66	; 0x42
   12f58:	f00c bf12 	b.w	1fd80 <z_shell_raw_fprintf>
   12f5c:	00024e7a 	.word	0x00024e7a

00012f60 <z_shell_vt100_color_set>:
{
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	if (color >= VT100_COLOR_END) {
   12f60:	2908      	cmp	r1, #8
{
   12f62:	460a      	mov	r2, r1
	if (color >= VT100_COLOR_END) {
   12f64:	d817      	bhi.n	12f96 <z_shell_vt100_color_set+0x36>
		return;
	}

	if (shell->ctx->vt100_ctx.col.col == color) {
   12f66:	6883      	ldr	r3, [r0, #8]
   12f68:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
   12f6c:	4291      	cmp	r1, r2
   12f6e:	d012      	beq.n	12f96 <z_shell_vt100_color_set+0x36>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;
   12f70:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	if (color != SHELL_NORMAL) {
   12f74:	6883      	ldr	r3, [r0, #8]
   12f76:	2a08      	cmp	r2, #8
	return sh->ctx->cfg.flags.use_vt100 == 1;
   12f78:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   12f7c:	d005      	beq.n	12f8a <z_shell_vt100_color_set+0x2a>
		Z_SHELL_VT100_CMD(shell, "\e[1;3%dm", color);
   12f7e:	0699      	lsls	r1, r3, #26
   12f80:	d509      	bpl.n	12f96 <z_shell_vt100_color_set+0x36>
   12f82:	4905      	ldr	r1, [pc, #20]	; (12f98 <z_shell_vt100_color_set+0x38>)
   12f84:	6940      	ldr	r0, [r0, #20]
   12f86:	f00c befb 	b.w	1fd80 <z_shell_raw_fprintf>
	} else {
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_MODESOFF);
   12f8a:	069b      	lsls	r3, r3, #26
   12f8c:	d503      	bpl.n	12f96 <z_shell_vt100_color_set+0x36>
   12f8e:	4903      	ldr	r1, [pc, #12]	; (12f9c <z_shell_vt100_color_set+0x3c>)
   12f90:	6940      	ldr	r0, [r0, #20]
   12f92:	f00c bef5 	b.w	1fd80 <z_shell_raw_fprintf>
	}
}
   12f96:	4770      	bx	lr
   12f98:	000253bf 	.word	0x000253bf
   12f9c:	00023729 	.word	0x00023729

00012fa0 <z_shell_vt100_colors_restore>:

void z_shell_vt100_colors_restore(const struct shell *shell,
				  const struct shell_vt100_colors *color)
{
   12fa0:	b538      	push	{r3, r4, r5, lr}
   12fa2:	460d      	mov	r5, r1
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	z_shell_vt100_color_set(shell, color->col);
   12fa4:	7809      	ldrb	r1, [r1, #0]
{
   12fa6:	4604      	mov	r4, r0
	z_shell_vt100_color_set(shell, color->col);
   12fa8:	f7ff ffda 	bl	12f60 <z_shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
   12fac:	786a      	ldrb	r2, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
   12fae:	2a07      	cmp	r2, #7
   12fb0:	d811      	bhi.n	12fd6 <z_shell_vt100_colors_restore+0x36>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
   12fb2:	68a3      	ldr	r3, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
   12fb4:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
   12fb8:	4291      	cmp	r1, r2
   12fba:	d00c      	beq.n	12fd6 <z_shell_vt100_colors_restore+0x36>
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
   12fbc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
   12fc0:	68a3      	ldr	r3, [r4, #8]
   12fc2:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   12fc6:	069b      	lsls	r3, r3, #26
   12fc8:	d505      	bpl.n	12fd6 <z_shell_vt100_colors_restore+0x36>
   12fca:	6960      	ldr	r0, [r4, #20]
   12fcc:	4902      	ldr	r1, [pc, #8]	; (12fd8 <z_shell_vt100_colors_restore+0x38>)
}
   12fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
   12fd2:	f00c bed5 	b.w	1fd80 <z_shell_raw_fprintf>
}
   12fd6:	bd38      	pop	{r3, r4, r5, pc}
   12fd8:	000253c8 	.word	0x000253c8

00012fdc <z_shell_op_word_remove>:
{
   12fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
   12fde:	6883      	ldr	r3, [r0, #8]
	if ((shell->ctx->cmd_buff_len == 0) ||
   12fe0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
   12fe2:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
   12fe4:	2a00      	cmp	r2, #0
   12fe6:	d04e      	beq.n	13086 <z_shell_op_word_remove+0xaa>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
   12fe8:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
	if ((shell->ctx->cmd_buff_len == 0) ||
   12fea:	2800      	cmp	r0, #0
   12fec:	d04b      	beq.n	13086 <z_shell_op_word_remove+0xaa>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
   12fee:	3041      	adds	r0, #65	; 0x41
   12ff0:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
   12ff2:	f103 0642 	add.w	r6, r3, #66	; 0x42
   12ff6:	4603      	mov	r3, r0
   12ff8:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
   12ffa:	42b3      	cmp	r3, r6
   12ffc:	b2a4      	uxth	r4, r4
   12ffe:	4619      	mov	r1, r3
   13000:	d30d      	bcc.n	1301e <z_shell_op_word_remove+0x42>
   13002:	f811 7901 	ldrb.w	r7, [r1], #-1
   13006:	2f20      	cmp	r7, #32
   13008:	d03b      	beq.n	13082 <z_shell_op_word_remove+0xa6>
   1300a:	4619      	mov	r1, r3
   1300c:	3b01      	subs	r3, #1
	while ((str >= str_start) && (*str != ' ')) {
   1300e:	7808      	ldrb	r0, [r1, #0]
   13010:	2820      	cmp	r0, #32
   13012:	d004      	beq.n	1301e <z_shell_op_word_remove+0x42>
		++chars_to_delete;
   13014:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
   13016:	429e      	cmp	r6, r3
		++chars_to_delete;
   13018:	b2a4      	uxth	r4, r4
		--str;
   1301a:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
   1301c:	d9f5      	bls.n	1300a <z_shell_op_word_remove+0x2e>
	memmove(str + 1, str + 1 + chars_to_delete,
   1301e:	1c63      	adds	r3, r4, #1
   13020:	1c4e      	adds	r6, r1, #1
   13022:	1b12      	subs	r2, r2, r4
   13024:	4419      	add	r1, r3
   13026:	4630      	mov	r0, r6
   13028:	f00d fea0 	bl	20d6c <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
   1302c:	68a9      	ldr	r1, [r5, #8]
   1302e:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
   13030:	1b12      	subs	r2, r2, r4
   13032:	b292      	uxth	r2, r2
   13034:	878a      	strh	r2, [r1, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   13036:	440a      	add	r2, r1
   13038:	2300      	movs	r3, #0
	z_shell_op_cursor_move(shell, -chars_to_delete);
   1303a:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   1303c:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
	z_shell_op_cursor_move(shell, -chars_to_delete);
   13040:	b209      	sxth	r1, r1
   13042:	4628      	mov	r0, r5
   13044:	f00c fed1 	bl	1fdea <z_shell_op_cursor_move>
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
   13048:	68ab      	ldr	r3, [r5, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
   1304a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
   1304e:	069a      	lsls	r2, r3, #26
   13050:	d503      	bpl.n	1305a <z_shell_op_word_remove+0x7e>
   13052:	490d      	ldr	r1, [pc, #52]	; (13088 <z_shell_op_word_remove+0xac>)
   13054:	6968      	ldr	r0, [r5, #20]
   13056:	f00c fe93 	bl	1fd80 <z_shell_raw_fprintf>
	z_shell_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
   1305a:	4633      	mov	r3, r6
   1305c:	4a0b      	ldr	r2, [pc, #44]	; (1308c <z_shell_op_word_remove+0xb0>)
   1305e:	2108      	movs	r1, #8
   13060:	4628      	mov	r0, r5
   13062:	f00c ffd0 	bl	20006 <z_shell_fprintf>
	z_clear_eos(shell);
   13066:	4628      	mov	r0, r5
   13068:	f7ff fefc 	bl	12e64 <z_clear_eos>
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
   1306c:	68ab      	ldr	r3, [r5, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
   1306e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
   13072:	069b      	lsls	r3, r3, #26
   13074:	d507      	bpl.n	13086 <z_shell_op_word_remove+0xaa>
   13076:	6968      	ldr	r0, [r5, #20]
   13078:	4905      	ldr	r1, [pc, #20]	; (13090 <z_shell_op_word_remove+0xb4>)
}
   1307a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1307e:	f00c be7f 	b.w	1fd80 <z_shell_raw_fprintf>
   13082:	460b      	mov	r3, r1
   13084:	e7b8      	b.n	12ff8 <z_shell_op_word_remove+0x1c>
   13086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13088:	0002372e 	.word	0x0002372e
   1308c:	00024e7a 	.word	0x00024e7a
   13090:	00023732 	.word	0x00023732

00013094 <reprint_from_cursor>:
{
   13094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13098:	4604      	mov	r4, r0
   1309a:	460d      	mov	r5, r1
	if (data_removed) {
   1309c:	4617      	mov	r7, r2
   1309e:	b10a      	cbz	r2, 130a4 <reprint_from_cursor+0x10>
		z_clear_eos(shell);
   130a0:	f7ff fee0 	bl	12e64 <z_clear_eos>
	if (z_flag_obscure_get(shell)) {
   130a4:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.obscure == 1;
   130a6:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
   130aa:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
   130ac:	0752      	lsls	r2, r2, #29
   130ae:	f100 0042 	add.w	r0, r0, #66	; 0x42
   130b2:	4403      	add	r3, r0
   130b4:	d521      	bpl.n	130fa <reprint_from_cursor+0x66>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
   130b6:	4618      	mov	r0, r3
   130b8:	f00d fe1d 	bl	20cf6 <strlen>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
   130bc:	f8df 8050 	ldr.w	r8, [pc, #80]	; 13110 <reprint_from_cursor+0x7c>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
   130c0:	4606      	mov	r6, r0
		while (len--) {
   130c2:	3e01      	subs	r6, #1
   130c4:	d214      	bcs.n	130f0 <reprint_from_cursor+0x5c>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
   130c6:	4620      	mov	r0, r4
   130c8:	f850 3f08 	ldr.w	r3, [r0, #8]!
   130cc:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   130ce:	87da      	strh	r2, [r3, #62]	; 0x3e
	if (full_line_cmd(shell)) {
   130d0:	f00c fe63 	bl	1fd9a <full_line_cmd.isra.0>
   130d4:	b128      	cbz	r0, 130e2 <reprint_from_cursor+0x4e>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
   130d6:	b107      	cbz	r7, 130da <reprint_from_cursor+0x46>
   130d8:	b11d      	cbz	r5, 130e2 <reprint_from_cursor+0x4e>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
   130da:	490b      	ldr	r1, [pc, #44]	; (13108 <reprint_from_cursor+0x74>)
   130dc:	6960      	ldr	r0, [r4, #20]
   130de:	f00c fe4f 	bl	1fd80 <z_shell_raw_fprintf>
	z_shell_op_cursor_move(shell, -diff);
   130e2:	4269      	negs	r1, r5
   130e4:	4620      	mov	r0, r4
   130e6:	b209      	sxth	r1, r1
}
   130e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_shell_op_cursor_move(shell, -diff);
   130ec:	f00c be7d 	b.w	1fdea <z_shell_op_cursor_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
   130f0:	6960      	ldr	r0, [r4, #20]
   130f2:	4641      	mov	r1, r8
   130f4:	f00c fe44 	bl	1fd80 <z_shell_raw_fprintf>
   130f8:	e7e3      	b.n	130c2 <reprint_from_cursor+0x2e>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s",
   130fa:	4a04      	ldr	r2, [pc, #16]	; (1310c <reprint_from_cursor+0x78>)
   130fc:	2108      	movs	r1, #8
   130fe:	4620      	mov	r0, r4
   13100:	f00c ff81 	bl	20006 <z_shell_fprintf>
   13104:	e7df      	b.n	130c6 <reprint_from_cursor+0x32>
   13106:	bf00      	nop
   13108:	00024484 	.word	0x00024484
   1310c:	00024e7a 	.word	0x00024e7a
   13110:	00025d74 	.word	0x00025d74

00013114 <z_shell_op_char_insert>:
{
   13114:	b513      	push	{r0, r1, r4, lr}
	if (z_flag_insert_mode_get(shell) &&
   13116:	6883      	ldr	r3, [r0, #8]
{
   13118:	f88d 1007 	strb.w	r1, [sp, #7]
	return sh->ctx->cfg.flags.insert_mode == 1;
   1311c:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
   13120:	4604      	mov	r4, r0
	if (z_flag_insert_mode_get(shell) &&
   13122:	07d0      	lsls	r0, r2, #31
   13124:	d523      	bpl.n	1316e <z_shell_op_char_insert+0x5a>
	    (shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
   13126:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
	if (z_flag_insert_mode_get(shell) &&
   13128:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   1312a:	428a      	cmp	r2, r1
   1312c:	d01f      	beq.n	1316e <z_shell_op_char_insert+0x5a>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
   1312e:	1c48      	adds	r0, r1, #1
   13130:	87d8      	strh	r0, [r3, #62]	; 0x3e
   13132:	440b      	add	r3, r1
		char_replace(shell, data);
   13134:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
   13138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	if (!z_flag_echo_get(shell)) {
   1313c:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.echo == 1;
   1313e:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
   13142:	0789      	lsls	r1, r1, #30
   13144:	d511      	bpl.n	1316a <z_shell_op_char_insert+0x56>
	return sh->ctx->cfg.flags.obscure == 1;
   13146:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
   1314a:	6960      	ldr	r0, [r4, #20]
   1314c:	490b      	ldr	r1, [pc, #44]	; (1317c <z_shell_op_char_insert+0x68>)
		data = '*';
   1314e:	f013 0f04 	tst.w	r3, #4
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
   13152:	bf18      	it	ne
   13154:	222a      	movne	r2, #42	; 0x2a
   13156:	f00c fe13 	bl	1fd80 <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(shell)) {
   1315a:	4620      	mov	r0, r4
   1315c:	f00c fe31 	bl	1fdc2 <z_shell_cursor_in_empty_line>
   13160:	b118      	cbz	r0, 1316a <z_shell_op_char_insert+0x56>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
   13162:	4907      	ldr	r1, [pc, #28]	; (13180 <z_shell_op_char_insert+0x6c>)
   13164:	6960      	ldr	r0, [r4, #20]
   13166:	f00c fe0b 	bl	1fd80 <z_shell_raw_fprintf>
}
   1316a:	b002      	add	sp, #8
   1316c:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
   1316e:	2201      	movs	r2, #1
   13170:	f10d 0107 	add.w	r1, sp, #7
   13174:	4620      	mov	r0, r4
   13176:	f00c ff53 	bl	20020 <data_insert>
}
   1317a:	e7f6      	b.n	1316a <z_shell_op_char_insert+0x56>
   1317c:	000253bc 	.word	0x000253bc
   13180:	00024484 	.word	0x00024484

00013184 <z_shell_print_prompt_and_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
   13184:	6883      	ldr	r3, [r0, #8]
   13186:	4a0a      	ldr	r2, [pc, #40]	; (131b0 <z_shell_print_prompt_and_cmd+0x2c>)
   13188:	681b      	ldr	r3, [r3, #0]
{
   1318a:	b510      	push	{r4, lr}
   1318c:	4604      	mov	r4, r0
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
   1318e:	2102      	movs	r1, #2
   13190:	f00c ff39 	bl	20006 <z_shell_fprintf>
	if (z_flag_echo_get(shell)) {
   13194:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.echo == 1;
   13196:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   1319a:	079b      	lsls	r3, r3, #30
   1319c:	d507      	bpl.n	131ae <z_shell_print_prompt_and_cmd+0x2a>
		z_shell_print_cmd(shell);
   1319e:	4620      	mov	r0, r4
   131a0:	f7ff fed6 	bl	12f50 <z_shell_print_cmd>
		z_shell_op_cursor_position_synchronize(shell);
   131a4:	4620      	mov	r0, r4
}
   131a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_op_cursor_position_synchronize(shell);
   131aa:	f7ff bea7 	b.w	12efc <z_shell_op_cursor_position_synchronize>
}
   131ae:	bd10      	pop	{r4, pc}
   131b0:	00024e7a 	.word	0x00024e7a

000131b4 <formatted_text_print.constprop.0>:
 *   shell		Pointer to shell instance.
 *   p_str		Pointer to string to be printed.
 *   terminal_offset	Requested left margin.
 *   offset_first_line	Add margin to the first printed line.
 */
static void formatted_text_print(const struct shell *shell, const char *str,
   131b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   131b8:	4604      	mov	r4, r0
   131ba:	4690      	mov	r8, r2
				 size_t terminal_offset, bool offset_first_line)
{
	size_t offset = 0;
	size_t length;

	if (str == NULL) {
   131bc:	460e      	mov	r6, r1
   131be:	2900      	cmp	r1, #0
   131c0:	d06e      	beq.n	132a0 <formatted_text_print.constprop.0+0xec>
   131c2:	2500      	movs	r5, #0
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
	}


	/* Skipping whitespace. */
	while (isspace((int) *(str + offset))) {
   131c4:	5d73      	ldrb	r3, [r6, r5]
   131c6:	2b20      	cmp	r3, #32
   131c8:	d025      	beq.n	13216 <formatted_text_print.constprop.0+0x62>
   131ca:	3b09      	subs	r3, #9
   131cc:	2b04      	cmp	r3, #4
   131ce:	d922      	bls.n	13216 <formatted_text_print.constprop.0+0x62>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
   131d0:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 132a4 <formatted_text_print.constprop.0+0xf0>
	return str == NULL ? 0U : (uint16_t)strlen(str);
   131d4:	4630      	mov	r0, r6
   131d6:	f00d fd8e 	bl	20cf6 <strlen>
		size_t idx = 0;

		length = z_shell_strlen(str) - offset;

		if (length <=
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   131da:	68a3      	ldr	r3, [r4, #8]
   131dc:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
		length = z_shell_strlen(str) - offset;
   131de:	b280      	uxth	r0, r0
   131e0:	1b40      	subs	r0, r0, r5
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   131e2:	eba1 0308 	sub.w	r3, r1, r8
		if (length <=
   131e6:	4298      	cmp	r0, r3
   131e8:	eb06 0a05 	add.w	sl, r6, r5
   131ec:	d915      	bls.n	1321a <formatted_text_print.constprop.0+0x66>
   131ee:	4650      	mov	r0, sl
		size_t idx = 0;
   131f0:	2700      	movs	r7, #0
		length = shell->ctx->vt100_ctx.cons.terminal_wid
				- terminal_offset;

		while (true) {
			/* Determining line break. */
			if (isspace((int) (*(str + offset + idx)))) {
   131f2:	f810 2b01 	ldrb.w	r2, [r0], #1
   131f6:	2a20      	cmp	r2, #32
   131f8:	d006      	beq.n	13208 <formatted_text_print.constprop.0+0x54>
   131fa:	f1a2 0c09 	sub.w	ip, r2, #9
   131fe:	f1bc 0f04 	cmp.w	ip, #4
   13202:	d802      	bhi.n	1320a <formatted_text_print.constprop.0+0x56>
				length = idx;
				if (*(str + offset + idx) == '\n') {
   13204:	2a0a      	cmp	r2, #10
   13206:	d031      	beq.n	1326c <formatted_text_print.constprop.0+0xb8>
   13208:	463b      	mov	r3, r7
					break;
				}
			}

			if ((idx + terminal_offset) >=
   1320a:	eb08 0207 	add.w	r2, r8, r7
   1320e:	4291      	cmp	r1, r2
   13210:	d92b      	bls.n	1326a <formatted_text_print.constprop.0+0xb6>
			    shell->ctx->vt100_ctx.cons.terminal_wid) {
				/* End of line reached. */
				break;
			}

			++idx;
   13212:	3701      	adds	r7, #1
			if (isspace((int) (*(str + offset + idx)))) {
   13214:	e7ed      	b.n	131f2 <formatted_text_print.constprop.0+0x3e>
		++offset;
   13216:	3501      	adds	r5, #1
   13218:	e7d4      	b.n	131c4 <formatted_text_print.constprop.0+0x10>
   1321a:	4653      	mov	r3, sl
			for (idx = 0; idx < length; idx++) {
   1321c:	2700      	movs	r7, #0
   1321e:	42b8      	cmp	r0, r7
   13220:	d017      	beq.n	13252 <formatted_text_print.constprop.0+0x9e>
				if (*(str + offset + idx) == '\n') {
   13222:	f813 2b01 	ldrb.w	r2, [r3], #1
   13226:	2a0a      	cmp	r2, #10
   13228:	eb05 0907 	add.w	r9, r5, r7
   1322c:	d11b      	bne.n	13266 <formatted_text_print.constprop.0+0xb2>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
   1322e:	6960      	ldr	r0, [r4, #20]
   13230:	f00c fb9d 	bl	1f96e <z_shell_fprintf_buffer_flush>
					z_shell_write(shell, str + offset, idx);
   13234:	463a      	mov	r2, r7
   13236:	4651      	mov	r1, sl
   13238:	4620      	mov	r0, r4
   1323a:	f00c fe75 	bl	1ff28 <z_shell_write>
   1323e:	4919      	ldr	r1, [pc, #100]	; (132a4 <formatted_text_print.constprop.0+0xf0>)
   13240:	6960      	ldr	r0, [r4, #20]
   13242:	f00d f8a9 	bl	20398 <z_shell_raw_fprintf>
					z_shell_op_cursor_horiz_move(shell,
   13246:	4641      	mov	r1, r8
   13248:	4620      	mov	r0, r4
					offset += idx + 1;
   1324a:	f109 0501 	add.w	r5, r9, #1
					z_shell_op_cursor_horiz_move(shell,
   1324e:	f7ff fe2b 	bl	12ea8 <z_shell_op_cursor_horiz_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, str + offset);
   13252:	6960      	ldr	r0, [r4, #20]
   13254:	1971      	adds	r1, r6, r5
   13256:	f00d f89f 	bl	20398 <z_shell_raw_fprintf>
   1325a:	6960      	ldr	r0, [r4, #20]
   1325c:	4911      	ldr	r1, [pc, #68]	; (132a4 <formatted_text_print.constprop.0+0xf0>)
		z_cursor_next_line_move(shell);
		z_shell_op_cursor_horiz_move(shell, terminal_offset);

	}
	z_cursor_next_line_move(shell);
}
   1325e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13262:	f00d b899 	b.w	20398 <z_shell_raw_fprintf>
			for (idx = 0; idx < length; idx++) {
   13266:	3701      	adds	r7, #1
   13268:	e7d9      	b.n	1321e <formatted_text_print.constprop.0+0x6a>
   1326a:	461f      	mov	r7, r3
   1326c:	6960      	ldr	r0, [r4, #20]
   1326e:	f00c fb7e 	bl	1f96e <z_shell_fprintf_buffer_flush>
		z_shell_write(shell, str + offset, length);
   13272:	463a      	mov	r2, r7
   13274:	4651      	mov	r1, sl
   13276:	4620      	mov	r0, r4
   13278:	f00c fe56 	bl	1ff28 <z_shell_write>
		offset += length;
   1327c:	443d      	add	r5, r7
		while (isspace((int) (*(str + offset)))) {
   1327e:	5d73      	ldrb	r3, [r6, r5]
   13280:	2b20      	cmp	r3, #32
   13282:	d00b      	beq.n	1329c <formatted_text_print.constprop.0+0xe8>
   13284:	3b09      	subs	r3, #9
   13286:	2b04      	cmp	r3, #4
   13288:	d908      	bls.n	1329c <formatted_text_print.constprop.0+0xe8>
   1328a:	6960      	ldr	r0, [r4, #20]
   1328c:	4649      	mov	r1, r9
   1328e:	f00d f883 	bl	20398 <z_shell_raw_fprintf>
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
   13292:	4641      	mov	r1, r8
   13294:	4620      	mov	r0, r4
   13296:	f7ff fe07 	bl	12ea8 <z_shell_op_cursor_horiz_move>
	while (true) {
   1329a:	e79b      	b.n	131d4 <formatted_text_print.constprop.0+0x20>
			++offset;
   1329c:	3501      	adds	r5, #1
   1329e:	e7ee      	b.n	1327e <formatted_text_print.constprop.0+0xca>
}
   132a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   132a4:	00024484 	.word	0x00024484

000132a8 <z_shell_help_subcmd_print>:
 * help string
 */
void z_shell_help_subcmd_print(const struct shell *shell,
			       const struct shell_static_entry *parent,
			       const char *description)
{
   132a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132ac:	460e      	mov	r6, r1
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry dloc;
	uint16_t longest = 0U;
	size_t idx = 0;
   132ae:	2100      	movs	r1, #0
{
   132b0:	b08d      	sub	sp, #52	; 0x34
   132b2:	4604      	mov	r4, r0
   132b4:	4617      	mov	r7, r2
	uint16_t longest = 0U;
   132b6:	460d      	mov	r5, r1

	/* Searching for the longest subcommand to print. */
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   132b8:	aa07      	add	r2, sp, #28
   132ba:	4630      	mov	r0, r6
   132bc:	f101 0801 	add.w	r8, r1, #1
   132c0:	f7ff fdaa 	bl	12e18 <z_shell_cmd_get>
   132c4:	b9b8      	cbnz	r0, 132f6 <z_shell_help_subcmd_print+0x4e>
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
	}

	/* No help to print */
	if (longest == 0) {
   132c6:	b19d      	cbz	r5, 132f0 <z_shell_help_subcmd_print+0x48>
		return;
	}

	if (description != NULL) {
   132c8:	b127      	cbz	r7, 132d4 <z_shell_help_subcmd_print+0x2c>
		z_shell_fprintf(shell, SHELL_NORMAL, description);
   132ca:	463a      	mov	r2, r7
   132cc:	2108      	movs	r1, #8
   132ce:	4620      	mov	r0, r4
   132d0:	f00c fe99 	bl	20006 <z_shell_fprintf>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   132d4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 13358 <z_shell_help_subcmd_print+0xb0>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:", tabulator,
   132d8:	f8df a080 	ldr.w	sl, [pc, #128]	; 1335c <z_shell_help_subcmd_print+0xb4>
   132dc:	f8df b080 	ldr.w	fp, [pc, #128]	; 13360 <z_shell_help_subcmd_print+0xb8>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   132e0:	2100      	movs	r1, #0
	}

	/* Printing subcommands and help string (if exists). */
	idx = 0;

	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   132e2:	1c4b      	adds	r3, r1, #1
   132e4:	aa07      	add	r2, sp, #28
   132e6:	4630      	mov	r0, r6
   132e8:	9304      	str	r3, [sp, #16]
   132ea:	f7ff fd95 	bl	12e18 <z_shell_cmd_get>
   132ee:	b960      	cbnz	r0, 1330a <z_shell_help_subcmd_print+0x62>
		help_item_print(shell, entry->syntax, longest, entry->help);
	}
}
   132f0:	b00d      	add	sp, #52	; 0x34
   132f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
   132f6:	6800      	ldr	r0, [r0, #0]
	return str == NULL ? 0U : (uint16_t)strlen(str);
   132f8:	b110      	cbz	r0, 13300 <z_shell_help_subcmd_print+0x58>
   132fa:	f00d fcfc 	bl	20cf6 <strlen>
   132fe:	b280      	uxth	r0, r0
   13300:	4285      	cmp	r5, r0
   13302:	bf38      	it	cc
   13304:	4605      	movcc	r5, r0
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   13306:	4641      	mov	r1, r8
   13308:	e7d6      	b.n	132b8 <z_shell_help_subcmd_print+0x10>
		help_item_print(shell, entry->syntax, longest, entry->help);
   1330a:	6803      	ldr	r3, [r0, #0]
   1330c:	f8d0 9004 	ldr.w	r9, [r0, #4]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   13310:	4811      	ldr	r0, [pc, #68]	; (13358 <z_shell_help_subcmd_print+0xb0>)
		help_item_print(shell, entry->syntax, longest, entry->help);
   13312:	9305      	str	r3, [sp, #20]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   13314:	f00d fcef 	bl	20cf6 <strlen>
	if ((item_name == NULL) || (item_name[0] == '\0')) {
   13318:	9b05      	ldr	r3, [sp, #20]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   1331a:	4607      	mov	r7, r0
	if ((item_name == NULL) || (item_name[0] == '\0')) {
   1331c:	b18b      	cbz	r3, 13342 <z_shell_help_subcmd_print+0x9a>
   1331e:	781a      	ldrb	r2, [r3, #0]
   13320:	b17a      	cbz	r2, 13342 <z_shell_help_subcmd_print+0x9a>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:", tabulator,
   13322:	e9cd 3801 	strd	r3, r8, [sp, #4]
   13326:	9500      	str	r5, [sp, #0]
   13328:	4643      	mov	r3, r8
   1332a:	4652      	mov	r2, sl
   1332c:	2108      	movs	r1, #8
   1332e:	4620      	mov	r0, r4
   13330:	f00c fe69 	bl	20006 <z_shell_fprintf>
	if (item_help == NULL) {
   13334:	f1b9 0f00 	cmp.w	r9, #0
   13338:	d105      	bne.n	13346 <z_shell_help_subcmd_print+0x9e>
   1333a:	6960      	ldr	r0, [r4, #20]
   1333c:	4659      	mov	r1, fp
   1333e:	f00d f82b 	bl	20398 <z_shell_raw_fprintf>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   13342:	9904      	ldr	r1, [sp, #16]
   13344:	e7cd      	b.n	132e2 <z_shell_help_subcmd_print+0x3a>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   13346:	1c6a      	adds	r2, r5, #1
   13348:	eb02 0247 	add.w	r2, r2, r7, lsl #1
	formatted_text_print(shell, item_help, offset, false);
   1334c:	b292      	uxth	r2, r2
   1334e:	4649      	mov	r1, r9
   13350:	4620      	mov	r0, r4
   13352:	f7ff ff2f 	bl	131b4 <formatted_text_print.constprop.0>
   13356:	e7f4      	b.n	13342 <z_shell_help_subcmd_print+0x9a>
   13358:	000253e9 	.word	0x000253e9
   1335c:	000253d1 	.word	0x000253d1
   13360:	00024484 	.word	0x00024484

00013364 <z_shell_help_cmd_print>:

void z_shell_help_cmd_print(const struct shell *shell,
			    const struct shell_static_entry *cmd)
{
   13364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13366:	4606      	mov	r6, r0
	static const char cmd_sep[] = " - "; /* commands separator */
	uint16_t field_width;

	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
   13368:	6808      	ldr	r0, [r1, #0]
{
   1336a:	460d      	mov	r5, r1
   1336c:	b1b8      	cbz	r0, 1339e <z_shell_help_cmd_print+0x3a>
   1336e:	f00d fcc2 	bl	20cf6 <strlen>
   13372:	b284      	uxth	r4, r0
   13374:	4f0b      	ldr	r7, [pc, #44]	; (133a4 <z_shell_help_cmd_print+0x40>)
   13376:	4638      	mov	r0, r7
   13378:	f00d fcbd 	bl	20cf6 <strlen>

	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
   1337c:	682b      	ldr	r3, [r5, #0]
   1337e:	4a0a      	ldr	r2, [pc, #40]	; (133a8 <z_shell_help_cmd_print+0x44>)
   13380:	9700      	str	r7, [sp, #0]
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
   13382:	4404      	add	r4, r0
	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
   13384:	2108      	movs	r1, #8
   13386:	4630      	mov	r0, r6
   13388:	f00c fe3d 	bl	20006 <z_shell_fprintf>
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
   1338c:	b2a4      	uxth	r4, r4

	formatted_text_print(shell, cmd->help, field_width, false);
   1338e:	6869      	ldr	r1, [r5, #4]
   13390:	4622      	mov	r2, r4
   13392:	4630      	mov	r0, r6
}
   13394:	b003      	add	sp, #12
   13396:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	formatted_text_print(shell, cmd->help, field_width, false);
   1339a:	f7ff bf0b 	b.w	131b4 <formatted_text_print.constprop.0>
   1339e:	4604      	mov	r4, r0
   133a0:	e7e8      	b.n	13374 <z_shell_help_cmd_print+0x10>
   133a2:	bf00      	nop
   133a4:	000253e5 	.word	0x000253e5
   133a8:	000251e2 	.word	0x000251e2

000133ac <z_shell_help_request>:

bool z_shell_help_request(const char *str)
{
   133ac:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP_OPT_PARSE)) {
		return false;
	}

	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
   133ae:	4907      	ldr	r1, [pc, #28]	; (133cc <z_shell_help_request+0x20>)
{
   133b0:	4604      	mov	r4, r0
	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
   133b2:	f00d fcb0 	bl	20d16 <strcmp>
   133b6:	b138      	cbz	r0, 133c8 <z_shell_help_request+0x1c>
   133b8:	4905      	ldr	r1, [pc, #20]	; (133d0 <z_shell_help_request+0x24>)
   133ba:	4620      	mov	r0, r4
   133bc:	f00d fcab 	bl	20d16 <strcmp>
   133c0:	fab0 f080 	clz	r0, r0
   133c4:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   133c6:	bd10      	pop	{r4, pc}
		return true;
   133c8:	2001      	movs	r0, #1
   133ca:	e7fc      	b.n	133c6 <z_shell_help_request+0x1a>
   133cc:	000253db 	.word	0x000253db
   133d0:	000253de 	.word	0x000253de

000133d4 <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
   133d4:	b510      	push	{r4, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
   133d6:	6883      	ldr	r3, [r0, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
   133d8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   133dc:	069b      	lsls	r3, r3, #26
{
   133de:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
   133e0:	d503      	bpl.n	133ea <cmd_resize_default+0x16>
   133e2:	4904      	ldr	r1, [pc, #16]	; (133f4 <cmd_resize_default+0x20>)
   133e4:	6940      	ldr	r0, [r0, #20]
   133e6:	f00c ffe8 	bl	203ba <z_shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid = SHELL_DEFAULT_TERMINAL_WIDTH;
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
   133ea:	68a3      	ldr	r3, [r4, #8]
   133ec:	4a02      	ldr	r2, [pc, #8]	; (133f8 <cmd_resize_default+0x24>)
   133ee:	629a      	str	r2, [r3, #40]	; 0x28

	return 0;
}
   133f0:	2000      	movs	r0, #0
   133f2:	bd10      	pop	{r4, pc}
   133f4:	00023736 	.word	0x00023736
   133f8:	00500018 	.word	0x00500018

000133fc <cmd_shell_stats_show>:
{
   133fc:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %lu", shell->stats->log_lost_cnt);
   133fe:	6983      	ldr	r3, [r0, #24]
   13400:	4a03      	ldr	r2, [pc, #12]	; (13410 <cmd_shell_stats_show+0x14>)
   13402:	681b      	ldr	r3, [r3, #0]
   13404:	2108      	movs	r1, #8
   13406:	f00c faa2 	bl	1f94e <shell_fprintf>
}
   1340a:	2000      	movs	r0, #0
   1340c:	bd08      	pop	{r3, pc}
   1340e:	bf00      	nop
   13410:	000253ec 	.word	0x000253ec

00013414 <cmd_history>:
{
   13414:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			shell_print(shell, "[%3d] %s",
   13416:	4e0f      	ldr	r6, [pc, #60]	; (13454 <cmd_history+0x40>)
{
   13418:	4604      	mov	r4, r0
   1341a:	2500      	movs	r5, #0
				    shell->ctx->temp_buff, &len);
   1341c:	68a2      	ldr	r2, [r4, #8]
		z_shell_history_get(shell->history, true,
   1341e:	68e0      	ldr	r0, [r4, #12]
   13420:	f10d 030e 	add.w	r3, sp, #14
   13424:	f502 72a1 	add.w	r2, r2, #322	; 0x142
   13428:	2101      	movs	r1, #1
   1342a:	f00d f84e 	bl	204ca <z_shell_history_get>
		if (len) {
   1342e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   13432:	68a3      	ldr	r3, [r4, #8]
   13434:	b150      	cbz	r0, 1344c <cmd_history+0x38>
			shell_print(shell, "[%3d] %s",
   13436:	f503 73a1 	add.w	r3, r3, #322	; 0x142
   1343a:	9300      	str	r3, [sp, #0]
   1343c:	4632      	mov	r2, r6
   1343e:	462b      	mov	r3, r5
   13440:	2108      	movs	r1, #8
   13442:	4620      	mov	r0, r4
   13444:	f00c fa83 	bl	1f94e <shell_fprintf>
	while (1) {
   13448:	3501      	adds	r5, #1
		z_shell_history_get(shell->history, true,
   1344a:	e7e7      	b.n	1341c <cmd_history+0x8>
	shell->ctx->temp_buff[0] = '\0';
   1344c:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
}
   13450:	b004      	add	sp, #16
   13452:	bd70      	pop	{r4, r5, r6, pc}
   13454:	000253fc 	.word	0x000253fc

00013458 <cmd_clear>:
{
   13458:	b510      	push	{r4, lr}
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
   1345a:	6883      	ldr	r3, [r0, #8]
   1345c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   13460:	069a      	lsls	r2, r3, #26
{
   13462:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
   13464:	d503      	bpl.n	1346e <cmd_clear+0x16>
   13466:	4907      	ldr	r1, [pc, #28]	; (13484 <cmd_clear+0x2c>)
   13468:	6940      	ldr	r0, [r0, #20]
   1346a:	f00c ffa6 	bl	203ba <z_shell_raw_fprintf>
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
   1346e:	68a3      	ldr	r3, [r4, #8]
   13470:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   13474:	069b      	lsls	r3, r3, #26
   13476:	d503      	bpl.n	13480 <cmd_clear+0x28>
   13478:	4903      	ldr	r1, [pc, #12]	; (13488 <cmd_clear+0x30>)
   1347a:	6960      	ldr	r0, [r4, #20]
   1347c:	f00c ff9d 	bl	203ba <z_shell_raw_fprintf>
}
   13480:	2000      	movs	r0, #0
   13482:	bd10      	pop	{r4, pc}
   13484:	0002373d 	.word	0x0002373d
   13488:	00023742 	.word	0x00023742

0001348c <cmd_echo>:
	if (argc == 2) {
   1348c:	2902      	cmp	r1, #2
{
   1348e:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
   13490:	d10d      	bne.n	134ae <cmd_echo+0x22>
		shell_error(shell, "%s:%s%s", argv[0],
   13492:	6853      	ldr	r3, [r2, #4]
   13494:	9301      	str	r3, [sp, #4]
   13496:	4b0e      	ldr	r3, [pc, #56]	; (134d0 <cmd_echo+0x44>)
   13498:	9300      	str	r3, [sp, #0]
   1349a:	6813      	ldr	r3, [r2, #0]
   1349c:	4a0d      	ldr	r2, [pc, #52]	; (134d4 <cmd_echo+0x48>)
   1349e:	2101      	movs	r1, #1
   134a0:	f00c fa55 	bl	1f94e <shell_fprintf>
   134a4:	f06f 0015 	mvn.w	r0, #21
}
   134a8:	b003      	add	sp, #12
   134aa:	f85d fb04 	ldr.w	pc, [sp], #4
	shell_print(shell, "Echo status: %s",
   134ae:	6883      	ldr	r3, [r0, #8]
   134b0:	4a09      	ldr	r2, [pc, #36]	; (134d8 <cmd_echo+0x4c>)
	return sh->ctx->cfg.flags.echo == 1;
   134b2:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   134b6:	f013 0f02 	tst.w	r3, #2
   134ba:	f04f 0108 	mov.w	r1, #8
   134be:	4b07      	ldr	r3, [pc, #28]	; (134dc <cmd_echo+0x50>)
   134c0:	bf18      	it	ne
   134c2:	4613      	movne	r3, r2
   134c4:	4a06      	ldr	r2, [pc, #24]	; (134e0 <cmd_echo+0x54>)
   134c6:	f00c fa42 	bl	1f94e <shell_fprintf>
	return 0;
   134ca:	2000      	movs	r0, #0
   134cc:	e7ec      	b.n	134a8 <cmd_echo+0x1c>
   134ce:	bf00      	nop
   134d0:	00025413 	.word	0x00025413
   134d4:	0002540a 	.word	0x0002540a
   134d8:	00024e13 	.word	0x00024e13
   134dc:	00025406 	.word	0x00025406
   134e0:	00025428 	.word	0x00025428

000134e4 <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
   134e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
   134e6:	2901      	cmp	r1, #1
{
   134e8:	b085      	sub	sp, #20
   134ea:	4604      	mov	r4, r0
	if (argc != 1) {
   134ec:	d00d      	beq.n	1350a <cmd_resize+0x26>
		shell_error(shell, "%s:%s%s", argv[0],
   134ee:	6853      	ldr	r3, [r2, #4]
   134f0:	9301      	str	r3, [sp, #4]
   134f2:	4b57      	ldr	r3, [pc, #348]	; (13650 <cmd_resize+0x16c>)
   134f4:	9300      	str	r3, [sp, #0]
   134f6:	6813      	ldr	r3, [r2, #0]
   134f8:	4a56      	ldr	r2, [pc, #344]	; (13654 <cmd_resize+0x170>)
   134fa:	2101      	movs	r1, #1
   134fc:	f00c fa27 	bl	1f94e <shell_fprintf>
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
   13500:	f06f 0515 	mvn.w	r5, #21
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
   13504:	4628      	mov	r0, r5
   13506:	b005      	add	sp, #20
   13508:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
   1350a:	6883      	ldr	r3, [r0, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
   1350c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
   13510:	069a      	lsls	r2, r3, #26
   13512:	d503      	bpl.n	1351c <cmd_resize+0x38>
   13514:	4950      	ldr	r1, [pc, #320]	; (13658 <cmd_resize+0x174>)
   13516:	6940      	ldr	r0, [r0, #20]
   13518:	f00c ff4f 	bl	203ba <z_shell_raw_fprintf>
	z_shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
   1351c:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
   13520:	4620      	mov	r0, r4
   13522:	f7ff fcab 	bl	12e7c <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
   13526:	21fa      	movs	r1, #250	; 0xfa
   13528:	4620      	mov	r0, r4
   1352a:	f7ff fcbd 	bl	12ea8 <z_shell_op_cursor_horiz_move>
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
   1352e:	68a0      	ldr	r0, [r4, #8]
	char c = 0;
   13530:	2500      	movs	r5, #0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
   13532:	f44f 7280 	mov.w	r2, #256	; 0x100
   13536:	4629      	mov	r1, r5
   13538:	f500 70a1 	add.w	r0, r0, #322	; 0x142
	char c = 0;
   1353c:	f88d 500b 	strb.w	r5, [sp, #11]
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
   13540:	f00d fc36 	bl	20db0 <memset>
	z_shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
   13544:	4945      	ldr	r1, [pc, #276]	; (1365c <cmd_resize+0x178>)
   13546:	6960      	ldr	r0, [r4, #20]
   13548:	f00c ff37 	bl	203ba <z_shell_raw_fprintf>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
   1354c:	6960      	ldr	r0, [r4, #20]
   1354e:	f00c fa0e 	bl	1f96e <z_shell_fprintf_buffer_flush>
   13552:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
   13556:	6860      	ldr	r0, [r4, #4]
   13558:	6803      	ldr	r3, [r0, #0]
   1355a:	2201      	movs	r2, #1
   1355c:	691f      	ldr	r7, [r3, #16]
   1355e:	f10d 010b 	add.w	r1, sp, #11
   13562:	ab03      	add	r3, sp, #12
   13564:	47b8      	blx	r7
			if (cnt == 0) {
   13566:	9b03      	ldr	r3, [sp, #12]
   13568:	b953      	cbnz	r3, 13580 <cmd_resize+0x9c>
	z_impl_k_busy_wait(usec_to_wait);
   1356a:	3e01      	subs	r6, #1
   1356c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   13570:	b2b6      	uxth	r6, r6
   13572:	f00f fcea 	bl	22f4a <z_impl_k_busy_wait>
	for (uint16_t i = 0; i < 1000; i++) {
   13576:	2e00      	cmp	r6, #0
   13578:	d1ed      	bne.n	13556 <cmd_resize+0x72>
		ret_val = -ENOTSUP;
   1357a:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1357e:	e031      	b.n	135e4 <cmd_resize+0x100>
			if ((c != SHELL_VT100_ASCII_ESC) &&
   13580:	f89d 300b 	ldrb.w	r3, [sp, #11]
   13584:	68a2      	ldr	r2, [r4, #8]
   13586:	2b1b      	cmp	r3, #27
   13588:	d057      	beq.n	1363a <cmd_resize+0x156>
   1358a:	f892 1142 	ldrb.w	r1, [r2, #322]	; 0x142
   1358e:	291b      	cmp	r1, #27
   13590:	d1e1      	bne.n	13556 <cmd_resize+0x72>
			if (c == 'R') { /* End of response from the terminal. */
   13592:	2b52      	cmp	r3, #82	; 0x52
   13594:	d151      	bne.n	1363a <cmd_resize+0x156>
				shell->ctx->temp_buff[buff_idx] = '\0';
   13596:	4415      	add	r5, r2
   13598:	2300      	movs	r3, #0
   1359a:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				if (shell->ctx->temp_buff[1] != '[') {
   1359e:	f892 1143 	ldrb.w	r1, [r2, #323]	; 0x143
   135a2:	295b      	cmp	r1, #91	; 0x5b
   135a4:	d151      	bne.n	1364a <cmd_resize+0x166>
   135a6:	f502 70a2 	add.w	r0, r2, #324	; 0x144
	*y = 0U;
   135aa:	461f      	mov	r7, r3
				buff_idx = 2U;
   135ac:	2602      	movs	r6, #2
				while (shell->ctx->temp_buff[buff_idx] != ';') {
   135ae:	f810 1b01 	ldrb.w	r1, [r0], #1
   135b2:	3601      	adds	r6, #1
   135b4:	293b      	cmp	r1, #59	; 0x3b
   135b6:	b2b6      	uxth	r6, r6
   135b8:	d12a      	bne.n	13610 <cmd_resize+0x12c>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   135ba:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   135be:	d0dc      	beq.n	1357a <cmd_resize+0x96>
   135c0:	f506 70a1 	add.w	r0, r6, #322	; 0x142
   135c4:	4410      	add	r0, r2
	*x = 0U;
   135c6:	2300      	movs	r3, #0
				while (shell->ctx->temp_buff[buff_idx]
   135c8:	f810 5b01 	ldrb.w	r5, [r0], #1
   135cc:	bb55      	cbnz	r5, 13624 <cmd_resize+0x140>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
   135ce:	2bfa      	cmp	r3, #250	; 0xfa
   135d0:	bf28      	it	cs
   135d2:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
   135d4:	2ffa      	cmp	r7, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
   135d6:	8553      	strh	r3, [r2, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
   135d8:	463b      	mov	r3, r7
   135da:	bf28      	it	cs
   135dc:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
   135de:	f882 5142 	strb.w	r5, [r2, #322]	; 0x142
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
   135e2:	8513      	strh	r3, [r2, #40]	; 0x28
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
   135e4:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
   135e6:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
   135ea:	069b      	lsls	r3, r3, #26
   135ec:	d503      	bpl.n	135f6 <cmd_resize+0x112>
   135ee:	491c      	ldr	r1, [pc, #112]	; (13660 <cmd_resize+0x17c>)
   135f0:	6960      	ldr	r0, [r4, #20]
   135f2:	f00c fee2 	bl	203ba <z_shell_raw_fprintf>
	if (err != 0) {
   135f6:	2d00      	cmp	r5, #0
   135f8:	d084      	beq.n	13504 <cmd_resize+0x20>
		shell->ctx->vt100_ctx.cons.terminal_hei =
   135fa:	68a3      	ldr	r3, [r4, #8]
   135fc:	4a19      	ldr	r2, [pc, #100]	; (13664 <cmd_resize+0x180>)
   135fe:	629a      	str	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
   13600:	2103      	movs	r1, #3
   13602:	4a19      	ldr	r2, [pc, #100]	; (13668 <cmd_resize+0x184>)
   13604:	4620      	mov	r0, r4
   13606:	f00c f9a2 	bl	1f94e <shell_fprintf>
   1360a:	f06f 0507 	mvn.w	r5, #7
   1360e:	e779      	b.n	13504 <cmd_resize+0x20>
					*y = *y * 10U +
   13610:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   13614:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   13618:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
   1361a:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
					*y = *y * 10U +
   1361e:	b29f      	uxth	r7, r3
					if (buff_idx >=
   13620:	d1c5      	bne.n	135ae <cmd_resize+0xca>
   13622:	e7aa      	b.n	1357a <cmd_resize+0x96>
					*x = *x * 10U +
   13624:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
   13628:	3601      	adds	r6, #1
					*x = *x * 10U +
   1362a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
					(shell->ctx->temp_buff[buff_idx++] -
   1362e:	b2b6      	uxth	r6, r6
					*x = *x * 10U +
   13630:	3d30      	subs	r5, #48	; 0x30
					if (buff_idx >=
   13632:	2eff      	cmp	r6, #255	; 0xff
					*x = *x * 10U +
   13634:	b2ab      	uxth	r3, r5
					if (buff_idx >=
   13636:	d9c7      	bls.n	135c8 <cmd_resize+0xe4>
   13638:	e79f      	b.n	1357a <cmd_resize+0x96>
			shell->ctx->temp_buff[buff_idx] = c;
   1363a:	1951      	adds	r1, r2, r5
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
   1363c:	3501      	adds	r5, #1
   1363e:	b2ad      	uxth	r5, r5
   13640:	2d09      	cmp	r5, #9
			shell->ctx->temp_buff[buff_idx] = c;
   13642:	f881 3142 	strb.w	r3, [r1, #322]	; 0x142
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
   13646:	d986      	bls.n	13556 <cmd_resize+0x72>
				shell->ctx->temp_buff[0] = 0;
   13648:	2300      	movs	r3, #0
   1364a:	f882 3142 	strb.w	r3, [r2, #322]	; 0x142
				return -ENOMEM;
   1364e:	e794      	b.n	1357a <cmd_resize+0x96>
   13650:	00025413 	.word	0x00025413
   13654:	0002540a 	.word	0x0002540a
   13658:	00023748 	.word	0x00023748
   1365c:	00025837 	.word	0x00025837
   13660:	0002374c 	.word	0x0002374c
   13664:	00500018 	.word	0x00500018
   13668:	00025439 	.word	0x00025439

0001366c <z_shell_wildcard_process>:


enum shell_wildcard_status z_shell_wildcard_process(const struct shell *shell,
					const struct shell_static_entry *cmd,
					const char *pattern)
{
   1366c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13670:	4607      	mov	r7, r0
   13672:	b089      	sub	sp, #36	; 0x24
   13674:	4615      	mov	r5, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
   13676:	4689      	mov	r9, r1
   13678:	b921      	cbnz	r1, 13684 <z_shell_wildcard_process+0x18>
		return ret_val;
   1367a:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
   1367c:	4620      	mov	r0, r4
   1367e:	b009      	add	sp, #36	; 0x24
   13680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!z_shell_has_wildcard(pattern)) {
   13684:	4610      	mov	r0, r2
   13686:	f00c ffc9 	bl	2061c <z_shell_has_wildcard>
   1368a:	2800      	cmp	r0, #0
   1368c:	d0f5      	beq.n	1367a <z_shell_wildcard_process+0xe>
	size_t cnt = 0;
   1368e:	f04f 0800 	mov.w	r8, #0
	size_t cmd_idx = 0;
   13692:	4641      	mov	r1, r8
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
   13694:	2402      	movs	r4, #2
   13696:	e024      	b.n	136e2 <z_shell_wildcard_process+0x76>
	return str == NULL ? 0U : (uint16_t)strlen(str);
   13698:	465c      	mov	r4, fp
   1369a:	e03c      	b.n	13716 <z_shell_wildcard_process+0xaa>
	completion_addr = strstr(buff, pattern);
   1369c:	4629      	mov	r1, r5
   1369e:	f50a 70a1 	add.w	r0, sl, #322	; 0x142
   136a2:	f00d fadd 	bl	20c60 <strstr>
	if (!completion_addr) {
   136a6:	4606      	mov	r6, r0
   136a8:	2800      	cmp	r0, #0
   136aa:	d04e      	beq.n	1374a <z_shell_wildcard_process+0xde>
   136ac:	f00d fb23 	bl	20cf6 <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
   136b0:	b282      	uxth	r2, r0
   136b2:	1c60      	adds	r0, r4, #1
   136b4:	3201      	adds	r2, #1
   136b6:	4631      	mov	r1, r6
   136b8:	4430      	add	r0, r6
   136ba:	f00d fb57 	bl	20d6c <memmove>
	memcpy(completion_addr, cmd, cmd_len);
   136be:	4622      	mov	r2, r4
   136c0:	4659      	mov	r1, fp
   136c2:	4630      	mov	r0, r6
   136c4:	f00d fb69 	bl	20d9a <memcpy>
	completion_addr[cmd_len] = ' ';
   136c8:	f04f 0320 	mov.w	r3, #32
   136cc:	5533      	strb	r3, [r6, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
   136ce:	f8ba 0040 	ldrh.w	r0, [sl, #64]	; 0x40
   136d2:	4404      	add	r4, r0
   136d4:	3401      	adds	r4, #1
   136d6:	f8aa 4040 	strh.w	r4, [sl, #64]	; 0x40
			cnt++;
   136da:	f108 0801 	add.w	r8, r8, #1
			ret_val = command_add(shell->ctx->temp_buff,
   136de:	2400      	movs	r4, #0
   136e0:	9901      	ldr	r1, [sp, #4]
	while ((entry = z_shell_cmd_get(cmd, cmd_idx++, &dloc)) != NULL) {
   136e2:	1c4b      	adds	r3, r1, #1
   136e4:	aa03      	add	r2, sp, #12
   136e6:	4648      	mov	r0, r9
   136e8:	9301      	str	r3, [sp, #4]
   136ea:	f7ff fb95 	bl	12e18 <z_shell_cmd_get>
   136ee:	4606      	mov	r6, r0
   136f0:	b1f8      	cbz	r0, 13732 <z_shell_wildcard_process+0xc6>
		if (fnmatch(pattern, entry->syntax, 0) == 0) {
   136f2:	6831      	ldr	r1, [r6, #0]
   136f4:	2200      	movs	r2, #0
   136f6:	4628      	mov	r0, r5
   136f8:	f00b fbd6 	bl	1eea8 <fnmatch>
   136fc:	2800      	cmp	r0, #0
   136fe:	d1ef      	bne.n	136e0 <z_shell_wildcard_process+0x74>
			ret_val = command_add(shell->ctx->temp_buff,
   13700:	f8d6 b000 	ldr.w	fp, [r6]
   13704:	f8d7 a008 	ldr.w	sl, [r7, #8]
   13708:	f1bb 0f00 	cmp.w	fp, #0
   1370c:	d0c4      	beq.n	13698 <z_shell_wildcard_process+0x2c>
   1370e:	4658      	mov	r0, fp
   13710:	f00d faf1 	bl	20cf6 <strlen>
   13714:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
   13716:	f8ba 2040 	ldrh.w	r2, [sl, #64]	; 0x40
   1371a:	3201      	adds	r2, #1
   1371c:	4422      	add	r2, r4
   1371e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   13722:	ddbb      	ble.n	1369c <z_shell_wildcard_process+0x30>
				z_shell_fprintf(shell, SHELL_WARNING,
   13724:	4a0a      	ldr	r2, [pc, #40]	; (13750 <z_shell_wildcard_process+0xe4>)
   13726:	462b      	mov	r3, r5
   13728:	2103      	movs	r1, #3
   1372a:	4638      	mov	r0, r7
   1372c:	f00c fc6b 	bl	20006 <z_shell_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
   13730:	2401      	movs	r4, #1
	if (cnt > 0) {
   13732:	f1b8 0f00 	cmp.w	r8, #0
   13736:	d0a1      	beq.n	1367c <z_shell_wildcard_process+0x10>
		z_shell_pattern_remove(shell->ctx->temp_buff,
   13738:	68b8      	ldr	r0, [r7, #8]
   1373a:	462a      	mov	r2, r5
   1373c:	f100 0140 	add.w	r1, r0, #64	; 0x40
   13740:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   13744:	f00c fa3f 	bl	1fbc6 <z_shell_pattern_remove>
	return ret_val;
   13748:	e798      	b.n	1367c <z_shell_wildcard_process+0x10>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
   1374a:	2402      	movs	r4, #2
   1374c:	e7f1      	b.n	13732 <z_shell_wildcard_process+0xc6>
   1374e:	bf00      	nop
   13750:	0002583c 	.word	0x0002583c

00013754 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   13754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13758:	4605      	mov	r5, r0
	__asm__ volatile(
   1375a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1375e:	f3ef 8611 	mrs	r6, BASEPRI
   13762:	f383 8812 	msr	BASEPRI_MAX, r3
   13766:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1376a:	4b10      	ldr	r3, [pc, #64]	; (137ac <pm_state_notify+0x58>)
   1376c:	681c      	ldr	r4, [r3, #0]
   1376e:	2c00      	cmp	r4, #0
   13770:	bf38      	it	cc
   13772:	2400      	movcc	r4, #0
   13774:	b19c      	cbz	r4, 1379e <pm_state_notify+0x4a>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
   13776:	4f0e      	ldr	r7, [pc, #56]	; (137b0 <pm_state_notify+0x5c>)
   13778:	f8df 8038 	ldr.w	r8, [pc, #56]	; 137b4 <pm_state_notify+0x60>
   1377c:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   13780:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   13784:	2d00      	cmp	r5, #0
   13786:	bf08      	it	eq
   13788:	4613      	moveq	r3, r2
		if (callback) {
   1378a:	b12b      	cbz	r3, 13798 <pm_state_notify+0x44>
			callback(z_power_states[_current_cpu->id].state);
   1378c:	f898 2014 	ldrb.w	r2, [r8, #20]
   13790:	fb09 f202 	mul.w	r2, r9, r2
   13794:	5cb8      	ldrb	r0, [r7, r2]
   13796:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13798:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1379a:	2c00      	cmp	r4, #0
   1379c:	d1f0      	bne.n	13780 <pm_state_notify+0x2c>
	__asm__ volatile(
   1379e:	f386 8811 	msr	BASEPRI, r6
   137a2:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   137a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   137aa:	bf00      	nop
   137ac:	200024e8 	.word	0x200024e8
   137b0:	200024f4 	.word	0x200024f4
   137b4:	2000279c 	.word	0x2000279c

000137b8 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   137b8:	f000 031f 	and.w	r3, r0, #31
   137bc:	2201      	movs	r2, #1
   137be:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   137c0:	4b0a      	ldr	r3, [pc, #40]	; (137ec <atomic_test_and_set_bit.constprop.0+0x34>)
   137c2:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   137c6:	0940      	lsrs	r0, r0, #5
   137c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   137cc:	e850 3f00 	ldrex	r3, [r0]
   137d0:	ea43 0102 	orr.w	r1, r3, r2
   137d4:	e840 1c00 	strex	ip, r1, [r0]
   137d8:	f1bc 0f00 	cmp.w	ip, #0
   137dc:	d1f6      	bne.n	137cc <atomic_test_and_set_bit.constprop.0+0x14>
   137de:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
   137e2:	421a      	tst	r2, r3
}
   137e4:	bf14      	ite	ne
   137e6:	2001      	movne	r0, #1
   137e8:	2000      	moveq	r0, #0
   137ea:	4770      	bx	lr
   137ec:	20002500 	.word	0x20002500

000137f0 <pm_system_resume>:

void pm_system_resume(void)
{
   137f0:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
   137f2:	4b1d      	ldr	r3, [pc, #116]	; (13868 <pm_system_resume+0x78>)
   137f4:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   137f6:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   137fa:	f005 031f 	and.w	r3, r5, #31
   137fe:	2201      	movs	r2, #1
   13800:	409a      	lsls	r2, r3
   13802:	4b1a      	ldr	r3, [pc, #104]	; (1386c <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13804:	0969      	lsrs	r1, r5, #5
{
   13806:	b085      	sub	sp, #20
   13808:	43d0      	mvns	r0, r2
   1380a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1380e:	e853 1f00 	ldrex	r1, [r3]
   13812:	ea01 0400 	and.w	r4, r1, r0
   13816:	e843 4c00 	strex	ip, r4, [r3]
   1381a:	f1bc 0f00 	cmp.w	ip, #0
   1381e:	d1f6      	bne.n	1380e <pm_system_resume+0x1e>
   13820:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   13824:	4211      	tst	r1, r2
   13826:	d017      	beq.n	13858 <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
   13828:	4c11      	ldr	r4, [pc, #68]	; (13870 <pm_system_resume+0x80>)
   1382a:	220c      	movs	r2, #12
   1382c:	fb02 4205 	mla	r2, r2, r5, r4
   13830:	ca07      	ldmia	r2, {r0, r1, r2}
   13832:	ab01      	add	r3, sp, #4
   13834:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   13838:	4a0e      	ldr	r2, [pc, #56]	; (13874 <pm_system_resume+0x84>)
   1383a:	b17a      	cbz	r2, 1385c <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
   1383c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   13840:	f00d fae2 	bl	20e08 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   13844:	2000      	movs	r0, #0
   13846:	f7ff ff85 	bl	13754 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   1384a:	230c      	movs	r3, #12
   1384c:	436b      	muls	r3, r5
   1384e:	2200      	movs	r2, #0
   13850:	18e1      	adds	r1, r4, r3
   13852:	50e2      	str	r2, [r4, r3]
   13854:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
   13858:	b005      	add	sp, #20
   1385a:	bd30      	pop	{r4, r5, pc}
   1385c:	f382 8811 	msr	BASEPRI, r2
   13860:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   13864:	e7ee      	b.n	13844 <pm_system_resume+0x54>
   13866:	bf00      	nop
   13868:	2000279c 	.word	0x2000279c
   1386c:	200024f0 	.word	0x200024f0
   13870:	200024f4 	.word	0x200024f4
   13874:	00020e09 	.word	0x00020e09

00013878 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   13878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   1387c:	4b37      	ldr	r3, [pc, #220]	; (1395c <pm_system_suspend+0xe4>)
   1387e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 13974 <pm_system_suspend+0xfc>
   13882:	7d1c      	ldrb	r4, [r3, #20]
{
   13884:	b088      	sub	sp, #32
   13886:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
   13888:	4620      	mov	r0, r4
   1388a:	f7ff ff95 	bl	137b8 <atomic_test_and_set_bit.constprop.0>
   1388e:	b960      	cbnz	r0, 138aa <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
   13890:	466e      	mov	r6, sp
   13892:	463a      	mov	r2, r7
   13894:	4621      	mov	r1, r4
   13896:	4630      	mov	r0, r6
   13898:	f00c ff08 	bl	206ac <pm_policy_next_state>
   1389c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   138a0:	250c      	movs	r5, #12
   138a2:	fb05 8504 	mla	r5, r5, r4, r8
   138a6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
   138aa:	230c      	movs	r3, #12
   138ac:	4363      	muls	r3, r4
   138ae:	eb08 0203 	add.w	r2, r8, r3
   138b2:	f818 0003 	ldrb.w	r0, [r8, r3]
   138b6:	0965      	lsrs	r5, r4, #5
   138b8:	f004 061f 	and.w	r6, r4, #31
   138bc:	b3c8      	cbz	r0, 13932 <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
   138be:	1c7b      	adds	r3, r7, #1
   138c0:	d00f      	beq.n	138e2 <pm_system_suspend+0x6a>
			return (uint32_t)((t * to_hz + off) / from_hz);
   138c2:	f8d2 e008 	ldr.w	lr, [r2, #8]
   138c6:	4826      	ldr	r0, [pc, #152]	; (13960 <pm_system_suspend+0xe8>)
   138c8:	4a26      	ldr	r2, [pc, #152]	; (13964 <pm_system_suspend+0xec>)
   138ca:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   138ce:	2100      	movs	r1, #0
   138d0:	2300      	movs	r3, #0
   138d2:	fbec 010e 	umlal	r0, r1, ip, lr
   138d6:	f7ec fc01 	bl	dc <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   138da:	2101      	movs	r1, #1
   138dc:	1a38      	subs	r0, r7, r0
   138de:	f00f fb14 	bl	22f0a <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   138e2:	f009 ffc7 	bl	1d874 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   138e6:	2001      	movs	r0, #1
   138e8:	f7ff ff34 	bl	13754 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   138ec:	f3bf 8f5b 	dmb	ish
   138f0:	4b1d      	ldr	r3, [pc, #116]	; (13968 <pm_system_suspend+0xf0>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   138f2:	2201      	movs	r2, #1
   138f4:	40b2      	lsls	r2, r6
   138f6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   138fa:	e853 1f00 	ldrex	r1, [r3]
   138fe:	4311      	orrs	r1, r2
   13900:	e843 1000 	strex	r0, r1, [r3]
   13904:	2800      	cmp	r0, #0
   13906:	d1f8      	bne.n	138fa <pm_system_suspend+0x82>
   13908:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
   1390c:	230c      	movs	r3, #12
   1390e:	fb03 8404 	mla	r4, r3, r4, r8
   13912:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   13916:	ab05      	add	r3, sp, #20
   13918:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   1391c:	4a13      	ldr	r2, [pc, #76]	; (1396c <pm_system_suspend+0xf4>)
   1391e:	b11a      	cbz	r2, 13928 <pm_system_suspend+0xb0>
		pm_power_state_set(info);
   13920:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   13924:	f00d fa5d 	bl	20de2 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
   13928:	f7ff ff62 	bl	137f0 <pm_system_resume>
	k_sched_unlock();
   1392c:	f00a f97c 	bl	1dc28 <k_sched_unlock>
	bool ret = true;
   13930:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13932:	4a0f      	ldr	r2, [pc, #60]	; (13970 <pm_system_suspend+0xf8>)
   13934:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   13938:	2301      	movs	r3, #1
   1393a:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1393c:	43db      	mvns	r3, r3
   1393e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   13942:	e855 2f00 	ldrex	r2, [r5]
   13946:	401a      	ands	r2, r3
   13948:	e845 2100 	strex	r1, r2, [r5]
   1394c:	2900      	cmp	r1, #0
   1394e:	d1f8      	bne.n	13942 <pm_system_suspend+0xca>
   13950:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
   13954:	b008      	add	sp, #32
   13956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1395a:	bf00      	nop
   1395c:	2000279c 	.word	0x2000279c
   13960:	000f423f 	.word	0x000f423f
   13964:	000f4240 	.word	0x000f4240
   13968:	200024f0 	.word	0x200024f0
   1396c:	00020de3 	.word	0x00020de3
   13970:	20002500 	.word	0x20002500
   13974:	200024f4 	.word	0x200024f4

00013978 <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
   13978:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   1397a:	4d06      	ldr	r5, [pc, #24]	; (13994 <scan_default_param_set+0x1c>)
   1397c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   1397e:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   13980:	ac01      	add	r4, sp, #4
   13982:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
   13984:	ae01      	add	r6, sp, #4
   13986:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   13988:	4c03      	ldr	r4, [pc, #12]	; (13998 <scan_default_param_set+0x20>)
   1398a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1398c:	682b      	ldr	r3, [r5, #0]
   1398e:	6023      	str	r3, [r4, #0]
}
   13990:	b006      	add	sp, #24
   13992:	bd70      	pop	{r4, r5, r6, pc}
   13994:	000236b0 	.word	0x000236b0
   13998:	2000253c 	.word	0x2000253c

0001399c <adv_data_found>:
		control->filter_cnt++;
	}
}

static bool adv_data_found(struct bt_data *data, void *user_data)
{
   1399c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_scan_control *scan_control =
			(struct bt_scan_control *)user_data;

	switch (data->type) {
   139a0:	7803      	ldrb	r3, [r0, #0]
   139a2:	2b09      	cmp	r3, #9
{
   139a4:	4605      	mov	r5, r0
   139a6:	460c      	mov	r4, r1
	switch (data->type) {
   139a8:	d11c      	bne.n	139e4 <adv_data_found+0x48>
	return CONFIG_BT_SCAN_NAME_CNT && bt_scan.scan_filters.name.enabled;
   139aa:	4e11      	ldr	r6, [pc, #68]	; (139f0 <adv_data_found+0x54>)
	if (is_name_filter_enabled()) {
   139ac:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   139b0:	b1c3      	cbz	r3, 139e4 <adv_data_found+0x48>
	uint8_t counter = bt_scan.scan_filters.name.cnt;
   139b2:	f896 a020 	ldrb.w	sl, [r6, #32]
	uint8_t data_len = data->data_len;
   139b6:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
   139ba:	2700      	movs	r7, #0
   139bc:	4557      	cmp	r7, sl
   139be:	d211      	bcs.n	139e4 <adv_data_found+0x48>
		if (adv_name_cmp(data->data,
   139c0:	eb06 1947 	add.w	r9, r6, r7, lsl #5
	return strncmp(target_name, data, data_len) == 0;
   139c4:	6869      	ldr	r1, [r5, #4]
   139c6:	4642      	mov	r2, r8
   139c8:	4648      	mov	r0, r9
   139ca:	f00d f9b0 	bl	20d2e <strncmp>
		if (adv_name_cmp(data->data,
   139ce:	b960      	cbnz	r0, 139ea <adv_data_found+0x4e>
			control->filter_match_cnt++;
   139d0:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.name.name =
   139d2:	f8c4 9018 	str.w	r9, [r4, #24]
			control->filter_match_cnt++;
   139d6:	3301      	adds	r3, #1
   139d8:	7063      	strb	r3, [r4, #1]
			control->filter_status.name.match = true;
   139da:	2301      	movs	r3, #1
			control->filter_status.name.len = data_len;
   139dc:	f884 801c 	strb.w	r8, [r4, #28]
			control->filter_status.name.match = true;
   139e0:	7523      	strb	r3, [r4, #20]
			control->filter_match = true;
   139e2:	70a3      	strb	r3, [r4, #2]
	default:
		break;
	}

	return true;
}
   139e4:	2001      	movs	r0, #1
   139e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (size_t i = 0; i < counter; i++) {
   139ea:	3701      	adds	r7, #1
   139ec:	e7e6      	b.n	139bc <adv_data_found+0x20>
   139ee:	bf00      	nop
   139f0:	20002504 	.word	0x20002504

000139f4 <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
   139f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   139f6:	4b0a      	ldr	r3, [pc, #40]	; (13a20 <notify_filter_matched.constprop.0+0x2c>)
   139f8:	681c      	ldr	r4, [r3, #0]
static void notify_filter_matched(struct bt_scan_device_info *device_info,
   139fa:	4605      	mov	r5, r0
   139fc:	460e      	mov	r6, r1
   139fe:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   13a00:	b10c      	cbz	r4, 13a06 <notify_filter_matched.constprop.0+0x12>
   13a02:	3c04      	subs	r4, #4
   13a04:	b904      	cbnz	r4, 13a08 <notify_filter_matched.constprop.0+0x14>
}
   13a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->cb_addr->filter_match) {
   13a08:	6823      	ldr	r3, [r4, #0]
   13a0a:	681b      	ldr	r3, [r3, #0]
   13a0c:	b11b      	cbz	r3, 13a16 <notify_filter_matched.constprop.0+0x22>
			cb->cb_addr->filter_match(device_info, filter_match,
   13a0e:	463a      	mov	r2, r7
   13a10:	4631      	mov	r1, r6
   13a12:	4628      	mov	r0, r5
   13a14:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   13a16:	1d23      	adds	r3, r4, #4
   13a18:	d0f5      	beq.n	13a06 <notify_filter_matched.constprop.0+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13a1a:	6864      	ldr	r4, [r4, #4]
   13a1c:	e7f0      	b.n	13a00 <notify_filter_matched.constprop.0+0xc>
   13a1e:	bf00      	nop
   13a20:	20002558 	.word	0x20002558

00013a24 <bt_scan_cb_register>:
	if (!cb) {
   13a24:	b150      	cbz	r0, 13a3c <bt_scan_cb_register+0x18>
	parent->next = child;
   13a26:	2300      	movs	r3, #0
   13a28:	6043      	str	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   13a2a:	4b05      	ldr	r3, [pc, #20]	; (13a40 <bt_scan_cb_register+0x1c>)
   13a2c:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&callback_list, &cb->node);
   13a2e:	1d02      	adds	r2, r0, #4
   13a30:	b911      	cbnz	r1, 13a38 <bt_scan_cb_register+0x14>
	list->head = node;
   13a32:	e9c3 2200 	strd	r2, r2, [r3]
}
   13a36:	4770      	bx	lr
	parent->next = child;
   13a38:	600a      	str	r2, [r1, #0]
	list->tail = node;
   13a3a:	605a      	str	r2, [r3, #4]
}
   13a3c:	4770      	bx	lr
   13a3e:	bf00      	nop
   13a40:	20002558 	.word	0x20002558

00013a44 <bt_scan_filter_add>:
{
   13a44:	b570      	push	{r4, r5, r6, lr}
   13a46:	4604      	mov	r4, r0
	if (!data) {
   13a48:	460d      	mov	r5, r1
   13a4a:	b371      	cbz	r1, 13aaa <bt_scan_filter_add+0x66>
	return z_impl_k_mutex_lock(mutex, timeout);
   13a4c:	4818      	ldr	r0, [pc, #96]	; (13ab0 <bt_scan_filter_add+0x6c>)
   13a4e:	f04f 32ff 	mov.w	r2, #4294967295
   13a52:	f04f 33ff 	mov.w	r3, #4294967295
   13a56:	f009 fb9f 	bl	1d198 <z_impl_k_mutex_lock>
	switch (type) {
   13a5a:	b15c      	cbz	r4, 13a74 <bt_scan_filter_add+0x30>
   13a5c:	3c01      	subs	r4, #1
   13a5e:	2c04      	cmp	r4, #4
   13a60:	bf94      	ite	ls
   13a62:	f06f 040b 	mvnls.w	r4, #11
   13a66:	f06f 0415 	mvnhi.w	r4, #21
	return z_impl_k_mutex_unlock(mutex);
   13a6a:	4811      	ldr	r0, [pc, #68]	; (13ab0 <bt_scan_filter_add+0x6c>)
   13a6c:	f009 fc12 	bl	1d294 <z_impl_k_mutex_unlock>
}
   13a70:	4620      	mov	r0, r4
   13a72:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t counter = bt_scan.scan_filters.name.cnt;
   13a74:	4e0f      	ldr	r6, [pc, #60]	; (13ab4 <bt_scan_filter_add+0x70>)
	if (counter >= CONFIG_BT_SCAN_NAME_CNT) {
   13a76:	f896 4020 	ldrb.w	r4, [r6, #32]
   13a7a:	b984      	cbnz	r4, 13a9e <bt_scan_filter_add+0x5a>
	name_len = strlen(name);
   13a7c:	4628      	mov	r0, r5
   13a7e:	f00d f93a 	bl	20cf6 <strlen>
	if ((name_len == 0) || (name_len > CONFIG_BT_SCAN_NAME_MAX_LEN)) {
   13a82:	1e43      	subs	r3, r0, #1
   13a84:	2b1f      	cmp	r3, #31
	name_len = strlen(name);
   13a86:	4602      	mov	r2, r0
	if ((name_len == 0) || (name_len > CONFIG_BT_SCAN_NAME_MAX_LEN)) {
   13a88:	d80c      	bhi.n	13aa4 <bt_scan_filter_add+0x60>
	memcpy(bt_scan.scan_filters.name.target_name[counter],
   13a8a:	4629      	mov	r1, r5
   13a8c:	4630      	mov	r0, r6
   13a8e:	f00d f984 	bl	20d9a <memcpy>
	bt_scan.scan_filters.name.cnt++;
   13a92:	f896 3020 	ldrb.w	r3, [r6, #32]
   13a96:	3301      	adds	r3, #1
   13a98:	f886 3020 	strb.w	r3, [r6, #32]
	return 0;
   13a9c:	e7e5      	b.n	13a6a <bt_scan_filter_add+0x26>
		return -ENOMEM;
   13a9e:	f06f 040b 	mvn.w	r4, #11
   13aa2:	e7e2      	b.n	13a6a <bt_scan_filter_add+0x26>
		return -EINVAL;
   13aa4:	f06f 0415 	mvn.w	r4, #21
   13aa8:	e7df      	b.n	13a6a <bt_scan_filter_add+0x26>
		return -EINVAL;
   13aaa:	f06f 0415 	mvn.w	r4, #21
   13aae:	e7df      	b.n	13a70 <bt_scan_filter_add+0x2c>
   13ab0:	20000738 	.word	0x20000738
   13ab4:	20002504 	.word	0x20002504

00013ab8 <bt_scan_filter_remove_all>:
{
   13ab8:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   13aba:	4c0d      	ldr	r4, [pc, #52]	; (13af0 <bt_scan_filter_remove_all+0x38>)
   13abc:	f04f 32ff 	mov.w	r2, #4294967295
   13ac0:	f04f 33ff 	mov.w	r3, #4294967295
   13ac4:	4620      	mov	r0, r4
   13ac6:	f009 fb67 	bl	1d198 <z_impl_k_mutex_lock>
	name_filter->cnt = 0;
   13aca:	4b0a      	ldr	r3, [pc, #40]	; (13af4 <bt_scan_filter_remove_all+0x3c>)
   13acc:	2200      	movs	r2, #0
   13ace:	f883 2020 	strb.w	r2, [r3, #32]
	short_name_filter->cnt = 0;
   13ad2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	addr_filter->cnt = 0;
   13ad6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	uuid_filter->cnt = 0;
   13ada:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	appearance_filter->cnt = 0;
   13ade:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	manufacturer_data_filter->cnt = 0;
   13ae2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	return z_impl_k_mutex_unlock(mutex);
   13ae6:	4620      	mov	r0, r4
}
   13ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13aec:	f009 bbd2 	b.w	1d294 <z_impl_k_mutex_unlock>
   13af0:	20000738 	.word	0x20000738
   13af4:	20002504 	.word	0x20002504

00013af8 <bt_scan_filter_disable>:
	bt_scan.scan_filters.name.enabled = false;
   13af8:	4b07      	ldr	r3, [pc, #28]	; (13b18 <bt_scan_filter_disable+0x20>)
   13afa:	2200      	movs	r2, #0
   13afc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	bt_scan.scan_filters.short_name.enabled = false;
   13b00:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	bt_scan.scan_filters.addr.enabled = false;
   13b04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	bt_scan.scan_filters.uuid.enabled = false;
   13b08:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	bt_scan.scan_filters.appearance.enabled = false;
   13b0c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	bt_scan.scan_filters.manufacturer_data.enabled = false;
   13b10:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
   13b14:	4770      	bx	lr
   13b16:	bf00      	nop
   13b18:	20002504 	.word	0x20002504

00013b1c <bt_scan_filter_enable>:
{
   13b1c:	b508      	push	{r3, lr}
	if (!check_filter_mode(mode)) {
   13b1e:	0683      	lsls	r3, r0, #26
   13b20:	d025      	beq.n	13b6e <bt_scan_filter_enable+0x52>
	bt_scan_filter_disable();
   13b22:	f7ff ffe9 	bl	13af8 <bt_scan_filter_disable>
	if (mode & BT_SCAN_ADDR_FILTER) {
   13b26:	4b13      	ldr	r3, [pc, #76]	; (13b74 <bt_scan_filter_enable+0x58>)
   13b28:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
   13b2c:	bf1c      	itt	ne
   13b2e:	2201      	movne	r2, #1
   13b30:	f883 2025 	strbne.w	r2, [r3, #37]	; 0x25
	if (mode & BT_SCAN_NAME_FILTER) {
   13b34:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
   13b36:	bf44      	itt	mi
   13b38:	2201      	movmi	r2, #1
   13b3a:	f883 2021 	strbmi.w	r2, [r3, #33]	; 0x21
	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
   13b3e:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
   13b40:	bf44      	itt	mi
   13b42:	2201      	movmi	r2, #1
   13b44:	f883 2023 	strbmi.w	r2, [r3, #35]	; 0x23
	if (mode & BT_SCAN_UUID_FILTER) {
   13b48:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
   13b4a:	bf44      	itt	mi
   13b4c:	2201      	movmi	r2, #1
   13b4e:	f883 2029 	strbmi.w	r2, [r3, #41]	; 0x29
	if (mode & BT_SCAN_APPEARANCE_FILTER) {
   13b52:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
   13b54:	bf44      	itt	mi
   13b56:	2201      	movmi	r2, #1
   13b58:	f883 202d 	strbmi.w	r2, [r3, #45]	; 0x2d
	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
   13b5c:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
   13b5e:	bf44      	itt	mi
   13b60:	2201      	movmi	r2, #1
   13b62:	f883 202f 	strbmi.w	r2, [r3, #47]	; 0x2f
	filters->all_mode = match_all;
   13b66:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
	return 0;
   13b6a:	2000      	movs	r0, #0
}
   13b6c:	bd08      	pop	{r3, pc}
		return -EINVAL;
   13b6e:	f06f 0015 	mvn.w	r0, #21
   13b72:	e7fb      	b.n	13b6c <bt_scan_filter_enable+0x50>
   13b74:	20002504 	.word	0x20002504

00013b78 <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
   13b78:	b570      	push	{r4, r5, r6, lr}
   13b7a:	b086      	sub	sp, #24
   13b7c:	460e      	mov	r6, r1
   13b7e:	4605      	mov	r5, r0
	bt_scan_stop();
   13b80:	f00c fd99 	bl	206b6 <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
   13b84:	4b18      	ldr	r3, [pc, #96]	; (13be8 <scan_connect_with_target.part.0+0x70>)
   13b86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   13b88:	ac02      	add	r4, sp, #8
   13b8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
   13b8e:	ab01      	add	r3, sp, #4
   13b90:	4621      	mov	r1, r4
   13b92:	4a16      	ldr	r2, [pc, #88]	; (13bec <scan_connect_with_target.part.0+0x74>)
   13b94:	4630      	mov	r0, r6
   13b96:	f003 ff03 	bl	179a0 <bt_conn_le_create>
	if (err) {
   13b9a:	4b15      	ldr	r3, [pc, #84]	; (13bf0 <scan_connect_with_target.part.0+0x78>)
   13b9c:	3508      	adds	r5, #8
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   13b9e:	681c      	ldr	r4, [r3, #0]
	if (err) {
   13ba0:	b168      	cbz	r0, 13bbe <scan_connect_with_target.part.0+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   13ba2:	b10c      	cbz	r4, 13ba8 <scan_connect_with_target.part.0+0x30>
   13ba4:	3c04      	subs	r4, #4
   13ba6:	b90c      	cbnz	r4, 13bac <scan_connect_with_target.part.0+0x34>
}
   13ba8:	b006      	add	sp, #24
   13baa:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->cb_addr->connecting_error) {
   13bac:	6823      	ldr	r3, [r4, #0]
   13bae:	689b      	ldr	r3, [r3, #8]
   13bb0:	b10b      	cbz	r3, 13bb6 <scan_connect_with_target.part.0+0x3e>
			cb->cb_addr->connecting_error(device_info);
   13bb2:	4628      	mov	r0, r5
   13bb4:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   13bb6:	1d22      	adds	r2, r4, #4
   13bb8:	d0f6      	beq.n	13ba8 <scan_connect_with_target.part.0+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13bba:	6864      	ldr	r4, [r4, #4]
   13bbc:	e7f1      	b.n	13ba2 <scan_connect_with_target.part.0+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   13bbe:	b91c      	cbnz	r4, 13bc8 <scan_connect_with_target.part.0+0x50>
		bt_conn_unref(conn);
   13bc0:	9801      	ldr	r0, [sp, #4]
   13bc2:	f00d fb1e 	bl	21202 <bt_conn_unref>
   13bc6:	e7ef      	b.n	13ba8 <scan_connect_with_target.part.0+0x30>
		notify_connecting(&control->device_info, conn);
   13bc8:	9e01      	ldr	r6, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   13bca:	3c04      	subs	r4, #4
   13bcc:	2c00      	cmp	r4, #0
   13bce:	d0f7      	beq.n	13bc0 <scan_connect_with_target.part.0+0x48>
		if (cb->cb_addr->connecting) {
   13bd0:	6823      	ldr	r3, [r4, #0]
   13bd2:	68db      	ldr	r3, [r3, #12]
   13bd4:	b113      	cbz	r3, 13bdc <scan_connect_with_target.part.0+0x64>
			cb->cb_addr->connecting(device_info, conn);
   13bd6:	4631      	mov	r1, r6
   13bd8:	4628      	mov	r0, r5
   13bda:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   13bdc:	1d23      	adds	r3, r4, #4
   13bde:	d0ef      	beq.n	13bc0 <scan_connect_with_target.part.0+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13be0:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   13be2:	2c00      	cmp	r4, #0
   13be4:	d1f1      	bne.n	13bca <scan_connect_with_target.part.0+0x52>
   13be6:	e7eb      	b.n	13bc0 <scan_connect_with_target.part.0+0x48>
   13be8:	000236c4 	.word	0x000236c4
   13bec:	20002550 	.word	0x20002550
   13bf0:	20002558 	.word	0x20002558

00013bf4 <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
   13bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   13bf8:	4f31      	ldr	r7, [pc, #196]	; (13cc0 <scan_recv+0xcc>)
{
   13bfa:	b094      	sub	sp, #80	; 0x50
	memset(&scan_control, 0, sizeof(scan_control));
   13bfc:	2250      	movs	r2, #80	; 0x50
{
   13bfe:	4605      	mov	r5, r0
   13c00:	460c      	mov	r4, r1
	memset(&scan_control, 0, sizeof(scan_control));
   13c02:	4668      	mov	r0, sp
   13c04:	2100      	movs	r1, #0
   13c06:	f00d f8d3 	bl	20db0 <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   13c0a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
   13c0e:	f88d 2003 	strb.w	r2, [sp, #3]
	control->filter_cnt = 0;
   13c12:	2200      	movs	r2, #0
   13c14:	f88d 2000 	strb.w	r2, [sp]
	if (is_name_filter_enabled()) {
   13c18:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
   13c1c:	b112      	cbz	r2, 13c24 <scan_recv+0x30>
		control->filter_cnt++;
   13c1e:	2301      	movs	r3, #1
   13c20:	f88d 3000 	strb.w	r3, [sp]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
   13c24:	7a2b      	ldrb	r3, [r5, #8]
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
   13c26:	4620      	mov	r0, r4
   13c28:	f003 0301 	and.w	r3, r3, #1
   13c2c:	f88d 3004 	strb.w	r3, [sp, #4]
   13c30:	f00e faaa 	bl	22188 <net_buf_simple_headroom>

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
   13c34:	4923      	ldr	r1, [pc, #140]	; (13cc4 <scan_recv+0xd0>)
	state->len = buf->len;
   13c36:	f8b4 8004 	ldrh.w	r8, [r4, #4]
	state->offset = net_buf_simple_headroom(buf);
   13c3a:	4606      	mov	r6, r0
   13c3c:	466a      	mov	r2, sp
   13c3e:	4620      	mov	r0, r4
   13c40:	f002 fd1e 	bl	16680 <bt_data_parse>
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
   13c44:	4b20      	ldr	r3, [pc, #128]	; (13cc8 <scan_recv+0xd4>)
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
   13c46:	68a0      	ldr	r0, [r4, #8]
	buf->len = state->len;
   13c48:	f8a4 8004 	strh.w	r8, [r4, #4]
	scan_control.device_info.adv_data = ad;
   13c4c:	e9cd 3403 	strd	r3, r4, [sp, #12]
	if (control->all_mode &&
   13c50:	f89d 3003 	ldrb.w	r3, [sp, #3]
	scan_control.device_info.recv_info = info;
   13c54:	9502      	str	r5, [sp, #8]
	buf->data = buf->__buf + state->offset;
   13c56:	fa10 f686 	uxtah	r6, r0, r6
   13c5a:	6026      	str	r6, [r4, #0]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
   13c5c:	682c      	ldr	r4, [r5, #0]
	if (control->all_mode &&
   13c5e:	b1ab      	cbz	r3, 13c8c <scan_recv+0x98>
   13c60:	f89d 2001 	ldrb.w	r2, [sp, #1]
   13c64:	f89d 3000 	ldrb.w	r3, [sp]
   13c68:	429a      	cmp	r2, r3
   13c6a:	d113      	bne.n	13c94 <scan_recv+0xa0>
		notify_filter_matched(&control->device_info,
   13c6c:	f89d 2004 	ldrb.w	r2, [sp, #4]
   13c70:	a905      	add	r1, sp, #20
   13c72:	a802      	add	r0, sp, #8
   13c74:	f7ff febe 	bl	139f4 <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
   13c78:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
   13c7c:	b11b      	cbz	r3, 13c86 <scan_recv+0x92>
   13c7e:	4621      	mov	r1, r4
   13c80:	4668      	mov	r0, sp
   13c82:	f7ff ff79 	bl	13b78 <scan_connect_with_target.part.0>
}
   13c86:	b014      	add	sp, #80	; 0x50
   13c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if ((!control->all_mode) && control->filter_match) {
   13c8c:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13c90:	2b00      	cmp	r3, #0
   13c92:	d1eb      	bne.n	13c6c <scan_recv+0x78>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   13c94:	4b0d      	ldr	r3, [pc, #52]	; (13ccc <scan_recv+0xd8>)
   13c96:	681c      	ldr	r4, [r3, #0]
   13c98:	2c00      	cmp	r4, #0
   13c9a:	d0f4      	beq.n	13c86 <scan_recv+0x92>
		notify_filter_no_match(&control->device_info,
   13c9c:	f89d 5004 	ldrb.w	r5, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   13ca0:	3c04      	subs	r4, #4
   13ca2:	2c00      	cmp	r4, #0
   13ca4:	d0ef      	beq.n	13c86 <scan_recv+0x92>
		if (cb->cb_addr->filter_no_match) {
   13ca6:	6823      	ldr	r3, [r4, #0]
   13ca8:	685b      	ldr	r3, [r3, #4]
   13caa:	b113      	cbz	r3, 13cb2 <scan_recv+0xbe>
			cb->cb_addr->filter_no_match(device_info, connectable);
   13cac:	4629      	mov	r1, r5
   13cae:	a802      	add	r0, sp, #8
   13cb0:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   13cb2:	1d23      	adds	r3, r4, #4
   13cb4:	d0e7      	beq.n	13c86 <scan_recv+0x92>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13cb6:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   13cb8:	2c00      	cmp	r4, #0
   13cba:	d1f1      	bne.n	13ca0 <scan_recv+0xac>
   13cbc:	e7e3      	b.n	13c86 <scan_recv+0x92>
   13cbe:	bf00      	nop
   13cc0:	20002504 	.word	0x20002504
   13cc4:	0001399d 	.word	0x0001399d
   13cc8:	20002550 	.word	0x20002550
   13ccc:	20002558 	.word	0x20002558

00013cd0 <bt_scan_init>:
{
   13cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   13cd2:	4c18      	ldr	r4, [pc, #96]	; (13d34 <bt_scan_init+0x64>)
{
   13cd4:	4605      	mov	r5, r0
	bt_le_scan_cb_register(&scan_cb);
   13cd6:	4818      	ldr	r0, [pc, #96]	; (13d38 <bt_scan_init+0x68>)
   13cd8:	f003 f9a2 	bl	17020 <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   13cdc:	2234      	movs	r2, #52	; 0x34
   13cde:	2100      	movs	r1, #0
   13ce0:	4620      	mov	r0, r4
   13ce2:	f00d f865 	bl	20db0 <memset>
	if (init) {
   13ce6:	4627      	mov	r7, r4
   13ce8:	b1d5      	cbz	r5, 13d20 <bt_scan_init+0x50>
		bt_scan.connect_if_match = init->connect_if_match;
   13cea:	792b      	ldrb	r3, [r5, #4]
   13cec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if (init->scan_param) {
   13cf0:	682c      	ldr	r4, [r5, #0]
   13cf2:	b164      	cbz	r4, 13d0e <bt_scan_init+0x3e>
			bt_scan.scan_param = *init->scan_param;
   13cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   13cf6:	f107 0638 	add.w	r6, r7, #56	; 0x38
   13cfa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   13cfc:	6823      	ldr	r3, [r4, #0]
   13cfe:	6033      	str	r3, [r6, #0]
		if (init->conn_param) {
   13d00:	68aa      	ldr	r2, [r5, #8]
   13d02:	b13a      	cbz	r2, 13d14 <bt_scan_init+0x44>
			bt_scan.conn_param = *init->conn_param;
   13d04:	4b0d      	ldr	r3, [pc, #52]	; (13d3c <bt_scan_init+0x6c>)
   13d06:	6810      	ldr	r0, [r2, #0]
   13d08:	6851      	ldr	r1, [r2, #4]
   13d0a:	c303      	stmia	r3!, {r0, r1}
}
   13d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			scan_default_param_set();
   13d0e:	f7ff fe33 	bl	13978 <scan_default_param_set>
   13d12:	e7f5      	b.n	13d00 <bt_scan_init+0x30>
	bt_scan.conn_param = *conn_param;
   13d14:	490a      	ldr	r1, [pc, #40]	; (13d40 <bt_scan_init+0x70>)
   13d16:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
   13d1a:	e9c7 1313 	strd	r1, r3, [r7, #76]	; 0x4c
}
   13d1e:	e7f5      	b.n	13d0c <bt_scan_init+0x3c>
		scan_default_param_set();
   13d20:	f7ff fe2a 	bl	13978 <scan_default_param_set>
	bt_scan.conn_param = *conn_param;
   13d24:	4a06      	ldr	r2, [pc, #24]	; (13d40 <bt_scan_init+0x70>)
		bt_scan.connect_if_match = false;
   13d26:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
	bt_scan.conn_param = *conn_param;
   13d2a:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
   13d2e:	e9c4 2313 	strd	r2, r3, [r4, #76]	; 0x4c
}
   13d32:	e7eb      	b.n	13d0c <bt_scan_init+0x3c>
   13d34:	20002504 	.word	0x20002504
   13d38:	20000494 	.word	0x20000494
   13d3c:	20002550 	.word	0x20002550
   13d40:	00280018 	.word	0x00280018

00013d44 <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
   13d44:	b108      	cbz	r0, 13d4a <bt_scan_start+0x6>
   13d46:	2801      	cmp	r0, #1
   13d48:	d106      	bne.n	13d58 <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
		break;

	case BT_SCAN_TYPE_SCAN_PASSIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
   13d4a:	4b05      	ldr	r3, [pc, #20]	; (13d60 <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   13d4c:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
   13d4e:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   13d52:	4804      	ldr	r0, [pc, #16]	; (13d64 <bt_scan_start+0x20>)
   13d54:	f003 b8ce 	b.w	16ef4 <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
   13d58:	f06f 0015 	mvn.w	r0, #21
   13d5c:	4770      	bx	lr
   13d5e:	bf00      	nop
   13d60:	20002504 	.word	0x20002504
   13d64:	2000253c 	.word	0x2000253c

00013d68 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   13d68:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   13d6a:	4e26      	ldr	r6, [pc, #152]	; (13e04 <tc_aes128_set_encrypt_key+0x9c>)
{
   13d6c:	4607      	mov	r7, r0
   13d6e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   13d70:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   13d72:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   13d74:	ad01      	add	r5, sp, #4
   13d76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13d78:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   13d7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13d7c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   13d80:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   13d84:	4638      	mov	r0, r7
   13d86:	2f00      	cmp	r7, #0
   13d88:	d038      	beq.n	13dfc <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   13d8a:	2c00      	cmp	r4, #0
   13d8c:	d038      	beq.n	13e00 <tc_aes128_set_encrypt_key+0x98>
   13d8e:	1f38      	subs	r0, r7, #4
   13d90:	4621      	mov	r1, r4
   13d92:	4602      	mov	r2, r0
   13d94:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   13d96:	784b      	ldrb	r3, [r1, #1]
   13d98:	780d      	ldrb	r5, [r1, #0]
   13d9a:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   13d9c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   13da0:	78cd      	ldrb	r5, [r1, #3]
   13da2:	432b      	orrs	r3, r5
   13da4:	788d      	ldrb	r5, [r1, #2]
   13da6:	3104      	adds	r1, #4
   13da8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   13dac:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   13dae:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   13db2:	d1f0      	bne.n	13d96 <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   13db4:	4c14      	ldr	r4, [pc, #80]	; (13e08 <tc_aes128_set_encrypt_key+0xa0>)
   13db6:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   13db8:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   13dba:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   13dbc:	d116      	bne.n	13dec <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   13dbe:	f3c3 4207 	ubfx	r2, r3, #16, #8
   13dc2:	5ca5      	ldrb	r5, [r4, r2]
   13dc4:	0e1a      	lsrs	r2, r3, #24
   13dc6:	5ca2      	ldrb	r2, [r4, r2]
   13dc8:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   13dcc:	f3c3 2507 	ubfx	r5, r3, #8, #8
   13dd0:	b2db      	uxtb	r3, r3
   13dd2:	5d65      	ldrb	r5, [r4, r5]
   13dd4:	5ce3      	ldrb	r3, [r4, r3]
   13dd6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   13dda:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   13dde:	ad0c      	add	r5, sp, #48	; 0x30
   13de0:	f021 0303 	bic.w	r3, r1, #3
   13de4:	442b      	add	r3, r5
   13de6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   13dea:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   13dec:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   13df0:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   13df2:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   13df4:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   13df6:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   13df8:	d1de      	bne.n	13db8 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   13dfa:	2001      	movs	r0, #1
}
   13dfc:	b00d      	add	sp, #52	; 0x34
   13dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   13e00:	4620      	mov	r0, r4
   13e02:	e7fb      	b.n	13dfc <tc_aes128_set_encrypt_key+0x94>
   13e04:	000236d4 	.word	0x000236d4
   13e08:	0002589d 	.word	0x0002589d

00013e0c <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   13e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13e10:	4615      	mov	r5, r2
   13e12:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   13e14:	4606      	mov	r6, r0
   13e16:	2800      	cmp	r0, #0
   13e18:	d058      	beq.n	13ecc <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   13e1a:	2900      	cmp	r1, #0
   13e1c:	d059      	beq.n	13ed2 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   13e1e:	2a00      	cmp	r2, #0
   13e20:	d059      	beq.n	13ed6 <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   13e22:	2310      	movs	r3, #16
   13e24:	460a      	mov	r2, r1
   13e26:	4668      	mov	r0, sp
   13e28:	4619      	mov	r1, r3
   13e2a:	f00c fc46 	bl	206ba <_copy>
	add_round_key(state, s->words);
   13e2e:	4629      	mov	r1, r5
   13e30:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   13e32:	4c2a      	ldr	r4, [pc, #168]	; (13edc <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
   13e34:	f00c fc59 	bl	206ea <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   13e38:	f105 0710 	add.w	r7, r5, #16
   13e3c:	46a1      	mov	r9, r4
   13e3e:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   13e40:	46e8      	mov	r8, sp
{
   13e42:	466a      	mov	r2, sp
   13e44:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   13e46:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   13e48:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   13e4a:	5c61      	ldrb	r1, [r4, r1]
   13e4c:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   13e50:	d1f9      	bne.n	13e46 <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   13e52:	4668      	mov	r0, sp
   13e54:	f00c fc8e 	bl	20774 <shift_rows>
	mult_row_column(t, s);
   13e58:	4669      	mov	r1, sp
   13e5a:	a804      	add	r0, sp, #16
   13e5c:	f00c fcc3 	bl	207e6 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   13e60:	a901      	add	r1, sp, #4
   13e62:	a805      	add	r0, sp, #20
   13e64:	f00c fcbf 	bl	207e6 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   13e68:	a902      	add	r1, sp, #8
   13e6a:	a806      	add	r0, sp, #24
   13e6c:	f00c fcbb 	bl	207e6 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   13e70:	a903      	add	r1, sp, #12
   13e72:	a807      	add	r0, sp, #28
   13e74:	f00c fcb7 	bl	207e6 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   13e78:	2310      	movs	r3, #16
   13e7a:	4619      	mov	r1, r3
   13e7c:	eb0d 0203 	add.w	r2, sp, r3
   13e80:	4668      	mov	r0, sp
   13e82:	f00c fc1a 	bl	206ba <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   13e86:	4639      	mov	r1, r7
   13e88:	4668      	mov	r0, sp
   13e8a:	3710      	adds	r7, #16
   13e8c:	f00c fc2d 	bl	206ea <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   13e90:	42af      	cmp	r7, r5
   13e92:	d1d5      	bne.n	13e40 <tc_aes_encrypt+0x34>
   13e94:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   13e96:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   13e9a:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   13e9c:	f819 3003 	ldrb.w	r3, [r9, r3]
   13ea0:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   13ea4:	d1f7      	bne.n	13e96 <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   13ea6:	4668      	mov	r0, sp
   13ea8:	f00c fc64 	bl	20774 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   13eac:	4629      	mov	r1, r5
   13eae:	4668      	mov	r0, sp
   13eb0:	f00c fc1b 	bl	206ea <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   13eb4:	2310      	movs	r3, #16
   13eb6:	4619      	mov	r1, r3
   13eb8:	466a      	mov	r2, sp
   13eba:	4630      	mov	r0, r6
   13ebc:	f00c fbfd 	bl	206ba <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   13ec0:	4668      	mov	r0, sp
   13ec2:	2210      	movs	r2, #16
   13ec4:	4621      	mov	r1, r4
   13ec6:	f00c fc05 	bl	206d4 <_set>

	return TC_CRYPTO_SUCCESS;
   13eca:	2001      	movs	r0, #1
}
   13ecc:	b009      	add	sp, #36	; 0x24
   13ece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   13ed2:	4608      	mov	r0, r1
   13ed4:	e7fa      	b.n	13ecc <tc_aes_encrypt+0xc0>
   13ed6:	4610      	mov	r0, r2
   13ed8:	e7f8      	b.n	13ecc <tc_aes_encrypt+0xc0>
   13eda:	bf00      	nop
   13edc:	0002589d 	.word	0x0002589d

00013ee0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   13ee0:	4901      	ldr	r1, [pc, #4]	; (13ee8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   13ee2:	2210      	movs	r2, #16
	str	r2, [r1]
   13ee4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   13ee6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   13ee8:	e000ed10 	.word	0xe000ed10

00013eec <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   13eec:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   13eee:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   13ef0:	f380 8811 	msr	BASEPRI, r0
	isb
   13ef4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   13ef8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   13efc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   13efe:	b662      	cpsie	i
	isb
   13f00:	f3bf 8f6f 	isb	sy

	bx	lr
   13f04:	4770      	bx	lr
   13f06:	bf00      	nop

00013f08 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   13f08:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   13f0a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   13f0c:	f381 8811 	msr	BASEPRI, r1

	wfe
   13f10:	bf20      	wfe

	msr	BASEPRI, r0
   13f12:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   13f16:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   13f18:	4770      	bx	lr
   13f1a:	bf00      	nop

00013f1c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   13f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13f1e:	4607      	mov	r7, r0

	if (esf != NULL) {
   13f20:	460c      	mov	r4, r1
   13f22:	b361      	cbz	r1, 13f7e <z_arm_fatal_error+0x62>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   13f24:	4e19      	ldr	r6, [pc, #100]	; (13f8c <z_arm_fatal_error+0x70>)
   13f26:	6833      	ldr	r3, [r6, #0]
   13f28:	0758      	lsls	r0, r3, #29
   13f2a:	d028      	beq.n	13f7e <z_arm_fatal_error+0x62>
   13f2c:	4d18      	ldr	r5, [pc, #96]	; (13f90 <z_arm_fatal_error+0x74>)
   13f2e:	4819      	ldr	r0, [pc, #100]	; (13f94 <z_arm_fatal_error+0x78>)
   13f30:	1b75      	subs	r5, r6, r5
   13f32:	08ad      	lsrs	r5, r5, #2
   13f34:	01ad      	lsls	r5, r5, #6
   13f36:	f045 0501 	orr.w	r5, r5, #1
   13f3a:	f8ad 5000 	strh.w	r5, [sp]
   13f3e:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   13f42:	6809      	ldr	r1, [r1, #0]
   13f44:	f00b f831 	bl	1efaa <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   13f48:	6833      	ldr	r3, [r6, #0]
   13f4a:	0759      	lsls	r1, r3, #29
   13f4c:	d017      	beq.n	13f7e <z_arm_fatal_error+0x62>
   13f4e:	f8ad 5000 	strh.w	r5, [sp]
   13f52:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   13f56:	68e1      	ldr	r1, [r4, #12]
   13f58:	480f      	ldr	r0, [pc, #60]	; (13f98 <z_arm_fatal_error+0x7c>)
   13f5a:	f00b f826 	bl	1efaa <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   13f5e:	6833      	ldr	r3, [r6, #0]
   13f60:	075a      	lsls	r2, r3, #29
   13f62:	d00c      	beq.n	13f7e <z_arm_fatal_error+0x62>
   13f64:	69e1      	ldr	r1, [r4, #28]
   13f66:	480d      	ldr	r0, [pc, #52]	; (13f9c <z_arm_fatal_error+0x80>)
   13f68:	462a      	mov	r2, r5
   13f6a:	f00a fff1 	bl	1ef50 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   13f6e:	6833      	ldr	r3, [r6, #0]
   13f70:	075b      	lsls	r3, r3, #29
   13f72:	d004      	beq.n	13f7e <z_arm_fatal_error+0x62>
   13f74:	69a1      	ldr	r1, [r4, #24]
   13f76:	480a      	ldr	r0, [pc, #40]	; (13fa0 <z_arm_fatal_error+0x84>)
   13f78:	462a      	mov	r2, r5
   13f7a:	f00a ffe9 	bl	1ef50 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   13f7e:	4621      	mov	r1, r4
   13f80:	4638      	mov	r0, r7
}
   13f82:	b003      	add	sp, #12
   13f84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	z_fatal_error(reason, esf);
   13f88:	f008 bd16 	b.w	1c9b8 <z_fatal_error>
   13f8c:	20000698 	.word	0x20000698
   13f90:	20000654 	.word	0x20000654
   13f94:	0002599d 	.word	0x0002599d
   13f98:	000259cc 	.word	0x000259cc
   13f9c:	000259fb 	.word	0x000259fb
   13fa0:	00025a0a 	.word	0x00025a0a

00013fa4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   13fa4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   13fa6:	2b00      	cmp	r3, #0
   13fa8:	db08      	blt.n	13fbc <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13faa:	2201      	movs	r2, #1
   13fac:	f000 001f 	and.w	r0, r0, #31
   13fb0:	fa02 f000 	lsl.w	r0, r2, r0
   13fb4:	095b      	lsrs	r3, r3, #5
   13fb6:	4a02      	ldr	r2, [pc, #8]	; (13fc0 <arch_irq_enable+0x1c>)
   13fb8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   13fbc:	4770      	bx	lr
   13fbe:	bf00      	nop
   13fc0:	e000e100 	.word	0xe000e100

00013fc4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   13fc4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   13fc6:	2b00      	cmp	r3, #0
   13fc8:	db0d      	blt.n	13fe6 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13fca:	2201      	movs	r2, #1
   13fcc:	095b      	lsrs	r3, r3, #5
   13fce:	f000 001f 	and.w	r0, r0, #31
   13fd2:	fa02 f000 	lsl.w	r0, r2, r0
   13fd6:	3320      	adds	r3, #32
   13fd8:	4a03      	ldr	r2, [pc, #12]	; (13fe8 <arch_irq_disable+0x24>)
   13fda:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   13fde:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13fe2:	f3bf 8f6f 	isb	sy
}
   13fe6:	4770      	bx	lr
   13fe8:	e000e100 	.word	0xe000e100

00013fec <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   13fec:	4b05      	ldr	r3, [pc, #20]	; (14004 <arch_irq_is_enabled+0x18>)
   13fee:	0942      	lsrs	r2, r0, #5
   13ff0:	f000 001f 	and.w	r0, r0, #31
   13ff4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13ff8:	2301      	movs	r3, #1
   13ffa:	fa03 f000 	lsl.w	r0, r3, r0
}
   13ffe:	4010      	ands	r0, r2
   14000:	4770      	bx	lr
   14002:	bf00      	nop
   14004:	e000e100 	.word	0xe000e100

00014008 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   14008:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1400a:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
   1400c:	bf54      	ite	pl
   1400e:	3102      	addpl	r1, #2
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   14010:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   14012:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14014:	bfac      	ite	ge
   14016:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1401a:	4a07      	ldrlt	r2, [pc, #28]	; (14038 <z_arm_irq_priority_set+0x30>)
   1401c:	ea4f 1341 	mov.w	r3, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14020:	bfac      	ite	ge
   14022:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14026:	f000 000f 	andlt.w	r0, r0, #15
   1402a:	b2db      	uxtb	r3, r3
   1402c:	bfb4      	ite	lt
   1402e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14030:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
   14034:	4770      	bx	lr
   14036:	bf00      	nop
   14038:	e000ed14 	.word	0xe000ed14

0001403c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   1403c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   1403e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   14040:	4b04      	ldr	r3, [pc, #16]	; (14054 <_arch_isr_direct_pm+0x18>)
   14042:	699a      	ldr	r2, [r3, #24]
   14044:	b11a      	cbz	r2, 1404e <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   14046:	2200      	movs	r2, #0
   14048:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   1404a:	f00e fc40 	bl	228ce <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   1404e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   14050:	bd08      	pop	{r3, pc}
   14052:	bf00      	nop
   14054:	2000279c 	.word	0x2000279c

00014058 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   14058:	bf30      	wfi
    b z_SysNmiOnReset
   1405a:	f7ff bffd 	b.w	14058 <z_SysNmiOnReset>
   1405e:	bf00      	nop

00014060 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14060:	4a0b      	ldr	r2, [pc, #44]	; (14090 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   14062:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14064:	4b0b      	ldr	r3, [pc, #44]	; (14094 <z_arm_prep_c+0x34>)
   14066:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1406a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   1406c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14070:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   14074:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   14078:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1407c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   14080:	f008 fd60 	bl	1cb44 <z_bss_zero>
	z_data_copy();
   14084:	f009 ff1e 	bl	1dec4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   14088:	f000 fbea 	bl	14860 <z_arm_interrupt_init>
	z_cstart();
   1408c:	f008 fd64 	bl	1cb58 <z_cstart>
   14090:	00000000 	.word	0x00000000
   14094:	e000ed00 	.word	0xe000ed00

00014098 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   14098:	4a0a      	ldr	r2, [pc, #40]	; (140c4 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1409a:	490b      	ldr	r1, [pc, #44]	; (140c8 <arch_swap+0x30>)
	_current->arch.basepri = key;
   1409c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1409e:	6809      	ldr	r1, [r1, #0]
   140a0:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   140a4:	4909      	ldr	r1, [pc, #36]	; (140cc <arch_swap+0x34>)
	_current->arch.basepri = key;
   140a6:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   140aa:	684b      	ldr	r3, [r1, #4]
   140ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   140b0:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   140b2:	2300      	movs	r3, #0
   140b4:	f383 8811 	msr	BASEPRI, r3
   140b8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   140bc:	6893      	ldr	r3, [r2, #8]
}
   140be:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   140c2:	4770      	bx	lr
   140c4:	2000279c 	.word	0x2000279c
   140c8:	00024364 	.word	0x00024364
   140cc:	e000ed00 	.word	0xe000ed00

000140d0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   140d0:	4913      	ldr	r1, [pc, #76]	; (14120 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   140d2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   140d4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   140d8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   140da:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   140de:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   140e2:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   140e4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   140e8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   140ec:	4f0d      	ldr	r7, [pc, #52]	; (14124 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   140ee:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   140f2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   140f4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   140f6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   140f8:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   140fc:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   140fe:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   14102:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   14106:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   14108:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   1410a:	f000 fc47 	bl	1499c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   1410e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   14112:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   14116:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1411a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1411e:	4770      	bx	lr
    ldr r1, =_kernel
   14120:	2000279c 	.word	0x2000279c
    ldr v4, =_SCS_ICSR
   14124:	e000ed04 	.word	0xe000ed04

00014128 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   14128:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1412c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1412e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   14132:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   14136:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   14138:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1413c:	2902      	cmp	r1, #2
    beq _oops
   1413e:	d0ff      	beq.n	14140 <_oops>

00014140 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   14140:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   14142:	f00c fc8f 	bl	20a64 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   14146:	bd01      	pop	{r0, pc}

00014148 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   14148:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   1414c:	9b00      	ldr	r3, [sp, #0]
   1414e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   14152:	490a      	ldr	r1, [pc, #40]	; (1417c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   14154:	9b01      	ldr	r3, [sp, #4]
   14156:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1415a:	9b02      	ldr	r3, [sp, #8]
   1415c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   14160:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   14164:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   14168:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   1416c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   14170:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   14172:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   14174:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   14176:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1417a:	4770      	bx	lr
   1417c:	0001e65d 	.word	0x0001e65d

00014180 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   14180:	4a0c      	ldr	r2, [pc, #48]	; (141b4 <z_check_thread_stack_fail+0x34>)
{
   14182:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   14184:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   14186:	b198      	cbz	r0, 141b0 <z_check_thread_stack_fail+0x30>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   14188:	f113 0f16 	cmn.w	r3, #22
   1418c:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   14190:	d005      	beq.n	1419e <z_check_thread_stack_fail+0x1e>
   14192:	f1a0 0220 	sub.w	r2, r0, #32
   14196:	429a      	cmp	r2, r3
   14198:	d806      	bhi.n	141a8 <z_check_thread_stack_fail+0x28>
   1419a:	4283      	cmp	r3, r0
   1419c:	d204      	bcs.n	141a8 <z_check_thread_stack_fail+0x28>
   1419e:	4281      	cmp	r1, r0
   141a0:	bf2c      	ite	cs
   141a2:	2100      	movcs	r1, #0
   141a4:	2101      	movcc	r1, #1
   141a6:	e000      	b.n	141aa <z_check_thread_stack_fail+0x2a>
   141a8:	2100      	movs	r1, #0
   141aa:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   141ac:	bf08      	it	eq
   141ae:	2000      	moveq	r0, #0
}
   141b0:	4770      	bx	lr
   141b2:	bf00      	nop
   141b4:	2000279c 	.word	0x2000279c

000141b8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   141b8:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   141ba:	4b09      	ldr	r3, [pc, #36]	; (141e0 <arch_switch_to_main_thread+0x28>)
   141bc:	6098      	str	r0, [r3, #8]
{
   141be:	460d      	mov	r5, r1
   141c0:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   141c2:	f000 fbeb 	bl	1499c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   141c6:	4620      	mov	r0, r4
   141c8:	f385 8809 	msr	PSP, r5
   141cc:	2100      	movs	r1, #0
   141ce:	b663      	cpsie	if
   141d0:	f381 8811 	msr	BASEPRI, r1
   141d4:	f3bf 8f6f 	isb	sy
   141d8:	2200      	movs	r2, #0
   141da:	2300      	movs	r3, #0
   141dc:	f00a fa3e 	bl	1e65c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   141e0:	2000279c 	.word	0x2000279c

000141e4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   141e4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   141e6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   141e8:	4a0b      	ldr	r2, [pc, #44]	; (14218 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   141ea:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   141ec:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   141ee:	bf1e      	ittt	ne
	movne	r1, #0
   141f0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   141f2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   141f4:	f00e fb6b 	blne	228ce <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   141f8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   141fa:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   141fe:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   14202:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   14206:	4905      	ldr	r1, [pc, #20]	; (1421c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   14208:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1420a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   1420c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1420e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   14212:	4903      	ldr	r1, [pc, #12]	; (14220 <_isr_wrapper+0x3c>)
	bx r1
   14214:	4708      	bx	r1
   14216:	0000      	.short	0x0000
	ldr r2, =_kernel
   14218:	2000279c 	.word	0x2000279c
	ldr r1, =_sw_isr_table
   1421c:	000233b4 	.word	0x000233b4
	ldr r1, =z_arm_int_exit
   14220:	00014225 	.word	0x00014225

00014224 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   14224:	4b04      	ldr	r3, [pc, #16]	; (14238 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   14226:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   14228:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   1422a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   1422c:	d003      	beq.n	14236 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1422e:	4903      	ldr	r1, [pc, #12]	; (1423c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   14230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   14234:	600a      	str	r2, [r1, #0]

00014236 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   14236:	4770      	bx	lr
	ldr r3, =_kernel
   14238:	2000279c 	.word	0x2000279c
	ldr r1, =_SCS_ICSR
   1423c:	e000ed04 	.word	0xe000ed04

00014240 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   14240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   14244:	4c4d      	ldr	r4, [pc, #308]	; (1437c <mem_manage_fault+0x13c>)
   14246:	6823      	ldr	r3, [r4, #0]
{
   14248:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   1424a:	0759      	lsls	r1, r3, #29
{
   1424c:	4607      	mov	r7, r0
   1424e:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   14250:	d008      	beq.n	14264 <mem_manage_fault+0x24>
   14252:	494b      	ldr	r1, [pc, #300]	; (14380 <mem_manage_fault+0x140>)
   14254:	484b      	ldr	r0, [pc, #300]	; (14384 <mem_manage_fault+0x144>)
   14256:	1a61      	subs	r1, r4, r1
   14258:	0889      	lsrs	r1, r1, #2
   1425a:	0189      	lsls	r1, r1, #6
   1425c:	f041 0101 	orr.w	r1, r1, #1
   14260:	f00a fe69 	bl	1ef36 <log_0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14264:	4b48      	ldr	r3, [pc, #288]	; (14388 <mem_manage_fault+0x148>)
   14266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14268:	06da      	lsls	r2, r3, #27
   1426a:	d50b      	bpl.n	14284 <mem_manage_fault+0x44>
		PR_FAULT_INFO("  Stacking error (context area might be"
   1426c:	6823      	ldr	r3, [r4, #0]
   1426e:	075b      	lsls	r3, r3, #29
   14270:	d008      	beq.n	14284 <mem_manage_fault+0x44>
   14272:	4943      	ldr	r1, [pc, #268]	; (14380 <mem_manage_fault+0x140>)
   14274:	4845      	ldr	r0, [pc, #276]	; (1438c <mem_manage_fault+0x14c>)
   14276:	1a61      	subs	r1, r4, r1
   14278:	0889      	lsrs	r1, r1, #2
   1427a:	0189      	lsls	r1, r1, #6
   1427c:	f041 0101 	orr.w	r1, r1, #1
   14280:	f00a fe59 	bl	1ef36 <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   14284:	4b40      	ldr	r3, [pc, #256]	; (14388 <mem_manage_fault+0x148>)
   14286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14288:	071e      	lsls	r6, r3, #28
   1428a:	d50b      	bpl.n	142a4 <mem_manage_fault+0x64>
		PR_FAULT_INFO("  Unstacking error");
   1428c:	6823      	ldr	r3, [r4, #0]
   1428e:	0758      	lsls	r0, r3, #29
   14290:	d008      	beq.n	142a4 <mem_manage_fault+0x64>
   14292:	493b      	ldr	r1, [pc, #236]	; (14380 <mem_manage_fault+0x140>)
   14294:	483e      	ldr	r0, [pc, #248]	; (14390 <mem_manage_fault+0x150>)
   14296:	1a61      	subs	r1, r4, r1
   14298:	0889      	lsrs	r1, r1, #2
   1429a:	0189      	lsls	r1, r1, #6
   1429c:	f041 0101 	orr.w	r1, r1, #1
   142a0:	f00a fe49 	bl	1ef36 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   142a4:	4b38      	ldr	r3, [pc, #224]	; (14388 <mem_manage_fault+0x148>)
   142a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   142a8:	0799      	lsls	r1, r3, #30
   142aa:	d432      	bmi.n	14312 <mem_manage_fault+0xd2>
	uint32_t mmfar = -EINVAL;
   142ac:	f06f 0615 	mvn.w	r6, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   142b0:	4b35      	ldr	r3, [pc, #212]	; (14388 <mem_manage_fault+0x148>)
   142b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   142b4:	07d9      	lsls	r1, r3, #31
   142b6:	d50b      	bpl.n	142d0 <mem_manage_fault+0x90>
		PR_FAULT_INFO("  Instruction Access Violation");
   142b8:	6823      	ldr	r3, [r4, #0]
   142ba:	075a      	lsls	r2, r3, #29
   142bc:	d008      	beq.n	142d0 <mem_manage_fault+0x90>
   142be:	4930      	ldr	r1, [pc, #192]	; (14380 <mem_manage_fault+0x140>)
   142c0:	4834      	ldr	r0, [pc, #208]	; (14394 <mem_manage_fault+0x154>)
   142c2:	1a61      	subs	r1, r4, r1
   142c4:	0889      	lsrs	r1, r1, #2
   142c6:	0189      	lsls	r1, r1, #6
   142c8:	f041 0101 	orr.w	r1, r1, #1
   142cc:	f00a fe33 	bl	1ef36 <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   142d0:	4b2d      	ldr	r3, [pc, #180]	; (14388 <mem_manage_fault+0x148>)
   142d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   142d4:	069b      	lsls	r3, r3, #26
   142d6:	d50b      	bpl.n	142f0 <mem_manage_fault+0xb0>
		PR_FAULT_INFO(
   142d8:	6823      	ldr	r3, [r4, #0]
   142da:	0758      	lsls	r0, r3, #29
   142dc:	d008      	beq.n	142f0 <mem_manage_fault+0xb0>
   142de:	4928      	ldr	r1, [pc, #160]	; (14380 <mem_manage_fault+0x140>)
   142e0:	482d      	ldr	r0, [pc, #180]	; (14398 <mem_manage_fault+0x158>)
   142e2:	1a61      	subs	r1, r4, r1
   142e4:	0889      	lsrs	r1, r1, #2
   142e6:	0189      	lsls	r1, r1, #6
   142e8:	f041 0101 	orr.w	r1, r1, #1
   142ec:	f00a fe23 	bl	1ef36 <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   142f0:	4b25      	ldr	r3, [pc, #148]	; (14388 <mem_manage_fault+0x148>)
   142f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   142f4:	06d1      	lsls	r1, r2, #27
   142f6:	d433      	bmi.n	14360 <mem_manage_fault+0x120>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   142f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   142fa:	0792      	lsls	r2, r2, #30
   142fc:	d430      	bmi.n	14360 <mem_manage_fault+0x120>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   142fe:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   14300:	4a21      	ldr	r2, [pc, #132]	; (14388 <mem_manage_fault+0x148>)
   14302:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14304:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   14308:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   1430a:	2300      	movs	r3, #0
   1430c:	702b      	strb	r3, [r5, #0]

	return reason;
}
   1430e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
   14312:	6823      	ldr	r3, [r4, #0]
   14314:	075a      	lsls	r2, r3, #29
   14316:	d008      	beq.n	1432a <mem_manage_fault+0xea>
   14318:	4919      	ldr	r1, [pc, #100]	; (14380 <mem_manage_fault+0x140>)
   1431a:	4820      	ldr	r0, [pc, #128]	; (1439c <mem_manage_fault+0x15c>)
   1431c:	1a61      	subs	r1, r4, r1
   1431e:	0889      	lsrs	r1, r1, #2
   14320:	0189      	lsls	r1, r1, #6
   14322:	f041 0101 	orr.w	r1, r1, #1
   14326:	f00a fe06 	bl	1ef36 <log_0>
		uint32_t temp = SCB->MMFAR;
   1432a:	4b17      	ldr	r3, [pc, #92]	; (14388 <mem_manage_fault+0x148>)
   1432c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1432e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14330:	061b      	lsls	r3, r3, #24
   14332:	d5bb      	bpl.n	142ac <mem_manage_fault+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   14334:	6823      	ldr	r3, [r4, #0]
   14336:	0758      	lsls	r0, r3, #29
   14338:	d009      	beq.n	1434e <mem_manage_fault+0x10e>
   1433a:	4a11      	ldr	r2, [pc, #68]	; (14380 <mem_manage_fault+0x140>)
   1433c:	4818      	ldr	r0, [pc, #96]	; (143a0 <mem_manage_fault+0x160>)
   1433e:	1aa2      	subs	r2, r4, r2
   14340:	0892      	lsrs	r2, r2, #2
   14342:	0192      	lsls	r2, r2, #6
   14344:	f042 0201 	orr.w	r2, r2, #1
   14348:	4631      	mov	r1, r6
   1434a:	f00a fe01 	bl	1ef50 <log_1>
			if (from_hard_fault != 0) {
   1434e:	f1b8 0f00 	cmp.w	r8, #0
   14352:	d0ad      	beq.n	142b0 <mem_manage_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   14354:	4a0c      	ldr	r2, [pc, #48]	; (14388 <mem_manage_fault+0x148>)
   14356:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1435c:	6293      	str	r3, [r2, #40]	; 0x28
   1435e:	e7a7      	b.n	142b0 <mem_manage_fault+0x70>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   14360:	685b      	ldr	r3, [r3, #4]
   14362:	051b      	lsls	r3, r3, #20
   14364:	d5cb      	bpl.n	142fe <mem_manage_fault+0xbe>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   14366:	4639      	mov	r1, r7
   14368:	4630      	mov	r0, r6
   1436a:	f7ff ff09 	bl	14180 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   1436e:	2800      	cmp	r0, #0
   14370:	d0c5      	beq.n	142fe <mem_manage_fault+0xbe>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   14372:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   14376:	2002      	movs	r0, #2
   14378:	e7c2      	b.n	14300 <mem_manage_fault+0xc0>
   1437a:	bf00      	nop
   1437c:	20000698 	.word	0x20000698
   14380:	20000654 	.word	0x20000654
   14384:	00025a38 	.word	0x00025a38
   14388:	e000ed00 	.word	0xe000ed00
   1438c:	00025a4e 	.word	0x00025a4e
   14390:	00025a81 	.word	0x00025a81
   14394:	00025ac2 	.word	0x00025ac2
   14398:	00025ae1 	.word	0x00025ae1
   1439c:	00025a94 	.word	0x00025a94
   143a0:	00025aac 	.word	0x00025aac

000143a4 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   143a4:	b510      	push	{r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   143a6:	4c3b      	ldr	r4, [pc, #236]	; (14494 <usage_fault.isra.0+0xf0>)
   143a8:	6823      	ldr	r3, [r4, #0]
   143aa:	075b      	lsls	r3, r3, #29
   143ac:	d008      	beq.n	143c0 <usage_fault.isra.0+0x1c>
   143ae:	493a      	ldr	r1, [pc, #232]	; (14498 <usage_fault.isra.0+0xf4>)
   143b0:	483a      	ldr	r0, [pc, #232]	; (1449c <usage_fault.isra.0+0xf8>)
   143b2:	1a61      	subs	r1, r4, r1
   143b4:	0889      	lsrs	r1, r1, #2
   143b6:	0189      	lsls	r1, r1, #6
   143b8:	f041 0101 	orr.w	r1, r1, #1
   143bc:	f00a fdbb 	bl	1ef36 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   143c0:	4b37      	ldr	r3, [pc, #220]	; (144a0 <usage_fault.isra.0+0xfc>)
   143c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   143c4:	0198      	lsls	r0, r3, #6
   143c6:	d50b      	bpl.n	143e0 <usage_fault.isra.0+0x3c>
		PR_FAULT_INFO("  Division by zero");
   143c8:	6823      	ldr	r3, [r4, #0]
   143ca:	0759      	lsls	r1, r3, #29
   143cc:	d008      	beq.n	143e0 <usage_fault.isra.0+0x3c>
   143ce:	4932      	ldr	r1, [pc, #200]	; (14498 <usage_fault.isra.0+0xf4>)
   143d0:	4834      	ldr	r0, [pc, #208]	; (144a4 <usage_fault.isra.0+0x100>)
   143d2:	1a61      	subs	r1, r4, r1
   143d4:	0889      	lsrs	r1, r1, #2
   143d6:	0189      	lsls	r1, r1, #6
   143d8:	f041 0101 	orr.w	r1, r1, #1
   143dc:	f00a fdab 	bl	1ef36 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   143e0:	4b2f      	ldr	r3, [pc, #188]	; (144a0 <usage_fault.isra.0+0xfc>)
   143e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   143e4:	01da      	lsls	r2, r3, #7
   143e6:	d50b      	bpl.n	14400 <usage_fault.isra.0+0x5c>
		PR_FAULT_INFO("  Unaligned memory access");
   143e8:	6823      	ldr	r3, [r4, #0]
   143ea:	075b      	lsls	r3, r3, #29
   143ec:	d008      	beq.n	14400 <usage_fault.isra.0+0x5c>
   143ee:	492a      	ldr	r1, [pc, #168]	; (14498 <usage_fault.isra.0+0xf4>)
   143f0:	482d      	ldr	r0, [pc, #180]	; (144a8 <usage_fault.isra.0+0x104>)
   143f2:	1a61      	subs	r1, r4, r1
   143f4:	0889      	lsrs	r1, r1, #2
   143f6:	0189      	lsls	r1, r1, #6
   143f8:	f041 0101 	orr.w	r1, r1, #1
   143fc:	f00a fd9b 	bl	1ef36 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   14400:	4b27      	ldr	r3, [pc, #156]	; (144a0 <usage_fault.isra.0+0xfc>)
   14402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14404:	0318      	lsls	r0, r3, #12
   14406:	d50b      	bpl.n	14420 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  No coprocessor instructions");
   14408:	6823      	ldr	r3, [r4, #0]
   1440a:	0759      	lsls	r1, r3, #29
   1440c:	d008      	beq.n	14420 <usage_fault.isra.0+0x7c>
   1440e:	4922      	ldr	r1, [pc, #136]	; (14498 <usage_fault.isra.0+0xf4>)
   14410:	4826      	ldr	r0, [pc, #152]	; (144ac <usage_fault.isra.0+0x108>)
   14412:	1a61      	subs	r1, r4, r1
   14414:	0889      	lsrs	r1, r1, #2
   14416:	0189      	lsls	r1, r1, #6
   14418:	f041 0101 	orr.w	r1, r1, #1
   1441c:	f00a fd8b 	bl	1ef36 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   14420:	4b1f      	ldr	r3, [pc, #124]	; (144a0 <usage_fault.isra.0+0xfc>)
   14422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14424:	035a      	lsls	r2, r3, #13
   14426:	d50b      	bpl.n	14440 <usage_fault.isra.0+0x9c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   14428:	6823      	ldr	r3, [r4, #0]
   1442a:	075b      	lsls	r3, r3, #29
   1442c:	d008      	beq.n	14440 <usage_fault.isra.0+0x9c>
   1442e:	491a      	ldr	r1, [pc, #104]	; (14498 <usage_fault.isra.0+0xf4>)
   14430:	481f      	ldr	r0, [pc, #124]	; (144b0 <usage_fault.isra.0+0x10c>)
   14432:	1a61      	subs	r1, r4, r1
   14434:	0889      	lsrs	r1, r1, #2
   14436:	0189      	lsls	r1, r1, #6
   14438:	f041 0101 	orr.w	r1, r1, #1
   1443c:	f00a fd7b 	bl	1ef36 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   14440:	4b17      	ldr	r3, [pc, #92]	; (144a0 <usage_fault.isra.0+0xfc>)
   14442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14444:	0398      	lsls	r0, r3, #14
   14446:	d50b      	bpl.n	14460 <usage_fault.isra.0+0xbc>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   14448:	6823      	ldr	r3, [r4, #0]
   1444a:	0759      	lsls	r1, r3, #29
   1444c:	d008      	beq.n	14460 <usage_fault.isra.0+0xbc>
   1444e:	4912      	ldr	r1, [pc, #72]	; (14498 <usage_fault.isra.0+0xf4>)
   14450:	4818      	ldr	r0, [pc, #96]	; (144b4 <usage_fault.isra.0+0x110>)
   14452:	1a61      	subs	r1, r4, r1
   14454:	0889      	lsrs	r1, r1, #2
   14456:	0189      	lsls	r1, r1, #6
   14458:	f041 0101 	orr.w	r1, r1, #1
   1445c:	f00a fd6b 	bl	1ef36 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   14460:	4b0f      	ldr	r3, [pc, #60]	; (144a0 <usage_fault.isra.0+0xfc>)
   14462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14464:	03da      	lsls	r2, r3, #15
   14466:	d50b      	bpl.n	14480 <usage_fault.isra.0+0xdc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   14468:	6823      	ldr	r3, [r4, #0]
   1446a:	075b      	lsls	r3, r3, #29
   1446c:	d008      	beq.n	14480 <usage_fault.isra.0+0xdc>
   1446e:	490a      	ldr	r1, [pc, #40]	; (14498 <usage_fault.isra.0+0xf4>)
   14470:	4811      	ldr	r0, [pc, #68]	; (144b8 <usage_fault.isra.0+0x114>)
   14472:	1a61      	subs	r1, r4, r1
   14474:	0889      	lsrs	r1, r1, #2
   14476:	0189      	lsls	r1, r1, #6
   14478:	f041 0101 	orr.w	r1, r1, #1
   1447c:	f00a fd5b 	bl	1ef36 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   14480:	4a07      	ldr	r2, [pc, #28]	; (144a0 <usage_fault.isra.0+0xfc>)
   14482:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14484:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   14488:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1448c:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   1448e:	2000      	movs	r0, #0
   14490:	bd10      	pop	{r4, pc}
   14492:	bf00      	nop
   14494:	20000698 	.word	0x20000698
   14498:	20000654 	.word	0x20000654
   1449c:	00025b10 	.word	0x00025b10
   144a0:	e000ed00 	.word	0xe000ed00
   144a4:	00025b28 	.word	0x00025b28
   144a8:	00025b3b 	.word	0x00025b3b
   144ac:	00025b55 	.word	0x00025b55
   144b0:	00025b73 	.word	0x00025b73
   144b4:	00025b98 	.word	0x00025b98
   144b8:	00025bb2 	.word	0x00025bb2

000144bc <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   144bc:	b570      	push	{r4, r5, r6, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
   144be:	4c46      	ldr	r4, [pc, #280]	; (145d8 <bus_fault.isra.0+0x11c>)
   144c0:	6823      	ldr	r3, [r4, #0]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   144c2:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   144c4:	0759      	lsls	r1, r3, #29
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   144c6:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   144c8:	d008      	beq.n	144dc <bus_fault.isra.0+0x20>
   144ca:	4944      	ldr	r1, [pc, #272]	; (145dc <bus_fault.isra.0+0x120>)
   144cc:	4844      	ldr	r0, [pc, #272]	; (145e0 <bus_fault.isra.0+0x124>)
   144ce:	1a61      	subs	r1, r4, r1
   144d0:	0889      	lsrs	r1, r1, #2
   144d2:	0189      	lsls	r1, r1, #6
   144d4:	f041 0101 	orr.w	r1, r1, #1
   144d8:	f00a fd2d 	bl	1ef36 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   144dc:	4b41      	ldr	r3, [pc, #260]	; (145e4 <bus_fault.isra.0+0x128>)
   144de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   144e0:	04da      	lsls	r2, r3, #19
   144e2:	d50b      	bpl.n	144fc <bus_fault.isra.0+0x40>
		PR_FAULT_INFO("  Stacking error");
   144e4:	6823      	ldr	r3, [r4, #0]
   144e6:	075b      	lsls	r3, r3, #29
   144e8:	d008      	beq.n	144fc <bus_fault.isra.0+0x40>
   144ea:	493c      	ldr	r1, [pc, #240]	; (145dc <bus_fault.isra.0+0x120>)
   144ec:	483e      	ldr	r0, [pc, #248]	; (145e8 <bus_fault.isra.0+0x12c>)
   144ee:	1a61      	subs	r1, r4, r1
   144f0:	0889      	lsrs	r1, r1, #2
   144f2:	0189      	lsls	r1, r1, #6
   144f4:	f041 0101 	orr.w	r1, r1, #1
   144f8:	f00a fd1d 	bl	1ef36 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   144fc:	4b39      	ldr	r3, [pc, #228]	; (145e4 <bus_fault.isra.0+0x128>)
   144fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14500:	0518      	lsls	r0, r3, #20
   14502:	d50b      	bpl.n	1451c <bus_fault.isra.0+0x60>
		PR_FAULT_INFO("  Unstacking error");
   14504:	6823      	ldr	r3, [r4, #0]
   14506:	0759      	lsls	r1, r3, #29
   14508:	d008      	beq.n	1451c <bus_fault.isra.0+0x60>
   1450a:	4934      	ldr	r1, [pc, #208]	; (145dc <bus_fault.isra.0+0x120>)
   1450c:	4837      	ldr	r0, [pc, #220]	; (145ec <bus_fault.isra.0+0x130>)
   1450e:	1a61      	subs	r1, r4, r1
   14510:	0889      	lsrs	r1, r1, #2
   14512:	0189      	lsls	r1, r1, #6
   14514:	f041 0101 	orr.w	r1, r1, #1
   14518:	f00a fd0d 	bl	1ef36 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1451c:	4b31      	ldr	r3, [pc, #196]	; (145e4 <bus_fault.isra.0+0x128>)
   1451e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14520:	059a      	lsls	r2, r3, #22
   14522:	d522      	bpl.n	1456a <bus_fault.isra.0+0xae>
		PR_FAULT_INFO("  Precise data bus error");
   14524:	6823      	ldr	r3, [r4, #0]
   14526:	075b      	lsls	r3, r3, #29
   14528:	d008      	beq.n	1453c <bus_fault.isra.0+0x80>
   1452a:	492c      	ldr	r1, [pc, #176]	; (145dc <bus_fault.isra.0+0x120>)
   1452c:	4830      	ldr	r0, [pc, #192]	; (145f0 <bus_fault.isra.0+0x134>)
   1452e:	1a61      	subs	r1, r4, r1
   14530:	0889      	lsrs	r1, r1, #2
   14532:	0189      	lsls	r1, r1, #6
   14534:	f041 0101 	orr.w	r1, r1, #1
   14538:	f00a fcfd 	bl	1ef36 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   1453c:	4b29      	ldr	r3, [pc, #164]	; (145e4 <bus_fault.isra.0+0x128>)
   1453e:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   14540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14542:	0418      	lsls	r0, r3, #16
   14544:	d511      	bpl.n	1456a <bus_fault.isra.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   14546:	6823      	ldr	r3, [r4, #0]
   14548:	075a      	lsls	r2, r3, #29
   1454a:	d008      	beq.n	1455e <bus_fault.isra.0+0xa2>
   1454c:	4a23      	ldr	r2, [pc, #140]	; (145dc <bus_fault.isra.0+0x120>)
   1454e:	4829      	ldr	r0, [pc, #164]	; (145f4 <bus_fault.isra.0+0x138>)
   14550:	1aa2      	subs	r2, r4, r2
   14552:	0892      	lsrs	r2, r2, #2
   14554:	0192      	lsls	r2, r2, #6
   14556:	f042 0201 	orr.w	r2, r2, #1
   1455a:	f00a fcf9 	bl	1ef50 <log_1>
			if (from_hard_fault != 0) {
   1455e:	b126      	cbz	r6, 1456a <bus_fault.isra.0+0xae>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   14560:	4a20      	ldr	r2, [pc, #128]	; (145e4 <bus_fault.isra.0+0x128>)
   14562:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14564:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   14568:	6293      	str	r3, [r2, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1456a:	4b1e      	ldr	r3, [pc, #120]	; (145e4 <bus_fault.isra.0+0x128>)
   1456c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1456e:	055b      	lsls	r3, r3, #21
   14570:	d50b      	bpl.n	1458a <bus_fault.isra.0+0xce>
		PR_FAULT_INFO("  Imprecise data bus error");
   14572:	6823      	ldr	r3, [r4, #0]
   14574:	075e      	lsls	r6, r3, #29
   14576:	d008      	beq.n	1458a <bus_fault.isra.0+0xce>
   14578:	4918      	ldr	r1, [pc, #96]	; (145dc <bus_fault.isra.0+0x120>)
   1457a:	481f      	ldr	r0, [pc, #124]	; (145f8 <bus_fault.isra.0+0x13c>)
   1457c:	1a61      	subs	r1, r4, r1
   1457e:	0889      	lsrs	r1, r1, #2
   14580:	0189      	lsls	r1, r1, #6
   14582:	f041 0101 	orr.w	r1, r1, #1
   14586:	f00a fcd6 	bl	1ef36 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1458a:	4b16      	ldr	r3, [pc, #88]	; (145e4 <bus_fault.isra.0+0x128>)
   1458c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1458e:	05d0      	lsls	r0, r2, #23
   14590:	d513      	bpl.n	145ba <bus_fault.isra.0+0xfe>
		PR_FAULT_INFO("  Instruction bus error");
   14592:	6823      	ldr	r3, [r4, #0]
   14594:	0759      	lsls	r1, r3, #29
   14596:	d008      	beq.n	145aa <bus_fault.isra.0+0xee>
   14598:	4910      	ldr	r1, [pc, #64]	; (145dc <bus_fault.isra.0+0x120>)
   1459a:	4818      	ldr	r0, [pc, #96]	; (145fc <bus_fault.isra.0+0x140>)
   1459c:	1a64      	subs	r4, r4, r1
   1459e:	08a4      	lsrs	r4, r4, #2
   145a0:	01a4      	lsls	r4, r4, #6
   145a2:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   145a6:	f00a fcc6 	bl	1ef36 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   145aa:	4a0e      	ldr	r2, [pc, #56]	; (145e4 <bus_fault.isra.0+0x128>)
   145ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   145ae:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   145b0:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   145b4:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   145b6:	7028      	strb	r0, [r5, #0]
}
   145b8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   145ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   145bc:	049a      	lsls	r2, r3, #18
   145be:	d5f4      	bpl.n	145aa <bus_fault.isra.0+0xee>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   145c0:	6823      	ldr	r3, [r4, #0]
   145c2:	075b      	lsls	r3, r3, #29
   145c4:	d0f1      	beq.n	145aa <bus_fault.isra.0+0xee>
   145c6:	4905      	ldr	r1, [pc, #20]	; (145dc <bus_fault.isra.0+0x120>)
   145c8:	480d      	ldr	r0, [pc, #52]	; (14600 <bus_fault.isra.0+0x144>)
   145ca:	1a64      	subs	r4, r4, r1
   145cc:	08a4      	lsrs	r4, r4, #2
   145ce:	01a4      	lsls	r4, r4, #6
   145d0:	f044 0101 	orr.w	r1, r4, #1
   145d4:	e7e7      	b.n	145a6 <bus_fault.isra.0+0xea>
   145d6:	bf00      	nop
   145d8:	20000698 	.word	0x20000698
   145dc:	20000654 	.word	0x20000654
   145e0:	00025bdd 	.word	0x00025bdd
   145e4:	e000ed00 	.word	0xe000ed00
   145e8:	00025bf3 	.word	0x00025bf3
   145ec:	00025a81 	.word	0x00025a81
   145f0:	00025c04 	.word	0x00025c04
   145f4:	00025c1d 	.word	0x00025c1d
   145f8:	00025c32 	.word	0x00025c32
   145fc:	00025c4d 	.word	0x00025c4d
   14600:	00025ae1 	.word	0x00025ae1

00014604 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   14604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14608:	4b7d      	ldr	r3, [pc, #500]	; (14800 <z_arm_fault+0x1fc>)
   1460a:	685d      	ldr	r5, [r3, #4]
{
   1460c:	b08a      	sub	sp, #40	; 0x28
   1460e:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14610:	f3c5 0408 	ubfx	r4, r5, #0, #9
   14614:	2700      	movs	r7, #0
   14616:	f387 8811 	msr	BASEPRI, r7
   1461a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1461e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   14622:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   14626:	d111      	bne.n	1464c <z_arm_fault+0x48>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   14628:	f002 030c 	and.w	r3, r2, #12
   1462c:	2b08      	cmp	r3, #8
   1462e:	d10f      	bne.n	14650 <z_arm_fault+0x4c>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   14630:	4974      	ldr	r1, [pc, #464]	; (14804 <z_arm_fault+0x200>)
   14632:	680b      	ldr	r3, [r1, #0]
   14634:	f013 0307 	ands.w	r3, r3, #7
   14638:	d01c      	beq.n	14674 <z_arm_fault+0x70>
   1463a:	4b73      	ldr	r3, [pc, #460]	; (14808 <z_arm_fault+0x204>)
   1463c:	4873      	ldr	r0, [pc, #460]	; (1480c <z_arm_fault+0x208>)
   1463e:	1ac9      	subs	r1, r1, r3
   14640:	0889      	lsrs	r1, r1, #2
   14642:	0189      	lsls	r1, r1, #6
   14644:	f041 0101 	orr.w	r1, r1, #1
   14648:	f00a fc75 	bl	1ef36 <log_0>
		return NULL;
   1464c:	463e      	mov	r6, r7
   1464e:	e003      	b.n	14658 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   14650:	0713      	lsls	r3, r2, #28
   14652:	d401      	bmi.n	14658 <z_arm_fault+0x54>
			ptr_esf = (z_arch_esf_t *)msp;
   14654:	4606      	mov	r6, r0
			*nested_exc = true;
   14656:	2701      	movs	r7, #1
	*recoverable = false;
   14658:	2300      	movs	r3, #0
   1465a:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   1465e:	1ee3      	subs	r3, r4, #3
   14660:	2b09      	cmp	r3, #9
   14662:	f200 80b0 	bhi.w	147c6 <z_arm_fault+0x1c2>
   14666:	e8df f003 	tbb	[pc, r3]
   1466a:	9907      	.short	0x9907
   1466c:	aeae969d 	.word	0xaeae969d
   14670:	a1aeaeae 	.word	0xa1aeaeae
	*nested_exc = false;
   14674:	461f      	mov	r7, r3
   14676:	e7e9      	b.n	1464c <z_arm_fault+0x48>
	PR_FAULT_INFO("***** HARD FAULT *****");
   14678:	4d62      	ldr	r5, [pc, #392]	; (14804 <z_arm_fault+0x200>)
   1467a:	682b      	ldr	r3, [r5, #0]
   1467c:	075c      	lsls	r4, r3, #29
   1467e:	d008      	beq.n	14692 <z_arm_fault+0x8e>
   14680:	4961      	ldr	r1, [pc, #388]	; (14808 <z_arm_fault+0x204>)
   14682:	4863      	ldr	r0, [pc, #396]	; (14810 <z_arm_fault+0x20c>)
   14684:	1a69      	subs	r1, r5, r1
   14686:	0889      	lsrs	r1, r1, #2
   14688:	0189      	lsls	r1, r1, #6
   1468a:	f041 0101 	orr.w	r1, r1, #1
   1468e:	f00a fc52 	bl	1ef36 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14692:	4b5b      	ldr	r3, [pc, #364]	; (14800 <z_arm_fault+0x1fc>)
   14694:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
   14696:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1469a:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
   1469e:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   146a2:	d00e      	beq.n	146c2 <z_arm_fault+0xbe>
		PR_EXC("  Bus fault on vector table read");
   146a4:	682b      	ldr	r3, [r5, #0]
   146a6:	0758      	lsls	r0, r3, #29
   146a8:	d101      	bne.n	146ae <z_arm_fault+0xaa>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   146aa:	2400      	movs	r4, #0
   146ac:	e018      	b.n	146e0 <z_arm_fault+0xdc>
   146ae:	4956      	ldr	r1, [pc, #344]	; (14808 <z_arm_fault+0x204>)
		PR_EXC("  Bus fault on vector table read");
   146b0:	4858      	ldr	r0, [pc, #352]	; (14814 <z_arm_fault+0x210>)
   146b2:	1a69      	subs	r1, r5, r1
   146b4:	0889      	lsrs	r1, r1, #2
   146b6:	0189      	lsls	r1, r1, #6
   146b8:	f041 0101 	orr.w	r1, r1, #1
	PR_FAULT_INFO(
   146bc:	f00a fc3b 	bl	1ef36 <log_0>
   146c0:	e7f3      	b.n	146aa <z_arm_fault+0xa6>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   146c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   146c4:	2a00      	cmp	r2, #0
   146c6:	da25      	bge.n	14714 <z_arm_fault+0x110>
		PR_EXC("  Debug event");
   146c8:	682b      	ldr	r3, [r5, #0]
   146ca:	0759      	lsls	r1, r3, #29
   146cc:	d0ed      	beq.n	146aa <z_arm_fault+0xa6>
   146ce:	494e      	ldr	r1, [pc, #312]	; (14808 <z_arm_fault+0x204>)
   146d0:	4851      	ldr	r0, [pc, #324]	; (14818 <z_arm_fault+0x214>)
   146d2:	1a69      	subs	r1, r5, r1
   146d4:	0889      	lsrs	r1, r1, #2
   146d6:	0189      	lsls	r1, r1, #6
   146d8:	f041 0101 	orr.w	r1, r1, #1
   146dc:	f00a fc2b 	bl	1ef36 <log_0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   146e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   146e4:	b99b      	cbnz	r3, 1470e <z_arm_fault+0x10a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   146e6:	2220      	movs	r2, #32
   146e8:	4631      	mov	r1, r6
   146ea:	a802      	add	r0, sp, #8
   146ec:	f00c fb55 	bl	20d9a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   146f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   146f2:	2f00      	cmp	r7, #0
   146f4:	d07f      	beq.n	147f6 <z_arm_fault+0x1f2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   146f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
   146fa:	b922      	cbnz	r2, 14706 <z_arm_fault+0x102>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   146fc:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   14700:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14704:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   14706:	a902      	add	r1, sp, #8
   14708:	4620      	mov	r0, r4
   1470a:	f7ff fc07 	bl	13f1c <z_arm_fatal_error>
}
   1470e:	b00a      	add	sp, #40	; 0x28
   14710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   14714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14716:	005a      	lsls	r2, r3, #1
   14718:	d5c7      	bpl.n	146aa <z_arm_fault+0xa6>
		PR_EXC("  Fault escalation (see below)");
   1471a:	682b      	ldr	r3, [r5, #0]
   1471c:	075b      	lsls	r3, r3, #29
   1471e:	d008      	beq.n	14732 <z_arm_fault+0x12e>
   14720:	4939      	ldr	r1, [pc, #228]	; (14808 <z_arm_fault+0x204>)
   14722:	483e      	ldr	r0, [pc, #248]	; (1481c <z_arm_fault+0x218>)
   14724:	1a69      	subs	r1, r5, r1
   14726:	0889      	lsrs	r1, r1, #2
   14728:	0189      	lsls	r1, r1, #6
   1472a:	f041 0101 	orr.w	r1, r1, #1
   1472e:	f00a fc02 	bl	1ef36 <log_0>
	uint16_t fault_insn = *(ret_addr - 1);
   14732:	69b3      	ldr	r3, [r6, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   14734:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   14738:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1473c:	429a      	cmp	r2, r3
   1473e:	d00d      	beq.n	1475c <z_arm_fault+0x158>
		} else if (SCB_MMFSR != 0) {
   14740:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   14744:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   14748:	781b      	ldrb	r3, [r3, #0]
   1474a:	b1b3      	cbz	r3, 1477a <z_arm_fault+0x176>
			reason = mem_manage_fault(esf, 1, recoverable);
   1474c:	f10d 0207 	add.w	r2, sp, #7
   14750:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   14752:	4630      	mov	r0, r6
   14754:	f7ff fd74 	bl	14240 <mem_manage_fault>
   14758:	4604      	mov	r4, r0
		break;
   1475a:	e7c1      	b.n	146e0 <z_arm_fault+0xdc>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1475c:	682b      	ldr	r3, [r5, #0]
   1475e:	075c      	lsls	r4, r3, #29
   14760:	d009      	beq.n	14776 <z_arm_fault+0x172>
   14762:	4a29      	ldr	r2, [pc, #164]	; (14808 <z_arm_fault+0x204>)
   14764:	6831      	ldr	r1, [r6, #0]
   14766:	482e      	ldr	r0, [pc, #184]	; (14820 <z_arm_fault+0x21c>)
   14768:	1aaa      	subs	r2, r5, r2
   1476a:	0892      	lsrs	r2, r2, #2
   1476c:	0192      	lsls	r2, r2, #6
   1476e:	f042 0201 	orr.w	r2, r2, #1
   14772:	f00a fbed 	bl	1ef50 <log_1>
			reason = esf->basic.r0;
   14776:	6834      	ldr	r4, [r6, #0]
   14778:	e7b2      	b.n	146e0 <z_arm_fault+0xdc>
		} else if (SCB_BFSR != 0) {
   1477a:	4b2a      	ldr	r3, [pc, #168]	; (14824 <z_arm_fault+0x220>)
   1477c:	781b      	ldrb	r3, [r3, #0]
   1477e:	b12b      	cbz	r3, 1478c <z_arm_fault+0x188>
			reason = bus_fault(esf, 1, recoverable);
   14780:	f10d 0107 	add.w	r1, sp, #7
   14784:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   14786:	f7ff fe99 	bl	144bc <bus_fault.isra.0>
   1478a:	e7e5      	b.n	14758 <z_arm_fault+0x154>
		} else if (SCB_UFSR != 0) {
   1478c:	4b26      	ldr	r3, [pc, #152]	; (14828 <z_arm_fault+0x224>)
   1478e:	881b      	ldrh	r3, [r3, #0]
   14790:	b29b      	uxth	r3, r3
   14792:	2b00      	cmp	r3, #0
   14794:	d089      	beq.n	146aa <z_arm_fault+0xa6>
		reason = usage_fault(esf);
   14796:	f7ff fe05 	bl	143a4 <usage_fault.isra.0>
   1479a:	e7dd      	b.n	14758 <z_arm_fault+0x154>
		reason = mem_manage_fault(esf, 0, recoverable);
   1479c:	f10d 0207 	add.w	r2, sp, #7
   147a0:	2100      	movs	r1, #0
   147a2:	e7d6      	b.n	14752 <z_arm_fault+0x14e>
		reason = bus_fault(esf, 0, recoverable);
   147a4:	f10d 0107 	add.w	r1, sp, #7
   147a8:	2000      	movs	r0, #0
   147aa:	e7ec      	b.n	14786 <z_arm_fault+0x182>
	PR_FAULT_INFO(
   147ac:	4915      	ldr	r1, [pc, #84]	; (14804 <z_arm_fault+0x200>)
   147ae:	680b      	ldr	r3, [r1, #0]
   147b0:	0758      	lsls	r0, r3, #29
   147b2:	f43f af7a 	beq.w	146aa <z_arm_fault+0xa6>
   147b6:	4b14      	ldr	r3, [pc, #80]	; (14808 <z_arm_fault+0x204>)
   147b8:	481c      	ldr	r0, [pc, #112]	; (1482c <z_arm_fault+0x228>)
   147ba:	1ac9      	subs	r1, r1, r3
   147bc:	0889      	lsrs	r1, r1, #2
   147be:	0189      	lsls	r1, r1, #6
   147c0:	f041 0101 	orr.w	r1, r1, #1
   147c4:	e77a      	b.n	146bc <z_arm_fault+0xb8>
	PR_FAULT_INFO("***** %s %d) *****",
   147c6:	4b0f      	ldr	r3, [pc, #60]	; (14804 <z_arm_fault+0x200>)
   147c8:	681a      	ldr	r2, [r3, #0]
   147ca:	0752      	lsls	r2, r2, #29
   147cc:	f43f af6d 	beq.w	146aa <z_arm_fault+0xa6>
   147d0:	4a0d      	ldr	r2, [pc, #52]	; (14808 <z_arm_fault+0x204>)
   147d2:	4817      	ldr	r0, [pc, #92]	; (14830 <z_arm_fault+0x22c>)
   147d4:	4917      	ldr	r1, [pc, #92]	; (14834 <z_arm_fault+0x230>)
   147d6:	1a9b      	subs	r3, r3, r2
   147d8:	089b      	lsrs	r3, r3, #2
   147da:	f415 7ff8 	tst.w	r5, #496	; 0x1f0
   147de:	ea4f 1383 	mov.w	r3, r3, lsl #6
   147e2:	bf18      	it	ne
   147e4:	4601      	movne	r1, r0
   147e6:	f043 0301 	orr.w	r3, r3, #1
   147ea:	4813      	ldr	r0, [pc, #76]	; (14838 <z_arm_fault+0x234>)
   147ec:	f1a4 0210 	sub.w	r2, r4, #16
   147f0:	f00a fbc2 	bl	1ef78 <log_2>
   147f4:	e759      	b.n	146aa <z_arm_fault+0xa6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   147f6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   147fa:	f023 0301 	bic.w	r3, r3, #1
   147fe:	e781      	b.n	14704 <z_arm_fault+0x100>
   14800:	e000ed00 	.word	0xe000ed00
   14804:	20000698 	.word	0x20000698
   14808:	20000654 	.word	0x20000654
   1480c:	00025c65 	.word	0x00025c65
   14810:	00025c90 	.word	0x00025c90
   14814:	00025ca7 	.word	0x00025ca7
   14818:	00025cc8 	.word	0x00025cc8
   1481c:	00025cd6 	.word	0x00025cd6
   14820:	00025cf5 	.word	0x00025cf5
   14824:	e000ed29 	.word	0xe000ed29
   14828:	e000ed2a 	.word	0xe000ed2a
   1482c:	00025d11 	.word	0x00025d11
   14830:	00025d4a 	.word	0x00025d4a
   14834:	00025d35 	.word	0x00025d35
   14838:	00025d63 	.word	0x00025d63

0001483c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1483c:	4a02      	ldr	r2, [pc, #8]	; (14848 <z_arm_fault_init+0xc>)
   1483e:	6953      	ldr	r3, [r2, #20]
   14840:	f043 0310 	orr.w	r3, r3, #16
   14844:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   14846:	4770      	bx	lr
   14848:	e000ed00 	.word	0xe000ed00

0001484c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1484c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   14850:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   14854:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   14856:	4672      	mov	r2, lr
	bl z_arm_fault
   14858:	f7ff fed4 	bl	14604 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1485c:	bd01      	pop	{r0, pc}
   1485e:	bf00      	nop

00014860 <z_arm_interrupt_init>:
   14860:	4804      	ldr	r0, [pc, #16]	; (14874 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   14862:	2300      	movs	r3, #0
   14864:	2140      	movs	r1, #64	; 0x40
   14866:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   14868:	3301      	adds	r3, #1
   1486a:	2b27      	cmp	r3, #39	; 0x27
   1486c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   14870:	d1f9      	bne.n	14866 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   14872:	4770      	bx	lr
   14874:	e000e100 	.word	0xe000e100

00014878 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   14878:	2000      	movs	r0, #0
    msr CONTROL, r0
   1487a:	f380 8814 	msr	CONTROL, r0
    isb
   1487e:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   14882:	f00e fd21 	bl	232c8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   14886:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   14888:	4911      	ldr	r1, [pc, #68]	; (148d0 <__start+0x58>)
    str r0, [r1]
   1488a:	6008      	str	r0, [r1, #0]
    dsb
   1488c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   14890:	4810      	ldr	r0, [pc, #64]	; (148d4 <__start+0x5c>)
    msr msp, r0
   14892:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   14896:	f000 f831 	bl	148fc <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1489a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   1489c:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
   148a0:	480d      	ldr	r0, [pc, #52]	; (148d8 <__start+0x60>)
    ldr r1, =0xaa
   148a2:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   148a6:	f44f 6202 	mov.w	r2, #2080	; 0x820
    bl memset
   148aa:	f00c fa81 	bl	20db0 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   148ae:	480a      	ldr	r0, [pc, #40]	; (148d8 <__start+0x60>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   148b0:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   148b4:	1840      	adds	r0, r0, r1
    msr PSP, r0
   148b6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   148ba:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   148be:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   148c0:	4308      	orrs	r0, r1
    msr CONTROL, r0
   148c2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   148c6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   148ca:	f7ff fbc9 	bl	14060 <z_arm_prep_c>
   148ce:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   148d0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   148d4:	200053e0 	.word	0x200053e0
    ldr r0, =z_interrupt_stacks
   148d8:	20005560 	.word	0x20005560

000148dc <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   148dc:	4a06      	ldr	r2, [pc, #24]	; (148f8 <z_arm_clear_arm_mpu_config+0x1c>)
   148de:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
   148e0:	2300      	movs	r3, #0
	int num_regions =
   148e2:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   148e6:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   148e8:	428b      	cmp	r3, r1
   148ea:	d100      	bne.n	148ee <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   148ec:	4770      	bx	lr
  MPU->RNR = rnr;
   148ee:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   148f0:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   148f2:	3301      	adds	r3, #1
   148f4:	e7f8      	b.n	148e8 <z_arm_clear_arm_mpu_config+0xc>
   148f6:	bf00      	nop
   148f8:	e000ed90 	.word	0xe000ed90

000148fc <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   148fc:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   148fe:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   14900:	2300      	movs	r3, #0
   14902:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   14906:	f7ff ffe9 	bl	148dc <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   1490a:	4b14      	ldr	r3, [pc, #80]	; (1495c <z_arm_init_arch_hw_at_boot+0x60>)
   1490c:	f04f 32ff 	mov.w	r2, #4294967295
   14910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   14914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   14918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   1491c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   14920:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   14924:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   14928:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   1492c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   14930:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   14934:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   14938:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   1493c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   14940:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   14944:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   14948:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   1494c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   14950:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   14952:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14956:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   1495a:	bd08      	pop	{r3, pc}
   1495c:	e000e100 	.word	0xe000e100

00014960 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   14960:	4b06      	ldr	r3, [pc, #24]	; (1497c <z_impl_k_thread_abort+0x1c>)
   14962:	689b      	ldr	r3, [r3, #8]
   14964:	4283      	cmp	r3, r0
   14966:	d107      	bne.n	14978 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14968:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   1496c:	b123      	cbz	r3, 14978 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1496e:	4a04      	ldr	r2, [pc, #16]	; (14980 <z_impl_k_thread_abort+0x20>)
   14970:	6853      	ldr	r3, [r2, #4]
   14972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14976:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   14978:	f009 ba3c 	b.w	1ddf4 <z_thread_abort>
   1497c:	2000279c 	.word	0x2000279c
   14980:	e000ed00 	.word	0xe000ed00

00014984 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14984:	4b02      	ldr	r3, [pc, #8]	; (14990 <z_arm_configure_static_mpu_regions+0xc>)
   14986:	4a03      	ldr	r2, [pc, #12]	; (14994 <z_arm_configure_static_mpu_regions+0x10>)
   14988:	4803      	ldr	r0, [pc, #12]	; (14998 <z_arm_configure_static_mpu_regions+0x14>)
   1498a:	2101      	movs	r1, #1
   1498c:	f000 b88e 	b.w	14aac <arm_core_mpu_configure_static_mpu_regions>
   14990:	20010000 	.word	0x20010000
   14994:	20000000 	.word	0x20000000
   14998:	00023f08 	.word	0x00023f08

0001499c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   1499c:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   149a0:	4b05      	ldr	r3, [pc, #20]	; (149b8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
		guard_start = thread->stack_info.start - guard_size;
   149a2:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   149a4:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   149a6:	4a05      	ldr	r2, [pc, #20]	; (149bc <z_arm_configure_dynamic_mpu_regions+0x20>)
   149a8:	2120      	movs	r1, #32
   149aa:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   149ae:	4618      	mov	r0, r3
   149b0:	2101      	movs	r1, #1
   149b2:	f000 b885 	b.w	14ac0 <arm_core_mpu_configure_dynamic_mpu_regions>
   149b6:	bf00      	nop
   149b8:	20002560 	.word	0x20002560
   149bc:	150b0000 	.word	0x150b0000

000149c0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   149c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   149c2:	4f2c      	ldr	r7, [pc, #176]	; (14a74 <mpu_configure_regions+0xb4>)
   149c4:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   149c6:	2100      	movs	r1, #0
   149c8:	42b1      	cmp	r1, r6
   149ca:	db01      	blt.n	149d0 <mpu_configure_regions+0x10>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   149cc:	4610      	mov	r0, r2
   149ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
   149d0:	6844      	ldr	r4, [r0, #4]
   149d2:	2c00      	cmp	r4, #0
   149d4:	d04b      	beq.n	14a6e <mpu_configure_regions+0xae>
		if (do_sanity_check &&
   149d6:	b1c3      	cbz	r3, 14a0a <mpu_configure_regions+0x4a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   149d8:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   149dc:	ea14 0f0c 	tst.w	r4, ip
   149e0:	d00d      	beq.n	149fe <mpu_configure_regions+0x3e>
			LOG_ERR("Partition %u: sanity check failed.", i);
   149e2:	4a25      	ldr	r2, [pc, #148]	; (14a78 <mpu_configure_regions+0xb8>)
   149e4:	6813      	ldr	r3, [r2, #0]
   149e6:	0758      	lsls	r0, r3, #29
   149e8:	d026      	beq.n	14a38 <mpu_configure_regions+0x78>
   149ea:	4b24      	ldr	r3, [pc, #144]	; (14a7c <mpu_configure_regions+0xbc>)
   149ec:	4824      	ldr	r0, [pc, #144]	; (14a80 <mpu_configure_regions+0xc0>)
   149ee:	1ad2      	subs	r2, r2, r3
   149f0:	0892      	lsrs	r2, r2, #2
   149f2:	0192      	lsls	r2, r2, #6
   149f4:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   149f8:	f00a faaa 	bl	1ef50 <log_1>
		if (reg_index == -EINVAL) {
   149fc:	e01c      	b.n	14a38 <mpu_configure_regions+0x78>
		&&
   149fe:	2c1f      	cmp	r4, #31
   14a00:	d9ef      	bls.n	149e2 <mpu_configure_regions+0x22>
		((part->start & (part->size - 1U)) == 0U);
   14a02:	6805      	ldr	r5, [r0, #0]
		&&
   14a04:	ea1c 0f05 	tst.w	ip, r5
   14a08:	d1eb      	bne.n	149e2 <mpu_configure_regions+0x22>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   14a0a:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   14a0c:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   14a0e:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
   14a12:	6802      	ldr	r2, [r0, #0]
   14a14:	d913      	bls.n	14a3e <mpu_configure_regions+0x7e>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   14a16:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   14a1a:	d812      	bhi.n	14a42 <mpu_configure_regions+0x82>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   14a1c:	3c01      	subs	r4, #1
   14a1e:	fab4 f484 	clz	r4, r4
   14a22:	f1c4 041f 	rsb	r4, r4, #31
   14a26:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   14a28:	2d07      	cmp	r5, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   14a2a:	ea4c 0404 	orr.w	r4, ip, r4
   14a2e:	d913      	bls.n	14a58 <mpu_configure_regions+0x98>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14a30:	4a11      	ldr	r2, [pc, #68]	; (14a78 <mpu_configure_regions+0xb8>)
   14a32:	6813      	ldr	r3, [r2, #0]
   14a34:	075b      	lsls	r3, r3, #29
   14a36:	d106      	bne.n	14a46 <mpu_configure_regions+0x86>
			return -EINVAL;
   14a38:	f06f 0215 	mvn.w	r2, #21
   14a3c:	e7c6      	b.n	149cc <mpu_configure_regions+0xc>
		return REGION_32B;
   14a3e:	2408      	movs	r4, #8
   14a40:	e7f2      	b.n	14a28 <mpu_configure_regions+0x68>
		return REGION_4G;
   14a42:	243e      	movs	r4, #62	; 0x3e
   14a44:	e7f0      	b.n	14a28 <mpu_configure_regions+0x68>
   14a46:	4b0d      	ldr	r3, [pc, #52]	; (14a7c <mpu_configure_regions+0xbc>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14a48:	480e      	ldr	r0, [pc, #56]	; (14a84 <mpu_configure_regions+0xc4>)
   14a4a:	1ad2      	subs	r2, r2, r3
   14a4c:	0892      	lsrs	r2, r2, #2
   14a4e:	0192      	lsls	r2, r2, #6
   14a50:	f042 0201 	orr.w	r2, r2, #1
   14a54:	4629      	mov	r1, r5
   14a56:	e7cf      	b.n	149f8 <mpu_configure_regions+0x38>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14a58:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   14a5c:	432a      	orrs	r2, r5
   14a5e:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14a62:	f044 0401 	orr.w	r4, r4, #1
   14a66:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14a68:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14a6a:	613c      	str	r4, [r7, #16]
		reg_index++;
   14a6c:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
   14a6e:	3101      	adds	r1, #1
   14a70:	300c      	adds	r0, #12
   14a72:	e7a9      	b.n	149c8 <mpu_configure_regions+0x8>
   14a74:	e000ed90 	.word	0xe000ed90
   14a78:	2000068c 	.word	0x2000068c
   14a7c:	20000654 	.word	0x20000654
   14a80:	00025d7a 	.word	0x00025d7a
   14a84:	00025d9d 	.word	0x00025d9d

00014a88 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   14a88:	4b03      	ldr	r3, [pc, #12]	; (14a98 <arm_core_mpu_enable+0x10>)
   14a8a:	2205      	movs	r2, #5
   14a8c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   14a8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14a92:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   14a96:	4770      	bx	lr
   14a98:	e000ed90 	.word	0xe000ed90

00014a9c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   14a9c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   14aa0:	4b01      	ldr	r3, [pc, #4]	; (14aa8 <arm_core_mpu_disable+0xc>)
   14aa2:	2200      	movs	r2, #0
   14aa4:	605a      	str	r2, [r3, #4]
}
   14aa6:	4770      	bx	lr
   14aa8:	e000ed90 	.word	0xe000ed90

00014aac <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   14aac:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   14aae:	4c03      	ldr	r4, [pc, #12]	; (14abc <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   14ab0:	2301      	movs	r3, #1
   14ab2:	7822      	ldrb	r2, [r4, #0]
   14ab4:	f7ff ff84 	bl	149c0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   14ab8:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   14aba:	bd10      	pop	{r4, pc}
   14abc:	20002827 	.word	0x20002827

00014ac0 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   14ac0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   14ac2:	4a08      	ldr	r2, [pc, #32]	; (14ae4 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
   14ac4:	2300      	movs	r3, #0
   14ac6:	7812      	ldrb	r2, [r2, #0]
   14ac8:	f7ff ff7a 	bl	149c0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   14acc:	f110 0f16 	cmn.w	r0, #22
   14ad0:	d003      	beq.n	14ada <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
   14ad2:	4b05      	ldr	r3, [pc, #20]	; (14ae8 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
   14ad4:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   14ad6:	2807      	cmp	r0, #7
   14ad8:	dd00      	ble.n	14adc <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   14ada:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   14adc:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   14ade:	611a      	str	r2, [r3, #16]
   14ae0:	3001      	adds	r0, #1
   14ae2:	e7f8      	b.n	14ad6 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   14ae4:	20002827 	.word	0x20002827
   14ae8:	e000ed90 	.word	0xe000ed90

00014aec <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   14aec:	4913      	ldr	r1, [pc, #76]	; (14b3c <z_arm_mpu_init+0x50>)
   14aee:	6808      	ldr	r0, [r1, #0]
   14af0:	2808      	cmp	r0, #8
{
   14af2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   14af4:	d81e      	bhi.n	14b34 <z_arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   14af6:	f7ff ffd1 	bl	14a9c <arm_core_mpu_disable>
   14afa:	4c11      	ldr	r4, [pc, #68]	; (14b40 <z_arm_mpu_init+0x54>)
   14afc:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14afe:	2200      	movs	r2, #0
   14b00:	4290      	cmp	r0, r2
   14b02:	f101 010c 	add.w	r1, r1, #12
   14b06:	d105      	bne.n	14b14 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   14b08:	4b0e      	ldr	r3, [pc, #56]	; (14b44 <z_arm_mpu_init+0x58>)
   14b0a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   14b0c:	f7ff ffbc 	bl	14a88 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   14b10:	2000      	movs	r0, #0
}
   14b12:	bd10      	pop	{r4, pc}
   14b14:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14b16:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   14b1a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   14b1e:	4313      	orrs	r3, r2
   14b20:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14b24:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14b26:	f851 3c04 	ldr.w	r3, [r1, #-4]
   14b2a:	f043 0301 	orr.w	r3, r3, #1
   14b2e:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14b30:	3201      	adds	r2, #1
   14b32:	e7e5      	b.n	14b00 <z_arm_mpu_init+0x14>
		return -1;
   14b34:	f04f 30ff 	mov.w	r0, #4294967295
   14b38:	e7eb      	b.n	14b12 <z_arm_mpu_init+0x26>
   14b3a:	bf00      	nop
   14b3c:	00023f14 	.word	0x00023f14
   14b40:	e000ed90 	.word	0xe000ed90
   14b44:	20002827 	.word	0x20002827

00014b48 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   14b48:	4b01      	ldr	r3, [pc, #4]	; (14b50 <__stdout_hook_install+0x8>)
   14b4a:	6018      	str	r0, [r3, #0]
}
   14b4c:	4770      	bx	lr
   14b4e:	bf00      	nop
   14b50:	200004a0 	.word	0x200004a0

00014b54 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
   14b54:	b40c      	push	{r2, r3}
   14b56:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   14b58:	b909      	cbnz	r1, 14b5e <snprintf+0xa>
		str = &dummy; /* write final NUL to dummy, can't change *s */
   14b5a:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = str;
	p.len = (int) len;
   14b5e:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
   14b62:	ab07      	add	r3, sp, #28
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   14b64:	9a06      	ldr	r2, [sp, #24]
   14b66:	4806      	ldr	r0, [pc, #24]	; (14b80 <snprintf+0x2c>)
	va_start(vargs, format);
   14b68:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   14b6a:	a902      	add	r1, sp, #8
   14b6c:	f7fb fa3e 	bl	ffec <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
   14b70:	9b02      	ldr	r3, [sp, #8]
   14b72:	2200      	movs	r2, #0
   14b74:	701a      	strb	r2, [r3, #0]
	return r;
}
   14b76:	b005      	add	sp, #20
   14b78:	f85d eb04 	ldr.w	lr, [sp], #4
   14b7c:	b002      	add	sp, #8
   14b7e:	4770      	bx	lr
   14b80:	00020dc9 	.word	0x00020dc9

00014b84 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   14b84:	f04f 0340 	mov.w	r3, #64	; 0x40
   14b88:	f3ef 8211 	mrs	r2, BASEPRI
   14b8c:	f383 8812 	msr	BASEPRI_MAX, r3
   14b90:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   14b94:	4906      	ldr	r1, [pc, #24]	; (14bb0 <nordicsemi_nrf52_init+0x2c>)
   14b96:	2301      	movs	r3, #1
   14b98:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   14b9c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   14ba0:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   14ba4:	f382 8811 	msr	BASEPRI, r2
   14ba8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   14bac:	2000      	movs	r0, #0
   14bae:	4770      	bx	lr
   14bb0:	4001e000 	.word	0x4001e000

00014bb4 <sys_arch_reboot>:
    *p_gpregret = val;
   14bb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14bb8:	b2c0      	uxtb	r0, r0
   14bba:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   14bbe:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14bc2:	4905      	ldr	r1, [pc, #20]	; (14bd8 <sys_arch_reboot+0x24>)
   14bc4:	4b05      	ldr	r3, [pc, #20]	; (14bdc <sys_arch_reboot+0x28>)
   14bc6:	68ca      	ldr	r2, [r1, #12]
   14bc8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   14bcc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   14bce:	60cb      	str	r3, [r1, #12]
   14bd0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14bd4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14bd6:	e7fd      	b.n	14bd4 <sys_arch_reboot+0x20>
   14bd8:	e000ed00 	.word	0xe000ed00
   14bdc:	05fa0004 	.word	0x05fa0004

00014be0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   14be0:	b120      	cbz	r0, 14bec <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   14be2:	4b03      	ldr	r3, [pc, #12]	; (14bf0 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   14be4:	0180      	lsls	r0, r0, #6
   14be6:	f043 0301 	orr.w	r3, r3, #1
   14bea:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   14bec:	4770      	bx	lr
   14bee:	bf00      	nop
   14bf0:	00023750 	.word	0x00023750

00014bf4 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   14bf4:	4b0e      	ldr	r3, [pc, #56]	; (14c30 <bt_hex_real+0x3c>)
   14bf6:	2940      	cmp	r1, #64	; 0x40
{
   14bf8:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   14bfa:	bf28      	it	cs
   14bfc:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   14bfe:	4c0d      	ldr	r4, [pc, #52]	; (14c34 <bt_hex_real+0x40>)
   14c00:	1846      	adds	r6, r0, r1
   14c02:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   14c04:	42b0      	cmp	r0, r6
   14c06:	f103 0302 	add.w	r3, r3, #2
   14c0a:	d104      	bne.n	14c16 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   14c0c:	2300      	movs	r3, #0
   14c0e:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   14c12:	4807      	ldr	r0, [pc, #28]	; (14c30 <bt_hex_real+0x3c>)
   14c14:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   14c16:	7802      	ldrb	r2, [r0, #0]
   14c18:	0912      	lsrs	r2, r2, #4
   14c1a:	5ca2      	ldrb	r2, [r4, r2]
   14c1c:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   14c20:	f810 2b01 	ldrb.w	r2, [r0], #1
   14c24:	f002 020f 	and.w	r2, r2, #15
   14c28:	5ca2      	ldrb	r2, [r4, r2]
   14c2a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   14c2e:	e7e9      	b.n	14c04 <bt_hex_real+0x10>
   14c30:	20002828 	.word	0x20002828
   14c34:	00025e1b 	.word	0x00025e1b

00014c38 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   14c38:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   14c3a:	7803      	ldrb	r3, [r0, #0]
   14c3c:	b08b      	sub	sp, #44	; 0x2c
   14c3e:	4604      	mov	r4, r0
   14c40:	ad07      	add	r5, sp, #28
   14c42:	2b03      	cmp	r3, #3
   14c44:	d821      	bhi.n	14c8a <bt_addr_le_str_real+0x52>
   14c46:	e8df f003 	tbb	[pc, r3]
   14c4a:	1a02      	.short	0x1a02
   14c4c:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   14c4e:	4912      	ldr	r1, [pc, #72]	; (14c98 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   14c50:	4628      	mov	r0, r5
   14c52:	f00c f825 	bl	20ca0 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   14c56:	7863      	ldrb	r3, [r4, #1]
   14c58:	9304      	str	r3, [sp, #16]
   14c5a:	78a3      	ldrb	r3, [r4, #2]
   14c5c:	9303      	str	r3, [sp, #12]
   14c5e:	78e3      	ldrb	r3, [r4, #3]
   14c60:	9302      	str	r3, [sp, #8]
   14c62:	7923      	ldrb	r3, [r4, #4]
   14c64:	9301      	str	r3, [sp, #4]
   14c66:	7963      	ldrb	r3, [r4, #5]
   14c68:	9300      	str	r3, [sp, #0]
   14c6a:	4a0c      	ldr	r2, [pc, #48]	; (14c9c <bt_addr_le_str_real+0x64>)
   14c6c:	79a3      	ldrb	r3, [r4, #6]
   14c6e:	9505      	str	r5, [sp, #20]
   14c70:	211e      	movs	r1, #30
   14c72:	480b      	ldr	r0, [pc, #44]	; (14ca0 <bt_addr_le_str_real+0x68>)
   14c74:	f009 fc3a 	bl	1e4ec <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   14c78:	4809      	ldr	r0, [pc, #36]	; (14ca0 <bt_addr_le_str_real+0x68>)
   14c7a:	b00b      	add	sp, #44	; 0x2c
   14c7c:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   14c7e:	4909      	ldr	r1, [pc, #36]	; (14ca4 <bt_addr_le_str_real+0x6c>)
   14c80:	e7e6      	b.n	14c50 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   14c82:	4909      	ldr	r1, [pc, #36]	; (14ca8 <bt_addr_le_str_real+0x70>)
   14c84:	e7e4      	b.n	14c50 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   14c86:	4909      	ldr	r1, [pc, #36]	; (14cac <bt_addr_le_str_real+0x74>)
   14c88:	e7e2      	b.n	14c50 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   14c8a:	4a09      	ldr	r2, [pc, #36]	; (14cb0 <bt_addr_le_str_real+0x78>)
   14c8c:	210a      	movs	r1, #10
   14c8e:	4628      	mov	r0, r5
   14c90:	f009 fc2c 	bl	1e4ec <snprintk>
		break;
   14c94:	e7df      	b.n	14c56 <bt_addr_le_str_real+0x1e>
   14c96:	bf00      	nop
   14c98:	00025dd6 	.word	0x00025dd6
   14c9c:	00025df8 	.word	0x00025df8
   14ca0:	200028a9 	.word	0x200028a9
   14ca4:	00025ddd 	.word	0x00025ddd
   14ca8:	00025de4 	.word	0x00025de4
   14cac:	00025dee 	.word	0x00025dee
   14cb0:	0002696d 	.word	0x0002696d

00014cb4 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   14cb4:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
   14cb6:	7802      	ldrb	r2, [r0, #0]
   14cb8:	2a01      	cmp	r2, #1
{
   14cba:	4604      	mov	r4, r0
   14cbc:	460b      	mov	r3, r1
	switch (src->type) {
   14cbe:	d016      	beq.n	14cee <uuid_to_uuid128+0x3a>
   14cc0:	2a02      	cmp	r2, #2
   14cc2:	d02c      	beq.n	14d1e <uuid_to_uuid128+0x6a>
   14cc4:	b98a      	cbnz	r2, 14cea <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   14cc6:	4a19      	ldr	r2, [pc, #100]	; (14d2c <uuid_to_uuid128+0x78>)
   14cc8:	460d      	mov	r5, r1
   14cca:	f102 0710 	add.w	r7, r2, #16
   14cce:	6810      	ldr	r0, [r2, #0]
   14cd0:	6851      	ldr	r1, [r2, #4]
   14cd2:	462e      	mov	r6, r5
   14cd4:	c603      	stmia	r6!, {r0, r1}
   14cd6:	3208      	adds	r2, #8
   14cd8:	42ba      	cmp	r2, r7
   14cda:	4635      	mov	r5, r6
   14cdc:	d1f7      	bne.n	14cce <uuid_to_uuid128+0x1a>
   14cde:	7812      	ldrb	r2, [r2, #0]
   14ce0:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   14ce2:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   14ce4:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   14ce6:	0a12      	lsrs	r2, r2, #8
   14ce8:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   14cea:	bcf0      	pop	{r4, r5, r6, r7}
   14cec:	4770      	bx	lr
		*dst = uuid128_base;
   14cee:	4a0f      	ldr	r2, [pc, #60]	; (14d2c <uuid_to_uuid128+0x78>)
   14cf0:	460d      	mov	r5, r1
   14cf2:	f102 0710 	add.w	r7, r2, #16
   14cf6:	6810      	ldr	r0, [r2, #0]
   14cf8:	6851      	ldr	r1, [r2, #4]
   14cfa:	462e      	mov	r6, r5
   14cfc:	c603      	stmia	r6!, {r0, r1}
   14cfe:	3208      	adds	r2, #8
   14d00:	42ba      	cmp	r2, r7
   14d02:	4635      	mov	r5, r6
   14d04:	d1f7      	bne.n	14cf6 <uuid_to_uuid128+0x42>
   14d06:	7812      	ldrb	r2, [r2, #0]
   14d08:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   14d0a:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
   14d0c:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   14d0e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   14d12:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   14d14:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   14d16:	0a12      	lsrs	r2, r2, #8
   14d18:	7399      	strb	r1, [r3, #14]
   14d1a:	741a      	strb	r2, [r3, #16]
}
   14d1c:	e7e5      	b.n	14cea <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
   14d1e:	4601      	mov	r1, r0
}
   14d20:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
   14d22:	2211      	movs	r2, #17
   14d24:	4618      	mov	r0, r3
   14d26:	f00c b838 	b.w	20d9a <memcpy>
   14d2a:	bf00      	nop
   14d2c:	00025e33 	.word	0x00025e33

00014d30 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   14d30:	b538      	push	{r3, r4, r5, lr}
   14d32:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   14d34:	4805      	ldr	r0, [pc, #20]	; (14d4c <bt_buf_get_rx+0x1c>)
   14d36:	f00d f99a 	bl	2206e <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   14d3a:	4604      	mov	r4, r0
   14d3c:	b120      	cbz	r0, 14d48 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   14d3e:	2100      	movs	r1, #0
   14d40:	3008      	adds	r0, #8
   14d42:	f00d f9b3 	bl	220ac <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   14d46:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   14d48:	4620      	mov	r0, r4
   14d4a:	bd38      	pop	{r3, r4, r5, pc}
   14d4c:	2000088c 	.word	0x2000088c

00014d50 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   14d50:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   14d52:	490b      	ldr	r1, [pc, #44]	; (14d80 <bt_buf_get_cmd_complete+0x30>)
{
   14d54:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   14d56:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
{
   14d5a:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   14d5c:	b920      	cbnz	r0, 14d68 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   14d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   14d62:	2001      	movs	r0, #1
   14d64:	f7ff bfe4 	b.w	14d30 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   14d68:	f00d f9b1 	bl	220ce <net_buf_ref>
   14d6c:	2301      	movs	r3, #1
		buf->len = 0U;
   14d6e:	2100      	movs	r1, #0
   14d70:	7503      	strb	r3, [r0, #20]
   14d72:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   14d74:	4604      	mov	r4, r0
   14d76:	3008      	adds	r0, #8
   14d78:	f00d f998 	bl	220ac <net_buf_simple_reserve>
}
   14d7c:	4620      	mov	r0, r4
   14d7e:	bd10      	pop	{r4, pc}
   14d80:	200002a8 	.word	0x200002a8

00014d84 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   14d84:	b570      	push	{r4, r5, r6, lr}
   14d86:	4604      	mov	r4, r0
	switch (evt) {
   14d88:	2c0f      	cmp	r4, #15
{
   14d8a:	460d      	mov	r5, r1
   14d8c:	4610      	mov	r0, r2
   14d8e:	4619      	mov	r1, r3
	switch (evt) {
   14d90:	d805      	bhi.n	14d9e <bt_buf_get_evt+0x1a>
   14d92:	2c0d      	cmp	r4, #13
   14d94:	d912      	bls.n	14dbc <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   14d96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   14d9a:	f7ff bfd9 	b.w	14d50 <bt_buf_get_cmd_complete>
	switch (evt) {
   14d9e:	2c13      	cmp	r4, #19
   14da0:	d10c      	bne.n	14dbc <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   14da2:	480b      	ldr	r0, [pc, #44]	; (14dd0 <bt_buf_get_evt+0x4c>)
   14da4:	f00d f963 	bl	2206e <net_buf_alloc_fixed>
			if (buf) {
   14da8:	4604      	mov	r4, r0
   14daa:	b128      	cbz	r0, 14db8 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   14dac:	2100      	movs	r1, #0
   14dae:	3008      	adds	r0, #8
   14db0:	f00d f97c 	bl	220ac <net_buf_simple_reserve>
   14db4:	2301      	movs	r3, #1
   14db6:	7523      	strb	r3, [r4, #20]
}
   14db8:	4620      	mov	r0, r4
   14dba:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   14dbc:	4602      	mov	r2, r0
   14dbe:	460b      	mov	r3, r1
		if (discardable) {
   14dc0:	b10d      	cbz	r5, 14dc6 <bt_buf_get_evt+0x42>
   14dc2:	4804      	ldr	r0, [pc, #16]	; (14dd4 <bt_buf_get_evt+0x50>)
   14dc4:	e7ee      	b.n	14da4 <bt_buf_get_evt+0x20>
}
   14dc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   14dca:	2001      	movs	r0, #1
   14dcc:	f7ff bfb0 	b.w	14d30 <bt_buf_get_rx>
   14dd0:	200008b8 	.word	0x200008b8
   14dd4:	20000808 	.word	0x20000808

00014dd8 <hci_data_buf_overflow>:

static void hci_data_buf_overflow(struct net_buf *buf)
{
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;

	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   14dd8:	4a08      	ldr	r2, [pc, #32]	; (14dfc <hci_data_buf_overflow+0x24>)
   14dda:	6813      	ldr	r3, [r2, #0]
   14ddc:	f013 0f06 	tst.w	r3, #6
   14de0:	d00a      	beq.n	14df8 <hci_data_buf_overflow+0x20>
   14de2:	4907      	ldr	r1, [pc, #28]	; (14e00 <hci_data_buf_overflow+0x28>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   14de4:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   14de6:	4807      	ldr	r0, [pc, #28]	; (14e04 <hci_data_buf_overflow+0x2c>)
   14de8:	1a52      	subs	r2, r2, r1
   14dea:	0892      	lsrs	r2, r2, #2
   14dec:	0192      	lsls	r2, r2, #6
   14dee:	7819      	ldrb	r1, [r3, #0]
   14df0:	f042 0202 	orr.w	r2, r2, #2
   14df4:	f00a b8ac 	b.w	1ef50 <log_1>
}
   14df8:	4770      	bx	lr
   14dfa:	bf00      	nop
   14dfc:	20000664 	.word	0x20000664
   14e00:	20000654 	.word	0x20000654
   14e04:	00025e4b 	.word	0x00025e4b

00014e08 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   14e08:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   14e0a:	6883      	ldr	r3, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
   14e0c:	781a      	ldrb	r2, [r3, #0]
   14e0e:	b972      	cbnz	r2, 14e2e <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14e10:	f8b3 4001 	ldrh.w	r4, [r3, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   14e14:	4620      	mov	r0, r4
   14e16:	f002 fb65 	bl	174e4 <bt_conn_lookup_handle>
	if (!conn) {
   14e1a:	4605      	mov	r5, r0
   14e1c:	b940      	cbnz	r0, 14e30 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   14e1e:	4b08      	ldr	r3, [pc, #32]	; (14e40 <hci_disconn_complete_prio+0x38>)
   14e20:	881a      	ldrh	r2, [r3, #0]
   14e22:	b922      	cbnz	r2, 14e2e <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   14e24:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   14e28:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   14e2c:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   14e2e:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   14e30:	2101      	movs	r1, #1
   14e32:	f002 fb63 	bl	174fc <bt_conn_set_state>
	bt_conn_unref(conn);
   14e36:	4628      	mov	r0, r5
}
   14e38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   14e3c:	f00c b9e1 	b.w	21202 <bt_conn_unref>
   14e40:	200027e0 	.word	0x200027e0

00014e44 <le_data_len_change>:

#if defined(CONFIG_BT_DATA_LEN_UPDATE)
static void le_data_len_change(struct net_buf *buf)
{
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14e44:	6883      	ldr	r3, [r0, #8]
{
   14e46:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14e48:	881c      	ldrh	r4, [r3, #0]
	struct bt_conn *conn;

	conn = bt_conn_lookup_handle(handle);
   14e4a:	4620      	mov	r0, r4
   14e4c:	f002 fb4a 	bl	174e4 <bt_conn_lookup_handle>
	if (!conn) {
   14e50:	b978      	cbnz	r0, 14e72 <le_data_len_change+0x2e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14e52:	4a0a      	ldr	r2, [pc, #40]	; (14e7c <le_data_len_change+0x38>)
   14e54:	6813      	ldr	r3, [r2, #0]
   14e56:	075b      	lsls	r3, r3, #29
   14e58:	d00f      	beq.n	14e7a <le_data_len_change+0x36>
   14e5a:	4b09      	ldr	r3, [pc, #36]	; (14e80 <le_data_len_change+0x3c>)
   14e5c:	4809      	ldr	r0, [pc, #36]	; (14e84 <le_data_len_change+0x40>)
   14e5e:	1ad2      	subs	r2, r2, r3
   14e60:	0892      	lsrs	r2, r2, #2
   14e62:	0192      	lsls	r2, r2, #6
   14e64:	4621      	mov	r1, r4
   14e66:	f042 0201 	orr.w	r2, r2, #1
	conn->le.data_len.rx_max_time = max_rx_time;
	notify_le_data_len_updated(conn);
#endif

	bt_conn_unref(conn);
}
   14e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14e6e:	f00a b86f 	b.w	1ef50 <log_1>
}
   14e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   14e76:	f00c b9c4 	b.w	21202 <bt_conn_unref>
}
   14e7a:	bd10      	pop	{r4, pc}
   14e7c:	20000664 	.word	0x20000664
   14e80:	20000654 	.word	0x20000654
   14e84:	00025e73 	.word	0x00025e73

00014e88 <hci_hardware_error>:
	bt_conn_unref(conn);
}
#endif /* CONFIG_BT_REMOTE_VERSION */

static void hci_hardware_error(struct net_buf *buf)
{
   14e88:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   14e8a:	2101      	movs	r1, #1
   14e8c:	3008      	adds	r0, #8
   14e8e:	f00d f963 	bl	22158 <net_buf_simple_pull_mem>
	struct bt_hci_evt_hardware_error *evt;

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   14e92:	4a08      	ldr	r2, [pc, #32]	; (14eb4 <hci_hardware_error+0x2c>)
   14e94:	6813      	ldr	r3, [r2, #0]
   14e96:	075b      	lsls	r3, r3, #29
   14e98:	d00b      	beq.n	14eb2 <hci_hardware_error+0x2a>
   14e9a:	4b07      	ldr	r3, [pc, #28]	; (14eb8 <hci_hardware_error+0x30>)
   14e9c:	7801      	ldrb	r1, [r0, #0]
   14e9e:	4807      	ldr	r0, [pc, #28]	; (14ebc <hci_hardware_error+0x34>)
   14ea0:	1ad2      	subs	r2, r2, r3
   14ea2:	0892      	lsrs	r2, r2, #2
   14ea4:	0192      	lsls	r2, r2, #6
}
   14ea6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   14eaa:	f042 0201 	orr.w	r2, r2, #1
   14eae:	f00a b84f 	b.w	1ef50 <log_1>
}
   14eb2:	bd08      	pop	{r3, pc}
   14eb4:	20000664 	.word	0x20000664
   14eb8:	20000654 	.word	0x20000654
   14ebc:	00025e97 	.word	0x00025e97

00014ec0 <hci_vendor_event>:
	}
#endif /* CONFIG_BT_HCI_VS_EVT_USER */

	if (IS_ENABLED(CONFIG_BT_HCI_VS_EXT) && !handled) {
		/* do nothing at present time */
		BT_WARN("Unhandled vendor-specific event: %s",
   14ec0:	4b0c      	ldr	r3, [pc, #48]	; (14ef4 <hci_vendor_event+0x34>)
   14ec2:	681a      	ldr	r2, [r3, #0]
   14ec4:	f012 0f06 	tst.w	r2, #6
{
   14ec8:	b510      	push	{r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   14eca:	d012      	beq.n	14ef2 <hci_vendor_event+0x32>
   14ecc:	4c0a      	ldr	r4, [pc, #40]	; (14ef8 <hci_vendor_event+0x38>)
   14ece:	8981      	ldrh	r1, [r0, #12]
   14ed0:	6880      	ldr	r0, [r0, #8]
   14ed2:	1b1c      	subs	r4, r3, r4
   14ed4:	f7ff fe8e 	bl	14bf4 <bt_hex_real>
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   14ed8:	f7fb fd52 	bl	10980 <z_log_strdup>
   14edc:	08a4      	lsrs	r4, r4, #2
   14ede:	01a4      	lsls	r4, r4, #6
   14ee0:	f044 0402 	orr.w	r4, r4, #2
   14ee4:	4601      	mov	r1, r0
   14ee6:	4622      	mov	r2, r4
   14ee8:	4804      	ldr	r0, [pc, #16]	; (14efc <hci_vendor_event+0x3c>)
			bt_hex(buf->data, buf->len));
	}
}
   14eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   14eee:	f00a b82f 	b.w	1ef50 <log_1>
}
   14ef2:	bd10      	pop	{r4, pc}
   14ef4:	20000664 	.word	0x20000664
   14ef8:	20000654 	.word	0x20000654
   14efc:	00025eb9 	.word	0x00025eb9

00014f00 <handle_event>:
{
   14f00:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14f02:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   14f06:	4605      	mov	r5, r0
   14f08:	4608      	mov	r0, r1
		if (handler->event != event) {
   14f0a:	7811      	ldrb	r1, [r2, #0]
   14f0c:	42a9      	cmp	r1, r5
   14f0e:	d01e      	beq.n	14f4e <handle_event+0x4e>
	for (i = 0; i < num_handlers; i++) {
   14f10:	3208      	adds	r2, #8
   14f12:	4293      	cmp	r3, r2
   14f14:	d1f9      	bne.n	14f0a <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   14f16:	4b1b      	ldr	r3, [pc, #108]	; (14f84 <handle_event+0x84>)
   14f18:	681a      	ldr	r2, [r3, #0]
   14f1a:	f012 0f06 	tst.w	r2, #6
   14f1e:	d014      	beq.n	14f4a <handle_event+0x4a>
   14f20:	8986      	ldrh	r6, [r0, #12]
   14f22:	4c19      	ldr	r4, [pc, #100]	; (14f88 <handle_event+0x88>)
   14f24:	6880      	ldr	r0, [r0, #8]
   14f26:	4631      	mov	r1, r6
   14f28:	1b1c      	subs	r4, r3, r4
   14f2a:	f7ff fe63 	bl	14bf4 <bt_hex_real>
   14f2e:	f7fb fd27 	bl	10980 <z_log_strdup>
   14f32:	08a4      	lsrs	r4, r4, #2
   14f34:	01a4      	lsls	r4, r4, #6
   14f36:	f044 0402 	orr.w	r4, r4, #2
   14f3a:	4603      	mov	r3, r0
   14f3c:	f8ad 4000 	strh.w	r4, [sp]
   14f40:	4812      	ldr	r0, [pc, #72]	; (14f8c <handle_event+0x8c>)
   14f42:	4632      	mov	r2, r6
   14f44:	4629      	mov	r1, r5
   14f46:	f00a f830 	bl	1efaa <log_3>
}
   14f4a:	b002      	add	sp, #8
   14f4c:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
   14f4e:	8981      	ldrh	r1, [r0, #12]
   14f50:	7853      	ldrb	r3, [r2, #1]
   14f52:	428b      	cmp	r3, r1
   14f54:	d910      	bls.n	14f78 <handle_event+0x78>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   14f56:	4b0b      	ldr	r3, [pc, #44]	; (14f84 <handle_event+0x84>)
   14f58:	681a      	ldr	r2, [r3, #0]
   14f5a:	0752      	lsls	r2, r2, #29
   14f5c:	d0f5      	beq.n	14f4a <handle_event+0x4a>
   14f5e:	4a0a      	ldr	r2, [pc, #40]	; (14f88 <handle_event+0x88>)
   14f60:	480b      	ldr	r0, [pc, #44]	; (14f90 <handle_event+0x90>)
   14f62:	1a9b      	subs	r3, r3, r2
   14f64:	089b      	lsrs	r3, r3, #2
   14f66:	019b      	lsls	r3, r3, #6
   14f68:	f043 0301 	orr.w	r3, r3, #1
   14f6c:	462a      	mov	r2, r5
}
   14f6e:	b002      	add	sp, #8
   14f70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   14f74:	f00a b800 	b.w	1ef78 <log_2>
		handler->handler(buf);
   14f78:	6853      	ldr	r3, [r2, #4]
}
   14f7a:	b002      	add	sp, #8
   14f7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
   14f80:	4718      	bx	r3
   14f82:	bf00      	nop
   14f84:	20000664 	.word	0x20000664
   14f88:	20000654 	.word	0x20000654
   14f8c:	00025eff 	.word	0x00025eff
   14f90:	00025edd 	.word	0x00025edd

00014f94 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   14f94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f98:	4e4c      	ldr	r6, [pc, #304]	; (150cc <hci_rx_thread+0x138>)
   14f9a:	4d4d      	ldr	r5, [pc, #308]	; (150d0 <hci_rx_thread+0x13c>)

	BT_DBG("started");

	while (1) {
		BT_DBG("calling fifo_get_wait");
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   14f9c:	f8df a14c 	ldr.w	sl, [pc, #332]	; 150ec <hci_rx_thread+0x158>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   14fa0:	f8df b14c 	ldr.w	fp, [pc, #332]	; 150f0 <hci_rx_thread+0x15c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   14fa4:	f8df 814c 	ldr.w	r8, [pc, #332]	; 150f4 <hci_rx_thread+0x160>
   14fa8:	1b75      	subs	r5, r6, r5
   14faa:	08ad      	lsrs	r5, r5, #2
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   14fac:	f04f 32ff 	mov.w	r2, #4294967295
   14fb0:	f04f 33ff 	mov.w	r3, #4294967295
   14fb4:	4650      	mov	r0, sl
   14fb6:	f00d f85f 	bl	22078 <net_buf_get>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   14fba:	7d01      	ldrb	r1, [r0, #20]

		BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
		       buf->len);

		switch (bt_buf_get_type(buf)) {
   14fbc:	2901      	cmp	r1, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   14fbe:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   14fc0:	d04c      	beq.n	1505c <hci_rx_thread+0xc8>
   14fc2:	2903      	cmp	r1, #3
   14fc4:	d179      	bne.n	150ba <hci_rx_thread+0x126>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14fc6:	8983      	ldrh	r3, [r0, #12]
   14fc8:	2b03      	cmp	r3, #3
   14fca:	d80c      	bhi.n	14fe6 <hci_rx_thread+0x52>
   14fcc:	4941      	ldr	r1, [pc, #260]	; (150d4 <hci_rx_thread+0x140>)
   14fce:	4842      	ldr	r0, [pc, #264]	; (150d8 <hci_rx_thread+0x144>)
   14fd0:	f240 13b5 	movw	r3, #437	; 0x1b5
   14fd4:	4642      	mov	r2, r8
   14fd6:	f009 fa7c 	bl	1e4d2 <printk>
   14fda:	4040      	eors	r0, r0
   14fdc:	f380 8811 	msr	BASEPRI, r0
   14fe0:	f04f 0003 	mov.w	r0, #3
   14fe4:	df02      	svc	2
   14fe6:	2104      	movs	r1, #4
   14fe8:	f104 0008 	add.w	r0, r4, #8
   14fec:	f00d f8b4 	bl	22158 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   14ff0:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
   14ff2:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   14ff4:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   14ff8:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   14ffa:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
   14ffe:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
   15000:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   15002:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   15004:	d00c      	beq.n	15020 <hci_rx_thread+0x8c>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   15006:	6833      	ldr	r3, [r6, #0]
   15008:	0758      	lsls	r0, r3, #29
   1500a:	d005      	beq.n	15018 <hci_rx_thread+0x84>
   1500c:	01ab      	lsls	r3, r5, #6
   1500e:	4833      	ldr	r0, [pc, #204]	; (150dc <hci_rx_thread+0x148>)
   15010:	f043 0301 	orr.w	r3, r3, #1
   15014:	f009 ffb0 	bl	1ef78 <log_2>
		case BT_BUF_EVT:
			hci_event(buf);
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
   15018:	4620      	mov	r0, r4
   1501a:	f004 ff63 	bl	19ee4 <net_buf_unref>
			break;
   1501e:	e01a      	b.n	15056 <hci_rx_thread+0xc2>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   15020:	f002 fa60 	bl	174e4 <bt_conn_lookup_handle>
	if (!conn) {
   15024:	4607      	mov	r7, r0
   15026:	b950      	cbnz	r0, 1503e <hci_rx_thread+0xaa>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   15028:	6833      	ldr	r3, [r6, #0]
   1502a:	0759      	lsls	r1, r3, #29
   1502c:	d0f4      	beq.n	15018 <hci_rx_thread+0x84>
   1502e:	01aa      	lsls	r2, r5, #6
   15030:	8ae1      	ldrh	r1, [r4, #22]
   15032:	482b      	ldr	r0, [pc, #172]	; (150e0 <hci_rx_thread+0x14c>)
   15034:	f042 0201 	orr.w	r2, r2, #1
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   15038:	f009 ff8a 	bl	1ef50 <log_1>
   1503c:	e7ec      	b.n	15018 <hci_rx_thread+0x84>
	acl(buf)->index = bt_conn_index(conn);
   1503e:	f002 fb71 	bl	17724 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   15042:	ea4f 3219 	mov.w	r2, r9, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   15046:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   15048:	4621      	mov	r1, r4
   1504a:	4638      	mov	r0, r7
   1504c:	f002 f8fc 	bl	17248 <bt_conn_recv>
	bt_conn_unref(conn);
   15050:	4638      	mov	r0, r7
   15052:	f00c f8d6 	bl	21202 <bt_conn_unref>
	z_impl_k_yield();
   15056:	f008 fe0f 	bl	1dc78 <z_impl_k_yield>
	while (1) {
   1505a:	e7a7      	b.n	14fac <hci_rx_thread+0x18>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1505c:	8983      	ldrh	r3, [r0, #12]
   1505e:	2b01      	cmp	r3, #1
   15060:	d80c      	bhi.n	1507c <hci_rx_thread+0xe8>
   15062:	491c      	ldr	r1, [pc, #112]	; (150d4 <hci_rx_thread+0x140>)
   15064:	481c      	ldr	r0, [pc, #112]	; (150d8 <hci_rx_thread+0x144>)
   15066:	f640 1317 	movw	r3, #2327	; 0x917
   1506a:	4642      	mov	r2, r8
   1506c:	f009 fa31 	bl	1e4d2 <printk>
   15070:	4040      	eors	r0, r0
   15072:	f380 8811 	msr	BASEPRI, r0
   15076:	f04f 0003 	mov.w	r0, #3
   1507a:	df02      	svc	2
   1507c:	2102      	movs	r1, #2
   1507e:	f104 0008 	add.w	r0, r4, #8
   15082:	f00d f869 	bl	22158 <net_buf_simple_pull_mem>
   15086:	4607      	mov	r7, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   15088:	7800      	ldrb	r0, [r0, #0]
   1508a:	f00b ff28 	bl	20ede <bt_hci_evt_get_flags>
   1508e:	0782      	lsls	r2, r0, #30
   15090:	d40c      	bmi.n	150ac <hci_rx_thread+0x118>
   15092:	4914      	ldr	r1, [pc, #80]	; (150e4 <hci_rx_thread+0x150>)
   15094:	4810      	ldr	r0, [pc, #64]	; (150d8 <hci_rx_thread+0x144>)
   15096:	f640 131b 	movw	r3, #2331	; 0x91b
   1509a:	4642      	mov	r2, r8
   1509c:	f009 fa19 	bl	1e4d2 <printk>
   150a0:	4040      	eors	r0, r0
   150a2:	f380 8811 	msr	BASEPRI, r0
   150a6:	f04f 0003 	mov.w	r0, #3
   150aa:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   150ac:	7838      	ldrb	r0, [r7, #0]
   150ae:	2304      	movs	r3, #4
   150b0:	465a      	mov	r2, fp
   150b2:	4621      	mov	r1, r4
   150b4:	f7ff ff24 	bl	14f00 <handle_event>
	net_buf_unref(buf);
   150b8:	e7ae      	b.n	15018 <hci_rx_thread+0x84>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   150ba:	6833      	ldr	r3, [r6, #0]
   150bc:	075b      	lsls	r3, r3, #29
   150be:	d0ab      	beq.n	15018 <hci_rx_thread+0x84>
   150c0:	01aa      	lsls	r2, r5, #6
   150c2:	4809      	ldr	r0, [pc, #36]	; (150e8 <hci_rx_thread+0x154>)
   150c4:	f042 0201 	orr.w	r2, r2, #1
   150c8:	e7b6      	b.n	15038 <hci_rx_thread+0xa4>
   150ca:	bf00      	nop
   150cc:	20000664 	.word	0x20000664
   150d0:	20000654 	.word	0x20000654
   150d4:	00025f55 	.word	0x00025f55
   150d8:	00025f6e 	.word	0x00025f6e
   150dc:	00025f8b 	.word	0x00025f8b
   150e0:	00025faf 	.word	0x00025faf
   150e4:	00025fd1 	.word	0x00025fd1
   150e8:	00025fff 	.word	0x00025fff
   150ec:	200003dc 	.word	0x200003dc
   150f0:	00023fb4 	.word	0x00023fb4
   150f4:	00025f21 	.word	0x00025f21

000150f8 <hci_le_meta_event>:
{
   150f8:	b510      	push	{r4, lr}
   150fa:	2101      	movs	r1, #1
   150fc:	4604      	mov	r4, r0
   150fe:	3008      	adds	r0, #8
   15100:	f00d f82a 	bl	22158 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   15104:	4621      	mov	r1, r4
   15106:	4a03      	ldr	r2, [pc, #12]	; (15114 <hci_le_meta_event+0x1c>)
   15108:	7800      	ldrb	r0, [r0, #0]
}
   1510a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1510e:	2308      	movs	r3, #8
   15110:	f7ff bef6 	b.w	14f00 <handle_event>
   15114:	00023f64 	.word	0x00023f64

00015118 <hci_num_completed_packets>:
{
   15118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1511c:	4e3e      	ldr	r6, [pc, #248]	; (15218 <hci_num_completed_packets+0x100>)
   1511e:	4c3f      	ldr	r4, [pc, #252]	; (1521c <hci_num_completed_packets+0x104>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   15120:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
   15124:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 15224 <hci_num_completed_packets+0x10c>
   15128:	1b34      	subs	r4, r6, r4
   1512a:	08a3      	lsrs	r3, r4, #2
	for (i = 0; i < evt->num_handles; i++) {
   1512c:	2500      	movs	r5, #0
   1512e:	9301      	str	r3, [sp, #4]
			tx->pending_no_cb = 0U;
   15130:	46a9      	mov	r9, r5
	for (i = 0; i < evt->num_handles; i++) {
   15132:	f898 3000 	ldrb.w	r3, [r8]
   15136:	429d      	cmp	r5, r3
   15138:	db02      	blt.n	15140 <hci_num_completed_packets+0x28>
}
   1513a:	b003      	add	sp, #12
   1513c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   15140:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   15144:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   15148:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   1514c:	4658      	mov	r0, fp
   1514e:	f002 f9c9 	bl	174e4 <bt_conn_lookup_handle>
		if (!conn) {
   15152:	4604      	mov	r4, r0
   15154:	b1d8      	cbz	r0, 1518e <hci_num_completed_packets+0x76>
			k_work_submit(&conn->tx_complete_work);
   15156:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   1515a:	2f00      	cmp	r7, #0
   1515c:	d03b      	beq.n	151d6 <hci_num_completed_packets+0xbe>
	__asm__ volatile(
   1515e:	f04f 0240 	mov.w	r2, #64	; 0x40
   15162:	f3ef 8111 	mrs	r1, BASEPRI
   15166:	f382 8812 	msr	BASEPRI_MAX, r2
   1516a:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   1516e:	69e2      	ldr	r2, [r4, #28]
   15170:	b1d2      	cbz	r2, 151a8 <hci_num_completed_packets+0x90>
				conn->pending_no_cb--;
   15172:	3a01      	subs	r2, #1
   15174:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   15176:	f381 8811 	msr	BASEPRI, r1
   1517a:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   1517e:	4620      	mov	r0, r4
   15180:	f002 f82a 	bl	171d8 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   15184:	3f01      	subs	r7, #1
   15186:	f008 f901 	bl	1d38c <z_impl_k_sem_give>
   1518a:	b2bf      	uxth	r7, r7
   1518c:	e7e5      	b.n	1515a <hci_num_completed_packets+0x42>
			BT_ERR("No connection for handle %u", handle);
   1518e:	6833      	ldr	r3, [r6, #0]
   15190:	075a      	lsls	r2, r3, #29
   15192:	d007      	beq.n	151a4 <hci_num_completed_packets+0x8c>
   15194:	9b01      	ldr	r3, [sp, #4]
   15196:	4822      	ldr	r0, [pc, #136]	; (15220 <hci_num_completed_packets+0x108>)
   15198:	019a      	lsls	r2, r3, #6
   1519a:	f042 0201 	orr.w	r2, r2, #1
   1519e:	4659      	mov	r1, fp
   151a0:	f009 fed6 	bl	1ef50 <log_1>
	for (i = 0; i < evt->num_handles; i++) {
   151a4:	3501      	adds	r5, #1
   151a6:	e7c4      	b.n	15132 <hci_num_completed_packets+0x1a>
Z_GENLIST_IS_EMPTY(slist)
   151a8:	6962      	ldr	r2, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   151aa:	b12a      	cbz	r2, 151b8 <hci_num_completed_packets+0xa0>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   151ac:	69a0      	ldr	r0, [r4, #24]
   151ae:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   151b0:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   151b2:	4282      	cmp	r2, r0
	list->tail = node;
   151b4:	bf08      	it	eq
   151b6:	61a3      	streq	r3, [r4, #24]
   151b8:	f381 8811 	msr	BASEPRI, r1
   151bc:	f3bf 8f6f 	isb	sy
			if (!node) {
   151c0:	b96a      	cbnz	r2, 151de <hci_num_completed_packets+0xc6>
				BT_ERR("packets count mismatch");
   151c2:	6832      	ldr	r2, [r6, #0]
   151c4:	0753      	lsls	r3, r2, #29
   151c6:	d006      	beq.n	151d6 <hci_num_completed_packets+0xbe>
   151c8:	9b01      	ldr	r3, [sp, #4]
   151ca:	0199      	lsls	r1, r3, #6
   151cc:	f041 0101 	orr.w	r1, r1, #1
   151d0:	4650      	mov	r0, sl
   151d2:	f009 feb0 	bl	1ef36 <log_0>
		bt_conn_unref(conn);
   151d6:	4620      	mov	r0, r4
   151d8:	f00c f813 	bl	21202 <bt_conn_unref>
   151dc:	e7e2      	b.n	151a4 <hci_num_completed_packets+0x8c>
	__asm__ volatile(
   151de:	f04f 0140 	mov.w	r1, #64	; 0x40
   151e2:	f3ef 8011 	mrs	r0, BASEPRI
   151e6:	f381 8812 	msr	BASEPRI_MAX, r1
   151ea:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   151ee:	68d1      	ldr	r1, [r2, #12]
   151f0:	61e1      	str	r1, [r4, #28]
	parent->next = child;
   151f2:	f8c2 9000 	str.w	r9, [r2]
Z_GENLIST_APPEND(slist, snode)
   151f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   151f8:	f8c2 900c 	str.w	r9, [r2, #12]
   151fc:	b949      	cbnz	r1, 15212 <hci_num_completed_packets+0xfa>
	list->head = node;
   151fe:	e9c4 2208 	strd	r2, r2, [r4, #32]
	__asm__ volatile(
   15202:	f380 8811 	msr	BASEPRI, r0
   15206:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   1520a:	4658      	mov	r0, fp
   1520c:	f008 fa34 	bl	1d678 <k_work_submit>
   15210:	e7b5      	b.n	1517e <hci_num_completed_packets+0x66>
	parent->next = child;
   15212:	600a      	str	r2, [r1, #0]
	list->tail = node;
   15214:	6262      	str	r2, [r4, #36]	; 0x24
}
   15216:	e7f4      	b.n	15202 <hci_num_completed_packets+0xea>
   15218:	20000664 	.word	0x20000664
   1521c:	20000654 	.word	0x20000654
   15220:	00026013 	.word	0x00026013
   15224:	0002602f 	.word	0x0002602f

00015228 <hci_disconn_complete>:
{
   15228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1522a:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   1522c:	7835      	ldrb	r5, [r6, #0]
   1522e:	bb95      	cbnz	r5, 15296 <hci_disconn_complete+0x6e>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15230:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
   15234:	4638      	mov	r0, r7
   15236:	f002 f955 	bl	174e4 <bt_conn_lookup_handle>
	if (!conn) {
   1523a:	4604      	mov	r4, r0
   1523c:	b978      	cbnz	r0, 1525e <hci_disconn_complete+0x36>
		BT_ERR("Unable to look up conn with handle %u", handle);
   1523e:	4a16      	ldr	r2, [pc, #88]	; (15298 <hci_disconn_complete+0x70>)
   15240:	6813      	ldr	r3, [r2, #0]
   15242:	0759      	lsls	r1, r3, #29
   15244:	d027      	beq.n	15296 <hci_disconn_complete+0x6e>
   15246:	4b15      	ldr	r3, [pc, #84]	; (1529c <hci_disconn_complete+0x74>)
   15248:	4815      	ldr	r0, [pc, #84]	; (152a0 <hci_disconn_complete+0x78>)
   1524a:	1ad2      	subs	r2, r2, r3
   1524c:	0892      	lsrs	r2, r2, #2
   1524e:	0192      	lsls	r2, r2, #6
   15250:	4639      	mov	r1, r7
   15252:	f042 0201 	orr.w	r2, r2, #1
}
   15256:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   1525a:	f009 be79 	b.w	1ef50 <log_1>
	conn->err = evt->reason;
   1525e:	78f3      	ldrb	r3, [r6, #3]
   15260:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15262:	4629      	mov	r1, r5
   15264:	f002 f94a 	bl	174fc <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   15268:	78a3      	ldrb	r3, [r4, #2]
   1526a:	2b01      	cmp	r3, #1
   1526c:	d004      	beq.n	15278 <hci_disconn_complete+0x50>
	bt_conn_unref(conn);
   1526e:	4620      	mov	r0, r4
}
   15270:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   15274:	f00b bfc5 	b.w	21202 <bt_conn_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15278:	f3bf 8f5b 	dmb	ish
   1527c:	6863      	ldr	r3, [r4, #4]
   1527e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   15282:	07db      	lsls	r3, r3, #31
   15284:	d5f3      	bpl.n	1526e <hci_disconn_complete+0x46>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   15286:	4620      	mov	r0, r4
   15288:	2102      	movs	r1, #2
   1528a:	f002 f937 	bl	174fc <bt_conn_set_state>
		bt_le_scan_update(false);
   1528e:	4628      	mov	r0, r5
   15290:	f001 fcec 	bl	16c6c <bt_le_scan_update>
   15294:	e7eb      	b.n	1526e <hci_disconn_complete+0x46>
}
   15296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15298:	20000664 	.word	0x20000664
   1529c:	20000654 	.word	0x20000654
   152a0:	00026046 	.word	0x00026046

000152a4 <le_conn_update_complete>:
{
   152a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   152a6:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   152a8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   152ac:	4630      	mov	r0, r6
   152ae:	f002 f919 	bl	174e4 <bt_conn_lookup_handle>
	if (!conn) {
   152b2:	4604      	mov	r4, r0
   152b4:	b978      	cbnz	r0, 152d6 <le_conn_update_complete+0x32>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   152b6:	4a24      	ldr	r2, [pc, #144]	; (15348 <le_conn_update_complete+0xa4>)
   152b8:	6813      	ldr	r3, [r2, #0]
   152ba:	0759      	lsls	r1, r3, #29
   152bc:	d009      	beq.n	152d2 <le_conn_update_complete+0x2e>
   152be:	4b23      	ldr	r3, [pc, #140]	; (1534c <le_conn_update_complete+0xa8>)
   152c0:	4823      	ldr	r0, [pc, #140]	; (15350 <le_conn_update_complete+0xac>)
   152c2:	1ad2      	subs	r2, r2, r3
   152c4:	0892      	lsrs	r2, r2, #2
   152c6:	0192      	lsls	r2, r2, #6
   152c8:	f042 0201 	orr.w	r2, r2, #1
   152cc:	4631      	mov	r1, r6
   152ce:	f009 fe3f 	bl	1ef50 <log_1>
}
   152d2:	b002      	add	sp, #8
   152d4:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   152d6:	782b      	ldrb	r3, [r5, #0]
   152d8:	b9bb      	cbnz	r3, 1530a <le_conn_update_complete+0x66>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   152da:	792a      	ldrb	r2, [r5, #4]
   152dc:	78eb      	ldrb	r3, [r5, #3]
   152de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   152e2:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   152e6:	79aa      	ldrb	r2, [r5, #6]
   152e8:	796b      	ldrb	r3, [r5, #5]
   152ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   152ee:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   152f2:	79eb      	ldrb	r3, [r5, #7]
   152f4:	7a2a      	ldrb	r2, [r5, #8]
   152f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   152fa:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   152fe:	f002 fa45 	bl	1778c <notify_le_param_updated>
	bt_conn_unref(conn);
   15302:	4620      	mov	r0, r4
   15304:	f00b ff7d 	bl	21202 <bt_conn_unref>
   15308:	e7e3      	b.n	152d2 <le_conn_update_complete+0x2e>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1530a:	2b1a      	cmp	r3, #26
   1530c:	d1f9      	bne.n	15302 <le_conn_update_complete+0x5e>
   1530e:	78c3      	ldrb	r3, [r0, #3]
   15310:	2b01      	cmp	r3, #1
   15312:	d1f6      	bne.n	15302 <le_conn_update_complete+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15314:	f3bf 8f5b 	dmb	ish
   15318:	1d03      	adds	r3, r0, #4
   1531a:	e853 2f00 	ldrex	r2, [r3]
   1531e:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   15322:	e843 1500 	strex	r5, r1, [r3]
   15326:	2d00      	cmp	r5, #0
   15328:	d1f7      	bne.n	1531a <le_conn_update_complete+0x76>
   1532a:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   1532e:	0553      	lsls	r3, r2, #21
   15330:	d4e7      	bmi.n	15302 <le_conn_update_complete+0x5e>
		param.interval_min = conn->le.interval_min;
   15332:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   15336:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   15338:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   1533a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1533e:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   15340:	f002 fefe 	bl	18140 <bt_l2cap_update_conn_param>
   15344:	e7dd      	b.n	15302 <le_conn_update_complete+0x5e>
   15346:	bf00      	nop
   15348:	20000664 	.word	0x20000664
   1534c:	20000654 	.word	0x20000654
   15350:	00025e73 	.word	0x00025e73

00015354 <hci_cmd_done>:
{
   15354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15358:	4606      	mov	r6, r0
   1535a:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1535c:	7990      	ldrb	r0, [r2, #6]
   1535e:	f8df 8144 	ldr.w	r8, [pc, #324]	; 154a4 <hci_cmd_done+0x150>
{
   15362:	460f      	mov	r7, r1
   15364:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   15366:	f004 fcfd 	bl	19d64 <net_buf_pool_get>
   1536a:	4580      	cmp	r8, r0
   1536c:	d01a      	beq.n	153a4 <hci_cmd_done+0x50>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   1536e:	4b48      	ldr	r3, [pc, #288]	; (15490 <hci_cmd_done+0x13c>)
   15370:	681a      	ldr	r2, [r3, #0]
   15372:	f012 0f06 	tst.w	r2, #6
   15376:	d012      	beq.n	1539e <hci_cmd_done+0x4a>
   15378:	4d46      	ldr	r5, [pc, #280]	; (15494 <hci_cmd_done+0x140>)
   1537a:	79a0      	ldrb	r0, [r4, #6]
   1537c:	9600      	str	r6, [sp, #0]
   1537e:	1b5d      	subs	r5, r3, r5
   15380:	08ad      	lsrs	r5, r5, #2
   15382:	9001      	str	r0, [sp, #4]
   15384:	f004 fcee 	bl	19d64 <net_buf_pool_get>
   15388:	01ad      	lsls	r5, r5, #6
   1538a:	f045 0502 	orr.w	r5, r5, #2
   1538e:	e9cd 0802 	strd	r0, r8, [sp, #8]
   15392:	462b      	mov	r3, r5
   15394:	4840      	ldr	r0, [pc, #256]	; (15498 <hci_cmd_done+0x144>)
   15396:	2204      	movs	r2, #4
   15398:	4669      	mov	r1, sp
   1539a:	f009 fe22 	bl	1efe2 <log_n>
}
   1539e:	b005      	add	sp, #20
   153a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   153a4:	4620      	mov	r0, r4
   153a6:	f004 fce5 	bl	19d74 <net_buf_id>
   153aa:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 154a8 <hci_cmd_done+0x154>
   153ae:	f04f 090c 	mov.w	r9, #12
   153b2:	fb09 8000 	mla	r0, r9, r0, r8
   153b6:	4645      	mov	r5, r8
   153b8:	8843      	ldrh	r3, [r0, #2]
   153ba:	42b3      	cmp	r3, r6
   153bc:	d016      	beq.n	153ec <hci_cmd_done+0x98>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   153be:	4b34      	ldr	r3, [pc, #208]	; (15490 <hci_cmd_done+0x13c>)
   153c0:	681a      	ldr	r2, [r3, #0]
   153c2:	f012 0f06 	tst.w	r2, #6
   153c6:	d0ea      	beq.n	1539e <hci_cmd_done+0x4a>
   153c8:	4d32      	ldr	r5, [pc, #200]	; (15494 <hci_cmd_done+0x140>)
   153ca:	4620      	mov	r0, r4
   153cc:	1b5d      	subs	r5, r3, r5
   153ce:	f004 fcd1 	bl	19d74 <net_buf_id>
   153d2:	08ad      	lsrs	r5, r5, #2
   153d4:	fb09 8000 	mla	r0, r9, r0, r8
   153d8:	01ad      	lsls	r5, r5, #6
   153da:	f045 0502 	orr.w	r5, r5, #2
   153de:	8842      	ldrh	r2, [r0, #2]
   153e0:	482e      	ldr	r0, [pc, #184]	; (1549c <hci_cmd_done+0x148>)
   153e2:	462b      	mov	r3, r5
   153e4:	4631      	mov	r1, r6
   153e6:	f009 fdc7 	bl	1ef78 <log_2>
   153ea:	e7d8      	b.n	1539e <hci_cmd_done+0x4a>
	if (bt_dev.sent_cmd) {
   153ec:	4e2c      	ldr	r6, [pc, #176]	; (154a0 <hci_cmd_done+0x14c>)
   153ee:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
   153f2:	b120      	cbz	r0, 153fe <hci_cmd_done+0xaa>
		net_buf_unref(bt_dev.sent_cmd);
   153f4:	f004 fd76 	bl	19ee4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   153f8:	2300      	movs	r3, #0
   153fa:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   153fe:	4620      	mov	r0, r4
   15400:	f004 fcb8 	bl	19d74 <net_buf_id>
   15404:	260c      	movs	r6, #12
   15406:	fb06 5000 	mla	r0, r6, r0, r5
   1540a:	6843      	ldr	r3, [r0, #4]
   1540c:	b1e3      	cbz	r3, 15448 <hci_cmd_done+0xf4>
   1540e:	b9df      	cbnz	r7, 15448 <hci_cmd_done+0xf4>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   15410:	4620      	mov	r0, r4
   15412:	f004 fcaf 	bl	19d74 <net_buf_id>
   15416:	fb06 5000 	mla	r0, r6, r0, r5
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1541a:	2201      	movs	r2, #1
   1541c:	6840      	ldr	r0, [r0, #4]
   1541e:	e9d0 3100 	ldrd	r3, r1, [r0]

	if (val) {
   15422:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   15424:	f001 061f 	and.w	r6, r1, #31
   15428:	40b2      	lsls	r2, r6
	if (val) {
   1542a:	0949      	lsrs	r1, r1, #5
   1542c:	b318      	cbz	r0, 15476 <hci_cmd_done+0x122>
   1542e:	f3bf 8f5b 	dmb	ish
   15432:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   15436:	e853 1f00 	ldrex	r1, [r3]
   1543a:	4311      	orrs	r1, r2
   1543c:	e843 1000 	strex	r0, r1, [r3]
   15440:	2800      	cmp	r0, #0
   15442:	d1f8      	bne.n	15436 <hci_cmd_done+0xe2>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15444:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
   15448:	4620      	mov	r0, r4
   1544a:	f004 fc93 	bl	19d74 <net_buf_id>
   1544e:	260c      	movs	r6, #12
   15450:	fb06 5000 	mla	r0, r6, r0, r5
   15454:	6883      	ldr	r3, [r0, #8]
   15456:	2b00      	cmp	r3, #0
   15458:	d0a1      	beq.n	1539e <hci_cmd_done+0x4a>
		cmd(buf)->status = status;
   1545a:	4620      	mov	r0, r4
   1545c:	f004 fc8a 	bl	19d74 <net_buf_id>
   15460:	4370      	muls	r0, r6
   15462:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   15464:	4620      	mov	r0, r4
   15466:	f004 fc85 	bl	19d74 <net_buf_id>
   1546a:	fb06 5500 	mla	r5, r6, r0, r5
   1546e:	68a8      	ldr	r0, [r5, #8]
   15470:	f007 ff8c 	bl	1d38c <z_impl_k_sem_give>
}
   15474:	e793      	b.n	1539e <hci_cmd_done+0x4a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15476:	43d2      	mvns	r2, r2
   15478:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1547c:	f3bf 8f5b 	dmb	ish
   15480:	e853 1f00 	ldrex	r1, [r3]
   15484:	4011      	ands	r1, r2
   15486:	e843 1000 	strex	r0, r1, [r3]
   1548a:	2800      	cmp	r0, #0
   1548c:	d0da      	beq.n	15444 <hci_cmd_done+0xf0>
   1548e:	e7f7      	b.n	15480 <hci_cmd_done+0x12c>
   15490:	20000664 	.word	0x20000664
   15494:	20000654 	.word	0x20000654
   15498:	0002606c 	.word	0x0002606c
   1549c:	000260a1 	.word	0x000260a1
   154a0:	200002a8 	.word	0x200002a8
   154a4:	20000860 	.word	0x20000860
   154a8:	2000256c 	.word	0x2000256c

000154ac <hci_cmd_status>:
{
   154ac:	b538      	push	{r3, r4, r5, lr}
   154ae:	2104      	movs	r1, #4
   154b0:	4604      	mov	r4, r0
   154b2:	3008      	adds	r0, #8
   154b4:	f00c fe50 	bl	22158 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   154b8:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   154ba:	7801      	ldrb	r1, [r0, #0]
   154bc:	8840      	ldrh	r0, [r0, #2]
   154be:	4622      	mov	r2, r4
   154c0:	f7ff ff48 	bl	15354 <hci_cmd_done>
	if (ncmd) {
   154c4:	b125      	cbz	r5, 154d0 <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   154c6:	4803      	ldr	r0, [pc, #12]	; (154d4 <hci_cmd_status+0x28>)
}
   154c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   154cc:	f007 bf5e 	b.w	1d38c <z_impl_k_sem_give>
   154d0:	bd38      	pop	{r3, r4, r5, pc}
   154d2:	bf00      	nop
   154d4:	200003c0 	.word	0x200003c0

000154d8 <hci_cmd_complete>:
{
   154d8:	b538      	push	{r3, r4, r5, lr}
   154da:	2103      	movs	r1, #3
   154dc:	4604      	mov	r4, r0
   154de:	3008      	adds	r0, #8
   154e0:	f00c fe3a 	bl	22158 <net_buf_simple_pull_mem>
	status = buf->data[0];
   154e4:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   154e6:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   154e8:	7819      	ldrb	r1, [r3, #0]
   154ea:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   154ee:	4622      	mov	r2, r4
   154f0:	f7ff ff30 	bl	15354 <hci_cmd_done>
	if (ncmd) {
   154f4:	b125      	cbz	r5, 15500 <hci_cmd_complete+0x28>
   154f6:	4803      	ldr	r0, [pc, #12]	; (15504 <hci_cmd_complete+0x2c>)
}
   154f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   154fc:	f007 bf46 	b.w	1d38c <z_impl_k_sem_give>
   15500:	bd38      	pop	{r3, r4, r5, pc}
   15502:	bf00      	nop
   15504:	200003c0 	.word	0x200003c0

00015508 <bt_hci_cmd_state_set_init>:
{
   15508:	b510      	push	{r4, lr}
	state->bit = bit;
   1550a:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   1550e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   15512:	720b      	strb	r3, [r1, #8]
{
   15514:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   15516:	f004 fc2d 	bl	19d74 <net_buf_id>
   1551a:	4b03      	ldr	r3, [pc, #12]	; (15528 <bt_hci_cmd_state_set_init+0x20>)
   1551c:	220c      	movs	r2, #12
   1551e:	fb02 3000 	mla	r0, r2, r0, r3
   15522:	6044      	str	r4, [r0, #4]
}
   15524:	bd10      	pop	{r4, pc}
   15526:	bf00      	nop
   15528:	2000256c 	.word	0x2000256c

0001552c <bt_hci_cmd_create>:
{
   1552c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   15530:	f04f 32ff 	mov.w	r2, #4294967295
   15534:	f04f 33ff 	mov.w	r3, #4294967295
   15538:	4605      	mov	r5, r0
   1553a:	4816      	ldr	r0, [pc, #88]	; (15594 <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
   1553c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 15598 <bt_hci_cmd_create+0x6c>
{
   15540:	460e      	mov	r6, r1
   15542:	f00c fd94 	bl	2206e <net_buf_alloc_fixed>
   15546:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   15548:	f100 0b08 	add.w	fp, r0, #8
   1554c:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1554e:	2700      	movs	r7, #0
   15550:	4658      	mov	r0, fp
   15552:	f00c fdab 	bl	220ac <net_buf_simple_reserve>
   15556:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   15558:	4620      	mov	r0, r4
   1555a:	f004 fc0b 	bl	19d74 <net_buf_id>
   1555e:	f04f 0a0c 	mov.w	sl, #12
   15562:	fb0a 8000 	mla	r0, sl, r0, r8
   15566:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   15568:	4620      	mov	r0, r4
   1556a:	f004 fc03 	bl	19d74 <net_buf_id>
   1556e:	fb0a 8000 	mla	r0, sl, r0, r8
   15572:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   15574:	4620      	mov	r0, r4
   15576:	f004 fbfd 	bl	19d74 <net_buf_id>
   1557a:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
   1557e:	2103      	movs	r1, #3
   15580:	6047      	str	r7, [r0, #4]
   15582:	4658      	mov	r0, fp
   15584:	f00c fdc9 	bl	2211a <net_buf_simple_add>
	hdr->param_len = param_len;
   15588:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   1558a:	8005      	strh	r5, [r0, #0]
}
   1558c:	4620      	mov	r0, r4
   1558e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15592:	bf00      	nop
   15594:	20000860 	.word	0x20000860
   15598:	2000256c 	.word	0x2000256c

0001559c <bt_hci_cmd_send_sync>:
{
   1559c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   155a0:	4607      	mov	r7, r0
   155a2:	b086      	sub	sp, #24
   155a4:	4615      	mov	r5, r2
	if (!buf) {
   155a6:	460c      	mov	r4, r1
   155a8:	b921      	cbnz	r1, 155b4 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   155aa:	f7ff ffbf 	bl	1552c <bt_hci_cmd_create>
		if (!buf) {
   155ae:	4604      	mov	r4, r0
   155b0:	2800      	cmp	r0, #0
   155b2:	d059      	beq.n	15668 <bt_hci_cmd_send_sync+0xcc>
	return z_impl_k_sem_init(sem, initial_count, limit);
   155b4:	2201      	movs	r2, #1
   155b6:	2100      	movs	r1, #0
   155b8:	4668      	mov	r0, sp
   155ba:	f00d fa7e 	bl	22aba <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   155be:	4620      	mov	r0, r4
   155c0:	f004 fbd8 	bl	19d74 <net_buf_id>
   155c4:	4e2a      	ldr	r6, [pc, #168]	; (15670 <bt_hci_cmd_send_sync+0xd4>)
   155c6:	230c      	movs	r3, #12
   155c8:	fb03 6000 	mla	r0, r3, r0, r6
   155cc:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   155d0:	4620      	mov	r0, r4
   155d2:	f00c fd7c 	bl	220ce <net_buf_ref>
   155d6:	4601      	mov	r1, r0
   155d8:	4826      	ldr	r0, [pc, #152]	; (15674 <bt_hci_cmd_send_sync+0xd8>)
   155da:	f00c fd6b 	bl	220b4 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   155de:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   155e2:	2300      	movs	r3, #0
   155e4:	4668      	mov	r0, sp
   155e6:	f007 fef7 	bl	1d3d8 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   155ea:	4680      	mov	r8, r0
   155ec:	b180      	cbz	r0, 15610 <bt_hci_cmd_send_sync+0x74>
   155ee:	4a22      	ldr	r2, [pc, #136]	; (15678 <bt_hci_cmd_send_sync+0xdc>)
   155f0:	4922      	ldr	r1, [pc, #136]	; (1567c <bt_hci_cmd_send_sync+0xe0>)
   155f2:	4823      	ldr	r0, [pc, #140]	; (15680 <bt_hci_cmd_send_sync+0xe4>)
   155f4:	f240 1331 	movw	r3, #305	; 0x131
   155f8:	f008 ff6b 	bl	1e4d2 <printk>
   155fc:	4821      	ldr	r0, [pc, #132]	; (15684 <bt_hci_cmd_send_sync+0xe8>)
   155fe:	4641      	mov	r1, r8
   15600:	f008 ff67 	bl	1e4d2 <printk>
   15604:	4040      	eors	r0, r0
   15606:	f380 8811 	msr	BASEPRI, r0
   1560a:	f04f 0003 	mov.w	r0, #3
   1560e:	df02      	svc	2
	status = cmd(buf)->status;
   15610:	4620      	mov	r0, r4
   15612:	f004 fbaf 	bl	19d74 <net_buf_id>
   15616:	230c      	movs	r3, #12
   15618:	4343      	muls	r3, r0
   1561a:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   1561c:	b1de      	cbz	r6, 15656 <bt_hci_cmd_send_sync+0xba>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   1561e:	4b1a      	ldr	r3, [pc, #104]	; (15688 <bt_hci_cmd_send_sync+0xec>)
   15620:	681a      	ldr	r2, [r3, #0]
   15622:	f012 0f06 	tst.w	r2, #6
   15626:	d00a      	beq.n	1563e <bt_hci_cmd_send_sync+0xa2>
   15628:	4a18      	ldr	r2, [pc, #96]	; (1568c <bt_hci_cmd_send_sync+0xf0>)
   1562a:	4819      	ldr	r0, [pc, #100]	; (15690 <bt_hci_cmd_send_sync+0xf4>)
   1562c:	1a9b      	subs	r3, r3, r2
   1562e:	089b      	lsrs	r3, r3, #2
   15630:	019b      	lsls	r3, r3, #6
   15632:	f043 0302 	orr.w	r3, r3, #2
   15636:	4632      	mov	r2, r6
   15638:	4639      	mov	r1, r7
   1563a:	f009 fc9d 	bl	1ef78 <log_2>
		net_buf_unref(buf);
   1563e:	4620      	mov	r0, r4
   15640:	f004 fc50 	bl	19ee4 <net_buf_unref>
			return -EIO;
   15644:	2e09      	cmp	r6, #9
   15646:	bf0c      	ite	eq
   15648:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   1564c:	f06f 0004 	mvnne.w	r0, #4
}
   15650:	b006      	add	sp, #24
   15652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   15656:	b115      	cbz	r5, 1565e <bt_hci_cmd_send_sync+0xc2>
		*rsp = buf;
   15658:	602c      	str	r4, [r5, #0]
	return 0;
   1565a:	4630      	mov	r0, r6
   1565c:	e7f8      	b.n	15650 <bt_hci_cmd_send_sync+0xb4>
		net_buf_unref(buf);
   1565e:	4620      	mov	r0, r4
   15660:	f004 fc40 	bl	19ee4 <net_buf_unref>
	return 0;
   15664:	4628      	mov	r0, r5
   15666:	e7f3      	b.n	15650 <bt_hci_cmd_send_sync+0xb4>
			return -ENOBUFS;
   15668:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1566c:	e7f0      	b.n	15650 <bt_hci_cmd_send_sync+0xb4>
   1566e:	bf00      	nop
   15670:	2000256c 	.word	0x2000256c
   15674:	200003f4 	.word	0x200003f4
   15678:	00025f21 	.word	0x00025f21
   1567c:	000260d4 	.word	0x000260d4
   15680:	00025f6e 	.word	0x00025f6e
   15684:	000260dd 	.word	0x000260dd
   15688:	20000664 	.word	0x20000664
   1568c:	20000654 	.word	0x20000654
   15690:	000260fd 	.word	0x000260fd

00015694 <hci_le_read_max_data_len>:
{
   15694:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15696:	4606      	mov	r6, r0
   15698:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1569a:	aa01      	add	r2, sp, #4
   1569c:	2100      	movs	r1, #0
   1569e:	f242 002f 	movw	r0, #8239	; 0x202f
   156a2:	f7ff ff7b 	bl	1559c <bt_hci_cmd_send_sync>
	if (err) {
   156a6:	4604      	mov	r4, r0
   156a8:	b178      	cbz	r0, 156ca <hci_le_read_max_data_len+0x36>
		BT_ERR("Failed to read DLE max data len");
   156aa:	490d      	ldr	r1, [pc, #52]	; (156e0 <hci_le_read_max_data_len+0x4c>)
   156ac:	680b      	ldr	r3, [r1, #0]
   156ae:	075b      	lsls	r3, r3, #29
   156b0:	d008      	beq.n	156c4 <hci_le_read_max_data_len+0x30>
   156b2:	4b0c      	ldr	r3, [pc, #48]	; (156e4 <hci_le_read_max_data_len+0x50>)
   156b4:	480c      	ldr	r0, [pc, #48]	; (156e8 <hci_le_read_max_data_len+0x54>)
   156b6:	1ac9      	subs	r1, r1, r3
   156b8:	0889      	lsrs	r1, r1, #2
   156ba:	0189      	lsls	r1, r1, #6
   156bc:	f041 0101 	orr.w	r1, r1, #1
   156c0:	f009 fc39 	bl	1ef36 <log_0>
}
   156c4:	4620      	mov	r0, r4
   156c6:	b002      	add	sp, #8
   156c8:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   156ca:	9801      	ldr	r0, [sp, #4]
   156cc:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   156ce:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   156d2:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   156d4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   156d8:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   156da:	f004 fc03 	bl	19ee4 <net_buf_unref>
	return 0;
   156de:	e7f1      	b.n	156c4 <hci_le_read_max_data_len+0x30>
   156e0:	20000664 	.word	0x20000664
   156e4:	20000654 	.word	0x20000654
   156e8:	00026119 	.word	0x00026119

000156ec <hci_init>:
{
   156ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   156ee:	4d46      	ldr	r5, [pc, #280]	; (15808 <hci_init+0x11c>)
   156f0:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   156f4:	6899      	ldr	r1, [r3, #8]
   156f6:	f011 0101 	ands.w	r1, r1, #1
   156fa:	d123      	bne.n	15744 <hci_init+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   156fc:	aa01      	add	r2, sp, #4
   156fe:	f640 4003 	movw	r0, #3075	; 0xc03
   15702:	f7ff ff4b 	bl	1559c <bt_hci_cmd_send_sync>
		if (err) {
   15706:	4604      	mov	r4, r0
   15708:	2800      	cmp	r0, #0
   1570a:	d16f      	bne.n	157ec <hci_init+0x100>
	uint8_t status = buf->data[0];
   1570c:	9b01      	ldr	r3, [sp, #4]
   1570e:	689b      	ldr	r3, [r3, #8]
	if (status) {
   15710:	781b      	ldrb	r3, [r3, #0]
   15712:	b9a3      	cbnz	r3, 1573e <hci_init+0x52>
		bt_scan_reset();
   15714:	f001 faa4 	bl	16c60 <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15718:	f3bf 8f5b 	dmb	ish
   1571c:	462b      	mov	r3, r5
   1571e:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   15722:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   15726:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1572a:	f3bf 8f5b 	dmb	ish
   1572e:	e853 1f00 	ldrex	r1, [r3]
   15732:	e843 2000 	strex	r0, r2, [r3]
   15736:	2800      	cmp	r0, #0
   15738:	d1f9      	bne.n	1572e <hci_init+0x42>
   1573a:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   1573e:	9801      	ldr	r0, [sp, #4]
   15740:	f004 fbd0 	bl	19ee4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   15744:	aa01      	add	r2, sp, #4
   15746:	2100      	movs	r1, #0
   15748:	f241 0003 	movw	r0, #4099	; 0x1003
   1574c:	f7ff ff26 	bl	1559c <bt_hci_cmd_send_sync>
	if (err) {
   15750:	4604      	mov	r4, r0
   15752:	2800      	cmp	r0, #0
   15754:	d14a      	bne.n	157ec <hci_init+0x100>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   15756:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   15758:	482c      	ldr	r0, [pc, #176]	; (1580c <hci_init+0x120>)
   1575a:	6899      	ldr	r1, [r3, #8]
   1575c:	2208      	movs	r2, #8
   1575e:	3101      	adds	r1, #1
   15760:	f00b fb1b 	bl	20d9a <memcpy>
	net_buf_unref(rsp);
   15764:	9801      	ldr	r0, [sp, #4]
   15766:	f004 fbbd 	bl	19ee4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   1576a:	4621      	mov	r1, r4
   1576c:	aa01      	add	r2, sp, #4
   1576e:	f241 0001 	movw	r0, #4097	; 0x1001
   15772:	f7ff ff13 	bl	1559c <bt_hci_cmd_send_sync>
	if (err) {
   15776:	4604      	mov	r4, r0
   15778:	2800      	cmp	r0, #0
   1577a:	d137      	bne.n	157ec <hci_init+0x100>
	read_local_ver_complete(rsp);
   1577c:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   1577e:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   15780:	785a      	ldrb	r2, [r3, #1]
   15782:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   15786:	78d9      	ldrb	r1, [r3, #3]
   15788:	789a      	ldrb	r2, [r3, #2]
   1578a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1578e:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   15792:	791a      	ldrb	r2, [r3, #4]
   15794:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   15798:	7a19      	ldrb	r1, [r3, #8]
   1579a:	79da      	ldrb	r2, [r3, #7]
   1579c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   157a0:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   157a4:	795a      	ldrb	r2, [r3, #5]
   157a6:	799b      	ldrb	r3, [r3, #6]
   157a8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   157ac:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   157b0:	f004 fb98 	bl	19ee4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   157b4:	4621      	mov	r1, r4
   157b6:	aa01      	add	r2, sp, #4
   157b8:	f241 0002 	movw	r0, #4098	; 0x1002
   157bc:	f7ff feee 	bl	1559c <bt_hci_cmd_send_sync>
	if (err) {
   157c0:	4604      	mov	r4, r0
   157c2:	b998      	cbnz	r0, 157ec <hci_init+0x100>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   157c4:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   157c6:	4812      	ldr	r0, [pc, #72]	; (15810 <hci_init+0x124>)
   157c8:	6899      	ldr	r1, [r3, #8]
   157ca:	2240      	movs	r2, #64	; 0x40
   157cc:	3101      	adds	r1, #1
   157ce:	f00b fae4 	bl	20d9a <memcpy>
	net_buf_unref(rsp);
   157d2:	9801      	ldr	r0, [sp, #4]
   157d4:	f004 fb86 	bl	19ee4 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   157d8:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   157dc:	065e      	lsls	r6, r3, #25
   157de:	d41f      	bmi.n	15820 <hci_init+0x134>
		BT_ERR("Non-LE capable controller detected!");
   157e0:	490c      	ldr	r1, [pc, #48]	; (15814 <hci_init+0x128>)
   157e2:	680b      	ldr	r3, [r1, #0]
   157e4:	0758      	lsls	r0, r3, #29
   157e6:	d104      	bne.n	157f2 <hci_init+0x106>
		return -ENODEV;
   157e8:	f06f 0412 	mvn.w	r4, #18
}
   157ec:	4620      	mov	r0, r4
   157ee:	b002      	add	sp, #8
   157f0:	bd70      	pop	{r4, r5, r6, pc}
   157f2:	4b09      	ldr	r3, [pc, #36]	; (15818 <hci_init+0x12c>)
		BT_ERR("Non-LE capable controller detected!");
   157f4:	4809      	ldr	r0, [pc, #36]	; (1581c <hci_init+0x130>)
   157f6:	1ac9      	subs	r1, r1, r3
   157f8:	0889      	lsrs	r1, r1, #2
   157fa:	0189      	lsls	r1, r1, #6
   157fc:	f041 0101 	orr.w	r1, r1, #1
   15800:	f009 fb99 	bl	1ef36 <log_0>
   15804:	e7f0      	b.n	157e8 <hci_init+0xfc>
   15806:	bf00      	nop
   15808:	200002a8 	.word	0x200002a8
   1580c:	20000318 	.word	0x20000318
   15810:	20000320 	.word	0x20000320
   15814:	20000664 	.word	0x20000664
   15818:	20000654 	.word	0x20000654
   1581c:	00026139 	.word	0x00026139
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   15820:	4621      	mov	r1, r4
   15822:	aa01      	add	r2, sp, #4
   15824:	f242 0003 	movw	r0, #8195	; 0x2003
   15828:	f7ff feb8 	bl	1559c <bt_hci_cmd_send_sync>
	if (err) {
   1582c:	4604      	mov	r4, r0
   1582e:	2800      	cmp	r0, #0
   15830:	d1dc      	bne.n	157ec <hci_init+0x100>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   15832:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   15834:	48b5      	ldr	r0, [pc, #724]	; (15b0c <hci_init+0x420>)
   15836:	6899      	ldr	r1, [r3, #8]
   15838:	2208      	movs	r2, #8
   1583a:	3101      	adds	r1, #1
   1583c:	f00b faad 	bl	20d9a <memcpy>
	net_buf_unref(rsp);
   15840:	9801      	ldr	r0, [sp, #4]
   15842:	f004 fb4f 	bl	19ee4 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   15846:	4621      	mov	r1, r4
   15848:	aa01      	add	r2, sp, #4
   1584a:	f242 0002 	movw	r0, #8194	; 0x2002
   1584e:	f7ff fea5 	bl	1559c <bt_hci_cmd_send_sync>
		if (err) {
   15852:	4604      	mov	r4, r0
   15854:	2800      	cmp	r0, #0
   15856:	d1c9      	bne.n	157ec <hci_init+0x100>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   15858:	9b01      	ldr	r3, [sp, #4]
   1585a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   1585c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   15860:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   15864:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   15866:	b121      	cbz	r1, 15872 <hci_init+0x186>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   15868:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1586a:	48a9      	ldr	r0, [pc, #676]	; (15b10 <hci_init+0x424>)
   1586c:	4611      	mov	r1, r2
   1586e:	f00d f924 	bl	22aba <z_impl_k_sem_init>
		net_buf_unref(rsp);
   15872:	9801      	ldr	r0, [sp, #4]
   15874:	f004 fb36 	bl	19ee4 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   15878:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   1587c:	f016 0620 	ands.w	r6, r6, #32
   15880:	f000 80d1 	beq.w	15a26 <hci_init+0x33a>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   15884:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   15888:	071a      	lsls	r2, r3, #28
   1588a:	d511      	bpl.n	158b0 <hci_init+0x1c4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   1588c:	aa01      	add	r2, sp, #4
   1588e:	2100      	movs	r1, #0
   15890:	f242 001c 	movw	r0, #8220	; 0x201c
   15894:	f7ff fe82 	bl	1559c <bt_hci_cmd_send_sync>
		if (err) {
   15898:	4604      	mov	r4, r0
   1589a:	2800      	cmp	r0, #0
   1589c:	d1a6      	bne.n	157ec <hci_init+0x100>
		le_read_supp_states_complete(rsp);
   1589e:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   158a0:	6883      	ldr	r3, [r0, #8]
   158a2:	f853 2f01 	ldr.w	r2, [r3, #1]!
   158a6:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   158a8:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   158ac:	f004 fb1a 	bl	19ee4 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   158b0:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   158b4:	069b      	lsls	r3, r3, #26
   158b6:	d524      	bpl.n	15902 <hci_init+0x216>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   158b8:	f10d 0102 	add.w	r1, sp, #2
   158bc:	4668      	mov	r0, sp
   158be:	f7ff fee9 	bl	15694 <hci_le_read_max_data_len>
		if (err) {
   158c2:	4604      	mov	r4, r0
   158c4:	2800      	cmp	r0, #0
   158c6:	d191      	bne.n	157ec <hci_init+0x100>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   158c8:	2104      	movs	r1, #4
   158ca:	f242 0024 	movw	r0, #8228	; 0x2024
   158ce:	f7ff fe2d 	bl	1552c <bt_hci_cmd_create>
		if (!buf) {
   158d2:	4606      	mov	r6, r0
   158d4:	2800      	cmp	r0, #0
   158d6:	f000 80ad 	beq.w	15a34 <hci_init+0x348>
   158da:	2104      	movs	r1, #4
   158dc:	3008      	adds	r0, #8
   158de:	f00c fc1c 	bl	2211a <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   158e2:	f8bd 3000 	ldrh.w	r3, [sp]
   158e6:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   158e8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   158ec:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   158ee:	4622      	mov	r2, r4
   158f0:	4631      	mov	r1, r6
   158f2:	f242 0024 	movw	r0, #8228	; 0x2024
   158f6:	f7ff fe51 	bl	1559c <bt_hci_cmd_send_sync>
		if (err) {
   158fa:	4604      	mov	r4, r0
   158fc:	2800      	cmp	r0, #0
   158fe:	f47f af75 	bne.w	157ec <hci_init+0x100>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   15902:	2108      	movs	r1, #8
   15904:	f242 0001 	movw	r0, #8193	; 0x2001
   15908:	f7ff fe10 	bl	1552c <bt_hci_cmd_create>
	if (!buf) {
   1590c:	4604      	mov	r4, r0
   1590e:	2800      	cmp	r0, #0
   15910:	f000 8090 	beq.w	15a34 <hci_init+0x348>
   15914:	2108      	movs	r1, #8
   15916:	4408      	add	r0, r1
   15918:	f00c fbff 	bl	2211a <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   1591c:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   15920:	f012 0f02 	tst.w	r2, #2
   15924:	bf14      	ite	ne
   15926:	232f      	movne	r3, #47	; 0x2f
   15928:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   1592a:	0696      	lsls	r6, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1592c:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   15930:	bf48      	it	mi
   15932:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   15936:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   1593a:	bf18      	it	ne
   1593c:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   15940:	2200      	movs	r2, #0
   15942:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   15944:	f3c3 2307 	ubfx	r3, r3, #8, #8
   15948:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   1594a:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   1594c:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   1594e:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   15950:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   15952:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   15954:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   15956:	4621      	mov	r1, r4
   15958:	f242 0001 	movw	r0, #8193	; 0x2001
   1595c:	f7ff fe1e 	bl	1559c <bt_hci_cmd_send_sync>
	if (err) {
   15960:	4604      	mov	r4, r0
   15962:	2800      	cmp	r0, #0
   15964:	f47f af42 	bne.w	157ec <hci_init+0x100>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   15968:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   1596c:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
   15970:	0698      	lsls	r0, r3, #26
   15972:	d474      	bmi.n	15a5e <hci_init+0x372>
	if (bt_dev.le.acl_mtu) {
   15974:	b9d9      	cbnz	r1, 159ae <hci_init+0x2c2>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   15976:	aa01      	add	r2, sp, #4
   15978:	f241 0005 	movw	r0, #4101	; 0x1005
   1597c:	f7ff fe0e 	bl	1559c <bt_hci_cmd_send_sync>
	if (err) {
   15980:	4604      	mov	r4, r0
   15982:	2800      	cmp	r0, #0
   15984:	f47f af32 	bne.w	157ec <hci_init+0x100>
	if (bt_dev.le.acl_mtu) {
   15988:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   1598c:	b963      	cbnz	r3, 159a8 <hci_init+0x2bc>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   1598e:	9b01      	ldr	r3, [sp, #4]
   15990:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   15992:	785a      	ldrb	r2, [r3, #1]
   15994:	7899      	ldrb	r1, [r3, #2]
   15996:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1599a:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   1599e:	889a      	ldrh	r2, [r3, #4]
   159a0:	485b      	ldr	r0, [pc, #364]	; (15b10 <hci_init+0x424>)
   159a2:	4611      	mov	r1, r2
   159a4:	f00d f889 	bl	22aba <z_impl_k_sem_init>
	net_buf_unref(rsp);
   159a8:	9801      	ldr	r0, [sp, #4]
   159aa:	f004 fa9b 	bl	19ee4 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   159ae:	2108      	movs	r1, #8
   159b0:	f640 4001 	movw	r0, #3073	; 0xc01
   159b4:	f7ff fdba 	bl	1552c <bt_hci_cmd_create>
	if (!buf) {
   159b8:	4604      	mov	r4, r0
   159ba:	2800      	cmp	r0, #0
   159bc:	d03a      	beq.n	15a34 <hci_init+0x348>
   159be:	2108      	movs	r1, #8
   159c0:	4408      	add	r0, r1
   159c2:	f00c fbaa 	bl	2211a <net_buf_simple_add>
	dst[0] = val;
   159c6:	2310      	movs	r3, #16
   159c8:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   159ca:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
   159cc:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   159ce:	7043      	strb	r3, [r0, #1]
   159d0:	2602      	movs	r6, #2
   159d2:	2320      	movs	r3, #32
	dst[0] = val;
   159d4:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   159d6:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
   159d8:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   159da:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   159dc:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   159de:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   159e0:	4621      	mov	r1, r4
   159e2:	f640 4001 	movw	r0, #3073	; 0xc01
   159e6:	f7ff fdd9 	bl	1559c <bt_hci_cmd_send_sync>
	if (err) {
   159ea:	4604      	mov	r4, r0
   159ec:	2800      	cmp	r0, #0
   159ee:	f47f aefd 	bne.w	157ec <hci_init+0x100>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   159f2:	4601      	mov	r1, r0
   159f4:	aa01      	add	r2, sp, #4
   159f6:	f64f 4001 	movw	r0, #64513	; 0xfc01
   159fa:	f7ff fdcf 	bl	1559c <bt_hci_cmd_send_sync>
	if (err) {
   159fe:	4604      	mov	r4, r0
   15a00:	2800      	cmp	r0, #0
   15a02:	d03e      	beq.n	15a82 <hci_init+0x396>
		BT_WARN("Vendor HCI extensions not available");
   15a04:	4943      	ldr	r1, [pc, #268]	; (15b14 <hci_init+0x428>)
   15a06:	680b      	ldr	r3, [r1, #0]
   15a08:	f013 0f06 	tst.w	r3, #6
   15a0c:	d007      	beq.n	15a1e <hci_init+0x332>
   15a0e:	4b42      	ldr	r3, [pc, #264]	; (15b18 <hci_init+0x42c>)
   15a10:	4842      	ldr	r0, [pc, #264]	; (15b1c <hci_init+0x430>)
   15a12:	1ac9      	subs	r1, r1, r3
   15a14:	40f1      	lsrs	r1, r6
   15a16:	0189      	lsls	r1, r1, #6
   15a18:	4331      	orrs	r1, r6
			BT_WARN("Failed to read supported vendor features");
   15a1a:	f009 fa8c 	bl	1ef36 <log_0>
	err = bt_id_init();
   15a1e:	f001 f853 	bl	16ac8 <bt_id_init>
   15a22:	4604      	mov	r4, r0
	if (err) {
   15a24:	e6e2      	b.n	157ec <hci_init+0x100>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   15a26:	2102      	movs	r1, #2
   15a28:	f640 406d 	movw	r0, #3181	; 0xc6d
   15a2c:	f7ff fd7e 	bl	1552c <bt_hci_cmd_create>
		if (!buf) {
   15a30:	4604      	mov	r4, r0
   15a32:	b910      	cbnz	r0, 15a3a <hci_init+0x34e>
		return -ENOBUFS;
   15a34:	f06f 0468 	mvn.w	r4, #104	; 0x68
   15a38:	e6d8      	b.n	157ec <hci_init+0x100>
   15a3a:	2102      	movs	r1, #2
   15a3c:	3008      	adds	r0, #8
   15a3e:	f00c fb6c 	bl	2211a <net_buf_simple_add>
		cp_le->le = 0x01;
   15a42:	2301      	movs	r3, #1
   15a44:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   15a46:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   15a48:	4621      	mov	r1, r4
   15a4a:	4632      	mov	r2, r6
   15a4c:	f640 406d 	movw	r0, #3181	; 0xc6d
   15a50:	f7ff fda4 	bl	1559c <bt_hci_cmd_send_sync>
		if (err) {
   15a54:	4604      	mov	r4, r0
   15a56:	2800      	cmp	r0, #0
   15a58:	f43f af14 	beq.w	15884 <hci_init+0x198>
   15a5c:	e6c6      	b.n	157ec <hci_init+0x100>
	else if (!bt_dev.le.acl_mtu) {
   15a5e:	2900      	cmp	r1, #0
   15a60:	d1a5      	bne.n	159ae <hci_init+0x2c2>
		BT_ERR("ACL BR/EDR buffers not initialized");
   15a62:	492c      	ldr	r1, [pc, #176]	; (15b14 <hci_init+0x428>)
   15a64:	680b      	ldr	r3, [r1, #0]
   15a66:	075a      	lsls	r2, r3, #29
   15a68:	d008      	beq.n	15a7c <hci_init+0x390>
   15a6a:	4b2b      	ldr	r3, [pc, #172]	; (15b18 <hci_init+0x42c>)
   15a6c:	482c      	ldr	r0, [pc, #176]	; (15b20 <hci_init+0x434>)
   15a6e:	1ac9      	subs	r1, r1, r3
   15a70:	0889      	lsrs	r1, r1, #2
   15a72:	0189      	lsls	r1, r1, #6
   15a74:	f041 0101 	orr.w	r1, r1, #1
   15a78:	f009 fa5d 	bl	1ef36 <log_0>
		return -EIO;
   15a7c:	f06f 0404 	mvn.w	r4, #4
   15a80:	e6b4      	b.n	157ec <hci_init+0x100>
	net_buf_unref(rsp);
   15a82:	9801      	ldr	r0, [sp, #4]
   15a84:	f004 fa2e 	bl	19ee4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   15a88:	4621      	mov	r1, r4
   15a8a:	aa01      	add	r2, sp, #4
   15a8c:	f64f 4002 	movw	r0, #64514	; 0xfc02
   15a90:	f7ff fd84 	bl	1559c <bt_hci_cmd_send_sync>
	if (err) {
   15a94:	4604      	mov	r4, r0
   15a96:	b160      	cbz	r0, 15ab2 <hci_init+0x3c6>
		BT_WARN("Failed to read supported vendor commands");
   15a98:	491e      	ldr	r1, [pc, #120]	; (15b14 <hci_init+0x428>)
   15a9a:	680b      	ldr	r3, [r1, #0]
   15a9c:	f013 0f06 	tst.w	r3, #6
   15aa0:	d0bd      	beq.n	15a1e <hci_init+0x332>
   15aa2:	4b1d      	ldr	r3, [pc, #116]	; (15b18 <hci_init+0x42c>)
   15aa4:	481f      	ldr	r0, [pc, #124]	; (15b24 <hci_init+0x438>)
   15aa6:	1ac9      	subs	r1, r1, r3
   15aa8:	0889      	lsrs	r1, r1, #2
   15aaa:	0189      	lsls	r1, r1, #6
   15aac:	f041 0102 	orr.w	r1, r1, #2
   15ab0:	e7b3      	b.n	15a1a <hci_init+0x32e>
	rp.cmds = (void *)rsp->data;
   15ab2:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   15ab4:	481c      	ldr	r0, [pc, #112]	; (15b28 <hci_init+0x43c>)
   15ab6:	6899      	ldr	r1, [r3, #8]
   15ab8:	4632      	mov	r2, r6
   15aba:	3101      	adds	r1, #1
   15abc:	f00b f96d 	bl	20d9a <memcpy>
	net_buf_unref(rsp);
   15ac0:	9801      	ldr	r0, [sp, #4]
   15ac2:	f004 fa0f 	bl	19ee4 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   15ac6:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   15aca:	075b      	lsls	r3, r3, #29
   15acc:	d5a7      	bpl.n	15a1e <hci_init+0x332>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   15ace:	aa01      	add	r2, sp, #4
   15ad0:	4621      	mov	r1, r4
   15ad2:	f64f 4003 	movw	r0, #64515	; 0xfc03
   15ad6:	f7ff fd61 	bl	1559c <bt_hci_cmd_send_sync>
		if (err) {
   15ada:	b160      	cbz	r0, 15af6 <hci_init+0x40a>
			BT_WARN("Failed to read supported vendor features");
   15adc:	490d      	ldr	r1, [pc, #52]	; (15b14 <hci_init+0x428>)
   15ade:	680b      	ldr	r3, [r1, #0]
   15ae0:	f013 0f06 	tst.w	r3, #6
   15ae4:	d09b      	beq.n	15a1e <hci_init+0x332>
   15ae6:	4b0c      	ldr	r3, [pc, #48]	; (15b18 <hci_init+0x42c>)
   15ae8:	4810      	ldr	r0, [pc, #64]	; (15b2c <hci_init+0x440>)
   15aea:	1ac9      	subs	r1, r1, r3
   15aec:	0889      	lsrs	r1, r1, #2
   15aee:	0189      	lsls	r1, r1, #6
   15af0:	f041 0102 	orr.w	r1, r1, #2
   15af4:	e791      	b.n	15a1a <hci_init+0x32e>
		rp.feat = (void *)rsp->data;
   15af6:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   15af8:	480d      	ldr	r0, [pc, #52]	; (15b30 <hci_init+0x444>)
   15afa:	6899      	ldr	r1, [r3, #8]
   15afc:	2201      	movs	r2, #1
   15afe:	4411      	add	r1, r2
   15b00:	f00b f94b 	bl	20d9a <memcpy>
		net_buf_unref(rsp);
   15b04:	9801      	ldr	r0, [sp, #4]
   15b06:	f004 f9ed 	bl	19ee4 <net_buf_unref>
   15b0a:	e788      	b.n	15a1e <hci_init+0x332>
   15b0c:	20000378 	.word	0x20000378
   15b10:	200003a8 	.word	0x200003a8
   15b14:	20000664 	.word	0x20000664
   15b18:	20000654 	.word	0x20000654
   15b1c:	00026180 	.word	0x00026180
   15b20:	0002615d 	.word	0x0002615d
   15b24:	000261a4 	.word	0x000261a4
   15b28:	20000361 	.word	0x20000361
   15b2c:	000261cd 	.word	0x000261cd
   15b30:	20000360 	.word	0x20000360

00015b34 <bt_le_create_conn_legacy>:
{
   15b34:	b5f0      	push	{r4, r5, r6, r7, lr}
   15b36:	b085      	sub	sp, #20
   15b38:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   15b3a:	f10d 0103 	add.w	r1, sp, #3
   15b3e:	2000      	movs	r0, #0
   15b40:	f000 ffa2 	bl	16a88 <bt_id_set_create_conn_own_addr>
	if (err) {
   15b44:	4604      	mov	r4, r0
   15b46:	2800      	cmp	r0, #0
   15b48:	d145      	bne.n	15bd6 <bt_le_create_conn_legacy+0xa2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   15b4a:	2119      	movs	r1, #25
   15b4c:	f242 000d 	movw	r0, #8205	; 0x200d
   15b50:	f7ff fcec 	bl	1552c <bt_hci_cmd_create>
	if (!buf) {
   15b54:	4607      	mov	r7, r0
   15b56:	2800      	cmp	r0, #0
   15b58:	d040      	beq.n	15bdc <bt_le_create_conn_legacy+0xa8>
   15b5a:	2119      	movs	r1, #25
   15b5c:	3008      	adds	r0, #8
   15b5e:	f00c fadc 	bl	2211a <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
   15b62:	2219      	movs	r2, #25
   15b64:	4605      	mov	r5, r0
   15b66:	4621      	mov	r1, r4
   15b68:	f00b f922 	bl	20db0 <memset>
	cp->own_addr_type = own_addr_type;
   15b6c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   15b70:	732b      	strb	r3, [r5, #12]
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   15b72:	f106 0188 	add.w	r1, r6, #136	; 0x88
   15b76:	1d68      	adds	r0, r5, #5
   15b78:	f00b f9c3 	bl	20f02 <bt_addr_le_copy>
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   15b7c:	4b19      	ldr	r3, [pc, #100]	; (15be4 <bt_le_create_conn_legacy+0xb0>)
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   15b7e:	712c      	strb	r4, [r5, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   15b80:	899a      	ldrh	r2, [r3, #12]
   15b82:	802a      	strh	r2, [r5, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   15b84:	89da      	ldrh	r2, [r3, #14]
   15b86:	806a      	strh	r2, [r5, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   15b88:	f8b6 20a0 	ldrh.w	r2, [r6, #160]	; 0xa0
   15b8c:	f8a5 200d 	strh.w	r2, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   15b90:	f8b6 20a2 	ldrh.w	r2, [r6, #162]	; 0xa2
   15b94:	f8a5 200f 	strh.w	r2, [r5, #15]
	state->target = target;
   15b98:	33cc      	adds	r3, #204	; 0xcc
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   15b9a:	f8b6 20a4 	ldrh.w	r2, [r6, #164]	; 0xa4
   15b9e:	f8a5 2011 	strh.w	r2, [r5, #17]
	state->target = target;
   15ba2:	9301      	str	r3, [sp, #4]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   15ba4:	f8b6 20a6 	ldrh.w	r2, [r6, #166]	; 0xa6
   15ba8:	f8a5 2013 	strh.w	r2, [r5, #19]
	state->bit = bit;
   15bac:	230b      	movs	r3, #11
   15bae:	9302      	str	r3, [sp, #8]
	cmd(buf)->state = state;
   15bb0:	4638      	mov	r0, r7
	state->val = val;
   15bb2:	2301      	movs	r3, #1
   15bb4:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = state;
   15bb8:	f004 f8dc 	bl	19d74 <net_buf_id>
   15bbc:	4b0a      	ldr	r3, [pc, #40]	; (15be8 <bt_le_create_conn_legacy+0xb4>)
   15bbe:	220c      	movs	r2, #12
   15bc0:	fb02 3300 	mla	r3, r2, r0, r3
   15bc4:	aa01      	add	r2, sp, #4
   15bc6:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   15bc8:	4639      	mov	r1, r7
   15bca:	4622      	mov	r2, r4
   15bcc:	f242 000d 	movw	r0, #8205	; 0x200d
   15bd0:	f7ff fce4 	bl	1559c <bt_hci_cmd_send_sync>
   15bd4:	4604      	mov	r4, r0
}
   15bd6:	4620      	mov	r0, r4
   15bd8:	b005      	add	sp, #20
   15bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   15bdc:	f06f 0468 	mvn.w	r4, #104	; 0x68
   15be0:	e7f9      	b.n	15bd6 <bt_le_create_conn_legacy+0xa2>
   15be2:	bf00      	nop
   15be4:	200002a8 	.word	0x200002a8
   15be8:	2000256c 	.word	0x2000256c

00015bec <bt_le_create_conn_cancel>:
{
   15bec:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   15bee:	2100      	movs	r1, #0
{
   15bf0:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   15bf2:	f242 000e 	movw	r0, #8206	; 0x200e
   15bf6:	f7ff fc99 	bl	1552c <bt_hci_cmd_create>
	state->target = target;
   15bfa:	4b0c      	ldr	r3, [pc, #48]	; (15c2c <bt_le_create_conn_cancel+0x40>)
   15bfc:	9301      	str	r3, [sp, #4]
	state->val = val;
   15bfe:	2500      	movs	r5, #0
	state->bit = bit;
   15c00:	230b      	movs	r3, #11
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   15c02:	4604      	mov	r4, r0
	state->bit = bit;
   15c04:	9302      	str	r3, [sp, #8]
	state->val = val;
   15c06:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = state;
   15c0a:	f004 f8b3 	bl	19d74 <net_buf_id>
   15c0e:	4b08      	ldr	r3, [pc, #32]	; (15c30 <bt_le_create_conn_cancel+0x44>)
   15c10:	220c      	movs	r2, #12
   15c12:	fb02 3000 	mla	r0, r2, r0, r3
   15c16:	ab01      	add	r3, sp, #4
   15c18:	6043      	str	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   15c1a:	462a      	mov	r2, r5
   15c1c:	4621      	mov	r1, r4
   15c1e:	f242 000e 	movw	r0, #8206	; 0x200e
   15c22:	f7ff fcbb 	bl	1559c <bt_hci_cmd_send_sync>
}
   15c26:	b005      	add	sp, #20
   15c28:	bd30      	pop	{r4, r5, pc}
   15c2a:	bf00      	nop
   15c2c:	20000374 	.word	0x20000374
   15c30:	2000256c 	.word	0x2000256c

00015c34 <bt_send>:
	return bt_dev.drv->send(buf);
   15c34:	4b02      	ldr	r3, [pc, #8]	; (15c40 <bt_send+0xc>)
   15c36:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   15c3a:	691b      	ldr	r3, [r3, #16]
   15c3c:	4718      	bx	r3
   15c3e:	bf00      	nop
   15c40:	200002a8 	.word	0x200002a8

00015c44 <bt_hci_cmd_send>:
{
   15c44:	b538      	push	{r3, r4, r5, lr}
   15c46:	4605      	mov	r5, r0
	if (!buf) {
   15c48:	460c      	mov	r4, r1
   15c4a:	b919      	cbnz	r1, 15c54 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   15c4c:	f7ff fc6e 	bl	1552c <bt_hci_cmd_create>
		if (!buf) {
   15c50:	4604      	mov	r4, r0
   15c52:	b308      	cbz	r0, 15c98 <bt_hci_cmd_send+0x54>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   15c54:	f640 4335 	movw	r3, #3125	; 0xc35
   15c58:	429d      	cmp	r5, r3
   15c5a:	d117      	bne.n	15c8c <bt_hci_cmd_send+0x48>
		err = bt_send(buf);
   15c5c:	4620      	mov	r0, r4
   15c5e:	f7ff ffe9 	bl	15c34 <bt_send>
		if (err) {
   15c62:	4605      	mov	r5, r0
   15c64:	b180      	cbz	r0, 15c88 <bt_hci_cmd_send+0x44>
			BT_ERR("Unable to send to driver (err %d)", err);
   15c66:	4a0e      	ldr	r2, [pc, #56]	; (15ca0 <bt_hci_cmd_send+0x5c>)
   15c68:	6813      	ldr	r3, [r2, #0]
   15c6a:	075b      	lsls	r3, r3, #29
   15c6c:	d009      	beq.n	15c82 <bt_hci_cmd_send+0x3e>
   15c6e:	4b0d      	ldr	r3, [pc, #52]	; (15ca4 <bt_hci_cmd_send+0x60>)
   15c70:	1ad2      	subs	r2, r2, r3
   15c72:	0892      	lsrs	r2, r2, #2
   15c74:	0192      	lsls	r2, r2, #6
   15c76:	4601      	mov	r1, r0
   15c78:	f042 0201 	orr.w	r2, r2, #1
   15c7c:	480a      	ldr	r0, [pc, #40]	; (15ca8 <bt_hci_cmd_send+0x64>)
   15c7e:	f009 f967 	bl	1ef50 <log_1>
			net_buf_unref(buf);
   15c82:	4620      	mov	r0, r4
   15c84:	f004 f92e 	bl	19ee4 <net_buf_unref>
}
   15c88:	4628      	mov	r0, r5
   15c8a:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   15c8c:	4807      	ldr	r0, [pc, #28]	; (15cac <bt_hci_cmd_send+0x68>)
   15c8e:	4621      	mov	r1, r4
   15c90:	f00c fa10 	bl	220b4 <net_buf_put>
	return 0;
   15c94:	2500      	movs	r5, #0
   15c96:	e7f7      	b.n	15c88 <bt_hci_cmd_send+0x44>
			return -ENOBUFS;
   15c98:	f06f 0568 	mvn.w	r5, #104	; 0x68
   15c9c:	e7f4      	b.n	15c88 <bt_hci_cmd_send+0x44>
   15c9e:	bf00      	nop
   15ca0:	20000664 	.word	0x20000664
   15ca4:	20000654 	.word	0x20000654
   15ca8:	000261f6 	.word	0x000261f6
   15cac:	200003f4 	.word	0x200003f4

00015cb0 <conn_auto_initiate>:
{
   15cb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   15cb2:	7a83      	ldrb	r3, [r0, #10]
   15cb4:	2b07      	cmp	r3, #7
{
   15cb6:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   15cb8:	d121      	bne.n	15cfe <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15cba:	f3bf 8f5b 	dmb	ish
   15cbe:	6843      	ldr	r3, [r0, #4]
   15cc0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   15cc4:	0499      	lsls	r1, r3, #18
   15cc6:	f100 0604 	add.w	r6, r0, #4
   15cca:	d41a      	bmi.n	15d02 <conn_auto_initiate+0x52>
   15ccc:	78c3      	ldrb	r3, [r0, #3]
   15cce:	b123      	cbz	r3, 15cda <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   15cd0:	4b38      	ldr	r3, [pc, #224]	; (15db4 <conn_auto_initiate+0x104>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   15cd2:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   15cd6:	071a      	lsls	r2, r3, #28
   15cd8:	d513      	bpl.n	15d02 <conn_auto_initiate+0x52>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   15cda:	2102      	movs	r1, #2
   15cdc:	f242 0016 	movw	r0, #8214	; 0x2016
   15ce0:	f7ff fc24 	bl	1552c <bt_hci_cmd_create>
	if (!buf) {
   15ce4:	4605      	mov	r5, r0
   15ce6:	b160      	cbz	r0, 15d02 <conn_auto_initiate+0x52>
   15ce8:	2102      	movs	r1, #2
   15cea:	3008      	adds	r0, #8
   15cec:	f00c fa15 	bl	2211a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   15cf0:	8823      	ldrh	r3, [r4, #0]
   15cf2:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   15cf4:	4629      	mov	r1, r5
   15cf6:	f242 0016 	movw	r0, #8214	; 0x2016
   15cfa:	f7ff ffa3 	bl	15c44 <bt_hci_cmd_send>
}
   15cfe:	b004      	add	sp, #16
   15d00:	bd70      	pop	{r4, r5, r6, pc}
   15d02:	f3bf 8f5b 	dmb	ish
   15d06:	6863      	ldr	r3, [r4, #4]
   15d08:	4d2a      	ldr	r5, [pc, #168]	; (15db4 <conn_auto_initiate+0x104>)
   15d0a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   15d0e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   15d12:	f3c3 3100 	ubfx	r1, r3, #12, #1
   15d16:	d125      	bne.n	15d64 <conn_auto_initiate+0xb4>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   15d18:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   15d1c:	07db      	lsls	r3, r3, #31
   15d1e:	d521      	bpl.n	15d64 <conn_auto_initiate+0xb4>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   15d20:	2302      	movs	r3, #2
   15d22:	9100      	str	r1, [sp, #0]
   15d24:	461a      	mov	r2, r3
   15d26:	4620      	mov	r0, r4
   15d28:	f00b f948 	bl	20fbc <bt_le_set_phy>
		if (!err) {
   15d2c:	4601      	mov	r1, r0
   15d2e:	b960      	cbnz	r0, 15d4a <conn_auto_initiate+0x9a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15d30:	f3bf 8f5b 	dmb	ish
   15d34:	e856 3f00 	ldrex	r3, [r6]
   15d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   15d3c:	e846 3200 	strex	r2, r3, [r6]
   15d40:	2a00      	cmp	r2, #0
   15d42:	d1f7      	bne.n	15d34 <conn_auto_initiate+0x84>
   15d44:	f3bf 8f5b 	dmb	ish
			return;
   15d48:	e7d9      	b.n	15cfe <conn_auto_initiate+0x4e>
		BT_ERR("Failed to set LE PHY (%d)", err);
   15d4a:	4a1b      	ldr	r2, [pc, #108]	; (15db8 <conn_auto_initiate+0x108>)
   15d4c:	6813      	ldr	r3, [r2, #0]
   15d4e:	0758      	lsls	r0, r3, #29
   15d50:	d008      	beq.n	15d64 <conn_auto_initiate+0xb4>
   15d52:	4b1a      	ldr	r3, [pc, #104]	; (15dbc <conn_auto_initiate+0x10c>)
   15d54:	481a      	ldr	r0, [pc, #104]	; (15dc0 <conn_auto_initiate+0x110>)
   15d56:	1ad2      	subs	r2, r2, r3
   15d58:	0892      	lsrs	r2, r2, #2
   15d5a:	0192      	lsls	r2, r2, #6
   15d5c:	f042 0201 	orr.w	r2, r2, #1
   15d60:	f009 f8f6 	bl	1ef50 <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   15d64:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   15d68:	0699      	lsls	r1, r3, #26
   15d6a:	d5c8      	bpl.n	15cfe <conn_auto_initiate+0x4e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   15d6c:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   15d70:	689b      	ldr	r3, [r3, #8]
   15d72:	079a      	lsls	r2, r3, #30
   15d74:	d5c3      	bpl.n	15cfe <conn_auto_initiate+0x4e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   15d76:	f10d 010e 	add.w	r1, sp, #14
   15d7a:	a803      	add	r0, sp, #12
   15d7c:	f7ff fc8a 	bl	15694 <hci_le_read_max_data_len>
			if (!err) {
   15d80:	2800      	cmp	r0, #0
   15d82:	d1bc      	bne.n	15cfe <conn_auto_initiate+0x4e>
				err = bt_le_set_data_len(conn,
   15d84:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   15d88:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   15d8c:	4620      	mov	r0, r4
   15d8e:	f00b f8f8 	bl	20f82 <bt_le_set_data_len>
				if (err) {
   15d92:	4601      	mov	r1, r0
   15d94:	2800      	cmp	r0, #0
   15d96:	d0b2      	beq.n	15cfe <conn_auto_initiate+0x4e>
					BT_ERR("Failed to set data len (%d)", err);
   15d98:	4a07      	ldr	r2, [pc, #28]	; (15db8 <conn_auto_initiate+0x108>)
   15d9a:	6813      	ldr	r3, [r2, #0]
   15d9c:	075b      	lsls	r3, r3, #29
   15d9e:	d0ae      	beq.n	15cfe <conn_auto_initiate+0x4e>
   15da0:	4b06      	ldr	r3, [pc, #24]	; (15dbc <conn_auto_initiate+0x10c>)
   15da2:	4808      	ldr	r0, [pc, #32]	; (15dc4 <conn_auto_initiate+0x114>)
   15da4:	1ad2      	subs	r2, r2, r3
   15da6:	0892      	lsrs	r2, r2, #2
   15da8:	0192      	lsls	r2, r2, #6
   15daa:	f042 0201 	orr.w	r2, r2, #1
   15dae:	f009 f8cf 	bl	1ef50 <log_1>
		}
   15db2:	e7a4      	b.n	15cfe <conn_auto_initiate+0x4e>
   15db4:	200002a8 	.word	0x200002a8
   15db8:	20000664 	.word	0x20000664
   15dbc:	20000654 	.word	0x20000654
   15dc0:	00026218 	.word	0x00026218
   15dc4:	00026232 	.word	0x00026232

00015dc8 <bt_hci_le_enh_conn_complete>:
{
   15dc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15dcc:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
   15dd0:	4a7a      	ldr	r2, [pc, #488]	; (15fbc <bt_hci_le_enh_conn_complete+0x1f4>)
	if (evt->status) {
   15dd2:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
   15dd4:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   15dd6:	ea6f 5309 	mvn.w	r3, r9, lsl #20
   15dda:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   15dde:	b29b      	uxth	r3, r3
   15de0:	4299      	cmp	r1, r3
   15de2:	f04f 0800 	mov.w	r8, #0
			disconnected_handles[i] = 0;
   15de6:	bf08      	it	eq
   15de8:	f8a2 8000 	strheq.w	r8, [r2]
{
   15dec:	b085      	sub	sp, #20
   15dee:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15df0:	fa1f f689 	uxth.w	r6, r9
			return true;
   15df4:	bf08      	it	eq
   15df6:	f04f 0801 	moveq.w	r8, #1
	if (evt->status) {
   15dfa:	2c00      	cmp	r4, #0
   15dfc:	d03e      	beq.n	15e7c <bt_hci_le_enh_conn_complete+0xb4>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15dfe:	2c02      	cmp	r4, #2
   15e00:	d12c      	bne.n	15e5c <bt_hci_le_enh_conn_complete+0x94>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   15e02:	2100      	movs	r1, #0
   15e04:	2206      	movs	r2, #6
   15e06:	4608      	mov	r0, r1
   15e08:	f001 fda6 	bl	17958 <bt_conn_lookup_state_le>
	if (!conn) {
   15e0c:	4605      	mov	r5, r0
   15e0e:	b990      	cbnz	r0, 15e36 <bt_hci_le_enh_conn_complete+0x6e>
		BT_ERR("No pending central connection");
   15e10:	496b      	ldr	r1, [pc, #428]	; (15fc0 <bt_hci_le_enh_conn_complete+0x1f8>)
   15e12:	680b      	ldr	r3, [r1, #0]
   15e14:	0758      	lsls	r0, r3, #29
   15e16:	d008      	beq.n	15e2a <bt_hci_le_enh_conn_complete+0x62>
   15e18:	4b6a      	ldr	r3, [pc, #424]	; (15fc4 <bt_hci_le_enh_conn_complete+0x1fc>)
   15e1a:	486b      	ldr	r0, [pc, #428]	; (15fc8 <bt_hci_le_enh_conn_complete+0x200>)
   15e1c:	1ac9      	subs	r1, r1, r3
   15e1e:	0889      	lsrs	r1, r1, #2
   15e20:	0189      	lsls	r1, r1, #6
   15e22:	f041 0101 	orr.w	r1, r1, #1
   15e26:	f009 f886 	bl	1ef36 <log_0>
			bt_le_scan_update(false);
   15e2a:	2000      	movs	r0, #0
   15e2c:	f000 ff1e 	bl	16c6c <bt_le_scan_update>
}
   15e30:	b005      	add	sp, #20
   15e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15e36:	2100      	movs	r1, #0
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   15e38:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15e3a:	f001 fb5f 	bl	174fc <bt_conn_set_state>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15e3e:	f3bf 8f5b 	dmb	ish
   15e42:	686b      	ldr	r3, [r5, #4]
   15e44:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   15e48:	07d9      	lsls	r1, r3, #31
   15e4a:	d503      	bpl.n	15e54 <bt_hci_le_enh_conn_complete+0x8c>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   15e4c:	4621      	mov	r1, r4
   15e4e:	4628      	mov	r0, r5
   15e50:	f001 fb54 	bl	174fc <bt_conn_set_state>
	bt_conn_unref(conn);
   15e54:	4628      	mov	r0, r5
   15e56:	f00b f9d4 	bl	21202 <bt_conn_unref>
   15e5a:	e7e6      	b.n	15e2a <bt_hci_le_enh_conn_complete+0x62>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   15e5c:	4a58      	ldr	r2, [pc, #352]	; (15fc0 <bt_hci_le_enh_conn_complete+0x1f8>)
   15e5e:	6813      	ldr	r3, [r2, #0]
   15e60:	f013 0f06 	tst.w	r3, #6
   15e64:	d0e4      	beq.n	15e30 <bt_hci_le_enh_conn_complete+0x68>
   15e66:	4b57      	ldr	r3, [pc, #348]	; (15fc4 <bt_hci_le_enh_conn_complete+0x1fc>)
   15e68:	4858      	ldr	r0, [pc, #352]	; (15fcc <bt_hci_le_enh_conn_complete+0x204>)
   15e6a:	1ad2      	subs	r2, r2, r3
   15e6c:	0892      	lsrs	r2, r2, #2
   15e6e:	0192      	lsls	r2, r2, #6
   15e70:	f042 0202 	orr.w	r2, r2, #2
   15e74:	4621      	mov	r1, r4
   15e76:	f009 f86b 	bl	1ef50 <log_1>
   15e7a:	e7d9      	b.n	15e30 <bt_hci_le_enh_conn_complete+0x68>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   15e7c:	7903      	ldrb	r3, [r0, #4]
   15e7e:	3b02      	subs	r3, #2
   15e80:	2b01      	cmp	r3, #1
   15e82:	f100 0704 	add.w	r7, r0, #4
   15e86:	d842      	bhi.n	15f0e <bt_hci_le_enh_conn_complete+0x146>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   15e88:	4639      	mov	r1, r7
   15e8a:	a802      	add	r0, sp, #8
   15e8c:	f00b f839 	bl	20f02 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   15e90:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
   15e94:	2206      	movs	r2, #6
   15e96:	3b02      	subs	r3, #2
   15e98:	f105 0111 	add.w	r1, r5, #17
   15e9c:	f10d 0001 	add.w	r0, sp, #1
   15ea0:	f88d 3008 	strb.w	r3, [sp, #8]
   15ea4:	f00a ff79 	bl	20d9a <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   15ea8:	2301      	movs	r3, #1
   15eaa:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   15eae:	78e8      	ldrb	r0, [r5, #3]
   15eb0:	b9a0      	cbnz	r0, 15edc <bt_hci_le_enh_conn_complete+0x114>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   15eb2:	2206      	movs	r2, #6
   15eb4:	a902      	add	r1, sp, #8
   15eb6:	f001 fd4f 	bl	17958 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15eba:	78eb      	ldrb	r3, [r5, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   15ebc:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15ebe:	b963      	cbnz	r3, 15eda <bt_hci_le_enh_conn_complete+0x112>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15ec0:	f3bf 8f5b 	dmb	ish
   15ec4:	4b42      	ldr	r3, [pc, #264]	; (15fd0 <bt_hci_le_enh_conn_complete+0x208>)
   15ec6:	e853 2f00 	ldrex	r2, [r3]
   15eca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   15ece:	e843 2100 	strex	r1, r2, [r3]
   15ed2:	2900      	cmp	r1, #0
   15ed4:	d1f7      	bne.n	15ec6 <bt_hci_le_enh_conn_complete+0xfe>
   15ed6:	f3bf 8f5b 	dmb	ish
	if (!conn) {
   15eda:	bb5c      	cbnz	r4, 15f34 <bt_hci_le_enh_conn_complete+0x16c>
		BT_ERR("No pending conn for peer %s",
   15edc:	4b38      	ldr	r3, [pc, #224]	; (15fc0 <bt_hci_le_enh_conn_complete+0x1f8>)
   15ede:	681a      	ldr	r2, [r3, #0]
   15ee0:	0752      	lsls	r2, r2, #29
   15ee2:	d00f      	beq.n	15f04 <bt_hci_le_enh_conn_complete+0x13c>
   15ee4:	4c37      	ldr	r4, [pc, #220]	; (15fc4 <bt_hci_le_enh_conn_complete+0x1fc>)
   15ee6:	4638      	mov	r0, r7
   15ee8:	1b1c      	subs	r4, r3, r4
   15eea:	f7fe fea5 	bl	14c38 <bt_addr_le_str_real>
   15eee:	f7fa fd47 	bl	10980 <z_log_strdup>
   15ef2:	08a4      	lsrs	r4, r4, #2
   15ef4:	01a4      	lsls	r4, r4, #6
   15ef6:	f044 0401 	orr.w	r4, r4, #1
   15efa:	4601      	mov	r1, r0
   15efc:	4622      	mov	r2, r4
   15efe:	4835      	ldr	r0, [pc, #212]	; (15fd4 <bt_hci_le_enh_conn_complete+0x20c>)
   15f00:	f009 f826 	bl	1ef50 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   15f04:	211f      	movs	r1, #31
   15f06:	4630      	mov	r0, r6
   15f08:	f00b f800 	bl	20f0c <bt_hci_disconnect>
		return;
   15f0c:	e790      	b.n	15e30 <bt_hci_le_enh_conn_complete+0x68>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   15f0e:	78c3      	ldrb	r3, [r0, #3]
   15f10:	2b01      	cmp	r3, #1
   15f12:	bf04      	itt	eq
   15f14:	4b30      	ldreq	r3, [pc, #192]	; (15fd8 <bt_hci_le_enh_conn_complete+0x210>)
   15f16:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   15f1a:	4639      	mov	r1, r7
   15f1c:	4620      	mov	r0, r4
   15f1e:	f00b f8b0 	bl	21082 <bt_lookup_id_addr>
   15f22:	4601      	mov	r1, r0
   15f24:	a802      	add	r0, sp, #8
   15f26:	f00a ffec 	bl	20f02 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   15f2a:	4639      	mov	r1, r7
   15f2c:	4668      	mov	r0, sp
   15f2e:	f00a ffe8 	bl	20f02 <bt_addr_le_copy>
   15f32:	e7bc      	b.n	15eae <bt_hci_le_enh_conn_complete+0xe6>
	conn->handle = handle;
   15f34:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   15f36:	a902      	add	r1, sp, #8
	conn->handle = handle;
   15f38:	f820 9b88 	strh.w	r9, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   15f3c:	f00a ffe1 	bl	20f02 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   15f40:	7e2a      	ldrb	r2, [r5, #24]
   15f42:	7deb      	ldrb	r3, [r5, #23]
   15f44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15f48:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   15f4c:	7eaa      	ldrb	r2, [r5, #26]
   15f4e:	7e6b      	ldrb	r3, [r5, #25]
   15f50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15f54:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   15f58:	7f2a      	ldrb	r2, [r5, #28]
   15f5a:	7eeb      	ldrb	r3, [r5, #27]
   15f5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15f60:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   15f64:	78eb      	ldrb	r3, [r5, #3]
   15f66:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   15f68:	2200      	movs	r2, #0
   15f6a:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15f6c:	b96b      	cbnz	r3, 15f8a <bt_hci_le_enh_conn_complete+0x1c2>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   15f6e:	4669      	mov	r1, sp
   15f70:	f104 0096 	add.w	r0, r4, #150	; 0x96
   15f74:	f00a ffc5 	bl	20f02 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   15f78:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   15f7a:	4b17      	ldr	r3, [pc, #92]	; (15fd8 <bt_hci_le_enh_conn_complete+0x210>)
					&bt_dev.id_addr[conn->id]);
   15f7c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   15f80:	4419      	add	r1, r3
   15f82:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   15f86:	f00a ffbc 	bl	20f02 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   15f8a:	2107      	movs	r1, #7
   15f8c:	4620      	mov	r0, r4
   15f8e:	f001 fab5 	bl	174fc <bt_conn_set_state>
	if (is_disconnected) {
   15f92:	f1b8 0f00 	cmp.w	r8, #0
   15f96:	d003      	beq.n	15fa0 <bt_hci_le_enh_conn_complete+0x1d8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   15f98:	2101      	movs	r1, #1
   15f9a:	4620      	mov	r0, r4
   15f9c:	f001 faae 	bl	174fc <bt_conn_set_state>
	bt_conn_connected(conn);
   15fa0:	4620      	mov	r0, r4
   15fa2:	f00b f931 	bl	21208 <bt_conn_connected>
	conn_auto_initiate(conn);
   15fa6:	4620      	mov	r0, r4
   15fa8:	f7ff fe82 	bl	15cb0 <conn_auto_initiate>
	bt_conn_unref(conn);
   15fac:	4620      	mov	r0, r4
   15fae:	f00b f928 	bl	21202 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15fb2:	78e3      	ldrb	r3, [r4, #3]
   15fb4:	2b00      	cmp	r3, #0
   15fb6:	f47f af3b 	bne.w	15e30 <bt_hci_le_enh_conn_complete+0x68>
   15fba:	e736      	b.n	15e2a <bt_hci_le_enh_conn_complete+0x62>
   15fbc:	200027e0 	.word	0x200027e0
   15fc0:	20000664 	.word	0x20000664
   15fc4:	20000654 	.word	0x20000654
   15fc8:	0002624e 	.word	0x0002624e
   15fcc:	0002626c 	.word	0x0002626c
   15fd0:	20000374 	.word	0x20000374
   15fd4:	00026285 	.word	0x00026285
   15fd8:	200002a8 	.word	0x200002a8

00015fdc <le_phy_update_complete>:
{
   15fdc:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15fde:	6883      	ldr	r3, [r0, #8]
   15fe0:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   15fe4:	4628      	mov	r0, r5
   15fe6:	f001 fa7d 	bl	174e4 <bt_conn_lookup_handle>
	if (!conn) {
   15fea:	4604      	mov	r4, r0
   15fec:	b978      	cbnz	r0, 1600e <le_phy_update_complete+0x32>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15fee:	4a19      	ldr	r2, [pc, #100]	; (16054 <le_phy_update_complete+0x78>)
   15ff0:	6813      	ldr	r3, [r2, #0]
   15ff2:	0759      	lsls	r1, r3, #29
   15ff4:	d02d      	beq.n	16052 <le_phy_update_complete+0x76>
   15ff6:	4b18      	ldr	r3, [pc, #96]	; (16058 <le_phy_update_complete+0x7c>)
   15ff8:	4818      	ldr	r0, [pc, #96]	; (1605c <le_phy_update_complete+0x80>)
   15ffa:	1ad2      	subs	r2, r2, r3
   15ffc:	0892      	lsrs	r2, r2, #2
   15ffe:	0192      	lsls	r2, r2, #6
   16000:	4629      	mov	r1, r5
   16002:	f042 0201 	orr.w	r2, r2, #1
}
   16006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1600a:	f008 bfa1 	b.w	1ef50 <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   1600e:	1d03      	adds	r3, r0, #4
   16010:	f3bf 8f5b 	dmb	ish
   16014:	e853 2f00 	ldrex	r2, [r3]
   16018:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   1601c:	e843 1500 	strex	r5, r1, [r3]
   16020:	2d00      	cmp	r5, #0
   16022:	d1f7      	bne.n	16014 <le_phy_update_complete+0x38>
   16024:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   16028:	0612      	lsls	r2, r2, #24
   1602a:	d50d      	bpl.n	16048 <le_phy_update_complete+0x6c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1602c:	f3bf 8f5b 	dmb	ish
   16030:	e853 2f00 	ldrex	r2, [r3]
   16034:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   16038:	e843 2100 	strex	r1, r2, [r3]
   1603c:	2900      	cmp	r1, #0
   1603e:	d1f7      	bne.n	16030 <le_phy_update_complete+0x54>
   16040:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
   16044:	f7ff fe34 	bl	15cb0 <conn_auto_initiate>
	bt_conn_unref(conn);
   16048:	4620      	mov	r0, r4
}
   1604a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1604e:	f00b b8d8 	b.w	21202 <bt_conn_unref>
}
   16052:	bd38      	pop	{r3, r4, r5, pc}
   16054:	20000664 	.word	0x20000664
   16058:	20000654 	.word	0x20000654
   1605c:	00025e73 	.word	0x00025e73

00016060 <le_remote_feat_complete>:
{
   16060:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   16062:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16064:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   16068:	4630      	mov	r0, r6
   1606a:	f001 fa3b 	bl	174e4 <bt_conn_lookup_handle>
	if (!conn) {
   1606e:	4604      	mov	r4, r0
   16070:	b978      	cbnz	r0, 16092 <le_remote_feat_complete+0x32>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16072:	4a16      	ldr	r2, [pc, #88]	; (160cc <le_remote_feat_complete+0x6c>)
   16074:	6813      	ldr	r3, [r2, #0]
   16076:	075b      	lsls	r3, r3, #29
   16078:	d027      	beq.n	160ca <le_remote_feat_complete+0x6a>
   1607a:	4b15      	ldr	r3, [pc, #84]	; (160d0 <le_remote_feat_complete+0x70>)
   1607c:	4815      	ldr	r0, [pc, #84]	; (160d4 <le_remote_feat_complete+0x74>)
   1607e:	1ad2      	subs	r2, r2, r3
   16080:	0892      	lsrs	r2, r2, #2
   16082:	0192      	lsls	r2, r2, #6
   16084:	4631      	mov	r1, r6
   16086:	f042 0201 	orr.w	r2, r2, #1
}
   1608a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1608e:	f008 bf5f 	b.w	1ef50 <log_1>
	if (!evt->status) {
   16092:	782b      	ldrb	r3, [r5, #0]
   16094:	b923      	cbnz	r3, 160a0 <le_remote_feat_complete+0x40>
		memcpy(conn->le.features, evt->features,
   16096:	2208      	movs	r2, #8
   16098:	1ce9      	adds	r1, r5, #3
   1609a:	30ac      	adds	r0, #172	; 0xac
   1609c:	f00a fe7d 	bl	20d9a <memcpy>
   160a0:	f3bf 8f5b 	dmb	ish
   160a4:	1d23      	adds	r3, r4, #4
   160a6:	e853 2f00 	ldrex	r2, [r3]
   160aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   160ae:	e843 2100 	strex	r1, r2, [r3]
   160b2:	2900      	cmp	r1, #0
   160b4:	d1f7      	bne.n	160a6 <le_remote_feat_complete+0x46>
   160b6:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   160ba:	4620      	mov	r0, r4
   160bc:	f7ff fdf8 	bl	15cb0 <conn_auto_initiate>
	bt_conn_unref(conn);
   160c0:	4620      	mov	r0, r4
}
   160c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   160c6:	f00b b89c 	b.w	21202 <bt_conn_unref>
}
   160ca:	bd70      	pop	{r4, r5, r6, pc}
   160cc:	20000664 	.word	0x20000664
   160d0:	20000654 	.word	0x20000654
   160d4:	00025e73 	.word	0x00025e73

000160d8 <le_conn_param_neg_reply>:
{
   160d8:	b570      	push	{r4, r5, r6, lr}
   160da:	4606      	mov	r6, r0
   160dc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   160de:	f242 0021 	movw	r0, #8225	; 0x2021
   160e2:	2103      	movs	r1, #3
   160e4:	f7ff fa22 	bl	1552c <bt_hci_cmd_create>
	if (!buf) {
   160e8:	4604      	mov	r4, r0
   160ea:	b970      	cbnz	r0, 1610a <le_conn_param_neg_reply+0x32>
		BT_ERR("Unable to allocate buffer");
   160ec:	490e      	ldr	r1, [pc, #56]	; (16128 <le_conn_param_neg_reply+0x50>)
   160ee:	680b      	ldr	r3, [r1, #0]
   160f0:	075b      	lsls	r3, r3, #29
   160f2:	d017      	beq.n	16124 <le_conn_param_neg_reply+0x4c>
   160f4:	4b0d      	ldr	r3, [pc, #52]	; (1612c <le_conn_param_neg_reply+0x54>)
   160f6:	480e      	ldr	r0, [pc, #56]	; (16130 <le_conn_param_neg_reply+0x58>)
   160f8:	1ac9      	subs	r1, r1, r3
   160fa:	0889      	lsrs	r1, r1, #2
   160fc:	0189      	lsls	r1, r1, #6
}
   160fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   16102:	f041 0101 	orr.w	r1, r1, #1
   16106:	f008 bf16 	b.w	1ef36 <log_0>
   1610a:	2103      	movs	r1, #3
   1610c:	3008      	adds	r0, #8
   1610e:	f00c f804 	bl	2211a <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   16112:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   16114:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   16116:	4621      	mov	r1, r4
   16118:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1611c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   16120:	f7ff bd90 	b.w	15c44 <bt_hci_cmd_send>
}
   16124:	bd70      	pop	{r4, r5, r6, pc}
   16126:	bf00      	nop
   16128:	20000664 	.word	0x20000664
   1612c:	20000654 	.word	0x20000654
   16130:	000262a1 	.word	0x000262a1

00016134 <le_conn_param_req>:
{
   16134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   16136:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   16138:	78d9      	ldrb	r1, [r3, #3]
   1613a:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1613c:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1613e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16142:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   16146:	7959      	ldrb	r1, [r3, #5]
   16148:	791a      	ldrb	r2, [r3, #4]
   1614a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1614e:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   16152:	799a      	ldrb	r2, [r3, #6]
   16154:	79d9      	ldrb	r1, [r3, #7]
   16156:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1615a:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1615e:	7a1a      	ldrb	r2, [r3, #8]
   16160:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   16162:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16164:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   16168:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1616a:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   1616e:	f001 f9b9 	bl	174e4 <bt_conn_lookup_handle>
	if (!conn) {
   16172:	4606      	mov	r6, r0
   16174:	b998      	cbnz	r0, 1619e <le_conn_param_req+0x6a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16176:	4a22      	ldr	r2, [pc, #136]	; (16200 <le_conn_param_req+0xcc>)
   16178:	6813      	ldr	r3, [r2, #0]
   1617a:	075b      	lsls	r3, r3, #29
   1617c:	d009      	beq.n	16192 <le_conn_param_req+0x5e>
   1617e:	4b21      	ldr	r3, [pc, #132]	; (16204 <le_conn_param_req+0xd0>)
   16180:	4821      	ldr	r0, [pc, #132]	; (16208 <le_conn_param_req+0xd4>)
   16182:	1ad2      	subs	r2, r2, r3
   16184:	0892      	lsrs	r2, r2, #2
   16186:	0192      	lsls	r2, r2, #6
   16188:	f042 0201 	orr.w	r2, r2, #1
   1618c:	4621      	mov	r1, r4
   1618e:	f008 fedf 	bl	1ef50 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   16192:	2102      	movs	r1, #2
   16194:	4620      	mov	r0, r4
   16196:	f7ff ff9f 	bl	160d8 <le_conn_param_neg_reply>
}
   1619a:	b003      	add	sp, #12
   1619c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   1619e:	4669      	mov	r1, sp
   161a0:	f001 fb3c 	bl	1781c <le_param_req>
   161a4:	b938      	cbnz	r0, 161b6 <le_conn_param_req+0x82>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   161a6:	211e      	movs	r1, #30
   161a8:	4620      	mov	r0, r4
   161aa:	f7ff ff95 	bl	160d8 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   161ae:	4630      	mov	r0, r6
   161b0:	f00b f827 	bl	21202 <bt_conn_unref>
   161b4:	e7f1      	b.n	1619a <le_conn_param_req+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   161b6:	210e      	movs	r1, #14
   161b8:	f242 0020 	movw	r0, #8224	; 0x2020
   161bc:	f7ff f9b6 	bl	1552c <bt_hci_cmd_create>
	if (!buf) {
   161c0:	4605      	mov	r5, r0
   161c2:	2800      	cmp	r0, #0
   161c4:	d0f3      	beq.n	161ae <le_conn_param_req+0x7a>
   161c6:	210e      	movs	r1, #14
   161c8:	3008      	adds	r0, #8
   161ca:	f00b ffa6 	bl	2211a <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   161ce:	220e      	movs	r2, #14
   161d0:	4604      	mov	r4, r0
   161d2:	2100      	movs	r1, #0
   161d4:	f00a fdec 	bl	20db0 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   161d8:	f8bd 3000 	ldrh.w	r3, [sp]
   161dc:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   161de:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   161e2:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   161e4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   161e8:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   161ea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   161ee:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   161f0:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   161f2:	4629      	mov	r1, r5
   161f4:	f242 0020 	movw	r0, #8224	; 0x2020
   161f8:	f7ff fd24 	bl	15c44 <bt_hci_cmd_send>
   161fc:	e7d7      	b.n	161ae <le_conn_param_req+0x7a>
   161fe:	bf00      	nop
   16200:	20000664 	.word	0x20000664
   16204:	20000654 	.word	0x20000654
   16208:	00025e73 	.word	0x00025e73

0001620c <hci_tx_thread>:
{
   1620c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16210:	4f57      	ldr	r7, [pc, #348]	; (16370 <hci_tx_thread+0x164>)
   16212:	4d58      	ldr	r5, [pc, #352]	; (16374 <hci_tx_thread+0x168>)
		events[0].state = K_POLL_STATE_NOT_READY;
   16214:	f8df a164 	ldr.w	sl, [pc, #356]	; 1637c <hci_tx_thread+0x170>
		BT_ASSERT(err == 0);
   16218:	f8df b18c 	ldr.w	fp, [pc, #396]	; 163a8 <hci_tx_thread+0x19c>
   1621c:	1b7d      	subs	r5, r7, r5
   1621e:	08ad      	lsrs	r5, r5, #2
		events[0].state = K_POLL_STATE_NOT_READY;
   16220:	f8da 300c 	ldr.w	r3, [sl, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   16224:	4854      	ldr	r0, [pc, #336]	; (16378 <hci_tx_thread+0x16c>)
		events[0].state = K_POLL_STATE_NOT_READY;
   16226:	f36f 3352 	bfc	r3, #13, #6
   1622a:	f8ca 300c 	str.w	r3, [sl, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1622e:	f001 f91b 	bl	17468 <bt_conn_prepare_events>
   16232:	f100 0801 	add.w	r8, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   16236:	4851      	ldr	r0, [pc, #324]	; (1637c <hci_tx_thread+0x170>)
   16238:	f04f 32ff 	mov.w	r2, #4294967295
   1623c:	f04f 33ff 	mov.w	r3, #4294967295
   16240:	4641      	mov	r1, r8
   16242:	f008 f85d 	bl	1e300 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   16246:	b160      	cbz	r0, 16262 <hci_tx_thread+0x56>
   16248:	494d      	ldr	r1, [pc, #308]	; (16380 <hci_tx_thread+0x174>)
   1624a:	484e      	ldr	r0, [pc, #312]	; (16384 <hci_tx_thread+0x178>)
   1624c:	f640 1393 	movw	r3, #2451	; 0x993
   16250:	465a      	mov	r2, fp
   16252:	f008 f93e 	bl	1e4d2 <printk>
   16256:	4040      	eors	r0, r0
   16258:	f380 8811 	msr	BASEPRI, r0
   1625c:	f04f 0003 	mov.w	r0, #3
   16260:	df02      	svc	2
{
   16262:	f8df 9118 	ldr.w	r9, [pc, #280]	; 1637c <hci_tx_thread+0x170>
	return z_impl_k_sem_take(sem, timeout);
   16266:	4e48      	ldr	r6, [pc, #288]	; (16388 <hci_tx_thread+0x17c>)
	for (; count; ev++, count--) {
   16268:	f1b8 0f00 	cmp.w	r8, #0
   1626c:	d102      	bne.n	16274 <hci_tx_thread+0x68>
	z_impl_k_yield();
   1626e:	f007 fd03 	bl	1dc78 <z_impl_k_yield>
	while (1) {
   16272:	e7d5      	b.n	16220 <hci_tx_thread+0x14>
		switch (ev->state) {
   16274:	f8d9 100c 	ldr.w	r1, [r9, #12]
   16278:	f3c1 3145 	ubfx	r1, r1, #13, #6
   1627c:	2901      	cmp	r1, #1
   1627e:	d95f      	bls.n	16340 <hci_tx_thread+0x134>
   16280:	2904      	cmp	r1, #4
   16282:	d16a      	bne.n	1635a <hci_tx_thread+0x14e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   16284:	f899 300c 	ldrb.w	r3, [r9, #12]
   16288:	2b00      	cmp	r3, #0
   1628a:	d15e      	bne.n	1634a <hci_tx_thread+0x13e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1628c:	483f      	ldr	r0, [pc, #252]	; (1638c <hci_tx_thread+0x180>)
   1628e:	2200      	movs	r2, #0
   16290:	2300      	movs	r3, #0
   16292:	f00b fef1 	bl	22078 <net_buf_get>
	BT_ASSERT(buf);
   16296:	4604      	mov	r4, r0
   16298:	b960      	cbnz	r0, 162b4 <hci_tx_thread+0xa8>
   1629a:	493d      	ldr	r1, [pc, #244]	; (16390 <hci_tx_thread+0x184>)
   1629c:	4839      	ldr	r0, [pc, #228]	; (16384 <hci_tx_thread+0x178>)
   1629e:	f640 132a 	movw	r3, #2346	; 0x92a
   162a2:	465a      	mov	r2, fp
   162a4:	f008 f915 	bl	1e4d2 <printk>
   162a8:	4040      	eors	r0, r0
   162aa:	f380 8811 	msr	BASEPRI, r0
   162ae:	f04f 0003 	mov.w	r0, #3
   162b2:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   162b4:	f04f 33ff 	mov.w	r3, #4294967295
   162b8:	4836      	ldr	r0, [pc, #216]	; (16394 <hci_tx_thread+0x188>)
   162ba:	f04f 32ff 	mov.w	r2, #4294967295
   162be:	f007 f88b 	bl	1d3d8 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   162c2:	f8d6 3130 	ldr.w	r3, [r6, #304]	; 0x130
   162c6:	b17b      	cbz	r3, 162e8 <hci_tx_thread+0xdc>
		BT_ERR("Uncleared pending sent_cmd");
   162c8:	683b      	ldr	r3, [r7, #0]
   162ca:	075a      	lsls	r2, r3, #29
   162cc:	d005      	beq.n	162da <hci_tx_thread+0xce>
   162ce:	01a9      	lsls	r1, r5, #6
   162d0:	4831      	ldr	r0, [pc, #196]	; (16398 <hci_tx_thread+0x18c>)
   162d2:	f041 0101 	orr.w	r1, r1, #1
   162d6:	f008 fe2e 	bl	1ef36 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
   162da:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
   162de:	f003 fe01 	bl	19ee4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   162e2:	2300      	movs	r3, #0
   162e4:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   162e8:	4620      	mov	r0, r4
   162ea:	f00b fef0 	bl	220ce <net_buf_ref>
   162ee:	f8c6 0130 	str.w	r0, [r6, #304]	; 0x130
	err = bt_send(buf);
   162f2:	4620      	mov	r0, r4
   162f4:	f7ff fc9e 	bl	15c34 <bt_send>
	if (err) {
   162f8:	4601      	mov	r1, r0
   162fa:	b308      	cbz	r0, 16340 <hci_tx_thread+0x134>
		BT_ERR("Unable to send to driver (err %d)", err);
   162fc:	683b      	ldr	r3, [r7, #0]
   162fe:	075b      	lsls	r3, r3, #29
   16300:	d005      	beq.n	1630e <hci_tx_thread+0x102>
   16302:	01aa      	lsls	r2, r5, #6
   16304:	4825      	ldr	r0, [pc, #148]	; (1639c <hci_tx_thread+0x190>)
   16306:	f042 0201 	orr.w	r2, r2, #1
   1630a:	f008 fe21 	bl	1ef50 <log_1>
	z_impl_k_sem_give(sem);
   1630e:	4821      	ldr	r0, [pc, #132]	; (16394 <hci_tx_thread+0x188>)
   16310:	f007 f83c 	bl	1d38c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   16314:	4620      	mov	r0, r4
   16316:	f003 fd2d 	bl	19d74 <net_buf_id>
   1631a:	4b21      	ldr	r3, [pc, #132]	; (163a0 <hci_tx_thread+0x194>)
   1631c:	220c      	movs	r2, #12
   1631e:	fb02 3000 	mla	r0, r2, r0, r3
   16322:	211f      	movs	r1, #31
   16324:	8840      	ldrh	r0, [r0, #2]
   16326:	4622      	mov	r2, r4
   16328:	f7ff f814 	bl	15354 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   1632c:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
   16330:	f003 fdd8 	bl	19ee4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   16334:	2300      	movs	r3, #0
		net_buf_unref(buf);
   16336:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   16338:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
		net_buf_unref(buf);
   1633c:	f003 fdd2 	bl	19ee4 <net_buf_unref>
	for (; count; ev++, count--) {
   16340:	f109 0914 	add.w	r9, r9, #20
   16344:	f108 38ff 	add.w	r8, r8, #4294967295
   16348:	e78e      	b.n	16268 <hci_tx_thread+0x5c>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1634a:	2b01      	cmp	r3, #1
   1634c:	d1f8      	bne.n	16340 <hci_tx_thread+0x134>
					conn = CONTAINER_OF(ev->fifo,
   1634e:	f8d9 0010 	ldr.w	r0, [r9, #16]
					bt_conn_process_tx(conn);
   16352:	3838      	subs	r0, #56	; 0x38
   16354:	f001 fc82 	bl	17c5c <bt_conn_process_tx>
   16358:	e7f2      	b.n	16340 <hci_tx_thread+0x134>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   1635a:	683b      	ldr	r3, [r7, #0]
   1635c:	f013 0f06 	tst.w	r3, #6
   16360:	d0ee      	beq.n	16340 <hci_tx_thread+0x134>
   16362:	01aa      	lsls	r2, r5, #6
   16364:	480f      	ldr	r0, [pc, #60]	; (163a4 <hci_tx_thread+0x198>)
   16366:	f042 0202 	orr.w	r2, r2, #2
   1636a:	f008 fdf1 	bl	1ef50 <log_1>
   1636e:	e7e7      	b.n	16340 <hci_tx_thread+0x134>
   16370:	20000664 	.word	0x20000664
   16374:	20000654 	.word	0x20000654
   16378:	200004b8 	.word	0x200004b8
   1637c:	200004a4 	.word	0x200004a4
   16380:	000260d4 	.word	0x000260d4
   16384:	00025f6e 	.word	0x00025f6e
   16388:	200002a8 	.word	0x200002a8
   1638c:	200003f4 	.word	0x200003f4
   16390:	00025e47 	.word	0x00025e47
   16394:	200003c0 	.word	0x200003c0
   16398:	000262bb 	.word	0x000262bb
   1639c:	000261f6 	.word	0x000261f6
   163a0:	2000256c 	.word	0x2000256c
   163a4:	000262d6 	.word	0x000262d6
   163a8:	00025f21 	.word	0x00025f21

000163ac <hci_event_prio>:
{
   163ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   163b0:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   163b2:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   163b6:	4630      	mov	r0, r6
   163b8:	f00b fee6 	bl	22188 <net_buf_simple_headroom>
	state->len = buf->len;
   163bc:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   163c0:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   163c4:	4605      	mov	r5, r0
   163c6:	d80c      	bhi.n	163e2 <hci_event_prio+0x36>
   163c8:	4a1c      	ldr	r2, [pc, #112]	; (1643c <hci_event_prio+0x90>)
   163ca:	491d      	ldr	r1, [pc, #116]	; (16440 <hci_event_prio+0x94>)
   163cc:	481d      	ldr	r0, [pc, #116]	; (16444 <hci_event_prio+0x98>)
   163ce:	f640 5327 	movw	r3, #3367	; 0xd27
   163d2:	f008 f87e 	bl	1e4d2 <printk>
   163d6:	4040      	eors	r0, r0
   163d8:	f380 8811 	msr	BASEPRI, r0
   163dc:	f04f 0003 	mov.w	r0, #3
   163e0:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   163e2:	2102      	movs	r1, #2
   163e4:	4630      	mov	r0, r6
   163e6:	f00b feb7 	bl	22158 <net_buf_simple_pull_mem>
   163ea:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   163ec:	7800      	ldrb	r0, [r0, #0]
   163ee:	f00a fd76 	bl	20ede <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   163f2:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   163f4:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   163f6:	d40c      	bmi.n	16412 <hci_event_prio+0x66>
   163f8:	4a10      	ldr	r2, [pc, #64]	; (1643c <hci_event_prio+0x90>)
   163fa:	4913      	ldr	r1, [pc, #76]	; (16448 <hci_event_prio+0x9c>)
   163fc:	4811      	ldr	r0, [pc, #68]	; (16444 <hci_event_prio+0x98>)
   163fe:	f640 532b 	movw	r3, #3371	; 0xd2b
   16402:	f008 f866 	bl	1e4d2 <printk>
   16406:	4040      	eors	r0, r0
   16408:	f380 8811 	msr	BASEPRI, r0
   1640c:	f04f 0003 	mov.w	r0, #3
   16410:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   16412:	2305      	movs	r3, #5
   16414:	4a0d      	ldr	r2, [pc, #52]	; (1644c <hci_event_prio+0xa0>)
   16416:	7838      	ldrb	r0, [r7, #0]
   16418:	4621      	mov	r1, r4
   1641a:	f7fe fd71 	bl	14f00 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1641e:	07b3      	lsls	r3, r6, #30
   16420:	d507      	bpl.n	16432 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   16422:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   16424:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   16428:	fa10 f585 	uxtah	r5, r0, r5
   1642c:	60a5      	str	r5, [r4, #8]
}
   1642e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   16432:	4620      	mov	r0, r4
}
   16434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   16438:	f003 bd54 	b.w	19ee4 <net_buf_unref>
   1643c:	00025f21 	.word	0x00025f21
   16440:	00025f55 	.word	0x00025f55
   16444:	00025f6e 	.word	0x00025f6e
   16448:	000262f7 	.word	0x000262f7
   1644c:	00023fd4 	.word	0x00023fd4

00016450 <bt_recv>:
{
   16450:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   16452:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   16454:	2901      	cmp	r1, #1
{
   16456:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   16458:	d007      	beq.n	1646a <bt_recv+0x1a>
   1645a:	2903      	cmp	r1, #3
   1645c:	d113      	bne.n	16486 <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   1645e:	4813      	ldr	r0, [pc, #76]	; (164ac <bt_recv+0x5c>)
   16460:	4629      	mov	r1, r5
   16462:	f00b fe27 	bl	220b4 <net_buf_put>
		return 0;
   16466:	2000      	movs	r0, #0
   16468:	e00c      	b.n	16484 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1646a:	6883      	ldr	r3, [r0, #8]
   1646c:	7818      	ldrb	r0, [r3, #0]
   1646e:	f00a fd36 	bl	20ede <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   16472:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16474:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   16476:	d502      	bpl.n	1647e <bt_recv+0x2e>
			hci_event_prio(buf);
   16478:	4628      	mov	r0, r5
   1647a:	f7ff ff97 	bl	163ac <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1647e:	f014 0002 	ands.w	r0, r4, #2
   16482:	d1ec      	bne.n	1645e <bt_recv+0xe>
}
   16484:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   16486:	4a0a      	ldr	r2, [pc, #40]	; (164b0 <bt_recv+0x60>)
   16488:	6813      	ldr	r3, [r2, #0]
   1648a:	075b      	lsls	r3, r3, #29
   1648c:	d008      	beq.n	164a0 <bt_recv+0x50>
   1648e:	4b09      	ldr	r3, [pc, #36]	; (164b4 <bt_recv+0x64>)
   16490:	4809      	ldr	r0, [pc, #36]	; (164b8 <bt_recv+0x68>)
   16492:	1ad2      	subs	r2, r2, r3
   16494:	0892      	lsrs	r2, r2, #2
   16496:	0192      	lsls	r2, r2, #6
   16498:	f042 0201 	orr.w	r2, r2, #1
   1649c:	f008 fd58 	bl	1ef50 <log_1>
		net_buf_unref(buf);
   164a0:	4628      	mov	r0, r5
   164a2:	f003 fd1f 	bl	19ee4 <net_buf_unref>
		return -EINVAL;
   164a6:	f06f 0015 	mvn.w	r0, #21
   164aa:	e7eb      	b.n	16484 <bt_recv+0x34>
   164ac:	200003dc 	.word	0x200003dc
   164b0:	20000664 	.word	0x20000664
   164b4:	20000654 	.word	0x20000654
   164b8:	00026310 	.word	0x00026310

000164bc <bt_hci_driver_register>:
	if (bt_dev.drv) {
   164bc:	4a08      	ldr	r2, [pc, #32]	; (164e0 <bt_hci_driver_register+0x24>)
{
   164be:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   164c0:	f8d2 0164 	ldr.w	r0, [r2, #356]	; 0x164
   164c4:	b930      	cbnz	r0, 164d4 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   164c6:	68d9      	ldr	r1, [r3, #12]
   164c8:	b139      	cbz	r1, 164da <bt_hci_driver_register+0x1e>
   164ca:	6919      	ldr	r1, [r3, #16]
   164cc:	b129      	cbz	r1, 164da <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   164ce:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
	return 0;
   164d2:	4770      	bx	lr
		return -EALREADY;
   164d4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   164d8:	4770      	bx	lr
		return -EINVAL;
   164da:	f06f 0015 	mvn.w	r0, #21
}
   164de:	4770      	bx	lr
   164e0:	200002a8 	.word	0x200002a8

000164e4 <bt_finalize_init>:
   164e4:	4b07      	ldr	r3, [pc, #28]	; (16504 <bt_finalize_init+0x20>)
   164e6:	f3bf 8f5b 	dmb	ish
   164ea:	e853 2f00 	ldrex	r2, [r3]
   164ee:	f042 0202 	orr.w	r2, r2, #2
   164f2:	e843 2100 	strex	r1, r2, [r3]
   164f6:	2900      	cmp	r1, #0
   164f8:	d1f7      	bne.n	164ea <bt_finalize_init+0x6>
   164fa:	f3bf 8f5b 	dmb	ish
		bt_le_scan_update(false);
   164fe:	2000      	movs	r0, #0
   16500:	f000 bbb4 	b.w	16c6c <bt_le_scan_update>
   16504:	20000374 	.word	0x20000374

00016508 <init_work>:
{
   16508:	b510      	push	{r4, lr}
	err = hci_init();
   1650a:	f7ff f8ef 	bl	156ec <hci_init>
	if (err) {
   1650e:	4604      	mov	r4, r0
   16510:	b928      	cbnz	r0, 1651e <init_work+0x16>
		err = bt_conn_init();
   16512:	f001 fc0b 	bl	17d2c <bt_conn_init>
		if (err) {
   16516:	4604      	mov	r4, r0
   16518:	b908      	cbnz	r0, 1651e <init_work+0x16>
	bt_finalize_init();
   1651a:	f7ff ffe3 	bl	164e4 <bt_finalize_init>
	if (ready_cb) {
   1651e:	4b04      	ldr	r3, [pc, #16]	; (16530 <init_work+0x28>)
   16520:	681b      	ldr	r3, [r3, #0]
   16522:	b11b      	cbz	r3, 1652c <init_work+0x24>
		ready_cb(err);
   16524:	4620      	mov	r0, r4
}
   16526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   1652a:	4718      	bx	r3
}
   1652c:	bd10      	pop	{r4, pc}
   1652e:	bf00      	nop
   16530:	20002584 	.word	0x20002584

00016534 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   16534:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	int err;

	if (!bt_dev.drv) {
   16538:	4d41      	ldr	r5, [pc, #260]	; (16640 <bt_enable+0x10c>)
   1653a:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
{
   1653e:	b088      	sub	sp, #32
   16540:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   16542:	b97b      	cbnz	r3, 16564 <bt_enable+0x30>
		BT_ERR("No HCI driver registered");
   16544:	493f      	ldr	r1, [pc, #252]	; (16644 <bt_enable+0x110>)
   16546:	680b      	ldr	r3, [r1, #0]
   16548:	075a      	lsls	r2, r3, #29
   1654a:	d008      	beq.n	1655e <bt_enable+0x2a>
   1654c:	4b3e      	ldr	r3, [pc, #248]	; (16648 <bt_enable+0x114>)
   1654e:	483f      	ldr	r0, [pc, #252]	; (1664c <bt_enable+0x118>)
   16550:	1ac9      	subs	r1, r1, r3
   16552:	0889      	lsrs	r1, r1, #2
   16554:	0189      	lsls	r1, r1, #6
   16556:	f041 0101 	orr.w	r1, r1, #1
   1655a:	f008 fcec 	bl	1ef36 <log_0>
		return -ENODEV;
   1655e:	f06f 0412 	mvn.w	r4, #18
   16562:	e052      	b.n	1660a <bt_enable+0xd6>
   16564:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   16568:	f3bf 8f5b 	dmb	ish
   1656c:	e853 4f00 	ldrex	r4, [r3]
   16570:	f044 0201 	orr.w	r2, r4, #1
   16574:	e843 2100 	strex	r1, r2, [r3]
   16578:	2900      	cmp	r1, #0
   1657a:	d1f7      	bne.n	1656c <bt_enable+0x38>
   1657c:	f3bf 8f5b 	dmb	ish
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   16580:	f014 0401 	ands.w	r4, r4, #1
   16584:	d158      	bne.n	16638 <bt_enable+0x104>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   16586:	4b32      	ldr	r3, [pc, #200]	; (16650 <bt_enable+0x11c>)
   16588:	f04f 0800 	mov.w	r8, #0
   1658c:	601e      	str	r6, [r3, #0]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
   1658e:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16592:	f06f 0308 	mvn.w	r3, #8
   16596:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1659a:	e9cd 8906 	strd	r8, r9, [sp, #24]
   1659e:	e9cd 4400 	strd	r4, r4, [sp]
   165a2:	4b2c      	ldr	r3, [pc, #176]	; (16654 <bt_enable+0x120>)
   165a4:	492c      	ldr	r1, [pc, #176]	; (16658 <bt_enable+0x124>)
   165a6:	9404      	str	r4, [sp, #16]
   165a8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   165ac:	482b      	ldr	r0, [pc, #172]	; (1665c <bt_enable+0x128>)
   165ae:	f006 fc97 	bl	1cee0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   165b2:	492b      	ldr	r1, [pc, #172]	; (16660 <bt_enable+0x12c>)
   165b4:	4829      	ldr	r0, [pc, #164]	; (1665c <bt_enable+0x128>)
   165b6:	f006 fbe1 	bl	1cd7c <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   165ba:	f06f 0307 	mvn.w	r3, #7
   165be:	e9cd 4302 	strd	r4, r3, [sp, #8]
   165c2:	e9cd 8906 	strd	r8, r9, [sp, #24]
   165c6:	e9cd 4400 	strd	r4, r4, [sp]
   165ca:	4b26      	ldr	r3, [pc, #152]	; (16664 <bt_enable+0x130>)
   165cc:	4926      	ldr	r1, [pc, #152]	; (16668 <bt_enable+0x134>)
   165ce:	9404      	str	r4, [sp, #16]
   165d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   165d4:	4825      	ldr	r0, [pc, #148]	; (1666c <bt_enable+0x138>)
   165d6:	f006 fc83 	bl	1cee0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   165da:	4925      	ldr	r1, [pc, #148]	; (16670 <bt_enable+0x13c>)
   165dc:	4823      	ldr	r0, [pc, #140]	; (1666c <bt_enable+0x138>)
   165de:	f006 fbcd 	bl	1cd7c <z_impl_k_thread_name_set>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
   165e2:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   165e6:	68db      	ldr	r3, [r3, #12]
   165e8:	4798      	blx	r3
	if (err) {
   165ea:	4604      	mov	r4, r0
   165ec:	b188      	cbz	r0, 16612 <bt_enable+0xde>
		BT_ERR("HCI driver open failed (%d)", err);
   165ee:	4a15      	ldr	r2, [pc, #84]	; (16644 <bt_enable+0x110>)
   165f0:	6813      	ldr	r3, [r2, #0]
   165f2:	075b      	lsls	r3, r3, #29
   165f4:	d009      	beq.n	1660a <bt_enable+0xd6>
   165f6:	4b14      	ldr	r3, [pc, #80]	; (16648 <bt_enable+0x114>)
   165f8:	1ad2      	subs	r2, r2, r3
   165fa:	0892      	lsrs	r2, r2, #2
   165fc:	0192      	lsls	r2, r2, #6
   165fe:	4601      	mov	r1, r0
   16600:	f042 0201 	orr.w	r2, r2, #1
   16604:	481b      	ldr	r0, [pc, #108]	; (16674 <bt_enable+0x140>)
   16606:	f008 fca3 	bl	1ef50 <log_1>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   1660a:	4620      	mov	r0, r4
   1660c:	b008      	add	sp, #32
   1660e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	if (!cb) {
   16612:	b966      	cbnz	r6, 1662e <bt_enable+0xfa>
	err = hci_init();
   16614:	f7ff f86a 	bl	156ec <hci_init>
	if (err) {
   16618:	4604      	mov	r4, r0
   1661a:	2800      	cmp	r0, #0
   1661c:	d1f5      	bne.n	1660a <bt_enable+0xd6>
		err = bt_conn_init();
   1661e:	f001 fb85 	bl	17d2c <bt_conn_init>
		if (err) {
   16622:	4604      	mov	r4, r0
   16624:	2800      	cmp	r0, #0
   16626:	d1f0      	bne.n	1660a <bt_enable+0xd6>
	bt_finalize_init();
   16628:	f7ff ff5c 	bl	164e4 <bt_finalize_init>
	return 0;
   1662c:	e7ed      	b.n	1660a <bt_enable+0xd6>
	k_work_submit(&bt_dev.init);
   1662e:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   16632:	f007 f821 	bl	1d678 <k_work_submit>
	return 0;
   16636:	e7e8      	b.n	1660a <bt_enable+0xd6>
		return -EALREADY;
   16638:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1663c:	e7e5      	b.n	1660a <bt_enable+0xd6>
   1663e:	bf00      	nop
   16640:	200002a8 	.word	0x200002a8
   16644:	20000664 	.word	0x20000664
   16648:	20000654 	.word	0x20000654
   1664c:	00026324 	.word	0x00026324
   16650:	20002584 	.word	0x20002584
   16654:	0001620d 	.word	0x0001620d
   16658:	20004180 	.word	0x20004180
   1665c:	20001858 	.word	0x20001858
   16660:	0002633d 	.word	0x0002633d
   16664:	00014f95 	.word	0x00014f95
   16668:	20003d60 	.word	0x20003d60
   1666c:	200017a0 	.word	0x200017a0
   16670:	00026343 	.word	0x00026343
   16674:	00026349 	.word	0x00026349

00016678 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   16678:	4800      	ldr	r0, [pc, #0]	; (1667c <bt_get_name+0x4>)
   1667a:	4770      	bx	lr
   1667c:	00026365 	.word	0x00026365

00016680 <bt_data_parse>:
}

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   16680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16682:	4604      	mov	r4, r0
   16684:	460e      	mov	r6, r1
   16686:	4617      	mov	r7, r2
	while (ad->len > 1) {
   16688:	88a3      	ldrh	r3, [r4, #4]
   1668a:	2b01      	cmp	r3, #1
   1668c:	d916      	bls.n	166bc <bt_data_parse+0x3c>
		struct bt_data data;
		uint8_t len;

		len = net_buf_simple_pull_u8(ad);
   1668e:	4620      	mov	r0, r4
   16690:	f00b fd6a 	bl	22168 <net_buf_simple_pull_u8>
		if (len == 0U) {
   16694:	4605      	mov	r5, r0
   16696:	b188      	cbz	r0, 166bc <bt_data_parse+0x3c>
			/* Early termination */
			return;
		}

		if (len > ad->len) {
   16698:	88a2      	ldrh	r2, [r4, #4]
   1669a:	b283      	uxth	r3, r0
   1669c:	429a      	cmp	r2, r3
   1669e:	d20f      	bcs.n	166c0 <bt_data_parse+0x40>
			BT_WARN("Malformed data");
   166a0:	4911      	ldr	r1, [pc, #68]	; (166e8 <bt_data_parse+0x68>)
   166a2:	680b      	ldr	r3, [r1, #0]
   166a4:	f013 0f06 	tst.w	r3, #6
   166a8:	d008      	beq.n	166bc <bt_data_parse+0x3c>
   166aa:	4b10      	ldr	r3, [pc, #64]	; (166ec <bt_data_parse+0x6c>)
   166ac:	4810      	ldr	r0, [pc, #64]	; (166f0 <bt_data_parse+0x70>)
   166ae:	1ac9      	subs	r1, r1, r3
   166b0:	0889      	lsrs	r1, r1, #2
   166b2:	0189      	lsls	r1, r1, #6
   166b4:	f041 0102 	orr.w	r1, r1, #2
   166b8:	f008 fc3d 	bl	1ef36 <log_0>
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
   166bc:	b003      	add	sp, #12
   166be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data.type = net_buf_simple_pull_u8(ad);
   166c0:	4620      	mov	r0, r4
   166c2:	f00b fd51 	bl	22168 <net_buf_simple_pull_u8>
		data.data_len = len - 1;
   166c6:	3d01      	subs	r5, #1
		data.data = ad->data;
   166c8:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
   166ca:	f88d 0000 	strb.w	r0, [sp]
		if (!func(&data, user_data)) {
   166ce:	4639      	mov	r1, r7
   166d0:	4668      	mov	r0, sp
		data.data_len = len - 1;
   166d2:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
   166d6:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
   166d8:	47b0      	blx	r6
   166da:	2800      	cmp	r0, #0
   166dc:	d0ee      	beq.n	166bc <bt_data_parse+0x3c>
		net_buf_simple_pull(ad, len - 1);
   166de:	4629      	mov	r1, r5
   166e0:	4620      	mov	r0, r4
   166e2:	f00b fd31 	bl	22148 <net_buf_simple_pull>
   166e6:	e7cf      	b.n	16688 <bt_data_parse+0x8>
   166e8:	20000664 	.word	0x20000664
   166ec:	20000654 	.word	0x20000654
   166f0:	0002636c 	.word	0x0002636c

000166f4 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   166f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   166f6:	4f0b      	ldr	r7, [pc, #44]	; (16724 <id_find+0x30>)
{
   166f8:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   166fa:	2500      	movs	r5, #0
   166fc:	79fb      	ldrb	r3, [r7, #7]
   166fe:	b2ec      	uxtb	r4, r5
   16700:	42a3      	cmp	r3, r4
   16702:	d802      	bhi.n	1670a <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   16704:	f06f 0401 	mvn.w	r4, #1
   16708:	e009      	b.n	1671e <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   1670a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   1670e:	2207      	movs	r2, #7
   16710:	4439      	add	r1, r7
   16712:	4630      	mov	r0, r6
   16714:	f00a fb1a 	bl	20d4c <memcmp>
   16718:	3501      	adds	r5, #1
   1671a:	2800      	cmp	r0, #0
   1671c:	d1ee      	bne.n	166fc <id_find+0x8>
}
   1671e:	4620      	mov	r0, r4
   16720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16722:	bf00      	nop
   16724:	200002a8 	.word	0x200002a8

00016728 <set_random_address>:
{
   16728:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   1672a:	4914      	ldr	r1, [pc, #80]	; (1677c <set_random_address+0x54>)
   1672c:	2206      	movs	r2, #6
   1672e:	4605      	mov	r5, r0
   16730:	f00a fb0c 	bl	20d4c <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   16734:	4604      	mov	r4, r0
   16736:	b1e0      	cbz	r0, 16772 <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   16738:	2106      	movs	r1, #6
   1673a:	f242 0005 	movw	r0, #8197	; 0x2005
   1673e:	f7fe fef5 	bl	1552c <bt_hci_cmd_create>
	if (!buf) {
   16742:	4604      	mov	r4, r0
   16744:	b1b8      	cbz	r0, 16776 <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16746:	2206      	movs	r2, #6
   16748:	4629      	mov	r1, r5
   1674a:	3008      	adds	r0, #8
   1674c:	f00b fceb 	bl	22126 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   16750:	4621      	mov	r1, r4
   16752:	2200      	movs	r2, #0
   16754:	f242 0005 	movw	r0, #8197	; 0x2005
   16758:	f7fe ff20 	bl	1559c <bt_hci_cmd_send_sync>
	if (err) {
   1675c:	4604      	mov	r4, r0
   1675e:	b940      	cbnz	r0, 16772 <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   16760:	2206      	movs	r2, #6
   16762:	4806      	ldr	r0, [pc, #24]	; (1677c <set_random_address+0x54>)
   16764:	4629      	mov	r1, r5
   16766:	f00a fb18 	bl	20d9a <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   1676a:	4b05      	ldr	r3, [pc, #20]	; (16780 <set_random_address+0x58>)
   1676c:	2201      	movs	r2, #1
   1676e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
   16772:	4620      	mov	r0, r4
   16774:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   16776:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1677a:	e7fa      	b.n	16772 <set_random_address+0x4a>
   1677c:	20000309 	.word	0x20000309
   16780:	200002a8 	.word	0x200002a8

00016784 <id_create.isra.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   16784:	b530      	push	{r4, r5, lr}
   16786:	4604      	mov	r4, r0
   16788:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1678a:	460d      	mov	r5, r1
   1678c:	b1a1      	cbz	r1, 167b8 <id_create.isra.0+0x34>
   1678e:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   16790:	2207      	movs	r2, #7
   16792:	a902      	add	r1, sp, #8
   16794:	4628      	mov	r0, r5
   16796:	9302      	str	r3, [sp, #8]
   16798:	f8cd 300b 	str.w	r3, [sp, #11]
   1679c:	f00a fad6 	bl	20d4c <memcmp>
   167a0:	b150      	cbz	r0, 167b8 <id_create.isra.0+0x34>
	memcpy(dst, src, sizeof(*dst));
   167a2:	4812      	ldr	r0, [pc, #72]	; (167ec <id_create.isra.0+0x68>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   167a4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   167a8:	2207      	movs	r2, #7
   167aa:	4629      	mov	r1, r5
   167ac:	4420      	add	r0, r4
   167ae:	f00a faf4 	bl	20d9a <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   167b2:	2000      	movs	r0, #0
}
   167b4:	b005      	add	sp, #20
   167b6:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   167b8:	4668      	mov	r0, sp
   167ba:	f00a fb82 	bl	20ec2 <bt_addr_le_create_static>
			if (err) {
   167be:	2800      	cmp	r0, #0
   167c0:	d1f8      	bne.n	167b4 <id_create.isra.0+0x30>
		} while (id_find(&new_addr) >= 0);
   167c2:	4668      	mov	r0, sp
   167c4:	f7ff ff96 	bl	166f4 <id_find>
   167c8:	2800      	cmp	r0, #0
   167ca:	daf5      	bge.n	167b8 <id_create.isra.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   167cc:	4807      	ldr	r0, [pc, #28]	; (167ec <id_create.isra.0+0x68>)
   167ce:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   167d2:	4404      	add	r4, r0
   167d4:	2207      	movs	r2, #7
   167d6:	4669      	mov	r1, sp
   167d8:	4620      	mov	r0, r4
   167da:	f00a fade 	bl	20d9a <memcpy>
		if (addr) {
   167de:	2d00      	cmp	r5, #0
   167e0:	d0e7      	beq.n	167b2 <id_create.isra.0+0x2e>
   167e2:	2207      	movs	r2, #7
   167e4:	4621      	mov	r1, r4
   167e6:	4628      	mov	r0, r5
   167e8:	e7e1      	b.n	167ae <id_create.isra.0+0x2a>
   167ea:	bf00      	nop
   167ec:	200002a8 	.word	0x200002a8

000167f0 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   167f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   167f2:	460e      	mov	r6, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   167f4:	4604      	mov	r4, r0
   167f6:	b918      	cbnz	r0, 16800 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   167f8:	b35e      	cbz	r6, 16852 <bt_id_create+0x62>
		return -EINVAL;
   167fa:	f06f 0015 	mvn.w	r0, #21
   167fe:	e026      	b.n	1684e <bt_id_create+0x5e>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   16800:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   16802:	2207      	movs	r2, #7
   16804:	4669      	mov	r1, sp
   16806:	9300      	str	r3, [sp, #0]
   16808:	f8cd 3003 	str.w	r3, [sp, #3]
   1680c:	f00a fa9e 	bl	20d4c <memcmp>
   16810:	2800      	cmp	r0, #0
   16812:	d0f1      	beq.n	167f8 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   16814:	7823      	ldrb	r3, [r4, #0]
   16816:	2b01      	cmp	r3, #1
   16818:	d104      	bne.n	16824 <bt_id_create+0x34>
   1681a:	79a3      	ldrb	r3, [r4, #6]
   1681c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16820:	2bc0      	cmp	r3, #192	; 0xc0
   16822:	d00d      	beq.n	16840 <bt_id_create+0x50>
			BT_ERR("Only static random identity address supported");
   16824:	491e      	ldr	r1, [pc, #120]	; (168a0 <bt_id_create+0xb0>)
   16826:	680b      	ldr	r3, [r1, #0]
   16828:	075a      	lsls	r2, r3, #29
   1682a:	d0e6      	beq.n	167fa <bt_id_create+0xa>
   1682c:	4b1d      	ldr	r3, [pc, #116]	; (168a4 <bt_id_create+0xb4>)
   1682e:	481e      	ldr	r0, [pc, #120]	; (168a8 <bt_id_create+0xb8>)
   16830:	1ac9      	subs	r1, r1, r3
   16832:	0889      	lsrs	r1, r1, #2
   16834:	0189      	lsls	r1, r1, #6
   16836:	f041 0101 	orr.w	r1, r1, #1
   1683a:	f008 fb7c 	bl	1ef36 <log_0>
   1683e:	e7dc      	b.n	167fa <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   16840:	4620      	mov	r0, r4
   16842:	f7ff ff57 	bl	166f4 <id_find>
   16846:	2800      	cmp	r0, #0
   16848:	dbd6      	blt.n	167f8 <bt_id_create+0x8>
			return -EALREADY;
   1684a:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   1684e:	b002      	add	sp, #8
   16850:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   16852:	4d16      	ldr	r5, [pc, #88]	; (168ac <bt_id_create+0xbc>)
   16854:	79eb      	ldrb	r3, [r5, #7]
   16856:	2b01      	cmp	r3, #1
   16858:	d01e      	beq.n	16898 <bt_id_create+0xa8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1685a:	f3bf 8f5b 	dmb	ish
   1685e:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   16862:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   16866:	07db      	lsls	r3, r3, #31
   16868:	d40b      	bmi.n	16882 <bt_id_create+0x92>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   1686a:	2c00      	cmp	r4, #0
   1686c:	d0c5      	beq.n	167fa <bt_id_create+0xa>
   1686e:	2207      	movs	r2, #7
   16870:	4669      	mov	r1, sp
   16872:	4620      	mov	r0, r4
   16874:	9600      	str	r6, [sp, #0]
   16876:	f8cd 6003 	str.w	r6, [sp, #3]
   1687a:	f00a fa67 	bl	20d4c <memcmp>
   1687e:	2800      	cmp	r0, #0
   16880:	d0bb      	beq.n	167fa <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   16882:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   16884:	4621      	mov	r1, r4
	new_id = bt_dev.id_count++;
   16886:	1c73      	adds	r3, r6, #1
	err = id_create(new_id, addr, irk);
   16888:	4630      	mov	r0, r6
	new_id = bt_dev.id_count++;
   1688a:	71eb      	strb	r3, [r5, #7]
	err = id_create(new_id, addr, irk);
   1688c:	f7ff ff7a 	bl	16784 <id_create.isra.0>
	new_id = bt_dev.id_count++;
   16890:	2800      	cmp	r0, #0
   16892:	bf08      	it	eq
   16894:	4630      	moveq	r0, r6
   16896:	e7da      	b.n	1684e <bt_id_create+0x5e>
		return -ENOMEM;
   16898:	f06f 000b 	mvn.w	r0, #11
   1689c:	e7d7      	b.n	1684e <bt_id_create+0x5e>
   1689e:	bf00      	nop
   168a0:	20000668 	.word	0x20000668
   168a4:	20000654 	.word	0x20000654
   168a8:	00026387 	.word	0x00026387
   168ac:	200002a8 	.word	0x200002a8

000168b0 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   168b0:	b570      	push	{r4, r5, r6, lr}
   168b2:	b086      	sub	sp, #24
   168b4:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   168b6:	aa01      	add	r2, sp, #4
   168b8:	2100      	movs	r1, #0
   168ba:	f241 0009 	movw	r0, #4105	; 0x1009
   168be:	f7fe fe6d 	bl	1559c <bt_hci_cmd_send_sync>
	if (err) {
   168c2:	4604      	mov	r4, r0
   168c4:	b180      	cbz	r0, 168e8 <bt_id_read_public_addr+0x38>
		BT_WARN("Failed to read public address");
   168c6:	491c      	ldr	r1, [pc, #112]	; (16938 <bt_id_read_public_addr+0x88>)
   168c8:	6808      	ldr	r0, [r1, #0]
   168ca:	f010 0006 	ands.w	r0, r0, #6
   168ce:	d009      	beq.n	168e4 <bt_id_read_public_addr+0x34>
   168d0:	4b1a      	ldr	r3, [pc, #104]	; (1693c <bt_id_read_public_addr+0x8c>)
   168d2:	481b      	ldr	r0, [pc, #108]	; (16940 <bt_id_read_public_addr+0x90>)
   168d4:	1ac9      	subs	r1, r1, r3
   168d6:	0889      	lsrs	r1, r1, #2
   168d8:	0189      	lsls	r1, r1, #6
   168da:	f041 0102 	orr.w	r1, r1, #2
   168de:	f008 fb2a 	bl	1ef36 <log_0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   168e2:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   168e4:	b006      	add	sp, #24
   168e6:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   168e8:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   168ea:	9002      	str	r0, [sp, #8]
   168ec:	689d      	ldr	r5, [r3, #8]
   168ee:	f8ad 000c 	strh.w	r0, [sp, #12]
   168f2:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   168f4:	2206      	movs	r2, #6
   168f6:	a902      	add	r1, sp, #8
   168f8:	4628      	mov	r0, r5
   168fa:	f00a fa27 	bl	20d4c <memcmp>
   168fe:	b918      	cbnz	r0, 16908 <bt_id_read_public_addr+0x58>
		net_buf_unref(rsp);
   16900:	9801      	ldr	r0, [sp, #4]
   16902:	f003 faef 	bl	19ee4 <net_buf_unref>
   16906:	e7ec      	b.n	168e2 <bt_id_read_public_addr+0x32>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   16908:	f04f 33ff 	mov.w	r3, #4294967295
   1690c:	2206      	movs	r2, #6
   1690e:	a904      	add	r1, sp, #16
   16910:	4628      	mov	r0, r5
   16912:	9304      	str	r3, [sp, #16]
   16914:	f8ad 3014 	strh.w	r3, [sp, #20]
   16918:	f00a fa18 	bl	20d4c <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1691c:	2800      	cmp	r0, #0
   1691e:	d0ef      	beq.n	16900 <bt_id_read_public_addr+0x50>
	memcpy(dst, src, sizeof(*dst));
   16920:	2206      	movs	r2, #6
   16922:	4629      	mov	r1, r5
   16924:	1c70      	adds	r0, r6, #1
   16926:	f00a fa38 	bl	20d9a <memcpy>
	net_buf_unref(rsp);
   1692a:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   1692c:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   1692e:	f003 fad9 	bl	19ee4 <net_buf_unref>
	return 1U;
   16932:	2001      	movs	r0, #1
   16934:	e7d6      	b.n	168e4 <bt_id_read_public_addr+0x34>
   16936:	bf00      	nop
   16938:	20000668 	.word	0x20000668
   1693c:	20000654 	.word	0x20000654
   16940:	000263b5 	.word	0x000263b5

00016944 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   16944:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   16946:	4668      	mov	r0, sp
   16948:	f7ff ffb2 	bl	168b0 <bt_id_read_public_addr>
   1694c:	4b04      	ldr	r3, [pc, #16]	; (16960 <bt_setup_public_id_addr+0x1c>)
   1694e:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   16950:	b118      	cbz	r0, 1695a <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   16952:	4669      	mov	r1, sp
   16954:	2000      	movs	r0, #0
   16956:	f7ff ff15 	bl	16784 <id_create.isra.0>
}
   1695a:	b003      	add	sp, #12
   1695c:	f85d fb04 	ldr.w	pc, [sp], #4
   16960:	200002a8 	.word	0x200002a8

00016964 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   16964:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   16968:	4b2b      	ldr	r3, [pc, #172]	; (16a18 <bt_read_static_addr+0xb4>)
   1696a:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   1696e:	f014 0401 	ands.w	r4, r4, #1
{
   16972:	4607      	mov	r7, r0
   16974:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   16976:	d10e      	bne.n	16996 <bt_read_static_addr+0x32>
		BT_WARN("Read Static Addresses command not available");
   16978:	4928      	ldr	r1, [pc, #160]	; (16a1c <bt_read_static_addr+0xb8>)
   1697a:	680b      	ldr	r3, [r1, #0]
   1697c:	f013 0f06 	tst.w	r3, #6
   16980:	d017      	beq.n	169b2 <bt_read_static_addr+0x4e>
   16982:	4b27      	ldr	r3, [pc, #156]	; (16a20 <bt_read_static_addr+0xbc>)
   16984:	4827      	ldr	r0, [pc, #156]	; (16a24 <bt_read_static_addr+0xc0>)
   16986:	1ac9      	subs	r1, r1, r3
   16988:	0889      	lsrs	r1, r1, #2
   1698a:	0189      	lsls	r1, r1, #6
   1698c:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   16990:	f008 fad1 	bl	1ef36 <log_0>
   16994:	e00d      	b.n	169b2 <bt_read_static_addr+0x4e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   16996:	aa01      	add	r2, sp, #4
   16998:	2100      	movs	r1, #0
   1699a:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1699e:	f7fe fdfd 	bl	1559c <bt_hci_cmd_send_sync>
	if (err) {
   169a2:	4605      	mov	r5, r0
   169a4:	b198      	cbz	r0, 169ce <bt_read_static_addr+0x6a>
		BT_WARN("Failed to read static addresses");
   169a6:	491d      	ldr	r1, [pc, #116]	; (16a1c <bt_read_static_addr+0xb8>)
   169a8:	680b      	ldr	r3, [r1, #0]
   169aa:	f013 0f06 	tst.w	r3, #6
   169ae:	d104      	bne.n	169ba <bt_read_static_addr+0x56>
		return 0;
   169b0:	2400      	movs	r4, #0
	}

	return cnt;
}
   169b2:	4620      	mov	r0, r4
   169b4:	b002      	add	sp, #8
   169b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   169ba:	4b19      	ldr	r3, [pc, #100]	; (16a20 <bt_read_static_addr+0xbc>)
		BT_WARN("Failed to read static addresses");
   169bc:	481a      	ldr	r0, [pc, #104]	; (16a28 <bt_read_static_addr+0xc4>)
   169be:	1ac9      	subs	r1, r1, r3
   169c0:	0889      	lsrs	r1, r1, #2
   169c2:	0189      	lsls	r1, r1, #6
   169c4:	f041 0102 	orr.w	r1, r1, #2
   169c8:	f008 fab5 	bl	1ef36 <log_0>
   169cc:	e7f0      	b.n	169b0 <bt_read_static_addr+0x4c>
	rp = (void *)rsp->data;
   169ce:	9b01      	ldr	r3, [sp, #4]
   169d0:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   169d2:	785c      	ldrb	r4, [r3, #1]
   169d4:	42b4      	cmp	r4, r6
   169d6:	bf28      	it	cs
   169d8:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   169da:	f04f 0816 	mov.w	r8, #22
   169de:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   169e0:	42a5      	cmp	r5, r4
   169e2:	db11      	blt.n	16a08 <bt_read_static_addr+0xa4>
	net_buf_unref(rsp);
   169e4:	9801      	ldr	r0, [sp, #4]
   169e6:	f003 fa7d 	bl	19ee4 <net_buf_unref>
	if (!cnt) {
   169ea:	2c00      	cmp	r4, #0
   169ec:	d1e1      	bne.n	169b2 <bt_read_static_addr+0x4e>
		BT_WARN("No static addresses stored in controller");
   169ee:	490b      	ldr	r1, [pc, #44]	; (16a1c <bt_read_static_addr+0xb8>)
   169f0:	680b      	ldr	r3, [r1, #0]
   169f2:	f013 0f06 	tst.w	r3, #6
   169f6:	d0db      	beq.n	169b0 <bt_read_static_addr+0x4c>
   169f8:	4b09      	ldr	r3, [pc, #36]	; (16a20 <bt_read_static_addr+0xbc>)
   169fa:	480c      	ldr	r0, [pc, #48]	; (16a2c <bt_read_static_addr+0xc8>)
   169fc:	1ac9      	subs	r1, r1, r3
   169fe:	0889      	lsrs	r1, r1, #2
   16a00:	0189      	lsls	r1, r1, #6
   16a02:	f041 0102 	orr.w	r1, r1, #2
   16a06:	e7c3      	b.n	16990 <bt_read_static_addr+0x2c>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   16a08:	fb08 7005 	mla	r0, r8, r5, r7
   16a0c:	2216      	movs	r2, #22
   16a0e:	4631      	mov	r1, r6
   16a10:	f00a f9c3 	bl	20d9a <memcpy>
	for (i = 0; i < cnt; i++) {
   16a14:	3501      	adds	r5, #1
   16a16:	e7e3      	b.n	169e0 <bt_read_static_addr+0x7c>
   16a18:	200002a8 	.word	0x200002a8
   16a1c:	20000668 	.word	0x20000668
   16a20:	20000654 	.word	0x20000654
   16a24:	000263d3 	.word	0x000263d3
   16a28:	000263ff 	.word	0x000263ff
   16a2c:	0002641f 	.word	0x0002641f

00016a30 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   16a30:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   16a32:	4d14      	ldr	r5, [pc, #80]	; (16a84 <bt_setup_random_id_addr+0x54>)
   16a34:	79ec      	ldrb	r4, [r5, #7]
{
   16a36:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   16a38:	b92c      	cbnz	r4, 16a46 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   16a3a:	2101      	movs	r1, #1
   16a3c:	a802      	add	r0, sp, #8
   16a3e:	f7ff ff91 	bl	16964 <bt_read_static_addr>
   16a42:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   16a44:	b9b8      	cbnz	r0, 16a76 <bt_setup_random_id_addr+0x46>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   16a46:	2100      	movs	r1, #0
   16a48:	4608      	mov	r0, r1
   16a4a:	f7ff fed1 	bl	167f0 <bt_id_create>
   16a4e:	e010      	b.n	16a72 <bt_setup_random_id_addr+0x42>
   16a50:	ab02      	add	r3, sp, #8
   16a52:	fb07 3106 	mla	r1, r7, r6, r3
   16a56:	2206      	movs	r2, #6
   16a58:	f10d 0001 	add.w	r0, sp, #1
   16a5c:	f00a f99d 	bl	20d9a <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   16a60:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   16a62:	4669      	mov	r1, sp
   16a64:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   16a66:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   16a6a:	f7ff fe8b 	bl	16784 <id_create.isra.0>
				if (err) {
   16a6e:	3401      	adds	r4, #1
   16a70:	b110      	cbz	r0, 16a78 <bt_setup_random_id_addr+0x48>
}
   16a72:	b009      	add	sp, #36	; 0x24
   16a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   16a76:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   16a78:	79eb      	ldrb	r3, [r5, #7]
   16a7a:	b2e6      	uxtb	r6, r4
   16a7c:	42b3      	cmp	r3, r6
   16a7e:	d8e7      	bhi.n	16a50 <bt_setup_random_id_addr+0x20>
			return 0;
   16a80:	2000      	movs	r0, #0
   16a82:	e7f6      	b.n	16a72 <bt_setup_random_id_addr+0x42>
   16a84:	200002a8 	.word	0x200002a8

00016a88 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   16a88:	b538      	push	{r3, r4, r5, lr}

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   16a8a:	4c07      	ldr	r4, [pc, #28]	; (16aa8 <bt_id_set_create_conn_own_addr+0x20>)
   16a8c:	7823      	ldrb	r3, [r4, #0]
   16a8e:	2b01      	cmp	r3, #1
{
   16a90:	460d      	mov	r5, r1
		if (addr->type == BT_ADDR_LE_RANDOM) {
   16a92:	d003      	beq.n	16a9c <bt_id_set_create_conn_own_addr+0x14>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
   16a94:	7823      	ldrb	r3, [r4, #0]
   16a96:	702b      	strb	r3, [r5, #0]
	}

	return 0;
   16a98:	2000      	movs	r0, #0
}
   16a9a:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
   16a9c:	1c60      	adds	r0, r4, #1
   16a9e:	f7ff fe43 	bl	16728 <set_random_address>
			if (err) {
   16aa2:	2800      	cmp	r0, #0
   16aa4:	d0f6      	beq.n	16a94 <bt_id_set_create_conn_own_addr+0xc>
   16aa6:	e7f8      	b.n	16a9a <bt_id_set_create_conn_own_addr+0x12>
   16aa8:	200002a8 	.word	0x200002a8

00016aac <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   16aac:	b510      	push	{r4, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   16aae:	4b05      	ldr	r3, [pc, #20]	; (16ac4 <bt_id_set_scan_own_addr+0x18>)
   16ab0:	781b      	ldrb	r3, [r3, #0]
   16ab2:	700b      	strb	r3, [r1, #0]
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   16ab4:	2000      	movs	r0, #0
{
   16ab6:	460c      	mov	r4, r1
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   16ab8:	f00a fae5 	bl	21086 <bt_id_set_private_addr>
			if (err) {
   16abc:	b908      	cbnz	r0, 16ac2 <bt_id_set_scan_own_addr+0x16>

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
   16abe:	2301      	movs	r3, #1
   16ac0:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	return 0;
}
   16ac2:	bd10      	pop	{r4, pc}
   16ac4:	200002a8 	.word	0x200002a8

00016ac8 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   16ac8:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   16aca:	4d19      	ldr	r5, [pc, #100]	; (16b30 <bt_id_init+0x68>)
   16acc:	79eb      	ldrb	r3, [r5, #7]
   16ace:	b113      	cbz	r3, 16ad6 <bt_id_init+0xe>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   16ad0:	2400      	movs	r4, #0
}
   16ad2:	4620      	mov	r0, r4
   16ad4:	bd38      	pop	{r3, r4, r5, pc}
		err = bt_setup_public_id_addr();
   16ad6:	f7ff ff35 	bl	16944 <bt_setup_public_id_addr>
		if (err) {
   16ada:	4604      	mov	r4, r0
   16adc:	b168      	cbz	r0, 16afa <bt_id_init+0x32>
			BT_ERR("Unable to set identity address");
   16ade:	4915      	ldr	r1, [pc, #84]	; (16b34 <bt_id_init+0x6c>)
   16ae0:	680b      	ldr	r3, [r1, #0]
   16ae2:	075a      	lsls	r2, r3, #29
   16ae4:	d0f5      	beq.n	16ad2 <bt_id_init+0xa>
   16ae6:	4b14      	ldr	r3, [pc, #80]	; (16b38 <bt_id_init+0x70>)
   16ae8:	4814      	ldr	r0, [pc, #80]	; (16b3c <bt_id_init+0x74>)
   16aea:	1ac9      	subs	r1, r1, r3
   16aec:	0889      	lsrs	r1, r1, #2
   16aee:	0189      	lsls	r1, r1, #6
   16af0:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to set random address");
   16af4:	f008 fa1f 	bl	1ef36 <log_0>
   16af8:	e7eb      	b.n	16ad2 <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   16afa:	79eb      	ldrb	r3, [r5, #7]
   16afc:	2b00      	cmp	r3, #0
   16afe:	d1e7      	bne.n	16ad0 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   16b00:	f7ff ff96 	bl	16a30 <bt_setup_random_id_addr>
		if (err) {
   16b04:	4604      	mov	r4, r0
   16b06:	2800      	cmp	r0, #0
   16b08:	d1e9      	bne.n	16ade <bt_id_init+0x16>
		err = set_random_address(&bt_dev.id_addr[0].a);
   16b0a:	1c68      	adds	r0, r5, #1
   16b0c:	f7ff fe0c 	bl	16728 <set_random_address>
		if (err) {
   16b10:	4604      	mov	r4, r0
   16b12:	2800      	cmp	r0, #0
   16b14:	d0dc      	beq.n	16ad0 <bt_id_init+0x8>
			BT_ERR("Unable to set random address");
   16b16:	4907      	ldr	r1, [pc, #28]	; (16b34 <bt_id_init+0x6c>)
   16b18:	680b      	ldr	r3, [r1, #0]
   16b1a:	075b      	lsls	r3, r3, #29
   16b1c:	d0d9      	beq.n	16ad2 <bt_id_init+0xa>
   16b1e:	4b06      	ldr	r3, [pc, #24]	; (16b38 <bt_id_init+0x70>)
   16b20:	4807      	ldr	r0, [pc, #28]	; (16b40 <bt_id_init+0x78>)
   16b22:	1ac9      	subs	r1, r1, r3
   16b24:	0889      	lsrs	r1, r1, #2
   16b26:	0189      	lsls	r1, r1, #6
   16b28:	f041 0101 	orr.w	r1, r1, #1
   16b2c:	e7e2      	b.n	16af4 <bt_id_init+0x2c>
   16b2e:	bf00      	nop
   16b30:	200002a8 	.word	0x200002a8
   16b34:	20000668 	.word	0x20000668
   16b38:	20000654 	.word	0x20000654
   16b3c:	00026448 	.word	0x00026448
   16b40:	00026467 	.word	0x00026467

00016b44 <atomic_get.constprop.0>:
   16b44:	4b03      	ldr	r3, [pc, #12]	; (16b54 <atomic_get.constprop.0+0x10>)
   16b46:	f3bf 8f5b 	dmb	ish
   16b4a:	6818      	ldr	r0, [r3, #0]
   16b4c:	f3bf 8f5b 	dmb	ish
}
   16b50:	4770      	bx	lr
   16b52:	bf00      	nop
   16b54:	20000374 	.word	0x20000374

00016b58 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   16b58:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   16b5a:	2102      	movs	r1, #2
{
   16b5c:	b087      	sub	sp, #28
   16b5e:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   16b60:	f242 000c 	movw	r0, #8204	; 0x200c
   16b64:	f7fe fce2 	bl	1552c <bt_hci_cmd_create>
	if (!buf) {
   16b68:	4605      	mov	r5, r0
   16b6a:	b308      	cbz	r0, 16bb0 <bt_le_scan_set_enable_legacy+0x58>
	return net_buf_simple_add(&buf->b, len);
   16b6c:	2102      	movs	r1, #2
   16b6e:	3008      	adds	r0, #8
   16b70:	f00b fad3 	bl	2211a <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   16b74:	2c01      	cmp	r4, #1
   16b76:	4602      	mov	r2, r0
   16b78:	d117      	bne.n	16baa <bt_le_scan_set_enable_legacy+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16b7a:	f7ff ffe3 	bl	16b44 <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   16b7e:	f3c0 2000 	ubfx	r0, r0, #8, #1
   16b82:	7050      	strb	r0, [r2, #1]
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   16b84:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   16b86:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   16b88:	425c      	negs	r4, r3
   16b8a:	415c      	adcs	r4, r3
   16b8c:	4a0a      	ldr	r2, [pc, #40]	; (16bb8 <bt_le_scan_set_enable_legacy+0x60>)
   16b8e:	9400      	str	r4, [sp, #0]
   16b90:	a903      	add	r1, sp, #12
   16b92:	4628      	mov	r0, r5
   16b94:	2305      	movs	r3, #5
   16b96:	f7fe fcb7 	bl	15508 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   16b9a:	2200      	movs	r2, #0
   16b9c:	4629      	mov	r1, r5
   16b9e:	f242 000c 	movw	r0, #8204	; 0x200c
   16ba2:	f7fe fcfb 	bl	1559c <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   16ba6:	b007      	add	sp, #28
   16ba8:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   16baa:	2300      	movs	r3, #0
   16bac:	7043      	strb	r3, [r0, #1]
   16bae:	e7e9      	b.n	16b84 <bt_le_scan_set_enable_legacy+0x2c>
		return -ENOBUFS;
   16bb0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16bb4:	e7f7      	b.n	16ba6 <bt_le_scan_set_enable_legacy+0x4e>
   16bb6:	bf00      	nop
   16bb8:	20000374 	.word	0x20000374

00016bbc <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   16bbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16bbe:	4605      	mov	r5, r0
   16bc0:	4614      	mov	r4, r2
   16bc2:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   16bc4:	2207      	movs	r2, #7
   16bc6:	2100      	movs	r1, #0
   16bc8:	4668      	mov	r0, sp
   16bca:	f00a f8f1 	bl	20db0 <memset>

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   16bce:	2300      	movs	r3, #0
   16bd0:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   16bd4:	1e6b      	subs	r3, r5, #1
   16bd6:	4258      	negs	r0, r3
   16bd8:	f10d 0105 	add.w	r1, sp, #5
   16bdc:	4158      	adcs	r0, r3
	set_param.window = sys_cpu_to_le16(window);
   16bde:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.scan_type = scan_type;
   16be2:	f88d 5000 	strb.w	r5, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
   16be6:	f8ad 6001 	strh.w	r6, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   16bea:	f7ff ff5f 	bl	16aac <bt_id_set_scan_own_addr>
	if (err) {
   16bee:	4604      	mov	r4, r0
   16bf0:	bb38      	cbnz	r0, 16c42 <start_le_scan_legacy+0x86>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   16bf2:	2107      	movs	r1, #7
   16bf4:	f242 000b 	movw	r0, #8203	; 0x200b
   16bf8:	f7fe fc98 	bl	1552c <bt_hci_cmd_create>
	if (!buf) {
   16bfc:	4606      	mov	r6, r0
   16bfe:	b348      	cbz	r0, 16c54 <start_le_scan_legacy+0x98>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16c00:	2207      	movs	r2, #7
   16c02:	4669      	mov	r1, sp
   16c04:	3008      	adds	r0, #8
   16c06:	f00b fa8e 	bl	22126 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   16c0a:	4622      	mov	r2, r4
   16c0c:	4631      	mov	r1, r6
   16c0e:	f242 000b 	movw	r0, #8203	; 0x200b
   16c12:	f7fe fcc3 	bl	1559c <bt_hci_cmd_send_sync>
	if (err) {
   16c16:	4604      	mov	r4, r0
   16c18:	b998      	cbnz	r0, 16c42 <start_le_scan_legacy+0x86>
	return bt_le_scan_set_enable_legacy(enable);
   16c1a:	2001      	movs	r0, #1
   16c1c:	f7ff ff9c 	bl	16b58 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
   16c20:	4604      	mov	r4, r0
   16c22:	b970      	cbnz	r0, 16c42 <start_le_scan_legacy+0x86>
	if (val) {
   16c24:	2d01      	cmp	r5, #1
   16c26:	d10f      	bne.n	16c48 <start_le_scan_legacy+0x8c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16c28:	f3bf 8f5b 	dmb	ish
   16c2c:	4b0b      	ldr	r3, [pc, #44]	; (16c5c <start_le_scan_legacy+0xa0>)
   16c2e:	e853 2f00 	ldrex	r2, [r3]
   16c32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   16c36:	e843 2100 	strex	r1, r2, [r3]
   16c3a:	2900      	cmp	r1, #0
   16c3c:	d1f7      	bne.n	16c2e <start_le_scan_legacy+0x72>
   16c3e:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   16c42:	4620      	mov	r0, r4
   16c44:	b002      	add	sp, #8
   16c46:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16c48:	f06f 0180 	mvn.w	r1, #128	; 0x80
   16c4c:	4803      	ldr	r0, [pc, #12]	; (16c5c <start_le_scan_legacy+0xa0>)
   16c4e:	f00a fa2e 	bl	210ae <atomic_and>
   16c52:	e7f6      	b.n	16c42 <start_le_scan_legacy+0x86>
		return -ENOBUFS;
   16c54:	f06f 0468 	mvn.w	r4, #104	; 0x68
   16c58:	e7f3      	b.n	16c42 <start_le_scan_legacy+0x86>
   16c5a:	bf00      	nop
   16c5c:	20000374 	.word	0x20000374

00016c60 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   16c60:	4b01      	ldr	r3, [pc, #4]	; (16c68 <bt_scan_reset+0x8>)
   16c62:	2200      	movs	r2, #0
   16c64:	601a      	str	r2, [r3, #0]
}
   16c66:	4770      	bx	lr
   16c68:	20002590 	.word	0x20002590

00016c6c <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   16c6c:	b538      	push	{r3, r4, r5, lr}
   16c6e:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16c70:	f7ff ff68 	bl	16b44 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   16c74:	0641      	lsls	r1, r0, #25
   16c76:	f3c0 1280 	ubfx	r2, r0, #6, #1
   16c7a:	d501      	bpl.n	16c80 <bt_le_scan_update+0x14>
		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
					       BT_CONN_CONNECT);
		if (conn) {
			bt_conn_unref(conn);
			return 0;
   16c7c:	2000      	movs	r0, #0
   16c7e:	e031      	b.n	16ce4 <bt_le_scan_update+0x78>
   16c80:	f7ff ff60 	bl	16b44 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   16c84:	0683      	lsls	r3, r0, #26
   16c86:	d428      	bmi.n	16cda <bt_le_scan_update+0x6e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   16c88:	2100      	movs	r1, #0
   16c8a:	2206      	movs	r2, #6
   16c8c:	4608      	mov	r0, r1
   16c8e:	f000 fe63 	bl	17958 <bt_conn_lookup_state_le>
		if (conn) {
   16c92:	4604      	mov	r4, r0
   16c94:	bb38      	cbnz	r0, 16ce6 <bt_le_scan_update+0x7a>
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   16c96:	2202      	movs	r2, #2
   16c98:	4601      	mov	r1, r0
   16c9a:	f000 fe5d 	bl	17958 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_SCAN);
		if (conn) {
   16c9e:	2800      	cmp	r0, #0
   16ca0:	d0ec      	beq.n	16c7c <bt_le_scan_update+0x10>
   16ca2:	f3bf 8f5b 	dmb	ish
   16ca6:	4b11      	ldr	r3, [pc, #68]	; (16cec <bt_le_scan_update+0x80>)
   16ca8:	e853 2f00 	ldrex	r2, [r3]
   16cac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   16cb0:	e843 2100 	strex	r1, r2, [r3]
   16cb4:	2900      	cmp	r1, #0
   16cb6:	d1f7      	bne.n	16ca8 <bt_le_scan_update+0x3c>
   16cb8:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
   16cbc:	f00a faa1 	bl	21202 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
   16cc0:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   16cc2:	4620      	mov	r0, r4
   16cc4:	bf18      	it	ne
   16cc6:	2230      	movne	r2, #48	; 0x30
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   16cc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   16ccc:	bf0a      	itet	eq
   16cce:	2212      	moveq	r2, #18
   16cd0:	2160      	movne	r1, #96	; 0x60
   16cd2:	f44f 6100 	moveq.w	r1, #2048	; 0x800
   16cd6:	f7ff bf71 	b.w	16bbc <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
   16cda:	4610      	mov	r0, r2
   16cdc:	f7ff ff3c 	bl	16b58 <bt_le_scan_set_enable_legacy>
		if (err) {
   16ce0:	2800      	cmp	r0, #0
   16ce2:	d0d1      	beq.n	16c88 <bt_le_scan_update+0x1c>
}
   16ce4:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
   16ce6:	f00a fa8c 	bl	21202 <bt_conn_unref>
   16cea:	e7c7      	b.n	16c7c <bt_le_scan_update+0x10>
   16cec:	20000374 	.word	0x20000374

00016cf0 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   16cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   16cf4:	f100 0808 	add.w	r8, r0, #8
   16cf8:	b08d      	sub	sp, #52	; 0x34
   16cfa:	4604      	mov	r4, r0
   16cfc:	4640      	mov	r0, r8
   16cfe:	f00b fa33 	bl	22168 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
   16d02:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 16ef0 <bt_hci_le_adv_report+0x200>
   16d06:	4607      	mov	r7, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   16d08:	b17f      	cbz	r7, 16d2a <bt_hci_le_adv_report+0x3a>
		struct bt_le_scan_recv_info adv_info;

		if (buf->len < sizeof(*evt)) {
   16d0a:	89a3      	ldrh	r3, [r4, #12]
   16d0c:	2b08      	cmp	r3, #8
   16d0e:	d80f      	bhi.n	16d30 <bt_hci_le_adv_report+0x40>
			BT_ERR("Unexpected end of buffer");
   16d10:	4972      	ldr	r1, [pc, #456]	; (16edc <bt_hci_le_adv_report+0x1ec>)
   16d12:	680b      	ldr	r3, [r1, #0]
   16d14:	075e      	lsls	r6, r3, #29
   16d16:	d008      	beq.n	16d2a <bt_hci_le_adv_report+0x3a>
   16d18:	4b71      	ldr	r3, [pc, #452]	; (16ee0 <bt_hci_le_adv_report+0x1f0>)
   16d1a:	4872      	ldr	r0, [pc, #456]	; (16ee4 <bt_hci_le_adv_report+0x1f4>)
   16d1c:	1ac9      	subs	r1, r1, r3
   16d1e:	0889      	lsrs	r1, r1, #2
   16d20:	0189      	lsls	r1, r1, #6
   16d22:	f041 0101 	orr.w	r1, r1, #1
   16d26:	f008 f906 	bl	1ef36 <log_0>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   16d2a:	b00d      	add	sp, #52	; 0x34
   16d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   16d30:	2109      	movs	r1, #9
   16d32:	4640      	mov	r0, r8
   16d34:	f00b fa10 	bl	22158 <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
   16d38:	7a01      	ldrb	r1, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   16d3a:	237f      	movs	r3, #127	; 0x7f
   16d3c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
   16d40:	1843      	adds	r3, r0, r1
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   16d42:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
   16d44:	7a5b      	ldrb	r3, [r3, #9]
   16d46:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
   16d4a:	23ff      	movs	r3, #255	; 0xff
   16d4c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
   16d50:	2300      	movs	r3, #0
   16d52:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   16d56:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.adv_type = evt->evt_type;
   16d5a:	7802      	ldrb	r2, [r0, #0]
   16d5c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   16d60:	2a04      	cmp	r2, #4
   16d62:	bf9c      	itt	ls
   16d64:	4b60      	ldrls	r3, [pc, #384]	; (16ee8 <bt_hci_le_adv_report+0x1f8>)
   16d66:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   16d68:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   16d6c:	b28b      	uxth	r3, r1
   16d6e:	4606      	mov	r6, r0
   16d70:	f100 0901 	add.w	r9, r0, #1
   16d74:	9301      	str	r3, [sp, #4]
   16d76:	f7ff fee5 	bl	16b44 <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   16d7a:	0645      	lsls	r5, r0, #25
   16d7c:	d50b      	bpl.n	16d96 <bt_hci_le_adv_report+0xa6>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   16d7e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   16d82:	0758      	lsls	r0, r3, #29
   16d84:	d507      	bpl.n	16d96 <bt_hci_le_adv_report+0xa6>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   16d86:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
   16d88:	4640      	mov	r0, r8
   16d8a:	3101      	adds	r1, #1
   16d8c:	3f01      	subs	r7, #1
   16d8e:	f00b f9db 	bl	22148 <net_buf_simple_pull>
   16d92:	b2ff      	uxtb	r7, r7
   16d94:	e7b8      	b.n	16d08 <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   16d96:	7873      	ldrb	r3, [r6, #1]
   16d98:	1e9a      	subs	r2, r3, #2
   16d9a:	2a01      	cmp	r2, #1
   16d9c:	d84f      	bhi.n	16e3e <bt_hci_le_adv_report+0x14e>
	memcpy(dst, src, sizeof(*dst));
   16d9e:	2207      	movs	r2, #7
   16da0:	4649      	mov	r1, r9
   16da2:	a804      	add	r0, sp, #16
   16da4:	f009 fff9 	bl	20d9a <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   16da8:	f89d 3010 	ldrb.w	r3, [sp, #16]
   16dac:	3b02      	subs	r3, #2
   16dae:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
   16db2:	ab04      	add	r3, sp, #16
   16db4:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
   16db6:	f8da 3000 	ldr.w	r3, [sl]
   16dba:	b1b3      	cbz	r3, 16dea <bt_hci_le_adv_report+0xfa>
	state->offset = net_buf_simple_headroom(buf);
   16dbc:	4640      	mov	r0, r8
   16dbe:	f00b f9e3 	bl	22188 <net_buf_simple_headroom>
	state->len = buf->len;
   16dc2:	89a3      	ldrh	r3, [r4, #12]
   16dc4:	9302      	str	r3, [sp, #8]
		buf->len = len;
   16dc6:	9b01      	ldr	r3, [sp, #4]
   16dc8:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   16dca:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   16dcc:	4643      	mov	r3, r8
   16dce:	a804      	add	r0, sp, #16
   16dd0:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   16dd4:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
   16dd8:	f8da 5000 	ldr.w	r5, [sl]
   16ddc:	47a8      	blx	r5
	buf->data = buf->__buf + state->offset;
   16dde:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   16de0:	9b02      	ldr	r3, [sp, #8]
   16de2:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
   16de4:	fa10 f08b 	uxtah	r0, r0, fp
   16de8:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   16dea:	4b40      	ldr	r3, [pc, #256]	; (16eec <bt_hci_le_adv_report+0x1fc>)
   16dec:	681b      	ldr	r3, [r3, #0]
   16dee:	2b00      	cmp	r3, #0
   16df0:	d038      	beq.n	16e64 <bt_hci_le_adv_report+0x174>
   16df2:	f1b3 0208 	subs.w	r2, r3, #8
   16df6:	d035      	beq.n	16e64 <bt_hci_le_adv_report+0x174>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16df8:	681d      	ldr	r5, [r3, #0]
   16dfa:	b105      	cbz	r5, 16dfe <bt_hci_le_adv_report+0x10e>
   16dfc:	3d08      	subs	r5, #8
		if (listener->recv) {
   16dfe:	6813      	ldr	r3, [r2, #0]
   16e00:	9203      	str	r2, [sp, #12]
   16e02:	b193      	cbz	r3, 16e2a <bt_hci_le_adv_report+0x13a>
	state->offset = net_buf_simple_headroom(buf);
   16e04:	4640      	mov	r0, r8
   16e06:	f00b f9bf 	bl	22188 <net_buf_simple_headroom>
	state->len = buf->len;
   16e0a:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, buf);
   16e0c:	9a03      	ldr	r2, [sp, #12]
   16e0e:	9302      	str	r3, [sp, #8]
			buf->len = len;
   16e10:	9b01      	ldr	r3, [sp, #4]
   16e12:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   16e14:	4683      	mov	fp, r0
			listener->recv(info, buf);
   16e16:	6812      	ldr	r2, [r2, #0]
   16e18:	a808      	add	r0, sp, #32
   16e1a:	4641      	mov	r1, r8
   16e1c:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
   16e1e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   16e20:	9b02      	ldr	r3, [sp, #8]
   16e22:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
   16e24:	fa10 f08b 	uxtah	r0, r0, fp
   16e28:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   16e2a:	b1dd      	cbz	r5, 16e64 <bt_hci_le_adv_report+0x174>
Z_GENLIST_PEEK_NEXT(slist, snode)
   16e2c:	f115 0308 	adds.w	r3, r5, #8
   16e30:	d002      	beq.n	16e38 <bt_hci_le_adv_report+0x148>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16e32:	68ab      	ldr	r3, [r5, #8]
   16e34:	b103      	cbz	r3, 16e38 <bt_hci_le_adv_report+0x148>
   16e36:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
   16e38:	462a      	mov	r2, r5
   16e3a:	461d      	mov	r5, r3
   16e3c:	e7df      	b.n	16dfe <bt_hci_le_adv_report+0x10e>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   16e3e:	2bff      	cmp	r3, #255	; 0xff
   16e40:	d109      	bne.n	16e56 <bt_hci_le_adv_report+0x166>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
   16e42:	2300      	movs	r3, #0
   16e44:	9306      	str	r3, [sp, #24]
   16e46:	2207      	movs	r2, #7
   16e48:	f8cd 301b 	str.w	r3, [sp, #27]
   16e4c:	a906      	add	r1, sp, #24
   16e4e:	a804      	add	r0, sp, #16
   16e50:	f009 ffa3 	bl	20d9a <memcpy>
}
   16e54:	e7ad      	b.n	16db2 <bt_hci_le_adv_report+0xc2>
		bt_addr_le_copy(&id_addr,
   16e56:	4649      	mov	r1, r9
   16e58:	2000      	movs	r0, #0
   16e5a:	f00a f912 	bl	21082 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   16e5e:	2207      	movs	r2, #7
   16e60:	4601      	mov	r1, r0
   16e62:	e7f4      	b.n	16e4e <bt_hci_le_adv_report+0x15e>
	check_pending_conn(&id_addr, addr, info->adv_props);
   16e64:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   16e68:	f7ff fe6c 	bl	16b44 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   16e6c:	0641      	lsls	r1, r0, #25
   16e6e:	f3c0 1b80 	ubfx	fp, r0, #6, #1
   16e72:	d488      	bmi.n	16d86 <bt_hci_le_adv_report+0x96>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   16e74:	07d2      	lsls	r2, r2, #31
   16e76:	d586      	bpl.n	16d86 <bt_hci_le_adv_report+0x96>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   16e78:	2202      	movs	r2, #2
   16e7a:	a904      	add	r1, sp, #16
   16e7c:	4658      	mov	r0, fp
   16e7e:	f000 fd6b 	bl	17958 <bt_conn_lookup_state_le>
	if (!conn) {
   16e82:	4605      	mov	r5, r0
   16e84:	2800      	cmp	r0, #0
   16e86:	f43f af7e 	beq.w	16d86 <bt_hci_le_adv_report+0x96>
   16e8a:	f7ff fe5b 	bl	16b44 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   16e8e:	0683      	lsls	r3, r0, #26
   16e90:	d411      	bmi.n	16eb6 <bt_hci_le_adv_report+0x1c6>
   16e92:	2207      	movs	r2, #7
   16e94:	4649      	mov	r1, r9
   16e96:	f105 0096 	add.w	r0, r5, #150	; 0x96
   16e9a:	f009 ff7e 	bl	20d9a <memcpy>
	if (bt_le_create_conn(conn)) {
   16e9e:	4628      	mov	r0, r5
   16ea0:	f00a f832 	bl	20f08 <bt_le_create_conn>
   16ea4:	b960      	cbnz	r0, 16ec0 <bt_hci_le_adv_report+0x1d0>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   16ea6:	4628      	mov	r0, r5
   16ea8:	2106      	movs	r1, #6
   16eaa:	f000 fb27 	bl	174fc <bt_conn_set_state>
	bt_conn_unref(conn);
   16eae:	4628      	mov	r0, r5
   16eb0:	f00a f9a7 	bl	21202 <bt_conn_unref>
	return;
   16eb4:	e767      	b.n	16d86 <bt_hci_le_adv_report+0x96>
	return bt_le_scan_set_enable_legacy(enable);
   16eb6:	4658      	mov	r0, fp
   16eb8:	f7ff fe4e 	bl	16b58 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   16ebc:	2800      	cmp	r0, #0
   16ebe:	d0e8      	beq.n	16e92 <bt_hci_le_adv_report+0x1a2>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   16ec0:	231f      	movs	r3, #31
   16ec2:	726b      	strb	r3, [r5, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16ec4:	2100      	movs	r1, #0
   16ec6:	4628      	mov	r0, r5
   16ec8:	f000 fb18 	bl	174fc <bt_conn_set_state>
	bt_conn_unref(conn);
   16ecc:	4628      	mov	r0, r5
   16ece:	f00a f998 	bl	21202 <bt_conn_unref>
	bt_le_scan_update(false);
   16ed2:	2000      	movs	r0, #0
   16ed4:	f7ff feca 	bl	16c6c <bt_le_scan_update>
   16ed8:	e755      	b.n	16d86 <bt_hci_le_adv_report+0x96>
   16eda:	bf00      	nop
   16edc:	20000674 	.word	0x20000674
   16ee0:	20000654 	.word	0x20000654
   16ee4:	0002648a 	.word	0x0002648a
   16ee8:	000264a3 	.word	0x000264a3
   16eec:	20002588 	.word	0x20002588
   16ef0:	20002590 	.word	0x20002590

00016ef4 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   16ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16ef8:	4605      	mov	r5, r0
   16efa:	460f      	mov	r7, r1
   16efc:	f7ff fe22 	bl	16b44 <atomic_get.constprop.0>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16f00:	0780      	lsls	r0, r0, #30
   16f02:	d56f      	bpl.n	16fe4 <bt_le_scan_start+0xf0>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   16f04:	782a      	ldrb	r2, [r5, #0]
   16f06:	2a01      	cmp	r2, #1
   16f08:	d904      	bls.n	16f14 <bt_le_scan_start+0x20>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   16f0a:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   16f0e:	4620      	mov	r0, r4
   16f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   16f14:	686b      	ldr	r3, [r5, #4]
   16f16:	f033 030f 	bics.w	r3, r3, #15
   16f1a:	d1f6      	bne.n	16f0a <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   16f1c:	8928      	ldrh	r0, [r5, #8]
   16f1e:	1f03      	subs	r3, r0, #4
   16f20:	b29b      	uxth	r3, r3
   16f22:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   16f26:	42a3      	cmp	r3, r4
   16f28:	d8ef      	bhi.n	16f0a <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
   16f2a:	8969      	ldrh	r1, [r5, #10]
   16f2c:	1f0b      	subs	r3, r1, #4
   16f2e:	b29b      	uxth	r3, r3
   16f30:	42a3      	cmp	r3, r4
   16f32:	d8ea      	bhi.n	16f0a <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
   16f34:	4288      	cmp	r0, r1
   16f36:	d3e8      	bcc.n	16f0a <bt_le_scan_start+0x16>
	if (param->type && !bt_id_scan_random_addr_check()) {
   16f38:	b99a      	cbnz	r2, 16f62 <bt_le_scan_start+0x6e>
   16f3a:	f3bf 8f5b 	dmb	ish
   16f3e:	4e2b      	ldr	r6, [pc, #172]	; (16fec <bt_le_scan_start+0xf8>)
   16f40:	e856 0f00 	ldrex	r0, [r6]
   16f44:	f040 0340 	orr.w	r3, r0, #64	; 0x40
   16f48:	e846 3200 	strex	r2, r3, [r6]
   16f4c:	2a00      	cmp	r2, #0
   16f4e:	d1f7      	bne.n	16f40 <bt_le_scan_start+0x4c>
   16f50:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   16f54:	f010 0240 	ands.w	r2, r0, #64	; 0x40
   16f58:	46b0      	mov	r8, r6
   16f5a:	d007      	beq.n	16f6c <bt_le_scan_start+0x78>
		return -EALREADY;
   16f5c:	f06f 0477 	mvn.w	r4, #119	; 0x77
   16f60:	e7d5      	b.n	16f0e <bt_le_scan_start+0x1a>
	if (param->type && !bt_id_scan_random_addr_check()) {
   16f62:	f00a f8a2 	bl	210aa <bt_id_scan_random_addr_check>
   16f66:	2800      	cmp	r0, #0
   16f68:	d1e7      	bne.n	16f3a <bt_le_scan_start+0x46>
   16f6a:	e7ce      	b.n	16f0a <bt_le_scan_start+0x16>
   16f6c:	f7ff fdea 	bl	16b44 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   16f70:	0681      	lsls	r1, r0, #26
   16f72:	d50a      	bpl.n	16f8a <bt_le_scan_start+0x96>
	return bt_le_scan_set_enable_legacy(enable);
   16f74:	4610      	mov	r0, r2
   16f76:	f7ff fdef 	bl	16b58 <bt_le_scan_set_enable_legacy>
		if (err) {
   16f7a:	4604      	mov	r4, r0
   16f7c:	b128      	cbz	r0, 16f8a <bt_le_scan_start+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16f7e:	f06f 0140 	mvn.w	r1, #64	; 0x40
   16f82:	4630      	mov	r0, r6
   16f84:	f00a f893 	bl	210ae <atomic_and>
		return err;
   16f88:	e7c1      	b.n	16f0e <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   16f8a:	686b      	ldr	r3, [r5, #4]
	if (val) {
   16f8c:	07db      	lsls	r3, r3, #31
   16f8e:	d515      	bpl.n	16fbc <bt_le_scan_start+0xc8>
   16f90:	f3bf 8f5b 	dmb	ish
   16f94:	e858 3f00 	ldrex	r3, [r8]
   16f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   16f9c:	e848 3200 	strex	r2, r3, [r8]
   16fa0:	2a00      	cmp	r2, #0
   16fa2:	d1f7      	bne.n	16f94 <bt_le_scan_start+0xa0>
   16fa4:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
   16fa8:	89ab      	ldrh	r3, [r5, #12]
   16faa:	b16b      	cbz	r3, 16fc8 <bt_le_scan_start+0xd4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16fac:	480f      	ldr	r0, [pc, #60]	; (16fec <bt_le_scan_start+0xf8>)
   16fae:	f06f 0140 	mvn.w	r1, #64	; 0x40
   16fb2:	f00a f87c 	bl	210ae <atomic_and>
			return -ENOTSUP;
   16fb6:	f06f 0485 	mvn.w	r4, #133	; 0x85
   16fba:	e7a8      	b.n	16f0e <bt_le_scan_start+0x1a>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16fbc:	f46f 7180 	mvn.w	r1, #256	; 0x100
   16fc0:	480a      	ldr	r0, [pc, #40]	; (16fec <bt_le_scan_start+0xf8>)
   16fc2:	f00a f874 	bl	210ae <atomic_and>
   16fc6:	e7ef      	b.n	16fa8 <bt_le_scan_start+0xb4>
		err = start_le_scan_legacy(param->type, param->interval,
   16fc8:	896a      	ldrh	r2, [r5, #10]
   16fca:	8929      	ldrh	r1, [r5, #8]
   16fcc:	7828      	ldrb	r0, [r5, #0]
   16fce:	f7ff fdf5 	bl	16bbc <start_le_scan_legacy>
	if (err) {
   16fd2:	4604      	mov	r4, r0
   16fd4:	b118      	cbz	r0, 16fde <bt_le_scan_start+0xea>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16fd6:	4805      	ldr	r0, [pc, #20]	; (16fec <bt_le_scan_start+0xf8>)
   16fd8:	f06f 0140 	mvn.w	r1, #64	; 0x40
   16fdc:	e7d2      	b.n	16f84 <bt_le_scan_start+0x90>
	scan_dev_found_cb = cb;
   16fde:	4b04      	ldr	r3, [pc, #16]	; (16ff0 <bt_le_scan_start+0xfc>)
   16fe0:	601f      	str	r7, [r3, #0]
	return 0;
   16fe2:	e794      	b.n	16f0e <bt_le_scan_start+0x1a>
		return -EAGAIN;
   16fe4:	f06f 040a 	mvn.w	r4, #10
   16fe8:	e791      	b.n	16f0e <bt_le_scan_start+0x1a>
   16fea:	bf00      	nop
   16fec:	20000374 	.word	0x20000374
   16ff0:	20002590 	.word	0x20002590

00016ff4 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   16ff4:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16ff6:	4808      	ldr	r0, [pc, #32]	; (17018 <bt_le_scan_stop+0x24>)
   16ff8:	f06f 0140 	mvn.w	r1, #64	; 0x40
   16ffc:	f00a f857 	bl	210ae <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   17000:	0643      	lsls	r3, r0, #25
   17002:	d506      	bpl.n	17012 <bt_le_scan_stop+0x1e>
	scan_dev_found_cb = NULL;
   17004:	4b05      	ldr	r3, [pc, #20]	; (1701c <bt_le_scan_stop+0x28>)
   17006:	2000      	movs	r0, #0
   17008:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   1700a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   1700e:	f7ff be2d 	b.w	16c6c <bt_le_scan_update>
}
   17012:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17016:	bd08      	pop	{r3, pc}
   17018:	20000374 	.word	0x20000374
   1701c:	20002590 	.word	0x20002590

00017020 <bt_le_scan_cb_register>:
	parent->next = child;
   17020:	2300      	movs	r3, #0
   17022:	6083      	str	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   17024:	4b05      	ldr	r3, [pc, #20]	; (1703c <bt_le_scan_cb_register+0x1c>)
   17026:	6859      	ldr	r1, [r3, #4]

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   17028:	f100 0208 	add.w	r2, r0, #8
   1702c:	b911      	cbnz	r1, 17034 <bt_le_scan_cb_register+0x14>
	list->head = node;
   1702e:	e9c3 2200 	strd	r2, r2, [r3]
}
   17032:	4770      	bx	lr
	parent->next = child;
   17034:	600a      	str	r2, [r1, #0]
	list->tail = node;
   17036:	605a      	str	r2, [r3, #4]
}
   17038:	4770      	bx	lr
   1703a:	bf00      	nop
   1703c:	20002588 	.word	0x20002588

00017040 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   17040:	2300      	movs	r3, #0
	tx->user_data = NULL;
   17042:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   17046:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   17048:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   1704a:	4801      	ldr	r0, [pc, #4]	; (17050 <tx_free+0x10>)
   1704c:	f00b bce4 	b.w	22a18 <k_queue_append>
   17050:	200007c4 	.word	0x200007c4

00017054 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   17054:	4b0e      	ldr	r3, [pc, #56]	; (17090 <notify_connected+0x3c>)
{
   17056:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   17058:	681d      	ldr	r5, [r3, #0]
{
   1705a:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   1705c:	b955      	cbnz	r5, 17074 <notify_connected+0x20>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1705e:	4d0d      	ldr	r5, [pc, #52]	; (17094 <notify_connected+0x40>)
   17060:	4e0d      	ldr	r6, [pc, #52]	; (17098 <notify_connected+0x44>)
   17062:	7a61      	ldrb	r1, [r4, #9]
   17064:	42b5      	cmp	r5, r6
   17066:	d30c      	bcc.n	17082 <notify_connected+0x2e>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	if (!conn->err) {
   17068:	b989      	cbnz	r1, 1708e <notify_connected+0x3a>
		bt_gatt_connected(conn);
   1706a:	4620      	mov	r0, r4
	}
}
   1706c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_gatt_connected(conn);
   17070:	f002 bdcc 	b.w	19c0c <bt_gatt_connected>
		if (cb->connected) {
   17074:	682b      	ldr	r3, [r5, #0]
   17076:	b113      	cbz	r3, 1707e <notify_connected+0x2a>
			cb->connected(conn, conn->err);
   17078:	7a61      	ldrb	r1, [r4, #9]
   1707a:	4620      	mov	r0, r4
   1707c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1707e:	692d      	ldr	r5, [r5, #16]
   17080:	e7ec      	b.n	1705c <notify_connected+0x8>
		if (cb->connected) {
   17082:	682b      	ldr	r3, [r5, #0]
   17084:	b10b      	cbz	r3, 1708a <notify_connected+0x36>
			cb->connected(conn, conn->err);
   17086:	4620      	mov	r0, r4
   17088:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1708a:	3514      	adds	r5, #20
   1708c:	e7e9      	b.n	17062 <notify_connected+0xe>
}
   1708e:	bd70      	pop	{r4, r5, r6, pc}
   17090:	20002594 	.word	0x20002594
   17094:	00023510 	.word	0x00023510
   17098:	00023510 	.word	0x00023510

0001709c <send_frag>:
{
   1709c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   170a0:	694d      	ldr	r5, [r1, #20]
{
   170a2:	4604      	mov	r4, r0
   170a4:	460e      	mov	r6, r1
   170a6:	4691      	mov	r9, r2
   170a8:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   170aa:	f04f 33ff 	mov.w	r3, #4294967295
   170ae:	4846      	ldr	r0, [pc, #280]	; (171c8 <send_frag+0x12c>)
   170b0:	f04f 32ff 	mov.w	r2, #4294967295
   170b4:	f006 f990 	bl	1d3d8 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   170b8:	7aa3      	ldrb	r3, [r4, #10]
   170ba:	2b07      	cmp	r3, #7
   170bc:	d154      	bne.n	17168 <send_frag+0xcc>
	__asm__ volatile(
   170be:	f04f 0340 	mov.w	r3, #64	; 0x40
   170c2:	f3ef 8211 	mrs	r2, BASEPRI
   170c6:	f383 8812 	msr	BASEPRI_MAX, r3
   170ca:	f3bf 8f6f 	isb	sy
	if (tx) {
   170ce:	2d00      	cmp	r5, #0
   170d0:	d05c      	beq.n	1718c <send_frag+0xf0>
	parent->next = child;
   170d2:	2300      	movs	r3, #0
   170d4:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   170d6:	69a3      	ldr	r3, [r4, #24]
   170d8:	2b00      	cmp	r3, #0
   170da:	d154      	bne.n	17186 <send_frag+0xea>
	list->head = node;
   170dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   170e0:	f382 8811 	msr	BASEPRI, r2
   170e4:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   170e8:	2104      	movs	r1, #4
   170ea:	f106 0008 	add.w	r0, r6, #8
   170ee:	f00b f823 	bl	22138 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   170f2:	8823      	ldrh	r3, [r4, #0]
   170f4:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   170f8:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   170fc:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   170fe:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   17102:	3b04      	subs	r3, #4
   17104:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   17106:	2302      	movs	r3, #2
   17108:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   1710a:	4630      	mov	r0, r6
   1710c:	f7fe fd92 	bl	15c34 <bt_send>
	if (err) {
   17110:	4601      	mov	r1, r0
   17112:	2800      	cmp	r0, #0
   17114:	d056      	beq.n	171c4 <send_frag+0x128>
		BT_ERR("Unable to send to driver (err %d)", err);
   17116:	4a2d      	ldr	r2, [pc, #180]	; (171cc <send_frag+0x130>)
   17118:	6813      	ldr	r3, [r2, #0]
   1711a:	075b      	lsls	r3, r3, #29
   1711c:	d008      	beq.n	17130 <send_frag+0x94>
   1711e:	4b2c      	ldr	r3, [pc, #176]	; (171d0 <send_frag+0x134>)
   17120:	482c      	ldr	r0, [pc, #176]	; (171d4 <send_frag+0x138>)
   17122:	1ad2      	subs	r2, r2, r3
   17124:	0892      	lsrs	r2, r2, #2
   17126:	0192      	lsls	r2, r2, #6
   17128:	f042 0201 	orr.w	r2, r2, #1
   1712c:	f007 ff10 	bl	1ef50 <log_1>
	__asm__ volatile(
   17130:	f04f 0340 	mov.w	r3, #64	; 0x40
   17134:	f3ef 8111 	mrs	r1, BASEPRI
   17138:	f383 8812 	msr	BASEPRI_MAX, r3
   1713c:	f3bf 8f6f 	isb	sy
		if (tx) {
   17140:	2d00      	cmp	r5, #0
   17142:	d039      	beq.n	171b8 <send_frag+0x11c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17144:	6963      	ldr	r3, [r4, #20]
   17146:	2200      	movs	r2, #0
   17148:	b153      	cbz	r3, 17160 <send_frag+0xc4>
   1714a:	429d      	cmp	r5, r3
   1714c:	d131      	bne.n	171b2 <send_frag+0x116>
Z_GENLIST_REMOVE(slist, snode)
   1714e:	682b      	ldr	r3, [r5, #0]
   17150:	bb4a      	cbnz	r2, 171a6 <send_frag+0x10a>
   17152:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   17154:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   17156:	4295      	cmp	r5, r2
   17158:	d100      	bne.n	1715c <send_frag+0xc0>
	list->tail = node;
   1715a:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   1715c:	2300      	movs	r3, #0
   1715e:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   17160:	f381 8811 	msr	BASEPRI, r1
   17164:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   17168:	4817      	ldr	r0, [pc, #92]	; (171c8 <send_frag+0x12c>)
   1716a:	f006 f90f 	bl	1d38c <z_impl_k_sem_give>
	if (tx) {
   1716e:	b115      	cbz	r5, 17176 <send_frag+0xda>
		tx_free(tx);
   17170:	4628      	mov	r0, r5
   17172:	f7ff ff65 	bl	17040 <tx_free>
	if (always_consume) {
   17176:	b11f      	cbz	r7, 17180 <send_frag+0xe4>
		net_buf_unref(buf);
   17178:	4630      	mov	r0, r6
   1717a:	f002 feb3 	bl	19ee4 <net_buf_unref>
	return false;
   1717e:	2700      	movs	r7, #0
}
   17180:	4638      	mov	r0, r7
   17182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17186:	601d      	str	r5, [r3, #0]
	list->tail = node;
   17188:	61a5      	str	r5, [r4, #24]
}
   1718a:	e7a9      	b.n	170e0 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   1718c:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   1718e:	b133      	cbz	r3, 1719e <send_frag+0x102>
			pending_no_cb = &tail_tx->pending_no_cb;
   17190:	f103 080c 	add.w	r8, r3, #12
   17194:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   17196:	3301      	adds	r3, #1
   17198:	f8c8 3000 	str.w	r3, [r8]
   1719c:	e7a0      	b.n	170e0 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   1719e:	69e3      	ldr	r3, [r4, #28]
   171a0:	f104 081c 	add.w	r8, r4, #28
   171a4:	e7f7      	b.n	17196 <send_frag+0xfa>
	parent->next = child;
   171a6:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   171a8:	69a3      	ldr	r3, [r4, #24]
   171aa:	429d      	cmp	r5, r3
	list->tail = node;
   171ac:	bf08      	it	eq
   171ae:	61a2      	streq	r2, [r4, #24]
}
   171b0:	e7d4      	b.n	1715c <send_frag+0xc0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   171b2:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   171b4:	681b      	ldr	r3, [r3, #0]
   171b6:	e7c7      	b.n	17148 <send_frag+0xac>
			(*pending_no_cb)--;
   171b8:	f8d8 3000 	ldr.w	r3, [r8]
   171bc:	3b01      	subs	r3, #1
   171be:	f8c8 3000 	str.w	r3, [r8]
   171c2:	e7cd      	b.n	17160 <send_frag+0xc4>
	return true;
   171c4:	2701      	movs	r7, #1
   171c6:	e7db      	b.n	17180 <send_frag+0xe4>
   171c8:	200003a8 	.word	0x200003a8
   171cc:	2000065c 	.word	0x2000065c
   171d0:	20000654 	.word	0x20000654
   171d4:	000261f6 	.word	0x000261f6

000171d8 <bt_conn_get_pkts>:
}
   171d8:	4800      	ldr	r0, [pc, #0]	; (171dc <bt_conn_get_pkts+0x4>)
   171da:	4770      	bx	lr
   171dc:	200003a8 	.word	0x200003a8

000171e0 <bt_conn_new>:
{
   171e0:	b538      	push	{r3, r4, r5, lr}
   171e2:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   171e4:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   171e6:	2501      	movs	r5, #1
   171e8:	428b      	cmp	r3, r1
   171ea:	d102      	bne.n	171f2 <bt_conn_new+0x12>
		return NULL;
   171ec:	2400      	movs	r4, #0
}
   171ee:	4620      	mov	r0, r4
   171f0:	bd38      	pop	{r3, r4, r5, pc}
   171f2:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   171f6:	f3bf 8f5b 	dmb	ish
   171fa:	e852 0f00 	ldrex	r0, [r2]
   171fe:	2800      	cmp	r0, #0
   17200:	d104      	bne.n	1720c <bt_conn_new+0x2c>
   17202:	e842 5c00 	strex	ip, r5, [r2]
   17206:	f1bc 0f00 	cmp.w	ip, #0
   1720a:	d1f6      	bne.n	171fa <bt_conn_new+0x1a>
   1720c:	f3bf 8f5b 	dmb	ish
   17210:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   17214:	d002      	beq.n	1721c <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   17216:	3301      	adds	r3, #1
   17218:	4604      	mov	r4, r0
   1721a:	e7e5      	b.n	171e8 <bt_conn_new+0x8>
	if (!conn) {
   1721c:	2c00      	cmp	r4, #0
   1721e:	d0e6      	beq.n	171ee <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   17220:	22b8      	movs	r2, #184	; 0xb8
   17222:	2100      	movs	r1, #0
   17224:	4620      	mov	r0, r4
   17226:	f009 fdc3 	bl	20db0 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1722a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1722e:	4904      	ldr	r1, [pc, #16]	; (17240 <bt_conn_new+0x60>)
   17230:	f00b fce0 	bl	22bf4 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   17234:	4903      	ldr	r1, [pc, #12]	; (17244 <bt_conn_new+0x64>)
   17236:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1723a:	f00b fcb5 	bl	22ba8 <k_work_init>
	return conn;
   1723e:	e7d6      	b.n	171ee <bt_conn_new+0xe>
   17240:	00017b2d 	.word	0x00017b2d
   17244:	00021139 	.word	0x00021139

00017248 <bt_conn_recv>:
{
   17248:	b570      	push	{r4, r5, r6, lr}
   1724a:	4616      	mov	r6, r2
   1724c:	4604      	mov	r4, r0
   1724e:	460d      	mov	r5, r1
	tx_notify(conn);
   17250:	f009 ff4f 	bl	210f2 <tx_notify>
	switch (flags) {
   17254:	2e01      	cmp	r6, #1
   17256:	d034      	beq.n	172c2 <bt_conn_recv+0x7a>
   17258:	2e02      	cmp	r6, #2
   1725a:	d170      	bne.n	1733e <bt_conn_recv+0xf6>
		if (conn->rx) {
   1725c:	6923      	ldr	r3, [r4, #16]
   1725e:	b17b      	cbz	r3, 17280 <bt_conn_recv+0x38>
			BT_ERR("Unexpected first L2CAP frame");
   17260:	4943      	ldr	r1, [pc, #268]	; (17370 <bt_conn_recv+0x128>)
   17262:	680b      	ldr	r3, [r1, #0]
   17264:	075b      	lsls	r3, r3, #29
   17266:	d008      	beq.n	1727a <bt_conn_recv+0x32>
   17268:	4b42      	ldr	r3, [pc, #264]	; (17374 <bt_conn_recv+0x12c>)
   1726a:	4843      	ldr	r0, [pc, #268]	; (17378 <bt_conn_recv+0x130>)
   1726c:	1ac9      	subs	r1, r1, r3
   1726e:	0889      	lsrs	r1, r1, #2
   17270:	0189      	lsls	r1, r1, #6
   17272:	f041 0101 	orr.w	r1, r1, #1
   17276:	f007 fe5e 	bl	1ef36 <log_0>
			bt_conn_reset_rx_state(conn);
   1727a:	4620      	mov	r0, r4
   1727c:	f009 ff5f 	bl	2113e <bt_conn_reset_rx_state>
		conn->rx = buf;
   17280:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   17282:	6923      	ldr	r3, [r4, #16]
   17284:	8999      	ldrh	r1, [r3, #12]
   17286:	2901      	cmp	r1, #1
   17288:	d971      	bls.n	1736e <bt_conn_recv+0x126>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1728a:	6898      	ldr	r0, [r3, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   1728c:	7845      	ldrb	r5, [r0, #1]
   1728e:	7802      	ldrb	r2, [r0, #0]
   17290:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   17294:	3204      	adds	r2, #4
   17296:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
   17298:	4291      	cmp	r1, r2
   1729a:	d368      	bcc.n	1736e <bt_conn_recv+0x126>
	if (conn->rx->len > acl_total_len) {
   1729c:	d95e      	bls.n	1735c <bt_conn_recv+0x114>
		BT_ERR("ACL len mismatch (%u > %u)",
   1729e:	4b34      	ldr	r3, [pc, #208]	; (17370 <bt_conn_recv+0x128>)
   172a0:	6818      	ldr	r0, [r3, #0]
   172a2:	0740      	lsls	r0, r0, #29
   172a4:	d008      	beq.n	172b8 <bt_conn_recv+0x70>
   172a6:	4833      	ldr	r0, [pc, #204]	; (17374 <bt_conn_recv+0x12c>)
   172a8:	1a1b      	subs	r3, r3, r0
   172aa:	089b      	lsrs	r3, r3, #2
   172ac:	019b      	lsls	r3, r3, #6
   172ae:	4833      	ldr	r0, [pc, #204]	; (1737c <bt_conn_recv+0x134>)
   172b0:	f043 0301 	orr.w	r3, r3, #1
   172b4:	f007 fe60 	bl	1ef78 <log_2>
		bt_conn_reset_rx_state(conn);
   172b8:	4620      	mov	r0, r4
}
   172ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   172be:	f009 bf3e 	b.w	2113e <bt_conn_reset_rx_state>
		if (!conn->rx) {
   172c2:	6920      	ldr	r0, [r4, #16]
   172c4:	b9a0      	cbnz	r0, 172f0 <bt_conn_recv+0xa8>
			BT_ERR("Unexpected L2CAP continuation");
   172c6:	492a      	ldr	r1, [pc, #168]	; (17370 <bt_conn_recv+0x128>)
   172c8:	680b      	ldr	r3, [r1, #0]
   172ca:	075e      	lsls	r6, r3, #29
   172cc:	d008      	beq.n	172e0 <bt_conn_recv+0x98>
   172ce:	4b29      	ldr	r3, [pc, #164]	; (17374 <bt_conn_recv+0x12c>)
   172d0:	482b      	ldr	r0, [pc, #172]	; (17380 <bt_conn_recv+0x138>)
   172d2:	1ac9      	subs	r1, r1, r3
   172d4:	0889      	lsrs	r1, r1, #2
   172d6:	0189      	lsls	r1, r1, #6
   172d8:	f041 0101 	orr.w	r1, r1, #1
   172dc:	f007 fe2b 	bl	1ef36 <log_0>
			bt_conn_reset_rx_state(conn);
   172e0:	4620      	mov	r0, r4
   172e2:	f009 ff2c 	bl	2113e <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   172e6:	4628      	mov	r0, r5
}
   172e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   172ec:	f002 bdfa 	b.w	19ee4 <net_buf_unref>
		if (!buf->len) {
   172f0:	89ae      	ldrh	r6, [r5, #12]
   172f2:	2e00      	cmp	r6, #0
   172f4:	d0f7      	beq.n	172e6 <bt_conn_recv+0x9e>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   172f6:	3008      	adds	r0, #8
   172f8:	f00a ff4a 	bl	22190 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   172fc:	4286      	cmp	r6, r0
   172fe:	d914      	bls.n	1732a <bt_conn_recv+0xe2>
			BT_ERR("Not enough buffer space for L2CAP data");
   17300:	491b      	ldr	r1, [pc, #108]	; (17370 <bt_conn_recv+0x128>)
   17302:	680b      	ldr	r3, [r1, #0]
   17304:	0758      	lsls	r0, r3, #29
   17306:	d008      	beq.n	1731a <bt_conn_recv+0xd2>
   17308:	4b1a      	ldr	r3, [pc, #104]	; (17374 <bt_conn_recv+0x12c>)
   1730a:	481e      	ldr	r0, [pc, #120]	; (17384 <bt_conn_recv+0x13c>)
   1730c:	1ac9      	subs	r1, r1, r3
   1730e:	0889      	lsrs	r1, r1, #2
   17310:	0189      	lsls	r1, r1, #6
   17312:	f041 0101 	orr.w	r1, r1, #1
   17316:	f007 fe0e 	bl	1ef36 <log_0>
			bt_l2cap_recv(conn, conn->rx, false);
   1731a:	6921      	ldr	r1, [r4, #16]
   1731c:	2200      	movs	r2, #0
   1731e:	4620      	mov	r0, r4
   17320:	f000 fed0 	bl	180c4 <bt_l2cap_recv>
			conn->rx = NULL;
   17324:	2300      	movs	r3, #0
   17326:	6123      	str	r3, [r4, #16]
   17328:	e7dd      	b.n	172e6 <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1732a:	6920      	ldr	r0, [r4, #16]
   1732c:	89aa      	ldrh	r2, [r5, #12]
   1732e:	68a9      	ldr	r1, [r5, #8]
   17330:	3008      	adds	r0, #8
   17332:	f00a fef8 	bl	22126 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   17336:	4628      	mov	r0, r5
   17338:	f002 fdd4 	bl	19ee4 <net_buf_unref>
		break;
   1733c:	e7a1      	b.n	17282 <bt_conn_recv+0x3a>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   1733e:	4b0c      	ldr	r3, [pc, #48]	; (17370 <bt_conn_recv+0x128>)
   17340:	681a      	ldr	r2, [r3, #0]
   17342:	0752      	lsls	r2, r2, #29
   17344:	d0cc      	beq.n	172e0 <bt_conn_recv+0x98>
   17346:	4a0b      	ldr	r2, [pc, #44]	; (17374 <bt_conn_recv+0x12c>)
   17348:	480f      	ldr	r0, [pc, #60]	; (17388 <bt_conn_recv+0x140>)
   1734a:	1a9b      	subs	r3, r3, r2
   1734c:	089b      	lsrs	r3, r3, #2
   1734e:	019b      	lsls	r3, r3, #6
   17350:	f043 0201 	orr.w	r2, r3, #1
   17354:	4631      	mov	r1, r6
   17356:	f007 fdfb 	bl	1ef50 <log_1>
   1735a:	e7c1      	b.n	172e0 <bt_conn_recv+0x98>
	conn->rx = NULL;
   1735c:	2200      	movs	r2, #0
   1735e:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   17360:	4620      	mov	r0, r4
   17362:	2201      	movs	r2, #1
}
   17364:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   17368:	4619      	mov	r1, r3
   1736a:	f000 beab 	b.w	180c4 <bt_l2cap_recv>
}
   1736e:	bd70      	pop	{r4, r5, r6, pc}
   17370:	2000065c 	.word	0x2000065c
   17374:	20000654 	.word	0x20000654
   17378:	000264a8 	.word	0x000264a8
   1737c:	00026528 	.word	0x00026528
   17380:	000264c5 	.word	0x000264c5
   17384:	000264e3 	.word	0x000264e3
   17388:	0002650a 	.word	0x0002650a

0001738c <bt_conn_send_cb>:
{
   1738c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17390:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   17392:	7a83      	ldrb	r3, [r0, #10]
   17394:	2b07      	cmp	r3, #7
{
   17396:	4605      	mov	r5, r0
   17398:	460e      	mov	r6, r1
   1739a:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   1739c:	d010      	beq.n	173c0 <bt_conn_send_cb+0x34>
		BT_ERR("not connected!");
   1739e:	492b      	ldr	r1, [pc, #172]	; (1744c <bt_conn_send_cb+0xc0>)
   173a0:	680b      	ldr	r3, [r1, #0]
   173a2:	075a      	lsls	r2, r3, #29
   173a4:	d008      	beq.n	173b8 <bt_conn_send_cb+0x2c>
   173a6:	4b2a      	ldr	r3, [pc, #168]	; (17450 <bt_conn_send_cb+0xc4>)
   173a8:	482a      	ldr	r0, [pc, #168]	; (17454 <bt_conn_send_cb+0xc8>)
   173aa:	1ac9      	subs	r1, r1, r3
   173ac:	0889      	lsrs	r1, r1, #2
   173ae:	0189      	lsls	r1, r1, #6
   173b0:	f041 0101 	orr.w	r1, r1, #1
   173b4:	f007 fdbf 	bl	1ef36 <log_0>
			return -ENOTCONN;
   173b8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   173bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   173c0:	2a00      	cmp	r2, #0
   173c2:	d040      	beq.n	17446 <bt_conn_send_cb+0xba>
	return z_impl_z_current_get();
   173c4:	f006 fd00 	bl	1ddc8 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   173c8:	4b23      	ldr	r3, [pc, #140]	; (17458 <bt_conn_send_cb+0xcc>)
   173ca:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   173cc:	4823      	ldr	r0, [pc, #140]	; (1745c <bt_conn_send_cb+0xd0>)
   173ce:	bf07      	ittee	eq
   173d0:	2200      	moveq	r2, #0
   173d2:	2300      	moveq	r3, #0
   173d4:	f04f 32ff 	movne.w	r2, #4294967295
   173d8:	f04f 33ff 	movne.w	r3, #4294967295
   173dc:	f005 ffa2 	bl	1d324 <z_impl_k_queue_get>
   173e0:	4604      	mov	r4, r0
		if (!tx) {
   173e2:	b978      	cbnz	r0, 17404 <bt_conn_send_cb+0x78>
			BT_ERR("Unable to allocate TX context");
   173e4:	4919      	ldr	r1, [pc, #100]	; (1744c <bt_conn_send_cb+0xc0>)
   173e6:	680b      	ldr	r3, [r1, #0]
   173e8:	075b      	lsls	r3, r3, #29
   173ea:	d008      	beq.n	173fe <bt_conn_send_cb+0x72>
   173ec:	4b18      	ldr	r3, [pc, #96]	; (17450 <bt_conn_send_cb+0xc4>)
   173ee:	481c      	ldr	r0, [pc, #112]	; (17460 <bt_conn_send_cb+0xd4>)
   173f0:	1ac9      	subs	r1, r1, r3
   173f2:	0889      	lsrs	r1, r1, #2
   173f4:	0189      	lsls	r1, r1, #6
   173f6:	f041 0101 	orr.w	r1, r1, #1
   173fa:	f007 fd9c 	bl	1ef36 <log_0>
			return -ENOBUFS;
   173fe:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17402:	e7db      	b.n	173bc <bt_conn_send_cb+0x30>
		if (conn->state != BT_CONN_CONNECTED) {
   17404:	7aab      	ldrb	r3, [r5, #10]
   17406:	2b07      	cmp	r3, #7
   17408:	d011      	beq.n	1742e <bt_conn_send_cb+0xa2>
			BT_WARN("Disconnected while allocating context");
   1740a:	4910      	ldr	r1, [pc, #64]	; (1744c <bt_conn_send_cb+0xc0>)
   1740c:	680b      	ldr	r3, [r1, #0]
   1740e:	f013 0f06 	tst.w	r3, #6
   17412:	d008      	beq.n	17426 <bt_conn_send_cb+0x9a>
   17414:	4b0e      	ldr	r3, [pc, #56]	; (17450 <bt_conn_send_cb+0xc4>)
   17416:	4813      	ldr	r0, [pc, #76]	; (17464 <bt_conn_send_cb+0xd8>)
   17418:	1ac9      	subs	r1, r1, r3
   1741a:	0889      	lsrs	r1, r1, #2
   1741c:	0189      	lsls	r1, r1, #6
   1741e:	f041 0102 	orr.w	r1, r1, #2
   17422:	f007 fd88 	bl	1ef36 <log_0>
			tx_free(tx);
   17426:	4620      	mov	r0, r4
   17428:	f7ff fe0a 	bl	17040 <tx_free>
   1742c:	e7c4      	b.n	173b8 <bt_conn_send_cb+0x2c>
		tx->pending_no_cb = 0U;
   1742e:	2300      	movs	r3, #0
		tx->user_data = user_data;
   17430:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   17434:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   17436:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   17438:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1743c:	4631      	mov	r1, r6
   1743e:	f00a fe39 	bl	220b4 <net_buf_put>
	return 0;
   17442:	2000      	movs	r0, #0
   17444:	e7ba      	b.n	173bc <bt_conn_send_cb+0x30>
		tx_data(buf)->tx = NULL;
   17446:	614a      	str	r2, [r1, #20]
   17448:	e7f6      	b.n	17438 <bt_conn_send_cb+0xac>
   1744a:	bf00      	nop
   1744c:	2000065c 	.word	0x2000065c
   17450:	20000654 	.word	0x20000654
   17454:	00026543 	.word	0x00026543
   17458:	20001f70 	.word	0x20001f70
   1745c:	200007c4 	.word	0x200007c4
   17460:	00026552 	.word	0x00026552
   17464:	00026570 	.word	0x00026570

00017468 <bt_conn_prepare_events>:
{
   17468:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0U;
   1746a:	4b1b      	ldr	r3, [pc, #108]	; (174d8 <bt_conn_prepare_events+0x70>)
   1746c:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1746e:	2101      	movs	r1, #1
{
   17470:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
   17472:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   17474:	f00b fef4 	bl	23260 <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
   17478:	4b18      	ldr	r3, [pc, #96]	; (174dc <bt_conn_prepare_events+0x74>)
   1747a:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
   1747e:	f009 fe25 	bl	210cc <atomic_get>
		if (!conn_prepare_events(conn, &events[ev_count])) {
   17482:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
   17486:	4619      	mov	r1, r3
   17488:	b908      	cbnz	r0, 1748e <bt_conn_prepare_events+0x26>
		conn_cleanup(conn);
   1748a:	2001      	movs	r0, #1
}
   1748c:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1748e:	7a9a      	ldrb	r2, [r3, #10]
   17490:	b99a      	cbnz	r2, 174ba <bt_conn_prepare_events+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17492:	f3bf 8f5b 	dmb	ish
   17496:	1d1a      	adds	r2, r3, #4
   17498:	e852 0f00 	ldrex	r0, [r2]
   1749c:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
   174a0:	e842 ce00 	strex	lr, ip, [r2]
   174a4:	f1be 0f00 	cmp.w	lr, #0
   174a8:	d1f6      	bne.n	17498 <bt_conn_prepare_events+0x30>
   174aa:	f3bf 8f5b 	dmb	ish
   174ae:	0642      	lsls	r2, r0, #25
   174b0:	d503      	bpl.n	174ba <bt_conn_prepare_events+0x52>
		conn_cleanup(conn);
   174b2:	4618      	mov	r0, r3
   174b4:	f009 fe4c 	bl	21150 <conn_cleanup>
   174b8:	e7e7      	b.n	1748a <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   174ba:	7a8b      	ldrb	r3, [r1, #10]
   174bc:	2b07      	cmp	r3, #7
   174be:	d1e4      	bne.n	1748a <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   174c0:	4b07      	ldr	r3, [pc, #28]	; (174e0 <bt_conn_prepare_events+0x78>)
   174c2:	4628      	mov	r0, r5
   174c4:	2200      	movs	r2, #0
   174c6:	2104      	movs	r1, #4
   174c8:	f00b feca 	bl	23260 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   174cc:	2301      	movs	r3, #1
   174ce:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   174d2:	2002      	movs	r0, #2
	return ev_count;
   174d4:	e7da      	b.n	1748c <bt_conn_prepare_events+0x24>
   174d6:	bf00      	nop
   174d8:	200004e0 	.word	0x200004e0
   174dc:	20001910 	.word	0x20001910
   174e0:	20001948 	.word	0x20001948

000174e4 <bt_conn_lookup_handle>:
{
   174e4:	4602      	mov	r2, r0
   174e6:	b508      	push	{r3, lr}
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   174e8:	2101      	movs	r1, #1
   174ea:	4803      	ldr	r0, [pc, #12]	; (174f8 <bt_conn_lookup_handle+0x14>)
   174ec:	f009 fe69 	bl	211c2 <conn_lookup_handle>
}
   174f0:	2800      	cmp	r0, #0
   174f2:	bf38      	it	cc
   174f4:	2000      	movcc	r0, #0
   174f6:	bd08      	pop	{r3, pc}
   174f8:	20001910 	.word	0x20001910

000174fc <bt_conn_set_state>:
{
   174fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
   17500:	7a86      	ldrb	r6, [r0, #10]
   17502:	428e      	cmp	r6, r1
{
   17504:	4604      	mov	r4, r0
   17506:	460d      	mov	r5, r1
	if (conn->state == state) {
   17508:	d116      	bne.n	17538 <bt_conn_set_state+0x3c>
		BT_WARN("no transition %s", state2str(state));
   1750a:	4b7c      	ldr	r3, [pc, #496]	; (176fc <bt_conn_set_state+0x200>)
   1750c:	681a      	ldr	r2, [r3, #0]
   1750e:	f012 0f06 	tst.w	r2, #6
   17512:	d053      	beq.n	175bc <bt_conn_set_state+0xc0>
   17514:	4a7a      	ldr	r2, [pc, #488]	; (17700 <bt_conn_set_state+0x204>)
   17516:	487b      	ldr	r0, [pc, #492]	; (17704 <bt_conn_set_state+0x208>)
   17518:	2e08      	cmp	r6, #8
   1751a:	eba3 0202 	sub.w	r2, r3, r2
   1751e:	bf96      	itet	ls
   17520:	4b79      	ldrls	r3, [pc, #484]	; (17708 <bt_conn_set_state+0x20c>)
   17522:	497a      	ldrhi	r1, [pc, #488]	; (1770c <bt_conn_set_state+0x210>)
   17524:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
   17528:	0892      	lsrs	r2, r2, #2
   1752a:	0192      	lsls	r2, r2, #6
   1752c:	f042 0202 	orr.w	r2, r2, #2
}
   17530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("no valid (%u) state was set", state);
   17534:	f007 bd0c 	b.w	1ef50 <log_1>
	conn->state = state;
   17538:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   1753a:	b166      	cbz	r6, 17556 <bt_conn_set_state+0x5a>
   1753c:	2e06      	cmp	r6, #6
   1753e:	d010      	beq.n	17562 <bt_conn_set_state+0x66>
	switch (conn->state) {
   17540:	7aa3      	ldrb	r3, [r4, #10]
   17542:	2b08      	cmp	r3, #8
   17544:	f200 80cb 	bhi.w	176de <bt_conn_set_state+0x1e2>
   17548:	e8df f003 	tbb	[pc, r3]
   1754c:	3838123a 	.word	0x3838123a
   17550:	2a8c3838 	.word	0x2a8c3838
   17554:	38          	.byte	0x38
   17555:	00          	.byte	0x00
		if (conn->type != BT_CONN_TYPE_ISO) {
   17556:	7883      	ldrb	r3, [r0, #2]
   17558:	2b08      	cmp	r3, #8
   1755a:	d0f1      	beq.n	17540 <bt_conn_set_state+0x44>
			bt_conn_ref(conn);
   1755c:	f009 fe16 	bl	2118c <bt_conn_ref>
   17560:	e7ee      	b.n	17540 <bt_conn_set_state+0x44>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   17562:	7883      	ldrb	r3, [r0, #2]
   17564:	2b01      	cmp	r3, #1
   17566:	d1eb      	bne.n	17540 <bt_conn_set_state+0x44>
			k_work_cancel_delayable(&conn->deferred_work);
   17568:	3058      	adds	r0, #88	; 0x58
   1756a:	f00b fb4f 	bl	22c0c <k_work_cancel_delayable>
   1756e:	e7e7      	b.n	17540 <bt_conn_set_state+0x44>
	z_impl_k_sem_give(sem);
   17570:	4d67      	ldr	r5, [pc, #412]	; (17710 <bt_conn_set_state+0x214>)
		tx->pending_no_cb = 0U;
   17572:	2600      	movs	r6, #0
	__asm__ volatile(
   17574:	f04f 0340 	mov.w	r3, #64	; 0x40
   17578:	f3ef 8211 	mrs	r2, BASEPRI
   1757c:	f383 8812 	msr	BASEPRI_MAX, r3
   17580:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   17584:	69e3      	ldr	r3, [r4, #28]
   17586:	2b00      	cmp	r3, #0
   17588:	f000 8089 	beq.w	1769e <bt_conn_set_state+0x1a2>
			conn->pending_no_cb--;
   1758c:	3b01      	subs	r3, #1
   1758e:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   17590:	f382 8811 	msr	BASEPRI, r2
   17594:	f3bf 8f6f 	isb	sy
   17598:	4628      	mov	r0, r5
   1759a:	f005 fef7 	bl	1d38c <z_impl_k_sem_give>
}
   1759e:	e7e9      	b.n	17574 <bt_conn_set_state+0x78>
		if (conn->type == BT_CONN_TYPE_SCO) {
   175a0:	78a3      	ldrb	r3, [r4, #2]
   175a2:	2b04      	cmp	r3, #4
   175a4:	d00a      	beq.n	175bc <bt_conn_set_state+0xc0>
	z_impl_k_queue_init(queue);
   175a6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   175aa:	f00b fa29 	bl	22a00 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   175ae:	4859      	ldr	r0, [pc, #356]	; (17714 <bt_conn_set_state+0x218>)
   175b0:	2100      	movs	r1, #0
   175b2:	f006 ff01 	bl	1e3b8 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   175b6:	2300      	movs	r3, #0
	list->tail = NULL;
   175b8:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
}
   175bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   175c0:	78a3      	ldrb	r3, [r4, #2]
   175c2:	2b04      	cmp	r3, #4
   175c4:	d105      	bne.n	175d2 <bt_conn_set_state+0xd6>
	old = atomic_dec(&conn->ref);
   175c6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
}
   175ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	old = atomic_dec(&conn->ref);
   175ce:	f009 bd83 	b.w	210d8 <atomic_dec>
		switch (old_state) {
   175d2:	2e08      	cmp	r6, #8
   175d4:	d8f2      	bhi.n	175bc <bt_conn_set_state+0xc0>
   175d6:	a301      	add	r3, pc, #4	; (adr r3, 175dc <bt_conn_set_state+0xe0>)
   175d8:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   175dc:	00017649 	.word	0x00017649
   175e0:	00017601 	.word	0x00017601
   175e4:	0001763b 	.word	0x0001763b
   175e8:	000175c7 	.word	0x000175c7
   175ec:	000175c7 	.word	0x000175c7
   175f0:	0001763b 	.word	0x0001763b
   175f4:	0001763b 	.word	0x0001763b
   175f8:	00017649 	.word	0x00017649
   175fc:	00017649 	.word	0x00017649
			tx_notify(conn);
   17600:	4620      	mov	r0, r4
   17602:	f009 fd76 	bl	210f2 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   17606:	78a3      	ldrb	r3, [r4, #2]
   17608:	2b01      	cmp	r3, #1
   1760a:	d103      	bne.n	17614 <bt_conn_set_state+0x118>
				k_work_cancel_delayable(&conn->deferred_work);
   1760c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   17610:	f00b fafc 	bl	22c0c <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17614:	f3bf 8f5b 	dmb	ish
   17618:	3404      	adds	r4, #4
   1761a:	e854 3f00 	ldrex	r3, [r4]
   1761e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17622:	e844 3200 	strex	r2, r3, [r4]
   17626:	2a00      	cmp	r2, #0
   17628:	d1f7      	bne.n	1761a <bt_conn_set_state+0x11e>
   1762a:	f3bf 8f5b 	dmb	ish
   1762e:	4839      	ldr	r0, [pc, #228]	; (17714 <bt_conn_set_state+0x218>)
}
   17630:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   17634:	2100      	movs	r1, #0
   17636:	f006 bebf 	b.w	1e3b8 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   1763a:	7a63      	ldrb	r3, [r4, #9]
   1763c:	2b00      	cmp	r3, #0
   1763e:	d0c2      	beq.n	175c6 <bt_conn_set_state+0xca>
				notify_connected(conn);
   17640:	4620      	mov	r0, r4
   17642:	f7ff fd07 	bl	17054 <notify_connected>
   17646:	e7be      	b.n	175c6 <bt_conn_set_state+0xca>
			BT_WARN("Invalid (%u) old state", state);
   17648:	4a2c      	ldr	r2, [pc, #176]	; (176fc <bt_conn_set_state+0x200>)
   1764a:	6813      	ldr	r3, [r2, #0]
   1764c:	f013 0f06 	tst.w	r3, #6
   17650:	d0b4      	beq.n	175bc <bt_conn_set_state+0xc0>
   17652:	4b2b      	ldr	r3, [pc, #172]	; (17700 <bt_conn_set_state+0x204>)
   17654:	4830      	ldr	r0, [pc, #192]	; (17718 <bt_conn_set_state+0x21c>)
   17656:	1ad2      	subs	r2, r2, r3
   17658:	0892      	lsrs	r2, r2, #2
   1765a:	0192      	lsls	r2, r2, #6
   1765c:	f042 0202 	orr.w	r2, r2, #2
   17660:	4629      	mov	r1, r5
   17662:	e765      	b.n	17530 <bt_conn_set_state+0x34>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   17664:	78a3      	ldrb	r3, [r4, #2]
   17666:	2b01      	cmp	r3, #1
   17668:	d1a8      	bne.n	175bc <bt_conn_set_state+0xc0>
					K_MSEC(10 * bt_dev.create_param.timeout));
   1766a:	4b2c      	ldr	r3, [pc, #176]	; (1771c <bt_conn_set_state+0x220>)
   1766c:	8a9b      	ldrh	r3, [r3, #20]
   1766e:	210a      	movs	r1, #10
   17670:	4359      	muls	r1, r3
			return (t * to_hz + off) / from_hz;
   17672:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   17676:	f240 36e7 	movw	r6, #999	; 0x3e7
   1767a:	2700      	movs	r7, #0
   1767c:	fbc0 6701 	smlal	r6, r7, r0, r1
   17680:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17684:	2300      	movs	r3, #0
   17686:	4630      	mov	r0, r6
   17688:	4639      	mov	r1, r7
   1768a:	f7e8 fd27 	bl	dc <__aeabi_uldivmod>
   1768e:	4602      	mov	r2, r0
   17690:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   17692:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
   17696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_work_schedule(&conn->deferred_work,
   1769a:	f006 b857 	b.w	1d74c <k_work_schedule>
Z_GENLIST_IS_EMPTY(slist)
   1769e:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   176a0:	b128      	cbz	r0, 176ae <bt_conn_set_state+0x1b2>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   176a2:	69a1      	ldr	r1, [r4, #24]
   176a4:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   176a6:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   176a8:	4288      	cmp	r0, r1
	list->tail = node;
   176aa:	bf08      	it	eq
   176ac:	61a3      	streq	r3, [r4, #24]
   176ae:	f382 8811 	msr	BASEPRI, r2
   176b2:	f3bf 8f6f 	isb	sy
		if (!node) {
   176b6:	2800      	cmp	r0, #0
   176b8:	d080      	beq.n	175bc <bt_conn_set_state+0xc0>
	__asm__ volatile(
   176ba:	f04f 0240 	mov.w	r2, #64	; 0x40
   176be:	f3ef 8311 	mrs	r3, BASEPRI
   176c2:	f382 8812 	msr	BASEPRI_MAX, r2
   176c6:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   176ca:	68c2      	ldr	r2, [r0, #12]
   176cc:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   176ce:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   176d0:	f383 8811 	msr	BASEPRI, r3
   176d4:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   176d8:	f7ff fcb2 	bl	17040 <tx_free>
   176dc:	e75c      	b.n	17598 <bt_conn_set_state+0x9c>
		BT_WARN("no valid (%u) state was set", state);
   176de:	4a07      	ldr	r2, [pc, #28]	; (176fc <bt_conn_set_state+0x200>)
   176e0:	6813      	ldr	r3, [r2, #0]
   176e2:	f013 0f06 	tst.w	r3, #6
   176e6:	f43f af69 	beq.w	175bc <bt_conn_set_state+0xc0>
   176ea:	4b05      	ldr	r3, [pc, #20]	; (17700 <bt_conn_set_state+0x204>)
   176ec:	480c      	ldr	r0, [pc, #48]	; (17720 <bt_conn_set_state+0x224>)
   176ee:	1ad2      	subs	r2, r2, r3
   176f0:	0892      	lsrs	r2, r2, #2
   176f2:	0192      	lsls	r2, r2, #6
   176f4:	f042 0202 	orr.w	r2, r2, #2
   176f8:	4629      	mov	r1, r5
   176fa:	e719      	b.n	17530 <bt_conn_set_state+0x34>
   176fc:	2000065c 	.word	0x2000065c
   17700:	20000654 	.word	0x20000654
   17704:	000265a0 	.word	0x000265a0
   17708:	00023ffc 	.word	0x00023ffc
   1770c:	00026596 	.word	0x00026596
   17710:	200003a8 	.word	0x200003a8
   17714:	200004e0 	.word	0x200004e0
   17718:	000265b1 	.word	0x000265b1
   1771c:	200002a8 	.word	0x200002a8
   17720:	000265c8 	.word	0x000265c8

00017724 <bt_conn_index>:
		index = conn - acl_conns;
   17724:	4b03      	ldr	r3, [pc, #12]	; (17734 <bt_conn_index+0x10>)
   17726:	1ac0      	subs	r0, r0, r3
   17728:	4b03      	ldr	r3, [pc, #12]	; (17738 <bt_conn_index+0x14>)
   1772a:	1180      	asrs	r0, r0, #6
   1772c:	4358      	muls	r0, r3
}
   1772e:	b2c0      	uxtb	r0, r0
   17730:	4770      	bx	lr
   17732:	bf00      	nop
   17734:	20001910 	.word	0x20001910
   17738:	aaaaaaab 	.word	0xaaaaaaab

0001773c <bt_conn_create_pdu_timeout>:
{
   1773c:	b538      	push	{r3, r4, r5, lr}
   1773e:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   17740:	490e      	ldr	r1, [pc, #56]	; (1777c <bt_conn_create_pdu_timeout+0x40>)
   17742:	2800      	cmp	r0, #0
   17744:	bf08      	it	eq
   17746:	4608      	moveq	r0, r1
   17748:	f00a fc91 	bl	2206e <net_buf_alloc_fixed>
	if (!buf) {
   1774c:	4604      	mov	r4, r0
   1774e:	b978      	cbnz	r0, 17770 <bt_conn_create_pdu_timeout+0x34>
		BT_WARN("Unable to allocate buffer within timeout");
   17750:	490b      	ldr	r1, [pc, #44]	; (17780 <bt_conn_create_pdu_timeout+0x44>)
   17752:	680b      	ldr	r3, [r1, #0]
   17754:	f013 0f06 	tst.w	r3, #6
   17758:	d008      	beq.n	1776c <bt_conn_create_pdu_timeout+0x30>
   1775a:	4b0a      	ldr	r3, [pc, #40]	; (17784 <bt_conn_create_pdu_timeout+0x48>)
   1775c:	480a      	ldr	r0, [pc, #40]	; (17788 <bt_conn_create_pdu_timeout+0x4c>)
   1775e:	1ac9      	subs	r1, r1, r3
   17760:	0889      	lsrs	r1, r1, #2
   17762:	0189      	lsls	r1, r1, #6
   17764:	f041 0102 	orr.w	r1, r1, #2
   17768:	f007 fbe5 	bl	1ef36 <log_0>
}
   1776c:	4620      	mov	r0, r4
   1776e:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   17770:	1d29      	adds	r1, r5, #4
   17772:	3008      	adds	r0, #8
   17774:	f00a fc9a 	bl	220ac <net_buf_simple_reserve>
	return buf;
   17778:	e7f8      	b.n	1776c <bt_conn_create_pdu_timeout+0x30>
   1777a:	bf00      	nop
   1777c:	200007dc 	.word	0x200007dc
   17780:	2000065c 	.word	0x2000065c
   17784:	20000654 	.word	0x20000654
   17788:	000265e4 	.word	0x000265e4

0001778c <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   1778c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1778e:	1d03      	adds	r3, r0, #4
{
   17790:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17792:	4618      	mov	r0, r3
   17794:	f009 fc9a 	bl	210cc <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   17798:	0582      	lsls	r2, r0, #22
   1779a:	d519      	bpl.n	177d0 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
   1779c:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   177a0:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   177a4:	4291      	cmp	r1, r2
   177a6:	d813      	bhi.n	177d0 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
   177a8:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   177ac:	4291      	cmp	r1, r2
   177ae:	d30f      	bcc.n	177d0 <notify_le_param_updated+0x44>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   177b0:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   177b4:	4291      	cmp	r1, r2
   177b6:	d10b      	bne.n	177d0 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   177b8:	f3bf 8f5b 	dmb	ish
   177bc:	e853 2f00 	ldrex	r2, [r3]
   177c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   177c4:	e843 2100 	strex	r1, r2, [r3]
   177c8:	2900      	cmp	r1, #0
   177ca:	d1f7      	bne.n	177bc <notify_le_param_updated+0x30>
   177cc:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   177d0:	4b0f      	ldr	r3, [pc, #60]	; (17810 <notify_le_param_updated+0x84>)
   177d2:	681d      	ldr	r5, [r3, #0]
   177d4:	b925      	cbnz	r5, 177e0 <notify_le_param_updated+0x54>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   177d6:	4d0f      	ldr	r5, [pc, #60]	; (17814 <notify_le_param_updated+0x88>)
   177d8:	4f0f      	ldr	r7, [pc, #60]	; (17818 <notify_le_param_updated+0x8c>)
   177da:	42bd      	cmp	r5, r7
   177dc:	d30c      	bcc.n	177f8 <notify_le_param_updated+0x6c>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   177de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   177e0:	68ee      	ldr	r6, [r5, #12]
   177e2:	b13e      	cbz	r6, 177f4 <notify_le_param_updated+0x68>
			cb->le_param_updated(conn, conn->le.interval,
   177e4:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   177e8:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   177ec:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   177f0:	4620      	mov	r0, r4
   177f2:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   177f4:	692d      	ldr	r5, [r5, #16]
   177f6:	e7ed      	b.n	177d4 <notify_le_param_updated+0x48>
		if (cb->le_param_updated) {
   177f8:	68ee      	ldr	r6, [r5, #12]
   177fa:	b13e      	cbz	r6, 1780c <notify_le_param_updated+0x80>
			cb->le_param_updated(conn, conn->le.interval,
   177fc:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   17800:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   17804:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   17808:	4620      	mov	r0, r4
   1780a:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1780c:	3514      	adds	r5, #20
   1780e:	e7e4      	b.n	177da <notify_le_param_updated+0x4e>
   17810:	20002594 	.word	0x20002594
   17814:	00023510 	.word	0x00023510
   17818:	00023510 	.word	0x00023510

0001781c <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   1781c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17820:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   17822:	4608      	mov	r0, r1
{
   17824:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   17826:	f009 fb8c 	bl	20f42 <bt_le_conn_params_valid>
   1782a:	4605      	mov	r5, r0
   1782c:	b918      	cbnz	r0, 17836 <le_param_req+0x1a>
		return false;
   1782e:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   17830:	4628      	mov	r0, r5
   17832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   17836:	4b13      	ldr	r3, [pc, #76]	; (17884 <le_param_req+0x68>)
   17838:	681e      	ldr	r6, [r3, #0]
   1783a:	b946      	cbnz	r6, 1784e <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1783c:	4e12      	ldr	r6, [pc, #72]	; (17888 <le_param_req+0x6c>)
   1783e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1788c <le_param_req+0x70>
   17842:	4546      	cmp	r6, r8
   17844:	d2f4      	bcs.n	17830 <le_param_req+0x14>
		if (!cb->le_param_req) {
   17846:	68b3      	ldr	r3, [r6, #8]
   17848:	b983      	cbnz	r3, 1786c <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1784a:	3614      	adds	r6, #20
   1784c:	e7f9      	b.n	17842 <le_param_req+0x26>
		if (!cb->le_param_req) {
   1784e:	68b3      	ldr	r3, [r6, #8]
   17850:	b90b      	cbnz	r3, 17856 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   17852:	6936      	ldr	r6, [r6, #16]
   17854:	e7f1      	b.n	1783a <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   17856:	4621      	mov	r1, r4
   17858:	4638      	mov	r0, r7
   1785a:	4798      	blx	r3
   1785c:	2800      	cmp	r0, #0
   1785e:	d0e6      	beq.n	1782e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   17860:	4620      	mov	r0, r4
   17862:	f009 fb6e 	bl	20f42 <bt_le_conn_params_valid>
   17866:	2800      	cmp	r0, #0
   17868:	d1f3      	bne.n	17852 <le_param_req+0x36>
   1786a:	e7e0      	b.n	1782e <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   1786c:	4621      	mov	r1, r4
   1786e:	4638      	mov	r0, r7
   17870:	4798      	blx	r3
   17872:	2800      	cmp	r0, #0
   17874:	d0db      	beq.n	1782e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   17876:	4620      	mov	r0, r4
   17878:	f009 fb63 	bl	20f42 <bt_le_conn_params_valid>
   1787c:	2800      	cmp	r0, #0
   1787e:	d1e4      	bne.n	1784a <le_param_req+0x2e>
   17880:	e7d5      	b.n	1782e <le_param_req+0x12>
   17882:	bf00      	nop
   17884:	20002594 	.word	0x20002594
   17888:	00023510 	.word	0x00023510
   1788c:	00023510 	.word	0x00023510

00017890 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   17890:	b570      	push	{r4, r5, r6, lr}
   17892:	4606      	mov	r6, r0
   17894:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   17896:	4809      	ldr	r0, [pc, #36]	; (178bc <bt_conn_add_le+0x2c>)
   17898:	2101      	movs	r1, #1
   1789a:	f7ff fca1 	bl	171e0 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   1789e:	4604      	mov	r4, r0
   178a0:	b150      	cbz	r0, 178b8 <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
   178a2:	7206      	strb	r6, [r0, #8]
   178a4:	2207      	movs	r2, #7
   178a6:	4629      	mov	r1, r5
   178a8:	3088      	adds	r0, #136	; 0x88
   178aa:	f009 fa76 	bl	20d9a <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   178ae:	2301      	movs	r3, #1
   178b0:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   178b2:	4b03      	ldr	r3, [pc, #12]	; (178c0 <bt_conn_add_le+0x30>)
   178b4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   178b8:	4620      	mov	r0, r4
   178ba:	bd70      	pop	{r4, r5, r6, pc}
   178bc:	20001910 	.word	0x20001910
   178c0:	00280018 	.word	0x00280018

000178c4 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   178c4:	b570      	push	{r4, r5, r6, lr}
   178c6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   178c8:	480d      	ldr	r0, [pc, #52]	; (17900 <bt_conn_lookup_addr_le+0x3c>)
{
   178ca:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   178cc:	f009 fc5e 	bl	2118c <bt_conn_ref>

		if (!conn) {
   178d0:	4604      	mov	r4, r0
   178d2:	b130      	cbz	r0, 178e2 <bt_conn_lookup_addr_le+0x1e>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   178d4:	7883      	ldrb	r3, [r0, #2]
   178d6:	2b01      	cmp	r3, #1
   178d8:	d005      	beq.n	178e6 <bt_conn_lookup_addr_le+0x22>
	old = atomic_dec(&conn->ref);
   178da:	30b8      	adds	r0, #184	; 0xb8
   178dc:	f009 fbfc 	bl	210d8 <atomic_dec>
		}

		return conn;
	}

	return NULL;
   178e0:	2400      	movs	r4, #0
}
   178e2:	4620      	mov	r0, r4
   178e4:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   178e6:	4629      	mov	r1, r5
   178e8:	4632      	mov	r2, r6
   178ea:	f009 fc98 	bl	2121e <bt_conn_is_peer_addr_le>
   178ee:	4605      	mov	r5, r0
   178f0:	2800      	cmp	r0, #0
   178f2:	d1f6      	bne.n	178e2 <bt_conn_lookup_addr_le+0x1e>
	old = atomic_dec(&conn->ref);
   178f4:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   178f8:	f009 fbee 	bl	210d8 <atomic_dec>
	return NULL;
   178fc:	462c      	mov	r4, r5
			continue;
   178fe:	e7f0      	b.n	178e2 <bt_conn_lookup_addr_le+0x1e>
   17900:	20001910 	.word	0x20001910

00017904 <bt_conn_exists_le>:
{
   17904:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   17906:	f7ff ffdd 	bl	178c4 <bt_conn_lookup_addr_le>
	if (conn) {
   1790a:	4604      	mov	r4, r0
   1790c:	b1c8      	cbz	r0, 17942 <bt_conn_exists_le+0x3e>
		BT_WARN("Found valid connection in %s state",
   1790e:	4b0d      	ldr	r3, [pc, #52]	; (17944 <bt_conn_exists_le+0x40>)
   17910:	681a      	ldr	r2, [r3, #0]
   17912:	f012 0f06 	tst.w	r2, #6
   17916:	d00f      	beq.n	17938 <bt_conn_exists_le+0x34>
   17918:	4a0b      	ldr	r2, [pc, #44]	; (17948 <bt_conn_exists_le+0x44>)
   1791a:	1a9a      	subs	r2, r3, r2
   1791c:	7a83      	ldrb	r3, [r0, #10]
   1791e:	480b      	ldr	r0, [pc, #44]	; (1794c <bt_conn_exists_le+0x48>)
   17920:	2b08      	cmp	r3, #8
   17922:	bf96      	itet	ls
   17924:	490a      	ldrls	r1, [pc, #40]	; (17950 <bt_conn_exists_le+0x4c>)
   17926:	490b      	ldrhi	r1, [pc, #44]	; (17954 <bt_conn_exists_le+0x50>)
   17928:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
   1792c:	0892      	lsrs	r2, r2, #2
   1792e:	0192      	lsls	r2, r2, #6
   17930:	f042 0202 	orr.w	r2, r2, #2
   17934:	f007 fb0c 	bl	1ef50 <log_1>
	old = atomic_dec(&conn->ref);
   17938:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   1793c:	f009 fbcc 	bl	210d8 <atomic_dec>
		return true;
   17940:	2001      	movs	r0, #1
}
   17942:	bd10      	pop	{r4, pc}
   17944:	2000065c 	.word	0x2000065c
   17948:	20000654 	.word	0x20000654
   1794c:	0002660d 	.word	0x0002660d
   17950:	00023ffc 	.word	0x00023ffc
   17954:	00026596 	.word	0x00026596

00017958 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   17958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1795a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1795c:	480f      	ldr	r0, [pc, #60]	; (1799c <bt_conn_lookup_state_le+0x44>)
{
   1795e:	460e      	mov	r6, r1
   17960:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17962:	f009 fc13 	bl	2118c <bt_conn_ref>

		if (!conn) {
   17966:	4604      	mov	r4, r0
   17968:	b1a8      	cbz	r0, 17996 <bt_conn_lookup_state_le+0x3e>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1796a:	7883      	ldrb	r3, [r0, #2]
   1796c:	2b01      	cmp	r3, #1
   1796e:	d005      	beq.n	1797c <bt_conn_lookup_state_le+0x24>
	old = atomic_dec(&conn->ref);
   17970:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   17974:	f009 fbb0 	bl	210d8 <atomic_dec>
		}

		return conn;
	}

	return NULL;
   17978:	2400      	movs	r4, #0
			continue;
   1797a:	e00c      	b.n	17996 <bt_conn_lookup_state_le+0x3e>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   1797c:	b12e      	cbz	r6, 1798a <bt_conn_lookup_state_le+0x32>
   1797e:	4632      	mov	r2, r6
   17980:	4629      	mov	r1, r5
   17982:	f009 fc4c 	bl	2121e <bt_conn_is_peer_addr_le>
   17986:	2800      	cmp	r0, #0
   17988:	d0f2      	beq.n	17970 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   1798a:	7aa3      	ldrb	r3, [r4, #10]
   1798c:	42bb      	cmp	r3, r7
   1798e:	d1ef      	bne.n	17970 <bt_conn_lookup_state_le+0x18>
   17990:	7a23      	ldrb	r3, [r4, #8]
   17992:	42ab      	cmp	r3, r5
   17994:	d1ec      	bne.n	17970 <bt_conn_lookup_state_le+0x18>
}
   17996:	4620      	mov	r0, r4
   17998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1799a:	bf00      	nop
   1799c:	20001910 	.word	0x20001910

000179a0 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   179a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   179a4:	4604      	mov	r4, r0
   179a6:	4845      	ldr	r0, [pc, #276]	; (17abc <bt_conn_le_create+0x11c>)
   179a8:	460e      	mov	r6, r1
   179aa:	4615      	mov	r5, r2
   179ac:	461f      	mov	r7, r3
   179ae:	f009 fb8d 	bl	210cc <atomic_get>
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   179b2:	0781      	lsls	r1, r0, #30
   179b4:	d405      	bmi.n	179c2 <bt_conn_le_create+0x22>
		return -EAGAIN;
   179b6:	f06f 050a 	mvn.w	r5, #10
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   179ba:	4628      	mov	r0, r5
   179bc:	b002      	add	sp, #8
   179be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_le_conn_params_valid(conn_param)) {
   179c2:	4610      	mov	r0, r2
   179c4:	f009 fabd 	bl	20f42 <bt_le_conn_params_valid>
   179c8:	b910      	cbnz	r0, 179d0 <bt_conn_le_create+0x30>
		return -EINVAL;
   179ca:	f06f 0515 	mvn.w	r5, #21
   179ce:	e7f4      	b.n	179ba <bt_conn_le_create+0x1a>
   179d0:	483a      	ldr	r0, [pc, #232]	; (17abc <bt_conn_le_create+0x11c>)
   179d2:	f009 fb7b 	bl	210cc <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   179d6:	0642      	lsls	r2, r0, #25
   179d8:	d4ed      	bmi.n	179b6 <bt_conn_le_create+0x16>
   179da:	4838      	ldr	r0, [pc, #224]	; (17abc <bt_conn_le_create+0x11c>)
   179dc:	f009 fb76 	bl	210cc <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   179e0:	0503      	lsls	r3, r0, #20
   179e2:	f3c0 28c0 	ubfx	r8, r0, #11, #1
   179e6:	d462      	bmi.n	17aae <bt_conn_le_create+0x10e>
	if (!bt_id_scan_random_addr_check()) {
   179e8:	f009 fb5f 	bl	210aa <bt_id_scan_random_addr_check>
   179ec:	2800      	cmp	r0, #0
   179ee:	d0ec      	beq.n	179ca <bt_conn_le_create+0x2a>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   179f0:	4621      	mov	r1, r4
   179f2:	4640      	mov	r0, r8
   179f4:	f7ff ff86 	bl	17904 <bt_conn_exists_le>
   179f8:	2800      	cmp	r0, #0
   179fa:	d1e6      	bne.n	179ca <bt_conn_le_create+0x2a>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   179fc:	7823      	ldrb	r3, [r4, #0]
   179fe:	3b02      	subs	r3, #2
   17a00:	2b01      	cmp	r3, #1
   17a02:	d849      	bhi.n	17a98 <bt_conn_le_create+0xf8>
   17a04:	2207      	movs	r2, #7
   17a06:	4621      	mov	r1, r4
   17a08:	4668      	mov	r0, sp
   17a0a:	f009 f9c6 	bl	20d9a <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   17a0e:	f89d 3000 	ldrb.w	r3, [sp]
   17a12:	3b02      	subs	r3, #2
   17a14:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   17a18:	4669      	mov	r1, sp
   17a1a:	2000      	movs	r0, #0
   17a1c:	f7ff ff38 	bl	17890 <bt_conn_add_le>
	if (!conn) {
   17a20:	4604      	mov	r4, r0
   17a22:	2800      	cmp	r0, #0
   17a24:	d046      	beq.n	17ab4 <bt_conn_le_create+0x114>
	conn->le.interval_min = param->interval_min;
   17a26:	882b      	ldrh	r3, [r5, #0]
   17a28:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   17a2c:	886b      	ldrh	r3, [r5, #2]
   17a2e:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   17a32:	88ab      	ldrh	r3, [r5, #4]
   17a34:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   17a38:	88eb      	ldrh	r3, [r5, #6]
   17a3a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
   17a3e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   17a42:	4d1f      	ldr	r5, [pc, #124]	; (17ac0 <bt_conn_le_create+0x120>)
   17a44:	f105 0c08 	add.w	ip, r5, #8
   17a48:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   17a4c:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   17a4e:	2b00      	cmp	r3, #0
   17a50:	bf08      	it	eq
   17a52:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   17a56:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   17a58:	8a2b      	ldrh	r3, [r5, #16]
   17a5a:	462a      	mov	r2, r5
	bt_dev.create_param.interval_coded =
   17a5c:	b903      	cbnz	r3, 17a60 <bt_conn_le_create+0xc0>
   17a5e:	89ab      	ldrh	r3, [r5, #12]
   17a60:	8213      	strh	r3, [r2, #16]
		(bt_dev.create_param.window_coded != 0) ?
   17a62:	8a53      	ldrh	r3, [r2, #18]
	bt_dev.create_param.window_coded =
   17a64:	b903      	cbnz	r3, 17a68 <bt_conn_le_create+0xc8>
   17a66:	89d3      	ldrh	r3, [r2, #14]
   17a68:	8253      	strh	r3, [r2, #18]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   17a6a:	2106      	movs	r1, #6
   17a6c:	4620      	mov	r0, r4
   17a6e:	f7ff fd45 	bl	174fc <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   17a72:	4620      	mov	r0, r4
   17a74:	f009 fa48 	bl	20f08 <bt_le_create_conn>
	if (err) {
   17a78:	4605      	mov	r5, r0
   17a7a:	b1b0      	cbz	r0, 17aaa <bt_conn_le_create+0x10a>
		conn->err = 0;
   17a7c:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17a7e:	4631      	mov	r1, r6
   17a80:	4620      	mov	r0, r4
		conn->err = 0;
   17a82:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17a84:	f7ff fd3a 	bl	174fc <bt_conn_set_state>
	old = atomic_dec(&conn->ref);
   17a88:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   17a8c:	f009 fb24 	bl	210d8 <atomic_dec>
		bt_le_scan_update(false);
   17a90:	4630      	mov	r0, r6
   17a92:	f7ff f8eb 	bl	16c6c <bt_le_scan_update>
		return err;
   17a96:	e790      	b.n	179ba <bt_conn_le_create+0x1a>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   17a98:	4621      	mov	r1, r4
   17a9a:	f009 faf2 	bl	21082 <bt_lookup_id_addr>
   17a9e:	2207      	movs	r2, #7
   17aa0:	4601      	mov	r1, r0
   17aa2:	4668      	mov	r0, sp
   17aa4:	f009 f979 	bl	20d9a <memcpy>
}
   17aa8:	e7b6      	b.n	17a18 <bt_conn_le_create+0x78>
	*ret_conn = conn;
   17aaa:	603c      	str	r4, [r7, #0]
	return 0;
   17aac:	e785      	b.n	179ba <bt_conn_le_create+0x1a>
		return -EALREADY;
   17aae:	f06f 0577 	mvn.w	r5, #119	; 0x77
   17ab2:	e782      	b.n	179ba <bt_conn_le_create+0x1a>
		return -ENOMEM;
   17ab4:	f06f 050b 	mvn.w	r5, #11
   17ab8:	e77f      	b.n	179ba <bt_conn_le_create+0x1a>
   17aba:	bf00      	nop
   17abc:	20000374 	.word	0x20000374
   17ac0:	200002a8 	.word	0x200002a8

00017ac4 <send_conn_le_param_update>:
{
   17ac4:	b538      	push	{r3, r4, r5, lr}
   17ac6:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   17ac8:	4608      	mov	r0, r1
{
   17aca:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   17acc:	f009 fa39 	bl	20f42 <bt_le_conn_params_valid>
   17ad0:	b338      	cbz	r0, 17b22 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   17ad2:	4b15      	ldr	r3, [pc, #84]	; (17b28 <send_conn_le_param_update+0x64>)
   17ad4:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   17ad8:	0799      	lsls	r1, r3, #30
   17ada:	d407      	bmi.n	17aec <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   17adc:	78e3      	ldrb	r3, [r4, #3]
   17ade:	b173      	cbz	r3, 17afe <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   17ae0:	4629      	mov	r1, r5
   17ae2:	4620      	mov	r0, r4
}
   17ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   17ae8:	f000 bb2a 	b.w	18140 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   17aec:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   17af0:	079a      	lsls	r2, r3, #30
   17af2:	d5f3      	bpl.n	17adc <send_conn_le_param_update+0x18>
   17af4:	1d20      	adds	r0, r4, #4
   17af6:	f009 fae9 	bl	210cc <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   17afa:	0543      	lsls	r3, r0, #21
   17afc:	d4ee      	bmi.n	17adc <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   17afe:	4629      	mov	r1, r5
   17b00:	4620      	mov	r0, r4
   17b02:	f009 fbac 	bl	2125e <bt_conn_le_conn_update>
		if (rc == 0) {
   17b06:	b958      	cbnz	r0, 17b20 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   17b08:	882b      	ldrh	r3, [r5, #0]
   17b0a:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   17b0e:	886b      	ldrh	r3, [r5, #2]
   17b10:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   17b14:	88ab      	ldrh	r3, [r5, #4]
   17b16:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   17b1a:	88eb      	ldrh	r3, [r5, #6]
   17b1c:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   17b20:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   17b22:	f06f 0015 	mvn.w	r0, #21
   17b26:	e7fb      	b.n	17b20 <send_conn_le_param_update+0x5c>
   17b28:	200002a8 	.word	0x200002a8

00017b2c <deferred_work>:
{
   17b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   17b2e:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   17b32:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   17b34:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   17b38:	b9fb      	cbnz	r3, 17b7a <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
   17b3a:	4630      	mov	r0, r6
   17b3c:	f009 fbf2 	bl	21324 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   17b40:	4b25      	ldr	r3, [pc, #148]	; (17bd8 <deferred_work+0xac>)
   17b42:	681d      	ldr	r5, [r3, #0]
   17b44:	b94d      	cbnz	r5, 17b5a <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17b46:	4d25      	ldr	r5, [pc, #148]	; (17bdc <deferred_work+0xb0>)
   17b48:	4f25      	ldr	r7, [pc, #148]	; (17be0 <deferred_work+0xb4>)
   17b4a:	42bd      	cmp	r5, r7
   17b4c:	d30d      	bcc.n	17b6a <deferred_work+0x3e>
	old = atomic_dec(&conn->ref);
   17b4e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   17b52:	f009 fac1 	bl	210d8 <atomic_dec>
}
   17b56:	b003      	add	sp, #12
   17b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (cb->disconnected) {
   17b5a:	686b      	ldr	r3, [r5, #4]
   17b5c:	b11b      	cbz	r3, 17b66 <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
   17b5e:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   17b62:	4630      	mov	r0, r6
   17b64:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   17b66:	692d      	ldr	r5, [r5, #16]
   17b68:	e7ec      	b.n	17b44 <deferred_work+0x18>
		if (cb->disconnected) {
   17b6a:	686b      	ldr	r3, [r5, #4]
   17b6c:	b11b      	cbz	r3, 17b76 <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
   17b6e:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   17b72:	4630      	mov	r0, r6
   17b74:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17b76:	3514      	adds	r5, #20
   17b78:	e7e7      	b.n	17b4a <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
   17b7a:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   17b7e:	2b01      	cmp	r3, #1
   17b80:	d1e9      	bne.n	17b56 <deferred_work+0x2a>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   17b82:	f810 3c55 	ldrb.w	r3, [r0, #-85]
   17b86:	b913      	cbnz	r3, 17b8e <deferred_work+0x62>
		bt_le_create_conn_cancel();
   17b88:	f7fe f830 	bl	15bec <bt_le_create_conn_cancel>
		return;
   17b8c:	e7e3      	b.n	17b56 <deferred_work+0x2a>
	if (atomic_test_and_clear_bit(conn->flags,
   17b8e:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
   17b92:	f3bf 8f5b 	dmb	ish
   17b96:	e855 3f00 	ldrex	r3, [r5]
   17b9a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   17b9e:	e845 2100 	strex	r1, r2, [r5]
   17ba2:	2900      	cmp	r1, #0
   17ba4:	d1f7      	bne.n	17b96 <deferred_work+0x6a>
   17ba6:	f3bf 8f5b 	dmb	ish
   17baa:	059b      	lsls	r3, r3, #22
   17bac:	d507      	bpl.n	17bbe <deferred_work+0x92>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   17bae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   17bb0:	9300      	str	r3, [sp, #0]
		send_conn_le_param_update(conn, param);
   17bb2:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   17bb4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   17bb6:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   17bb8:	4630      	mov	r0, r6
   17bba:	f7ff ff83 	bl	17ac4 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17bbe:	f3bf 8f5b 	dmb	ish
   17bc2:	e855 3f00 	ldrex	r3, [r5]
   17bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   17bca:	e845 3200 	strex	r2, r3, [r5]
   17bce:	2a00      	cmp	r2, #0
   17bd0:	d1f7      	bne.n	17bc2 <deferred_work+0x96>
   17bd2:	f3bf 8f5b 	dmb	ish
   17bd6:	e7be      	b.n	17b56 <deferred_work+0x2a>
   17bd8:	20002594 	.word	0x20002594
   17bdc:	00023510 	.word	0x00023510
   17be0:	00023510 	.word	0x00023510

00017be4 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   17be4:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   17be6:	4801      	ldr	r0, [pc, #4]	; (17bec <bt_conn_create_frag_timeout+0x8>)
   17be8:	f7ff bda8 	b.w	1773c <bt_conn_create_pdu_timeout>
   17bec:	20000834 	.word	0x20000834

00017bf0 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   17bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17bf4:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   17bf6:	f04f 33ff 	mov.w	r3, #4294967295
   17bfa:	f04f 32ff 	mov.w	r2, #4294967295
   17bfe:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   17c00:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   17c02:	f7ff ffef 	bl	17be4 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   17c06:	7833      	ldrb	r3, [r6, #0]
   17c08:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   17c0a:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   17c0c:	f04f 0600 	mov.w	r6, #0
   17c10:	d005      	beq.n	17c1e <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   17c12:	f002 f967 	bl	19ee4 <net_buf_unref>
		return NULL;
   17c16:	4635      	mov	r5, r6
}
   17c18:	4628      	mov	r0, r5
   17c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   17c1e:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   17c20:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   17c24:	4e0c      	ldr	r6, [pc, #48]	; (17c58 <create_frag.isra.0+0x68>)
   17c26:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   17c28:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   17c2c:	f00a fab0 	bl	22190 <net_buf_simple_tailroom>
   17c30:	4580      	cmp	r8, r0
   17c32:	d20c      	bcs.n	17c4e <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   17c34:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17c38:	f854 1f08 	ldr.w	r1, [r4, #8]!
   17c3c:	4632      	mov	r2, r6
   17c3e:	4638      	mov	r0, r7
   17c40:	f00a fa71 	bl	22126 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   17c44:	4631      	mov	r1, r6
   17c46:	4620      	mov	r0, r4
   17c48:	f00a fa7e 	bl	22148 <net_buf_simple_pull>
   17c4c:	e7e4      	b.n	17c18 <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
   17c4e:	4638      	mov	r0, r7
   17c50:	f00a fa9e 	bl	22190 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   17c54:	b286      	uxth	r6, r0
   17c56:	e7ef      	b.n	17c38 <create_frag.isra.0+0x48>
   17c58:	200002a8 	.word	0x200002a8

00017c5c <bt_conn_process_tx>:
{
   17c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   17c5e:	7a83      	ldrb	r3, [r0, #10]
{
   17c60:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   17c62:	b993      	cbnz	r3, 17c8a <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17c64:	f3bf 8f5b 	dmb	ish
   17c68:	1d03      	adds	r3, r0, #4
   17c6a:	e853 2f00 	ldrex	r2, [r3]
   17c6e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   17c72:	e843 1400 	strex	r4, r1, [r3]
   17c76:	2c00      	cmp	r4, #0
   17c78:	d1f7      	bne.n	17c6a <bt_conn_process_tx+0xe>
   17c7a:	f3bf 8f5b 	dmb	ish
   17c7e:	0653      	lsls	r3, r2, #25
   17c80:	d503      	bpl.n	17c8a <bt_conn_process_tx+0x2e>
}
   17c82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   17c86:	f009 ba63 	b.w	21150 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   17c8a:	2200      	movs	r2, #0
   17c8c:	2300      	movs	r3, #0
   17c8e:	f105 0038 	add.w	r0, r5, #56	; 0x38
   17c92:	f00a f9f1 	bl	22078 <net_buf_get>
	BT_ASSERT(buf);
   17c96:	4604      	mov	r4, r0
   17c98:	b960      	cbnz	r0, 17cb4 <bt_conn_process_tx+0x58>
   17c9a:	4a20      	ldr	r2, [pc, #128]	; (17d1c <bt_conn_process_tx+0xc0>)
   17c9c:	4920      	ldr	r1, [pc, #128]	; (17d20 <bt_conn_process_tx+0xc4>)
   17c9e:	4821      	ldr	r0, [pc, #132]	; (17d24 <bt_conn_process_tx+0xc8>)
   17ca0:	f240 23e7 	movw	r3, #743	; 0x2e7
   17ca4:	f006 fc15 	bl	1e4d2 <printk>
   17ca8:	4040      	eors	r0, r0
   17caa:	f380 8811 	msr	BASEPRI, r0
   17cae:	f04f 0003 	mov.w	r0, #3
   17cb2:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   17cb4:	4f1c      	ldr	r7, [pc, #112]	; (17d28 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   17cb6:	89a1      	ldrh	r1, [r4, #12]
   17cb8:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
   17cbc:	4291      	cmp	r1, r2
   17cbe:	d807      	bhi.n	17cd0 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   17cc0:	2300      	movs	r3, #0
   17cc2:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   17cc4:	4621      	mov	r1, r4
   17cc6:	4628      	mov	r0, r5
   17cc8:	f7ff f9e8 	bl	1709c <send_frag>
	if (!send_buf(conn, buf)) {
   17ccc:	b140      	cbz	r0, 17ce0 <bt_conn_process_tx+0x84>
}
   17cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   17cd0:	f105 060a 	add.w	r6, r5, #10
   17cd4:	4621      	mov	r1, r4
   17cd6:	4630      	mov	r0, r6
   17cd8:	f7ff ff8a 	bl	17bf0 <create_frag.isra.0>
	if (!frag) {
   17cdc:	4601      	mov	r1, r0
   17cde:	b920      	cbnz	r0, 17cea <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
   17ce0:	4620      	mov	r0, r4
}
   17ce2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   17ce6:	f002 b8fd 	b.w	19ee4 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   17cea:	2301      	movs	r3, #1
   17cec:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   17cee:	4628      	mov	r0, r5
   17cf0:	f7ff f9d4 	bl	1709c <send_frag>
   17cf4:	2800      	cmp	r0, #0
   17cf6:	d0f3      	beq.n	17ce0 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
   17cf8:	89a2      	ldrh	r2, [r4, #12]
   17cfa:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
   17cfe:	429a      	cmp	r2, r3
   17d00:	d802      	bhi.n	17d08 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   17d02:	2300      	movs	r3, #0
   17d04:	2203      	movs	r2, #3
   17d06:	e7dd      	b.n	17cc4 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   17d08:	4621      	mov	r1, r4
   17d0a:	4630      	mov	r0, r6
   17d0c:	f7ff ff70 	bl	17bf0 <create_frag.isra.0>
		if (!frag) {
   17d10:	4601      	mov	r1, r0
   17d12:	2800      	cmp	r0, #0
   17d14:	d0e4      	beq.n	17ce0 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   17d16:	2301      	movs	r3, #1
   17d18:	461a      	mov	r2, r3
   17d1a:	e7e8      	b.n	17cee <bt_conn_process_tx+0x92>
   17d1c:	00026630 	.word	0x00026630
   17d20:	00025e47 	.word	0x00025e47
   17d24:	00025f6e 	.word	0x00025f6e
   17d28:	200002a8 	.word	0x200002a8

00017d2c <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   17d2c:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   17d2e:	4914      	ldr	r1, [pc, #80]	; (17d80 <bt_conn_init+0x54>)
   17d30:	4814      	ldr	r0, [pc, #80]	; (17d84 <bt_conn_init+0x58>)
   17d32:	f00a fe71 	bl	22a18 <k_queue_append>
   17d36:	4914      	ldr	r1, [pc, #80]	; (17d88 <bt_conn_init+0x5c>)
   17d38:	4812      	ldr	r0, [pc, #72]	; (17d84 <bt_conn_init+0x58>)
   17d3a:	f00a fe6d 	bl	22a18 <k_queue_append>
   17d3e:	4913      	ldr	r1, [pc, #76]	; (17d8c <bt_conn_init+0x60>)
   17d40:	4810      	ldr	r0, [pc, #64]	; (17d84 <bt_conn_init+0x58>)
   17d42:	f00a fe69 	bl	22a18 <k_queue_append>
	}

	bt_att_init();
   17d46:	f009 feac 	bl	21aa2 <bt_att_init>

	err = bt_smp_init();
   17d4a:	f00a f98d 	bl	22068 <bt_smp_init>
	if (err) {
   17d4e:	4605      	mov	r5, r0
   17d50:	b9a0      	cbnz	r0, 17d7c <bt_conn_init+0x50>
		return err;
	}

	bt_l2cap_init();
   17d52:	f009 fb57 	bl	21404 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17d56:	480e      	ldr	r0, [pc, #56]	; (17d90 <bt_conn_init+0x64>)
   17d58:	f009 fa18 	bl	2118c <bt_conn_ref>

			if (!conn) {
   17d5c:	4604      	mov	r4, r0
   17d5e:	b168      	cbz	r0, 17d7c <bt_conn_init+0x50>
   17d60:	3004      	adds	r0, #4
   17d62:	f009 f9b3 	bl	210cc <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
   17d66:	07c3      	lsls	r3, r0, #31
   17d68:	d504      	bpl.n	17d74 <bt_conn_init+0x48>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
   17d6a:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   17d6c:	2102      	movs	r1, #2
   17d6e:	4620      	mov	r0, r4
   17d70:	f7ff fbc4 	bl	174fc <bt_conn_set_state>
	old = atomic_dec(&conn->ref);
   17d74:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   17d78:	f009 f9ae 	bl	210d8 <atomic_dec>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   17d7c:	4628      	mov	r0, r5
   17d7e:	bd38      	pop	{r3, r4, r5, pc}
   17d80:	20002598 	.word	0x20002598
   17d84:	200007c4 	.word	0x200007c4
   17d88:	200025a8 	.word	0x200025a8
   17d8c:	200025b8 	.word	0x200025b8
   17d90:	20001910 	.word	0x20001910

00017d94 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   17d94:	4a0c      	ldr	r2, [pc, #48]	; (17dc8 <l2cap_accept+0x34>)
{
   17d96:	b508      	push	{r3, lr}
   17d98:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
   17d9a:	6810      	ldr	r0, [r2, #0]
   17d9c:	b918      	cbnz	r0, 17da6 <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   17d9e:	4b0b      	ldr	r3, [pc, #44]	; (17dcc <l2cap_accept+0x38>)
   17da0:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
   17da2:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   17da4:	bd08      	pop	{r3, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
   17da6:	4a0a      	ldr	r2, [pc, #40]	; (17dd0 <l2cap_accept+0x3c>)
   17da8:	6811      	ldr	r1, [r2, #0]
   17daa:	0749      	lsls	r1, r1, #29
   17dac:	d009      	beq.n	17dc2 <l2cap_accept+0x2e>
   17dae:	4909      	ldr	r1, [pc, #36]	; (17dd4 <l2cap_accept+0x40>)
   17db0:	4809      	ldr	r0, [pc, #36]	; (17dd8 <l2cap_accept+0x44>)
   17db2:	1a52      	subs	r2, r2, r1
   17db4:	0892      	lsrs	r2, r2, #2
   17db6:	0192      	lsls	r2, r2, #6
   17db8:	f042 0201 	orr.w	r2, r2, #1
   17dbc:	4619      	mov	r1, r3
   17dbe:	f007 f8c7 	bl	1ef50 <log_1>
   17dc2:	f06f 000b 	mvn.w	r0, #11
   17dc6:	e7ed      	b.n	17da4 <l2cap_accept+0x10>
   17dc8:	200019d0 	.word	0x200019d0
   17dcc:	00024040 	.word	0x00024040
   17dd0:	2000066c 	.word	0x2000066c
   17dd4:	20000654 	.word	0x20000654
   17dd8:	000266bd 	.word	0x000266bd

00017ddc <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   17ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17dde:	4605      	mov	r5, r0
   17de0:	460f      	mov	r7, r1
   17de2:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   17de4:	2300      	movs	r3, #0
   17de6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   17dea:	2104      	movs	r1, #4
   17dec:	2000      	movs	r0, #0
   17dee:	f7ff fca5 	bl	1773c <bt_conn_create_pdu_timeout>
	if (!buf) {
   17df2:	4604      	mov	r4, r0
   17df4:	b978      	cbnz	r0, 17e16 <l2cap_create_le_sig_pdu.isra.0+0x3a>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   17df6:	4a0c      	ldr	r2, [pc, #48]	; (17e28 <l2cap_create_le_sig_pdu.isra.0+0x4c>)
   17df8:	6813      	ldr	r3, [r2, #0]
   17dfa:	075b      	lsls	r3, r3, #29
   17dfc:	d009      	beq.n	17e12 <l2cap_create_le_sig_pdu.isra.0+0x36>
   17dfe:	4b0b      	ldr	r3, [pc, #44]	; (17e2c <l2cap_create_le_sig_pdu.isra.0+0x50>)
   17e00:	480b      	ldr	r0, [pc, #44]	; (17e30 <l2cap_create_le_sig_pdu.isra.0+0x54>)
   17e02:	1ad2      	subs	r2, r2, r3
   17e04:	0892      	lsrs	r2, r2, #2
   17e06:	0192      	lsls	r2, r2, #6
   17e08:	f042 0201 	orr.w	r2, r2, #1
   17e0c:	4629      	mov	r1, r5
   17e0e:	f007 f89f 	bl	1ef50 <log_1>
}
   17e12:	4620      	mov	r0, r4
   17e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   17e16:	2104      	movs	r1, #4
   17e18:	3008      	adds	r0, #8
   17e1a:	f00a f97e 	bl	2211a <net_buf_simple_add>
	hdr->code = code;
   17e1e:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   17e20:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   17e22:	8046      	strh	r6, [r0, #2]
	return buf;
   17e24:	e7f5      	b.n	17e12 <l2cap_create_le_sig_pdu.isra.0+0x36>
   17e26:	bf00      	nop
   17e28:	2000066c 	.word	0x2000066c
   17e2c:	20000654 	.word	0x20000654
   17e30:	000266e4 	.word	0x000266e4

00017e34 <l2cap_rtx_timeout>:
	BT_ERR("chan %p timeout", chan);
   17e34:	4a0d      	ldr	r2, [pc, #52]	; (17e6c <l2cap_rtx_timeout+0x38>)
{
   17e36:	b538      	push	{r3, r4, r5, lr}
	BT_ERR("chan %p timeout", chan);
   17e38:	6813      	ldr	r3, [r2, #0]
	struct bt_conn *conn = chan->chan.conn;
   17e3a:	4604      	mov	r4, r0
	BT_ERR("chan %p timeout", chan);
   17e3c:	075b      	lsls	r3, r3, #29
	struct bt_conn *conn = chan->chan.conn;
   17e3e:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   17e42:	d009      	beq.n	17e58 <l2cap_rtx_timeout+0x24>
   17e44:	4b0a      	ldr	r3, [pc, #40]	; (17e70 <l2cap_rtx_timeout+0x3c>)
   17e46:	480b      	ldr	r0, [pc, #44]	; (17e74 <l2cap_rtx_timeout+0x40>)
   17e48:	1ad2      	subs	r2, r2, r3
   17e4a:	0892      	lsrs	r2, r2, #2
   17e4c:	0192      	lsls	r2, r2, #6
   17e4e:	f042 0201 	orr.w	r2, r2, #1
   17e52:	4621      	mov	r1, r4
   17e54:	f007 f87c 	bl	1ef50 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
   17e58:	4628      	mov	r0, r5
   17e5a:	4621      	mov	r1, r4
   17e5c:	f009 fa2b 	bl	212b6 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   17e60:	4620      	mov	r0, r4
}
   17e62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   17e66:	f009 ba48 	b.w	212fa <bt_l2cap_chan_del>
   17e6a:	bf00      	nop
   17e6c:	2000066c 	.word	0x2000066c
   17e70:	20000654 	.word	0x20000654
   17e74:	0002670c 	.word	0x0002670c

00017e78 <bt_l2cap_connected>:
{
   17e78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   17e7c:	4e29      	ldr	r6, [pc, #164]	; (17f24 <bt_l2cap_connected+0xac>)
   17e7e:	4f2a      	ldr	r7, [pc, #168]	; (17f28 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   17e80:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 17f2c <bt_l2cap_connected+0xb4>
{
   17e84:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   17e86:	42be      	cmp	r6, r7
   17e88:	d302      	bcc.n	17e90 <bt_l2cap_connected+0x18>
}
   17e8a:	b003      	add	sp, #12
   17e8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   17e90:	6873      	ldr	r3, [r6, #4]
   17e92:	a901      	add	r1, sp, #4
   17e94:	4620      	mov	r0, r4
   17e96:	4798      	blx	r3
   17e98:	2800      	cmp	r0, #0
   17e9a:	db3d      	blt.n	17f18 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   17e9c:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   17e9e:	8833      	ldrh	r3, [r6, #0]
   17ea0:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   17ea4:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   17ea8:	4641      	mov	r1, r8
   17eaa:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   17eae:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   17eb2:	f00a fe9f 	bl	22bf4 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17eb6:	f3bf 8f5b 	dmb	ish
   17eba:	f105 0368 	add.w	r3, r5, #104	; 0x68
   17ebe:	2200      	movs	r2, #0
   17ec0:	e853 1f00 	ldrex	r1, [r3]
   17ec4:	e843 2000 	strex	r0, r2, [r3]
   17ec8:	2800      	cmp	r0, #0
   17eca:	d1f9      	bne.n	17ec0 <bt_l2cap_connected+0x48>
   17ecc:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   17ed0:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   17ed2:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   17ed4:	f105 0308 	add.w	r3, r5, #8
   17ed8:	bb02      	cbnz	r2, 17f1c <bt_l2cap_connected+0xa4>
	list->head = node;
   17eda:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
   17ede:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   17ee0:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   17ee2:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   17ee4:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   17ee8:	681b      	ldr	r3, [r3, #0]
   17eea:	b103      	cbz	r3, 17eee <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   17eec:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17eee:	9b01      	ldr	r3, [sp, #4]
   17ef0:	f3bf 8f5b 	dmb	ish
   17ef4:	3368      	adds	r3, #104	; 0x68
   17ef6:	e853 2f00 	ldrex	r2, [r3]
   17efa:	f042 0201 	orr.w	r2, r2, #1
   17efe:	e843 2100 	strex	r1, r2, [r3]
   17f02:	2900      	cmp	r1, #0
   17f04:	d1f7      	bne.n	17ef6 <bt_l2cap_connected+0x7e>
   17f06:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   17f0a:	9801      	ldr	r0, [sp, #4]
   17f0c:	6843      	ldr	r3, [r0, #4]
   17f0e:	699b      	ldr	r3, [r3, #24]
   17f10:	b113      	cbz	r3, 17f18 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   17f12:	f100 0168 	add.w	r1, r0, #104	; 0x68
   17f16:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   17f18:	360c      	adds	r6, #12
   17f1a:	e7b4      	b.n	17e86 <bt_l2cap_connected+0xe>
	parent->next = child;
   17f1c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   17f1e:	6563      	str	r3, [r4, #84]	; 0x54
}
   17f20:	e7dd      	b.n	17ede <bt_l2cap_connected+0x66>
   17f22:	bf00      	nop
   17f24:	000234ec 	.word	0x000234ec
   17f28:	00023510 	.word	0x00023510
   17f2c:	00017e35 	.word	0x00017e35

00017f30 <l2cap_recv>:
{
   17f30:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   17f32:	898b      	ldrh	r3, [r1, #12]
   17f34:	2b03      	cmp	r3, #3
{
   17f36:	b085      	sub	sp, #20
   17f38:	4606      	mov	r6, r0
   17f3a:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   17f3c:	d80d      	bhi.n	17f5a <l2cap_recv+0x2a>
		BT_ERR("Too small L2CAP signaling PDU");
   17f3e:	4959      	ldr	r1, [pc, #356]	; (180a4 <l2cap_recv+0x174>)
   17f40:	680b      	ldr	r3, [r1, #0]
   17f42:	075d      	lsls	r5, r3, #29
   17f44:	d020      	beq.n	17f88 <l2cap_recv+0x58>
   17f46:	4b58      	ldr	r3, [pc, #352]	; (180a8 <l2cap_recv+0x178>)
   17f48:	4858      	ldr	r0, [pc, #352]	; (180ac <l2cap_recv+0x17c>)
   17f4a:	1ac9      	subs	r1, r1, r3
   17f4c:	0889      	lsrs	r1, r1, #2
   17f4e:	0189      	lsls	r1, r1, #6
   17f50:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
   17f54:	f006 ffef 	bl	1ef36 <log_0>
   17f58:	e016      	b.n	17f88 <l2cap_recv+0x58>
	return net_buf_simple_pull_mem(&buf->b, len);
   17f5a:	2104      	movs	r1, #4
   17f5c:	f105 0008 	add.w	r0, r5, #8
   17f60:	f00a f8fa 	bl	22158 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   17f64:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   17f66:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
   17f68:	428a      	cmp	r2, r1
   17f6a:	4604      	mov	r4, r0
   17f6c:	d00f      	beq.n	17f8e <l2cap_recv+0x5e>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   17f6e:	4b4d      	ldr	r3, [pc, #308]	; (180a4 <l2cap_recv+0x174>)
   17f70:	6818      	ldr	r0, [r3, #0]
   17f72:	0744      	lsls	r4, r0, #29
   17f74:	d008      	beq.n	17f88 <l2cap_recv+0x58>
   17f76:	484c      	ldr	r0, [pc, #304]	; (180a8 <l2cap_recv+0x178>)
   17f78:	1a1b      	subs	r3, r3, r0
   17f7a:	089b      	lsrs	r3, r3, #2
   17f7c:	019b      	lsls	r3, r3, #6
   17f7e:	484c      	ldr	r0, [pc, #304]	; (180b0 <l2cap_recv+0x180>)
   17f80:	f043 0301 	orr.w	r3, r3, #1
   17f84:	f006 fff8 	bl	1ef78 <log_2>
}
   17f88:	2000      	movs	r0, #0
   17f8a:	b005      	add	sp, #20
   17f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   17f8e:	7841      	ldrb	r1, [r0, #1]
   17f90:	b959      	cbnz	r1, 17faa <l2cap_recv+0x7a>
		BT_ERR("Invalid ident value in L2CAP PDU");
   17f92:	4944      	ldr	r1, [pc, #272]	; (180a4 <l2cap_recv+0x174>)
   17f94:	680b      	ldr	r3, [r1, #0]
   17f96:	0758      	lsls	r0, r3, #29
   17f98:	d0f6      	beq.n	17f88 <l2cap_recv+0x58>
   17f9a:	4b43      	ldr	r3, [pc, #268]	; (180a8 <l2cap_recv+0x178>)
   17f9c:	4845      	ldr	r0, [pc, #276]	; (180b4 <l2cap_recv+0x184>)
   17f9e:	1ac9      	subs	r1, r1, r3
   17fa0:	0889      	lsrs	r1, r1, #2
   17fa2:	0189      	lsls	r1, r1, #6
   17fa4:	f041 0101 	orr.w	r1, r1, #1
   17fa8:	e7d4      	b.n	17f54 <l2cap_recv+0x24>
	switch (hdr->code) {
   17faa:	7803      	ldrb	r3, [r0, #0]
   17fac:	2b12      	cmp	r3, #18
   17fae:	d023      	beq.n	17ff8 <l2cap_recv+0xc8>
   17fb0:	2b13      	cmp	r3, #19
   17fb2:	d013      	beq.n	17fdc <l2cap_recv+0xac>
   17fb4:	2b01      	cmp	r3, #1
   17fb6:	d0e7      	beq.n	17f88 <l2cap_recv+0x58>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   17fb8:	4a3a      	ldr	r2, [pc, #232]	; (180a4 <l2cap_recv+0x174>)
   17fba:	6811      	ldr	r1, [r2, #0]
   17fbc:	f011 0f06 	tst.w	r1, #6
   17fc0:	d009      	beq.n	17fd6 <l2cap_recv+0xa6>
   17fc2:	4939      	ldr	r1, [pc, #228]	; (180a8 <l2cap_recv+0x178>)
   17fc4:	483c      	ldr	r0, [pc, #240]	; (180b8 <l2cap_recv+0x188>)
   17fc6:	1a52      	subs	r2, r2, r1
   17fc8:	0892      	lsrs	r2, r2, #2
   17fca:	0192      	lsls	r2, r2, #6
   17fcc:	f042 0202 	orr.w	r2, r2, #2
   17fd0:	4619      	mov	r1, r3
   17fd2:	f006 ffbd 	bl	1ef50 <log_1>
		l2cap_send_reject(chan->conn, hdr->ident,
   17fd6:	7861      	ldrb	r1, [r4, #1]
   17fd8:	6830      	ldr	r0, [r6, #0]
   17fda:	e01f      	b.n	1801c <l2cap_recv+0xec>
	if (buf->len < sizeof(*rsp)) {
   17fdc:	2a01      	cmp	r2, #1
   17fde:	d8d3      	bhi.n	17f88 <l2cap_recv+0x58>
		BT_ERR("Too small LE conn param rsp");
   17fe0:	4930      	ldr	r1, [pc, #192]	; (180a4 <l2cap_recv+0x174>)
   17fe2:	680b      	ldr	r3, [r1, #0]
   17fe4:	075a      	lsls	r2, r3, #29
   17fe6:	d0cf      	beq.n	17f88 <l2cap_recv+0x58>
   17fe8:	4b2f      	ldr	r3, [pc, #188]	; (180a8 <l2cap_recv+0x178>)
   17fea:	4834      	ldr	r0, [pc, #208]	; (180bc <l2cap_recv+0x18c>)
   17fec:	1ac9      	subs	r1, r1, r3
   17fee:	0889      	lsrs	r1, r1, #2
   17ff0:	0189      	lsls	r1, r1, #6
   17ff2:	f041 0101 	orr.w	r1, r1, #1
   17ff6:	e7ad      	b.n	17f54 <l2cap_recv+0x24>
	if (buf->len < sizeof(*req)) {
   17ff8:	2a07      	cmp	r2, #7
   17ffa:	d80b      	bhi.n	18014 <l2cap_recv+0xe4>
		BT_ERR("Too small LE conn update param req");
   17ffc:	4929      	ldr	r1, [pc, #164]	; (180a4 <l2cap_recv+0x174>)
   17ffe:	680b      	ldr	r3, [r1, #0]
   18000:	075b      	lsls	r3, r3, #29
   18002:	d0c1      	beq.n	17f88 <l2cap_recv+0x58>
   18004:	4b28      	ldr	r3, [pc, #160]	; (180a8 <l2cap_recv+0x178>)
   18006:	482e      	ldr	r0, [pc, #184]	; (180c0 <l2cap_recv+0x190>)
   18008:	1ac9      	subs	r1, r1, r3
   1800a:	0889      	lsrs	r1, r1, #2
   1800c:	0189      	lsls	r1, r1, #6
   1800e:	f041 0101 	orr.w	r1, r1, #1
   18012:	e79f      	b.n	17f54 <l2cap_recv+0x24>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
   18014:	6836      	ldr	r6, [r6, #0]
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   18016:	78f7      	ldrb	r7, [r6, #3]
   18018:	b11f      	cbz	r7, 18022 <l2cap_recv+0xf2>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   1801a:	4630      	mov	r0, r6
		l2cap_send_reject(chan->conn, hdr->ident,
   1801c:	f009 f9b4 	bl	21388 <l2cap_send_reject.constprop.0>
		break;
   18020:	e7b2      	b.n	17f88 <l2cap_recv+0x58>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   18022:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   18024:	7850      	ldrb	r0, [r2, #1]
   18026:	7813      	ldrb	r3, [r2, #0]
   18028:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1802c:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   18030:	78d0      	ldrb	r0, [r2, #3]
   18032:	7893      	ldrb	r3, [r2, #2]
   18034:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   18038:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   1803c:	7950      	ldrb	r0, [r2, #5]
   1803e:	7913      	ldrb	r3, [r2, #4]
   18040:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   18044:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   18048:	7993      	ldrb	r3, [r2, #6]
   1804a:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1804c:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   1804e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   18052:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   18054:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   18058:	f7ff fec0 	bl	17ddc <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1805c:	4604      	mov	r4, r0
   1805e:	2800      	cmp	r0, #0
   18060:	d092      	beq.n	17f88 <l2cap_recv+0x58>
	accepted = le_param_req(conn, &param);
   18062:	a902      	add	r1, sp, #8
   18064:	4630      	mov	r0, r6
   18066:	f7ff fbd9 	bl	1781c <le_param_req>
	return net_buf_simple_add(&buf->b, len);
   1806a:	2102      	movs	r1, #2
   1806c:	4605      	mov	r5, r0
   1806e:	f104 0008 	add.w	r0, r4, #8
   18072:	f00a f852 	bl	2211a <net_buf_simple_add>
	if (accepted) {
   18076:	f085 0301 	eor.w	r3, r5, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   1807a:	b2db      	uxtb	r3, r3
   1807c:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1807e:	4622      	mov	r2, r4
   18080:	9700      	str	r7, [sp, #0]
   18082:	463b      	mov	r3, r7
   18084:	2105      	movs	r1, #5
   18086:	4630      	mov	r0, r6
   18088:	f009 f965 	bl	21356 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1808c:	b110      	cbz	r0, 18094 <l2cap_recv+0x164>
		net_buf_unref(buf);
   1808e:	4620      	mov	r0, r4
   18090:	f001 ff28 	bl	19ee4 <net_buf_unref>
	if (accepted) {
   18094:	2d00      	cmp	r5, #0
   18096:	f43f af77 	beq.w	17f88 <l2cap_recv+0x58>
		bt_conn_le_conn_update(conn, &param);
   1809a:	a902      	add	r1, sp, #8
   1809c:	4630      	mov	r0, r6
   1809e:	f009 f8de 	bl	2125e <bt_conn_le_conn_update>
   180a2:	e771      	b.n	17f88 <l2cap_recv+0x58>
   180a4:	2000066c 	.word	0x2000066c
   180a8:	20000654 	.word	0x20000654
   180ac:	0002671c 	.word	0x0002671c
   180b0:	0002673a 	.word	0x0002673a
   180b4:	0002675b 	.word	0x0002675b
   180b8:	000267bb 	.word	0x000267bb
   180bc:	0002677c 	.word	0x0002677c
   180c0:	00026798 	.word	0x00026798

000180c4 <bt_l2cap_recv>:
{
   180c4:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   180c6:	898b      	ldrh	r3, [r1, #12]
   180c8:	2b03      	cmp	r3, #3
{
   180ca:	4605      	mov	r5, r0
   180cc:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   180ce:	d811      	bhi.n	180f4 <bt_l2cap_recv+0x30>
		BT_ERR("Too small L2CAP PDU received");
   180d0:	4b17      	ldr	r3, [pc, #92]	; (18130 <bt_l2cap_recv+0x6c>)
   180d2:	681a      	ldr	r2, [r3, #0]
   180d4:	0752      	lsls	r2, r2, #29
   180d6:	d008      	beq.n	180ea <bt_l2cap_recv+0x26>
   180d8:	4916      	ldr	r1, [pc, #88]	; (18134 <bt_l2cap_recv+0x70>)
   180da:	4817      	ldr	r0, [pc, #92]	; (18138 <bt_l2cap_recv+0x74>)
   180dc:	1a5b      	subs	r3, r3, r1
   180de:	089b      	lsrs	r3, r3, #2
   180e0:	019b      	lsls	r3, r3, #6
   180e2:	f043 0101 	orr.w	r1, r3, #1
   180e6:	f006 ff26 	bl	1ef36 <log_0>
	net_buf_unref(buf);
   180ea:	4620      	mov	r0, r4
}
   180ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   180f0:	f001 bef8 	b.w	19ee4 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   180f4:	2104      	movs	r1, #4
   180f6:	f104 0008 	add.w	r0, r4, #8
   180fa:	f00a f82d 	bl	22158 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   180fe:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   18100:	4628      	mov	r0, r5
   18102:	f009 f96f 	bl	213e4 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   18106:	b970      	cbnz	r0, 18126 <bt_l2cap_recv+0x62>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   18108:	4a09      	ldr	r2, [pc, #36]	; (18130 <bt_l2cap_recv+0x6c>)
   1810a:	6813      	ldr	r3, [r2, #0]
   1810c:	f013 0f06 	tst.w	r3, #6
   18110:	d0eb      	beq.n	180ea <bt_l2cap_recv+0x26>
   18112:	4b08      	ldr	r3, [pc, #32]	; (18134 <bt_l2cap_recv+0x70>)
   18114:	4809      	ldr	r0, [pc, #36]	; (1813c <bt_l2cap_recv+0x78>)
   18116:	1ad2      	subs	r2, r2, r3
   18118:	0892      	lsrs	r2, r2, #2
   1811a:	0192      	lsls	r2, r2, #6
   1811c:	f042 0202 	orr.w	r2, r2, #2
   18120:	f006 ff16 	bl	1ef50 <log_1>
   18124:	e7e1      	b.n	180ea <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   18126:	6843      	ldr	r3, [r0, #4]
   18128:	4621      	mov	r1, r4
   1812a:	691b      	ldr	r3, [r3, #16]
   1812c:	4798      	blx	r3
   1812e:	e7dc      	b.n	180ea <bt_l2cap_recv+0x26>
   18130:	2000066c 	.word	0x2000066c
   18134:	20000654 	.word	0x20000654
   18138:	000267d9 	.word	0x000267d9
   1813c:	000267f6 	.word	0x000267f6

00018140 <bt_l2cap_update_conn_param>:
{
   18140:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   18142:	4b17      	ldr	r3, [pc, #92]	; (181a0 <bt_l2cap_update_conn_param+0x60>)
   18144:	781a      	ldrb	r2, [r3, #0]
   18146:	3201      	adds	r2, #1
	if (!ident) {
   18148:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   1814c:	bf08      	it	eq
   1814e:	2201      	moveq	r2, #1
   18150:	701a      	strb	r2, [r3, #0]
{
   18152:	4606      	mov	r6, r0
   18154:	460d      	mov	r5, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   18156:	2208      	movs	r2, #8
   18158:	7819      	ldrb	r1, [r3, #0]
   1815a:	2012      	movs	r0, #18
   1815c:	f7ff fe3e 	bl	17ddc <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   18160:	4604      	mov	r4, r0
   18162:	b1d0      	cbz	r0, 1819a <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   18164:	2108      	movs	r1, #8
   18166:	4408      	add	r0, r1
   18168:	f009 ffd7 	bl	2211a <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1816c:	882b      	ldrh	r3, [r5, #0]
   1816e:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   18170:	886b      	ldrh	r3, [r5, #2]
   18172:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   18174:	88ab      	ldrh	r3, [r5, #4]
   18176:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   18178:	88eb      	ldrh	r3, [r5, #6]
   1817a:	80c3      	strh	r3, [r0, #6]
   1817c:	2300      	movs	r3, #0
   1817e:	9300      	str	r3, [sp, #0]
   18180:	4622      	mov	r2, r4
   18182:	2105      	movs	r1, #5
   18184:	4630      	mov	r0, r6
   18186:	f009 f8e6 	bl	21356 <bt_l2cap_send_cb>
	if (err) {
   1818a:	4605      	mov	r5, r0
   1818c:	b110      	cbz	r0, 18194 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   1818e:	4620      	mov	r0, r4
   18190:	f001 fea8 	bl	19ee4 <net_buf_unref>
}
   18194:	4628      	mov	r0, r5
   18196:	b002      	add	sp, #8
   18198:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1819a:	f06f 050b 	mvn.w	r5, #11
   1819e:	e7f9      	b.n	18194 <bt_l2cap_update_conn_param+0x54>
   181a0:	200028c7 	.word	0x200028c7

000181a4 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   181a4:	4b02      	ldr	r3, [pc, #8]	; (181b0 <att_cfm_sent+0xc>)
   181a6:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   181aa:	f009 b959 	b.w	21460 <att_sent>
   181ae:	bf00      	nop
   181b0:	000217e7 	.word	0x000217e7

000181b4 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   181b4:	4b02      	ldr	r3, [pc, #8]	; (181c0 <att_rsp_sent+0xc>)
   181b6:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   181ba:	f009 b951 	b.w	21460 <att_sent>
   181be:	bf00      	nop
   181c0:	000217cb 	.word	0x000217cb

000181c4 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   181c4:	4b02      	ldr	r3, [pc, #8]	; (181d0 <att_req_sent+0xc>)
   181c6:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   181ca:	f009 b949 	b.w	21460 <att_sent>
   181ce:	bf00      	nop
   181d0:	000217b1 	.word	0x000217b1

000181d4 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   181d4:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   181d6:	3808      	subs	r0, #8
   181d8:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   181da:	a901      	add	r1, sp, #4
   181dc:	4802      	ldr	r0, [pc, #8]	; (181e8 <bt_att_released+0x14>)
   181de:	f00a fb34 	bl	2284a <k_mem_slab_free>
}
   181e2:	b003      	add	sp, #12
   181e4:	f85d fb04 	ldr.w	pc, [sp], #4
   181e8:	200006d8 	.word	0x200006d8

000181ec <chan_send>:
{
   181ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   181f0:	688b      	ldr	r3, [r1, #8]
   181f2:	781b      	ldrb	r3, [r3, #0]
   181f4:	2bd2      	cmp	r3, #210	; 0xd2
{
   181f6:	4606      	mov	r6, r0
   181f8:	460c      	mov	r4, r1
   181fa:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   181fc:	d119      	bne.n	18232 <chan_send+0x46>
		err = bt_smp_sign(chan->att->conn, buf);
   181fe:	6803      	ldr	r3, [r0, #0]
   18200:	6818      	ldr	r0, [r3, #0]
   18202:	f009 ff2e 	bl	22062 <bt_smp_sign>
		if (err) {
   18206:	4605      	mov	r5, r0
   18208:	b198      	cbz	r0, 18232 <chan_send+0x46>
			BT_ERR("Error signing data");
   1820a:	4925      	ldr	r1, [pc, #148]	; (182a0 <chan_send+0xb4>)
   1820c:	680b      	ldr	r3, [r1, #0]
   1820e:	075b      	lsls	r3, r3, #29
   18210:	d008      	beq.n	18224 <chan_send+0x38>
   18212:	4b24      	ldr	r3, [pc, #144]	; (182a4 <chan_send+0xb8>)
   18214:	4824      	ldr	r0, [pc, #144]	; (182a8 <chan_send+0xbc>)
   18216:	1ac9      	subs	r1, r1, r3
   18218:	0889      	lsrs	r1, r1, #2
   1821a:	0189      	lsls	r1, r1, #6
   1821c:	f041 0101 	orr.w	r1, r1, #1
   18220:	f006 fe89 	bl	1ef36 <log_0>
			net_buf_unref(buf);
   18224:	4620      	mov	r0, r4
   18226:	f001 fe5d 	bl	19ee4 <net_buf_unref>
}
   1822a:	4628      	mov	r0, r5
   1822c:	b003      	add	sp, #12
   1822e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   18232:	f104 0008 	add.w	r0, r4, #8
   18236:	f009 ffa7 	bl	22188 <net_buf_simple_headroom>
	state->len = buf->len;
   1823a:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1823e:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   18240:	b957      	cbnz	r7, 18258 <chan_send+0x6c>
	switch (att_op_get_type(buf->data[0])) {
   18242:	68a3      	ldr	r3, [r4, #8]
   18244:	7818      	ldrb	r0, [r3, #0]
   18246:	f009 f923 	bl	21490 <att_op_get_type>
   1824a:	1e43      	subs	r3, r0, #1
   1824c:	b2db      	uxtb	r3, r3
   1824e:	2b04      	cmp	r3, #4
   18250:	bf9c      	itt	ls
   18252:	4a16      	ldrls	r2, [pc, #88]	; (182ac <chan_send+0xc0>)
   18254:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   18258:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   1825a:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1825e:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   18260:	4b13      	ldr	r3, [pc, #76]	; (182b0 <chan_send+0xc4>)
   18262:	429f      	cmp	r7, r3
   18264:	d018      	beq.n	18298 <chan_send+0xac>
	} else if (cb == chan_cfm_sent) {
   18266:	4b13      	ldr	r3, [pc, #76]	; (182b4 <chan_send+0xc8>)
   18268:	429f      	cmp	r7, r3
   1826a:	d017      	beq.n	1829c <chan_send+0xb0>
		return att_sent;
   1826c:	4912      	ldr	r1, [pc, #72]	; (182b8 <chan_send+0xcc>)
   1826e:	4b13      	ldr	r3, [pc, #76]	; (182bc <chan_send+0xd0>)
   18270:	4a13      	ldr	r2, [pc, #76]	; (182c0 <chan_send+0xd4>)
   18272:	428f      	cmp	r7, r1
   18274:	bf18      	it	ne
   18276:	4613      	movne	r3, r2
			       &chan->chan.chan);
   18278:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1827a:	9600      	str	r6, [sp, #0]
   1827c:	4622      	mov	r2, r4
   1827e:	2104      	movs	r1, #4
   18280:	f009 f869 	bl	21356 <bt_l2cap_send_cb>
	if (err) {
   18284:	4605      	mov	r5, r0
   18286:	2800      	cmp	r0, #0
   18288:	d0cf      	beq.n	1822a <chan_send+0x3e>
	buf->data = buf->__buf + state->offset;
   1828a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1828c:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   18290:	fa10 f088 	uxtah	r0, r0, r8
   18294:	60a0      	str	r0, [r4, #8]
}
   18296:	e7c8      	b.n	1822a <chan_send+0x3e>
		return att_rsp_sent;
   18298:	4b0a      	ldr	r3, [pc, #40]	; (182c4 <chan_send+0xd8>)
   1829a:	e7ed      	b.n	18278 <chan_send+0x8c>
		return att_cfm_sent;
   1829c:	4b0a      	ldr	r3, [pc, #40]	; (182c8 <chan_send+0xdc>)
   1829e:	e7eb      	b.n	18278 <chan_send+0x8c>
   182a0:	20000654 	.word	0x20000654
   182a4:	20000654 	.word	0x20000654
   182a8:	00026832 	.word	0x00026832
   182ac:	00024064 	.word	0x00024064
   182b0:	000217cb 	.word	0x000217cb
   182b4:	000217e7 	.word	0x000217e7
   182b8:	000217b1 	.word	0x000217b1
   182bc:	000181c5 	.word	0x000181c5
   182c0:	00021461 	.word	0x00021461
   182c4:	000181b5 	.word	0x000181b5
   182c8:	000181a5 	.word	0x000181a5

000182cc <read_group_cb>:
{
   182cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   182d0:	4606      	mov	r6, r0
   182d2:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   182d4:	f04f 0800 	mov.w	r8, #0
   182d8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   182dc:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   182de:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   182e0:	f88d 8008 	strb.w	r8, [sp, #8]
   182e4:	a902      	add	r1, sp, #8
{
   182e6:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   182e8:	f8ad 300a 	strh.w	r3, [sp, #10]
   182ec:	f008 fd97 	bl	20e1e <bt_uuid_cmp>
   182f0:	b1a0      	cbz	r0, 1831c <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   182f2:	f642 0301 	movw	r3, #10241	; 0x2801
   182f6:	6830      	ldr	r0, [r6, #0]
   182f8:	f88d 800c 	strb.w	r8, [sp, #12]
   182fc:	a903      	add	r1, sp, #12
   182fe:	f8ad 300e 	strh.w	r3, [sp, #14]
   18302:	f008 fd8c 	bl	20e1e <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18306:	b148      	cbz	r0, 1831c <read_group_cb+0x50>
		if (data->group &&
   18308:	6923      	ldr	r3, [r4, #16]
   1830a:	b11b      	cbz	r3, 18314 <read_group_cb+0x48>
   1830c:	885a      	ldrh	r2, [r3, #2]
   1830e:	42aa      	cmp	r2, r5
   18310:	d200      	bcs.n	18314 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   18312:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   18314:	2001      	movs	r0, #1
}
   18316:	b004      	add	sp, #16
   18318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1831c:	6861      	ldr	r1, [r4, #4]
   1831e:	6830      	ldr	r0, [r6, #0]
   18320:	f008 fd7d 	bl	20e1e <bt_uuid_cmp>
   18324:	b110      	cbz	r0, 1832c <read_group_cb+0x60>
		data->group = NULL;
   18326:	2300      	movs	r3, #0
   18328:	6123      	str	r3, [r4, #16]
   1832a:	e7f3      	b.n	18314 <read_group_cb+0x48>
	if (data->rsp->len &&
   1832c:	68e3      	ldr	r3, [r4, #12]
   1832e:	68a0      	ldr	r0, [r4, #8]
   18330:	781a      	ldrb	r2, [r3, #0]
   18332:	b13a      	cbz	r2, 18344 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   18334:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   18338:	8981      	ldrh	r1, [r0, #12]
   1833a:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1833c:	4293      	cmp	r3, r2
   1833e:	da01      	bge.n	18344 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   18340:	2000      	movs	r0, #0
   18342:	e7e8      	b.n	18316 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   18344:	2104      	movs	r1, #4
   18346:	3008      	adds	r0, #8
   18348:	f009 fee7 	bl	2211a <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1834c:	4b09      	ldr	r3, [pc, #36]	; (18374 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1834e:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   18350:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   18352:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   18354:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   18356:	4631      	mov	r1, r6
   18358:	9300      	str	r3, [sp, #0]
   1835a:	9401      	str	r4, [sp, #4]
   1835c:	2300      	movs	r3, #0
   1835e:	4638      	mov	r0, r7
   18360:	f009 f904 	bl	2156c <att_chan_read>
	if (read < 0) {
   18364:	2800      	cmp	r0, #0
   18366:	dbeb      	blt.n	18340 <read_group_cb+0x74>
	if (!data->group) {
   18368:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1836a:	3800      	subs	r0, #0
   1836c:	bf18      	it	ne
   1836e:	2001      	movne	r0, #1
   18370:	e7d1      	b.n	18316 <read_group_cb+0x4a>
   18372:	bf00      	nop
   18374:	00021791 	.word	0x00021791

00018378 <read_type_cb>:
{
   18378:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   1837c:	f8d2 8000 	ldr.w	r8, [r2]
{
   18380:	4606      	mov	r6, r0
   18382:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   18384:	6800      	ldr	r0, [r0, #0]
   18386:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   18388:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   1838c:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1838e:	f008 fd46 	bl	20e1e <bt_uuid_cmp>
   18392:	4607      	mov	r7, r0
   18394:	2800      	cmp	r0, #0
   18396:	d13e      	bne.n	18416 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   18398:	4628      	mov	r0, r5
   1839a:	2215      	movs	r2, #21
   1839c:	4631      	mov	r1, r6
   1839e:	f009 fde5 	bl	21f6c <bt_gatt_check_perm>
   183a2:	4605      	mov	r5, r0
   183a4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   183a6:	b148      	cbz	r0, 183bc <read_type_cb+0x44>
		if (data->rsp->len) {
   183a8:	68e3      	ldr	r3, [r4, #12]
   183aa:	781b      	ldrb	r3, [r3, #0]
   183ac:	b923      	cbnz	r3, 183b8 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   183ae:	2500      	movs	r5, #0
}
   183b0:	4628      	mov	r0, r5
   183b2:	b003      	add	sp, #12
   183b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   183b8:	7527      	strb	r7, [r4, #20]
   183ba:	e7f8      	b.n	183ae <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   183bc:	68a0      	ldr	r0, [r4, #8]
   183be:	f009 fe8a 	bl	220d6 <net_buf_frag_last>
   183c2:	2102      	movs	r1, #2
   183c4:	3008      	adds	r0, #8
   183c6:	f009 fea8 	bl	2211a <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   183ca:	4b14      	ldr	r3, [pc, #80]	; (1841c <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   183cc:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   183ce:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   183d0:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   183d4:	4631      	mov	r1, r6
   183d6:	9300      	str	r3, [sp, #0]
   183d8:	9401      	str	r4, [sp, #4]
   183da:	462b      	mov	r3, r5
   183dc:	4640      	mov	r0, r8
   183de:	f009 f8c5 	bl	2156c <att_chan_read>
	if (read < 0) {
   183e2:	2800      	cmp	r0, #0
   183e4:	da07      	bge.n	183f6 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   183e6:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   183ea:	bf26      	itte	cs
   183ec:	4240      	negcs	r0, r0
   183ee:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   183f0:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   183f2:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   183f4:	e7dc      	b.n	183b0 <read_type_cb+0x38>
	if (!data->item) {
   183f6:	6923      	ldr	r3, [r4, #16]
   183f8:	2b00      	cmp	r3, #0
   183fa:	d0d8      	beq.n	183ae <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   183fc:	68a0      	ldr	r0, [r4, #8]
   183fe:	f009 f827 	bl	21450 <net_buf_frags_len>
   18402:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   18406:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   18408:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1840a:	7818      	ldrb	r0, [r3, #0]
   1840c:	4285      	cmp	r5, r0
   1840e:	bf94      	ite	ls
   18410:	2500      	movls	r5, #0
   18412:	2501      	movhi	r5, #1
   18414:	e7cc      	b.n	183b0 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   18416:	2501      	movs	r5, #1
   18418:	e7ca      	b.n	183b0 <read_type_cb+0x38>
   1841a:	bf00      	nop
   1841c:	0002146d 	.word	0x0002146d

00018420 <find_type_cb>:
{
   18420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   18424:	f8d2 9000 	ldr.w	r9, [r2]
{
   18428:	b091      	sub	sp, #68	; 0x44
   1842a:	4607      	mov	r7, r0
   1842c:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1842e:	2500      	movs	r5, #0
   18430:	f642 0301 	movw	r3, #10241	; 0x2801
   18434:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   18436:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1843a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1843e:	a90b      	add	r1, sp, #44	; 0x2c
{
   18440:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18442:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   18446:	f008 fcea 	bl	20e1e <bt_uuid_cmp>
   1844a:	2800      	cmp	r0, #0
   1844c:	d06a      	beq.n	18524 <find_type_cb+0x104>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1844e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18452:	6838      	ldr	r0, [r7, #0]
   18454:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   18458:	a90b      	add	r1, sp, #44	; 0x2c
   1845a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1845e:	f008 fcde 	bl	20e1e <bt_uuid_cmp>
   18462:	b138      	cbz	r0, 18474 <find_type_cb+0x54>
		if (data->group &&
   18464:	68a3      	ldr	r3, [r4, #8]
   18466:	b11b      	cbz	r3, 18470 <find_type_cb+0x50>
   18468:	885a      	ldrh	r2, [r3, #2]
   1846a:	42b2      	cmp	r2, r6
   1846c:	d200      	bcs.n	18470 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1846e:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   18470:	2001      	movs	r0, #1
   18472:	e009      	b.n	18488 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   18474:	6861      	ldr	r1, [r4, #4]
   18476:	4608      	mov	r0, r1
   18478:	f008 ffea 	bl	21450 <net_buf_frags_len>
   1847c:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   18480:	1a1b      	subs	r3, r3, r0
   18482:	2b03      	cmp	r3, #3
   18484:	d803      	bhi.n	1848e <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   18486:	2000      	movs	r0, #0
}
   18488:	b011      	add	sp, #68	; 0x44
   1848a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1848e:	4608      	mov	r0, r1
   18490:	f009 fe21 	bl	220d6 <net_buf_frag_last>
   18494:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   18496:	6860      	ldr	r0, [r4, #4]
   18498:	f008 ffda 	bl	21450 <net_buf_frags_len>
   1849c:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   184a0:	f105 0b08 	add.w	fp, r5, #8
   184a4:	ebaa 0a00 	sub.w	sl, sl, r0
   184a8:	4658      	mov	r0, fp
   184aa:	f009 fe71 	bl	22190 <net_buf_simple_tailroom>
   184ae:	4582      	cmp	sl, r0
   184b0:	d23b      	bcs.n	1852a <find_type_cb+0x10a>
   184b2:	6860      	ldr	r0, [r4, #4]
   184b4:	f008 ffcc 	bl	21450 <net_buf_frags_len>
   184b8:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   184bc:	1a18      	subs	r0, r3, r0
	if (!len) {
   184be:	b970      	cbnz	r0, 184de <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   184c0:	6863      	ldr	r3, [r4, #4]
   184c2:	7998      	ldrb	r0, [r3, #6]
   184c4:	f001 fc4e 	bl	19d64 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   184c8:	2200      	movs	r2, #0
   184ca:	2300      	movs	r3, #0
   184cc:	f009 fdcf 	bl	2206e <net_buf_alloc_fixed>
		if (!frag) {
   184d0:	4605      	mov	r5, r0
   184d2:	2800      	cmp	r0, #0
   184d4:	d0d7      	beq.n	18486 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   184d6:	4601      	mov	r1, r0
   184d8:	6860      	ldr	r0, [r4, #4]
   184da:	f009 fe0d 	bl	220f8 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   184de:	2300      	movs	r3, #0
   184e0:	9300      	str	r3, [sp, #0]
   184e2:	f8d7 9004 	ldr.w	r9, [r7, #4]
   184e6:	4639      	mov	r1, r7
   184e8:	2310      	movs	r3, #16
   184ea:	aa02      	add	r2, sp, #8
   184ec:	4640      	mov	r0, r8
   184ee:	47c8      	blx	r9
	if (read < 0) {
   184f0:	1e07      	subs	r7, r0, #0
   184f2:	db17      	blt.n	18524 <find_type_cb+0x104>
	if (read != data->value_len) {
   184f4:	7c22      	ldrb	r2, [r4, #16]
   184f6:	68e0      	ldr	r0, [r4, #12]
   184f8:	42ba      	cmp	r2, r7
   184fa:	d03f      	beq.n	1857c <find_type_cb+0x15c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   184fc:	4601      	mov	r1, r0
   184fe:	a80b      	add	r0, sp, #44	; 0x2c
   18500:	f008 fcb7 	bl	20e72 <bt_uuid_create>
   18504:	b9a8      	cbnz	r0, 18532 <find_type_cb+0x112>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   18506:	4a1f      	ldr	r2, [pc, #124]	; (18584 <find_type_cb+0x164>)
   18508:	6813      	ldr	r3, [r2, #0]
   1850a:	f013 0f06 	tst.w	r3, #6
   1850e:	d009      	beq.n	18524 <find_type_cb+0x104>
   18510:	4b1d      	ldr	r3, [pc, #116]	; (18588 <find_type_cb+0x168>)
   18512:	7c21      	ldrb	r1, [r4, #16]
   18514:	481d      	ldr	r0, [pc, #116]	; (1858c <find_type_cb+0x16c>)
   18516:	1ad2      	subs	r2, r2, r3
   18518:	0892      	lsrs	r2, r2, #2
   1851a:	0192      	lsls	r2, r2, #6
   1851c:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
   18520:	f006 fd16 	bl	1ef50 <log_1>
	data->group = NULL;
   18524:	2300      	movs	r3, #0
   18526:	60a3      	str	r3, [r4, #8]
   18528:	e7a2      	b.n	18470 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1852a:	4658      	mov	r0, fp
   1852c:	f009 fe30 	bl	22190 <net_buf_simple_tailroom>
   18530:	e7c5      	b.n	184be <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   18532:	b2fa      	uxtb	r2, r7
   18534:	a902      	add	r1, sp, #8
   18536:	a806      	add	r0, sp, #24
   18538:	f008 fc9b 	bl	20e72 <bt_uuid_create>
   1853c:	b968      	cbnz	r0, 1855a <find_type_cb+0x13a>
			BT_WARN("Unable to create UUID: size %d", read);
   1853e:	4a11      	ldr	r2, [pc, #68]	; (18584 <find_type_cb+0x164>)
   18540:	6813      	ldr	r3, [r2, #0]
   18542:	f013 0f06 	tst.w	r3, #6
   18546:	d0ed      	beq.n	18524 <find_type_cb+0x104>
   18548:	4b0f      	ldr	r3, [pc, #60]	; (18588 <find_type_cb+0x168>)
   1854a:	4811      	ldr	r0, [pc, #68]	; (18590 <find_type_cb+0x170>)
   1854c:	1ad2      	subs	r2, r2, r3
   1854e:	0892      	lsrs	r2, r2, #2
   18550:	0192      	lsls	r2, r2, #6
   18552:	f042 0202 	orr.w	r2, r2, #2
   18556:	4639      	mov	r1, r7
   18558:	e7e2      	b.n	18520 <find_type_cb+0x100>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1855a:	a906      	add	r1, sp, #24
   1855c:	a80b      	add	r0, sp, #44	; 0x2c
   1855e:	f008 fc5e 	bl	20e1e <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   18562:	2800      	cmp	r0, #0
   18564:	d1de      	bne.n	18524 <find_type_cb+0x104>
	data->err = 0x00;
   18566:	2300      	movs	r3, #0
   18568:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1856a:	2104      	movs	r1, #4
   1856c:	f105 0008 	add.w	r0, r5, #8
   18570:	f009 fdd3 	bl	2211a <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   18574:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   18576:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   18578:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1857a:	e779      	b.n	18470 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   1857c:	a902      	add	r1, sp, #8
   1857e:	f008 fbe5 	bl	20d4c <memcmp>
   18582:	e7ee      	b.n	18562 <find_type_cb+0x142>
   18584:	20000654 	.word	0x20000654
   18588:	20000654 	.word	0x20000654
   1858c:	00026845 	.word	0x00026845
   18590:	00026864 	.word	0x00026864

00018594 <att_get>:
{
   18594:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   18596:	7a83      	ldrb	r3, [r0, #10]
   18598:	2b07      	cmp	r3, #7
   1859a:	d011      	beq.n	185c0 <att_get+0x2c>
		BT_WARN("Not connected");
   1859c:	491e      	ldr	r1, [pc, #120]	; (18618 <att_get+0x84>)
   1859e:	680b      	ldr	r3, [r1, #0]
   185a0:	f013 0f06 	tst.w	r3, #6
   185a4:	d102      	bne.n	185ac <att_get+0x18>
		return NULL;
   185a6:	2400      	movs	r4, #0
}
   185a8:	4620      	mov	r0, r4
   185aa:	bd10      	pop	{r4, pc}
   185ac:	4b1b      	ldr	r3, [pc, #108]	; (1861c <att_get+0x88>)
		BT_WARN("Not connected");
   185ae:	481c      	ldr	r0, [pc, #112]	; (18620 <att_get+0x8c>)
   185b0:	1ac9      	subs	r1, r1, r3
   185b2:	0889      	lsrs	r1, r1, #2
   185b4:	0189      	lsls	r1, r1, #6
   185b6:	f041 0102 	orr.w	r1, r1, #2
   185ba:	f006 fcbc 	bl	1ef36 <log_0>
   185be:	e7f2      	b.n	185a6 <att_get+0x12>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   185c0:	2104      	movs	r1, #4
   185c2:	f008 ff0f 	bl	213e4 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   185c6:	4604      	mov	r4, r0
   185c8:	b968      	cbnz	r0, 185e6 <att_get+0x52>
		BT_ERR("Unable to find ATT channel");
   185ca:	4913      	ldr	r1, [pc, #76]	; (18618 <att_get+0x84>)
   185cc:	680b      	ldr	r3, [r1, #0]
   185ce:	075a      	lsls	r2, r3, #29
   185d0:	d0e9      	beq.n	185a6 <att_get+0x12>
   185d2:	4b12      	ldr	r3, [pc, #72]	; (1861c <att_get+0x88>)
   185d4:	4813      	ldr	r0, [pc, #76]	; (18624 <att_get+0x90>)
   185d6:	1ac9      	subs	r1, r1, r3
   185d8:	0889      	lsrs	r1, r1, #2
   185da:	0189      	lsls	r1, r1, #6
   185dc:	f041 0101 	orr.w	r1, r1, #1
   185e0:	f006 fca9 	bl	1ef36 <log_0>
   185e4:	e7e0      	b.n	185a8 <att_get+0x14>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   185e6:	f3bf 8f5b 	dmb	ish
   185ea:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   185ee:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   185f2:	075b      	lsls	r3, r3, #29
   185f4:	d50c      	bpl.n	18610 <att_get+0x7c>
		BT_WARN("ATT channel flagged as disconnected");
   185f6:	4908      	ldr	r1, [pc, #32]	; (18618 <att_get+0x84>)
   185f8:	680b      	ldr	r3, [r1, #0]
   185fa:	f013 0f06 	tst.w	r3, #6
   185fe:	d0d2      	beq.n	185a6 <att_get+0x12>
   18600:	4b06      	ldr	r3, [pc, #24]	; (1861c <att_get+0x88>)
   18602:	4809      	ldr	r0, [pc, #36]	; (18628 <att_get+0x94>)
   18604:	1ac9      	subs	r1, r1, r3
   18606:	0889      	lsrs	r1, r1, #2
   18608:	0189      	lsls	r1, r1, #6
   1860a:	f041 0102 	orr.w	r1, r1, #2
   1860e:	e7d4      	b.n	185ba <att_get+0x26>
	return att_chan->att;
   18610:	f850 4c08 	ldr.w	r4, [r0, #-8]
   18614:	e7c8      	b.n	185a8 <att_get+0x14>
   18616:	bf00      	nop
   18618:	20000654 	.word	0x20000654
   1861c:	20000654 	.word	0x20000654
   18620:	00026883 	.word	0x00026883
   18624:	00026891 	.word	0x00026891
   18628:	000268ac 	.word	0x000268ac

0001862c <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   1862c:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   1862e:	4a07      	ldr	r2, [pc, #28]	; (1864c <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   18630:	4604      	mov	r4, r0
   18632:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   18634:	f7ff fdda 	bl	181ec <chan_send>
	if (err) {
   18638:	b130      	cbz	r0, 18648 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   1863a:	4629      	mov	r1, r5
   1863c:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   18640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   18644:	f009 bd36 	b.w	220b4 <net_buf_put>
}
   18648:	bd38      	pop	{r3, r4, r5, pc}
   1864a:	bf00      	nop
   1864c:	000217cb 	.word	0x000217cb

00018650 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   18650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   18652:	2300      	movs	r3, #0
{
   18654:	4606      	mov	r6, r0
   18656:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   18658:	482b      	ldr	r0, [pc, #172]	; (18708 <bt_att_accept+0xb8>)
   1865a:	2200      	movs	r2, #0
   1865c:	4669      	mov	r1, sp
   1865e:	f004 fb25 	bl	1ccac <k_mem_slab_alloc>
   18662:	4604      	mov	r4, r0
   18664:	b180      	cbz	r0, 18688 <bt_att_accept+0x38>
		BT_ERR("No available ATT context for conn %p", conn);
   18666:	4a29      	ldr	r2, [pc, #164]	; (1870c <bt_att_accept+0xbc>)
   18668:	6813      	ldr	r3, [r2, #0]
   1866a:	0759      	lsls	r1, r3, #29
   1866c:	d009      	beq.n	18682 <bt_att_accept+0x32>
   1866e:	4b28      	ldr	r3, [pc, #160]	; (18710 <bt_att_accept+0xc0>)
   18670:	4828      	ldr	r0, [pc, #160]	; (18714 <bt_att_accept+0xc4>)
   18672:	1ad2      	subs	r2, r2, r3
   18674:	0892      	lsrs	r2, r2, #2
   18676:	0192      	lsls	r2, r2, #6
   18678:	f042 0201 	orr.w	r2, r2, #1
   1867c:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
   1867e:	f006 fc67 	bl	1ef50 <log_1>
		BT_ERR("No available ATT context for conn %p", conn);
   18682:	f06f 040b 	mvn.w	r4, #11
   18686:	e03c      	b.n	18702 <bt_att_accept+0xb2>
		return -ENOMEM;
	}

	(void)memset(att, 0, sizeof(*att));
   18688:	4601      	mov	r1, r0
   1868a:	222c      	movs	r2, #44	; 0x2c
   1868c:	9800      	ldr	r0, [sp, #0]
   1868e:	f008 fb8f 	bl	20db0 <memset>
	att->conn = conn;
   18692:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   18694:	4820      	ldr	r0, [pc, #128]	; (18718 <bt_att_accept+0xc8>)
	list->tail = NULL;
   18696:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   18698:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   1869c:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   186a0:	2200      	movs	r2, #0
   186a2:	2300      	movs	r3, #0
   186a4:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   186a6:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   186a8:	f004 fb00 	bl	1ccac <k_mem_slab_alloc>
   186ac:	4604      	mov	r4, r0
   186ae:	b160      	cbz	r0, 186ca <bt_att_accept+0x7a>
		BT_ERR("No available ATT channel for conn %p", att->conn);
   186b0:	4a16      	ldr	r2, [pc, #88]	; (1870c <bt_att_accept+0xbc>)
   186b2:	6813      	ldr	r3, [r2, #0]
   186b4:	075b      	lsls	r3, r3, #29
   186b6:	d0e4      	beq.n	18682 <bt_att_accept+0x32>
   186b8:	4b15      	ldr	r3, [pc, #84]	; (18710 <bt_att_accept+0xc0>)
   186ba:	6829      	ldr	r1, [r5, #0]
   186bc:	4817      	ldr	r0, [pc, #92]	; (1871c <bt_att_accept+0xcc>)
   186be:	1ad2      	subs	r2, r2, r3
   186c0:	0892      	lsrs	r2, r2, #2
   186c2:	0192      	lsls	r2, r2, #6
   186c4:	f042 0201 	orr.w	r2, r2, #1
   186c8:	e7d9      	b.n	1867e <bt_att_accept+0x2e>
	(void)memset(chan, 0, sizeof(*chan));
   186ca:	4601      	mov	r1, r0
   186cc:	f44f 72a4 	mov.w	r2, #328	; 0x148
   186d0:	9801      	ldr	r0, [sp, #4]
   186d2:	f008 fb6d 	bl	20db0 <memset>
	chan->chan.chan.ops = &ops;
   186d6:	9801      	ldr	r0, [sp, #4]
   186d8:	4b11      	ldr	r3, [pc, #68]	; (18720 <bt_att_accept+0xd0>)
   186da:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   186dc:	30f8      	adds	r0, #248	; 0xf8
   186de:	f00a f98f 	bl	22a00 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   186e2:	9b01      	ldr	r3, [sp, #4]
   186e4:	f3bf 8f5b 	dmb	ish
   186e8:	33f0      	adds	r3, #240	; 0xf0
   186ea:	e853 2f00 	ldrex	r2, [r3]
   186ee:	e843 4100 	strex	r1, r4, [r3]
   186f2:	2900      	cmp	r1, #0
   186f4:	d1f9      	bne.n	186ea <bt_att_accept+0x9a>
   186f6:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   186fa:	9b01      	ldr	r3, [sp, #4]
   186fc:	f843 5b08 	str.w	r5, [r3], #8
	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
   18700:	603b      	str	r3, [r7, #0]

	return 0;
}
   18702:	4620      	mov	r0, r4
   18704:	b003      	add	sp, #12
   18706:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18708:	200006bc 	.word	0x200006bc
   1870c:	20000654 	.word	0x20000654
   18710:	20000654 	.word	0x20000654
   18714:	000268d0 	.word	0x000268d0
   18718:	200006d8 	.word	0x200006d8
   1871c:	000268f5 	.word	0x000268f5
   18720:	200004f0 	.word	0x200004f0

00018724 <bt_att_connected>:
{
   18724:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   18726:	4606      	mov	r6, r0
{
   18728:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1872a:	2104      	movs	r1, #4
   1872c:	f856 0908 	ldr.w	r0, [r6], #-8
   18730:	f008 fe48 	bl	213c4 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   18734:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   18738:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1873a:	b91b      	cbnz	r3, 18744 <bt_att_connected+0x20>
   1873c:	f105 000c 	add.w	r0, r5, #12
   18740:	f00a f95e 	bl	22a00 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   18744:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	parent->next = child;
   18746:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
   1874a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   1874c:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
   18750:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   18752:	b902      	cbnz	r2, 18756 <bt_att_connected+0x32>
	list->tail = node;
   18754:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18756:	f3bf 8f5b 	dmb	ish
   1875a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   1875e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   18762:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   18764:	bf58      	it	pl
   18766:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   18768:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1876a:	bf5c      	itt	pl
   1876c:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   18770:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   18774:	f008 ffd1 	bl	2171a <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   18778:	f504 7084 	add.w	r0, r4, #264	; 0x108
   1877c:	4902      	ldr	r1, [pc, #8]	; (18788 <bt_att_connected+0x64>)
}
   1877e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   18782:	f00a ba37 	b.w	22bf4 <k_work_init_delayable>
   18786:	bf00      	nop
   18788:	00019119 	.word	0x00019119

0001878c <att_write_cmd>:
{
   1878c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1878e:	4604      	mov	r4, r0
   18790:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   18792:	f101 0008 	add.w	r0, r1, #8
   18796:	460d      	mov	r5, r1
   18798:	f009 fcee 	bl	22178 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1879c:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1879e:	68af      	ldr	r7, [r5, #8]
   187a0:	89ad      	ldrh	r5, [r5, #12]
   187a2:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   187a4:	2100      	movs	r1, #0
   187a6:	6818      	ldr	r0, [r3, #0]
   187a8:	f009 fc03 	bl	21fb2 <bt_gatt_change_aware>
   187ac:	b320      	cbz	r0, 187f8 <att_write_cmd+0x6c>
	if (!handle) {
   187ae:	b32e      	cbz	r6, 187fc <att_write_cmd+0x70>
	(void)memset(&data, 0, sizeof(data));
   187b0:	2218      	movs	r2, #24
   187b2:	2100      	movs	r1, #0
   187b4:	4668      	mov	r0, sp
   187b6:	f008 fafb 	bl	20db0 <memset>
	data.conn = chan->att->conn;
   187ba:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   187bc:	4a10      	ldr	r2, [pc, #64]	; (18800 <att_write_cmd+0x74>)
	data.conn = chan->att->conn;
   187be:	681b      	ldr	r3, [r3, #0]
   187c0:	9300      	str	r3, [sp, #0]
	data.req = req;
   187c2:	2300      	movs	r3, #0
   187c4:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   187c8:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   187cc:	2301      	movs	r3, #1
   187ce:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   187d2:	4631      	mov	r1, r6
   187d4:	466b      	mov	r3, sp
   187d6:	4630      	mov	r0, r6
	data.value = value;
   187d8:	9703      	str	r7, [sp, #12]
	data.len = len;
   187da:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   187de:	f008 feba 	bl	21556 <bt_gatt_foreach_attr>
	if (data.err) {
   187e2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   187e6:	b923      	cbnz	r3, 187f2 <att_write_cmd+0x66>
	if (data.buf) {
   187e8:	9901      	ldr	r1, [sp, #4]
   187ea:	b111      	cbz	r1, 187f2 <att_write_cmd+0x66>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   187ec:	4620      	mov	r0, r4
   187ee:	f7ff ff1d 	bl	1862c <bt_att_chan_send_rsp.constprop.0>
   187f2:	2000      	movs	r0, #0
}
   187f4:	b007      	add	sp, #28
   187f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   187f8:	2012      	movs	r0, #18
   187fa:	e7fb      	b.n	187f4 <att_write_cmd+0x68>
		return BT_ATT_ERR_INVALID_HANDLE;
   187fc:	2001      	movs	r0, #1
   187fe:	e7f9      	b.n	187f4 <att_write_cmd+0x68>
   18800:	000218a3 	.word	0x000218a3

00018804 <bt_att_chan_create_pdu>:
{
   18804:	b538      	push	{r3, r4, r5, lr}
   18806:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   18808:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   1880c:	3201      	adds	r2, #1
   1880e:	428a      	cmp	r2, r1
   18810:	d911      	bls.n	18836 <bt_att_chan_create_pdu+0x32>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   18812:	4b1e      	ldr	r3, [pc, #120]	; (1888c <bt_att_chan_create_pdu+0x88>)
   18814:	6818      	ldr	r0, [r3, #0]
   18816:	f010 0f06 	tst.w	r0, #6
   1881a:	d102      	bne.n	18822 <bt_att_chan_create_pdu+0x1e>
		return NULL;
   1881c:	2400      	movs	r4, #0
}
   1881e:	4620      	mov	r0, r4
   18820:	bd38      	pop	{r3, r4, r5, pc}
   18822:	481b      	ldr	r0, [pc, #108]	; (18890 <bt_att_chan_create_pdu+0x8c>)
   18824:	1a1b      	subs	r3, r3, r0
   18826:	089b      	lsrs	r3, r3, #2
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   18828:	019b      	lsls	r3, r3, #6
   1882a:	481a      	ldr	r0, [pc, #104]	; (18894 <bt_att_chan_create_pdu+0x90>)
   1882c:	f043 0302 	orr.w	r3, r3, #2
   18830:	f006 fba2 	bl	1ef78 <log_2>
   18834:	e7f2      	b.n	1881c <bt_att_chan_create_pdu+0x18>
	switch (att_op_get_type(op)) {
   18836:	4628      	mov	r0, r5
   18838:	f008 fe2a 	bl	21490 <att_op_get_type>
   1883c:	2802      	cmp	r0, #2
   1883e:	d001      	beq.n	18844 <bt_att_chan_create_pdu+0x40>
   18840:	2804      	cmp	r0, #4
   18842:	d117      	bne.n	18874 <bt_att_chan_create_pdu+0x70>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   18844:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   18848:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1884a:	2100      	movs	r1, #0
   1884c:	4608      	mov	r0, r1
   1884e:	f008 fd7f 	bl	21350 <bt_l2cap_create_pdu_timeout>
   18852:	4604      	mov	r4, r0
	if (!buf) {
   18854:	b998      	cbnz	r0, 1887e <bt_att_chan_create_pdu+0x7a>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   18856:	4a0d      	ldr	r2, [pc, #52]	; (1888c <bt_att_chan_create_pdu+0x88>)
   18858:	6813      	ldr	r3, [r2, #0]
   1885a:	075b      	lsls	r3, r3, #29
   1885c:	d0de      	beq.n	1881c <bt_att_chan_create_pdu+0x18>
   1885e:	4b0c      	ldr	r3, [pc, #48]	; (18890 <bt_att_chan_create_pdu+0x8c>)
   18860:	480d      	ldr	r0, [pc, #52]	; (18898 <bt_att_chan_create_pdu+0x94>)
   18862:	1ad2      	subs	r2, r2, r3
   18864:	0892      	lsrs	r2, r2, #2
   18866:	0192      	lsls	r2, r2, #6
   18868:	f042 0201 	orr.w	r2, r2, #1
   1886c:	4629      	mov	r1, r5
   1886e:	f006 fb6f 	bl	1ef50 <log_1>
   18872:	e7d4      	b.n	1881e <bt_att_chan_create_pdu+0x1a>
		buf = bt_l2cap_create_pdu(NULL, 0);
   18874:	f04f 32ff 	mov.w	r2, #4294967295
   18878:	f04f 33ff 	mov.w	r3, #4294967295
   1887c:	e7e5      	b.n	1884a <bt_att_chan_create_pdu+0x46>
	return net_buf_simple_add(&buf->b, len);
   1887e:	2101      	movs	r1, #1
   18880:	3008      	adds	r0, #8
   18882:	f009 fc4a 	bl	2211a <net_buf_simple_add>
	hdr->code = op;
   18886:	7005      	strb	r5, [r0, #0]
	return buf;
   18888:	e7c9      	b.n	1881e <bt_att_chan_create_pdu+0x1a>
   1888a:	bf00      	nop
   1888c:	20000654 	.word	0x20000654
   18890:	20000654 	.word	0x20000654
   18894:	0002691a 	.word	0x0002691a
   18898:	000266e4 	.word	0x000266e4

0001889c <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   1889c:	898b      	ldrh	r3, [r1, #12]
{
   1889e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   188a2:	4604      	mov	r4, r0
   188a4:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   188a6:	b97b      	cbnz	r3, 188c8 <bt_att_recv+0x2c>
		BT_ERR("Too small ATT PDU received");
   188a8:	4957      	ldr	r1, [pc, #348]	; (18a08 <bt_att_recv+0x16c>)
   188aa:	680b      	ldr	r3, [r1, #0]
   188ac:	075d      	lsls	r5, r3, #29
   188ae:	d008      	beq.n	188c2 <bt_att_recv+0x26>
   188b0:	4b56      	ldr	r3, [pc, #344]	; (18a0c <bt_att_recv+0x170>)
   188b2:	4857      	ldr	r0, [pc, #348]	; (18a10 <bt_att_recv+0x174>)
   188b4:	1ac9      	subs	r1, r1, r3
   188b6:	0889      	lsrs	r1, r1, #2
   188b8:	0189      	lsls	r1, r1, #6
   188ba:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
   188be:	f006 fb3a 	bl	1ef36 <log_0>
}
   188c2:	2000      	movs	r0, #0
   188c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   188c8:	2101      	movs	r1, #1
   188ca:	f108 0008 	add.w	r0, r8, #8
   188ce:	f009 fc43 	bl	22158 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   188d2:	f854 3c08 	ldr.w	r3, [r4, #-8]
   188d6:	4605      	mov	r5, r0
   188d8:	2b00      	cmp	r3, #0
   188da:	d0f2      	beq.n	188c2 <bt_att_recv+0x26>
		if (hdr->code == handlers[i].op) {
   188dc:	4a4d      	ldr	r2, [pc, #308]	; (18a14 <bt_att_recv+0x178>)
   188de:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   188e0:	f1a4 0708 	sub.w	r7, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   188e4:	2300      	movs	r3, #0
   188e6:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   188e8:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   188ec:	4288      	cmp	r0, r1
   188ee:	d121      	bne.n	18934 <bt_att_recv+0x98>
		if (handler->type == ATT_REQUEST &&
   188f0:	00d8      	lsls	r0, r3, #3
   188f2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   188f6:	789e      	ldrb	r6, [r3, #2]
   188f8:	2e01      	cmp	r6, #1
   188fa:	d13c      	bne.n	18976 <bt_att_recv+0xda>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   188fc:	f3bf 8f5b 	dmb	ish
   18900:	34e8      	adds	r4, #232	; 0xe8
   18902:	e854 3f00 	ldrex	r3, [r4]
   18906:	f043 0201 	orr.w	r2, r3, #1
   1890a:	e844 2100 	strex	r1, r2, [r4]
   1890e:	2900      	cmp	r1, #0
   18910:	d1f7      	bne.n	18902 <bt_att_recv+0x66>
   18912:	f3bf 8f5b 	dmb	ish
   18916:	07dc      	lsls	r4, r3, #31
   18918:	d54b      	bpl.n	189b2 <bt_att_recv+0x116>
			BT_WARN("Ignoring unexpected request");
   1891a:	493b      	ldr	r1, [pc, #236]	; (18a08 <bt_att_recv+0x16c>)
   1891c:	680b      	ldr	r3, [r1, #0]
   1891e:	f013 0f06 	tst.w	r3, #6
   18922:	d0ce      	beq.n	188c2 <bt_att_recv+0x26>
   18924:	4b39      	ldr	r3, [pc, #228]	; (18a0c <bt_att_recv+0x170>)
   18926:	483c      	ldr	r0, [pc, #240]	; (18a18 <bt_att_recv+0x17c>)
   18928:	1ac9      	subs	r1, r1, r3
   1892a:	0889      	lsrs	r1, r1, #2
   1892c:	0189      	lsls	r1, r1, #6
   1892e:	f041 0102 	orr.w	r1, r1, #2
   18932:	e7c4      	b.n	188be <bt_att_recv+0x22>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   18934:	3301      	adds	r3, #1
   18936:	2b0d      	cmp	r3, #13
   18938:	d1d6      	bne.n	188e8 <bt_att_recv+0x4c>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   1893a:	4a33      	ldr	r2, [pc, #204]	; (18a08 <bt_att_recv+0x16c>)
   1893c:	6813      	ldr	r3, [r2, #0]
   1893e:	f013 0f06 	tst.w	r3, #6
   18942:	d008      	beq.n	18956 <bt_att_recv+0xba>
   18944:	4b31      	ldr	r3, [pc, #196]	; (18a0c <bt_att_recv+0x170>)
   18946:	4835      	ldr	r0, [pc, #212]	; (18a1c <bt_att_recv+0x180>)
   18948:	1ad2      	subs	r2, r2, r3
   1894a:	0892      	lsrs	r2, r2, #2
   1894c:	0192      	lsls	r2, r2, #6
   1894e:	f042 0202 	orr.w	r2, r2, #2
   18952:	f006 fafd 	bl	1ef50 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   18956:	7829      	ldrb	r1, [r5, #0]
   18958:	4608      	mov	r0, r1
   1895a:	f008 fd99 	bl	21490 <att_op_get_type>
   1895e:	2800      	cmp	r0, #0
   18960:	d0af      	beq.n	188c2 <bt_att_recv+0x26>
   18962:	2805      	cmp	r0, #5
   18964:	d0ad      	beq.n	188c2 <bt_att_recv+0x26>
	if (!req) {
   18966:	2900      	cmp	r1, #0
   18968:	d0ab      	beq.n	188c2 <bt_att_recv+0x26>
   1896a:	2306      	movs	r3, #6
   1896c:	2200      	movs	r2, #0
   1896e:	4638      	mov	r0, r7
   18970:	f009 f830 	bl	219d4 <send_err_rsp.part.0>
   18974:	e7a5      	b.n	188c2 <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   18976:	2e05      	cmp	r6, #5
   18978:	d11b      	bne.n	189b2 <bt_att_recv+0x116>
   1897a:	f3bf 8f5b 	dmb	ish
   1897e:	34e8      	adds	r4, #232	; 0xe8
   18980:	e854 3f00 	ldrex	r3, [r4]
   18984:	f043 0202 	orr.w	r2, r3, #2
   18988:	e844 2100 	strex	r1, r2, [r4]
   1898c:	2900      	cmp	r1, #0
   1898e:	d1f7      	bne.n	18980 <bt_att_recv+0xe4>
   18990:	f3bf 8f5b 	dmb	ish
   18994:	0799      	lsls	r1, r3, #30
   18996:	d50c      	bpl.n	189b2 <bt_att_recv+0x116>
			BT_WARN("Ignoring unexpected indication");
   18998:	491b      	ldr	r1, [pc, #108]	; (18a08 <bt_att_recv+0x16c>)
   1899a:	680b      	ldr	r3, [r1, #0]
   1899c:	f013 0f06 	tst.w	r3, #6
   189a0:	d08f      	beq.n	188c2 <bt_att_recv+0x26>
   189a2:	4b1a      	ldr	r3, [pc, #104]	; (18a0c <bt_att_recv+0x170>)
   189a4:	481e      	ldr	r0, [pc, #120]	; (18a20 <bt_att_recv+0x184>)
   189a6:	1ac9      	subs	r1, r1, r3
   189a8:	0889      	lsrs	r1, r1, #2
   189aa:	0189      	lsls	r1, r1, #6
   189ac:	f041 0102 	orr.w	r1, r1, #2
   189b0:	e785      	b.n	188be <bt_att_recv+0x22>
	if (buf->len < handler->expect_len) {
   189b2:	eb0c 0300 	add.w	r3, ip, r0
   189b6:	f8b8 100c 	ldrh.w	r1, [r8, #12]
   189ba:	785a      	ldrb	r2, [r3, #1]
   189bc:	428a      	cmp	r2, r1
   189be:	d912      	bls.n	189e6 <bt_att_recv+0x14a>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   189c0:	4b11      	ldr	r3, [pc, #68]	; (18a08 <bt_att_recv+0x16c>)
   189c2:	681a      	ldr	r2, [r3, #0]
   189c4:	0752      	lsls	r2, r2, #29
   189c6:	d009      	beq.n	189dc <bt_att_recv+0x140>
   189c8:	4a10      	ldr	r2, [pc, #64]	; (18a0c <bt_att_recv+0x170>)
   189ca:	4816      	ldr	r0, [pc, #88]	; (18a24 <bt_att_recv+0x188>)
   189cc:	1a9b      	subs	r3, r3, r2
   189ce:	089b      	lsrs	r3, r3, #2
   189d0:	019b      	lsls	r3, r3, #6
   189d2:	782a      	ldrb	r2, [r5, #0]
   189d4:	f043 0301 	orr.w	r3, r3, #1
   189d8:	f006 face 	bl	1ef78 <log_2>
	if (handler->type == ATT_REQUEST && err) {
   189dc:	2e01      	cmp	r6, #1
   189de:	f47f af70 	bne.w	188c2 <bt_att_recv+0x26>
   189e2:	2304      	movs	r3, #4
   189e4:	e00a      	b.n	189fc <bt_att_recv+0x160>
		err = handler->func(att_chan, buf);
   189e6:	685b      	ldr	r3, [r3, #4]
   189e8:	4641      	mov	r1, r8
   189ea:	4638      	mov	r0, r7
   189ec:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   189ee:	2e01      	cmp	r6, #1
		err = handler->func(att_chan, buf);
   189f0:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   189f2:	f47f af66 	bne.w	188c2 <bt_att_recv+0x26>
   189f6:	2800      	cmp	r0, #0
   189f8:	f43f af63 	beq.w	188c2 <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   189fc:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   189fe:	2900      	cmp	r1, #0
   18a00:	f43f af5f 	beq.w	188c2 <bt_att_recv+0x26>
   18a04:	e7b2      	b.n	1896c <bt_att_recv+0xd0>
   18a06:	bf00      	nop
   18a08:	20000654 	.word	0x20000654
   18a0c:	20000654 	.word	0x20000654
   18a10:	0002693f 	.word	0x0002693f
   18a14:	00024078 	.word	0x00024078
   18a18:	00026974 	.word	0x00026974
   18a1c:	0002695a 	.word	0x0002695a
   18a20:	00026990 	.word	0x00026990
   18a24:	000269af 	.word	0x000269af

00018a28 <att_write_req>:
{
   18a28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18a2c:	4604      	mov	r4, r0
   18a2e:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   18a30:	f101 0008 	add.w	r0, r1, #8
   18a34:	460d      	mov	r5, r1
   18a36:	f009 fb9f 	bl	22178 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   18a3a:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
   18a3c:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   18a40:	89ad      	ldrh	r5, [r5, #12]
   18a42:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   18a44:	2101      	movs	r1, #1
   18a46:	6818      	ldr	r0, [r3, #0]
   18a48:	f009 fab3 	bl	21fb2 <bt_gatt_change_aware>
   18a4c:	2800      	cmp	r0, #0
   18a4e:	d03f      	beq.n	18ad0 <att_write_req+0xa8>
	if (!handle) {
   18a50:	2e00      	cmp	r6, #0
   18a52:	d03f      	beq.n	18ad4 <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
   18a54:	2218      	movs	r2, #24
   18a56:	2100      	movs	r1, #0
   18a58:	4668      	mov	r0, sp
   18a5a:	f008 f9a9 	bl	20db0 <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   18a5e:	2200      	movs	r2, #0
   18a60:	2113      	movs	r1, #19
   18a62:	4620      	mov	r0, r4
   18a64:	f7ff fece 	bl	18804 <bt_att_chan_create_pdu>
   18a68:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   18a6a:	b378      	cbz	r0, 18acc <att_write_req+0xa4>
	data.conn = chan->att->conn;
   18a6c:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   18a6e:	4a1a      	ldr	r2, [pc, #104]	; (18ad8 <att_write_req+0xb0>)
	data.conn = chan->att->conn;
   18a70:	681b      	ldr	r3, [r3, #0]
   18a72:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   18a74:	2301      	movs	r3, #1
   18a76:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
   18a7a:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
   18a7e:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   18a80:	466b      	mov	r3, sp
   18a82:	4631      	mov	r1, r6
   18a84:	4630      	mov	r0, r6
	data.len = len;
   18a86:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   18a8a:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   18a8e:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   18a92:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   18a96:	f008 fd5e 	bl	21556 <bt_gatt_foreach_attr>
	if (data.err) {
   18a9a:	f89d 5014 	ldrb.w	r5, [sp, #20]
   18a9e:	b175      	cbz	r5, 18abe <att_write_req+0x96>
			net_buf_unref(data.buf);
   18aa0:	9801      	ldr	r0, [sp, #4]
   18aa2:	f001 fa1f 	bl	19ee4 <net_buf_unref>
	if (!req) {
   18aa6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   18aaa:	4632      	mov	r2, r6
   18aac:	4641      	mov	r1, r8
   18aae:	4620      	mov	r0, r4
   18ab0:	f008 ff90 	bl	219d4 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   18ab4:	463d      	mov	r5, r7
}
   18ab6:	4628      	mov	r0, r5
   18ab8:	b007      	add	sp, #28
   18aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   18abe:	9901      	ldr	r1, [sp, #4]
   18ac0:	2900      	cmp	r1, #0
   18ac2:	d0f8      	beq.n	18ab6 <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18ac4:	4620      	mov	r0, r4
   18ac6:	f7ff fdb1 	bl	1862c <bt_att_chan_send_rsp.constprop.0>
   18aca:	e7f4      	b.n	18ab6 <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   18acc:	250e      	movs	r5, #14
   18ace:	e7f2      	b.n	18ab6 <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   18ad0:	2512      	movs	r5, #18
   18ad2:	e7f0      	b.n	18ab6 <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   18ad4:	2501      	movs	r5, #1
   18ad6:	e7ee      	b.n	18ab6 <att_write_req+0x8e>
   18ad8:	000218a3 	.word	0x000218a3

00018adc <bt_att_create_pdu>:
{
   18adc:	b538      	push	{r3, r4, r5, lr}
   18ade:	460d      	mov	r5, r1
   18ae0:	4614      	mov	r4, r2
	att = att_get(conn);
   18ae2:	f7ff fd57 	bl	18594 <att_get>
	if (!att) {
   18ae6:	b1e8      	cbz	r0, 18b24 <bt_att_create_pdu+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18ae8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   18aea:	b163      	cbz	r3, 18b06 <bt_att_create_pdu+0x2a>
   18aec:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   18af0:	d009      	beq.n	18b06 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   18af2:	681b      	ldr	r3, [r3, #0]
   18af4:	b10b      	cbz	r3, 18afa <bt_att_create_pdu+0x1e>
   18af6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   18afa:	1c61      	adds	r1, r4, #1
   18afc:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
   18b00:	4291      	cmp	r1, r2
   18b02:	d911      	bls.n	18b28 <bt_att_create_pdu+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18b04:	b9b3      	cbnz	r3, 18b34 <bt_att_create_pdu+0x58>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   18b06:	4b11      	ldr	r3, [pc, #68]	; (18b4c <bt_att_create_pdu+0x70>)
   18b08:	681a      	ldr	r2, [r3, #0]
   18b0a:	f012 0f06 	tst.w	r2, #6
   18b0e:	d009      	beq.n	18b24 <bt_att_create_pdu+0x48>
   18b10:	4a0f      	ldr	r2, [pc, #60]	; (18b50 <bt_att_create_pdu+0x74>)
   18b12:	4810      	ldr	r0, [pc, #64]	; (18b54 <bt_att_create_pdu+0x78>)
   18b14:	1a9b      	subs	r3, r3, r2
   18b16:	089b      	lsrs	r3, r3, #2
   18b18:	019b      	lsls	r3, r3, #6
   18b1a:	f043 0202 	orr.w	r2, r3, #2
   18b1e:	1c61      	adds	r1, r4, #1
   18b20:	f006 fa16 	bl	1ef50 <log_1>
}
   18b24:	2000      	movs	r0, #0
   18b26:	bd38      	pop	{r3, r4, r5, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   18b28:	4622      	mov	r2, r4
   18b2a:	4629      	mov	r1, r5
}
   18b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   18b30:	f7ff be68 	b.w	18804 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   18b34:	f513 72a2 	adds.w	r2, r3, #324	; 0x144
   18b38:	d004      	beq.n	18b44 <bt_att_create_pdu+0x68>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   18b3a:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18b3e:	b10a      	cbz	r2, 18b44 <bt_att_create_pdu+0x68>
   18b40:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   18b44:	4618      	mov	r0, r3
   18b46:	4613      	mov	r3, r2
   18b48:	e7d8      	b.n	18afc <bt_att_create_pdu+0x20>
   18b4a:	bf00      	nop
   18b4c:	20000654 	.word	0x20000654
   18b50:	20000654 	.word	0x20000654
   18b54:	000269ce 	.word	0x000269ce

00018b58 <att_read_group_req>:
{
   18b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   18b5c:	7b0c      	ldrb	r4, [r1, #12]
   18b5e:	3c04      	subs	r4, #4
   18b60:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   18b62:	2c02      	cmp	r4, #2
{
   18b64:	4605      	mov	r5, r0
   18b66:	b08c      	sub	sp, #48	; 0x30
   18b68:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   18b6a:	d001      	beq.n	18b70 <att_read_group_req+0x18>
   18b6c:	2c10      	cmp	r4, #16
   18b6e:	d16e      	bne.n	18c4e <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
   18b70:	2104      	movs	r1, #4
   18b72:	3008      	adds	r0, #8
   18b74:	f009 faf0 	bl	22158 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   18b78:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   18b7c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   18b7e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   18b80:	1d01      	adds	r1, r0, #4
   18b82:	4622      	mov	r2, r4
   18b84:	4640      	mov	r0, r8
   18b86:	f008 f974 	bl	20e72 <bt_uuid_create>
   18b8a:	2800      	cmp	r0, #0
   18b8c:	d061      	beq.n	18c52 <att_read_group_req+0xfa>
	if (!start || !end) {
   18b8e:	2e00      	cmp	r6, #0
   18b90:	d03a      	beq.n	18c08 <att_read_group_req+0xb0>
   18b92:	2400      	movs	r4, #0
   18b94:	2f00      	cmp	r7, #0
   18b96:	d036      	beq.n	18c06 <att_read_group_req+0xae>
	if (start > end) {
   18b98:	42b7      	cmp	r7, r6
   18b9a:	d335      	bcc.n	18c08 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   18b9c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18ba0:	a901      	add	r1, sp, #4
   18ba2:	4640      	mov	r0, r8
   18ba4:	f88d 4004 	strb.w	r4, [sp, #4]
   18ba8:	f8ad 3006 	strh.w	r3, [sp, #6]
   18bac:	f008 f937 	bl	20e1e <bt_uuid_cmp>
   18bb0:	2800      	cmp	r0, #0
   18bb2:	d134      	bne.n	18c1e <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   18bb4:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   18bb6:	2214      	movs	r2, #20
   18bb8:	2100      	movs	r1, #0
   18bba:	a807      	add	r0, sp, #28
   18bbc:	f008 f8f8 	bl	20db0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   18bc0:	2201      	movs	r2, #1
   18bc2:	2111      	movs	r1, #17
   18bc4:	4620      	mov	r0, r4
   18bc6:	f7ff ff89 	bl	18adc <bt_att_create_pdu>
   18bca:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   18bcc:	2800      	cmp	r0, #0
   18bce:	d040      	beq.n	18c52 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
   18bd0:	2101      	movs	r1, #1
   18bd2:	3008      	adds	r0, #8
	data.uuid = uuid;
   18bd4:	e9cd 5807 	strd	r5, r8, [sp, #28]
   18bd8:	f009 fa9f 	bl	2211a <net_buf_simple_add>
	data.rsp->len = 0U;
   18bdc:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   18be0:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   18be2:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   18be4:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   18be8:	4a1b      	ldr	r2, [pc, #108]	; (18c58 <att_read_group_req+0x100>)
	data.group = NULL;
   18bea:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   18bee:	4639      	mov	r1, r7
   18bf0:	4630      	mov	r0, r6
   18bf2:	f008 fcb0 	bl	21556 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   18bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18bf8:	781c      	ldrb	r4, [r3, #0]
   18bfa:	bb1c      	cbnz	r4, 18c44 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   18bfc:	9809      	ldr	r0, [sp, #36]	; 0x24
   18bfe:	f001 f971 	bl	19ee4 <net_buf_unref>
	if (!req) {
   18c02:	230a      	movs	r3, #10
   18c04:	e018      	b.n	18c38 <att_read_group_req+0xe0>
			*err = 0U;
   18c06:	463e      	mov	r6, r7
	if (!req) {
   18c08:	2301      	movs	r3, #1
   18c0a:	4632      	mov	r2, r6
   18c0c:	2110      	movs	r1, #16
   18c0e:	4628      	mov	r0, r5
   18c10:	f008 fee0 	bl	219d4 <send_err_rsp.part.0>
		return 0;
   18c14:	2400      	movs	r4, #0
}
   18c16:	4620      	mov	r0, r4
   18c18:	b00c      	add	sp, #48	; 0x30
   18c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   18c1e:	f642 0301 	movw	r3, #10241	; 0x2801
   18c22:	a907      	add	r1, sp, #28
   18c24:	4640      	mov	r0, r8
   18c26:	f88d 401c 	strb.w	r4, [sp, #28]
   18c2a:	f8ad 301e 	strh.w	r3, [sp, #30]
   18c2e:	f008 f8f6 	bl	20e1e <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   18c32:	2800      	cmp	r0, #0
   18c34:	d0be      	beq.n	18bb4 <att_read_group_req+0x5c>
	if (!req) {
   18c36:	2310      	movs	r3, #16
   18c38:	4632      	mov	r2, r6
   18c3a:	2110      	movs	r1, #16
   18c3c:	4628      	mov	r0, r5
   18c3e:	f008 fec9 	bl	219d4 <send_err_rsp.part.0>
		return 0;
   18c42:	e7e8      	b.n	18c16 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18c44:	9909      	ldr	r1, [sp, #36]	; 0x24
   18c46:	4628      	mov	r0, r5
   18c48:	f7ff fcf0 	bl	1862c <bt_att_chan_send_rsp.constprop.0>
	return 0;
   18c4c:	e7e2      	b.n	18c14 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   18c4e:	2404      	movs	r4, #4
   18c50:	e7e1      	b.n	18c16 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   18c52:	240e      	movs	r4, #14
   18c54:	e7df      	b.n	18c16 <att_read_group_req+0xbe>
   18c56:	bf00      	nop
   18c58:	000182cd 	.word	0x000182cd

00018c5c <att_read_mult_req>:
{
   18c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   18c60:	6886      	ldr	r6, [r0, #8]
{
   18c62:	b085      	sub	sp, #20
   18c64:	4604      	mov	r4, r0
   18c66:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   18c68:	4630      	mov	r0, r6
   18c6a:	2101      	movs	r1, #1
   18c6c:	f009 f9a1 	bl	21fb2 <bt_gatt_change_aware>
   18c70:	b3b8      	cbz	r0, 18ce2 <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
   18c72:	2210      	movs	r2, #16
   18c74:	2100      	movs	r1, #0
   18c76:	4668      	mov	r0, sp
   18c78:	f008 f89a 	bl	20db0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   18c7c:	2200      	movs	r2, #0
   18c7e:	210f      	movs	r1, #15
   18c80:	4630      	mov	r0, r6
   18c82:	f7ff ff2b 	bl	18adc <bt_att_create_pdu>
   18c86:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   18c88:	b368      	cbz	r0, 18ce6 <att_read_mult_req+0x8a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18c8a:	f8df 9060 	ldr.w	r9, [pc, #96]	; 18cec <att_read_mult_req+0x90>
	data.chan = chan;
   18c8e:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   18c90:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   18c94:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   18c98:	89ab      	ldrh	r3, [r5, #12]
   18c9a:	2b01      	cmp	r3, #1
   18c9c:	d804      	bhi.n	18ca8 <att_read_mult_req+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18c9e:	9902      	ldr	r1, [sp, #8]
   18ca0:	4620      	mov	r0, r4
   18ca2:	f7ff fcc3 	bl	1862c <bt_att_chan_send_rsp.constprop.0>
   18ca6:	e018      	b.n	18cda <att_read_mult_req+0x7e>
   18ca8:	4638      	mov	r0, r7
   18caa:	f009 fa65 	bl	22178 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18cae:	466b      	mov	r3, sp
   18cb0:	464a      	mov	r2, r9
   18cb2:	4601      	mov	r1, r0
   18cb4:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   18cb6:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18cba:	f008 fc4c 	bl	21556 <bt_gatt_foreach_attr>
		if (data.err) {
   18cbe:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18cc2:	2b00      	cmp	r3, #0
   18cc4:	d0e8      	beq.n	18c98 <att_read_mult_req+0x3c>
			net_buf_unref(data.buf);
   18cc6:	9802      	ldr	r0, [sp, #8]
   18cc8:	f001 f90c 	bl	19ee4 <net_buf_unref>
	if (!req) {
   18ccc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18cd0:	4632      	mov	r2, r6
   18cd2:	210e      	movs	r1, #14
   18cd4:	4620      	mov	r0, r4
   18cd6:	f008 fe7d 	bl	219d4 <send_err_rsp.part.0>
	return 0;
   18cda:	2000      	movs	r0, #0
}
   18cdc:	b005      	add	sp, #20
   18cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   18ce2:	2012      	movs	r0, #18
   18ce4:	e7fa      	b.n	18cdc <att_read_mult_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
   18ce6:	200e      	movs	r0, #14
   18ce8:	e7f8      	b.n	18cdc <att_read_mult_req+0x80>
   18cea:	bf00      	nop
   18cec:	00021981 	.word	0x00021981

00018cf0 <att_read_rsp>:
{
   18cf0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   18cf4:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   18cf8:	4605      	mov	r5, r0
   18cfa:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   18cfc:	4640      	mov	r0, r8
   18cfe:	2101      	movs	r1, #1
{
   18d00:	4614      	mov	r4, r2
   18d02:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   18d04:	f009 f955 	bl	21fb2 <bt_gatt_change_aware>
   18d08:	b388      	cbz	r0, 18d6e <att_read_rsp+0x7e>
	if (!handle) {
   18d0a:	b396      	cbz	r6, 18d72 <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
   18d0c:	2210      	movs	r2, #16
   18d0e:	2100      	movs	r1, #0
   18d10:	4668      	mov	r0, sp
   18d12:	f008 f84d 	bl	20db0 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   18d16:	2200      	movs	r2, #0
   18d18:	4621      	mov	r1, r4
   18d1a:	4640      	mov	r0, r8
   18d1c:	f7ff fede 	bl	18adc <bt_att_create_pdu>
   18d20:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   18d22:	b340      	cbz	r0, 18d76 <att_read_rsp+0x86>
	data.offset = offset;
   18d24:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   18d28:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   18d2c:	2301      	movs	r3, #1
   18d2e:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18d32:	4a12      	ldr	r2, [pc, #72]	; (18d7c <att_read_rsp+0x8c>)
	data.chan = chan;
   18d34:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18d36:	466b      	mov	r3, sp
   18d38:	4631      	mov	r1, r6
   18d3a:	4630      	mov	r0, r6
   18d3c:	f008 fc0b 	bl	21556 <bt_gatt_foreach_attr>
	if (data.err) {
   18d40:	f89d 400c 	ldrb.w	r4, [sp, #12]
   18d44:	b174      	cbz	r4, 18d64 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   18d46:	9802      	ldr	r0, [sp, #8]
   18d48:	f001 f8cc 	bl	19ee4 <net_buf_unref>
	if (!req) {
   18d4c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18d50:	4632      	mov	r2, r6
   18d52:	4639      	mov	r1, r7
   18d54:	4628      	mov	r0, r5
   18d56:	f008 fe3d 	bl	219d4 <send_err_rsp.part.0>
		return 0;
   18d5a:	2400      	movs	r4, #0
}
   18d5c:	4620      	mov	r0, r4
   18d5e:	b004      	add	sp, #16
   18d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18d64:	9902      	ldr	r1, [sp, #8]
   18d66:	4628      	mov	r0, r5
   18d68:	f7ff fc60 	bl	1862c <bt_att_chan_send_rsp.constprop.0>
	return 0;
   18d6c:	e7f6      	b.n	18d5c <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   18d6e:	2412      	movs	r4, #18
   18d70:	e7f4      	b.n	18d5c <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   18d72:	2401      	movs	r4, #1
   18d74:	e7f2      	b.n	18d5c <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   18d76:	240e      	movs	r4, #14
   18d78:	e7f0      	b.n	18d5c <att_read_rsp+0x6c>
   18d7a:	bf00      	nop
   18d7c:	00021981 	.word	0x00021981

00018d80 <att_read_type_req>:
{
   18d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   18d84:	7b0c      	ldrb	r4, [r1, #12]
   18d86:	3c04      	subs	r4, #4
   18d88:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   18d8a:	2c02      	cmp	r4, #2
{
   18d8c:	4605      	mov	r5, r0
   18d8e:	b08c      	sub	sp, #48	; 0x30
   18d90:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   18d92:	d001      	beq.n	18d98 <att_read_type_req+0x18>
   18d94:	2c10      	cmp	r4, #16
   18d96:	d14f      	bne.n	18e38 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
   18d98:	2104      	movs	r1, #4
   18d9a:	3008      	adds	r0, #8
   18d9c:	f009 f9dc 	bl	22158 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   18da0:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   18da4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   18da6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   18da8:	1d01      	adds	r1, r0, #4
   18daa:	4622      	mov	r2, r4
   18dac:	4640      	mov	r0, r8
   18dae:	f008 f860 	bl	20e72 <bt_uuid_create>
   18db2:	b188      	cbz	r0, 18dd8 <att_read_type_req+0x58>
	if (!start || !end) {
   18db4:	b19e      	cbz	r6, 18dde <att_read_type_req+0x5e>
   18db6:	b18f      	cbz	r7, 18ddc <att_read_type_req+0x5c>
	if (start > end) {
   18db8:	42be      	cmp	r6, r7
   18dba:	d810      	bhi.n	18dde <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   18dbc:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   18dbe:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   18dc0:	2100      	movs	r1, #0
   18dc2:	eb0d 0002 	add.w	r0, sp, r2
   18dc6:	f007 fff3 	bl	20db0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   18dca:	2201      	movs	r2, #1
   18dcc:	2109      	movs	r1, #9
   18dce:	4620      	mov	r0, r4
   18dd0:	f7ff fe84 	bl	18adc <bt_att_create_pdu>
   18dd4:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   18dd6:	b968      	cbnz	r0, 18df4 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   18dd8:	240e      	movs	r4, #14
   18dda:	e007      	b.n	18dec <att_read_type_req+0x6c>
			*err = 0U;
   18ddc:	463e      	mov	r6, r7
	if (!req) {
   18dde:	2301      	movs	r3, #1
   18de0:	4632      	mov	r2, r6
   18de2:	2108      	movs	r1, #8
   18de4:	4628      	mov	r0, r5
   18de6:	f008 fdf5 	bl	219d4 <send_err_rsp.part.0>
		return 0;
   18dea:	2400      	movs	r4, #0
}
   18dec:	4620      	mov	r0, r4
   18dee:	b00c      	add	sp, #48	; 0x30
   18df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   18df4:	2101      	movs	r1, #1
   18df6:	3008      	adds	r0, #8
	data.uuid = uuid;
   18df8:	e9cd 5806 	strd	r5, r8, [sp, #24]
   18dfc:	f009 f98d 	bl	2211a <net_buf_simple_add>
	data.rsp->len = 0U;
   18e00:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18e04:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   18e06:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   18e08:	4a0c      	ldr	r2, [pc, #48]	; (18e3c <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   18e0a:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   18e0e:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18e10:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   18e14:	4630      	mov	r0, r6
   18e16:	ab06      	add	r3, sp, #24
   18e18:	f008 fb9d 	bl	21556 <bt_gatt_foreach_attr>
	if (data.err) {
   18e1c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   18e20:	b12c      	cbz	r4, 18e2e <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   18e22:	9808      	ldr	r0, [sp, #32]
   18e24:	f001 f85e 	bl	19ee4 <net_buf_unref>
	if (!req) {
   18e28:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   18e2c:	e7d8      	b.n	18de0 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18e2e:	9908      	ldr	r1, [sp, #32]
   18e30:	4628      	mov	r0, r5
   18e32:	f7ff fbfb 	bl	1862c <bt_att_chan_send_rsp.constprop.0>
	return 0;
   18e36:	e7d9      	b.n	18dec <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   18e38:	2404      	movs	r4, #4
   18e3a:	e7d7      	b.n	18dec <att_read_type_req+0x6c>
   18e3c:	00018379 	.word	0x00018379

00018e40 <att_find_type_req>:
{
   18e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18e44:	4688      	mov	r8, r1
   18e46:	b086      	sub	sp, #24
   18e48:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   18e4a:	2106      	movs	r1, #6
   18e4c:	f108 0008 	add.w	r0, r8, #8
   18e50:	f009 f982 	bl	22158 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   18e54:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   18e56:	b317      	cbz	r7, 18e9e <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   18e58:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   18e5c:	f1b9 0f00 	cmp.w	r9, #0
   18e60:	d01c      	beq.n	18e9c <att_find_type_req+0x5c>
	if (start > end) {
   18e62:	45b9      	cmp	r9, r7
   18e64:	d31b      	bcc.n	18e9e <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   18e66:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   18e68:	f8ad 3002 	strh.w	r3, [sp, #2]
   18e6c:	2400      	movs	r4, #0
   18e6e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18e72:	a901      	add	r1, sp, #4
   18e74:	4668      	mov	r0, sp
	value = buf->data;
   18e76:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   18e7a:	f88d 4000 	strb.w	r4, [sp]
   18e7e:	f88d 4004 	strb.w	r4, [sp, #4]
   18e82:	f8ad 3006 	strh.w	r3, [sp, #6]
   18e86:	f007 ffca 	bl	20e1e <bt_uuid_cmp>
   18e8a:	4606      	mov	r6, r0
   18e8c:	b190      	cbz	r0, 18eb4 <att_find_type_req+0x74>
	if (!req) {
   18e8e:	230a      	movs	r3, #10
   18e90:	463a      	mov	r2, r7
   18e92:	2106      	movs	r1, #6
   18e94:	4628      	mov	r0, r5
   18e96:	f008 fd9d 	bl	219d4 <send_err_rsp.part.0>
		return 0;
   18e9a:	e007      	b.n	18eac <att_find_type_req+0x6c>
			*err = 0U;
   18e9c:	464f      	mov	r7, r9
	if (!req) {
   18e9e:	2301      	movs	r3, #1
   18ea0:	463a      	mov	r2, r7
   18ea2:	2106      	movs	r1, #6
   18ea4:	4628      	mov	r0, r5
   18ea6:	f008 fd95 	bl	219d4 <send_err_rsp.part.0>
		return 0;
   18eaa:	2400      	movs	r4, #0
}
   18eac:	4620      	mov	r0, r4
   18eae:	b006      	add	sp, #24
   18eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   18eb4:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   18eb8:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   18ebc:	4601      	mov	r1, r0
   18ebe:	2214      	movs	r2, #20
   18ec0:	a801      	add	r0, sp, #4
   18ec2:	f007 ff75 	bl	20db0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   18ec6:	4632      	mov	r2, r6
   18ec8:	2107      	movs	r1, #7
   18eca:	4640      	mov	r0, r8
   18ecc:	f7ff fe06 	bl	18adc <bt_att_create_pdu>
   18ed0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   18ed2:	b1d8      	cbz	r0, 18f0c <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18ed4:	230a      	movs	r3, #10
   18ed6:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   18eda:	4a0d      	ldr	r2, [pc, #52]	; (18f10 <att_find_type_req+0xd0>)
	data.value_len = value_len;
   18edc:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   18ee0:	ab01      	add	r3, sp, #4
   18ee2:	4649      	mov	r1, r9
   18ee4:	4638      	mov	r0, r7
	data.value = value;
   18ee6:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   18eea:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   18eec:	f008 fb33 	bl	21556 <bt_gatt_foreach_attr>
	if (data.err) {
   18ef0:	f89d 4015 	ldrb.w	r4, [sp, #21]
   18ef4:	b12c      	cbz	r4, 18f02 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   18ef6:	9802      	ldr	r0, [sp, #8]
   18ef8:	f000 fff4 	bl	19ee4 <net_buf_unref>
	if (!req) {
   18efc:	f89d 3015 	ldrb.w	r3, [sp, #21]
   18f00:	e7ce      	b.n	18ea0 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18f02:	9902      	ldr	r1, [sp, #8]
   18f04:	4628      	mov	r0, r5
   18f06:	f7ff fb91 	bl	1862c <bt_att_chan_send_rsp.constprop.0>
	return 0;
   18f0a:	e7cf      	b.n	18eac <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   18f0c:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   18f0e:	e7cd      	b.n	18eac <att_find_type_req+0x6c>
   18f10:	00018421 	.word	0x00018421

00018f14 <att_find_info_req>:
{
   18f14:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   18f16:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   18f18:	881e      	ldrh	r6, [r3, #0]
{
   18f1a:	b085      	sub	sp, #20
   18f1c:	4605      	mov	r5, r0
	if (!start || !end) {
   18f1e:	b19e      	cbz	r6, 18f48 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   18f20:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   18f22:	b184      	cbz	r4, 18f46 <att_find_info_req+0x32>
	if (start > end) {
   18f24:	42a6      	cmp	r6, r4
   18f26:	d80f      	bhi.n	18f48 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   18f28:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   18f2a:	2210      	movs	r2, #16
   18f2c:	2100      	movs	r1, #0
   18f2e:	4668      	mov	r0, sp
   18f30:	f007 ff3e 	bl	20db0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   18f34:	2200      	movs	r2, #0
   18f36:	2105      	movs	r1, #5
   18f38:	4638      	mov	r0, r7
   18f3a:	f7ff fdcf 	bl	18adc <bt_att_create_pdu>
   18f3e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   18f40:	b958      	cbnz	r0, 18f5a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   18f42:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   18f44:	e007      	b.n	18f56 <att_find_info_req+0x42>
			*err = 0U;
   18f46:	4626      	mov	r6, r4
	if (!req) {
   18f48:	2301      	movs	r3, #1
   18f4a:	4632      	mov	r2, r6
   18f4c:	2104      	movs	r1, #4
   18f4e:	4628      	mov	r0, r5
   18f50:	f008 fd40 	bl	219d4 <send_err_rsp.part.0>
	return 0;
   18f54:	2000      	movs	r0, #0
}
   18f56:	b005      	add	sp, #20
   18f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   18f5a:	4621      	mov	r1, r4
   18f5c:	4a08      	ldr	r2, [pc, #32]	; (18f80 <att_find_info_req+0x6c>)
	data.chan = chan;
   18f5e:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   18f60:	466b      	mov	r3, sp
   18f62:	4630      	mov	r0, r6
   18f64:	f008 faf7 	bl	21556 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   18f68:	9c02      	ldr	r4, [sp, #8]
   18f6a:	b924      	cbnz	r4, 18f76 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   18f6c:	9801      	ldr	r0, [sp, #4]
   18f6e:	f000 ffb9 	bl	19ee4 <net_buf_unref>
	if (!req) {
   18f72:	230a      	movs	r3, #10
   18f74:	e7e9      	b.n	18f4a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18f76:	9901      	ldr	r1, [sp, #4]
   18f78:	4628      	mov	r0, r5
   18f7a:	f7ff fb57 	bl	1862c <bt_att_chan_send_rsp.constprop.0>
   18f7e:	e7e9      	b.n	18f54 <att_find_info_req+0x40>
   18f80:	00021683 	.word	0x00021683

00018f84 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   18f84:	b513      	push	{r0, r1, r4, lr}
   18f86:	4602      	mov	r2, r0
   18f88:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   18f8a:	4808      	ldr	r0, [pc, #32]	; (18fac <bt_att_req_alloc+0x28>)
   18f8c:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   18f8e:	2400      	movs	r4, #0
   18f90:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   18f92:	f003 fe8b 	bl	1ccac <k_mem_slab_alloc>
   18f96:	4601      	mov	r1, r0
   18f98:	b930      	cbnz	r0, 18fa8 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   18f9a:	9801      	ldr	r0, [sp, #4]
   18f9c:	2210      	movs	r2, #16
   18f9e:	f007 ff07 	bl	20db0 <memset>

	return req;
   18fa2:	9801      	ldr	r0, [sp, #4]
}
   18fa4:	b002      	add	sp, #8
   18fa6:	bd10      	pop	{r4, pc}
		return NULL;
   18fa8:	4620      	mov	r0, r4
   18faa:	e7fb      	b.n	18fa4 <bt_att_req_alloc+0x20>
   18fac:	200006f4 	.word	0x200006f4

00018fb0 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   18fb0:	b507      	push	{r0, r1, r2, lr}
   18fb2:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   18fb4:	6880      	ldr	r0, [r0, #8]
   18fb6:	b120      	cbz	r0, 18fc2 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   18fb8:	f000 ff94 	bl	19ee4 <net_buf_unref>
		req->buf = NULL;
   18fbc:	9b01      	ldr	r3, [sp, #4]
   18fbe:	2200      	movs	r2, #0
   18fc0:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   18fc2:	4803      	ldr	r0, [pc, #12]	; (18fd0 <bt_att_req_free+0x20>)
   18fc4:	a901      	add	r1, sp, #4
   18fc6:	f009 fc40 	bl	2284a <k_mem_slab_free>
}
   18fca:	b003      	add	sp, #12
   18fcc:	f85d fb04 	ldr.w	pc, [sp], #4
   18fd0:	200006f4 	.word	0x200006f4

00018fd4 <att_handle_rsp>:
{
   18fd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18fd8:	4605      	mov	r5, r0
	k_work_cancel_delayable(&chan->timeout_work);
   18fda:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
   18fde:	460f      	mov	r7, r1
   18fe0:	4690      	mov	r8, r2
   18fe2:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   18fe4:	f009 fe12 	bl	22c0c <k_work_cancel_delayable>
	if (!chan->req) {
   18fe8:	f8d5 a0f4 	ldr.w	sl, [r5, #244]	; 0xf4
   18fec:	f1ba 0f00 	cmp.w	sl, #0
   18ff0:	d11e      	bne.n	19030 <att_handle_rsp+0x5c>
		BT_WARN("No pending ATT request");
   18ff2:	481a      	ldr	r0, [pc, #104]	; (1905c <att_handle_rsp+0x88>)
   18ff4:	6804      	ldr	r4, [r0, #0]
   18ff6:	f014 0406 	ands.w	r4, r4, #6
   18ffa:	d009      	beq.n	19010 <att_handle_rsp+0x3c>
   18ffc:	4918      	ldr	r1, [pc, #96]	; (19060 <att_handle_rsp+0x8c>)
   18ffe:	1a40      	subs	r0, r0, r1
   19000:	0880      	lsrs	r0, r0, #2
   19002:	0180      	lsls	r0, r0, #6
   19004:	f040 0102 	orr.w	r1, r0, #2
   19008:	4816      	ldr	r0, [pc, #88]	; (19064 <att_handle_rsp+0x90>)
   1900a:	f005 ff94 	bl	1ef36 <log_0>
	bt_att_func_t func = NULL;
   1900e:	4654      	mov	r4, sl
	att_req_send_process(chan->att);
   19010:	6828      	ldr	r0, [r5, #0]
   19012:	f008 fc1a 	bl	2184a <att_req_send_process>
	if (func) {
   19016:	b13c      	cbz	r4, 19028 <att_handle_rsp+0x54>
		func(chan->att->conn, err, pdu, len, params);
   19018:	6828      	ldr	r0, [r5, #0]
   1901a:	f8cd 9000 	str.w	r9, [sp]
   1901e:	6800      	ldr	r0, [r0, #0]
   19020:	4643      	mov	r3, r8
   19022:	463a      	mov	r2, r7
   19024:	4631      	mov	r1, r6
   19026:	47a0      	blx	r4
}
   19028:	2000      	movs	r0, #0
   1902a:	b003      	add	sp, #12
   1902c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   19030:	4b0d      	ldr	r3, [pc, #52]	; (19068 <att_handle_rsp+0x94>)
   19032:	459a      	cmp	sl, r3
   19034:	f04f 0b00 	mov.w	fp, #0
   19038:	d103      	bne.n	19042 <att_handle_rsp+0x6e>
		chan->req = NULL;
   1903a:	f8c5 b0f4 	str.w	fp, [r5, #244]	; 0xf4
	bt_att_func_t func = NULL;
   1903e:	465c      	mov	r4, fp
		goto process;
   19040:	e7e6      	b.n	19010 <att_handle_rsp+0x3c>
	func = chan->req->func;
   19042:	f8da 4004 	ldr.w	r4, [sl, #4]
	chan->req->func = NULL;
   19046:	f8ca b004 	str.w	fp, [sl, #4]
	bt_att_req_free(chan->req);
   1904a:	4650      	mov	r0, sl
	params = chan->req->user_data;
   1904c:	f8da 900c 	ldr.w	r9, [sl, #12]
	bt_att_req_free(chan->req);
   19050:	f7ff ffae 	bl	18fb0 <bt_att_req_free>
	chan->req = NULL;
   19054:	f8c5 b0f4 	str.w	fp, [r5, #244]	; 0xf4
   19058:	e7da      	b.n	19010 <att_handle_rsp+0x3c>
   1905a:	bf00      	nop
   1905c:	20000654 	.word	0x20000654
   19060:	20000654 	.word	0x20000654
   19064:	000269e9 	.word	0x000269e9
   19068:	200025c8 	.word	0x200025c8

0001906c <bt_att_disconnected>:
{
   1906c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   1906e:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   19072:	b085      	sub	sp, #20
   19074:	4604      	mov	r4, r0
	if (!att_chan->att) {
   19076:	b38d      	cbz	r5, 190dc <bt_att_disconnected+0x70>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   19078:	f500 719e 	add.w	r1, r0, #316	; 0x13c
   1907c:	f105 0024 	add.w	r0, r5, #36	; 0x24
   19080:	f008 f9cb 	bl	2141a <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   19084:	f1a4 0608 	sub.w	r6, r4, #8
   19088:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
   1908c:	2200      	movs	r2, #0
   1908e:	2300      	movs	r3, #0
   19090:	4638      	mov	r0, r7
   19092:	f008 fff1 	bl	22078 <net_buf_get>
   19096:	4602      	mov	r2, r0
   19098:	bb10      	cbnz	r0, 190e0 <bt_att_disconnected+0x74>
	if (chan->req) {
   1909a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1909e:	b123      	cbz	r3, 190aa <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   190a0:	4601      	mov	r1, r0
   190a2:	230e      	movs	r3, #14
   190a4:	4630      	mov	r0, r6
   190a6:	f7ff ff95 	bl	18fd4 <att_handle_rsp>
	chan->att = NULL;
   190aa:	2300      	movs	r3, #0
   190ac:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   190b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   190b2:	b99b      	cbnz	r3, 190dc <bt_att_disconnected+0x70>
	att_reset(att);
   190b4:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   190b6:	9803      	ldr	r0, [sp, #12]
   190b8:	2200      	movs	r2, #0
   190ba:	2300      	movs	r3, #0
   190bc:	300c      	adds	r0, #12
   190be:	f008 ffdb 	bl	22078 <net_buf_get>
   190c2:	b980      	cbnz	r0, 190e6 <bt_att_disconnected+0x7a>
	att->conn = NULL;
   190c4:	9a03      	ldr	r2, [sp, #12]
   190c6:	6010      	str	r0, [r2, #0]
	while (!sys_slist_is_empty(&att->reqs)) {
   190c8:	9b03      	ldr	r3, [sp, #12]
Z_GENLIST_IS_EMPTY(slist)
   190ca:	685d      	ldr	r5, [r3, #4]
   190cc:	b975      	cbnz	r5, 190ec <bt_att_disconnected+0x80>
	k_mem_slab_free(&att_slab, (void **)&att);
   190ce:	4811      	ldr	r0, [pc, #68]	; (19114 <bt_att_disconnected+0xa8>)
   190d0:	a903      	add	r1, sp, #12
   190d2:	f009 fbba 	bl	2284a <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   190d6:	6820      	ldr	r0, [r4, #0]
   190d8:	f000 fdf0 	bl	19cbc <bt_gatt_disconnected>
}
   190dc:	b005      	add	sp, #20
   190de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   190e0:	f000 ff00 	bl	19ee4 <net_buf_unref>
   190e4:	e7d2      	b.n	1908c <bt_att_disconnected+0x20>
		net_buf_unref(buf);
   190e6:	f000 fefd 	bl	19ee4 <net_buf_unref>
   190ea:	e7e4      	b.n	190b6 <bt_att_disconnected+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   190ec:	6899      	ldr	r1, [r3, #8]
		if (req->func) {
   190ee:	686e      	ldr	r6, [r5, #4]
   190f0:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   190f2:	605a      	str	r2, [r3, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   190f4:	428d      	cmp	r5, r1
	list->tail = node;
   190f6:	bf08      	it	eq
   190f8:	609a      	streq	r2, [r3, #8]
   190fa:	b136      	cbz	r6, 1910a <bt_att_disconnected+0x9e>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   190fc:	68eb      	ldr	r3, [r5, #12]
   190fe:	9300      	str	r3, [sp, #0]
   19100:	2300      	movs	r3, #0
   19102:	461a      	mov	r2, r3
   19104:	210e      	movs	r1, #14
   19106:	4618      	mov	r0, r3
   19108:	47b0      	blx	r6
		bt_att_req_free(req);
   1910a:	4628      	mov	r0, r5
   1910c:	f7ff ff50 	bl	18fb0 <bt_att_req_free>
   19110:	e7da      	b.n	190c8 <bt_att_disconnected+0x5c>
   19112:	bf00      	nop
   19114:	200006bc 	.word	0x200006bc

00019118 <att_timeout>:
	BT_ERR("ATT Timeout");
   19118:	490a      	ldr	r1, [pc, #40]	; (19144 <att_timeout+0x2c>)
   1911a:	680b      	ldr	r3, [r1, #0]
   1911c:	075b      	lsls	r3, r3, #29
{
   1911e:	b510      	push	{r4, lr}
   19120:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   19122:	d008      	beq.n	19136 <att_timeout+0x1e>
   19124:	4b08      	ldr	r3, [pc, #32]	; (19148 <att_timeout+0x30>)
   19126:	4809      	ldr	r0, [pc, #36]	; (1914c <att_timeout+0x34>)
   19128:	1ac9      	subs	r1, r1, r3
   1912a:	0889      	lsrs	r1, r1, #2
   1912c:	0189      	lsls	r1, r1, #6
   1912e:	f041 0101 	orr.w	r1, r1, #1
   19132:	f005 ff00 	bl	1ef36 <log_0>
	bt_att_disconnected(&chan->chan.chan);
   19136:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
}
   1913a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1913e:	f7ff bf95 	b.w	1906c <bt_att_disconnected>
   19142:	bf00      	nop
   19144:	20000654 	.word	0x20000654
   19148:	20000654 	.word	0x20000654
   1914c:	00026a00 	.word	0x00026a00

00019150 <find_sc_cfg>:
	struct k_work_sync sync;
} db_hash;
#endif

static struct gatt_sc_cfg *find_sc_cfg(uint8_t id, bt_addr_le_t *addr)
{
   19150:	b510      	push	{r4, lr}
	BT_DBG("id: %u, addr: %s", id, bt_addr_le_str(addr));

	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
		if (id == sc_cfg[i].id &&
   19152:	4c06      	ldr	r4, [pc, #24]	; (1916c <find_sc_cfg+0x1c>)
   19154:	7823      	ldrb	r3, [r4, #0]
   19156:	4283      	cmp	r3, r0
   19158:	d104      	bne.n	19164 <find_sc_cfg+0x14>
	return memcmp(a, b, sizeof(*a));
   1915a:	2207      	movs	r2, #7
   1915c:	1c60      	adds	r0, r4, #1
   1915e:	f007 fdf5 	bl	20d4c <memcmp>
   19162:	b108      	cbz	r0, 19168 <find_sc_cfg+0x18>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
			return &sc_cfg[i];
		}
	}

	return NULL;
   19164:	2000      	movs	r0, #0
}
   19166:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   19168:	4620      	mov	r0, r4
   1916a:	e7fc      	b.n	19166 <find_sc_cfg+0x16>
   1916c:	200027e4 	.word	0x200027e4

00019170 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   19170:	b537      	push	{r0, r1, r2, r4, r5, lr}
   19172:	4d0d      	ldr	r5, [pc, #52]	; (191a8 <find_cf_cfg+0x38>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   19174:	4604      	mov	r4, r0
   19176:	b968      	cbnz	r0, 19194 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   19178:	9000      	str	r0, [sp, #0]
   1917a:	2207      	movs	r2, #7
   1917c:	f8cd 0003 	str.w	r0, [sp, #3]
   19180:	4669      	mov	r1, sp
   19182:	1c68      	adds	r0, r5, #1
   19184:	f007 fde2 	bl	20d4c <memcmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   19188:	2800      	cmp	r0, #0
   1918a:	bf08      	it	eq
   1918c:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
   1918e:	4620      	mov	r0, r4
   19190:	b003      	add	sp, #12
   19192:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   19194:	462a      	mov	r2, r5
   19196:	f812 1b01 	ldrb.w	r1, [r2], #1
   1919a:	f008 f840 	bl	2121e <bt_conn_is_peer_addr_le>
   1919e:	2800      	cmp	r0, #0
	return NULL;
   191a0:	bf14      	ite	ne
   191a2:	462c      	movne	r4, r5
   191a4:	2400      	moveq	r4, #0
   191a6:	e7f2      	b.n	1918e <find_cf_cfg+0x1e>
   191a8:	200025e0 	.word	0x200025e0

000191ac <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   191ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   191b0:	461f      	mov	r7, r3
   191b2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   191b6:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   191ba:	4606      	mov	r6, r0
   191bc:	4688      	mov	r8, r1
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   191be:	2b00      	cmp	r3, #0
   191c0:	d157      	bne.n	19272 <bt_gatt_attr_write_ccc+0xc6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   191c2:	1e7b      	subs	r3, r7, #1
   191c4:	2b01      	cmp	r3, #1
   191c6:	d857      	bhi.n	19278 <bt_gatt_attr_write_ccc+0xcc>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   191c8:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   191ca:	7815      	ldrb	r5, [r2, #0]
   191cc:	bf18      	it	ne
   191ce:	7853      	ldrbne	r3, [r2, #1]
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   191d0:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   191d2:	bf0c      	ite	eq
   191d4:	b2ad      	uxtheq	r5, r5
   191d6:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   191da:	f008 fd40 	bl	21c5e <find_ccc_cfg>
	if (!cfg) {
   191de:	4604      	mov	r4, r0
   191e0:	bb10      	cbnz	r0, 19228 <bt_gatt_attr_write_ccc+0x7c>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behavioraly the same as no written CCC.
		 */
		if (!value) {
   191e2:	b91d      	cbnz	r5, 191ec <bt_gatt_attr_write_ccc+0x40>
			return len;
   191e4:	4638      	mov	r0, r7
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   191e6:	b003      	add	sp, #12
   191e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   191ec:	4649      	mov	r1, r9
   191ee:	f008 fd36 	bl	21c5e <find_ccc_cfg>
		if (!cfg) {
   191f2:	4604      	mov	r4, r0
   191f4:	b980      	cbnz	r0, 19218 <bt_gatt_attr_write_ccc+0x6c>
			BT_WARN("No space to store CCC cfg");
   191f6:	4922      	ldr	r1, [pc, #136]	; (19280 <bt_gatt_attr_write_ccc+0xd4>)
   191f8:	680b      	ldr	r3, [r1, #0]
   191fa:	f013 0f06 	tst.w	r3, #6
   191fe:	d008      	beq.n	19212 <bt_gatt_attr_write_ccc+0x66>
   19200:	4b20      	ldr	r3, [pc, #128]	; (19284 <bt_gatt_attr_write_ccc+0xd8>)
   19202:	4821      	ldr	r0, [pc, #132]	; (19288 <bt_gatt_attr_write_ccc+0xdc>)
   19204:	1ac9      	subs	r1, r1, r3
   19206:	0889      	lsrs	r1, r1, #2
   19208:	0189      	lsls	r1, r1, #6
   1920a:	f041 0102 	orr.w	r1, r1, #2
   1920e:	f005 fe92 	bl	1ef36 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   19212:	f06f 0010 	mvn.w	r0, #16
   19216:	e7e6      	b.n	191e6 <bt_gatt_attr_write_ccc+0x3a>
	memcpy(dst, src, sizeof(*dst));
   19218:	2207      	movs	r2, #7
   1921a:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1921e:	3001      	adds	r0, #1
   19220:	f007 fdbb 	bl	20d9a <memcpy>
		cfg->id = conn->id;
   19224:	7a33      	ldrb	r3, [r6, #8]
   19226:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   19228:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1922c:	b9ab      	cbnz	r3, 1925a <bt_gatt_attr_write_ccc+0xae>
	if (cfg->value != ccc->value) {
   1922e:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   19232:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   19234:	42ab      	cmp	r3, r5
   19236:	d003      	beq.n	19240 <bt_gatt_attr_write_ccc+0x94>
		gatt_ccc_changed(attr, ccc);
   19238:	4649      	mov	r1, r9
   1923a:	4640      	mov	r0, r8
   1923c:	f008 fc98 	bl	21b70 <gatt_ccc_changed>
	if (!value) {
   19240:	2d00      	cmp	r5, #0
   19242:	d1cf      	bne.n	191e4 <bt_gatt_attr_write_ccc+0x38>
   19244:	2207      	movs	r2, #7
   19246:	4669      	mov	r1, sp
   19248:	1c60      	adds	r0, r4, #1
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1924a:	9500      	str	r5, [sp, #0]
   1924c:	f8cd 5003 	str.w	r5, [sp, #3]
   19250:	f007 fda3 	bl	20d9a <memcpy>
	cfg->id = 0U;
   19254:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   19256:	8125      	strh	r5, [r4, #8]
}
   19258:	e7c4      	b.n	191e4 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1925a:	462a      	mov	r2, r5
   1925c:	4641      	mov	r1, r8
   1925e:	4630      	mov	r0, r6
   19260:	4798      	blx	r3
		if (write < 0) {
   19262:	2800      	cmp	r0, #0
   19264:	dbbf      	blt.n	191e6 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   19266:	1e42      	subs	r2, r0, #1
   19268:	2a01      	cmp	r2, #1
   1926a:	d9e0      	bls.n	1922e <bt_gatt_attr_write_ccc+0x82>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1926c:	f06f 000d 	mvn.w	r0, #13
   19270:	e7b9      	b.n	191e6 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19272:	f06f 0006 	mvn.w	r0, #6
   19276:	e7b6      	b.n	191e6 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   19278:	f06f 000c 	mvn.w	r0, #12
   1927c:	e7b3      	b.n	191e6 <bt_gatt_attr_write_ccc+0x3a>
   1927e:	bf00      	nop
   19280:	20000660 	.word	0x20000660
   19284:	20000654 	.word	0x20000654
   19288:	00026a13 	.word	0x00026a13

0001928c <sc_indicate_rsp>:
{
   1928c:	b510      	push	{r4, lr}
   1928e:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19290:	4814      	ldr	r0, [pc, #80]	; (192e4 <sc_indicate_rsp+0x58>)
   19292:	f3bf 8f5b 	dmb	ish
   19296:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1929a:	e853 2f00 	ldrex	r2, [r3]
   1929e:	f022 0202 	bic.w	r2, r2, #2
   192a2:	e843 2100 	strex	r1, r2, [r3]
   192a6:	2900      	cmp	r1, #0
   192a8:	d1f7      	bne.n	1929a <sc_indicate_rsp+0xe>
   192aa:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   192ae:	f3bf 8f5b 	dmb	ish
   192b2:	6d03      	ldr	r3, [r0, #80]	; 0x50
   192b4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   192b8:	07da      	lsls	r2, r3, #31
   192ba:	d504      	bpl.n	192c6 <sc_indicate_rsp+0x3a>
	k_work_reschedule(&gatt_sc.work, timeout);
   192bc:	2200      	movs	r2, #0
   192be:	2300      	movs	r3, #0
   192c0:	3020      	adds	r0, #32
   192c2:	f004 fa77 	bl	1d7b4 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   192c6:	4620      	mov	r0, r4
   192c8:	f7ff ff52 	bl	19170 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   192cc:	b140      	cbz	r0, 192e0 <sc_indicate_rsp+0x54>
   192ce:	7a03      	ldrb	r3, [r0, #8]
   192d0:	07db      	lsls	r3, r3, #31
   192d2:	d505      	bpl.n	192e0 <sc_indicate_rsp+0x54>
}
   192d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   192d8:	2100      	movs	r1, #0
   192da:	300c      	adds	r0, #12
   192dc:	f008 bcf7 	b.w	21cce <atomic_set_bit>
}
   192e0:	bd10      	pop	{r4, pc}
   192e2:	bf00      	nop
   192e4:	20001b20 	.word	0x20001b20

000192e8 <cf_write>:
{
   192e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   192ec:	4698      	mov	r8, r3
   192ee:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   192f2:	2b01      	cmp	r3, #1
{
   192f4:	4606      	mov	r6, r0
   192f6:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   192f8:	d842      	bhi.n	19380 <cf_write+0x98>
	if (offset + len > sizeof(cfg->data)) {
   192fa:	4443      	add	r3, r8
   192fc:	2b01      	cmp	r3, #1
   192fe:	4645      	mov	r5, r8
   19300:	dc41      	bgt.n	19386 <cf_write+0x9e>
	cfg = find_cf_cfg(conn);
   19302:	f7ff ff35 	bl	19170 <find_cf_cfg>
	if (!cfg) {
   19306:	4604      	mov	r4, r0
   19308:	b9a0      	cbnz	r0, 19334 <cf_write+0x4c>
		cfg = find_cf_cfg(NULL);
   1930a:	f7ff ff31 	bl	19170 <find_cf_cfg>
	if (!cfg) {
   1930e:	4604      	mov	r4, r0
   19310:	b980      	cbnz	r0, 19334 <cf_write+0x4c>
		BT_WARN("No space to store Client Supported Features");
   19312:	4920      	ldr	r1, [pc, #128]	; (19394 <cf_write+0xac>)
   19314:	680b      	ldr	r3, [r1, #0]
   19316:	f013 0f06 	tst.w	r3, #6
   1931a:	d008      	beq.n	1932e <cf_write+0x46>
   1931c:	4b1e      	ldr	r3, [pc, #120]	; (19398 <cf_write+0xb0>)
   1931e:	481f      	ldr	r0, [pc, #124]	; (1939c <cf_write+0xb4>)
   19320:	1ac9      	subs	r1, r1, r3
   19322:	0889      	lsrs	r1, r1, #2
   19324:	0189      	lsls	r1, r1, #6
   19326:	f041 0102 	orr.w	r1, r1, #2
   1932a:	f005 fe04 	bl	1ef36 <log_0>
   1932e:	f06f 0510 	mvn.w	r5, #16
   19332:	e010      	b.n	19356 <cf_write+0x6e>
{
   19334:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   19336:	f1b8 0f00 	cmp.w	r8, #0
   1933a:	d10f      	bne.n	1935c <cf_write+0x74>
   1933c:	f106 0188 	add.w	r1, r6, #136	; 0x88
   19340:	2207      	movs	r2, #7
   19342:	1c60      	adds	r0, r4, #1
   19344:	f007 fd29 	bl	20d9a <memcpy>
	cfg->id = conn->id;
   19348:	4620      	mov	r0, r4
   1934a:	7a33      	ldrb	r3, [r6, #8]
   1934c:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   19350:	2100      	movs	r1, #0
   19352:	f008 fcbc 	bl	21cce <atomic_set_bit>
}
   19356:	4628      	mov	r0, r5
   19358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1935c:	7a20      	ldrb	r0, [r4, #8]
   1935e:	fa20 f301 	lsr.w	r3, r0, r1
   19362:	07da      	lsls	r2, r3, #31
   19364:	d503      	bpl.n	1936e <cf_write+0x86>
		    !(value[i / 8] & BIT(i % 8))) {
   19366:	783b      	ldrb	r3, [r7, #0]
   19368:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1936a:	07db      	lsls	r3, r3, #31
   1936c:	d50e      	bpl.n	1938c <cf_write+0xa4>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1936e:	3101      	adds	r1, #1
   19370:	2903      	cmp	r1, #3
   19372:	d1e0      	bne.n	19336 <cf_write+0x4e>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   19374:	783b      	ldrb	r3, [r7, #0]
   19376:	f003 0307 	and.w	r3, r3, #7
   1937a:	4318      	orrs	r0, r3
   1937c:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1937e:	e7dd      	b.n	1933c <cf_write+0x54>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19380:	f06f 0506 	mvn.w	r5, #6
   19384:	e7e7      	b.n	19356 <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   19386:	f06f 050c 	mvn.w	r5, #12
   1938a:	e7e4      	b.n	19356 <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1938c:	f06f 0512 	mvn.w	r5, #18
   19390:	e7e1      	b.n	19356 <cf_write+0x6e>
   19392:	bf00      	nop
   19394:	20000660 	.word	0x20000660
   19398:	20000654 	.word	0x20000654
   1939c:	00026a2d 	.word	0x00026a2d

000193a0 <sc_save>:
{
   193a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   193a4:	4680      	mov	r8, r0
   193a6:	460f      	mov	r7, r1
   193a8:	4616      	mov	r6, r2
   193aa:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   193ac:	f7ff fed0 	bl	19150 <find_sc_cfg>
	if (!cfg) {
   193b0:	4604      	mov	r4, r0
   193b2:	b9e8      	cbnz	r0, 193f0 <sc_save+0x50>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   193b4:	4669      	mov	r1, sp
   193b6:	9000      	str	r0, [sp, #0]
   193b8:	f8cd 0003 	str.w	r0, [sp, #3]
   193bc:	f7ff fec8 	bl	19150 <find_sc_cfg>
		if (!cfg) {
   193c0:	4604      	mov	r4, r0
   193c2:	b978      	cbnz	r0, 193e4 <sc_save+0x44>
			BT_ERR("unable to save SC: no cfg left");
   193c4:	4911      	ldr	r1, [pc, #68]	; (1940c <sc_save+0x6c>)
   193c6:	680b      	ldr	r3, [r1, #0]
   193c8:	075b      	lsls	r3, r3, #29
   193ca:	d008      	beq.n	193de <sc_save+0x3e>
   193cc:	4b10      	ldr	r3, [pc, #64]	; (19410 <sc_save+0x70>)
   193ce:	4811      	ldr	r0, [pc, #68]	; (19414 <sc_save+0x74>)
   193d0:	1ac9      	subs	r1, r1, r3
   193d2:	0889      	lsrs	r1, r1, #2
   193d4:	0189      	lsls	r1, r1, #6
   193d6:	f041 0101 	orr.w	r1, r1, #1
   193da:	f005 fdac 	bl	1ef36 <log_0>
}
   193de:	b002      	add	sp, #8
   193e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   193e4:	f800 8b01 	strb.w	r8, [r0], #1
   193e8:	2207      	movs	r2, #7
   193ea:	4639      	mov	r1, r7
   193ec:	f007 fcd5 	bl	20d9a <memcpy>
	if (!(cfg->data.start || cfg->data.end)) {
   193f0:	8922      	ldrh	r2, [r4, #8]
   193f2:	8963      	ldrh	r3, [r4, #10]
   193f4:	b91a      	cbnz	r2, 193fe <sc_save+0x5e>
   193f6:	b923      	cbnz	r3, 19402 <sc_save+0x62>
		cfg->data.start = start;
   193f8:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   193fa:	8165      	strh	r5, [r4, #10]
   193fc:	e7ef      	b.n	193de <sc_save+0x3e>
	if (new_start >= *start && new_end <= *end) {
   193fe:	4296      	cmp	r6, r2
   19400:	d302      	bcc.n	19408 <sc_save+0x68>
   19402:	429d      	cmp	r5, r3
   19404:	d9eb      	bls.n	193de <sc_save+0x3e>
   19406:	e7f8      	b.n	193fa <sc_save+0x5a>
		*start = new_start;
   19408:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1940a:	e7fa      	b.n	19402 <sc_save+0x62>
   1940c:	20000660 	.word	0x20000660
   19410:	20000654 	.word	0x20000654
   19414:	00026a59 	.word	0x00026a59

00019418 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   19418:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1941c:	4b24      	ldr	r3, [pc, #144]	; (194b0 <disconnected_cb+0x98>)
{
   1941e:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19420:	6882      	ldr	r2, [r0, #8]
   19422:	429a      	cmp	r2, r3
{
   19424:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   19426:	d102      	bne.n	1942e <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   19428:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   1942a:	8963      	ldrh	r3, [r4, #10]
   1942c:	bb13      	cbnz	r3, 19474 <disconnected_cb+0x5c>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   1942e:	2001      	movs	r0, #1
   19430:	b002      	add	sp, #8
   19432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19436:	f105 0888 	add.w	r8, r5, #136	; 0x88
   1943a:	7a28      	ldrb	r0, [r5, #8]
   1943c:	4641      	mov	r1, r8
   1943e:	f007 fe1e 	bl	2107e <bt_addr_le_is_bonded>
   19442:	b988      	cbnz	r0, 19468 <disconnected_cb+0x50>
				if (ccc == &sc_ccc) {
   19444:	4b1b      	ldr	r3, [pc, #108]	; (194b4 <disconnected_cb+0x9c>)
   19446:	429c      	cmp	r4, r3
   19448:	d102      	bne.n	19450 <disconnected_cb+0x38>
					sc_clear(conn);
   1944a:	4628      	mov	r0, r5
   1944c:	f008 fd10 	bl	21e70 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   19450:	2500      	movs	r5, #0
   19452:	2207      	movs	r2, #7
   19454:	4669      	mov	r1, sp
   19456:	4630      	mov	r0, r6
   19458:	9500      	str	r5, [sp, #0]
   1945a:	f8cd 5003 	str.w	r5, [sp, #3]
   1945e:	f007 fc9c 	bl	20d9a <memcpy>
	cfg->id = 0U;
   19462:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   19464:	8125      	strh	r5, [r4, #8]
	if (!value_used) {
   19466:	e01a      	b.n	1949e <disconnected_cb+0x86>
   19468:	2207      	movs	r2, #7
   1946a:	4641      	mov	r1, r8
   1946c:	4630      	mov	r0, r6
   1946e:	f007 fc94 	bl	20d9a <memcpy>
   19472:	e014      	b.n	1949e <disconnected_cb+0x86>
		if (!cfg->value) {
   19474:	8923      	ldrh	r3, [r4, #8]
   19476:	b193      	cbz	r3, 1949e <disconnected_cb+0x86>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   19478:	4626      	mov	r6, r4
   1947a:	4628      	mov	r0, r5
   1947c:	f816 1b01 	ldrb.w	r1, [r6], #1
   19480:	4632      	mov	r2, r6
   19482:	f007 fecc 	bl	2121e <bt_conn_is_peer_addr_le>
   19486:	2800      	cmp	r0, #0
   19488:	d1d5      	bne.n	19436 <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1948a:	7820      	ldrb	r0, [r4, #0]
   1948c:	4631      	mov	r1, r6
   1948e:	f7fe fa19 	bl	178c4 <bt_conn_lookup_addr_le>
			if (tmp) {
   19492:	b120      	cbz	r0, 1949e <disconnected_cb+0x86>
				if (tmp->state == BT_CONN_CONNECTED) {
   19494:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
   19496:	f007 feb4 	bl	21202 <bt_conn_unref>
	if (!value_used) {
   1949a:	2d07      	cmp	r5, #7
   1949c:	d0c7      	beq.n	1942e <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   1949e:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   194a0:	2100      	movs	r1, #0
   194a2:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   194a4:	2b00      	cmp	r3, #0
   194a6:	d0c2      	beq.n	1942e <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   194a8:	4638      	mov	r0, r7
   194aa:	4798      	blx	r3
   194ac:	e7bf      	b.n	1942e <disconnected_cb+0x16>
   194ae:	bf00      	nop
   194b0:	000191ad 	.word	0x000191ad
   194b4:	2000053c 	.word	0x2000053c

000194b8 <bt_gatt_init>:
{
   194b8:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   194ba:	4b20      	ldr	r3, [pc, #128]	; (1953c <bt_gatt_init+0x84>)
   194bc:	f3bf 8f5b 	dmb	ish
   194c0:	2201      	movs	r2, #1
   194c2:	e853 1f00 	ldrex	r1, [r3]
   194c6:	2900      	cmp	r1, #0
   194c8:	d103      	bne.n	194d2 <bt_gatt_init+0x1a>
   194ca:	e843 2000 	strex	r0, r2, [r3]
   194ce:	2800      	cmp	r0, #0
   194d0:	d1f7      	bne.n	194c2 <bt_gatt_init+0xa>
   194d2:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   194d6:	d130      	bne.n	1953a <bt_gatt_init+0x82>
   194d8:	f3bf 8f5b 	dmb	ish
   194dc:	4b18      	ldr	r3, [pc, #96]	; (19540 <bt_gatt_init+0x88>)
   194de:	e853 1f00 	ldrex	r1, [r3]
   194e2:	2900      	cmp	r1, #0
   194e4:	d103      	bne.n	194ee <bt_gatt_init+0x36>
   194e6:	e843 2000 	strex	r0, r2, [r3]
   194ea:	2800      	cmp	r0, #0
   194ec:	d1f7      	bne.n	194de <bt_gatt_init+0x26>
   194ee:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   194f2:	d108      	bne.n	19506 <bt_gatt_init+0x4e>
   194f4:	4a13      	ldr	r2, [pc, #76]	; (19544 <bt_gatt_init+0x8c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   194f6:	4914      	ldr	r1, [pc, #80]	; (19548 <bt_gatt_init+0x90>)
   194f8:	8813      	ldrh	r3, [r2, #0]
   194fa:	4c14      	ldr	r4, [pc, #80]	; (1954c <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
   194fc:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   194fe:	42a1      	cmp	r1, r4
   19500:	d315      	bcc.n	1952e <bt_gatt_init+0x76>
   19502:	b100      	cbz	r0, 19506 <bt_gatt_init+0x4e>
   19504:	8013      	strh	r3, [r2, #0]
	list->head = NULL;
   19506:	4b12      	ldr	r3, [pc, #72]	; (19550 <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   19508:	4912      	ldr	r1, [pc, #72]	; (19554 <bt_gatt_init+0x9c>)
   1950a:	4813      	ldr	r0, [pc, #76]	; (19558 <bt_gatt_init+0xa0>)
   1950c:	2200      	movs	r2, #0
	list->tail = NULL;
   1950e:	e9c3 2200 	strd	r2, r2, [r3]
   19512:	f009 fb6f 	bl	22bf4 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   19516:	4810      	ldr	r0, [pc, #64]	; (19558 <bt_gatt_init+0xa0>)
   19518:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1951c:	2300      	movs	r3, #0
   1951e:	f004 f915 	bl	1d74c <k_work_schedule>
}
   19522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   19526:	490d      	ldr	r1, [pc, #52]	; (1955c <bt_gatt_init+0xa4>)
   19528:	480d      	ldr	r0, [pc, #52]	; (19560 <bt_gatt_init+0xa8>)
   1952a:	f009 bb63 	b.w	22bf4 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   1952e:	6848      	ldr	r0, [r1, #4]
   19530:	4403      	add	r3, r0
   19532:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   19534:	3108      	adds	r1, #8
   19536:	2001      	movs	r0, #1
   19538:	e7e1      	b.n	194fe <bt_gatt_init+0x46>
}
   1953a:	bd10      	pop	{r4, pc}
   1953c:	200025f0 	.word	0x200025f0
   19540:	2000260c 	.word	0x2000260c
   19544:	200027e2 	.word	0x200027e2
   19548:	00023510 	.word	0x00023510
   1954c:	00023520 	.word	0x00023520
   19550:	200025d8 	.word	0x200025d8
   19554:	00021f69 	.word	0x00021f69
   19558:	20001ac8 	.word	0x20001ac8
   1955c:	00019901 	.word	0x00019901
   19560:	20001b40 	.word	0x20001b40

00019564 <bt_gatt_attr_get_handle>:
{
   19564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   19568:	4603      	mov	r3, r0
   1956a:	b148      	cbz	r0, 19580 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   1956c:	8a00      	ldrh	r0, [r0, #16]
   1956e:	b938      	cbnz	r0, 19580 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19570:	4912      	ldr	r1, [pc, #72]	; (195bc <bt_gatt_attr_get_handle+0x58>)
   19572:	f8df e04c 	ldr.w	lr, [pc, #76]	; 195c0 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   19576:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   19578:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1957c:	4571      	cmp	r1, lr
   1957e:	d301      	bcc.n	19584 <bt_gatt_attr_get_handle+0x20>
}
   19580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
   19584:	e9d1 7600 	ldrd	r7, r6, [r1]
   19588:	42bb      	cmp	r3, r7
   1958a:	d304      	bcc.n	19596 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1958c:	fb0c 7206 	mla	r2, ip, r6, r7
   19590:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   19592:	4293      	cmp	r3, r2
   19594:	d90e      	bls.n	195b4 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   19596:	19a2      	adds	r2, r4, r6
   19598:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1959a:	3108      	adds	r1, #8
   1959c:	4614      	mov	r4, r2
   1959e:	e7ed      	b.n	1957c <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   195a0:	fb0c 7805 	mla	r8, ip, r5, r7
   195a4:	4543      	cmp	r3, r8
   195a6:	d007      	beq.n	195b8 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   195a8:	3501      	adds	r5, #1
   195aa:	1962      	adds	r2, r4, r5
   195ac:	42b5      	cmp	r5, r6
   195ae:	b292      	uxth	r2, r2
   195b0:	d1f6      	bne.n	195a0 <bt_gatt_attr_get_handle+0x3c>
   195b2:	e7f2      	b.n	1959a <bt_gatt_attr_get_handle+0x36>
   195b4:	2500      	movs	r5, #0
   195b6:	e7f8      	b.n	195aa <bt_gatt_attr_get_handle+0x46>
   195b8:	4610      	mov	r0, r2
   195ba:	e7e1      	b.n	19580 <bt_gatt_attr_get_handle+0x1c>
   195bc:	00023510 	.word	0x00023510
   195c0:	00023520 	.word	0x00023520

000195c4 <bt_gatt_foreach_attr_type>:
{
   195c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195c8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   195cc:	9100      	str	r1, [sp, #0]
   195ce:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   195d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   195d4:	2d00      	cmp	r5, #0
   195d6:	bf08      	it	eq
   195d8:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   195da:	4b24      	ldr	r3, [pc, #144]	; (1966c <bt_gatt_foreach_attr_type+0xa8>)
   195dc:	881b      	ldrh	r3, [r3, #0]
   195de:	4283      	cmp	r3, r0
{
   195e0:	4607      	mov	r7, r0
   195e2:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   195e4:	d23c      	bcs.n	19660 <bt_gatt_foreach_attr_type+0x9c>
}
   195e6:	b003      	add	sp, #12
   195e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   195ec:	6873      	ldr	r3, [r6, #4]
   195ee:	4423      	add	r3, r4
   195f0:	42bb      	cmp	r3, r7
   195f2:	d232      	bcs.n	1965a <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   195f4:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   195f6:	3608      	adds	r6, #8
   195f8:	4b1d      	ldr	r3, [pc, #116]	; (19670 <bt_gatt_foreach_attr_type+0xac>)
   195fa:	429e      	cmp	r6, r3
   195fc:	d3f6      	bcc.n	195ec <bt_gatt_foreach_attr_type+0x28>
   195fe:	e7f2      	b.n	195e6 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   19600:	5889      	ldr	r1, [r1, r2]
   19602:	9301      	str	r3, [sp, #4]
   19604:	4640      	mov	r0, r8
   19606:	f007 fc0a 	bl	20e1e <bt_uuid_cmp>
   1960a:	9b01      	ldr	r3, [sp, #4]
   1960c:	b190      	cbz	r0, 19634 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1960e:	3401      	adds	r4, #1
   19610:	f10a 0a01 	add.w	sl, sl, #1
   19614:	b2a4      	uxth	r4, r4
   19616:	6873      	ldr	r3, [r6, #4]
   19618:	4553      	cmp	r3, sl
   1961a:	d9ec      	bls.n	195f6 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   1961c:	9b00      	ldr	r3, [sp, #0]
   1961e:	429c      	cmp	r4, r3
   19620:	d8e1      	bhi.n	195e6 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   19622:	42bc      	cmp	r4, r7
   19624:	d3f3      	bcc.n	1960e <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   19626:	6831      	ldr	r1, [r6, #0]
   19628:	fb0b f20a 	mul.w	r2, fp, sl
   1962c:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1962e:	f1b8 0f00 	cmp.w	r8, #0
   19632:	d1e5      	bne.n	19600 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   19634:	f1b9 0f00 	cmp.w	r9, #0
   19638:	d10b      	bne.n	19652 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   1963a:	3d01      	subs	r5, #1
   1963c:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1963e:	4618      	mov	r0, r3
   19640:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19642:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19644:	4621      	mov	r1, r4
   19646:	4798      	blx	r3
	if (!*num_matches) {
   19648:	2d00      	cmp	r5, #0
   1964a:	d0cc      	beq.n	195e6 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1964c:	2800      	cmp	r0, #0
   1964e:	d1de      	bne.n	1960e <bt_gatt_foreach_attr_type+0x4a>
   19650:	e7c9      	b.n	195e6 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   19652:	68da      	ldr	r2, [r3, #12]
   19654:	4591      	cmp	r9, r2
   19656:	d1da      	bne.n	1960e <bt_gatt_foreach_attr_type+0x4a>
   19658:	e7ef      	b.n	1963a <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1965a:	f04f 0a00 	mov.w	sl, #0
   1965e:	e7da      	b.n	19616 <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19660:	4e04      	ldr	r6, [pc, #16]	; (19674 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   19662:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   19664:	f04f 0b14 	mov.w	fp, #20
   19668:	e7c6      	b.n	195f8 <bt_gatt_foreach_attr_type+0x34>
   1966a:	bf00      	nop
   1966c:	200027e2 	.word	0x200027e2
   19670:	00023520 	.word	0x00023520
   19674:	00023510 	.word	0x00023510

00019678 <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
   19678:	b510      	push	{r4, lr}
   1967a:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   1967c:	2400      	movs	r4, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1967e:	aa1c      	add	r2, sp, #112	; 0x70
   19680:	4669      	mov	r1, sp
   19682:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   19684:	e9cd 4400 	strd	r4, r4, [sp]
   19688:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1968c:	f007 f91e 	bl	208cc <tc_cmac_setup>
   19690:	b970      	cbnz	r0, 196b0 <db_hash_gen.isra.0+0x38>
		BT_ERR("Unable to setup AES CMAC");
   19692:	4920      	ldr	r1, [pc, #128]	; (19714 <db_hash_gen.isra.0+0x9c>)
   19694:	680b      	ldr	r3, [r1, #0]
   19696:	075a      	lsls	r2, r3, #29
   19698:	d008      	beq.n	196ac <db_hash_gen.isra.0+0x34>
   1969a:	4b1f      	ldr	r3, [pc, #124]	; (19718 <db_hash_gen.isra.0+0xa0>)
   1969c:	481f      	ldr	r0, [pc, #124]	; (1971c <db_hash_gen.isra.0+0xa4>)
   1969e:	1ac9      	subs	r1, r1, r3
   196a0:	0889      	lsrs	r1, r1, #2
   196a2:	0189      	lsls	r1, r1, #6
   196a4:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
   196a8:	f005 fc45 	bl	1ef36 <log_0>
}
   196ac:	b048      	add	sp, #288	; 0x120
   196ae:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   196b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   196b4:	2001      	movs	r0, #1
   196b6:	4a1a      	ldr	r2, [pc, #104]	; (19720 <db_hash_gen.isra.0+0xa8>)
   196b8:	ab04      	add	r3, sp, #16
   196ba:	f008 fc4a 	bl	21f52 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   196be:	4819      	ldr	r0, [pc, #100]	; (19724 <db_hash_gen.isra.0+0xac>)
   196c0:	a904      	add	r1, sp, #16
   196c2:	f007 f99a 	bl	209fa <tc_cmac_final>
   196c6:	b958      	cbnz	r0, 196e0 <db_hash_gen.isra.0+0x68>
		BT_ERR("Unable to calculate hash");
   196c8:	4912      	ldr	r1, [pc, #72]	; (19714 <db_hash_gen.isra.0+0x9c>)
   196ca:	680b      	ldr	r3, [r1, #0]
   196cc:	075b      	lsls	r3, r3, #29
   196ce:	d0ed      	beq.n	196ac <db_hash_gen.isra.0+0x34>
   196d0:	4b11      	ldr	r3, [pc, #68]	; (19718 <db_hash_gen.isra.0+0xa0>)
   196d2:	4815      	ldr	r0, [pc, #84]	; (19728 <db_hash_gen.isra.0+0xb0>)
   196d4:	1ac9      	subs	r1, r1, r3
   196d6:	0889      	lsrs	r1, r1, #2
   196d8:	0189      	lsls	r1, r1, #6
   196da:	f041 0101 	orr.w	r1, r1, #1
   196de:	e7e3      	b.n	196a8 <db_hash_gen.isra.0+0x30>
   196e0:	4b10      	ldr	r3, [pc, #64]	; (19724 <db_hash_gen.isra.0+0xac>)
   196e2:	f103 020f 	add.w	r2, r3, #15
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   196e6:	3401      	adds	r4, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
   196e8:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   196ea:	7810      	ldrb	r0, [r2, #0]
   196ec:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < (length/2); i++) {
   196f0:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
   196f2:	f802 1901 	strb.w	r1, [r2], #-1
	for (i = 0; i < (length/2); i++) {
   196f6:	d1f6      	bne.n	196e6 <db_hash_gen.isra.0+0x6e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   196f8:	f3bf 8f5b 	dmb	ish
   196fc:	4b0b      	ldr	r3, [pc, #44]	; (1972c <db_hash_gen.isra.0+0xb4>)
   196fe:	e853 2f00 	ldrex	r2, [r3]
   19702:	f042 0204 	orr.w	r2, r2, #4
   19706:	e843 2100 	strex	r1, r2, [r3]
   1970a:	2900      	cmp	r1, #0
   1970c:	d1f7      	bne.n	196fe <db_hash_gen.isra.0+0x86>
   1970e:	f3bf 8f5b 	dmb	ish
   19712:	e7cb      	b.n	196ac <db_hash_gen.isra.0+0x34>
   19714:	20000660 	.word	0x20000660
   19718:	20000654 	.word	0x20000654
   1971c:	00026a78 	.word	0x00026a78
   19720:	00021bb3 	.word	0x00021bb3
   19724:	20001ab8 	.word	0x20001ab8
   19728:	00026a91 	.word	0x00026a91
   1972c:	20001b70 	.word	0x20001b70

00019730 <gatt_indicate>:
{
   19730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19734:	4615      	mov	r5, r2
   19736:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   19738:	2214      	movs	r2, #20
   1973a:	6869      	ldr	r1, [r5, #4]
{
   1973c:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   1973e:	f008 fc15 	bl	21f6c <bt_gatt_check_perm>
   19742:	b180      	cbz	r0, 19766 <gatt_indicate+0x36>
		BT_WARN("Link is not encrypted");
   19744:	492c      	ldr	r1, [pc, #176]	; (197f8 <gatt_indicate+0xc8>)
   19746:	680b      	ldr	r3, [r1, #0]
   19748:	f013 0f06 	tst.w	r3, #6
   1974c:	d008      	beq.n	19760 <gatt_indicate+0x30>
   1974e:	4b2b      	ldr	r3, [pc, #172]	; (197fc <gatt_indicate+0xcc>)
   19750:	482b      	ldr	r0, [pc, #172]	; (19800 <gatt_indicate+0xd0>)
   19752:	1ac9      	subs	r1, r1, r3
   19754:	0889      	lsrs	r1, r1, #2
   19756:	0189      	lsls	r1, r1, #6
   19758:	f041 0102 	orr.w	r1, r1, #2
   1975c:	f005 fbeb 	bl	1ef36 <log_0>
		return -EPERM;
   19760:	f04f 35ff 	mov.w	r5, #4294967295
   19764:	e00a      	b.n	1977c <gatt_indicate+0x4c>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   19766:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1976a:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1976c:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1976e:	f7ff fc09 	bl	18f84 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   19772:	3602      	adds	r6, #2
	if (!req) {
   19774:	4604      	mov	r4, r0
   19776:	b920      	cbnz	r0, 19782 <gatt_indicate+0x52>
		return -ENOMEM;
   19778:	f06f 050b 	mvn.w	r5, #11
}
   1977c:	4628      	mov	r0, r5
   1977e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
   19782:	4b20      	ldr	r3, [pc, #128]	; (19804 <gatt_indicate+0xd4>)
   19784:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   19786:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   19788:	4632      	mov	r2, r6
   1978a:	211d      	movs	r1, #29
   1978c:	4640      	mov	r0, r8
   1978e:	f7ff f9a5 	bl	18adc <bt_att_create_pdu>
	if (!buf) {
   19792:	4606      	mov	r6, r0
   19794:	b988      	cbnz	r0, 197ba <gatt_indicate+0x8a>
		BT_WARN("No buffer available to send indication");
   19796:	4918      	ldr	r1, [pc, #96]	; (197f8 <gatt_indicate+0xc8>)
   19798:	680b      	ldr	r3, [r1, #0]
   1979a:	f013 0f06 	tst.w	r3, #6
   1979e:	d008      	beq.n	197b2 <gatt_indicate+0x82>
   197a0:	4b16      	ldr	r3, [pc, #88]	; (197fc <gatt_indicate+0xcc>)
   197a2:	4819      	ldr	r0, [pc, #100]	; (19808 <gatt_indicate+0xd8>)
   197a4:	1ac9      	subs	r1, r1, r3
   197a6:	0889      	lsrs	r1, r1, #2
   197a8:	0189      	lsls	r1, r1, #6
   197aa:	f041 0102 	orr.w	r1, r1, #2
   197ae:	f005 fbc2 	bl	1ef36 <log_0>
		bt_att_req_free(req);
   197b2:	4620      	mov	r0, r4
   197b4:	f7ff fbfc 	bl	18fb0 <bt_att_req_free>
   197b8:	e7de      	b.n	19778 <gatt_indicate+0x48>
	return net_buf_simple_add(&buf->b, len);
   197ba:	f100 0a08 	add.w	sl, r0, #8
   197be:	2102      	movs	r1, #2
   197c0:	4650      	mov	r0, sl
   197c2:	f008 fcaa 	bl	2211a <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   197c6:	4607      	mov	r7, r0
   197c8:	8aa9      	ldrh	r1, [r5, #20]
   197ca:	f827 9b02 	strh.w	r9, [r7], #2
   197ce:	4650      	mov	r0, sl
   197d0:	f008 fca3 	bl	2211a <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   197d4:	8aaa      	ldrh	r2, [r5, #20]
   197d6:	6929      	ldr	r1, [r5, #16]
   197d8:	4638      	mov	r0, r7
   197da:	f007 fade 	bl	20d9a <memcpy>
	req->buf = buf;
   197de:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   197e0:	4621      	mov	r1, r4
   197e2:	4640      	mov	r0, r8
   197e4:	f008 f9af 	bl	21b46 <bt_att_req_send>
	if (err) {
   197e8:	4605      	mov	r5, r0
   197ea:	2800      	cmp	r0, #0
   197ec:	d0c6      	beq.n	1977c <gatt_indicate+0x4c>
		bt_att_req_free(req);
   197ee:	4620      	mov	r0, r4
   197f0:	f7ff fbde 	bl	18fb0 <bt_att_req_free>
   197f4:	e7c2      	b.n	1977c <gatt_indicate+0x4c>
   197f6:	bf00      	nop
   197f8:	20000660 	.word	0x20000660
   197fc:	20000654 	.word	0x20000654
   19800:	00026aaa 	.word	0x00026aaa
   19804:	00021b85 	.word	0x00021b85
   19808:	00026ac0 	.word	0x00026ac0

0001980c <bt_gatt_indicate>:
{
   1980c:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1980e:	4b39      	ldr	r3, [pc, #228]	; (198f4 <bt_gatt_indicate+0xe8>)
   19810:	f3bf 8f5b 	dmb	ish
   19814:	681b      	ldr	r3, [r3, #0]
   19816:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1981a:	079a      	lsls	r2, r3, #30
{
   1981c:	b08b      	sub	sp, #44	; 0x2c
   1981e:	4604      	mov	r4, r0
   19820:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   19822:	d561      	bpl.n	198e8 <bt_gatt_indicate+0xdc>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   19824:	b110      	cbz	r0, 1982c <bt_gatt_indicate+0x20>
   19826:	7a83      	ldrb	r3, [r0, #10]
   19828:	2b07      	cmp	r3, #7
   1982a:	d160      	bne.n	198ee <bt_gatt_indicate+0xe2>
	data.attr = params->attr;
   1982c:	6868      	ldr	r0, [r5, #4]
   1982e:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   19830:	f7ff fe98 	bl	19564 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   19834:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   19836:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1983a:	b33a      	cbz	r2, 1988c <bt_gatt_indicate+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1983c:	a905      	add	r1, sp, #20
   1983e:	9102      	str	r1, [sp, #8]
   19840:	492d      	ldr	r1, [pc, #180]	; (198f8 <bt_gatt_indicate+0xec>)
   19842:	9101      	str	r1, [sp, #4]
   19844:	2101      	movs	r1, #1
	found->attr = NULL;
   19846:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19848:	9100      	str	r1, [sp, #0]
   1984a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1984e:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19850:	f7ff feb8 	bl	195c4 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   19854:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   19856:	b91b      	cbnz	r3, 19860 <bt_gatt_indicate+0x54>
			return -ENOENT;
   19858:	f06f 0001 	mvn.w	r0, #1
}
   1985c:	b00b      	add	sp, #44	; 0x2c
   1985e:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   19860:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   19862:	9b05      	ldr	r3, [sp, #20]
   19864:	6818      	ldr	r0, [r3, #0]
   19866:	2300      	movs	r3, #0
   19868:	f88d 3010 	strb.w	r3, [sp, #16]
   1986c:	a904      	add	r1, sp, #16
   1986e:	f642 0303 	movw	r3, #10243	; 0x2803
   19872:	f8ad 3012 	strh.w	r3, [sp, #18]
   19876:	f007 fad2 	bl	20e1e <bt_uuid_cmp>
   1987a:	b970      	cbnz	r0, 1989a <bt_gatt_indicate+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1987c:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1987e:	68c3      	ldr	r3, [r0, #12]
   19880:	799b      	ldrb	r3, [r3, #6]
   19882:	069b      	lsls	r3, r3, #26
   19884:	d405      	bmi.n	19892 <bt_gatt_indicate+0x86>
			return -EINVAL;
   19886:	f06f 0015 	mvn.w	r0, #21
   1988a:	e7e7      	b.n	1985c <bt_gatt_indicate+0x50>
		if (!data.handle) {
   1988c:	2800      	cmp	r0, #0
   1988e:	d1e8      	bne.n	19862 <bt_gatt_indicate+0x56>
   19890:	e7e2      	b.n	19858 <bt_gatt_indicate+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   19892:	f008 fb10 	bl	21eb6 <bt_gatt_attr_value_handle>
   19896:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   1989a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1989e:	b13c      	cbz	r4, 198b0 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
   198a0:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   198a2:	4601      	mov	r1, r0
		params->_ref = 1;
   198a4:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   198a6:	462a      	mov	r2, r5
   198a8:	4620      	mov	r0, r4
   198aa:	f7ff ff41 	bl	19730 <gatt_indicate>
   198ae:	e7d5      	b.n	1985c <bt_gatt_indicate+0x50>
	data.err = -ENOTCONN;
   198b0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   198b4:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   198b6:	2302      	movs	r3, #2
   198b8:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   198bc:	f642 1302 	movw	r3, #10498	; 0x2902
   198c0:	f8ad 3012 	strh.w	r3, [sp, #18]
   198c4:	ab05      	add	r3, sp, #20
   198c6:	9302      	str	r3, [sp, #8]
   198c8:	4b0c      	ldr	r3, [pc, #48]	; (198fc <bt_gatt_indicate+0xf0>)
   198ca:	9301      	str	r3, [sp, #4]
   198cc:	2301      	movs	r3, #1
   198ce:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   198d0:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   198d2:	4623      	mov	r3, r4
   198d4:	aa04      	add	r2, sp, #16
   198d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   198da:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   198dc:	f88d 4010 	strb.w	r4, [sp, #16]
   198e0:	f7ff fe70 	bl	195c4 <bt_gatt_foreach_attr_type>
	return data.err;
   198e4:	9807      	ldr	r0, [sp, #28]
   198e6:	e7b9      	b.n	1985c <bt_gatt_indicate+0x50>
		return -EAGAIN;
   198e8:	f06f 000a 	mvn.w	r0, #10
   198ec:	e7b6      	b.n	1985c <bt_gatt_indicate+0x50>
		return -ENOTCONN;
   198ee:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   198f2:	e7b3      	b.n	1985c <bt_gatt_indicate+0x50>
   198f4:	20000374 	.word	0x20000374
   198f8:	00021bab 	.word	0x00021bab
   198fc:	00019a19 	.word	0x00019a19

00019900 <sc_process>:
{
   19900:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   19902:	f850 2c08 	ldr.w	r2, [r0, #-8]
   19906:	9201      	str	r2, [sp, #4]
{
   19908:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1990a:	f1a0 0120 	sub.w	r1, r0, #32
   1990e:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19912:	f3bf 8f5b 	dmb	ish
   19916:	e854 2f00 	ldrex	r2, [r4]
   1991a:	f022 0201 	bic.w	r2, r2, #1
   1991e:	e844 2000 	strex	r0, r2, [r4]
   19922:	2800      	cmp	r0, #0
   19924:	d1f7      	bne.n	19916 <sc_process+0x16>
   19926:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1992a:	4a0d      	ldr	r2, [pc, #52]	; (19960 <sc_process+0x60>)
   1992c:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   19930:	4a0c      	ldr	r2, [pc, #48]	; (19964 <sc_process+0x64>)
   19932:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   19936:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   19938:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   1993a:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1993e:	2204      	movs	r2, #4
	sc->start = 0U;
   19940:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   19944:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   19948:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1994c:	f7ff ff5e 	bl	1980c <bt_gatt_indicate>
   19950:	b918      	cbnz	r0, 1995a <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   19952:	2101      	movs	r1, #1
   19954:	4620      	mov	r0, r4
   19956:	f008 f9ba 	bl	21cce <atomic_set_bit>
}
   1995a:	b002      	add	sp, #8
   1995c:	bd10      	pop	{r4, pc}
   1995e:	bf00      	nop
   19960:	00024108 	.word	0x00024108
   19964:	0001928d 	.word	0x0001928d

00019968 <gatt_notify>:
{
   19968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1996c:	4614      	mov	r4, r2
   1996e:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   19970:	2214      	movs	r2, #20
   19972:	6861      	ldr	r1, [r4, #4]
{
   19974:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   19976:	f008 faf9 	bl	21f6c <bt_gatt_check_perm>
   1997a:	b188      	cbz	r0, 199a0 <gatt_notify+0x38>
		BT_WARN("Link is not encrypted");
   1997c:	4922      	ldr	r1, [pc, #136]	; (19a08 <gatt_notify+0xa0>)
   1997e:	680b      	ldr	r3, [r1, #0]
   19980:	f013 0f06 	tst.w	r3, #6
   19984:	d008      	beq.n	19998 <gatt_notify+0x30>
   19986:	4b21      	ldr	r3, [pc, #132]	; (19a0c <gatt_notify+0xa4>)
   19988:	4821      	ldr	r0, [pc, #132]	; (19a10 <gatt_notify+0xa8>)
   1998a:	1ac9      	subs	r1, r1, r3
   1998c:	0889      	lsrs	r1, r1, #2
   1998e:	0189      	lsls	r1, r1, #6
   19990:	f041 0102 	orr.w	r1, r1, #2
   19994:	f005 facf 	bl	1ef36 <log_0>
		return -EPERM;
   19998:	f04f 30ff 	mov.w	r0, #4294967295
}
   1999c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sizeof(*nfy) + params->len);
   199a0:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   199a2:	211b      	movs	r1, #27
   199a4:	3202      	adds	r2, #2
   199a6:	4638      	mov	r0, r7
   199a8:	f7ff f898 	bl	18adc <bt_att_create_pdu>
	if (!buf) {
   199ac:	4605      	mov	r5, r0
   199ae:	b980      	cbnz	r0, 199d2 <gatt_notify+0x6a>
		BT_WARN("No buffer available to send notification");
   199b0:	4915      	ldr	r1, [pc, #84]	; (19a08 <gatt_notify+0xa0>)
   199b2:	680b      	ldr	r3, [r1, #0]
   199b4:	f013 0f06 	tst.w	r3, #6
   199b8:	d008      	beq.n	199cc <gatt_notify+0x64>
   199ba:	4b14      	ldr	r3, [pc, #80]	; (19a0c <gatt_notify+0xa4>)
   199bc:	4815      	ldr	r0, [pc, #84]	; (19a14 <gatt_notify+0xac>)
   199be:	1ac9      	subs	r1, r1, r3
   199c0:	0889      	lsrs	r1, r1, #2
   199c2:	0189      	lsls	r1, r1, #6
   199c4:	f041 0102 	orr.w	r1, r1, #2
   199c8:	f005 fab5 	bl	1ef36 <log_0>
		return -ENOMEM;
   199cc:	f06f 000b 	mvn.w	r0, #11
   199d0:	e7e4      	b.n	1999c <gatt_notify+0x34>
   199d2:	f100 0908 	add.w	r9, r0, #8
   199d6:	2102      	movs	r1, #2
   199d8:	4648      	mov	r0, r9
   199da:	f008 fb9e 	bl	2211a <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   199de:	4606      	mov	r6, r0
   199e0:	89a1      	ldrh	r1, [r4, #12]
   199e2:	f826 8b02 	strh.w	r8, [r6], #2
   199e6:	4648      	mov	r0, r9
   199e8:	f008 fb97 	bl	2211a <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   199ec:	89a2      	ldrh	r2, [r4, #12]
   199ee:	68a1      	ldr	r1, [r4, #8]
   199f0:	4630      	mov	r0, r6
   199f2:	f007 f9d2 	bl	20d9a <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   199f6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   199fa:	4629      	mov	r1, r5
   199fc:	4638      	mov	r0, r7
}
   199fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   19a02:	f008 b855 	b.w	21ab0 <bt_att_send>
   19a06:	bf00      	nop
   19a08:	20000660 	.word	0x20000660
   19a0c:	20000654 	.word	0x20000654
   19a10:	00026aaa 	.word	0x00026aaa
   19a14:	00026ae7 	.word	0x00026ae7

00019a18 <notify_cb>:
{
   19a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   19a1a:	4b39      	ldr	r3, [pc, #228]	; (19b00 <notify_cb+0xe8>)
{
   19a1c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19a1e:	6882      	ldr	r2, [r0, #8]
   19a20:	429a      	cmp	r2, r3
{
   19a22:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   19a24:	d12e      	bne.n	19a84 <notify_cb+0x6c>
	ccc = attr->user_data;
   19a26:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   19a28:	4b36      	ldr	r3, [pc, #216]	; (19b04 <notify_cb+0xec>)
   19a2a:	429f      	cmp	r7, r3
   19a2c:	d11a      	bne.n	19a64 <notify_cb+0x4c>
	return memcmp(a, b, sizeof(*a));
   19a2e:	4d36      	ldr	r5, [pc, #216]	; (19b08 <notify_cb+0xf0>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   19a30:	2300      	movs	r3, #0
   19a32:	2207      	movs	r2, #7
   19a34:	4669      	mov	r1, sp
   19a36:	1c68      	adds	r0, r5, #1
   19a38:	9300      	str	r3, [sp, #0]
   19a3a:	f8cd 3003 	str.w	r3, [sp, #3]
   19a3e:	f007 f985 	bl	20d4c <memcmp>
   19a42:	b178      	cbz	r0, 19a64 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   19a44:	4629      	mov	r1, r5
   19a46:	2207      	movs	r2, #7
   19a48:	f811 0b01 	ldrb.w	r0, [r1], #1
   19a4c:	f7fd ff84 	bl	17958 <bt_conn_lookup_state_le>
			if (!conn) {
   19a50:	b9e0      	cbnz	r0, 19a8c <notify_cb+0x74>
				sc = (struct sc_data *)data->ind_params->data;
   19a52:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   19a54:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   19a56:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   19a58:	f811 0b01 	ldrb.w	r0, [r1], #1
   19a5c:	8853      	ldrh	r3, [r2, #2]
   19a5e:	8812      	ldrh	r2, [r2, #0]
   19a60:	f7ff fc9e 	bl	193a0 <sc_save>
		if (cfg->value != data->type) {
   19a64:	893a      	ldrh	r2, [r7, #8]
   19a66:	89a3      	ldrh	r3, [r4, #12]
   19a68:	429a      	cmp	r2, r3
   19a6a:	d10b      	bne.n	19a84 <notify_cb+0x6c>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   19a6c:	4639      	mov	r1, r7
   19a6e:	f811 0b01 	ldrb.w	r0, [r1], #1
   19a72:	f7fd ff27 	bl	178c4 <bt_conn_lookup_addr_le>
		if (!conn) {
   19a76:	4605      	mov	r5, r0
   19a78:	b120      	cbz	r0, 19a84 <notify_cb+0x6c>
		if (conn->state != BT_CONN_CONNECTED) {
   19a7a:	7a83      	ldrb	r3, [r0, #10]
   19a7c:	2b07      	cmp	r3, #7
   19a7e:	d008      	beq.n	19a92 <notify_cb+0x7a>
			bt_conn_unref(conn);
   19a80:	f007 fbbf 	bl	21202 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   19a84:	2701      	movs	r7, #1
}
   19a86:	4638      	mov	r0, r7
   19a88:	b003      	add	sp, #12
   19a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   19a8c:	f007 fbb9 	bl	21202 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   19a90:	e7e8      	b.n	19a64 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   19a92:	697b      	ldr	r3, [r7, #20]
   19a94:	b123      	cbz	r3, 19aa0 <notify_cb+0x88>
   19a96:	4631      	mov	r1, r6
   19a98:	4798      	blx	r3
   19a9a:	b908      	cbnz	r0, 19aa0 <notify_cb+0x88>
			bt_conn_unref(conn);
   19a9c:	4628      	mov	r0, r5
   19a9e:	e7ef      	b.n	19a80 <notify_cb+0x68>
		if (bt_gatt_check_perm(conn, attr,
   19aa0:	2214      	movs	r2, #20
   19aa2:	4631      	mov	r1, r6
   19aa4:	4628      	mov	r0, r5
   19aa6:	f008 fa61 	bl	21f6c <bt_gatt_check_perm>
   19aaa:	4607      	mov	r7, r0
   19aac:	b170      	cbz	r0, 19acc <notify_cb+0xb4>
			BT_WARN("Link is not encrypted");
   19aae:	4917      	ldr	r1, [pc, #92]	; (19b0c <notify_cb+0xf4>)
   19ab0:	680b      	ldr	r3, [r1, #0]
   19ab2:	f013 0f06 	tst.w	r3, #6
   19ab6:	d0e5      	beq.n	19a84 <notify_cb+0x6c>
   19ab8:	4b15      	ldr	r3, [pc, #84]	; (19b10 <notify_cb+0xf8>)
   19aba:	4816      	ldr	r0, [pc, #88]	; (19b14 <notify_cb+0xfc>)
   19abc:	1ac9      	subs	r1, r1, r3
   19abe:	0889      	lsrs	r1, r1, #2
   19ac0:	0189      	lsls	r1, r1, #6
   19ac2:	f041 0102 	orr.w	r1, r1, #2
   19ac6:	f005 fa36 	bl	1ef36 <log_0>
   19aca:	e7db      	b.n	19a84 <notify_cb+0x6c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   19acc:	89a3      	ldrh	r3, [r4, #12]
   19ace:	88a1      	ldrh	r1, [r4, #4]
   19ad0:	6922      	ldr	r2, [r4, #16]
   19ad2:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   19ad4:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   19ad6:	d10f      	bne.n	19af8 <notify_cb+0xe0>
			err = gatt_indicate(conn, data->handle,
   19ad8:	f7ff fe2a 	bl	19730 <gatt_indicate>
			if (err == 0) {
   19adc:	4606      	mov	r6, r0
   19ade:	b918      	cbnz	r0, 19ae8 <notify_cb+0xd0>
				data->ind_params->_ref++;
   19ae0:	6922      	ldr	r2, [r4, #16]
   19ae2:	7d93      	ldrb	r3, [r2, #22]
   19ae4:	3301      	adds	r3, #1
   19ae6:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   19ae8:	4628      	mov	r0, r5
   19aea:	f007 fb8a 	bl	21202 <bt_conn_unref>
		if (err < 0) {
   19aee:	2e00      	cmp	r6, #0
   19af0:	dbc9      	blt.n	19a86 <notify_cb+0x6e>
		data->err = 0;
   19af2:	2300      	movs	r3, #0
   19af4:	60a3      	str	r3, [r4, #8]
   19af6:	e7c5      	b.n	19a84 <notify_cb+0x6c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   19af8:	f7ff ff36 	bl	19968 <gatt_notify>
   19afc:	4606      	mov	r6, r0
   19afe:	e7f3      	b.n	19ae8 <notify_cb+0xd0>
   19b00:	000191ad 	.word	0x000191ad
   19b04:	2000053c 	.word	0x2000053c
   19b08:	200027e4 	.word	0x200027e4
   19b0c:	20000660 	.word	0x20000660
   19b10:	20000654 	.word	0x20000654
   19b14:	00026aaa 	.word	0x00026aaa

00019b18 <update_ccc>:
{
   19b18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   19b1c:	4b32      	ldr	r3, [pc, #200]	; (19be8 <update_ccc+0xd0>)
   19b1e:	6881      	ldr	r1, [r0, #8]
   19b20:	4299      	cmp	r1, r3
{
   19b22:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   19b24:	d122      	bne.n	19b6c <update_ccc+0x54>
	ccc = attr->user_data;
   19b26:	f8d0 800c 	ldr.w	r8, [r0, #12]
   19b2a:	4f30      	ldr	r7, [pc, #192]	; (19bec <update_ccc+0xd4>)
   19b2c:	4c30      	ldr	r4, [pc, #192]	; (19bf0 <update_ccc+0xd8>)
		if (!cfg->value ||
   19b2e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
	struct bt_conn *conn = data->conn;
   19b32:	6816      	ldr	r6, [r2, #0]
   19b34:	1b3c      	subs	r4, r7, r4
   19b36:	08a4      	lsrs	r4, r4, #2
		if (!cfg->value ||
   19b38:	b1c3      	cbz	r3, 19b6c <update_ccc+0x54>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   19b3a:	4642      	mov	r2, r8
   19b3c:	4630      	mov	r0, r6
   19b3e:	f812 1b01 	ldrb.w	r1, [r2], #1
   19b42:	f007 fb6c 	bl	2121e <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   19b46:	b188      	cbz	r0, 19b6c <update_ccc+0x54>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   19b48:	222a      	movs	r2, #42	; 0x2a
   19b4a:	4629      	mov	r1, r5
   19b4c:	4630      	mov	r0, r6
   19b4e:	f008 fa0d 	bl	21f6c <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   19b52:	2803      	cmp	r0, #3
   19b54:	d10e      	bne.n	19b74 <update_ccc+0x5c>
				BT_WARN("CCC %p not writable", attr);
   19b56:	683b      	ldr	r3, [r7, #0]
   19b58:	f013 0f06 	tst.w	r3, #6
   19b5c:	d006      	beq.n	19b6c <update_ccc+0x54>
   19b5e:	01a2      	lsls	r2, r4, #6
   19b60:	4824      	ldr	r0, [pc, #144]	; (19bf4 <update_ccc+0xdc>)
   19b62:	f042 0202 	orr.w	r2, r2, #2
   19b66:	4629      	mov	r1, r5
   19b68:	f005 f9f2 	bl	1ef50 <log_1>
}
   19b6c:	2001      	movs	r0, #1
   19b6e:	b002      	add	sp, #8
   19b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		gatt_ccc_changed(attr, ccc);
   19b74:	4641      	mov	r1, r8
   19b76:	4628      	mov	r0, r5
   19b78:	f007 fffa 	bl	21b70 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   19b7c:	4b1e      	ldr	r3, [pc, #120]	; (19bf8 <update_ccc+0xe0>)
   19b7e:	4598      	cmp	r8, r3
   19b80:	d1f4      	bne.n	19b6c <update_ccc+0x54>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   19b82:	7a30      	ldrb	r0, [r6, #8]
   19b84:	f106 0188 	add.w	r1, r6, #136	; 0x88
   19b88:	f7ff fae2 	bl	19150 <find_sc_cfg>
	if (!cfg) {
   19b8c:	2800      	cmp	r0, #0
   19b8e:	d0ed      	beq.n	19b6c <update_ccc+0x54>
	if (!(cfg->data.start || cfg->data.end)) {
   19b90:	8902      	ldrh	r2, [r0, #8]
   19b92:	8943      	ldrh	r3, [r0, #10]
   19b94:	ea53 0102 	orrs.w	r1, r3, r2
   19b98:	d0e8      	beq.n	19b6c <update_ccc+0x54>
	index = bt_conn_index(conn);
   19b9a:	4630      	mov	r0, r6
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   19b9c:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   19ba0:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   19ba4:	f7fd fdbe 	bl	17724 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   19ba8:	4914      	ldr	r1, [pc, #80]	; (19bfc <update_ccc+0xe4>)
   19baa:	4a15      	ldr	r2, [pc, #84]	; (19c00 <update_ccc+0xe8>)
   19bac:	2318      	movs	r3, #24
   19bae:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   19bb2:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   19bb4:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   19bb6:	4a13      	ldr	r2, [pc, #76]	; (19c04 <update_ccc+0xec>)
   19bb8:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   19bba:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   19bbc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   19bc0:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   19bc2:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   19bc4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   19bc8:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   19bca:	4630      	mov	r0, r6
   19bcc:	f7ff fe1e 	bl	1980c <bt_gatt_indicate>
   19bd0:	2800      	cmp	r0, #0
   19bd2:	d0cb      	beq.n	19b6c <update_ccc+0x54>
		BT_ERR("SC restore indication failed");
   19bd4:	683b      	ldr	r3, [r7, #0]
   19bd6:	075b      	lsls	r3, r3, #29
   19bd8:	d0c8      	beq.n	19b6c <update_ccc+0x54>
   19bda:	01a1      	lsls	r1, r4, #6
   19bdc:	480a      	ldr	r0, [pc, #40]	; (19c08 <update_ccc+0xf0>)
   19bde:	f041 0101 	orr.w	r1, r1, #1
   19be2:	f005 f9a8 	bl	1ef36 <log_0>
   19be6:	e7c1      	b.n	19b6c <update_ccc+0x54>
   19be8:	000191ad 	.word	0x000191ad
   19bec:	20000660 	.word	0x20000660
   19bf0:	20000654 	.word	0x20000654
   19bf4:	00026b10 	.word	0x00026b10
   19bf8:	2000053c 	.word	0x2000053c
   19bfc:	200025f4 	.word	0x200025f4
   19c00:	00024108 	.word	0x00024108
   19c04:	00021ceb 	.word	0x00021ceb
   19c08:	00026b24 	.word	0x00026b24

00019c0c <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   19c0c:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   19c0e:	4a06      	ldr	r2, [pc, #24]	; (19c28 <bt_gatt_connected+0x1c>)
	data.conn = conn;
   19c10:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   19c12:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   19c14:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   19c16:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   19c1a:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   19c1e:	f008 f998 	bl	21f52 <bt_gatt_foreach_attr>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   19c22:	b003      	add	sp, #12
   19c24:	f85d fb04 	ldr.w	pc, [sp], #4
   19c28:	00019b19 	.word	0x00019b19

00019c2c <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   19c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   19c2e:	4b09      	ldr	r3, [pc, #36]	; (19c54 <bt_gatt_att_max_mtu_changed+0x28>)
   19c30:	681c      	ldr	r4, [r3, #0]
{
   19c32:	4605      	mov	r5, r0
   19c34:	460e      	mov	r6, r1
   19c36:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   19c38:	b10c      	cbz	r4, 19c3e <bt_gatt_att_max_mtu_changed+0x12>
   19c3a:	3c04      	subs	r4, #4
   19c3c:	b904      	cbnz	r4, 19c40 <bt_gatt_att_max_mtu_changed+0x14>
		if (cb->att_mtu_updated) {
			cb->att_mtu_updated(conn, tx, rx);
		}
	}
}
   19c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->att_mtu_updated) {
   19c40:	6823      	ldr	r3, [r4, #0]
   19c42:	b11b      	cbz	r3, 19c4c <bt_gatt_att_max_mtu_changed+0x20>
			cb->att_mtu_updated(conn, tx, rx);
   19c44:	463a      	mov	r2, r7
   19c46:	4631      	mov	r1, r6
   19c48:	4628      	mov	r0, r5
   19c4a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   19c4c:	1d23      	adds	r3, r4, #4
   19c4e:	d0f6      	beq.n	19c3e <bt_gatt_att_max_mtu_changed+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19c50:	6864      	ldr	r4, [r4, #4]
   19c52:	e7f1      	b.n	19c38 <bt_gatt_att_max_mtu_changed+0xc>
   19c54:	200025d8 	.word	0x200025d8

00019c58 <db_hash_read>:
{
   19c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   19c5a:	4915      	ldr	r1, [pc, #84]	; (19cb0 <db_hash_read+0x58>)
{
   19c5c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   19c60:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   19c62:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   19c66:	461f      	mov	r7, r3
   19c68:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   19c6a:	f008 ffe3 	bl	22c34 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19c6e:	f3bf 8f5b 	dmb	ish
   19c72:	4b10      	ldr	r3, [pc, #64]	; (19cb4 <db_hash_read+0x5c>)
   19c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   19c76:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   19c7a:	075b      	lsls	r3, r3, #29
   19c7c:	d401      	bmi.n	19c82 <db_hash_read+0x2a>
		db_hash_gen(true);
   19c7e:	f7ff fcfb 	bl	19678 <db_hash_gen.isra.0>
	(void)bt_gatt_change_aware(conn, true);
   19c82:	2101      	movs	r1, #1
   19c84:	4620      	mov	r0, r4
   19c86:	f008 f994 	bl	21fb2 <bt_gatt_change_aware>
	if (offset > value_len) {
   19c8a:	2e10      	cmp	r6, #16
   19c8c:	d80c      	bhi.n	19ca8 <db_hash_read+0x50>
	len = MIN(buf_len, value_len - offset);
   19c8e:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   19c92:	4909      	ldr	r1, [pc, #36]	; (19cb8 <db_hash_read+0x60>)
	len = MIN(buf_len, value_len - offset);
   19c94:	42bc      	cmp	r4, r7
   19c96:	bfa8      	it	ge
   19c98:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   19c9a:	4622      	mov	r2, r4
   19c9c:	4431      	add	r1, r6
   19c9e:	4628      	mov	r0, r5
   19ca0:	f007 f87b 	bl	20d9a <memcpy>
}
   19ca4:	4620      	mov	r0, r4
   19ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19ca8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   19cac:	e7fa      	b.n	19ca4 <db_hash_read+0x4c>
   19cae:	bf00      	nop
   19cb0:	20001af8 	.word	0x20001af8
   19cb4:	20001b20 	.word	0x20001b20
   19cb8:	20001ab8 	.word	0x20001ab8

00019cbc <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   19cbc:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   19cbe:	4603      	mov	r3, r0
   19cc0:	4a15      	ldr	r2, [pc, #84]	; (19d18 <bt_gatt_disconnected+0x5c>)
{
   19cc2:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   19cc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19cc8:	2001      	movs	r0, #1
   19cca:	f008 f942 	bl	21f52 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   19cce:	4628      	mov	r0, r5
   19cd0:	f7ff fa4e 	bl	19170 <find_cf_cfg>
	if (!cfg) {
   19cd4:	4604      	mov	r4, r0
   19cd6:	b1e8      	cbz	r0, 19d14 <bt_gatt_disconnected+0x58>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19cd8:	f105 0688 	add.w	r6, r5, #136	; 0x88
   19cdc:	7a28      	ldrb	r0, [r5, #8]
   19cde:	4631      	mov	r1, r6
   19ce0:	f007 f9cd 	bl	2107e <bt_addr_le_is_bonded>
   19ce4:	b920      	cbnz	r0, 19cf0 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   19ce6:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   19ce8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   19cec:	f007 bfd1 	b.w	21c92 <clear_cf_cfg>
	memcpy(dst, src, sizeof(*dst));
   19cf0:	1c60      	adds	r0, r4, #1
   19cf2:	2207      	movs	r2, #7
   19cf4:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19cf6:	340c      	adds	r4, #12
   19cf8:	f007 f84f 	bl	20d9a <memcpy>
   19cfc:	f3bf 8f5b 	dmb	ish
   19d00:	e854 3f00 	ldrex	r3, [r4]
   19d04:	f023 0302 	bic.w	r3, r3, #2
   19d08:	e844 3200 	strex	r2, r3, [r4]
   19d0c:	2a00      	cmp	r2, #0
   19d0e:	d1f7      	bne.n	19d00 <bt_gatt_disconnected+0x44>
   19d10:	f3bf 8f5b 	dmb	ish
}
   19d14:	bd70      	pop	{r4, r5, r6, pc}
   19d16:	bf00      	nop
   19d18:	00019419 	.word	0x00019419

00019d1c <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   19d1c:	4a0c      	ldr	r2, [pc, #48]	; (19d50 <bt_smp_accept+0x34>)
{
   19d1e:	b508      	push	{r3, lr}
   19d20:	4603      	mov	r3, r0
		if (smp->chan.conn) {
   19d22:	6810      	ldr	r0, [r2, #0]
   19d24:	b918      	cbnz	r0, 19d2e <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.ops = &ops;
   19d26:	4b0b      	ldr	r3, [pc, #44]	; (19d54 <bt_smp_accept+0x38>)
   19d28:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan;
   19d2a:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   19d2c:	bd08      	pop	{r3, pc}
	BT_ERR("No available SMP context for conn %p", conn);
   19d2e:	4a0a      	ldr	r2, [pc, #40]	; (19d58 <bt_smp_accept+0x3c>)
   19d30:	6811      	ldr	r1, [r2, #0]
   19d32:	0749      	lsls	r1, r1, #29
   19d34:	d009      	beq.n	19d4a <bt_smp_accept+0x2e>
   19d36:	4909      	ldr	r1, [pc, #36]	; (19d5c <bt_smp_accept+0x40>)
   19d38:	4809      	ldr	r0, [pc, #36]	; (19d60 <bt_smp_accept+0x44>)
   19d3a:	1a52      	subs	r2, r2, r1
   19d3c:	0892      	lsrs	r2, r2, #2
   19d3e:	0192      	lsls	r2, r2, #6
   19d40:	f042 0201 	orr.w	r2, r2, #1
   19d44:	4619      	mov	r1, r3
   19d46:	f005 f903 	bl	1ef50 <log_1>
   19d4a:	f06f 000b 	mvn.w	r0, #11
   19d4e:	e7ed      	b.n	19d2c <bt_smp_accept+0x10>
   19d50:	20001b78 	.word	0x20001b78
   19d54:	000241e4 	.word	0x000241e4
   19d58:	20000678 	.word	0x20000678
   19d5c:	20000654 	.word	0x20000654
   19d60:	00026b50 	.word	0x00026b50

00019d64 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   19d64:	4b02      	ldr	r3, [pc, #8]	; (19d70 <net_buf_pool_get+0xc>)
   19d66:	222c      	movs	r2, #44	; 0x2c
   19d68:	fb02 3000 	mla	r0, r2, r0, r3
   19d6c:	4770      	bx	lr
   19d6e:	bf00      	nop
   19d70:	200007dc 	.word	0x200007dc

00019d74 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19d74:	7983      	ldrb	r3, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   19d76:	4a06      	ldr	r2, [pc, #24]	; (19d90 <net_buf_id+0x1c>)
   19d78:	212c      	movs	r1, #44	; 0x2c
   19d7a:	fb01 2303 	mla	r3, r1, r3, r2
   19d7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19d80:	7f1b      	ldrb	r3, [r3, #28]
   19d82:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   19d84:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19d86:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   19d8a:	fbb0 f0f3 	udiv	r0, r0, r3
   19d8e:	4770      	bx	lr
   19d90:	200007dc 	.word	0x200007dc

00019d94 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   19d94:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19d96:	4a0a      	ldr	r2, [pc, #40]	; (19dc0 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19d98:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19d9a:	242c      	movs	r4, #44	; 0x2c
   19d9c:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   19da0:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19da4:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   19da6:	6823      	ldr	r3, [r4, #0]
   19da8:	429a      	cmp	r2, r3
   19daa:	bf94      	ite	ls
   19dac:	600a      	strls	r2, [r1, #0]
   19dae:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   19db0:	f7ff ffe0 	bl	19d74 <net_buf_id>
   19db4:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   19db8:	fb02 3000 	mla	r0, r2, r0, r3
   19dbc:	bd10      	pop	{r4, pc}
   19dbe:	bf00      	nop
   19dc0:	200007dc 	.word	0x200007dc

00019dc4 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   19dc4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   19dc8:	4605      	mov	r5, r0
   19dca:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   19dcc:	4610      	mov	r0, r2
   19dce:	4619      	mov	r1, r3
{
   19dd0:	4616      	mov	r6, r2
   19dd2:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   19dd4:	f009 f8bd 	bl	22f52 <sys_clock_timeout_end_calc>
   19dd8:	4680      	mov	r8, r0
   19dda:	4689      	mov	r9, r1
	__asm__ volatile(
   19ddc:	f04f 0340 	mov.w	r3, #64	; 0x40
   19de0:	f3ef 8a11 	mrs	sl, BASEPRI
   19de4:	f383 8812 	msr	BASEPRI_MAX, r3
   19de8:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   19dec:	8b6b      	ldrh	r3, [r5, #26]
   19dee:	2b00      	cmp	r3, #0
   19df0:	d059      	beq.n	19ea6 <net_buf_alloc_len+0xe2>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   19df2:	8b2a      	ldrh	r2, [r5, #24]
   19df4:	429a      	cmp	r2, r3
   19df6:	d93d      	bls.n	19e74 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   19df8:	2200      	movs	r2, #0
   19dfa:	2300      	movs	r3, #0
   19dfc:	4628      	mov	r0, r5
   19dfe:	f003 fa91 	bl	1d324 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   19e02:	4604      	mov	r4, r0
   19e04:	2800      	cmp	r0, #0
   19e06:	d035      	beq.n	19e74 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   19e08:	f38a 8811 	msr	BASEPRI, sl
   19e0c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   19e10:	9b01      	ldr	r3, [sp, #4]
   19e12:	2b00      	cmp	r3, #0
   19e14:	d057      	beq.n	19ec6 <net_buf_alloc_len+0x102>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   19e16:	ea56 0307 	orrs.w	r3, r6, r7
   19e1a:	d010      	beq.n	19e3e <net_buf_alloc_len+0x7a>
   19e1c:	1c7b      	adds	r3, r7, #1
   19e1e:	bf08      	it	eq
   19e20:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   19e24:	d00b      	beq.n	19e3e <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   19e26:	f004 f9ab 	bl	1e180 <sys_clock_tick_get>
   19e2a:	ebb8 0600 	subs.w	r6, r8, r0
   19e2e:	eb69 0701 	sbc.w	r7, r9, r1
   19e32:	2e00      	cmp	r6, #0
   19e34:	f177 0300 	sbcs.w	r3, r7, #0
   19e38:	bfbc      	itt	lt
   19e3a:	2600      	movlt	r6, #0
   19e3c:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19e3e:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   19e40:	f8df 8098 	ldr.w	r8, [pc, #152]	; 19edc <net_buf_alloc_len+0x118>
   19e44:	f04f 092c 	mov.w	r9, #44	; 0x2c
   19e48:	fb09 8303 	mla	r3, r9, r3, r8
   19e4c:	4632      	mov	r2, r6
   19e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19e50:	681b      	ldr	r3, [r3, #0]
   19e52:	a901      	add	r1, sp, #4
   19e54:	681d      	ldr	r5, [r3, #0]
   19e56:	4620      	mov	r0, r4
   19e58:	463b      	mov	r3, r7
   19e5a:	47a8      	blx	r5
   19e5c:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   19e5e:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   19e60:	2800      	cmp	r0, #0
   19e62:	d131      	bne.n	19ec8 <net_buf_alloc_len+0x104>
	k_lifo_put(&pool->free, buf);
   19e64:	79a0      	ldrb	r0, [r4, #6]
   19e66:	4621      	mov	r1, r4
   19e68:	fb00 8009 	mla	r0, r0, r9, r8
   19e6c:	f008 fddf 	bl	22a2e <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   19e70:	462c      	mov	r4, r5
}
   19e72:	e024      	b.n	19ebe <net_buf_alloc_len+0xfa>
		uninit_count = pool->uninit_count--;
   19e74:	8b6b      	ldrh	r3, [r5, #26]
   19e76:	1e5a      	subs	r2, r3, #1
   19e78:	836a      	strh	r2, [r5, #26]
   19e7a:	f38a 8811 	msr	BASEPRI, sl
   19e7e:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19e82:	7f2a      	ldrb	r2, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   19e84:	8b2c      	ldrh	r4, [r5, #24]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19e86:	f102 0017 	add.w	r0, r2, #23
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   19e8a:	1ae4      	subs	r4, r4, r3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   19e8c:	6aab      	ldr	r3, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19e8e:	f020 0003 	bic.w	r0, r0, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   19e92:	fb04 3400 	mla	r4, r4, r0, r3
	return pool - _net_buf_pool_list;
   19e96:	4811      	ldr	r0, [pc, #68]	; (19edc <net_buf_alloc_len+0x118>)
   19e98:	4b11      	ldr	r3, [pc, #68]	; (19ee0 <net_buf_alloc_len+0x11c>)
	buf->user_data_size = pool->user_data_size;
   19e9a:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   19e9c:	1a2d      	subs	r5, r5, r0
   19e9e:	10ad      	asrs	r5, r5, #2
   19ea0:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   19ea2:	71a5      	strb	r5, [r4, #6]
		goto success;
   19ea4:	e7b4      	b.n	19e10 <net_buf_alloc_len+0x4c>
   19ea6:	f38a 8811 	msr	BASEPRI, sl
   19eaa:	f3bf 8f6f 	isb	sy
   19eae:	4632      	mov	r2, r6
   19eb0:	463b      	mov	r3, r7
   19eb2:	4628      	mov	r0, r5
   19eb4:	f003 fa36 	bl	1d324 <z_impl_k_queue_get>
	if (!buf) {
   19eb8:	4604      	mov	r4, r0
   19eba:	2800      	cmp	r0, #0
   19ebc:	d1a8      	bne.n	19e10 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   19ebe:	4620      	mov	r0, r4
   19ec0:	b002      	add	sp, #8
   19ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   19ec6:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   19ec8:	2300      	movs	r3, #0
	buf->ref   = 1U;
   19eca:	2201      	movs	r2, #1
	buf->frags = NULL;
   19ecc:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   19ece:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   19ed0:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   19ed2:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   19ed4:	6923      	ldr	r3, [r4, #16]
   19ed6:	81e2      	strh	r2, [r4, #14]
   19ed8:	60a3      	str	r3, [r4, #8]
	return buf;
   19eda:	e7f0      	b.n	19ebe <net_buf_alloc_len+0xfa>
   19edc:	200007dc 	.word	0x200007dc
   19ee0:	ba2e8ba3 	.word	0xba2e8ba3

00019ee4 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   19ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19ee8:	4d16      	ldr	r5, [pc, #88]	; (19f44 <net_buf_unref+0x60>)
   19eea:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   19eec:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   19eee:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   19ef0:	b90c      	cbnz	r4, 19ef6 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   19ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   19ef6:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   19ef8:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   19efc:	3b01      	subs	r3, #1
   19efe:	b2db      	uxtb	r3, r3
   19f00:	7123      	strb	r3, [r4, #4]
   19f02:	2b00      	cmp	r3, #0
   19f04:	d1f5      	bne.n	19ef2 <net_buf_unref+0xe>
		if (buf->__buf) {
   19f06:	6921      	ldr	r1, [r4, #16]
   19f08:	b159      	cbz	r1, 19f22 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   19f0a:	7963      	ldrb	r3, [r4, #5]
   19f0c:	079b      	lsls	r3, r3, #30
   19f0e:	d407      	bmi.n	19f20 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   19f10:	79a3      	ldrb	r3, [r4, #6]
   19f12:	fb07 5303 	mla	r3, r7, r3, r5
   19f16:	4620      	mov	r0, r4
   19f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19f1a:	681b      	ldr	r3, [r3, #0]
   19f1c:	689b      	ldr	r3, [r3, #8]
   19f1e:	4798      	blx	r3
			buf->__buf = NULL;
   19f20:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   19f22:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   19f24:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   19f26:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   19f2a:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   19f2c:	6a1b      	ldr	r3, [r3, #32]
   19f2e:	b11b      	cbz	r3, 19f38 <net_buf_unref+0x54>
			pool->destroy(buf);
   19f30:	4620      	mov	r0, r4
   19f32:	4798      	blx	r3
{
   19f34:	4644      	mov	r4, r8
   19f36:	e7db      	b.n	19ef0 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   19f38:	4621      	mov	r1, r4
   19f3a:	fb00 5007 	mla	r0, r0, r7, r5
   19f3e:	f008 fd76 	bl	22a2e <k_queue_prepend>
}
   19f42:	e7f7      	b.n	19f34 <net_buf_unref+0x50>
   19f44:	200007dc 	.word	0x200007dc

00019f48 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   19f48:	b570      	push	{r4, r5, r6, lr}
   19f4a:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   19f4c:	480d      	ldr	r0, [pc, #52]	; (19f84 <onoff_stop+0x3c>)
   19f4e:	1a23      	subs	r3, r4, r0
   19f50:	109a      	asrs	r2, r3, #2
   19f52:	4b0d      	ldr	r3, [pc, #52]	; (19f88 <onoff_stop+0x40>)
   19f54:	4353      	muls	r3, r2
   19f56:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
   19f58:	250c      	movs	r5, #12
   19f5a:	435d      	muls	r5, r3
   19f5c:	f105 0340 	add.w	r3, r5, #64	; 0x40
{
   19f60:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
   19f62:	4418      	add	r0, r3
   19f64:	2140      	movs	r1, #64	; 0x40
   19f66:	f008 f924 	bl	221b2 <set_off_state>
	if (err < 0) {
   19f6a:	1e01      	subs	r1, r0, #0
   19f6c:	db04      	blt.n	19f78 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   19f6e:	4b07      	ldr	r3, [pc, #28]	; (19f8c <onoff_stop+0x44>)
   19f70:	442b      	add	r3, r5
   19f72:	685b      	ldr	r3, [r3, #4]
   19f74:	4798      	blx	r3
	return 0;
   19f76:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   19f78:	4620      	mov	r0, r4
   19f7a:	4633      	mov	r3, r6
}
   19f7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   19f80:	4718      	bx	r3
   19f82:	bf00      	nop
   19f84:	20002620 	.word	0x20002620
   19f88:	b6db6db7 	.word	0xb6db6db7
   19f8c:	00024240 	.word	0x00024240

00019f90 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   19f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   19f94:	4c0f      	ldr	r4, [pc, #60]	; (19fd4 <onoff_start+0x44>)
   19f96:	4d10      	ldr	r5, [pc, #64]	; (19fd8 <onoff_start+0x48>)
   19f98:	1b03      	subs	r3, r0, r4
   19f9a:	109b      	asrs	r3, r3, #2
   19f9c:	435d      	muls	r5, r3
   19f9e:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
   19fa0:	250c      	movs	r5, #12
   19fa2:	435d      	muls	r5, r3
{
   19fa4:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   19fa6:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
   19faa:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   19fac:	4420      	add	r0, r4
   19fae:	2140      	movs	r1, #64	; 0x40
   19fb0:	f008 f918 	bl	221e4 <set_starting_state>
	if (err < 0) {
   19fb4:	1e01      	subs	r1, r0, #0
   19fb6:	db08      	blt.n	19fca <onoff_start+0x3a>
	subdata->cb = cb;
   19fb8:	4b08      	ldr	r3, [pc, #32]	; (19fdc <onoff_start+0x4c>)
   19fba:	442c      	add	r4, r5
	subdata->user_data = user_data;
   19fbc:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   19fc0:	4b07      	ldr	r3, [pc, #28]	; (19fe0 <onoff_start+0x50>)
   19fc2:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   19fc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   19fc8:	4718      	bx	r3
		notify(mgr, err);
   19fca:	4638      	mov	r0, r7
   19fcc:	4633      	mov	r3, r6
}
   19fce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   19fd2:	4718      	bx	r3
   19fd4:	20002620 	.word	0x20002620
   19fd8:	b6db6db7 	.word	0xb6db6db7
   19fdc:	00022247 	.word	0x00022247
   19fe0:	00024240 	.word	0x00024240

00019fe4 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   19fe4:	2200      	movs	r2, #0
{
   19fe6:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   19fe8:	2101      	movs	r1, #1
{
   19fea:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   19fec:	4610      	mov	r0, r2
   19fee:	f7fa f80b 	bl	14008 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   19ff2:	2000      	movs	r0, #0
   19ff4:	f7f9 ffd6 	bl	13fa4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   19ff8:	480f      	ldr	r0, [pc, #60]	; (1a038 <clk_init+0x54>)
   19ffa:	f001 fef1 	bl	1bde0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   19ffe:	4b0f      	ldr	r3, [pc, #60]	; (1a03c <clk_init+0x58>)
   1a000:	4298      	cmp	r0, r3
   1a002:	d115      	bne.n	1a030 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1a004:	f008 fb5c 	bl	226c0 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   1a008:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1a00a:	490d      	ldr	r1, [pc, #52]	; (1a040 <clk_init+0x5c>)
   1a00c:	4630      	mov	r0, r6
   1a00e:	f004 fac9 	bl	1e5a4 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1a012:	2800      	cmp	r0, #0
   1a014:	db0b      	blt.n	1a02e <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1a016:	2501      	movs	r5, #1
   1a018:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   1a01a:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1a01c:	4908      	ldr	r1, [pc, #32]	; (1a040 <clk_init+0x5c>)
   1a01e:	f104 001c 	add.w	r0, r4, #28
   1a022:	f004 fabf 	bl	1e5a4 <onoff_manager_init>
		if (err < 0) {
   1a026:	2800      	cmp	r0, #0
   1a028:	db01      	blt.n	1a02e <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1a02a:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   1a02c:	2000      	movs	r0, #0
}
   1a02e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1a030:	f06f 0004 	mvn.w	r0, #4
   1a034:	e7fb      	b.n	1a02e <clk_init+0x4a>
   1a036:	bf00      	nop
   1a038:	0001a079 	.word	0x0001a079
   1a03c:	0bad0000 	.word	0x0bad0000
   1a040:	00024288 	.word	0x00024288

0001a044 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1a044:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1a046:	230c      	movs	r3, #12
   1a048:	4809      	ldr	r0, [pc, #36]	; (1a070 <clkstarted_handle.constprop.0+0x2c>)
   1a04a:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   1a04c:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1a04e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1a050:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   1a054:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1a056:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   1a058:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1a05a:	4418      	add	r0, r3
   1a05c:	f008 f8e0 	bl	22220 <set_on_state>
	if (callback) {
   1a060:	b12d      	cbz	r5, 1a06e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1a062:	4632      	mov	r2, r6
   1a064:	462b      	mov	r3, r5
   1a066:	4803      	ldr	r0, [pc, #12]	; (1a074 <clkstarted_handle.constprop.0+0x30>)
}
   1a068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1a06c:	4718      	bx	r3
}
   1a06e:	bd70      	pop	{r4, r5, r6, pc}
   1a070:	20002620 	.word	0x20002620
   1a074:	00023354 	.word	0x00023354

0001a078 <clock_event_handler>:
	switch (event) {
   1a078:	b110      	cbz	r0, 1a080 <clock_event_handler+0x8>
   1a07a:	2801      	cmp	r0, #1
   1a07c:	d004      	beq.n	1a088 <clock_event_handler+0x10>
   1a07e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1a080:	4b03      	ldr	r3, [pc, #12]	; (1a090 <clock_event_handler+0x18>)
   1a082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a084:	075b      	lsls	r3, r3, #29
   1a086:	d101      	bne.n	1a08c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1a088:	f7ff bfdc 	b.w	1a044 <clkstarted_handle.constprop.0>
}
   1a08c:	4770      	bx	lr
   1a08e:	bf00      	nop
   1a090:	20002620 	.word	0x20002620

0001a094 <lfclk_start>:
{
   1a094:	b510      	push	{r4, lr}
	if (!once) {
   1a096:	4c07      	ldr	r4, [pc, #28]	; (1a0b4 <lfclk_start+0x20>)
   1a098:	7823      	ldrb	r3, [r4, #0]
   1a09a:	b92b      	cbnz	r3, 1a0a8 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   1a09c:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   1a0a0:	f008 ff53 	bl	22f4a <z_impl_k_busy_wait>
		once = true;
   1a0a4:	2301      	movs	r3, #1
   1a0a6:	7023      	strb	r3, [r4, #0]
}
   1a0a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}
#endif // defined(CLOCK_FEATURE_HFCLK_DIVIDE_PRESENT) || NRF_CLOCK_HAS_HFCLK_192M

NRFX_STATIC_INLINE void nrfx_clock_lfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1a0ac:	2000      	movs	r0, #0
   1a0ae:	f001 be87 	b.w	1bdc0 <nrfx_clock_start>
   1a0b2:	bf00      	nop
   1a0b4:	200028c8 	.word	0x200028c8

0001a0b8 <hfclk_stop>:
{
   1a0b8:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   1a0ba:	f008 ff44 	bl	22f46 <z_impl_k_uptime_ticks>
   1a0be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1a0c2:	460c      	mov	r4, r1
   1a0c4:	fba0 0103 	umull	r0, r1, r0, r3
   1a0c8:	fb03 1104 	mla	r1, r3, r4, r1
		hf_stop_tstamp = k_uptime_get();
   1a0cc:	4a05      	ldr	r2, [pc, #20]	; (1a0e4 <hfclk_stop+0x2c>)
   1a0ce:	0bc3      	lsrs	r3, r0, #15
   1a0d0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
}
   1a0d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a0d8:	0bc9      	lsrs	r1, r1, #15
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1a0da:	2001      	movs	r0, #1
		hf_stop_tstamp = k_uptime_get();
   1a0dc:	e9c2 3100 	strd	r3, r1, [r2]
   1a0e0:	f008 bae9 	b.w	226b6 <nrfx_clock_stop>
   1a0e4:	20001c68 	.word	0x20001c68

0001a0e8 <generic_hfclk_stop>:
   1a0e8:	4b08      	ldr	r3, [pc, #32]	; (1a10c <generic_hfclk_stop+0x24>)
   1a0ea:	f3bf 8f5b 	dmb	ish
   1a0ee:	e853 2f00 	ldrex	r2, [r3]
   1a0f2:	f022 0102 	bic.w	r1, r2, #2
   1a0f6:	e843 1000 	strex	r0, r1, [r3]
   1a0fa:	2800      	cmp	r0, #0
   1a0fc:	d1f7      	bne.n	1a0ee <generic_hfclk_stop+0x6>
   1a0fe:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1a102:	07d3      	lsls	r3, r2, #31
   1a104:	d401      	bmi.n	1a10a <generic_hfclk_stop+0x22>
	hfclk_stop();
   1a106:	f7ff bfd7 	b.w	1a0b8 <hfclk_stop>
}
   1a10a:	4770      	bx	lr
   1a10c:	20002670 	.word	0x20002670

0001a110 <hfclk_start>:
{
   1a110:	b510      	push	{r4, lr}
   1a112:	f008 ff18 	bl	22f46 <z_impl_k_uptime_ticks>
   1a116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1a11a:	460c      	mov	r4, r1
   1a11c:	fba0 0103 	umull	r0, r1, r0, r3
   1a120:	fb03 1104 	mla	r1, r3, r4, r1
		hf_start_tstamp = k_uptime_get();
   1a124:	4a05      	ldr	r2, [pc, #20]	; (1a13c <hfclk_start+0x2c>)
   1a126:	0bc3      	lsrs	r3, r0, #15
   1a128:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
}
   1a12c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a130:	0bc9      	lsrs	r1, r1, #15
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1a132:	2001      	movs	r0, #1
		hf_start_tstamp = k_uptime_get();
   1a134:	e9c2 3100 	strd	r3, r1, [r2]
   1a138:	f001 be42 	b.w	1bdc0 <nrfx_clock_start>
   1a13c:	20001c60 	.word	0x20001c60

0001a140 <generic_hfclk_start>:
{
   1a140:	b508      	push	{r3, lr}
	__asm__ volatile(
   1a142:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a146:	f3ef 8111 	mrs	r1, BASEPRI
   1a14a:	f383 8812 	msr	BASEPRI_MAX, r3
   1a14e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1a152:	4a11      	ldr	r2, [pc, #68]	; (1a198 <generic_hfclk_start+0x58>)
   1a154:	6813      	ldr	r3, [r2, #0]
   1a156:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1a15a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1a15e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1a160:	d00c      	beq.n	1a17c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1a162:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a166:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1a16a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1a16e:	f013 0301 	ands.w	r3, r3, #1
   1a172:	d003      	beq.n	1a17c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   1a174:	4809      	ldr	r0, [pc, #36]	; (1a19c <generic_hfclk_start+0x5c>)
   1a176:	f008 f853 	bl	22220 <set_on_state>
			already_started = true;
   1a17a:	2301      	movs	r3, #1
	__asm__ volatile(
   1a17c:	f381 8811 	msr	BASEPRI, r1
   1a180:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1a184:	b123      	cbz	r3, 1a190 <generic_hfclk_start+0x50>
}
   1a186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1a18a:	2000      	movs	r0, #0
   1a18c:	f7ff bf5a 	b.w	1a044 <clkstarted_handle.constprop.0>
}
   1a190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	hfclk_start();
   1a194:	f7ff bfbc 	b.w	1a110 <hfclk_start>
   1a198:	20002670 	.word	0x20002670
   1a19c:	20002660 	.word	0x20002660

0001a1a0 <cmd_status>:
		 &data, &config,
		 PRE_KERNEL_1, CONFIG_CLOCK_CONTROL_INIT_PRIORITY,
		 &clock_control_api);

static int cmd_status(const struct shell *shell, size_t argc, char **argv)
{
   1a1a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1a1a4:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
   1a1a8:	4604      	mov	r4, r0
   1a1aa:	f8d7 6418 	ldr.w	r6, [r7, #1048]	; 0x418
   1a1ae:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
	__asm__ volatile(
   1a1b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a1b6:	f3ef 8811 	mrs	r8, BASEPRI
   1a1ba:	f383 8812 	msr	BASEPRI_MAX, r3
   1a1be:	f3bf 8f6f 	isb	sy
   1a1c2:	f008 fec0 	bl	22f46 <z_impl_k_uptime_ticks>
   1a1c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1a1ca:	460a      	mov	r2, r1
   1a1cc:	fba0 0103 	umull	r0, r1, r0, r3
   1a1d0:	fb03 1102 	mla	r1, r3, r2, r1
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1a1d4:	f8d7 940c 	ldr.w	r9, [r7, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1a1d8:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
	uint64_t now = k_uptime_get();

	(void)nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, (void *)&hfclk_src);
	hf_status = (hfclk_src == NRF_CLOCK_HFCLK_HIGH_ACCURACY);

	abs_start = hf_start_tstamp;
   1a1dc:	4b25      	ldr	r3, [pc, #148]	; (1a274 <cmd_status+0xd4>)
   1a1de:	f8d3 b000 	ldr.w	fp, [r3]
	abs_stop = hf_stop_tstamp;
   1a1e2:	4b25      	ldr	r3, [pc, #148]	; (1a278 <cmd_status+0xd8>)
   1a1e4:	0bc5      	lsrs	r5, r0, #15
   1a1e6:	f8d3 a000 	ldr.w	sl, [r3]
   1a1ea:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
	__asm__ volatile(
   1a1ee:	f388 8811 	msr	BASEPRI, r8
   1a1f2:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	shell_print(shell, "HF clock:");
   1a1f6:	4a21      	ldr	r2, [pc, #132]	; (1a27c <cmd_status+0xdc>)
	shell_print(shell, "\t- %srunning (users: %u)",
   1a1f8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1a294 <cmd_status+0xf4>
   1a1fc:	4f20      	ldr	r7, [pc, #128]	; (1a280 <cmd_status+0xe0>)
	shell_print(shell, "HF clock:");
   1a1fe:	4620      	mov	r0, r4
   1a200:	2108      	movs	r1, #8
   1a202:	f005 fba4 	bl	1f94e <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
   1a206:	f019 0f01 	tst.w	r9, #1
   1a20a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 1a298 <cmd_status+0xf8>
   1a20e:	4a1d      	ldr	r2, [pc, #116]	; (1a284 <cmd_status+0xe4>)
   1a210:	f8b9 301a 	ldrh.w	r3, [r9, #26]
   1a214:	9300      	str	r3, [sp, #0]
   1a216:	4620      	mov	r0, r4
   1a218:	bf14      	ite	ne
   1a21a:	4643      	movne	r3, r8
   1a21c:	463b      	moveq	r3, r7
   1a21e:	2108      	movs	r1, #8
   1a220:	f005 fb95 	bl	1f94e <shell_fprintf>
			hf_status ? "" : "not ", hf_mgr->refs);
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
   1a224:	eba5 030b 	sub.w	r3, r5, fp
   1a228:	9300      	str	r3, [sp, #0]
   1a22a:	4620      	mov	r0, r4
   1a22c:	465b      	mov	r3, fp
   1a22e:	4a16      	ldr	r2, [pc, #88]	; (1a288 <cmd_status+0xe8>)
   1a230:	2108      	movs	r1, #8
			(uint32_t)abs_start, (uint32_t)(now - abs_start));
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
   1a232:	eba5 050a 	sub.w	r5, r5, sl
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
   1a236:	f005 fb8a 	bl	1f94e <shell_fprintf>
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
   1a23a:	4653      	mov	r3, sl
   1a23c:	4620      	mov	r0, r4
   1a23e:	4a13      	ldr	r2, [pc, #76]	; (1a28c <cmd_status+0xec>)
   1a240:	9500      	str	r5, [sp, #0]
   1a242:	2108      	movs	r1, #8
   1a244:	f005 fb83 	bl	1f94e <shell_fprintf>
			(uint32_t)abs_stop, (uint32_t)(now - abs_stop));
	shell_print(shell, "LF clock:");
   1a248:	4620      	mov	r0, r4
   1a24a:	4a11      	ldr	r2, [pc, #68]	; (1a290 <cmd_status+0xf0>)
   1a24c:	2108      	movs	r1, #8
   1a24e:	f005 fb7e 	bl	1f94e <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
   1a252:	f8b9 3036 	ldrh.w	r3, [r9, #54]	; 0x36
   1a256:	9300      	str	r3, [sp, #0]
   1a258:	4620      	mov	r0, r4
   1a25a:	4a0a      	ldr	r2, [pc, #40]	; (1a284 <cmd_status+0xe4>)
   1a25c:	2e00      	cmp	r6, #0
   1a25e:	bf14      	ite	ne
   1a260:	4643      	movne	r3, r8
   1a262:	463b      	moveq	r3, r7
   1a264:	2108      	movs	r1, #8
   1a266:	f005 fb72 	bl	1f94e <shell_fprintf>
			lf_status ? "" : "not ", lf_mgr->refs);

	return 0;
}
   1a26a:	2000      	movs	r0, #0
   1a26c:	b003      	add	sp, #12
   1a26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a272:	bf00      	nop
   1a274:	20001c60 	.word	0x20001c60
   1a278:	20001c68 	.word	0x20001c68
   1a27c:	00026b89 	.word	0x00026b89
   1a280:	00026b84 	.word	0x00026b84
   1a284:	00026b94 	.word	0x00026b94
   1a288:	00026bae 	.word	0x00026bae
   1a28c:	00026bd0 	.word	0x00026bd0
   1a290:	00026bf1 	.word	0x00026bf1
   1a294:	00024485 	.word	0x00024485
   1a298:	20002620 	.word	0x20002620

0001a29c <api_blocking_start>:
{
   1a29c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1a29e:	2200      	movs	r2, #0
   1a2a0:	2301      	movs	r3, #1
   1a2a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1a2a6:	ab04      	add	r3, sp, #16
   1a2a8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1a2ac:	4a09      	ldr	r2, [pc, #36]	; (1a2d4 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1a2ae:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1a2b2:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1a2b4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1a2b8:	f007 ffe8 	bl	2228c <api_start>
	if (err < 0) {
   1a2bc:	2800      	cmp	r0, #0
   1a2be:	db05      	blt.n	1a2cc <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1a2c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1a2c4:	2300      	movs	r3, #0
   1a2c6:	4668      	mov	r0, sp
   1a2c8:	f003 f886 	bl	1d3d8 <z_impl_k_sem_take>
}
   1a2cc:	b007      	add	sp, #28
   1a2ce:	f85d fb04 	ldr.w	pc, [sp], #4
   1a2d2:	bf00      	nop
   1a2d4:	0002225f 	.word	0x0002225f

0001a2d8 <z_nrf_clock_control_lf_on>:
{
   1a2d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a2dc:	493a      	ldr	r1, [pc, #232]	; (1a3c8 <z_nrf_clock_control_lf_on+0xf0>)
   1a2de:	f3bf 8f5b 	dmb	ish
   1a2e2:	4606      	mov	r6, r0
   1a2e4:	2201      	movs	r2, #1
   1a2e6:	e851 3f00 	ldrex	r3, [r1]
   1a2ea:	e841 2000 	strex	r0, r2, [r1]
   1a2ee:	2800      	cmp	r0, #0
   1a2f0:	d1f9      	bne.n	1a2e6 <z_nrf_clock_control_lf_on+0xe>
   1a2f2:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1a2f6:	b933      	cbnz	r3, 1a306 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1a2f8:	4934      	ldr	r1, [pc, #208]	; (1a3cc <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
   1a2fa:	4835      	ldr	r0, [pc, #212]	; (1a3d0 <z_nrf_clock_control_lf_on+0xf8>)
   1a2fc:	604b      	str	r3, [r1, #4]
   1a2fe:	60cb      	str	r3, [r1, #12]
   1a300:	608a      	str	r2, [r1, #8]
   1a302:	f004 f962 	bl	1e5ca <onoff_request>
	switch (start_mode) {
   1a306:	1e73      	subs	r3, r6, #1
   1a308:	2b01      	cmp	r3, #1
   1a30a:	d832      	bhi.n	1a372 <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1a30c:	2e01      	cmp	r6, #1
   1a30e:	d107      	bne.n	1a320 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1a310:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a314:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1a318:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1a31c:	2b01      	cmp	r3, #1
   1a31e:	d028      	beq.n	1a372 <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1a320:	f008 fabd 	bl	2289e <k_is_in_isr>
   1a324:	4604      	mov	r4, r0
   1a326:	b918      	cbnz	r0, 1a330 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
   1a328:	4b2a      	ldr	r3, [pc, #168]	; (1a3d4 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
   1a32a:	781b      	ldrb	r3, [r3, #0]
   1a32c:	2b00      	cmp	r3, #0
   1a32e:	d144      	bne.n	1a3ba <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
   1a330:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a334:	f3ef 8511 	mrs	r5, BASEPRI
   1a338:	f383 8812 	msr	BASEPRI_MAX, r3
   1a33c:	f3bf 8f6f 	isb	sy
   1a340:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1a342:	4f25      	ldr	r7, [pc, #148]	; (1a3d8 <z_nrf_clock_control_lf_on+0x100>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a344:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1a3dc <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a348:	f8df 9094 	ldr.w	r9, [pc, #148]	; 1a3e0 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1a34c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a350:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1a354:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   1a358:	03d2      	lsls	r2, r2, #15
   1a35a:	d50c      	bpl.n	1a376 <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1a35c:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1a360:	2b01      	cmp	r3, #1
   1a362:	d001      	beq.n	1a368 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1a364:	2e01      	cmp	r6, #1
   1a366:	d106      	bne.n	1a376 <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
   1a368:	b30c      	cbz	r4, 1a3ae <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
   1a36a:	f385 8811 	msr	BASEPRI, r5
   1a36e:	f3bf 8f6f 	isb	sy
}
   1a372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1a376:	b1ac      	cbz	r4, 1a3a4 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1a378:	4628      	mov	r0, r5
   1a37a:	f7f9 fdc5 	bl	13f08 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1a37e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a382:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1a386:	2b00      	cmp	r3, #0
   1a388:	d1e0      	bne.n	1a34c <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1a38a:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   1a38c:	2900      	cmp	r1, #0
   1a38e:	d0dd      	beq.n	1a34c <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a390:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1a392:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   1a394:	2301      	movs	r3, #1
   1a396:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   1a39a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a39e:	f8c9 3000 	str.w	r3, [r9]
}
   1a3a2:	e7d3      	b.n	1a34c <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
   1a3a4:	2100      	movs	r1, #0
   1a3a6:	2021      	movs	r0, #33	; 0x21
   1a3a8:	f003 fcf4 	bl	1dd94 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1a3ac:	e7e7      	b.n	1a37e <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
   1a3ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a3b2:	2202      	movs	r2, #2
   1a3b4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1a3b8:	e7db      	b.n	1a372 <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
   1a3ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a3be:	2202      	movs	r2, #2
   1a3c0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1a3c4:	4605      	mov	r5, r0
}
   1a3c6:	e7bc      	b.n	1a342 <z_nrf_clock_control_lf_on+0x6a>
   1a3c8:	20002674 	.word	0x20002674
   1a3cc:	20002610 	.word	0x20002610
   1a3d0:	2000263c 	.word	0x2000263c
   1a3d4:	2000320c 	.word	0x2000320c
   1a3d8:	40000104 	.word	0x40000104
   1a3dc:	e000e100 	.word	0xe000e100
   1a3e0:	40000008 	.word	0x40000008

0001a3e4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1a3e4:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   1a3e6:	4b08      	ldr	r3, [pc, #32]	; (1a408 <uart_console_init+0x24>)
   1a3e8:	4808      	ldr	r0, [pc, #32]	; (1a40c <uart_console_init+0x28>)
   1a3ea:	6018      	str	r0, [r3, #0]
   1a3ec:	f008 f984 	bl	226f8 <z_device_ready>
   1a3f0:	b138      	cbz	r0, 1a402 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   1a3f2:	4807      	ldr	r0, [pc, #28]	; (1a410 <uart_console_init+0x2c>)
   1a3f4:	f7fa fba8 	bl	14b48 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1a3f8:	4805      	ldr	r0, [pc, #20]	; (1a410 <uart_console_init+0x2c>)
   1a3fa:	f7f5 fce9 	bl	fdd0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1a3fe:	2000      	movs	r0, #0
}
   1a400:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1a402:	f06f 0012 	mvn.w	r0, #18
   1a406:	e7fb      	b.n	1a400 <uart_console_init+0x1c>
   1a408:	20002678 	.word	0x20002678
   1a40c:	0002339c 	.word	0x0002339c
   1a410:	0001a415 	.word	0x0001a415

0001a414 <console_out>:
	if ('\n' == c) {
   1a414:	280a      	cmp	r0, #10
{
   1a416:	b538      	push	{r3, r4, r5, lr}
   1a418:	4d07      	ldr	r5, [pc, #28]	; (1a438 <console_out+0x24>)
   1a41a:	4604      	mov	r4, r0
	if ('\n' == c) {
   1a41c:	d104      	bne.n	1a428 <console_out+0x14>
   1a41e:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
   1a420:	6883      	ldr	r3, [r0, #8]
   1a422:	210d      	movs	r1, #13
   1a424:	685b      	ldr	r3, [r3, #4]
   1a426:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   1a428:	6828      	ldr	r0, [r5, #0]
   1a42a:	6883      	ldr	r3, [r0, #8]
   1a42c:	b2e1      	uxtb	r1, r4
   1a42e:	685b      	ldr	r3, [r3, #4]
   1a430:	4798      	blx	r3
}
   1a432:	4620      	mov	r0, r4
   1a434:	bd38      	pop	{r3, r4, r5, pc}
   1a436:	bf00      	nop
   1a438:	20002678 	.word	0x20002678

0001a43c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   1a43c:	b530      	push	{r4, r5, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1a43e:	6840      	ldr	r0, [r0, #4]
   1a440:	7b04      	ldrb	r4, [r0, #12]
   1a442:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   1a446:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1a44a:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   1a44e:	b085      	sub	sp, #20
   1a450:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   1a454:	d104      	bne.n	1a460 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   1a456:	4628      	mov	r0, r5
   1a458:	f002 f8a4 	bl	1c5a4 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   1a45c:	2000      	movs	r0, #0
   1a45e:	e02e      	b.n	1a4be <gpio_nrfx_pin_interrupt_configure+0x82>
	if (mode == GPIO_INT_MODE_LEVEL) {
   1a460:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1a464:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1a468:	d12b      	bne.n	1a4c2 <gpio_nrfx_pin_interrupt_configure+0x86>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1a46a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   1a46e:	bf0c      	ite	eq
   1a470:	2304      	moveq	r3, #4
   1a472:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1a474:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1a478:	6883      	ldr	r3, [r0, #8]
   1a47a:	fa23 f101 	lsr.w	r1, r3, r1
   1a47e:	07c9      	lsls	r1, r1, #31
   1a480:	d42b      	bmi.n	1a4da <gpio_nrfx_pin_interrupt_configure+0x9e>
   1a482:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1a486:	d128      	bne.n	1a4da <gpio_nrfx_pin_interrupt_configure+0x9e>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1a488:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1a48c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1a490:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1a494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1a498:	07db      	lsls	r3, r3, #31
   1a49a:	d41e      	bmi.n	1a4da <gpio_nrfx_pin_interrupt_configure+0x9e>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1a49c:	f10d 0407 	add.w	r4, sp, #7
   1a4a0:	4621      	mov	r1, r4
   1a4a2:	4628      	mov	r0, r5
   1a4a4:	f001 ffec 	bl	1c480 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1a4a8:	4b14      	ldr	r3, [pc, #80]	; (1a4fc <gpio_nrfx_pin_interrupt_configure+0xc0>)
   1a4aa:	4298      	cmp	r0, r3
   1a4ac:	d114      	bne.n	1a4d8 <gpio_nrfx_pin_interrupt_configure+0x9c>
			err = nrfx_gpiote_channel_alloc(&ch);
   1a4ae:	4620      	mov	r0, r4
   1a4b0:	f002 f830 	bl	1c514 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1a4b4:	4b12      	ldr	r3, [pc, #72]	; (1a500 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   1a4b6:	4298      	cmp	r0, r3
   1a4b8:	d00e      	beq.n	1a4d8 <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
   1a4ba:	f06f 000b 	mvn.w	r0, #11
}
   1a4be:	b005      	add	sp, #20
   1a4c0:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1a4c2:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1a4c6:	d005      	beq.n	1a4d4 <gpio_nrfx_pin_interrupt_configure+0x98>
   1a4c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   1a4cc:	bf0c      	ite	eq
   1a4ce:	2302      	moveq	r3, #2
   1a4d0:	2301      	movne	r3, #1
   1a4d2:	e7cf      	b.n	1a474 <gpio_nrfx_pin_interrupt_configure+0x38>
   1a4d4:	2303      	movs	r3, #3
   1a4d6:	e7cd      	b.n	1a474 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   1a4d8:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1a4da:	2300      	movs	r3, #0
   1a4dc:	4619      	mov	r1, r3
   1a4de:	aa02      	add	r2, sp, #8
   1a4e0:	4628      	mov	r0, r5
   1a4e2:	f001 fe91 	bl	1c208 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1a4e6:	4b06      	ldr	r3, [pc, #24]	; (1a500 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   1a4e8:	4298      	cmp	r0, r3
   1a4ea:	d104      	bne.n	1a4f6 <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1a4ec:	2101      	movs	r1, #1
   1a4ee:	4628      	mov	r0, r5
   1a4f0:	f002 f816 	bl	1c520 <nrfx_gpiote_trigger_enable>
   1a4f4:	e7b2      	b.n	1a45c <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   1a4f6:	f06f 0004 	mvn.w	r0, #4
   1a4fa:	e7e0      	b.n	1a4be <gpio_nrfx_pin_interrupt_configure+0x82>
   1a4fc:	0bad0004 	.word	0x0bad0004
   1a500:	0bad0000 	.word	0x0bad0000

0001a504 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1a504:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1a506:	f001 fff5 	bl	1c4f4 <nrfx_gpiote_is_init>
   1a50a:	4604      	mov	r4, r0
   1a50c:	b968      	cbnz	r0, 1a52a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1a50e:	f001 ffc9 	bl	1c4a4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1a512:	4b08      	ldr	r3, [pc, #32]	; (1a534 <gpio_nrfx_init+0x30>)
   1a514:	4298      	cmp	r0, r3
   1a516:	d10a      	bne.n	1a52e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1a518:	4807      	ldr	r0, [pc, #28]	; (1a538 <gpio_nrfx_init+0x34>)
   1a51a:	4621      	mov	r1, r4
   1a51c:	f001 ffaa 	bl	1c474 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1a520:	4622      	mov	r2, r4
   1a522:	2105      	movs	r1, #5
   1a524:	2006      	movs	r0, #6
   1a526:	f7f9 fd6f 	bl	14008 <z_arm_irq_priority_set>
		return 0;
   1a52a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1a52c:	bd10      	pop	{r4, pc}
		return -EIO;
   1a52e:	f06f 0004 	mvn.w	r0, #4
   1a532:	e7fb      	b.n	1a52c <gpio_nrfx_init+0x28>
   1a534:	0bad0000 	.word	0x0bad0000
   1a538:	0001a53d 	.word	0x0001a53d

0001a53c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1a53c:	0943      	lsrs	r3, r0, #5
{
   1a53e:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1a540:	d118      	bne.n	1a574 <nrfx_gpio_handler+0x38>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1a542:	4b0d      	ldr	r3, [pc, #52]	; (1a578 <nrfx_gpio_handler+0x3c>)
   1a544:	6859      	ldr	r1, [r3, #4]
   1a546:	b1a9      	cbz	r1, 1a574 <nrfx_gpio_handler+0x38>
   1a548:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1a54a:	4e0c      	ldr	r6, [pc, #48]	; (1a57c <nrfx_gpio_handler+0x40>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1a54c:	2501      	movs	r5, #1
   1a54e:	2c00      	cmp	r4, #0
   1a550:	fa05 f500 	lsl.w	r5, r5, r0
	return node->next;
   1a554:	bf38      	it	cc
   1a556:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
   1a558:	688a      	ldr	r2, [r1, #8]
   1a55a:	402a      	ands	r2, r5
   1a55c:	d002      	beq.n	1a564 <nrfx_gpio_handler+0x28>
			cb->handler(port, cb, cb->pin_mask & pins);
   1a55e:	684b      	ldr	r3, [r1, #4]
   1a560:	4630      	mov	r0, r6
   1a562:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1a564:	b134      	cbz	r4, 1a574 <nrfx_gpio_handler+0x38>
   1a566:	6823      	ldr	r3, [r4, #0]
   1a568:	2b00      	cmp	r3, #0
   1a56a:	bf38      	it	cc
   1a56c:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a56e:	4621      	mov	r1, r4
   1a570:	461c      	mov	r4, r3
   1a572:	e7f1      	b.n	1a558 <nrfx_gpio_handler+0x1c>
}
   1a574:	bd70      	pop	{r4, r5, r6, pc}
   1a576:	bf00      	nop
   1a578:	2000267c 	.word	0x2000267c
   1a57c:	0002336c 	.word	0x0002336c

0001a580 <gpio_nrfx_pin_configure>:
{
   1a580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1a584:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1a586:	7b3b      	ldrb	r3, [r7, #12]
   1a588:	f001 051f 	and.w	r5, r1, #31
{
   1a58c:	b085      	sub	sp, #20
   1a58e:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1a590:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   1a594:	4614      	mov	r4, r2
   1a596:	b9ca      	cbnz	r2, 1a5cc <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   1a598:	a902      	add	r1, sp, #8
   1a59a:	4628      	mov	r0, r5
   1a59c:	f001 ff70 	bl	1c480 <nrfx_gpiote_channel_get>
   1a5a0:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   1a5a2:	4628      	mov	r0, r5
   1a5a4:	f002 f820 	bl	1c5e8 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   1a5a8:	4b48      	ldr	r3, [pc, #288]	; (1a6cc <gpio_nrfx_pin_configure+0x14c>)
   1a5aa:	4298      	cmp	r0, r3
   1a5ac:	d004      	beq.n	1a5b8 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   1a5ae:	f06f 0004 	mvn.w	r0, #4
}
   1a5b2:	b005      	add	sp, #20
   1a5b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   1a5b8:	4284      	cmp	r4, r0
   1a5ba:	d105      	bne.n	1a5c8 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   1a5bc:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1a5c0:	f001 ffa2 	bl	1c508 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   1a5c4:	42a0      	cmp	r0, r4
   1a5c6:	d1f2      	bne.n	1a5ae <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1a5c8:	2000      	movs	r0, #0
   1a5ca:	e7f2      	b.n	1a5b2 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1a5cc:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   1a5d0:	f10d 0103 	add.w	r1, sp, #3
   1a5d4:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   1a5d6:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   1a5da:	f001 ff51 	bl	1c480 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1a5de:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   1a5e0:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1a5e2:	aa02      	add	r2, sp, #8
   1a5e4:	4649      	mov	r1, r9
   1a5e6:	4628      	mov	r0, r5
   1a5e8:	f001 fe0e 	bl	1c208 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1a5ec:	4b37      	ldr	r3, [pc, #220]	; (1a6cc <gpio_nrfx_pin_configure+0x14c>)
   1a5ee:	4298      	cmp	r0, r3
   1a5f0:	d002      	beq.n	1a5f8 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1a5f2:	f06f 0015 	mvn.w	r0, #21
   1a5f6:	e7dc      	b.n	1a5b2 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   1a5f8:	4580      	cmp	r8, r0
   1a5fa:	d103      	bne.n	1a604 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   1a5fc:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1a600:	f001 ff82 	bl	1c508 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   1a604:	05a3      	lsls	r3, r4, #22
   1a606:	d54e      	bpl.n	1a6a6 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1a608:	4b31      	ldr	r3, [pc, #196]	; (1a6d0 <gpio_nrfx_pin_configure+0x150>)
   1a60a:	4a32      	ldr	r2, [pc, #200]	; (1a6d4 <gpio_nrfx_pin_configure+0x154>)
   1a60c:	4023      	ands	r3, r4
   1a60e:	4293      	cmp	r3, r2
   1a610:	d03a      	beq.n	1a688 <gpio_nrfx_pin_configure+0x108>
   1a612:	d80c      	bhi.n	1a62e <gpio_nrfx_pin_configure+0xae>
   1a614:	2b06      	cmp	r3, #6
   1a616:	d014      	beq.n	1a642 <gpio_nrfx_pin_configure+0xc2>
   1a618:	d804      	bhi.n	1a624 <gpio_nrfx_pin_configure+0xa4>
   1a61a:	b193      	cbz	r3, 1a642 <gpio_nrfx_pin_configure+0xc2>
   1a61c:	2b02      	cmp	r3, #2
   1a61e:	d1e8      	bne.n	1a5f2 <gpio_nrfx_pin_configure+0x72>
   1a620:	2304      	movs	r3, #4
   1a622:	e00e      	b.n	1a642 <gpio_nrfx_pin_configure+0xc2>
   1a624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1a628:	d1e3      	bne.n	1a5f2 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   1a62a:	2301      	movs	r3, #1
   1a62c:	e009      	b.n	1a642 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1a62e:	4a2a      	ldr	r2, [pc, #168]	; (1a6d8 <gpio_nrfx_pin_configure+0x158>)
   1a630:	4293      	cmp	r3, r2
   1a632:	d02b      	beq.n	1a68c <gpio_nrfx_pin_configure+0x10c>
   1a634:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1a638:	d02a      	beq.n	1a690 <gpio_nrfx_pin_configure+0x110>
   1a63a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1a63e:	d1d8      	bne.n	1a5f2 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   1a640:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   1a642:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1a646:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   1a64a:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   1a64e:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1a650:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   1a654:	bf54      	ite	pl
   1a656:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1a65a:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1a65c:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   1a65e:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1a662:	d517      	bpl.n	1a694 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1a664:	687b      	ldr	r3, [r7, #4]
   1a666:	2101      	movs	r1, #1
   1a668:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   1a66c:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1a670:	2200      	movs	r2, #0
   1a672:	a901      	add	r1, sp, #4
   1a674:	4628      	mov	r0, r5
   1a676:	f001 fe6d 	bl	1c354 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1a67a:	4b14      	ldr	r3, [pc, #80]	; (1a6cc <gpio_nrfx_pin_configure+0x14c>)
   1a67c:	4298      	cmp	r0, r3
   1a67e:	bf14      	ite	ne
   1a680:	f06f 0015 	mvnne.w	r0, #21
   1a684:	2000      	moveq	r0, #0
   1a686:	e794      	b.n	1a5b2 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   1a688:	2307      	movs	r3, #7
   1a68a:	e7da      	b.n	1a642 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   1a68c:	2305      	movs	r3, #5
   1a68e:	e7d8      	b.n	1a642 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   1a690:	2303      	movs	r3, #3
   1a692:	e7d6      	b.n	1a642 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1a694:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1a696:	bf41      	itttt	mi
   1a698:	687b      	ldrmi	r3, [r7, #4]
   1a69a:	2101      	movmi	r1, #1
   1a69c:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   1a6a0:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   1a6a4:	e7e4      	b.n	1a670 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
   1a6a6:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1a6a8:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1a6ac:	bf54      	ite	pl
   1a6ae:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   1a6b2:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1a6b4:	461a      	mov	r2, r3
   1a6b6:	a901      	add	r1, sp, #4
   1a6b8:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1a6ba:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1a6be:	f001 fda3 	bl	1c208 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1a6c2:	4b02      	ldr	r3, [pc, #8]	; (1a6cc <gpio_nrfx_pin_configure+0x14c>)
   1a6c4:	4298      	cmp	r0, r3
   1a6c6:	f43f af7f 	beq.w	1a5c8 <gpio_nrfx_pin_configure+0x48>
   1a6ca:	e792      	b.n	1a5f2 <gpio_nrfx_pin_configure+0x72>
   1a6cc:	0bad0000 	.word	0x0bad0000
   1a6d0:	00f00006 	.word	0x00f00006
   1a6d4:	00100006 	.word	0x00100006
   1a6d8:	00400002 	.word	0x00400002

0001a6dc <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1a6dc:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   1a6de:	794b      	ldrb	r3, [r1, #5]
   1a6e0:	2b01      	cmp	r3, #1
   1a6e2:	d120      	bne.n	1a726 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1a6e4:	798b      	ldrb	r3, [r1, #6]
   1a6e6:	2b03      	cmp	r3, #3
   1a6e8:	d11d      	bne.n	1a726 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1a6ea:	79cc      	ldrb	r4, [r1, #7]
   1a6ec:	b10c      	cbz	r4, 1a6f2 <uarte_nrfx_configure+0x16>
   1a6ee:	2c01      	cmp	r4, #1
   1a6f0:	d119      	bne.n	1a726 <uarte_nrfx_configure+0x4a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1a6f2:	790a      	ldrb	r2, [r1, #4]
   1a6f4:	b112      	cbz	r2, 1a6fc <uarte_nrfx_configure+0x20>
   1a6f6:	2a02      	cmp	r2, #2
   1a6f8:	d115      	bne.n	1a726 <uarte_nrfx_configure+0x4a>
   1a6fa:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1a6fc:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1a6fe:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1a700:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1a704:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1a706:	d062      	beq.n	1a7ce <uarte_nrfx_configure+0xf2>
   1a708:	d82b      	bhi.n	1a762 <uarte_nrfx_configure+0x86>
   1a70a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1a70e:	d061      	beq.n	1a7d4 <uarte_nrfx_configure+0xf8>
   1a710:	d814      	bhi.n	1a73c <uarte_nrfx_configure+0x60>
   1a712:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1a716:	d05f      	beq.n	1a7d8 <uarte_nrfx_configure+0xfc>
   1a718:	d808      	bhi.n	1a72c <uarte_nrfx_configure+0x50>
   1a71a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1a71e:	d05e      	beq.n	1a7de <uarte_nrfx_configure+0x102>
   1a720:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1a724:	d05e      	beq.n	1a7e4 <uarte_nrfx_configure+0x108>
   1a726:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a72a:	e04f      	b.n	1a7cc <uarte_nrfx_configure+0xf0>
   1a72c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1a730:	d05b      	beq.n	1a7ea <uarte_nrfx_configure+0x10e>
   1a732:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1a736:	d1f6      	bne.n	1a726 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1a738:	4b36      	ldr	r3, [pc, #216]	; (1a814 <uarte_nrfx_configure+0x138>)
   1a73a:	e03c      	b.n	1a7b6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1a73c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1a740:	d056      	beq.n	1a7f0 <uarte_nrfx_configure+0x114>
   1a742:	d807      	bhi.n	1a754 <uarte_nrfx_configure+0x78>
   1a744:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1a748:	d054      	beq.n	1a7f4 <uarte_nrfx_configure+0x118>
   1a74a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1a74e:	d1ea      	bne.n	1a726 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1a750:	4b31      	ldr	r3, [pc, #196]	; (1a818 <uarte_nrfx_configure+0x13c>)
   1a752:	e030      	b.n	1a7b6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1a754:	f647 2612 	movw	r6, #31250	; 0x7a12
   1a758:	42b3      	cmp	r3, r6
   1a75a:	d1e4      	bne.n	1a726 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1a75c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1a760:	e029      	b.n	1a7b6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1a762:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1a766:	d047      	beq.n	1a7f8 <uarte_nrfx_configure+0x11c>
   1a768:	d813      	bhi.n	1a792 <uarte_nrfx_configure+0xb6>
   1a76a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1a76e:	d046      	beq.n	1a7fe <uarte_nrfx_configure+0x122>
   1a770:	d809      	bhi.n	1a786 <uarte_nrfx_configure+0xaa>
   1a772:	f64d 26c0 	movw	r6, #56000	; 0xdac0
   1a776:	42b3      	cmp	r3, r6
   1a778:	d043      	beq.n	1a802 <uarte_nrfx_configure+0x126>
   1a77a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1a77e:	d1d2      	bne.n	1a726 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1a780:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1a784:	e017      	b.n	1a7b6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1a786:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1a78a:	d1cc      	bne.n	1a726 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1a78c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1a790:	e011      	b.n	1a7b6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1a792:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1a796:	d037      	beq.n	1a808 <uarte_nrfx_configure+0x12c>
   1a798:	d808      	bhi.n	1a7ac <uarte_nrfx_configure+0xd0>
   1a79a:	4e20      	ldr	r6, [pc, #128]	; (1a81c <uarte_nrfx_configure+0x140>)
   1a79c:	42b3      	cmp	r3, r6
   1a79e:	d036      	beq.n	1a80e <uarte_nrfx_configure+0x132>
   1a7a0:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1a7a4:	d1bf      	bne.n	1a726 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1a7a6:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1a7aa:	e004      	b.n	1a7b6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1a7ac:	4e1c      	ldr	r6, [pc, #112]	; (1a820 <uarte_nrfx_configure+0x144>)
   1a7ae:	42b3      	cmp	r3, r6
   1a7b0:	d1b9      	bne.n	1a726 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1a7b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1a7b6:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1a7ba:	6903      	ldr	r3, [r0, #16]
   1a7bc:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1a7be:	4322      	orrs	r2, r4
   1a7c0:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1a7c2:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1a7c6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1a7ca:	2000      	movs	r0, #0
}
   1a7cc:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1a7ce:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1a7d2:	e7f0      	b.n	1a7b6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1a7d4:	4b13      	ldr	r3, [pc, #76]	; (1a824 <uarte_nrfx_configure+0x148>)
   1a7d6:	e7ee      	b.n	1a7b6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1a7d8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1a7dc:	e7eb      	b.n	1a7b6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
   1a7de:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1a7e2:	e7e8      	b.n	1a7b6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1a7e4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1a7e8:	e7e5      	b.n	1a7b6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1a7ea:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1a7ee:	e7e2      	b.n	1a7b6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1a7f0:	4b0d      	ldr	r3, [pc, #52]	; (1a828 <uarte_nrfx_configure+0x14c>)
   1a7f2:	e7e0      	b.n	1a7b6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1a7f4:	4b0d      	ldr	r3, [pc, #52]	; (1a82c <uarte_nrfx_configure+0x150>)
   1a7f6:	e7de      	b.n	1a7b6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1a7f8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1a7fc:	e7db      	b.n	1a7b6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1a7fe:	4b0c      	ldr	r3, [pc, #48]	; (1a830 <uarte_nrfx_configure+0x154>)
   1a800:	e7d9      	b.n	1a7b6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1a802:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1a806:	e7d6      	b.n	1a7b6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1a808:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1a80c:	e7d3      	b.n	1a7b6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1a80e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1a812:	e7d0      	b.n	1a7b6 <uarte_nrfx_configure+0xda>
   1a814:	0013b000 	.word	0x0013b000
   1a818:	004ea000 	.word	0x004ea000
   1a81c:	0003d090 	.word	0x0003d090
   1a820:	000f4240 	.word	0x000f4240
   1a824:	00275000 	.word	0x00275000
   1a828:	0075c000 	.word	0x0075c000
   1a82c:	003af000 	.word	0x003af000
   1a830:	013a9000 	.word	0x013a9000

0001a834 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1a834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1a836:	6906      	ldr	r6, [r0, #16]
{
   1a838:	4605      	mov	r5, r0
   1a83a:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1a83c:	f008 f82f 	bl	2289e <k_is_in_isr>
   1a840:	b910      	cbnz	r0, 1a848 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   1a842:	4b20      	ldr	r3, [pc, #128]	; (1a8c4 <uarte_nrfx_poll_out+0x90>)
	int key;

	if (isr_mode) {
   1a844:	781b      	ldrb	r3, [r3, #0]
   1a846:	b983      	cbnz	r3, 1a86a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   1a848:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a84c:	f3ef 8411 	mrs	r4, BASEPRI
   1a850:	f383 8812 	msr	BASEPRI_MAX, r3
   1a854:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   1a858:	4628      	mov	r0, r5
   1a85a:	f007 fdf0 	bl	2243e <is_tx_ready>
   1a85e:	bb28      	cbnz	r0, 1a8ac <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   1a860:	f384 8811 	msr	BASEPRI, r4
   1a864:	f3bf 8f6f 	isb	sy
}
   1a868:	e7ee      	b.n	1a848 <uarte_nrfx_poll_out+0x14>
{
   1a86a:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1a86c:	4628      	mov	r0, r5
   1a86e:	f007 fde6 	bl	2243e <is_tx_ready>
   1a872:	b970      	cbnz	r0, 1a892 <uarte_nrfx_poll_out+0x5e>
   1a874:	2001      	movs	r0, #1
   1a876:	f007 ff27 	bl	226c8 <nrfx_busy_wait>
   1a87a:	3c01      	subs	r4, #1
   1a87c:	d1f6      	bne.n	1a86c <uarte_nrfx_poll_out+0x38>
   1a87e:	2100      	movs	r1, #0
   1a880:	2021      	movs	r0, #33	; 0x21
   1a882:	f003 fa87 	bl	1dd94 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1a886:	e7f0      	b.n	1a86a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   1a888:	f384 8811 	msr	BASEPRI, r4
   1a88c:	f3bf 8f6f 	isb	sy
}
   1a890:	e7f5      	b.n	1a87e <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   1a892:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a896:	f3ef 8411 	mrs	r4, BASEPRI
   1a89a:	f383 8812 	msr	BASEPRI_MAX, r3
   1a89e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1a8a2:	4628      	mov	r0, r5
   1a8a4:	f007 fdcb 	bl	2243e <is_tx_ready>
   1a8a8:	2800      	cmp	r0, #0
   1a8aa:	d0ed      	beq.n	1a888 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   1a8ac:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
   1a8ae:	2201      	movs	r2, #1
	data->char_out = c;
   1a8b0:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   1a8b4:	4628      	mov	r0, r5
   1a8b6:	f007 fe55 	bl	22564 <tx_start>
	__asm__ volatile(
   1a8ba:	f384 8811 	msr	BASEPRI, r4
   1a8be:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   1a8c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a8c4:	2000320c 	.word	0x2000320c

0001a8c8 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1a8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a8cc:	2101      	movs	r1, #1
   1a8ce:	4605      	mov	r5, r0
   1a8d0:	2200      	movs	r2, #0
   1a8d2:	2002      	movs	r0, #2
   1a8d4:	f7f9 fb98 	bl	14008 <z_arm_irq_priority_set>
   1a8d8:	2002      	movs	r0, #2
   1a8da:	f7f9 fb63 	bl	13fa4 <arch_irq_enable>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1a8de:	686f      	ldr	r7, [r5, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1a8e0:	692e      	ldr	r6, [r5, #16]
	return config->uarte_regs;
   1a8e2:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1a8e4:	2300      	movs	r3, #0
   1a8e6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
   1a8ea:	6035      	str	r5, [r6, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   1a8ec:	686b      	ldr	r3, [r5, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1a8ee:	68d8      	ldr	r0, [r3, #12]
   1a8f0:	1c41      	adds	r1, r0, #1
   1a8f2:	d00c      	beq.n	1a90e <uarte_0_init+0x46>
    *p_pin = pin_number & 0x1F;
   1a8f4:	f000 021f 	and.w	r2, r0, #31
    p_reg->OUTSET = set_mask;
   1a8f8:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1a8fc:	2101      	movs	r1, #1
   1a8fe:	4091      	lsls	r1, r2
    reg->PIN_CNF[pin_number] = cnf;
   1a900:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
   1a904:	f8cc 1508 	str.w	r1, [ip, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   1a908:	2103      	movs	r1, #3
   1a90a:	f84c 1022 	str.w	r1, [ip, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1a90e:	6919      	ldr	r1, [r3, #16]
   1a910:	1c4a      	adds	r2, r1, #1
   1a912:	d00e      	beq.n	1a932 <uarte_0_init+0x6a>
			nrf_gpio_cfg_input(cfg->rx_pin,
   1a914:	7f1a      	ldrb	r2, [r3, #28]
   1a916:	2a00      	cmp	r2, #0
    *p_pin = pin_number & 0x1F;
   1a918:	f001 021f 	and.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = cnf;
   1a91c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1a920:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1a924:	bf14      	ite	ne
   1a926:	f04f 0e0c 	movne.w	lr, #12
   1a92a:	f04f 0e00 	moveq.w	lr, #0
    reg->PIN_CNF[pin_number] = cnf;
   1a92e:	f84c e022 	str.w	lr, [ip, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1a932:	f8d3 c014 	ldr.w	ip, [r3, #20]
   1a936:	f1bc 3fff 	cmp.w	ip, #4294967295
   1a93a:	d00f      	beq.n	1a95c <uarte_0_init+0x94>
    *p_pin = pin_number & 0x1F;
   1a93c:	f00c 021f 	and.w	r2, ip, #31
    p_reg->OUTSET = set_mask;
   1a940:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1a944:	f04f 0e01 	mov.w	lr, #1
   1a948:	fa0e fe02 	lsl.w	lr, lr, r2
    reg->PIN_CNF[pin_number] = cnf;
   1a94c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
   1a950:	f8c8 e508 	str.w	lr, [r8, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   1a954:	f04f 0e03 	mov.w	lr, #3
   1a958:	f848 e022 	str.w	lr, [r8, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1a95c:	f8d3 e018 	ldr.w	lr, [r3, #24]
   1a960:	f1be 3fff 	cmp.w	lr, #4294967295
   1a964:	d00e      	beq.n	1a984 <uarte_0_init+0xbc>
			nrf_gpio_cfg_input(cfg->cts_pin,
   1a966:	7f5a      	ldrb	r2, [r3, #29]
   1a968:	2a00      	cmp	r2, #0
    *p_pin = pin_number & 0x1F;
   1a96a:	f00e 021f 	and.w	r2, lr, #31
    reg->PIN_CNF[pin_number] = cnf;
   1a96e:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1a972:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1a976:	bf14      	ite	ne
   1a978:	f04f 090c 	movne.w	r9, #12
   1a97c:	f04f 0900 	moveq.w	r9, #0
    reg->PIN_CNF[pin_number] = cnf;
   1a980:	f848 9022 	str.w	r9, [r8, r2, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   1a984:	681b      	ldr	r3, [r3, #0]
    p_reg->PSEL.TXD = pseltxd;
   1a986:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1a98a:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1a98e:	6929      	ldr	r1, [r5, #16]
    p_reg->PSEL.RTS = pselrts;
   1a990:	f8c3 c508 	str.w	ip, [r3, #1288]	; 0x508
   1a994:	4628      	mov	r0, r5
    p_reg->PSEL.CTS = pselcts;
   1a996:	f8c3 e510 	str.w	lr, [r3, #1296]	; 0x510
   1a99a:	3104      	adds	r1, #4
   1a99c:	f7ff fe9e 	bl	1a6dc <uarte_nrfx_configure>
	if (err) {
   1a9a0:	4605      	mov	r5, r0
   1a9a2:	2800      	cmp	r0, #0
   1a9a4:	d153      	bne.n	1aa4e <uarte_0_init+0x186>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1a9a6:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1a9a8:	079b      	lsls	r3, r3, #30
   1a9aa:	d529      	bpl.n	1aa00 <uarte_0_init+0x138>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1a9ac:	f106 0016 	add.w	r0, r6, #22
   1a9b0:	f001 fee6 	bl	1c780 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1a9b4:	4b27      	ldr	r3, [pc, #156]	; (1aa54 <uarte_0_init+0x18c>)
   1a9b6:	4298      	cmp	r0, r3
   1a9b8:	d00f      	beq.n	1a9da <uarte_0_init+0x112>
		LOG_ERR("Failed to allocate PPI Channel");
   1a9ba:	4927      	ldr	r1, [pc, #156]	; (1aa58 <uarte_0_init+0x190>)
   1a9bc:	680b      	ldr	r3, [r1, #0]
   1a9be:	0758      	lsls	r0, r3, #29
   1a9c0:	d008      	beq.n	1a9d4 <uarte_0_init+0x10c>
   1a9c2:	4b26      	ldr	r3, [pc, #152]	; (1aa5c <uarte_0_init+0x194>)
   1a9c4:	4826      	ldr	r0, [pc, #152]	; (1aa60 <uarte_0_init+0x198>)
   1a9c6:	1ac9      	subs	r1, r1, r3
   1a9c8:	0889      	lsrs	r1, r1, #2
   1a9ca:	0189      	lsls	r1, r1, #6
   1a9cc:	f041 0101 	orr.w	r1, r1, #1
   1a9d0:	f004 fab1 	bl	1ef36 <log_0>
		return -EIO;
   1a9d4:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   1a9d8:	e039      	b.n	1aa4e <uarte_0_init+0x186>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1a9da:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1a9dc:	00c3      	lsls	r3, r0, #3
   1a9de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a9e2:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1a9e6:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1a9ea:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1a9ee:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1a9f2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1a9f6:	4a1b      	ldr	r2, [pc, #108]	; (1aa64 <uarte_0_init+0x19c>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1a9f8:	2301      	movs	r3, #1
   1a9fa:	4083      	lsls	r3, r0
   1a9fc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1aa00:	2308      	movs	r3, #8
   1aa02:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1aa06:	7a3b      	ldrb	r3, [r7, #8]
   1aa08:	b95b      	cbnz	r3, 1aa22 <uarte_0_init+0x15a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1aa0a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1aa0e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1aa12:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1aa16:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1aa1a:	2301      	movs	r3, #1
   1aa1c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1aa20:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1aa22:	687b      	ldr	r3, [r7, #4]
   1aa24:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1aa26:	bf5c      	itt	pl
   1aa28:	f44f 7280 	movpl.w	r2, #256	; 0x100
   1aa2c:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1aa30:	06db      	lsls	r3, r3, #27
   1aa32:	bf44      	itt	mi
   1aa34:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1aa38:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1aa3c:	3614      	adds	r6, #20
    p_reg->TXD.MAXCNT = length;
   1aa3e:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1aa40:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1aa44:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1aa48:	2301      	movs	r3, #1
   1aa4a:	60a3      	str	r3, [r4, #8]
   1aa4c:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1aa4e:	4628      	mov	r0, r5
   1aa50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1aa54:	0bad0000 	.word	0x0bad0000
   1aa58:	200006b8 	.word	0x200006b8
   1aa5c:	20000654 	.word	0x20000654
   1aa60:	00026c46 	.word	0x00026c46
   1aa64:	4001f000 	.word	0x4001f000

0001aa68 <random_byte_get>:
	__asm__ volatile(
   1aa68:	f04f 0340 	mov.w	r3, #64	; 0x40
   1aa6c:	f3ef 8211 	mrs	r2, BASEPRI
   1aa70:	f383 8812 	msr	BASEPRI_MAX, r3
   1aa74:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1aa78:	4b08      	ldr	r3, [pc, #32]	; (1aa9c <random_byte_get+0x34>)
   1aa7a:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1aa7c:	b159      	cbz	r1, 1aa96 <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1aa7e:	4908      	ldr	r1, [pc, #32]	; (1aaa0 <random_byte_get+0x38>)
   1aa80:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1aa84:	2100      	movs	r1, #0
   1aa86:	6019      	str	r1, [r3, #0]
   1aa88:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1aa8a:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1aa8c:	f382 8811 	msr	BASEPRI, r2
   1aa90:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1aa94:	4770      	bx	lr
	int retval = -EAGAIN;
   1aa96:	f06f 000a 	mvn.w	r0, #10
   1aa9a:	e7f7      	b.n	1aa8c <random_byte_get+0x24>
   1aa9c:	4000d100 	.word	0x4000d100
   1aaa0:	4000d000 	.word	0x4000d000

0001aaa4 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1aaa4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aaa6:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1aaa8:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1aaaa:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1aaac:	f04f 0540 	mov.w	r5, #64	; 0x40
   1aab0:	f3ef 8011 	mrs	r0, BASEPRI
   1aab4:	f385 8812 	msr	BASEPRI_MAX, r5
   1aab8:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1aabc:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1aabe:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1aac2:	1ba4      	subs	r4, r4, r6
   1aac4:	403c      	ands	r4, r7
	if (available < len) {
   1aac6:	42a2      	cmp	r2, r4
		len = available;
   1aac8:	bf88      	it	hi
   1aaca:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1aacc:	eb06 0c02 	add.w	ip, r6, r2
   1aad0:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   1aad4:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1aad6:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   1aada:	f380 8811 	msr	BASEPRI, r0
   1aade:	f3bf 8f6f 	isb	sy
   1aae2:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   1aae4:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   1aae6:	4282      	cmp	r2, r0
   1aae8:	d119      	bne.n	1ab1e <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1aaea:	4576      	cmp	r6, lr
   1aaec:	d10d      	bne.n	1ab0a <rng_pool_get+0x66>
	__asm__ volatile(
   1aaee:	f04f 0540 	mov.w	r5, #64	; 0x40
   1aaf2:	f3ef 8211 	mrs	r2, BASEPRI
   1aaf6:	f385 8812 	msr	BASEPRI_MAX, r5
   1aafa:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1aafe:	781d      	ldrb	r5, [r3, #0]
   1ab00:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1ab02:	f382 8811 	msr	BASEPRI, r2
   1ab06:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1ab0a:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1ab0c:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1ab0e:	b288      	uxth	r0, r1
	available = available - len;
   1ab10:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   1ab12:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1ab14:	bf22      	ittt	cs
   1ab16:	4b06      	ldrcs	r3, [pc, #24]	; (1ab30 <rng_pool_get+0x8c>)
   1ab18:	2201      	movcs	r2, #1
   1ab1a:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1ab1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1ab1e:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   1ab22:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1ab24:	f89c c005 	ldrb.w	ip, [ip, #5]
   1ab28:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   1ab2c:	403d      	ands	r5, r7
   1ab2e:	e7da      	b.n	1aae6 <rng_pool_get+0x42>
   1ab30:	4000d000 	.word	0x4000d000

0001ab34 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ab34:	43db      	mvns	r3, r3
{
   1ab36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ab3a:	f013 0501 	ands.w	r5, r3, #1
{
   1ab3e:	460e      	mov	r6, r1
   1ab40:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ab42:	d004      	beq.n	1ab4e <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1ab44:	4821      	ldr	r0, [pc, #132]	; (1abcc <entropy_nrf5_get_entropy_isr+0x98>)
   1ab46:	f7ff ffad 	bl	1aaa4 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1ab4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1ab4e:	2a00      	cmp	r2, #0
   1ab50:	d033      	beq.n	1abba <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1ab52:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ab56:	f3ef 8811 	mrs	r8, BASEPRI
   1ab5a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ab5e:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1ab62:	200d      	movs	r0, #13
   1ab64:	f7f9 fa42 	bl	13fec <arch_irq_is_enabled>
   1ab68:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1ab6a:	200d      	movs	r0, #13
   1ab6c:	f7f9 fa2a 	bl	13fc4 <arch_irq_disable>
	__asm__ volatile(
   1ab70:	f388 8811 	msr	BASEPRI, r8
   1ab74:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ab78:	4a15      	ldr	r2, [pc, #84]	; (1abd0 <entropy_nrf5_get_entropy_isr+0x9c>)
   1ab7a:	6015      	str	r5, [r2, #0]
   1ab7c:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1ab7e:	4b15      	ldr	r3, [pc, #84]	; (1abd4 <entropy_nrf5_get_entropy_isr+0xa0>)
   1ab80:	2101      	movs	r1, #1
   1ab82:	6019      	str	r1, [r3, #0]
   1ab84:	4914      	ldr	r1, [pc, #80]	; (1abd8 <entropy_nrf5_get_entropy_isr+0xa4>)
   1ab86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   1ab8a:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   1ab8e:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1ab90:	4691      	mov	r9, r2
   1ab92:	468a      	mov	sl, r1
   1ab94:	4698      	mov	r8, r3
   1ab96:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   1ab9a:	b183      	cbz	r3, 1abbe <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1ab9c:	f7ff ff64 	bl	1aa68 <random_byte_get>
			if (byte < 0) {
   1aba0:	1e03      	subs	r3, r0, #0
   1aba2:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   1aba6:	dbf6      	blt.n	1ab96 <entropy_nrf5_get_entropy_isr+0x62>
   1aba8:	3d01      	subs	r5, #1
   1abaa:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1abac:	5573      	strb	r3, [r6, r5]
		} while (len);
   1abae:	2d00      	cmp	r5, #0
   1abb0:	d1f1      	bne.n	1ab96 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1abb2:	b117      	cbz	r7, 1abba <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1abb4:	200d      	movs	r0, #13
   1abb6:	f7f9 f9f5 	bl	13fa4 <arch_irq_enable>
	return cnt;
   1abba:	4620      	mov	r0, r4
   1abbc:	e7c5      	b.n	1ab4a <entropy_nrf5_get_entropy_isr+0x16>
   1abbe:	f3bf 8f4f 	dsb	sy
				__WFE();
   1abc2:	bf20      	wfe
				__SEV();
   1abc4:	bf40      	sev
				__WFE();
   1abc6:	bf20      	wfe
   1abc8:	e7e5      	b.n	1ab96 <entropy_nrf5_get_entropy_isr+0x62>
   1abca:	bf00      	nop
   1abcc:	200026b8 	.word	0x200026b8
   1abd0:	4000d100 	.word	0x4000d100
   1abd4:	4000d000 	.word	0x4000d000
   1abd8:	e000e100 	.word	0xe000e100

0001abdc <entropy_nrf5_get_entropy>:
{
   1abdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1abe0:	4f13      	ldr	r7, [pc, #76]	; (1ac30 <entropy_nrf5_get_entropy+0x54>)
   1abe2:	460d      	mov	r5, r1
   1abe4:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1abe6:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1abea:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1abee:	b914      	cbnz	r4, 1abf6 <entropy_nrf5_get_entropy+0x1a>
}
   1abf0:	4620      	mov	r0, r4
   1abf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1abf6:	f04f 33ff 	mov.w	r3, #4294967295
   1abfa:	f04f 32ff 	mov.w	r2, #4294967295
   1abfe:	4638      	mov	r0, r7
   1ac00:	f002 fbea 	bl	1d3d8 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1ac04:	4622      	mov	r2, r4
   1ac06:	4629      	mov	r1, r5
   1ac08:	4640      	mov	r0, r8
   1ac0a:	f7ff ff4b 	bl	1aaa4 <rng_pool_get>
   1ac0e:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1ac10:	4638      	mov	r0, r7
   1ac12:	f002 fbbb 	bl	1d38c <z_impl_k_sem_give>
		if (bytes == 0U) {
   1ac16:	b93e      	cbnz	r6, 1ac28 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1ac18:	f04f 32ff 	mov.w	r2, #4294967295
   1ac1c:	f04f 33ff 	mov.w	r3, #4294967295
   1ac20:	4648      	mov	r0, r9
   1ac22:	f002 fbd9 	bl	1d3d8 <z_impl_k_sem_take>
			continue;
   1ac26:	e7e2      	b.n	1abee <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1ac28:	1ba4      	subs	r4, r4, r6
   1ac2a:	b2a4      	uxth	r4, r4
		buf += bytes;
   1ac2c:	4435      	add	r5, r6
   1ac2e:	e7de      	b.n	1abee <entropy_nrf5_get_entropy+0x12>
   1ac30:	20002688 	.word	0x20002688

0001ac34 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1ac34:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ac36:	4c19      	ldr	r4, [pc, #100]	; (1ac9c <entropy_nrf5_init+0x68>)
   1ac38:	2201      	movs	r2, #1
   1ac3a:	4611      	mov	r1, r2
   1ac3c:	4620      	mov	r0, r4
   1ac3e:	f007 ff3c 	bl	22aba <z_impl_k_sem_init>
   1ac42:	2201      	movs	r2, #1
   1ac44:	2100      	movs	r1, #0
   1ac46:	f104 0018 	add.w	r0, r4, #24
   1ac4a:	f007 ff36 	bl	22aba <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1ac4e:	f240 4307 	movw	r3, #1031	; 0x407
   1ac52:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1ac56:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1ac5a:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1ac5c:	230c      	movs	r3, #12
   1ac5e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1ac62:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1ac64:	4b0e      	ldr	r3, [pc, #56]	; (1aca0 <entropy_nrf5_init+0x6c>)
   1ac66:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1ac6a:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1ac6e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1ac72:	f022 0201 	bic.w	r2, r2, #1
   1ac76:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ac7a:	4a0a      	ldr	r2, [pc, #40]	; (1aca4 <entropy_nrf5_init+0x70>)
    p_reg->INTENSET = mask;
   1ac7c:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ac7e:	6015      	str	r5, [r2, #0]
   1ac80:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   1ac82:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1ac86:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1ac88:	6019      	str	r1, [r3, #0]
   1ac8a:	200d      	movs	r0, #13
   1ac8c:	f7f9 f9bc 	bl	14008 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1ac90:	200d      	movs	r0, #13
   1ac92:	f7f9 f987 	bl	13fa4 <arch_irq_enable>

	return 0;
}
   1ac96:	4628      	mov	r0, r5
   1ac98:	bd38      	pop	{r3, r4, r5, pc}
   1ac9a:	bf00      	nop
   1ac9c:	20002688 	.word	0x20002688
   1aca0:	4000d000 	.word	0x4000d000
   1aca4:	4000d100 	.word	0x4000d100

0001aca8 <isr>:
{
   1aca8:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1acaa:	f7ff fedd 	bl	1aa68 <random_byte_get>
	if (byte < 0) {
   1acae:	2800      	cmp	r0, #0
   1acb0:	db20      	blt.n	1acf4 <isr+0x4c>
	uint8_t last  = rngp->last;
   1acb2:	4b17      	ldr	r3, [pc, #92]	; (1ad10 <isr+0x68>)
   1acb4:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1acb8:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1acbc:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1acc0:	1a51      	subs	r1, r2, r1
   1acc2:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1acc6:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1acc8:	d10d      	bne.n	1ace6 <isr+0x3e>
	uint8_t last  = rngp->last;
   1acca:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1acce:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1acd2:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1acd6:	1a51      	subs	r1, r2, r1
   1acd8:	ea34 0101 	bics.w	r1, r4, r1
   1acdc:	d10b      	bne.n	1acf6 <isr+0x4e>
   1acde:	4b0d      	ldr	r3, [pc, #52]	; (1ad14 <isr+0x6c>)
   1ace0:	2201      	movs	r2, #1
   1ace2:	601a      	str	r2, [r3, #0]
}
   1ace4:	e00e      	b.n	1ad04 <isr+0x5c>
	rngp->buffer[last] = byte;
   1ace6:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1ace8:	3201      	adds	r2, #1
   1acea:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1acec:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1acf0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1acf4:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1acf6:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1acf8:	3201      	adds	r2, #1
   1acfa:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1acfc:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1ad00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1ad04:	4804      	ldr	r0, [pc, #16]	; (1ad18 <isr+0x70>)
}
   1ad06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ad0a:	f002 bb3f 	b.w	1d38c <z_impl_k_sem_give>
   1ad0e:	bf00      	nop
   1ad10:	20002688 	.word	0x20002688
   1ad14:	4000d004 	.word	0x4000d004
   1ad18:	200026a0 	.word	0x200026a0

0001ad1c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1ad1c:	4919      	ldr	r1, [pc, #100]	; (1ad84 <sys_clock_timeout_handler+0x68>)
{
   1ad1e:	b570      	push	{r4, r5, r6, lr}
   1ad20:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1ad22:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1ad26:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1ad28:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1ad2c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1ad30:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1ad32:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1ad36:	f04f 0500 	mov.w	r5, #0
   1ad3a:	d20a      	bcs.n	1ad52 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1ad3c:	4b12      	ldr	r3, [pc, #72]	; (1ad88 <sys_clock_timeout_handler+0x6c>)
   1ad3e:	6819      	ldr	r1, [r3, #0]
   1ad40:	060a      	lsls	r2, r1, #24
   1ad42:	0a0b      	lsrs	r3, r1, #8
   1ad44:	1992      	adds	r2, r2, r6
   1ad46:	4911      	ldr	r1, [pc, #68]	; (1ad8c <sys_clock_timeout_handler+0x70>)
   1ad48:	f143 0300 	adc.w	r3, r3, #0
   1ad4c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   1ad50:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1ad52:	f003 f9a9 	bl	1e0a8 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   1ad56:	00a3      	lsls	r3, r4, #2
   1ad58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ad5c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1ad60:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1ad64:	42b2      	cmp	r2, r6
   1ad66:	d10b      	bne.n	1ad80 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   1ad68:	b91d      	cbnz	r5, 1ad72 <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
   1ad6a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1ad6e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1ad72:	4b07      	ldr	r3, [pc, #28]	; (1ad90 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ad74:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1ad78:	fa00 f404 	lsl.w	r4, r0, r4
   1ad7c:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1ad80:	bd70      	pop	{r4, r5, r6, pc}
   1ad82:	bf00      	nop
   1ad84:	20001c88 	.word	0x20001c88
   1ad88:	200026e4 	.word	0x200026e4
   1ad8c:	20001c70 	.word	0x20001c70
   1ad90:	40011000 	.word	0x40011000

0001ad94 <compare_int_lock>:
{
   1ad94:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1ad96:	2301      	movs	r3, #1
   1ad98:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ad9a:	4a11      	ldr	r2, [pc, #68]	; (1ade0 <compare_int_lock+0x4c>)
   1ad9c:	f3bf 8f5b 	dmb	ish
   1ada0:	43dc      	mvns	r4, r3
   1ada2:	e852 1f00 	ldrex	r1, [r2]
   1ada6:	ea01 0c04 	and.w	ip, r1, r4
   1adaa:	e842 ce00 	strex	lr, ip, [r2]
   1adae:	f1be 0f00 	cmp.w	lr, #0
   1adb2:	d1f6      	bne.n	1ada2 <compare_int_lock+0xe>
   1adb4:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1adb8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1adbc:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   1adc0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1adc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1adc8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1adcc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1add0:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   1add4:	420b      	tst	r3, r1
}
   1add6:	bf14      	ite	ne
   1add8:	2001      	movne	r0, #1
   1adda:	2000      	moveq	r0, #0
   1addc:	bd10      	pop	{r4, pc}
   1adde:	bf00      	nop
   1ade0:	200026e0 	.word	0x200026e0

0001ade4 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
   1ade4:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ade6:	4a12      	ldr	r2, [pc, #72]	; (1ae30 <compare_int_unlock.part.0+0x4c>)
   1ade8:	f3bf 8f5b 	dmb	ish
   1adec:	4083      	lsls	r3, r0
   1adee:	e852 1f00 	ldrex	r1, [r2]
   1adf2:	4319      	orrs	r1, r3
   1adf4:	e842 1c00 	strex	ip, r1, [r2]
   1adf8:	f1bc 0f00 	cmp.w	ip, #0
   1adfc:	d1f7      	bne.n	1adee <compare_int_unlock.part.0+0xa>
   1adfe:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1ae02:	4a0c      	ldr	r2, [pc, #48]	; (1ae34 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ae04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1ae08:	4083      	lsls	r3, r0
   1ae0a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ae0e:	4b0a      	ldr	r3, [pc, #40]	; (1ae38 <compare_int_unlock.part.0+0x54>)
   1ae10:	f3bf 8f5b 	dmb	ish
   1ae14:	681b      	ldr	r3, [r3, #0]
   1ae16:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1ae1a:	fa23 f000 	lsr.w	r0, r3, r0
   1ae1e:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ae20:	bf42      	ittt	mi
   1ae22:	4b06      	ldrmi	r3, [pc, #24]	; (1ae3c <compare_int_unlock.part.0+0x58>)
   1ae24:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1ae28:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1ae2c:	4770      	bx	lr
   1ae2e:	bf00      	nop
   1ae30:	200026e0 	.word	0x200026e0
   1ae34:	40011000 	.word	0x40011000
   1ae38:	200026dc 	.word	0x200026dc
   1ae3c:	e000e100 	.word	0xe000e100

0001ae40 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1ae40:	4b0d      	ldr	r3, [pc, #52]	; (1ae78 <z_nrf_rtc_timer_read+0x38>)
   1ae42:	681b      	ldr	r3, [r3, #0]
   1ae44:	0a19      	lsrs	r1, r3, #8
   1ae46:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1ae48:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1ae4c:	4b0b      	ldr	r3, [pc, #44]	; (1ae7c <z_nrf_rtc_timer_read+0x3c>)
   1ae4e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1ae52:	18c0      	adds	r0, r0, r3
   1ae54:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1ae58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1ae5c:	d20a      	bcs.n	1ae74 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1ae5e:	4b08      	ldr	r3, [pc, #32]	; (1ae80 <z_nrf_rtc_timer_read+0x40>)
   1ae60:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ae64:	4299      	cmp	r1, r3
   1ae66:	bf08      	it	eq
   1ae68:	4290      	cmpeq	r0, r2
   1ae6a:	d203      	bcs.n	1ae74 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1ae6c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1ae70:	f141 0100 	adc.w	r1, r1, #0
}
   1ae74:	4770      	bx	lr
   1ae76:	bf00      	nop
   1ae78:	200026e4 	.word	0x200026e4
   1ae7c:	40011000 	.word	0x40011000
   1ae80:	20001c70 	.word	0x20001c70

0001ae84 <compare_set>:
{
   1ae84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae88:	b085      	sub	sp, #20
   1ae8a:	4616      	mov	r6, r2
   1ae8c:	461f      	mov	r7, r3
   1ae8e:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   1ae90:	f7ff ff80 	bl	1ad94 <compare_int_lock>
   1ae94:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1ae96:	f7ff ffd3 	bl	1ae40 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1ae9a:	42b9      	cmp	r1, r7
   1ae9c:	bf08      	it	eq
   1ae9e:	42b0      	cmpeq	r0, r6
   1aea0:	d27f      	bcs.n	1afa2 <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
   1aea2:	ebb6 0800 	subs.w	r8, r6, r0
   1aea6:	eb67 0901 	sbc.w	r9, r7, r1
   1aeaa:	2300      	movs	r3, #0
   1aeac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1aeb0:	454b      	cmp	r3, r9
   1aeb2:	bf08      	it	eq
   1aeb4:	4542      	cmpeq	r2, r8
   1aeb6:	f0c0 8085 	bcc.w	1afc4 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
   1aeba:	4b44      	ldr	r3, [pc, #272]	; (1afcc <compare_set+0x148>)
   1aebc:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   1aec0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1aec4:	429f      	cmp	r7, r3
   1aec6:	bf08      	it	eq
   1aec8:	4296      	cmpeq	r6, r2
   1aeca:	d054      	beq.n	1af76 <compare_set+0xf2>
   1aecc:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1aed0:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
   1aed4:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1aed8:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1aedc:	fa0b f205 	lsl.w	r2, fp, r5
   1aee0:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1aee4:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1aee8:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1aeec:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
   1aeee:	4a38      	ldr	r2, [pc, #224]	; (1afd0 <compare_set+0x14c>)
    return p_reg->CC[ch];
   1aef0:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
   1aef4:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1aef8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   1aefc:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1af00:	461c      	mov	r4, r3
   1af02:	4693      	mov	fp, r2
     return p_reg->COUNTER;
   1af04:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1af08:	eba0 000a 	sub.w	r0, r0, sl
   1af0c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1af10:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1af14:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1af16:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
   1af1a:	d105      	bne.n	1af28 <compare_set+0xa4>
   1af1c:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   1af1e:	2013      	movs	r0, #19
   1af20:	f008 f813 	bl	22f4a <z_impl_k_busy_wait>
   1af24:	4a2a      	ldr	r2, [pc, #168]	; (1afd0 <compare_set+0x14c>)
   1af26:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
   1af28:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1af2a:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
   1af2e:	eba4 000c 	sub.w	r0, r4, ip
   1af32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   1af36:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1af3a:	bf88      	it	hi
   1af3c:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1af3e:	2000      	movs	r0, #0
   1af40:	f8c8 0000 	str.w	r0, [r8]
   1af44:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   1af48:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1af4c:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1af50:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1af54:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1af58:	4582      	cmp	sl, r0
   1af5a:	d006      	beq.n	1af6a <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
   1af5c:	1a20      	subs	r0, r4, r0
   1af5e:	3802      	subs	r0, #2
   1af60:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1af64:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1af68:	d819      	bhi.n	1af9e <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
   1af6a:	1ae4      	subs	r4, r4, r3
   1af6c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1af70:	1932      	adds	r2, r6, r4
   1af72:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
   1af76:	4c15      	ldr	r4, [pc, #84]	; (1afcc <compare_set+0x148>)
   1af78:	0129      	lsls	r1, r5, #4
   1af7a:	eb04 1005 	add.w	r0, r4, r5, lsl #4
   1af7e:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
   1af82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
   1af84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
   1af86:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
   1af88:	6043      	str	r3, [r0, #4]
	return ret;
   1af8a:	2400      	movs	r4, #0
	if (key) {
   1af8c:	9b01      	ldr	r3, [sp, #4]
   1af8e:	b113      	cbz	r3, 1af96 <compare_set+0x112>
   1af90:	4628      	mov	r0, r5
   1af92:	f7ff ff27 	bl	1ade4 <compare_int_unlock.part.0>
}
   1af96:	4620      	mov	r0, r4
   1af98:	b005      	add	sp, #20
   1af9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af9e:	4620      	mov	r0, r4
   1afa0:	e7b0      	b.n	1af04 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
   1afa2:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1afa4:	4a0b      	ldr	r2, [pc, #44]	; (1afd4 <compare_set+0x150>)
   1afa6:	f3bf 8f5b 	dmb	ish
   1afaa:	40ab      	lsls	r3, r5
   1afac:	e852 1f00 	ldrex	r1, [r2]
   1afb0:	4319      	orrs	r1, r3
   1afb2:	e842 1000 	strex	r0, r1, [r2]
   1afb6:	2800      	cmp	r0, #0
   1afb8:	d1f8      	bne.n	1afac <compare_set+0x128>
   1afba:	f3bf 8f5b 	dmb	ish
   1afbe:	4632      	mov	r2, r6
   1afc0:	463b      	mov	r3, r7
   1afc2:	e7d8      	b.n	1af76 <compare_set+0xf2>
			return -EINVAL;
   1afc4:	f06f 0415 	mvn.w	r4, #21
   1afc8:	e7e0      	b.n	1af8c <compare_set+0x108>
   1afca:	bf00      	nop
   1afcc:	20001c78 	.word	0x20001c78
   1afd0:	40011000 	.word	0x40011000
   1afd4:	200026dc 	.word	0x200026dc

0001afd8 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1afd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1afda:	4b19      	ldr	r3, [pc, #100]	; (1b040 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   1afdc:	4d19      	ldr	r5, [pc, #100]	; (1b044 <sys_clock_driver_init+0x6c>)
   1afde:	2400      	movs	r4, #0
   1afe0:	f04f 30ff 	mov.w	r0, #4294967295
   1afe4:	f04f 31ff 	mov.w	r1, #4294967295
   1afe8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1afec:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1aff0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1aff4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1aff8:	4b13      	ldr	r3, [pc, #76]	; (1b048 <sys_clock_driver_init+0x70>)
   1affa:	2602      	movs	r6, #2
   1affc:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1b000:	2101      	movs	r1, #1
   1b002:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1b006:	2011      	movs	r0, #17
   1b008:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1b00c:	4622      	mov	r2, r4
   1b00e:	f7f8 fffb 	bl	14008 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1b012:	2011      	movs	r0, #17
   1b014:	f7f8 ffc6 	bl	13fa4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1b018:	4a0c      	ldr	r2, [pc, #48]	; (1b04c <sys_clock_driver_init+0x74>)
   1b01a:	2301      	movs	r3, #1
   1b01c:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1b01e:	4a0c      	ldr	r2, [pc, #48]	; (1b050 <sys_clock_driver_init+0x78>)
   1b020:	602b      	str	r3, [r5, #0]
   1b022:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1b024:	4b0b      	ldr	r3, [pc, #44]	; (1b054 <sys_clock_driver_init+0x7c>)
   1b026:	4a0c      	ldr	r2, [pc, #48]	; (1b058 <sys_clock_driver_init+0x80>)
   1b028:	9300      	str	r3, [sp, #0]
   1b02a:	9401      	str	r4, [sp, #4]
   1b02c:	2300      	movs	r3, #0
   1b02e:	4620      	mov	r0, r4
   1b030:	f7ff ff28 	bl	1ae84 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1b034:	4630      	mov	r0, r6
   1b036:	f7ff f94f 	bl	1a2d8 <z_nrf_clock_control_lf_on>

	return 0;
}
   1b03a:	4620      	mov	r0, r4
   1b03c:	b002      	add	sp, #8
   1b03e:	bd70      	pop	{r4, r5, r6, pc}
   1b040:	20001c78 	.word	0x20001c78
   1b044:	40011000 	.word	0x40011000
   1b048:	e000e100 	.word	0xe000e100
   1b04c:	40011008 	.word	0x40011008
   1b050:	200026e0 	.word	0x200026e0
   1b054:	0001ad1d 	.word	0x0001ad1d
   1b058:	007fffff 	.word	0x007fffff

0001b05c <rtc_nrf_isr>:
{
   1b05c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return p_reg->INTENSET & mask;
   1b060:	4c2a      	ldr	r4, [pc, #168]	; (1b10c <rtc_nrf_isr+0xb0>)
   1b062:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1b066:	0799      	lsls	r1, r3, #30
   1b068:	d509      	bpl.n	1b07e <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b06a:	4b29      	ldr	r3, [pc, #164]	; (1b110 <rtc_nrf_isr+0xb4>)
   1b06c:	681a      	ldr	r2, [r3, #0]
   1b06e:	b132      	cbz	r2, 1b07e <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1b070:	2200      	movs	r2, #0
   1b072:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
   1b074:	4a27      	ldr	r2, [pc, #156]	; (1b114 <rtc_nrf_isr+0xb8>)
   1b076:	681b      	ldr	r3, [r3, #0]
   1b078:	6813      	ldr	r3, [r2, #0]
   1b07a:	3301      	adds	r3, #1
   1b07c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b07e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b082:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   1b084:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1b088:	03d2      	lsls	r2, r2, #15
   1b08a:	d52c      	bpl.n	1b0e6 <rtc_nrf_isr+0x8a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b08c:	f3bf 8f5b 	dmb	ish
   1b090:	4a21      	ldr	r2, [pc, #132]	; (1b118 <rtc_nrf_isr+0xbc>)
   1b092:	e852 1f00 	ldrex	r1, [r2]
   1b096:	f021 0001 	bic.w	r0, r1, #1
   1b09a:	e842 0500 	strex	r5, r0, [r2]
   1b09e:	2d00      	cmp	r5, #0
   1b0a0:	d1f7      	bne.n	1b092 <rtc_nrf_isr+0x36>
   1b0a2:	f3bf 8f5b 	dmb	ish
   1b0a6:	4a1d      	ldr	r2, [pc, #116]	; (1b11c <rtc_nrf_isr+0xc0>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1b0a8:	b909      	cbnz	r1, 1b0ae <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b0aa:	6811      	ldr	r1, [r2, #0]
		if (result) {
   1b0ac:	b1d9      	cbz	r1, 1b0e6 <rtc_nrf_isr+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1b0ae:	2500      	movs	r5, #0
   1b0b0:	6015      	str	r5, [r2, #0]
   1b0b2:	6812      	ldr	r2, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b0b4:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   1b0b8:	f7ff fec2 	bl	1ae40 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b0bc:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b0c0:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1b0c2:	4b17      	ldr	r3, [pc, #92]	; (1b120 <rtc_nrf_isr+0xc4>)
   1b0c4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   1b0c8:	4549      	cmp	r1, r9
   1b0ca:	bf08      	it	eq
   1b0cc:	4540      	cmpeq	r0, r8
   1b0ce:	d20f      	bcs.n	1b0f0 <rtc_nrf_isr+0x94>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1b0d0:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b0d2:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1b0d6:	b141      	cbz	r1, 1b0ea <rtc_nrf_isr+0x8e>
			handler(chan, expire_time, user_context);
   1b0d8:	f8cd a000 	str.w	sl, [sp]
   1b0dc:	4642      	mov	r2, r8
   1b0de:	464b      	mov	r3, r9
   1b0e0:	2000      	movs	r0, #0
   1b0e2:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1b0e4:	e001      	b.n	1b0ea <rtc_nrf_isr+0x8e>
   1b0e6:	f383 8810 	msr	PRIMASK, r3
}
   1b0ea:	b002      	add	sp, #8
   1b0ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1b0f0:	f04f 36ff 	mov.w	r6, #4294967295
   1b0f4:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
   1b0f8:	e9d3 1a00 	ldrd	r1, sl, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1b0fc:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
   1b100:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1b102:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1b106:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   1b10a:	e7e2      	b.n	1b0d2 <rtc_nrf_isr+0x76>
   1b10c:	40011000 	.word	0x40011000
   1b110:	40011104 	.word	0x40011104
   1b114:	200026e4 	.word	0x200026e4
   1b118:	200026dc 	.word	0x200026dc
   1b11c:	40011140 	.word	0x40011140
   1b120:	20001c78 	.word	0x20001c78

0001b124 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1b124:	4b14      	ldr	r3, [pc, #80]	; (1b178 <sys_clock_set_timeout+0x54>)
{
   1b126:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1b128:	f1b0 3fff 	cmp.w	r0, #4294967295
   1b12c:	bf08      	it	eq
   1b12e:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1b130:	1e44      	subs	r4, r0, #1
   1b132:	2c00      	cmp	r4, #0
   1b134:	dd1e      	ble.n	1b174 <sys_clock_set_timeout+0x50>
   1b136:	429c      	cmp	r4, r3
   1b138:	bfa8      	it	ge
   1b13a:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1b13c:	f7ff fe80 	bl	1ae40 <z_nrf_rtc_timer_read>
   1b140:	4b0e      	ldr	r3, [pc, #56]	; (1b17c <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1b142:	490f      	ldr	r1, [pc, #60]	; (1b180 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1b144:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b148:	1a80      	subs	r0, r0, r2
		ticks = 0;
   1b14a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1b14e:	bf28      	it	cs
   1b150:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1b152:	3001      	adds	r0, #1
   1b154:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
   1b156:	4808      	ldr	r0, [pc, #32]	; (1b178 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1b158:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   1b15a:	4284      	cmp	r4, r0
   1b15c:	bf28      	it	cs
   1b15e:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1b160:	1912      	adds	r2, r2, r4
   1b162:	f04f 0000 	mov.w	r0, #0
   1b166:	9001      	str	r0, [sp, #4]
   1b168:	f143 0300 	adc.w	r3, r3, #0
   1b16c:	f7ff fe8a 	bl	1ae84 <compare_set>
}
   1b170:	b002      	add	sp, #8
   1b172:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1b174:	2400      	movs	r4, #0
   1b176:	e7e1      	b.n	1b13c <sys_clock_set_timeout+0x18>
   1b178:	007fffff 	.word	0x007fffff
   1b17c:	20001c88 	.word	0x20001c88
   1b180:	0001ad1d 	.word	0x0001ad1d

0001b184 <sys_clock_elapsed>:
{
   1b184:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1b186:	f7ff fe5b 	bl	1ae40 <z_nrf_rtc_timer_read>
   1b18a:	4b02      	ldr	r3, [pc, #8]	; (1b194 <sys_clock_elapsed+0x10>)
   1b18c:	681b      	ldr	r3, [r3, #0]
}
   1b18e:	1ac0      	subs	r0, r0, r3
   1b190:	bd08      	pop	{r3, pc}
   1b192:	bf00      	nop
   1b194:	20001c88 	.word	0x20001c88

0001b198 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1b198:	4602      	mov	r2, r0
   1b19a:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1b19c:	4801      	ldr	r0, [pc, #4]	; (1b1a4 <multithreading_lock_acquire+0xc>)
   1b19e:	f001 bffb 	b.w	1d198 <z_impl_k_mutex_lock>
   1b1a2:	bf00      	nop
   1b1a4:	20000710 	.word	0x20000710

0001b1a8 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1b1a8:	4801      	ldr	r0, [pc, #4]	; (1b1b0 <multithreading_lock_release+0x8>)
   1b1aa:	f002 b873 	b.w	1d294 <z_impl_k_mutex_unlock>
   1b1ae:	bf00      	nop
   1b1b0:	20000710 	.word	0x20000710

0001b1b4 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1b1b4:	b508      	push	{r3, lr}
	z_impl_log_panic();
   1b1b6:	f7f5 fd61 	bl	10c7c <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1b1ba:	4908      	ldr	r1, [pc, #32]	; (1b1dc <k_sys_fatal_error_handler+0x28>)
   1b1bc:	680b      	ldr	r3, [r1, #0]
   1b1be:	075b      	lsls	r3, r3, #29
   1b1c0:	d008      	beq.n	1b1d4 <k_sys_fatal_error_handler+0x20>
   1b1c2:	4b07      	ldr	r3, [pc, #28]	; (1b1e0 <k_sys_fatal_error_handler+0x2c>)
   1b1c4:	4807      	ldr	r0, [pc, #28]	; (1b1e4 <k_sys_fatal_error_handler+0x30>)
   1b1c6:	1ac9      	subs	r1, r1, r3
   1b1c8:	0889      	lsrs	r1, r1, #2
   1b1ca:	0189      	lsls	r1, r1, #6
   1b1cc:	f041 0101 	orr.w	r1, r1, #1
   1b1d0:	f003 feb1 	bl	1ef36 <log_0>
		sys_arch_reboot(0);
   1b1d4:	2000      	movs	r0, #0
   1b1d6:	f7f9 fced 	bl	14bb4 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1b1da:	bf00      	nop
   1b1dc:	20000680 	.word	0x20000680
   1b1e0:	20000654 	.word	0x20000654
   1b1e4:	00026c80 	.word	0x00026c80

0001b1e8 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   1b1e8:	460a      	mov	r2, r1
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1b1ea:	4905      	ldr	r1, [pc, #20]	; (1b200 <rand_prio_low_vector_get_blocking+0x18>)
{
   1b1ec:	b410      	push	{r4}
   1b1ee:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1b1f0:	6808      	ldr	r0, [r1, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1b1f2:	6881      	ldr	r1, [r0, #8]
   1b1f4:	680c      	ldr	r4, [r1, #0]
   1b1f6:	4619      	mov	r1, r3
   1b1f8:	4623      	mov	r3, r4

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   1b1fa:	bc10      	pop	{r4}
   1b1fc:	4718      	bx	r3
   1b1fe:	bf00      	nop
   1b200:	200026e8 	.word	0x200026e8

0001b204 <sdc_assertion_handler>:
{
   1b204:	b538      	push	{r3, r4, r5, lr}
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   1b206:	4b0d      	ldr	r3, [pc, #52]	; (1b23c <sdc_assertion_handler+0x38>)
   1b208:	681a      	ldr	r2, [r3, #0]
   1b20a:	0752      	lsls	r2, r2, #29
{
   1b20c:	460d      	mov	r5, r1
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   1b20e:	d00d      	beq.n	1b22c <sdc_assertion_handler+0x28>
   1b210:	4c0b      	ldr	r4, [pc, #44]	; (1b240 <sdc_assertion_handler+0x3c>)
   1b212:	1b1c      	subs	r4, r3, r4
   1b214:	08a4      	lsrs	r4, r4, #2
   1b216:	f7f5 fbb3 	bl	10980 <z_log_strdup>
   1b21a:	01a4      	lsls	r4, r4, #6
   1b21c:	f044 0401 	orr.w	r4, r4, #1
   1b220:	4601      	mov	r1, r0
   1b222:	4623      	mov	r3, r4
   1b224:	4807      	ldr	r0, [pc, #28]	; (1b244 <sdc_assertion_handler+0x40>)
   1b226:	462a      	mov	r2, r5
   1b228:	f003 fea6 	bl	1ef78 <log_2>
	k_oops();
   1b22c:	4040      	eors	r0, r0
   1b22e:	f380 8811 	msr	BASEPRI, r0
   1b232:	f04f 0003 	mov.w	r0, #3
   1b236:	df02      	svc	2
}
   1b238:	bd38      	pop	{r3, r4, r5, pc}
   1b23a:	bf00      	nop
   1b23c:	200006a4 	.word	0x200006a4
   1b240:	20000654 	.word	0x20000654
   1b244:	00026c9d 	.word	0x00026c9d

0001b248 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1b248:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1b24a:	4804      	ldr	r0, [pc, #16]	; (1b25c <hci_driver_init+0x14>)
   1b24c:	f7fb f936 	bl	164bc <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1b250:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   1b254:	4802      	ldr	r0, [pc, #8]	; (1b260 <hci_driver_init+0x18>)
   1b256:	f7e8 bd35 	b.w	3cc4 <sdc_init>
   1b25a:	bf00      	nop
   1b25c:	0002433c 	.word	0x0002433c
   1b260:	0001b205 	.word	0x0001b205

0001b264 <rand_prio_low_vector_get>:
{
   1b264:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1b266:	4b08      	ldr	r3, [pc, #32]	; (1b288 <rand_prio_low_vector_get+0x24>)
{
   1b268:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1b26a:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1b26c:	6883      	ldr	r3, [r0, #8]
   1b26e:	685d      	ldr	r5, [r3, #4]
   1b270:	460a      	mov	r2, r1
   1b272:	b135      	cbz	r5, 1b282 <rand_prio_low_vector_get+0x1e>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1b274:	2300      	movs	r3, #0
   1b276:	4621      	mov	r1, r4
   1b278:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   1b27a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1b27e:	b2c0      	uxtb	r0, r0
   1b280:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1b282:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1b286:	e7f8      	b.n	1b27a <rand_prio_low_vector_get+0x16>
   1b288:	200026e8 	.word	0x200026e8

0001b28c <hci_driver_open>:
{
   1b28c:	b570      	push	{r4, r5, r6, lr}
   1b28e:	b090      	sub	sp, #64	; 0x40
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1b290:	2200      	movs	r2, #0
   1b292:	2300      	movs	r3, #0
   1b294:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b298:	2300      	movs	r3, #0
   1b29a:	f06f 0209 	mvn.w	r2, #9
   1b29e:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1b2a2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1b2a6:	9300      	str	r3, [sp, #0]
   1b2a8:	4962      	ldr	r1, [pc, #392]	; (1b434 <hci_driver_open+0x1a8>)
   1b2aa:	4b63      	ldr	r3, [pc, #396]	; (1b438 <hci_driver_open+0x1ac>)
   1b2ac:	4863      	ldr	r0, [pc, #396]	; (1b43c <hci_driver_open+0x1b0>)
   1b2ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1b2b2:	f001 fe15 	bl	1cee0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1b2b6:	4962      	ldr	r1, [pc, #392]	; (1b440 <hci_driver_open+0x1b4>)
   1b2b8:	4860      	ldr	r0, [pc, #384]	; (1b43c <hci_driver_open+0x1b0>)
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1b2ba:	4c62      	ldr	r4, [pc, #392]	; (1b444 <hci_driver_open+0x1b8>)
   1b2bc:	f001 fd5e 	bl	1cd7c <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   1b2c0:	a80b      	add	r0, sp, #44	; 0x2c
   1b2c2:	f7e8 fc6b 	bl	3b9c <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1b2c6:	6820      	ldr	r0, [r4, #0]
   1b2c8:	f000 0007 	and.w	r0, r0, #7
   1b2cc:	2802      	cmp	r0, #2
   1b2ce:	d90a      	bls.n	1b2e6 <hci_driver_open+0x5a>
   1b2d0:	4b5d      	ldr	r3, [pc, #372]	; (1b448 <hci_driver_open+0x1bc>)
   1b2d2:	485e      	ldr	r0, [pc, #376]	; (1b44c <hci_driver_open+0x1c0>)
   1b2d4:	1ae3      	subs	r3, r4, r3
   1b2d6:	089b      	lsrs	r3, r3, #2
   1b2d8:	019b      	lsls	r3, r3, #6
   1b2da:	f043 0303 	orr.w	r3, r3, #3
   1b2de:	2214      	movs	r2, #20
   1b2e0:	a90b      	add	r1, sp, #44	; 0x2c
   1b2e2:	f003 fe89 	bl	1eff8 <log_hexdump>
			err = sdc_support_scan();
   1b2e6:	f7e8 fd9d 	bl	3e24 <sdc_support_scan>
			if (err) {
   1b2ea:	b118      	cbz	r0, 1b2f4 <hci_driver_open+0x68>
				return -ENOTSUP;
   1b2ec:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1b2f0:	b010      	add	sp, #64	; 0x40
   1b2f2:	bd70      	pop	{r4, r5, r6, pc}
		err = sdc_support_master();
   1b2f4:	f7e8 fd86 	bl	3e04 <sdc_support_master>
		if (err) {
   1b2f8:	2800      	cmp	r0, #0
   1b2fa:	d1f7      	bne.n	1b2ec <hci_driver_open+0x60>
		err = sdc_support_dle();
   1b2fc:	f7e8 fd62 	bl	3dc4 <sdc_support_dle>
		if (err) {
   1b300:	2800      	cmp	r0, #0
   1b302:	d1f3      	bne.n	1b2ec <hci_driver_open+0x60>
		err = sdc_support_le_2m_phy();
   1b304:	f7e8 fd6e 	bl	3de4 <sdc_support_le_2m_phy>
		if (err) {
   1b308:	4606      	mov	r6, r0
   1b30a:	2800      	cmp	r0, #0
   1b30c:	d1ee      	bne.n	1b2ec <hci_driver_open+0x60>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b30e:	ad08      	add	r5, sp, #32
	cfg.master_count.count = SDC_MASTER_COUNT;
   1b310:	2101      	movs	r1, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b312:	462a      	mov	r2, r5
	cfg.master_count.count = SDC_MASTER_COUNT;
   1b314:	f88d 1020 	strb.w	r1, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b318:	f7e8 fc4e 	bl	3bb8 <sdc_cfg_set>
	if (required_memory < 0) {
   1b31c:	2800      	cmp	r0, #0
   1b31e:	dbe7      	blt.n	1b2f0 <hci_driver_open+0x64>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b320:	462a      	mov	r2, r5
   1b322:	2102      	movs	r1, #2
   1b324:	4630      	mov	r0, r6
	cfg.slave_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1b326:	f88d 6020 	strb.w	r6, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b32a:	f7e8 fc45 	bl	3bb8 <sdc_cfg_set>
	if (required_memory < 0) {
   1b32e:	2800      	cmp	r0, #0
   1b330:	dbde      	blt.n	1b2f0 <hci_driver_open+0x64>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1b332:	4b47      	ldr	r3, [pc, #284]	; (1b450 <hci_driver_open+0x1c4>)
   1b334:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b336:	462a      	mov	r2, r5
   1b338:	2103      	movs	r1, #3
   1b33a:	4630      	mov	r0, r6
   1b33c:	f7e8 fc3c 	bl	3bb8 <sdc_cfg_set>
	if (required_memory < 0) {
   1b340:	2800      	cmp	r0, #0
   1b342:	dbd5      	blt.n	1b2f0 <hci_driver_open+0x64>
	cfg.event_length.event_length_us =
   1b344:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b348:	462a      	mov	r2, r5
   1b34a:	2104      	movs	r1, #4
   1b34c:	4630      	mov	r0, r6
	cfg.event_length.event_length_us =
   1b34e:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b350:	f7e8 fc32 	bl	3bb8 <sdc_cfg_set>
	if (required_memory < 0) {
   1b354:	2800      	cmp	r0, #0
   1b356:	dbcb      	blt.n	1b2f0 <hci_driver_open+0x64>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b358:	462a      	mov	r2, r5
   1b35a:	2105      	movs	r1, #5
   1b35c:	4630      	mov	r0, r6
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1b35e:	f88d 6020 	strb.w	r6, [sp, #32]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b362:	f7e8 fc29 	bl	3bb8 <sdc_cfg_set>
	if (required_memory < 0) {
   1b366:	2800      	cmp	r0, #0
   1b368:	dbc2      	blt.n	1b2f0 <hci_driver_open+0x64>
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   1b36a:	2303      	movs	r3, #3
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b36c:	462a      	mov	r2, r5
   1b36e:	2106      	movs	r1, #6
   1b370:	4630      	mov	r0, r6
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   1b372:	f88d 3020 	strb.w	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b376:	f7e8 fc1f 	bl	3bb8 <sdc_cfg_set>
		if (required_memory < 0) {
   1b37a:	2800      	cmp	r0, #0
   1b37c:	dbb8      	blt.n	1b2f0 <hci_driver_open+0x64>
	if (required_memory > sizeof(sdc_mempool)) {
   1b37e:	f240 4186 	movw	r1, #1158	; 0x486
   1b382:	4288      	cmp	r0, r1
   1b384:	dd15      	ble.n	1b3b2 <hci_driver_open+0x126>
		BT_ERR("Allocated memory too low: %u < %u",
   1b386:	6823      	ldr	r3, [r4, #0]
   1b388:	075d      	lsls	r5, r3, #29
   1b38a:	d009      	beq.n	1b3a0 <hci_driver_open+0x114>
   1b38c:	4b2e      	ldr	r3, [pc, #184]	; (1b448 <hci_driver_open+0x1bc>)
   1b38e:	1ae3      	subs	r3, r4, r3
   1b390:	089b      	lsrs	r3, r3, #2
   1b392:	019b      	lsls	r3, r3, #6
   1b394:	4602      	mov	r2, r0
   1b396:	f043 0301 	orr.w	r3, r3, #1
   1b39a:	482e      	ldr	r0, [pc, #184]	; (1b454 <hci_driver_open+0x1c8>)
   1b39c:	f003 fdec 	bl	1ef78 <log_2>
		k_panic();
   1b3a0:	4040      	eors	r0, r0
   1b3a2:	f380 8811 	msr	BASEPRI, r0
   1b3a6:	f04f 0004 	mov.w	r0, #4
   1b3aa:	df02      	svc	2
		return -ENOMEM;
   1b3ac:	f06f 000b 	mvn.w	r0, #11
   1b3b0:	e79e      	b.n	1b2f0 <hci_driver_open+0x64>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1b3b2:	4829      	ldr	r0, [pc, #164]	; (1b458 <hci_driver_open+0x1cc>)
   1b3b4:	f001 face 	bl	1c954 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1b3b8:	4b28      	ldr	r3, [pc, #160]	; (1b45c <hci_driver_open+0x1d0>)
   1b3ba:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   1b3bc:	b970      	cbnz	r0, 1b3dc <hci_driver_open+0x150>
		BT_ERR("An entropy source is required");
   1b3be:	6823      	ldr	r3, [r4, #0]
   1b3c0:	075a      	lsls	r2, r3, #29
   1b3c2:	d008      	beq.n	1b3d6 <hci_driver_open+0x14a>
   1b3c4:	4920      	ldr	r1, [pc, #128]	; (1b448 <hci_driver_open+0x1bc>)
   1b3c6:	4826      	ldr	r0, [pc, #152]	; (1b460 <hci_driver_open+0x1d4>)
   1b3c8:	1a61      	subs	r1, r4, r1
   1b3ca:	0889      	lsrs	r1, r1, #2
   1b3cc:	0189      	lsls	r1, r1, #6
   1b3ce:	f041 0101 	orr.w	r1, r1, #1
   1b3d2:	f003 fdb0 	bl	1ef36 <log_0>
		return -ENODEV;
   1b3d6:	f06f 0012 	mvn.w	r0, #18
   1b3da:	e789      	b.n	1b2f0 <hci_driver_open+0x64>
	sdc_rand_source_t rand_functions = {
   1b3dc:	4b21      	ldr	r3, [pc, #132]	; (1b464 <hci_driver_open+0x1d8>)
   1b3de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1b3e2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1b3e6:	4628      	mov	r0, r5
   1b3e8:	f7e8 fd7e 	bl	3ee8 <sdc_rand_source_register>
	if (err) {
   1b3ec:	4601      	mov	r1, r0
   1b3ee:	b170      	cbz	r0, 1b40e <hci_driver_open+0x182>
		BT_ERR("Failed to register rand source (%d)", err);
   1b3f0:	6823      	ldr	r3, [r4, #0]
   1b3f2:	075b      	lsls	r3, r3, #29
   1b3f4:	d008      	beq.n	1b408 <hci_driver_open+0x17c>
   1b3f6:	4a14      	ldr	r2, [pc, #80]	; (1b448 <hci_driver_open+0x1bc>)
   1b3f8:	481b      	ldr	r0, [pc, #108]	; (1b468 <hci_driver_open+0x1dc>)
   1b3fa:	1aa2      	subs	r2, r4, r2
   1b3fc:	0892      	lsrs	r2, r2, #2
   1b3fe:	0192      	lsls	r2, r2, #6
   1b400:	f042 0201 	orr.w	r2, r2, #1
   1b404:	f003 fda4 	bl	1ef50 <log_1>
		return -EINVAL;
   1b408:	f06f 0015 	mvn.w	r0, #21
   1b40c:	e770      	b.n	1b2f0 <hci_driver_open+0x64>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1b40e:	f04f 30ff 	mov.w	r0, #4294967295
   1b412:	f04f 31ff 	mov.w	r1, #4294967295
   1b416:	f7ff febf 	bl	1b198 <multithreading_lock_acquire>
	if (!err) {
   1b41a:	4604      	mov	r4, r0
   1b41c:	b930      	cbnz	r0, 1b42c <hci_driver_open+0x1a0>
		err = sdc_enable(host_signal, sdc_mempool);
   1b41e:	4913      	ldr	r1, [pc, #76]	; (1b46c <hci_driver_open+0x1e0>)
   1b420:	4813      	ldr	r0, [pc, #76]	; (1b470 <hci_driver_open+0x1e4>)
   1b422:	f7e8 fc27 	bl	3c74 <sdc_enable>
   1b426:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1b428:	f7ff febe 	bl	1b1a8 <multithreading_lock_release>
	if (err < 0) {
   1b42c:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1b430:	e75e      	b.n	1b2f0 <hci_driver_open+0x64>
   1b432:	bf00      	nop
   1b434:	200047a0 	.word	0x200047a0
   1b438:	0001b475 	.word	0x0001b475
   1b43c:	20001c90 	.word	0x20001c90
   1b440:	00026cc2 	.word	0x00026cc2
   1b444:	200006a4 	.word	0x200006a4
   1b448:	20000654 	.word	0x20000654
   1b44c:	00026cc9 	.word	0x00026cc9
   1b450:	02031b1b 	.word	0x02031b1b
   1b454:	00026cf0 	.word	0x00026cf0
   1b458:	00026c7c 	.word	0x00026c7c
   1b45c:	200026e8 	.word	0x200026e8
   1b460:	00026d12 	.word	0x00026d12
   1b464:	00023700 	.word	0x00023700
   1b468:	00026d30 	.word	0x00026d30
   1b46c:	2000292f 	.word	0x2000292f
   1b470:	0001b5a1 	.word	0x0001b5a1

0001b474 <recv_thread>:
{
   1b474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b478:	4b43      	ldr	r3, [pc, #268]	; (1b588 <recv_thread+0x114>)
   1b47a:	4e44      	ldr	r6, [pc, #272]	; (1b58c <recv_thread+0x118>)
	return z_impl_k_sem_take(sem, timeout);
   1b47c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 1b59c <recv_thread+0x128>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1b480:	4d43      	ldr	r5, [pc, #268]	; (1b590 <recv_thread+0x11c>)
   1b482:	1b9e      	subs	r6, r3, r6
	bool received_data = false;
   1b484:	2700      	movs	r7, #0
   1b486:	08b6      	lsrs	r6, r6, #2
	bool received_evt = false;
   1b488:	463c      	mov	r4, r7
   1b48a:	4698      	mov	r8, r3
		if (!received_evt && !received_data) {
   1b48c:	b93c      	cbnz	r4, 1b49e <recv_thread+0x2a>
   1b48e:	b937      	cbnz	r7, 1b49e <recv_thread+0x2a>
   1b490:	f04f 32ff 	mov.w	r2, #4294967295
   1b494:	f04f 33ff 	mov.w	r3, #4294967295
   1b498:	4648      	mov	r0, r9
   1b49a:	f001 ff9d 	bl	1d3d8 <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1b49e:	f04f 30ff 	mov.w	r0, #4294967295
   1b4a2:	f04f 31ff 	mov.w	r1, #4294967295
   1b4a6:	f7ff fe77 	bl	1b198 <multithreading_lock_acquire>
	if (!errcode) {
   1b4aa:	b160      	cbz	r0, 1b4c6 <recv_thread+0x52>
		return false;
   1b4ac:	2400      	movs	r4, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1b4ae:	f04f 30ff 	mov.w	r0, #4294967295
   1b4b2:	f04f 31ff 	mov.w	r1, #4294967295
   1b4b6:	f7ff fe6f 	bl	1b198 <multithreading_lock_acquire>
	if (!errcode) {
   1b4ba:	2800      	cmp	r0, #0
   1b4bc:	d03c      	beq.n	1b538 <recv_thread+0xc4>
		return false;
   1b4be:	2700      	movs	r7, #0
	z_impl_k_yield();
   1b4c0:	f002 fbda 	bl	1dc78 <z_impl_k_yield>
}
   1b4c4:	e7e2      	b.n	1b48c <recv_thread+0x18>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1b4c6:	4832      	ldr	r0, [pc, #200]	; (1b590 <recv_thread+0x11c>)
   1b4c8:	f000 fbb4 	bl	1bc34 <hci_internal_evt_get>
   1b4cc:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1b4ce:	f7ff fe6b 	bl	1b1a8 <multithreading_lock_release>
	if (errcode) {
   1b4d2:	2c00      	cmp	r4, #0
   1b4d4:	d1ea      	bne.n	1b4ac <recv_thread+0x38>
	switch (hdr->evt) {
   1b4d6:	7828      	ldrb	r0, [r5, #0]
   1b4d8:	283e      	cmp	r0, #62	; 0x3e
   1b4da:	d007      	beq.n	1b4ec <recv_thread+0x78>
   1b4dc:	28ff      	cmp	r0, #255	; 0xff
   1b4de:	d01e      	beq.n	1b51e <recv_thread+0xaa>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1b4e0:	f04f 32ff 	mov.w	r2, #4294967295
   1b4e4:	f04f 33ff 	mov.w	r3, #4294967295
   1b4e8:	2400      	movs	r4, #0
   1b4ea:	e005      	b.n	1b4f8 <recv_thread+0x84>
		switch (me->subevent) {
   1b4ec:	78ab      	ldrb	r3, [r5, #2]
   1b4ee:	2b02      	cmp	r3, #2
		switch (subevent) {
   1b4f0:	d1f6      	bne.n	1b4e0 <recv_thread+0x6c>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1b4f2:	2200      	movs	r2, #0
   1b4f4:	2300      	movs	r3, #0
   1b4f6:	2401      	movs	r4, #1
   1b4f8:	4621      	mov	r1, r4
   1b4fa:	f7f9 fc43 	bl	14d84 <bt_buf_get_evt>
	if (!evt_buf) {
   1b4fe:	4607      	mov	r7, r0
   1b500:	b980      	cbnz	r0, 1b524 <recv_thread+0xb0>
		if (discardable) {
   1b502:	2c00      	cmp	r4, #0
   1b504:	d1d3      	bne.n	1b4ae <recv_thread+0x3a>
		BT_ERR("No event buffer available");
   1b506:	f8d8 3000 	ldr.w	r3, [r8]
   1b50a:	075a      	lsls	r2, r3, #29
   1b50c:	d005      	beq.n	1b51a <recv_thread+0xa6>
   1b50e:	01b1      	lsls	r1, r6, #6
   1b510:	4820      	ldr	r0, [pc, #128]	; (1b594 <recv_thread+0x120>)
   1b512:	f041 0101 	orr.w	r1, r1, #1
   1b516:	f003 fd0e 	bl	1ef36 <log_0>
	return true;
   1b51a:	2401      	movs	r4, #1
   1b51c:	e7c7      	b.n	1b4ae <recv_thread+0x3a>
		switch (subevent) {
   1b51e:	78ab      	ldrb	r3, [r5, #2]
   1b520:	2b80      	cmp	r3, #128	; 0x80
   1b522:	e7e5      	b.n	1b4f0 <recv_thread+0x7c>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1b524:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1b526:	4629      	mov	r1, r5
   1b528:	3202      	adds	r2, #2
   1b52a:	3008      	adds	r0, #8
   1b52c:	f006 fdfb 	bl	22126 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1b530:	4638      	mov	r0, r7
   1b532:	f7fa ff8d 	bl	16450 <bt_recv>
   1b536:	e7f0      	b.n	1b51a <recv_thread+0xa6>
		errcode = sdc_hci_data_get(p_hci_buffer);
   1b538:	4815      	ldr	r0, [pc, #84]	; (1b590 <recv_thread+0x11c>)
   1b53a:	f7f1 fc23 	bl	cd84 <sdc_hci_data_get>
   1b53e:	4607      	mov	r7, r0
		MULTITHREADING_LOCK_RELEASE();
   1b540:	f7ff fe32 	bl	1b1a8 <multithreading_lock_release>
	if (errcode) {
   1b544:	2f00      	cmp	r7, #0
   1b546:	d1ba      	bne.n	1b4be <recv_thread+0x4a>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1b548:	f04f 32ff 	mov.w	r2, #4294967295
   1b54c:	f04f 33ff 	mov.w	r3, #4294967295
   1b550:	2003      	movs	r0, #3
   1b552:	f7f9 fbed 	bl	14d30 <bt_buf_get_rx>
	if (!data_buf) {
   1b556:	4607      	mov	r7, r0
   1b558:	b958      	cbnz	r0, 1b572 <recv_thread+0xfe>
		BT_ERR("No data buffer available");
   1b55a:	f8d8 3000 	ldr.w	r3, [r8]
   1b55e:	075b      	lsls	r3, r3, #29
   1b560:	d005      	beq.n	1b56e <recv_thread+0xfa>
   1b562:	01b1      	lsls	r1, r6, #6
   1b564:	480c      	ldr	r0, [pc, #48]	; (1b598 <recv_thread+0x124>)
   1b566:	f041 0101 	orr.w	r1, r1, #1
   1b56a:	f003 fce4 	bl	1ef36 <log_0>
	return true;
   1b56e:	2701      	movs	r7, #1
   1b570:	e7a6      	b.n	1b4c0 <recv_thread+0x4c>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1b572:	886a      	ldrh	r2, [r5, #2]
   1b574:	4629      	mov	r1, r5
   1b576:	3204      	adds	r2, #4
   1b578:	3008      	adds	r0, #8
   1b57a:	f006 fdd4 	bl	22126 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1b57e:	4638      	mov	r0, r7
   1b580:	f7fa ff66 	bl	16450 <bt_recv>
   1b584:	e7f3      	b.n	1b56e <recv_thread+0xfa>
   1b586:	bf00      	nop
   1b588:	200006a4 	.word	0x200006a4
   1b58c:	20000654 	.word	0x20000654
   1b590:	200028e9 	.word	0x200028e9
   1b594:	00026d54 	.word	0x00026d54
   1b598:	00026d6e 	.word	0x00026d6e
   1b59c:	20000794 	.word	0x20000794

0001b5a0 <host_signal>:
	z_impl_k_sem_give(sem);
   1b5a0:	4801      	ldr	r0, [pc, #4]	; (1b5a8 <host_signal+0x8>)
   1b5a2:	f001 bef3 	b.w	1d38c <z_impl_k_sem_give>
   1b5a6:	bf00      	nop
   1b5a8:	20000794 	.word	0x20000794

0001b5ac <hci_driver_send>:
{
   1b5ac:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   1b5ae:	8983      	ldrh	r3, [r0, #12]
{
   1b5b0:	4605      	mov	r5, r0
	if (!buf->len) {
   1b5b2:	b383      	cbz	r3, 1b616 <hci_driver_send+0x6a>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1b5b4:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   1b5b6:	b1ab      	cbz	r3, 1b5e4 <hci_driver_send+0x38>
   1b5b8:	2b02      	cmp	r3, #2
   1b5ba:	d12c      	bne.n	1b616 <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1b5bc:	f04f 30ff 	mov.w	r0, #4294967295
   1b5c0:	f04f 31ff 	mov.w	r1, #4294967295
   1b5c4:	f7ff fde8 	bl	1b198 <multithreading_lock_acquire>
	if (!errcode) {
   1b5c8:	4604      	mov	r4, r0
   1b5ca:	b948      	cbnz	r0, 1b5e0 <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   1b5cc:	68a8      	ldr	r0, [r5, #8]
   1b5ce:	f7f1 fbe6 	bl	cd9e <sdc_hci_data_put>
   1b5d2:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1b5d4:	f7ff fde8 	bl	1b1a8 <multithreading_lock_release>
		if (errcode) {
   1b5d8:	b1c4      	cbz	r4, 1b60c <hci_driver_send+0x60>
   1b5da:	4810      	ldr	r0, [pc, #64]	; (1b61c <hci_driver_send+0x70>)
   1b5dc:	f001 fed6 	bl	1d38c <z_impl_k_sem_give>
}
   1b5e0:	4620      	mov	r0, r4
   1b5e2:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1b5e4:	f04f 30ff 	mov.w	r0, #4294967295
   1b5e8:	f04f 31ff 	mov.w	r1, #4294967295
   1b5ec:	f7ff fdd4 	bl	1b198 <multithreading_lock_acquire>
	if (!errcode) {
   1b5f0:	4604      	mov	r4, r0
   1b5f2:	2800      	cmp	r0, #0
   1b5f4:	d1f4      	bne.n	1b5e0 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   1b5f6:	68a8      	ldr	r0, [r5, #8]
   1b5f8:	f000 f812 	bl	1b620 <hci_internal_cmd_put>
   1b5fc:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1b5fe:	f7ff fdd3 	bl	1b1a8 <multithreading_lock_release>
	if (errcode) {
   1b602:	2c00      	cmp	r4, #0
   1b604:	d1ec      	bne.n	1b5e0 <hci_driver_send+0x34>
   1b606:	4805      	ldr	r0, [pc, #20]	; (1b61c <hci_driver_send+0x70>)
   1b608:	f001 fec0 	bl	1d38c <z_impl_k_sem_give>
		net_buf_unref(buf);
   1b60c:	4628      	mov	r0, r5
   1b60e:	f7fe fc69 	bl	19ee4 <net_buf_unref>
   1b612:	2400      	movs	r4, #0
   1b614:	e7e4      	b.n	1b5e0 <hci_driver_send+0x34>
	switch (type) {
   1b616:	f06f 0415 	mvn.w	r4, #21
   1b61a:	e7e1      	b.n	1b5e0 <hci_driver_send+0x34>
   1b61c:	20000794 	.word	0x20000794

0001b620 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1b620:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1b622:	4c8d      	ldr	r4, [pc, #564]	; (1b858 <hci_internal_cmd_put+0x238>)
   1b624:	7823      	ldrb	r3, [r4, #0]
   1b626:	2b00      	cmp	r3, #0
   1b628:	f040 82ef 	bne.w	1bc0a <hci_internal_cmd_put+0x5ea>
	return ((uint16_t)src[1] << 8) | src[0];
   1b62c:	7843      	ldrb	r3, [r0, #1]
   1b62e:	7805      	ldrb	r5, [r0, #0]
   1b630:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	switch (BT_OGF(opcode)) {
   1b634:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   1b638:	b22e      	sxth	r6, r5
   1b63a:	ea4f 2395 	mov.w	r3, r5, lsr #10
   1b63e:	d20d      	bcs.n	1b65c <hci_internal_cmd_put+0x3c>
   1b640:	b17b      	cbz	r3, 1b662 <hci_internal_cmd_put+0x42>
   1b642:	3b01      	subs	r3, #1
   1b644:	2b07      	cmp	r3, #7
   1b646:	d80c      	bhi.n	1b662 <hci_internal_cmd_put+0x42>
   1b648:	e8df f013 	tbh	[pc, r3, lsl #1]
   1b64c:	000b000e 	.word	0x000b000e
   1b650:	0060002c 	.word	0x0060002c
   1b654:	000b000b 	.word	0x000b000b
   1b658:	010a000b 	.word	0x010a000b
   1b65c:	2b3f      	cmp	r3, #63	; 0x3f
   1b65e:	f000 822c 	beq.w	1baba <hci_internal_cmd_put+0x49a>
   1b662:	2304      	movs	r3, #4
   1b664:	2001      	movs	r0, #1
   1b666:	e263      	b.n	1bb30 <hci_internal_cmd_put+0x510>
	switch (opcode)	{
   1b668:	f240 4306 	movw	r3, #1030	; 0x406
   1b66c:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1b66e:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1b672:	d005      	beq.n	1b680 <hci_internal_cmd_put+0x60>
   1b674:	f240 431d 	movw	r3, #1053	; 0x41d
   1b678:	429e      	cmp	r6, r3
   1b67a:	d010      	beq.n	1b69e <hci_internal_cmd_put+0x7e>
	switch (opcode)	{
   1b67c:	2001      	movs	r0, #1
   1b67e:	e001      	b.n	1b684 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1b680:	f7f1 fcd7 	bl	d032 <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1b684:	230f      	movs	r3, #15
   1b686:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1b688:	2304      	movs	r3, #4
   1b68a:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1b68c:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1b68e:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1b690:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1b692:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1b696:	2301      	movs	r3, #1
   1b698:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1b69a:	2000      	movs	r0, #0
}
   1b69c:	bd70      	pop	{r4, r5, r6, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1b69e:	f7f1 fcca 	bl	d036 <sdc_hci_cmd_lc_read_remote_version_information>
   1b6a2:	e7ef      	b.n	1b684 <hci_internal_cmd_put+0x64>
	switch (opcode)	{
   1b6a4:	f640 4363 	movw	r3, #3171	; 0xc63
   1b6a8:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1b6aa:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1b6ae:	d025      	beq.n	1b6fc <hci_internal_cmd_put+0xdc>
   1b6b0:	dc0f      	bgt.n	1b6d2 <hci_internal_cmd_put+0xb2>
   1b6b2:	f640 4303 	movw	r3, #3075	; 0xc03
   1b6b6:	429e      	cmp	r6, r3
   1b6b8:	d018      	beq.n	1b6ec <hci_internal_cmd_put+0xcc>
   1b6ba:	f640 432d 	movw	r3, #3117	; 0xc2d
   1b6be:	429e      	cmp	r6, r3
   1b6c0:	d017      	beq.n	1b6f2 <hci_internal_cmd_put+0xd2>
   1b6c2:	f640 4301 	movw	r3, #3073	; 0xc01
   1b6c6:	429e      	cmp	r6, r3
   1b6c8:	d1d8      	bne.n	1b67c <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1b6ca:	f7f1 fb84 	bl	cdd6 <sdc_hci_cmd_cb_set_event_mask>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1b6ce:	2304      	movs	r3, #4
   1b6d0:	e0b7      	b.n	1b842 <hci_internal_cmd_put+0x222>
	switch (opcode)	{
   1b6d2:	f640 437b 	movw	r3, #3195	; 0xc7b
   1b6d6:	429e      	cmp	r6, r3
   1b6d8:	d013      	beq.n	1b702 <hci_internal_cmd_put+0xe2>
   1b6da:	f640 437c 	movw	r3, #3196	; 0xc7c
   1b6de:	429e      	cmp	r6, r3
   1b6e0:	d1cc      	bne.n	1b67c <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1b6e2:	495e      	ldr	r1, [pc, #376]	; (1b85c <hci_internal_cmd_put+0x23c>)
   1b6e4:	f7f1 fb81 	bl	cdea <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1b6e8:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1b6ea:	e0aa      	b.n	1b842 <hci_internal_cmd_put+0x222>
		return sdc_hci_cmd_cb_reset();
   1b6ec:	f7e8 fcda 	bl	40a4 <sdc_hci_cmd_cb_reset>
   1b6f0:	e7ed      	b.n	1b6ce <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1b6f2:	495a      	ldr	r1, [pc, #360]	; (1b85c <hci_internal_cmd_put+0x23c>)
   1b6f4:	f7f1 fb6d 	bl	cdd2 <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1b6f8:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1b6fa:	e0a2      	b.n	1b842 <hci_internal_cmd_put+0x222>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1b6fc:	f7f1 fb70 	bl	cde0 <sdc_hci_cmd_cb_set_event_mask_page_2>
   1b700:	e7e5      	b.n	1b6ce <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1b702:	4956      	ldr	r1, [pc, #344]	; (1b85c <hci_internal_cmd_put+0x23c>)
   1b704:	f7f1 fb63 	bl	cdce <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1b708:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1b70a:	e09a      	b.n	1b842 <hci_internal_cmd_put+0x222>
	switch (opcode)	{
   1b70c:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   1b710:	3e01      	subs	r6, #1
   1b712:	2e08      	cmp	r6, #8
   1b714:	d8b2      	bhi.n	1b67c <hci_internal_cmd_put+0x5c>
   1b716:	a301      	add	r3, pc, #4	; (adr r3, 1b71c <hci_internal_cmd_put+0xfc>)
   1b718:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1b71c:	0001b741 	.word	0x0001b741
   1b720:	0001b74b 	.word	0x0001b74b
   1b724:	0001b823 	.word	0x0001b823
   1b728:	0001b67d 	.word	0x0001b67d
   1b72c:	0001b67d 	.word	0x0001b67d
   1b730:	0001b67d 	.word	0x0001b67d
   1b734:	0001b67d 	.word	0x0001b67d
   1b738:	0001b67d 	.word	0x0001b67d
   1b73c:	0001b83b 	.word	0x0001b83b
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1b740:	4846      	ldr	r0, [pc, #280]	; (1b85c <hci_internal_cmd_put+0x23c>)
   1b742:	f7f1 fc2f 	bl	cfa4 <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1b746:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1b748:	e07b      	b.n	1b842 <hci_internal_cmd_put+0x222>
	memset(cmds, 0, sizeof(*cmds));
   1b74a:	4844      	ldr	r0, [pc, #272]	; (1b85c <hci_internal_cmd_put+0x23c>)
   1b74c:	222e      	movs	r2, #46	; 0x2e
   1b74e:	2100      	movs	r1, #0
   1b750:	f005 fb2e 	bl	20db0 <memset>
	cmds->hci_disconnect = 1;
   1b754:	79e3      	ldrb	r3, [r4, #7]
   1b756:	f043 0320 	orr.w	r3, r3, #32
   1b75a:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   1b75c:	7a63      	ldrb	r3, [r4, #9]
   1b75e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1b762:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   1b764:	7b23      	ldrb	r3, [r4, #12]
   1b766:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1b76a:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   1b76c:	7c63      	ldrb	r3, [r4, #17]
   1b76e:	f043 0304 	orr.w	r3, r3, #4
   1b772:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   1b774:	7d63      	ldrb	r3, [r4, #21]
   1b776:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1b77a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1b77e:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1b780:	7da3      	ldrb	r3, [r4, #22]
   1b782:	f043 0302 	orr.w	r3, r3, #2
   1b786:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1b788:	7f63      	ldrb	r3, [r4, #29]
   1b78a:	f043 0304 	orr.w	r3, r3, #4
   1b78e:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1b790:	f894 3020 	ldrb.w	r3, [r4, #32]
   1b794:	f023 0317 	bic.w	r3, r3, #23
   1b798:	f043 0317 	orr.w	r3, r3, #23
   1b79c:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_parameters = 1;
   1b7a0:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1b7a4:	f063 0303 	orn	r3, r3, #3
   1b7a8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   1b7ac:	23ff      	movs	r3, #255	; 0xff
   1b7ae:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   1b7b2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1b7b6:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   1b7ba:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   1b7be:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1b7c2:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1b7c6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1b7ca:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1b7ce:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1b7d2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1b7d6:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1b7da:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1b7de:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1b7e2:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   1b7e6:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   1b7ea:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   1b7ee:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1b7f2:	f063 0301 	orn	r3, r3, #1
   1b7f6:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1b7fa:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1b7fe:	f043 0301 	orr.w	r3, r3, #1
   1b802:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1b806:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1b80a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1b80e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   1b812:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1b816:	f043 0304 	orr.w	r3, r3, #4
   1b81a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	switch (hci_opcode) {
   1b81e:	2344      	movs	r3, #68	; 0x44
   1b820:	e0db      	b.n	1b9da <hci_internal_cmd_put+0x3ba>
	memset(features, 0, sizeof(*features));
   1b822:	480e      	ldr	r0, [pc, #56]	; (1b85c <hci_internal_cmd_put+0x23c>)
   1b824:	2208      	movs	r2, #8
   1b826:	2100      	movs	r1, #0
   1b828:	f005 fac2 	bl	20db0 <memset>
	features->bdedr_not_supported = 1;
   1b82c:	7ae3      	ldrb	r3, [r4, #11]
   1b82e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1b832:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	*(buf + 4) = states2;
   1b836:	72e3      	strb	r3, [r4, #11]
   1b838:	e0ce      	b.n	1b9d8 <hci_internal_cmd_put+0x3b8>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1b83a:	4808      	ldr	r0, [pc, #32]	; (1b85c <hci_internal_cmd_put+0x23c>)
   1b83c:	f7f1 fbb0 	bl	cfa0 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1b840:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   1b842:	2801      	cmp	r0, #1
   1b844:	f43f af1e 	beq.w	1b684 <hci_internal_cmd_put+0x64>
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1b848:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   1b84a:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1b84c:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1b84e:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1b850:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1b852:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1b854:	71a0      	strb	r0, [r4, #6]
}
   1b856:	e71e      	b.n	1b696 <hci_internal_cmd_put+0x76>
   1b858:	20002db5 	.word	0x20002db5
   1b85c:	20002dbc 	.word	0x20002dbc
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1b860:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   1b864:	3e01      	subs	r6, #1
   1b866:	3003      	adds	r0, #3
	switch (opcode)	{
   1b868:	2e4d      	cmp	r6, #77	; 0x4d
   1b86a:	f63f af07 	bhi.w	1b67c <hci_internal_cmd_put+0x5c>
   1b86e:	a301      	add	r3, pc, #4	; (adr r3, 1b874 <hci_internal_cmd_put+0x254>)
   1b870:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1b874:	0001b9ad 	.word	0x0001b9ad
   1b878:	0001b9b3 	.word	0x0001b9b3
   1b87c:	0001b9bb 	.word	0x0001b9bb
   1b880:	0001b67d 	.word	0x0001b67d
   1b884:	0001b9df 	.word	0x0001b9df
   1b888:	0001b67d 	.word	0x0001b67d
   1b88c:	0001b67d 	.word	0x0001b67d
   1b890:	0001b67d 	.word	0x0001b67d
   1b894:	0001b67d 	.word	0x0001b67d
   1b898:	0001b67d 	.word	0x0001b67d
   1b89c:	0001b9e5 	.word	0x0001b9e5
   1b8a0:	0001b9eb 	.word	0x0001b9eb
   1b8a4:	0001b9f1 	.word	0x0001b9f1
   1b8a8:	0001b9f7 	.word	0x0001b9f7
   1b8ac:	0001b9fd 	.word	0x0001b9fd
   1b8b0:	0001ba07 	.word	0x0001ba07
   1b8b4:	0001ba0d 	.word	0x0001ba0d
   1b8b8:	0001ba13 	.word	0x0001ba13
   1b8bc:	0001ba19 	.word	0x0001ba19
   1b8c0:	0001ba1f 	.word	0x0001ba1f
   1b8c4:	0001ba25 	.word	0x0001ba25
   1b8c8:	0001ba2f 	.word	0x0001ba2f
   1b8cc:	0001ba35 	.word	0x0001ba35
   1b8d0:	0001ba3f 	.word	0x0001ba3f
   1b8d4:	0001ba47 	.word	0x0001ba47
   1b8d8:	0001b67d 	.word	0x0001b67d
   1b8dc:	0001b67d 	.word	0x0001b67d
   1b8e0:	0001ba4d 	.word	0x0001ba4d
   1b8e4:	0001b67d 	.word	0x0001b67d
   1b8e8:	0001b67d 	.word	0x0001b67d
   1b8ec:	0001b67d 	.word	0x0001b67d
   1b8f0:	0001b67d 	.word	0x0001b67d
   1b8f4:	0001b67d 	.word	0x0001b67d
   1b8f8:	0001ba55 	.word	0x0001ba55
   1b8fc:	0001ba5d 	.word	0x0001ba5d
   1b900:	0001ba65 	.word	0x0001ba65
   1b904:	0001b67d 	.word	0x0001b67d
   1b908:	0001b67d 	.word	0x0001b67d
   1b90c:	0001ba6b 	.word	0x0001ba6b
   1b910:	0001ba71 	.word	0x0001ba71
   1b914:	0001ba77 	.word	0x0001ba77
   1b918:	0001ba7d 	.word	0x0001ba7d
   1b91c:	0001b67d 	.word	0x0001b67d
   1b920:	0001b67d 	.word	0x0001b67d
   1b924:	0001ba85 	.word	0x0001ba85
   1b928:	0001ba8b 	.word	0x0001ba8b
   1b92c:	0001ba91 	.word	0x0001ba91
   1b930:	0001ba99 	.word	0x0001ba99
   1b934:	0001baa1 	.word	0x0001baa1
   1b938:	0001baa7 	.word	0x0001baa7
   1b93c:	0001b67d 	.word	0x0001b67d
   1b940:	0001b67d 	.word	0x0001b67d
   1b944:	0001b67d 	.word	0x0001b67d
   1b948:	0001b67d 	.word	0x0001b67d
   1b94c:	0001b67d 	.word	0x0001b67d
   1b950:	0001b67d 	.word	0x0001b67d
   1b954:	0001b67d 	.word	0x0001b67d
   1b958:	0001b67d 	.word	0x0001b67d
   1b95c:	0001b67d 	.word	0x0001b67d
   1b960:	0001b67d 	.word	0x0001b67d
   1b964:	0001b67d 	.word	0x0001b67d
   1b968:	0001b67d 	.word	0x0001b67d
   1b96c:	0001b67d 	.word	0x0001b67d
   1b970:	0001b67d 	.word	0x0001b67d
   1b974:	0001b67d 	.word	0x0001b67d
   1b978:	0001b67d 	.word	0x0001b67d
   1b97c:	0001b67d 	.word	0x0001b67d
   1b980:	0001b67d 	.word	0x0001b67d
   1b984:	0001b67d 	.word	0x0001b67d
   1b988:	0001b67d 	.word	0x0001b67d
   1b98c:	0001b67d 	.word	0x0001b67d
   1b990:	0001b67d 	.word	0x0001b67d
   1b994:	0001b67d 	.word	0x0001b67d
   1b998:	0001b67d 	.word	0x0001b67d
   1b99c:	0001baad 	.word	0x0001baad
   1b9a0:	0001b67d 	.word	0x0001b67d
   1b9a4:	0001b67d 	.word	0x0001b67d
   1b9a8:	0001bab5 	.word	0x0001bab5
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1b9ac:	f7f1 fb2c 	bl	d008 <sdc_hci_cmd_le_set_event_mask>
   1b9b0:	e68d      	b.n	1b6ce <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1b9b2:	489f      	ldr	r0, [pc, #636]	; (1bc30 <hci_internal_cmd_put+0x610>)
   1b9b4:	f7f1 fb0c 	bl	cfd0 <sdc_hci_cmd_le_read_buffer_size>
   1b9b8:	e69e      	b.n	1b6f8 <hci_internal_cmd_put+0xd8>
	memset(features, 0, sizeof(*features));
   1b9ba:	489d      	ldr	r0, [pc, #628]	; (1bc30 <hci_internal_cmd_put+0x610>)
   1b9bc:	2205      	movs	r2, #5
   1b9be:	2100      	movs	r1, #0
   1b9c0:	f005 f9f6 	bl	20db0 <memset>
	features->le_encryption = 1;
   1b9c4:	79e3      	ldrb	r3, [r4, #7]
   1b9c6:	f063 030a 	orn	r3, r3, #10
   1b9ca:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   1b9cc:	7a23      	ldrb	r3, [r4, #8]
   1b9ce:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1b9d2:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1b9d6:	7223      	strb	r3, [r4, #8]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1b9d8:	230c      	movs	r3, #12
	switch (hci_opcode) {
   1b9da:	2000      	movs	r0, #0
   1b9dc:	e734      	b.n	1b848 <hci_internal_cmd_put+0x228>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1b9de:	f7f1 fb1e 	bl	d01e <sdc_hci_cmd_le_set_random_address>
   1b9e2:	e674      	b.n	1b6ce <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   1b9e4:	f7f1 fb21 	bl	d02a <sdc_hci_cmd_le_set_scan_params>
   1b9e8:	e671      	b.n	1b6ce <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   1b9ea:	f7f1 fb1c 	bl	d026 <sdc_hci_cmd_le_set_scan_enable>
   1b9ee:	e66e      	b.n	1b6ce <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_create_conn((void *)cmd_params);
   1b9f0:	f7f1 fae4 	bl	cfbc <sdc_hci_cmd_le_create_conn>
   1b9f4:	e646      	b.n	1b684 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_create_conn_cancel();
   1b9f6:	f7f1 fae3 	bl	cfc0 <sdc_hci_cmd_le_create_conn_cancel>
   1b9fa:	e668      	b.n	1b6ce <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   1b9fc:	488c      	ldr	r0, [pc, #560]	; (1bc30 <hci_internal_cmd_put+0x610>)
   1b9fe:	f7f1 faf7 	bl	cff0 <sdc_hci_cmd_le_read_white_list_size>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   1ba02:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1ba04:	e71d      	b.n	1b842 <hci_internal_cmd_put+0x222>
		return sdc_hci_cmd_le_clear_white_list();
   1ba06:	f7f1 fad5 	bl	cfb4 <sdc_hci_cmd_le_clear_white_list>
   1ba0a:	e660      	b.n	1b6ce <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   1ba0c:	f7f1 face 	bl	cfac <sdc_hci_cmd_le_add_device_to_white_list>
   1ba10:	e65d      	b.n	1b6ce <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   1ba12:	f7f1 faf1 	bl	cff8 <sdc_hci_cmd_le_remove_device_from_white_list>
   1ba16:	e65a      	b.n	1b6ce <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_conn_update((void *)cmd_params);
   1ba18:	f7f1 face 	bl	cfb8 <sdc_hci_cmd_le_conn_update>
   1ba1c:	e632      	b.n	1b684 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_set_host_channel_classification((void *)cmd_params);
   1ba1e:	f7f1 faf8 	bl	d012 <sdc_hci_cmd_le_set_host_channel_classification>
   1ba22:	e654      	b.n	1b6ce <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1ba24:	4982      	ldr	r1, [pc, #520]	; (1bc30 <hci_internal_cmd_put+0x610>)
   1ba26:	f7f1 fad5 	bl	cfd4 <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1ba2a:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1ba2c:	e709      	b.n	1b842 <hci_internal_cmd_put+0x222>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1ba2e:	f7f1 fad7 	bl	cfe0 <sdc_hci_cmd_le_read_remote_features>
   1ba32:	e627      	b.n	1b684 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1ba34:	497e      	ldr	r1, [pc, #504]	; (1bc30 <hci_internal_cmd_put+0x610>)
   1ba36:	f7f1 fac7 	bl	cfc8 <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1ba3a:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1ba3c:	e701      	b.n	1b842 <hci_internal_cmd_put+0x222>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1ba3e:	487c      	ldr	r0, [pc, #496]	; (1bc30 <hci_internal_cmd_put+0x610>)
   1ba40:	f7f1 fac4 	bl	cfcc <sdc_hci_cmd_le_rand>
   1ba44:	e67f      	b.n	1b746 <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_enable_encryption((void *)cmd_params);
   1ba46:	f7f1 fabd 	bl	cfc4 <sdc_hci_cmd_le_enable_encryption>
   1ba4a:	e61b      	b.n	1b684 <hci_internal_cmd_put+0x64>
	*buf = states1;
   1ba4c:	2370      	movs	r3, #112	; 0x70
   1ba4e:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1ba50:	2340      	movs	r3, #64	; 0x40
   1ba52:	e6f0      	b.n	1b836 <hci_internal_cmd_put+0x216>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1ba54:	4976      	ldr	r1, [pc, #472]	; (1bc30 <hci_internal_cmd_put+0x610>)
   1ba56:	f7f1 fad3 	bl	d000 <sdc_hci_cmd_le_set_data_length>
   1ba5a:	e645      	b.n	1b6e8 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1ba5c:	4874      	ldr	r0, [pc, #464]	; (1bc30 <hci_internal_cmd_put+0x610>)
   1ba5e:	f7f1 fac3 	bl	cfe8 <sdc_hci_cmd_le_read_suggested_default_data_length>
   1ba62:	e651      	b.n	1b708 <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1ba64:	f7f1 fae3 	bl	d02e <sdc_hci_cmd_le_write_suggested_default_data_length>
   1ba68:	e631      	b.n	1b6ce <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   1ba6a:	f7f1 fa9d 	bl	cfa8 <sdc_hci_cmd_le_add_device_to_resolving_list>
   1ba6e:	e62e      	b.n	1b6ce <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   1ba70:	f7f1 fac0 	bl	cff4 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   1ba74:	e62b      	b.n	1b6ce <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_clear_resolving_list();
   1ba76:	f7f1 fa9b 	bl	cfb0 <sdc_hci_cmd_le_clear_resolving_list>
   1ba7a:	e628      	b.n	1b6ce <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1ba7c:	486c      	ldr	r0, [pc, #432]	; (1bc30 <hci_internal_cmd_put+0x610>)
   1ba7e:	f7f1 fab1 	bl	cfe4 <sdc_hci_cmd_le_read_resolving_list_size>
   1ba82:	e7be      	b.n	1ba02 <hci_internal_cmd_put+0x3e2>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   1ba84:	f7f1 faba 	bl	cffc <sdc_hci_cmd_le_set_address_resolution_enable>
   1ba88:	e621      	b.n	1b6ce <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   1ba8a:	f7f1 faca 	bl	d022 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   1ba8e:	e61e      	b.n	1b6ce <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1ba90:	4867      	ldr	r0, [pc, #412]	; (1bc30 <hci_internal_cmd_put+0x610>)
   1ba92:	f7f1 faa1 	bl	cfd8 <sdc_hci_cmd_le_read_max_data_length>
   1ba96:	e656      	b.n	1b746 <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1ba98:	4965      	ldr	r1, [pc, #404]	; (1bc30 <hci_internal_cmd_put+0x610>)
   1ba9a:	f7f1 fa9f 	bl	cfdc <sdc_hci_cmd_le_read_phy>
   1ba9e:	e633      	b.n	1b708 <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1baa0:	f7f1 fab0 	bl	d004 <sdc_hci_cmd_le_set_default_phy>
   1baa4:	e613      	b.n	1b6ce <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1baa6:	f7f1 fab6 	bl	d016 <sdc_hci_cmd_le_set_phy>
   1baaa:	e5eb      	b.n	1b684 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1baac:	4860      	ldr	r0, [pc, #384]	; (1bc30 <hci_internal_cmd_put+0x610>)
   1baae:	f7f1 fa9d 	bl	cfec <sdc_hci_cmd_le_read_transmit_power>
   1bab2:	e619      	b.n	1b6e8 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   1bab4:	f7f1 fab1 	bl	d01a <sdc_hci_cmd_le_set_privacy_mode>
   1bab8:	e609      	b.n	1b6ce <hci_internal_cmd_put+0xae>
	switch (opcode)	{
   1baba:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   1babe:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1bac0:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1bac4:	d820      	bhi.n	1bb08 <hci_internal_cmd_put+0x4e8>
   1bac6:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   1baca:	f43f add7 	beq.w	1b67c <hci_internal_cmd_put+0x5c>
   1bace:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   1bad2:	3b01      	subs	r3, #1
   1bad4:	2b09      	cmp	r3, #9
   1bad6:	f63f add1 	bhi.w	1b67c <hci_internal_cmd_put+0x5c>
   1bada:	a201      	add	r2, pc, #4	; (adr r2, 1bae0 <hci_internal_cmd_put+0x4c0>)
   1badc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1bae0:	0001bb29 	.word	0x0001bb29
   1bae4:	0001bb57 	.word	0x0001bb57
   1bae8:	0001b67d 	.word	0x0001b67d
   1baec:	0001b67d 	.word	0x0001b67d
   1baf0:	0001b67d 	.word	0x0001b67d
   1baf4:	0001bb9b 	.word	0x0001bb9b
   1baf8:	0001b67d 	.word	0x0001b67d
   1bafc:	0001b67d 	.word	0x0001b67d
   1bb00:	0001bb87 	.word	0x0001bb87
   1bb04:	0001bb91 	.word	0x0001bb91
   1bb08:	f505 7340 	add.w	r3, r5, #768	; 0x300
   1bb0c:	b29b      	uxth	r3, r3
   1bb0e:	2b05      	cmp	r3, #5
   1bb10:	f63f adb4 	bhi.w	1b67c <hci_internal_cmd_put+0x5c>
   1bb14:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   1bb18:	2b05      	cmp	r3, #5
   1bb1a:	f63f adaf 	bhi.w	1b67c <hci_internal_cmd_put+0x5c>
   1bb1e:	e8df f003 	tbb	[pc, r3]
   1bb22:	4c40      	.short	0x4c40
   1bb24:	5855524f 	.word	0x5855524f
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1bb28:	4841      	ldr	r0, [pc, #260]	; (1bc30 <hci_internal_cmd_put+0x610>)
   1bb2a:	f7e8 facf 	bl	40cc <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1bb2e:	2310      	movs	r3, #16
	switch (hci_opcode) {
   1bb30:	f242 0219 	movw	r2, #8217	; 0x2019
   1bb34:	4296      	cmp	r6, r2
   1bb36:	dc5c      	bgt.n	1bbf2 <hci_internal_cmd_put+0x5d2>
   1bb38:	f242 020c 	movw	r2, #8204	; 0x200c
   1bb3c:	4296      	cmp	r6, r2
   1bb3e:	dc4b      	bgt.n	1bbd8 <hci_internal_cmd_put+0x5b8>
   1bb40:	f240 4206 	movw	r2, #1030	; 0x406
   1bb44:	4296      	cmp	r6, r2
   1bb46:	f43f ad9d 	beq.w	1b684 <hci_internal_cmd_put+0x64>
   1bb4a:	f240 421d 	movw	r2, #1053	; 0x41d
   1bb4e:	4296      	cmp	r6, r2
   1bb50:	f43f ad98 	beq.w	1b684 <hci_internal_cmd_put+0x64>
   1bb54:	e675      	b.n	1b842 <hci_internal_cmd_put+0x222>
	memset(cmds, 0, sizeof(*cmds));
   1bb56:	4836      	ldr	r0, [pc, #216]	; (1bc30 <hci_internal_cmd_put+0x610>)
   1bb58:	2202      	movs	r2, #2
   1bb5a:	2100      	movs	r1, #0
   1bb5c:	f005 f928 	bl	20db0 <memset>
	cmds->read_version_info = 1;
   1bb60:	79e3      	ldrb	r3, [r4, #7]
   1bb62:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1bb66:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1bb6a:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1bb6c:	7a23      	ldrb	r3, [r4, #8]
   1bb6e:	f023 0307 	bic.w	r3, r3, #7
   1bb72:	f043 0307 	orr.w	r3, r3, #7
   1bb76:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   1bb78:	f242 0319 	movw	r3, #8217	; 0x2019
   1bb7c:	429e      	cmp	r6, r3
   1bb7e:	dd47      	ble.n	1bc10 <hci_internal_cmd_put+0x5f0>
   1bb80:	f242 0332 	movw	r3, #8242	; 0x2032
   1bb84:	e04f      	b.n	1bc26 <hci_internal_cmd_put+0x606>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1bb86:	482a      	ldr	r0, [pc, #168]	; (1bc30 <hci_internal_cmd_put+0x610>)
   1bb88:	f7f1 f9b9 	bl	cefe <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1bb8c:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1bb8e:	e7cf      	b.n	1bb30 <hci_internal_cmd_put+0x510>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1bb90:	4827      	ldr	r0, [pc, #156]	; (1bc30 <hci_internal_cmd_put+0x610>)
   1bb92:	f7f1 f967 	bl	ce64 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   1bb96:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1bb98:	e7ca      	b.n	1bb30 <hci_internal_cmd_put+0x510>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1bb9a:	f7f1 f9ff 	bl	cf9c <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1bb9e:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1bba0:	e7c6      	b.n	1bb30 <hci_internal_cmd_put+0x510>
	memset(cmds, 0, sizeof(*cmds));
   1bba2:	4823      	ldr	r0, [pc, #140]	; (1bc30 <hci_internal_cmd_put+0x610>)
   1bba4:	2201      	movs	r2, #1
   1bba6:	2100      	movs	r1, #0
   1bba8:	f005 f902 	bl	20db0 <memset>
	cmds->read_supported_vs_commands = 1;
   1bbac:	79e3      	ldrb	r3, [r4, #7]
   1bbae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1bbb2:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1bbb6:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   1bbb8:	e631      	b.n	1b81e <hci_internal_cmd_put+0x1fe>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1bbba:	f7f1 f94c 	bl	ce56 <sdc_hci_cmd_vs_llpm_mode_set>
   1bbbe:	e586      	b.n	1b6ce <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1bbc0:	f7f1 f91d 	bl	cdfe <sdc_hci_cmd_vs_conn_update>
   1bbc4:	e583      	b.n	1b6ce <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1bbc6:	f7f1 f912 	bl	cdee <sdc_hci_cmd_vs_conn_event_extend>
   1bbca:	e580      	b.n	1b6ce <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1bbcc:	f7f1 f945 	bl	ce5a <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1bbd0:	e57d      	b.n	1b6ce <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1bbd2:	f7f1 f93e 	bl	ce52 <sdc_hci_cmd_vs_event_length_set>
   1bbd6:	e57a      	b.n	1b6ce <hci_internal_cmd_put+0xae>
   1bbd8:	f5a5 5200 	sub.w	r2, r5, #8192	; 0x2000
   1bbdc:	3a0d      	subs	r2, #13
   1bbde:	2101      	movs	r1, #1
   1bbe0:	b292      	uxth	r2, r2
   1bbe2:	fa01 f202 	lsl.w	r2, r1, r2
   1bbe6:	f241 2141 	movw	r1, #4673	; 0x1241
   1bbea:	420a      	tst	r2, r1
   1bbec:	f43f ae29 	beq.w	1b842 <hci_internal_cmd_put+0x222>
   1bbf0:	e548      	b.n	1b684 <hci_internal_cmd_put+0x64>
	switch (hci_opcode) {
   1bbf2:	f242 0232 	movw	r2, #8242	; 0x2032
   1bbf6:	4296      	cmp	r6, r2
   1bbf8:	f43f ad44 	beq.w	1b684 <hci_internal_cmd_put+0x64>
   1bbfc:	f5a5 5201 	sub.w	r2, r5, #8256	; 0x2040
   1bc00:	3a03      	subs	r2, #3
   1bc02:	2a01      	cmp	r2, #1
   1bc04:	f67f ad3e 	bls.w	1b684 <hci_internal_cmd_put+0x64>
   1bc08:	e61b      	b.n	1b842 <hci_internal_cmd_put+0x222>
		return -NRF_EPERM;
   1bc0a:	f04f 30ff 	mov.w	r0, #4294967295
   1bc0e:	e545      	b.n	1b69c <hci_internal_cmd_put+0x7c>
	switch (hci_opcode) {
   1bc10:	f242 030c 	movw	r3, #8204	; 0x200c
   1bc14:	429e      	cmp	r6, r3
   1bc16:	f73f ae02 	bgt.w	1b81e <hci_internal_cmd_put+0x1fe>
   1bc1a:	f240 4306 	movw	r3, #1030	; 0x406
   1bc1e:	429e      	cmp	r6, r3
   1bc20:	d004      	beq.n	1bc2c <hci_internal_cmd_put+0x60c>
   1bc22:	f240 431d 	movw	r3, #1053	; 0x41d
   1bc26:	429e      	cmp	r6, r3
   1bc28:	f47f adf9 	bne.w	1b81e <hci_internal_cmd_put+0x1fe>
   1bc2c:	2000      	movs	r0, #0
   1bc2e:	e529      	b.n	1b684 <hci_internal_cmd_put+0x64>
   1bc30:	20002dbc 	.word	0x20002dbc

0001bc34 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   1bc34:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1bc36:	4c07      	ldr	r4, [pc, #28]	; (1bc54 <hci_internal_evt_get+0x20>)
   1bc38:	7823      	ldrb	r3, [r4, #0]
   1bc3a:	b13b      	cbz	r3, 1bc4c <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1bc3c:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   1bc3e:	1c61      	adds	r1, r4, #1
   1bc40:	3202      	adds	r2, #2
   1bc42:	f005 f8aa 	bl	20d9a <memcpy>
		cmd_complete_or_status.occurred = false;
   1bc46:	2000      	movs	r0, #0
   1bc48:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   1bc4a:	bd10      	pop	{r4, pc}
   1bc4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   1bc50:	f7f1 b8b0 	b.w	cdb4 <sdc_hci_evt_get>
   1bc54:	20002db5 	.word	0x20002db5

0001bc58 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   1bc58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   1bc5c:	4c0b      	ldr	r4, [pc, #44]	; (1bc8c <bt_rand+0x34>)
   1bc5e:	6823      	ldr	r3, [r4, #0]
{
   1bc60:	4605      	mov	r5, r0
   1bc62:	460e      	mov	r6, r1
   1bc64:	4627      	mov	r7, r4
	if (unlikely(!dev)) {
   1bc66:	b13b      	cbz	r3, 1bc78 <bt_rand+0x20>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1bc68:	6838      	ldr	r0, [r7, #0]
	return api->get_entropy(dev, buffer, length);
   1bc6a:	6883      	ldr	r3, [r0, #8]
   1bc6c:	b2b2      	uxth	r2, r6
   1bc6e:	4629      	mov	r1, r5
   1bc70:	681b      	ldr	r3, [r3, #0]
}
   1bc72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1bc76:	4718      	bx	r3
   1bc78:	4805      	ldr	r0, [pc, #20]	; (1bc90 <bt_rand+0x38>)
   1bc7a:	f000 fe6b 	bl	1c954 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1bc7e:	6020      	str	r0, [r4, #0]
		if (!dev) {
   1bc80:	2800      	cmp	r0, #0
   1bc82:	d1f1      	bne.n	1bc68 <bt_rand+0x10>
}
   1bc84:	f06f 0012 	mvn.w	r0, #18
   1bc88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bc8c:	200026ec 	.word	0x200026ec
   1bc90:	00026c7c 	.word	0x00026c7c

0001bc94 <m_assert_handler>:
	mpsl_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_MPSL_ASSERT_HANDLER) */
static void m_assert_handler(const char *const file, const uint32_t line)
{
   1bc94:	b538      	push	{r3, r4, r5, lr}
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   1bc96:	4b0d      	ldr	r3, [pc, #52]	; (1bccc <m_assert_handler+0x38>)
   1bc98:	681a      	ldr	r2, [r3, #0]
   1bc9a:	0752      	lsls	r2, r2, #29
{
   1bc9c:	460d      	mov	r5, r1
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   1bc9e:	d00d      	beq.n	1bcbc <m_assert_handler+0x28>
   1bca0:	4c0b      	ldr	r4, [pc, #44]	; (1bcd0 <m_assert_handler+0x3c>)
   1bca2:	1b1c      	subs	r4, r3, r4
   1bca4:	08a4      	lsrs	r4, r4, #2
   1bca6:	f7f4 fe6b 	bl	10980 <z_log_strdup>
   1bcaa:	01a4      	lsls	r4, r4, #6
   1bcac:	f044 0401 	orr.w	r4, r4, #1
   1bcb0:	4601      	mov	r1, r0
   1bcb2:	4623      	mov	r3, r4
   1bcb4:	4807      	ldr	r0, [pc, #28]	; (1bcd4 <m_assert_handler+0x40>)
   1bcb6:	462a      	mov	r2, r5
   1bcb8:	f003 f95e 	bl	1ef78 <log_2>
	k_oops();
   1bcbc:	4040      	eors	r0, r0
   1bcbe:	f380 8811 	msr	BASEPRI, r0
   1bcc2:	f04f 0003 	mov.w	r0, #3
   1bcc6:	df02      	svc	2
}
   1bcc8:	bd38      	pop	{r3, r4, r5, pc}
   1bcca:	bf00      	nop
   1bccc:	20000688 	.word	0x20000688
   1bcd0:	20000654 	.word	0x20000654
   1bcd4:	00026dc8 	.word	0x00026dc8

0001bcd8 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1bcd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1bcda:	2332      	movs	r3, #50	; 0x32
   1bcdc:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1bce0:	4a10      	ldr	r2, [pc, #64]	; (1bd24 <mpsl_lib_init+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   1bce2:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1bce4:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1bce6:	2119      	movs	r1, #25
   1bce8:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1bcea:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1bcee:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1bcf2:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1bcf6:	f7e7 fd75 	bl	37e4 <mpsl_init>
	if (err) {
   1bcfa:	4604      	mov	r4, r0
   1bcfc:	b970      	cbnz	r0, 1bd1c <mpsl_lib_init+0x44>
	if (err) {
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1bcfe:	4601      	mov	r1, r0
   1bd00:	462a      	mov	r2, r5
   1bd02:	2008      	movs	r0, #8
   1bd04:	f7f8 f980 	bl	14008 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1bd08:	462a      	mov	r2, r5
   1bd0a:	4621      	mov	r1, r4
   1bd0c:	200b      	movs	r0, #11
   1bd0e:	f7f8 f97b 	bl	14008 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1bd12:	462a      	mov	r2, r5
   1bd14:	4621      	mov	r1, r4
   1bd16:	4628      	mov	r0, r5
   1bd18:	f7f8 f976 	bl	14008 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   1bd1c:	4620      	mov	r0, r4
   1bd1e:	b003      	add	sp, #12
   1bd20:	bd30      	pop	{r4, r5, pc}
   1bd22:	bf00      	nop
   1bd24:	0001bc95 	.word	0x0001bc95

0001bd28 <mpsl_low_prio_irq_handler>:
   1bd28:	4801      	ldr	r0, [pc, #4]	; (1bd30 <mpsl_low_prio_irq_handler+0x8>)
   1bd2a:	f001 bb2f 	b.w	1d38c <z_impl_k_sem_give>
   1bd2e:	bf00      	nop
   1bd30:	200007ac 	.word	0x200007ac

0001bd34 <signal_thread>:
{
   1bd34:	b510      	push	{r4, lr}
	return z_impl_k_sem_take(sem, timeout);
   1bd36:	4c09      	ldr	r4, [pc, #36]	; (1bd5c <signal_thread+0x28>)
   1bd38:	f04f 32ff 	mov.w	r2, #4294967295
   1bd3c:	f04f 33ff 	mov.w	r3, #4294967295
   1bd40:	4620      	mov	r0, r4
   1bd42:	f001 fb49 	bl	1d3d8 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   1bd46:	f04f 31ff 	mov.w	r1, #4294967295
   1bd4a:	f04f 30ff 	mov.w	r0, #4294967295
   1bd4e:	f7ff fa23 	bl	1b198 <multithreading_lock_acquire>
		mpsl_low_priority_process();
   1bd52:	f7f0 fb78 	bl	c446 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   1bd56:	f7ff fa27 	bl	1b1a8 <multithreading_lock_release>
	while (true) {
   1bd5a:	e7ed      	b.n	1bd38 <signal_thread+0x4>
   1bd5c:	200007ac 	.word	0x200007ac

0001bd60 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   1bd60:	b530      	push	{r4, r5, lr}
   1bd62:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1bd64:	4d0f      	ldr	r5, [pc, #60]	; (1bda4 <mpsl_signal_thread_init+0x44>)
   1bd66:	4910      	ldr	r1, [pc, #64]	; (1bda8 <mpsl_signal_thread_init+0x48>)
   1bd68:	2200      	movs	r2, #0
   1bd6a:	2300      	movs	r3, #0
   1bd6c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1bd70:	2400      	movs	r4, #0
   1bd72:	f06f 0309 	mvn.w	r3, #9
   1bd76:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1bd7a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1bd7e:	4b0b      	ldr	r3, [pc, #44]	; (1bdac <mpsl_signal_thread_init+0x4c>)
   1bd80:	9400      	str	r4, [sp, #0]
   1bd82:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1bd86:	4628      	mov	r0, r5
   1bd88:	f001 f8aa 	bl	1cee0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1bd8c:	4908      	ldr	r1, [pc, #32]	; (1bdb0 <mpsl_signal_thread_init+0x50>)
   1bd8e:	4628      	mov	r0, r5
   1bd90:	f000 fff4 	bl	1cd7c <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1bd94:	4622      	mov	r2, r4
   1bd96:	2104      	movs	r1, #4
   1bd98:	2019      	movs	r0, #25
   1bd9a:	f7f8 f935 	bl	14008 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1bd9e:	4620      	mov	r0, r4
   1bda0:	b009      	add	sp, #36	; 0x24
   1bda2:	bd30      	pop	{r4, r5, pc}
   1bda4:	20001d48 	.word	0x20001d48
   1bda8:	20004bc0 	.word	0x20004bc0
   1bdac:	0001bd35 	.word	0x0001bd35
   1bdb0:	00026ddc 	.word	0x00026ddc

0001bdb4 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1bdb4:	4b01      	ldr	r3, [pc, #4]	; (1bdbc <mpsl_hfclk_callback+0x8>)
   1bdb6:	2000      	movs	r0, #0
   1bdb8:	681b      	ldr	r3, [r3, #0]
   1bdba:	4718      	bx	r3
   1bdbc:	200026f0 	.word	0x200026f0

0001bdc0 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   1bdc0:	b120      	cbz	r0, 1bdcc <nrfx_clock_start+0xc>
   1bdc2:	2801      	cmp	r0, #1
   1bdc4:	d106      	bne.n	1bdd4 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1bdc6:	4804      	ldr	r0, [pc, #16]	; (1bdd8 <nrfx_clock_start+0x18>)
   1bdc8:	f7e7 bb76 	b.w	34b8 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1bdcc:	4b03      	ldr	r3, [pc, #12]	; (1bddc <nrfx_clock_start+0x1c>)
   1bdce:	2001      	movs	r0, #1
   1bdd0:	681b      	ldr	r3, [r3, #0]
   1bdd2:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1bdd4:	4770      	bx	lr
   1bdd6:	bf00      	nop
   1bdd8:	0001bdb5 	.word	0x0001bdb5
   1bddc:	200026f0 	.word	0x200026f0

0001bde0 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1bde0:	4b01      	ldr	r3, [pc, #4]	; (1bde8 <nrfx_clock_init+0x8>)
   1bde2:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1bde4:	4801      	ldr	r0, [pc, #4]	; (1bdec <nrfx_clock_init+0xc>)
   1bde6:	4770      	bx	lr
   1bde8:	200026f0 	.word	0x200026f0
   1bdec:	0bad0000 	.word	0x0bad0000

0001bdf0 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1bdf0:	4b04      	ldr	r3, [pc, #16]	; (1be04 <nrf52_errata_108+0x14>)
   1bdf2:	6818      	ldr	r0, [r3, #0]
   1bdf4:	1c42      	adds	r2, r0, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1bdf6:	bf04      	itt	eq
   1bdf8:	4b03      	ldreq	r3, [pc, #12]	; (1be08 <nrf52_errata_108+0x18>)
   1bdfa:	7818      	ldrbeq	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
   1bdfc:	1f83      	subs	r3, r0, #6
   1bdfe:	4258      	negs	r0, r3
   1be00:	4158      	adcs	r0, r3
   1be02:	4770      	bx	lr
   1be04:	10000130 	.word	0x10000130
   1be08:	f0000fe0 	.word	0xf0000fe0

0001be0c <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1be0c:	4b07      	ldr	r3, [pc, #28]	; (1be2c <nrf52_errata_16+0x20>)
   1be0e:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1be10:	2b06      	cmp	r3, #6
   1be12:	d109      	bne.n	1be28 <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1be14:	4b06      	ldr	r3, [pc, #24]	; (1be30 <nrf52_errata_16+0x24>)
   1be16:	681b      	ldr	r3, [r3, #0]
   1be18:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1be1c:	3b03      	subs	r3, #3
   1be1e:	2b04      	cmp	r3, #4
   1be20:	d802      	bhi.n	1be28 <nrf52_errata_16+0x1c>
   1be22:	4a04      	ldr	r2, [pc, #16]	; (1be34 <nrf52_errata_16+0x28>)
   1be24:	5cd0      	ldrb	r0, [r2, r3]
   1be26:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1be28:	2000      	movs	r0, #0
    #endif
}
   1be2a:	4770      	bx	lr
   1be2c:	f0000fe0 	.word	0xf0000fe0
   1be30:	f0000fe8 	.word	0xf0000fe8
   1be34:	00026e01 	.word	0x00026e01

0001be38 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1be38:	4a02      	ldr	r2, [pc, #8]	; (1be44 <nvmc_wait+0xc>)
   1be3a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1be3e:	2b00      	cmp	r3, #0
   1be40:	d0fb      	beq.n	1be3a <nvmc_wait+0x2>
}
   1be42:	4770      	bx	lr
   1be44:	4001e000 	.word	0x4001e000

0001be48 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1be48:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   1be4a:	f7ff ffd1 	bl	1bdf0 <nrf52_errata_108>
   1be4e:	b128      	cbz	r0, 1be5c <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   1be50:	4b81      	ldr	r3, [pc, #516]	; (1c058 <SystemInit+0x210>)
   1be52:	4a82      	ldr	r2, [pc, #520]	; (1c05c <SystemInit+0x214>)
   1be54:	681b      	ldr	r3, [r3, #0]
   1be56:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1be5a:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   1be5c:	f7ff ffd6 	bl	1be0c <nrf52_errata_16>
   1be60:	b110      	cbz	r0, 1be68 <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   1be62:	4b7f      	ldr	r3, [pc, #508]	; (1c060 <SystemInit+0x218>)
   1be64:	4a7f      	ldr	r2, [pc, #508]	; (1c064 <SystemInit+0x21c>)
   1be66:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   1be68:	f7ff ffc2 	bl	1bdf0 <nrf52_errata_108>
   1be6c:	b128      	cbz	r0, 1be7a <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   1be6e:	4b7e      	ldr	r3, [pc, #504]	; (1c068 <SystemInit+0x220>)
   1be70:	4a7e      	ldr	r2, [pc, #504]	; (1c06c <SystemInit+0x224>)
   1be72:	681b      	ldr	r3, [r3, #0]
   1be74:	f3c3 3342 	ubfx	r3, r3, #13, #3
   1be78:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   1be7a:	f7ff ffc7 	bl	1be0c <nrf52_errata_16>
   1be7e:	b120      	cbz	r0, 1be8a <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   1be80:	4a7b      	ldr	r2, [pc, #492]	; (1c070 <SystemInit+0x228>)
   1be82:	68d3      	ldr	r3, [r2, #12]
   1be84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1be88:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1be8a:	f7ff ffb1 	bl	1bdf0 <nrf52_errata_108>
   1be8e:	b140      	cbz	r0, 1bea2 <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1be90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1be94:	2200      	movs	r2, #0
   1be96:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1be9a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1be9e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   1bea2:	f7ff ffb3 	bl	1be0c <nrf52_errata_16>
   1bea6:	b110      	cbz	r0, 1beae <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   1bea8:	4b72      	ldr	r3, [pc, #456]	; (1c074 <SystemInit+0x22c>)
   1beaa:	2203      	movs	r2, #3
   1beac:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   1beae:	f7ff ffad 	bl	1be0c <nrf52_errata_16>
   1beb2:	b140      	cbz	r0, 1bec6 <SystemInit+0x7e>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   1beb4:	4b70      	ldr	r3, [pc, #448]	; (1c078 <SystemInit+0x230>)
   1beb6:	2205      	movs	r2, #5
   1beb8:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   1beba:	2201      	movs	r2, #1
   1bebc:	679a      	str	r2, [r3, #120]	; 0x78
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   1bebe:	2200      	movs	r2, #0
   1bec0:	609a      	str	r2, [r3, #8]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   1bec2:	223f      	movs	r2, #63	; 0x3f
   1bec4:	605a      	str	r2, [r3, #4]
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1bec6:	4b6d      	ldr	r3, [pc, #436]	; (1c07c <SystemInit+0x234>)
   1bec8:	681a      	ldr	r2, [r3, #0]
   1beca:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1becc:	bf0b      	itete	eq
   1bece:	4b6c      	ldreq	r3, [pc, #432]	; (1c080 <SystemInit+0x238>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   1bed0:	4b6c      	ldrne	r3, [pc, #432]	; (1c084 <SystemInit+0x23c>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1bed2:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
   1bed4:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1bed6:	bf02      	ittt	eq
   1bed8:	3308      	addeq	r3, #8
   1beda:	681b      	ldreq	r3, [r3, #0]
   1bedc:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1bee0:	2a06      	cmp	r2, #6
   1bee2:	d14d      	bne.n	1bf80 <SystemInit+0x138>
            {
                switch(var2)
   1bee4:	3b03      	subs	r3, #3
   1bee6:	2b04      	cmp	r3, #4
   1bee8:	d803      	bhi.n	1bef2 <SystemInit+0xaa>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1beea:	4a67      	ldr	r2, [pc, #412]	; (1c088 <SystemInit+0x240>)
   1beec:	5cd3      	ldrb	r3, [r2, r3]
   1beee:	2b00      	cmp	r3, #0
   1bef0:	d046      	beq.n	1bf80 <SystemInit+0x138>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1bef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1bef6:	4b65      	ldr	r3, [pc, #404]	; (1c08c <SystemInit+0x244>)
   1bef8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1befc:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1bf00:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1bf04:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1bf08:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1bf0c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1bf10:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1bf14:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1bf18:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1bf1c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1bf20:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1bf24:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1bf28:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1bf2c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1bf30:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1bf34:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1bf38:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1bf3c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1bf40:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1bf44:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1bf48:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1bf4c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1bf50:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1bf54:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1bf58:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1bf5c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1bf60:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1bf64:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1bf68:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1bf6c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1bf70:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1bf74:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1bf78:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1bf7c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   1bf80:	f7ff ff36 	bl	1bdf0 <nrf52_errata_108>
   1bf84:	b128      	cbz	r0, 1bf92 <SystemInit+0x14a>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   1bf86:	4b42      	ldr	r3, [pc, #264]	; (1c090 <SystemInit+0x248>)
   1bf88:	4a42      	ldr	r2, [pc, #264]	; (1c094 <SystemInit+0x24c>)
   1bf8a:	681b      	ldr	r3, [r3, #0]
   1bf8c:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   1bf90:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1bf92:	f7ff ff2d 	bl	1bdf0 <nrf52_errata_108>
   1bf96:	b148      	cbz	r0, 1bfac <SystemInit+0x164>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1bf98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1bf9c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1bfa0:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1bfa2:	bf44      	itt	mi
   1bfa4:	f06f 0201 	mvnmi.w	r2, #1
   1bfa8:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1bfac:	4b33      	ldr	r3, [pc, #204]	; (1c07c <SystemInit+0x234>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1bfae:	681b      	ldr	r3, [r3, #0]
   1bfb0:	2b06      	cmp	r3, #6
   1bfb2:	d120      	bne.n	1bff6 <SystemInit+0x1ae>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1bfb4:	4b33      	ldr	r3, [pc, #204]	; (1c084 <SystemInit+0x23c>)
   1bfb6:	681b      	ldr	r3, [r3, #0]
   1bfb8:	3b03      	subs	r3, #3
   1bfba:	2b04      	cmp	r3, #4
   1bfbc:	d802      	bhi.n	1bfc4 <SystemInit+0x17c>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   1bfbe:	4a36      	ldr	r2, [pc, #216]	; (1c098 <SystemInit+0x250>)
   1bfc0:	5cd3      	ldrb	r3, [r2, r3]
   1bfc2:	b143      	cbz	r3, 1bfd6 <SystemInit+0x18e>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   1bfc4:	4a35      	ldr	r2, [pc, #212]	; (1c09c <SystemInit+0x254>)
   1bfc6:	6813      	ldr	r3, [r2, #0]
   1bfc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1bfcc:	6013      	str	r3, [r2, #0]
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1bfce:	4b2b      	ldr	r3, [pc, #172]	; (1c07c <SystemInit+0x234>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1bfd0:	681b      	ldr	r3, [r3, #0]
   1bfd2:	2b06      	cmp	r3, #6
   1bfd4:	d10f      	bne.n	1bff6 <SystemInit+0x1ae>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1bfd6:	4b2b      	ldr	r3, [pc, #172]	; (1c084 <SystemInit+0x23c>)
   1bfd8:	681b      	ldr	r3, [r3, #0]
   1bfda:	3b03      	subs	r3, #3
   1bfdc:	2b04      	cmp	r3, #4
   1bfde:	d802      	bhi.n	1bfe6 <SystemInit+0x19e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1bfe0:	4a2f      	ldr	r2, [pc, #188]	; (1c0a0 <SystemInit+0x258>)
   1bfe2:	5cd3      	ldrb	r3, [r2, r3]
   1bfe4:	b13b      	cbz	r3, 1bff6 <SystemInit+0x1ae>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1bfe6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1bfea:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1bfee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1bff2:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1bff6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1bffa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1bffe:	2a00      	cmp	r2, #0
   1c000:	db03      	blt.n	1c00a <SystemInit+0x1c2>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1c002:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1c006:	2b00      	cmp	r3, #0
   1c008:	da22      	bge.n	1c050 <SystemInit+0x208>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1c00a:	4926      	ldr	r1, [pc, #152]	; (1c0a4 <SystemInit+0x25c>)
   1c00c:	2301      	movs	r3, #1
   1c00e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1c012:	f7ff ff11 	bl	1be38 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1c016:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   1c01a:	2415      	movs	r4, #21
   1c01c:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1c020:	f7ff ff0a 	bl	1be38 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1c024:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1c028:	f7ff ff06 	bl	1be38 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1c02c:	2300      	movs	r3, #0
   1c02e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1c032:	f7ff ff01 	bl	1be38 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   1c036:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1c03a:	491b      	ldr	r1, [pc, #108]	; (1c0a8 <SystemInit+0x260>)
   1c03c:	4b1b      	ldr	r3, [pc, #108]	; (1c0ac <SystemInit+0x264>)
   1c03e:	68ca      	ldr	r2, [r1, #12]
   1c040:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1c044:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1c046:	60cb      	str	r3, [r1, #12]
   1c048:	f3bf 8f4f 	dsb	sy
    __NOP();
   1c04c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1c04e:	e7fd      	b.n	1c04c <SystemInit+0x204>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1c050:	4b17      	ldr	r3, [pc, #92]	; (1c0b0 <SystemInit+0x268>)
   1c052:	4a18      	ldr	r2, [pc, #96]	; (1c0b4 <SystemInit+0x26c>)
   1c054:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1c056:	bd10      	pop	{r4, pc}
   1c058:	10000324 	.word	0x10000324
   1c05c:	40013540 	.word	0x40013540
   1c060:	4007c074 	.word	0x4007c074
   1c064:	baadf00d 	.word	0xbaadf00d
   1c068:	10000244 	.word	0x10000244
   1c06c:	4000053c 	.word	0x4000053c
   1c070:	e000edf0 	.word	0xe000edf0
   1c074:	400005a0 	.word	0x400005a0
   1c078:	40005610 	.word	0x40005610
   1c07c:	10000130 	.word	0x10000130
   1c080:	f0000fe0 	.word	0xf0000fe0
   1c084:	10000134 	.word	0x10000134
   1c088:	00026df2 	.word	0x00026df2
   1c08c:	4000c000 	.word	0x4000c000
   1c090:	10000258 	.word	0x10000258
   1c094:	40000ee4 	.word	0x40000ee4
   1c098:	00026df7 	.word	0x00026df7
   1c09c:	4000173c 	.word	0x4000173c
   1c0a0:	00026dfc 	.word	0x00026dfc
   1c0a4:	4001e000 	.word	0x4001e000
   1c0a8:	e000ed00 	.word	0xe000ed00
   1c0ac:	05fa0004 	.word	0x05fa0004
   1c0b0:	20000580 	.word	0x20000580
   1c0b4:	03d09000 	.word	0x03d09000

0001c0b8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1c0b8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1c0ba:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1c0bc:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1c0be:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
   1c0c2:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
   1c0c4:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
   1c0c8:	d014      	beq.n	1c0f4 <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c0ca:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1c0ce:	fa05 f204 	lsl.w	r2, r5, r4
   1c0d2:	ea23 0202 	bic.w	r2, r3, r2
   1c0d6:	e850 6f00 	ldrex	r6, [r0]
   1c0da:	429e      	cmp	r6, r3
   1c0dc:	d104      	bne.n	1c0e8 <nrfx_flag32_alloc+0x30>
   1c0de:	e840 2c00 	strex	ip, r2, [r0]
   1c0e2:	f1bc 0f00 	cmp.w	ip, #0
   1c0e6:	d1f6      	bne.n	1c0d6 <nrfx_flag32_alloc+0x1e>
   1c0e8:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1c0ec:	d1e6      	bne.n	1c0bc <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   1c0ee:	4802      	ldr	r0, [pc, #8]	; (1c0f8 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
   1c0f0:	700c      	strb	r4, [r1, #0]
}
   1c0f2:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   1c0f4:	4801      	ldr	r0, [pc, #4]	; (1c0fc <nrfx_flag32_alloc+0x44>)
   1c0f6:	e7fc      	b.n	1c0f2 <nrfx_flag32_alloc+0x3a>
   1c0f8:	0bad0000 	.word	0x0bad0000
   1c0fc:	0bad0002 	.word	0x0bad0002

0001c100 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1c100:	6803      	ldr	r3, [r0, #0]
   1c102:	40cb      	lsrs	r3, r1
   1c104:	07db      	lsls	r3, r3, #31
{
   1c106:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   1c108:	d415      	bmi.n	1c136 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1c10a:	2301      	movs	r3, #1
   1c10c:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   1c110:	6803      	ldr	r3, [r0, #0]
   1c112:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1c116:	ea41 0203 	orr.w	r2, r1, r3
   1c11a:	e850 4f00 	ldrex	r4, [r0]
   1c11e:	429c      	cmp	r4, r3
   1c120:	d104      	bne.n	1c12c <nrfx_flag32_free+0x2c>
   1c122:	e840 2c00 	strex	ip, r2, [r0]
   1c126:	f1bc 0f00 	cmp.w	ip, #0
   1c12a:	d1f6      	bne.n	1c11a <nrfx_flag32_free+0x1a>
   1c12c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1c130:	d1ee      	bne.n	1c110 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   1c132:	4802      	ldr	r0, [pc, #8]	; (1c13c <nrfx_flag32_free+0x3c>)
}
   1c134:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1c136:	4802      	ldr	r0, [pc, #8]	; (1c140 <nrfx_flag32_free+0x40>)
   1c138:	e7fc      	b.n	1c134 <nrfx_flag32_free+0x34>
   1c13a:	bf00      	nop
   1c13c:	0bad0000 	.word	0x0bad0000
   1c140:	0bad0004 	.word	0x0bad0004

0001c144 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1c144:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1c146:	f100 0308 	add.w	r3, r0, #8
   1c14a:	4c0c      	ldr	r4, [pc, #48]	; (1c17c <call_handler+0x38>)
   1c14c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   1c150:	05da      	lsls	r2, r3, #23
{
   1c152:	4605      	mov	r5, r0
   1c154:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1c156:	d507      	bpl.n	1c168 <call_handler+0x24>
   1c158:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1c15c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1c160:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1c164:	6852      	ldr	r2, [r2, #4]
   1c166:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1c168:	68a3      	ldr	r3, [r4, #8]
   1c16a:	b12b      	cbz	r3, 1c178 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1c16c:	68e2      	ldr	r2, [r4, #12]
   1c16e:	4631      	mov	r1, r6
   1c170:	4628      	mov	r0, r5
    }
}
   1c172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1c176:	4718      	bx	r3
}
   1c178:	bd70      	pop	{r4, r5, r6, pc}
   1c17a:	bf00      	nop
   1c17c:	20000584 	.word	0x20000584

0001c180 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1c180:	4b12      	ldr	r3, [pc, #72]	; (1c1cc <release_handler+0x4c>)
   1c182:	3008      	adds	r0, #8
{
   1c184:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1c186:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   1c18a:	05d1      	lsls	r1, r2, #23
   1c18c:	d51b      	bpl.n	1c1c6 <release_handler+0x46>
   1c18e:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1c192:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
   1c196:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1c19a:	f103 0410 	add.w	r4, r3, #16
   1c19e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1c1a0:	f834 2b02 	ldrh.w	r2, [r4], #2
   1c1a4:	f412 7f80 	tst.w	r2, #256	; 0x100
   1c1a8:	d003      	beq.n	1c1b2 <release_handler+0x32>
   1c1aa:	f3c2 2243 	ubfx	r2, r2, #9, #4
   1c1ae:	4291      	cmp	r1, r2
   1c1b0:	d009      	beq.n	1c1c6 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1c1b2:	3001      	adds	r0, #1
   1c1b4:	2820      	cmp	r0, #32
   1c1b6:	d1f3      	bne.n	1c1a0 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1c1b8:	2200      	movs	r2, #0
   1c1ba:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1c1be:	4804      	ldr	r0, [pc, #16]	; (1c1d0 <release_handler+0x50>)
}
   1c1c0:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1c1c2:	f7ff bf9d 	b.w	1c100 <nrfx_flag32_free>
}
   1c1c6:	bc10      	pop	{r4}
   1c1c8:	4770      	bx	lr
   1c1ca:	bf00      	nop
   1c1cc:	20000584 	.word	0x20000584
   1c1d0:	200005d8 	.word	0x200005d8

0001c1d4 <pin_handler_trigger_uninit>:
{
   1c1d4:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1c1d6:	4c0a      	ldr	r4, [pc, #40]	; (1c200 <pin_handler_trigger_uninit+0x2c>)
   1c1d8:	f100 0508 	add.w	r5, r0, #8
   1c1dc:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
   1c1e0:	069a      	lsls	r2, r3, #26
   1c1e2:	d506      	bpl.n	1c1f2 <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1c1e4:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1c1e6:	4a07      	ldr	r2, [pc, #28]	; (1c204 <pin_handler_trigger_uninit+0x30>)
   1c1e8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1c1ec:	2100      	movs	r1, #0
   1c1ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
   1c1f2:	f7ff ffc5 	bl	1c180 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1c1f6:	2300      	movs	r3, #0
   1c1f8:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1c1fc:	bd38      	pop	{r3, r4, r5, pc}
   1c1fe:	bf00      	nop
   1c200:	20000584 	.word	0x20000584
   1c204:	40006000 	.word	0x40006000

0001c208 <nrfx_gpiote_input_configure>:
{
   1c208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c20a:	4604      	mov	r4, r0
    if (p_input_config)
   1c20c:	b1f9      	cbz	r1, 1c24e <nrfx_gpiote_input_configure+0x46>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1c20e:	4f4c      	ldr	r7, [pc, #304]	; (1c340 <nrfx_gpiote_input_configure+0x138>)
   1c210:	f100 0c08 	add.w	ip, r0, #8
   1c214:	f837 001c 	ldrh.w	r0, [r7, ip, lsl #1]
        if (pin_is_task_output(pin))
   1c218:	f000 0522 	and.w	r5, r0, #34	; 0x22
   1c21c:	2d22      	cmp	r5, #34	; 0x22
   1c21e:	d102      	bne.n	1c226 <nrfx_gpiote_input_configure+0x1e>
            return NRFX_ERROR_INVALID_PARAM;
   1c220:	4848      	ldr	r0, [pc, #288]	; (1c344 <nrfx_gpiote_input_configure+0x13c>)
}
   1c222:	b003      	add	sp, #12
   1c224:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
   1c226:	f004 051f 	and.w	r5, r4, #31
   1c22a:	00ad      	lsls	r5, r5, #2
   1c22c:	f105 45a0 	add.w	r5, r5, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1c230:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1c232:	f8d5 6700 	ldr.w	r6, [r5, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1c236:	f020 0002 	bic.w	r0, r0, #2
    cnf &= ~to_update;
   1c23a:	f026 060f 	bic.w	r6, r6, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1c23e:	f040 0001 	orr.w	r0, r0, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1c242:	ea46 0181 	orr.w	r1, r6, r1, lsl #2
   1c246:	f827 001c 	strh.w	r0, [r7, ip, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
   1c24a:	f8c5 1700 	str.w	r1, [r5, #1792]	; 0x700
    if (p_trigger_config)
   1c24e:	b192      	cbz	r2, 1c276 <nrfx_gpiote_input_configure+0x6e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1c250:	483b      	ldr	r0, [pc, #236]	; (1c340 <nrfx_gpiote_input_configure+0x138>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1c252:	7816      	ldrb	r6, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1c254:	6852      	ldr	r2, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1c256:	f104 0508 	add.w	r5, r4, #8
   1c25a:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
        if (pin_is_output(pin))
   1c25e:	078f      	lsls	r7, r1, #30
   1c260:	d50c      	bpl.n	1c27c <nrfx_gpiote_input_configure+0x74>
            if (use_evt)
   1c262:	2a00      	cmp	r2, #0
   1c264:	d1dc      	bne.n	1c220 <nrfx_gpiote_input_configure+0x18>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1c266:	f830 2015 	ldrh.w	r2, [r0, r5, lsl #1]
   1c26a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1c26e:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   1c272:	f820 2015 	strh.w	r2, [r0, r5, lsl #1]
    if (p_handler_config)
   1c276:	bbcb      	cbnz	r3, 1c2ec <nrfx_gpiote_input_configure+0xe4>
    return NRFX_SUCCESS;
   1c278:	4833      	ldr	r0, [pc, #204]	; (1c348 <nrfx_gpiote_input_configure+0x140>)
   1c27a:	e7d2      	b.n	1c222 <nrfx_gpiote_input_configure+0x1a>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1c27c:	f021 0120 	bic.w	r1, r1, #32
   1c280:	04c9      	lsls	r1, r1, #19
   1c282:	0cc9      	lsrs	r1, r1, #19
   1c284:	f820 1015 	strh.w	r1, [r0, r5, lsl #1]
            if (use_evt)
   1c288:	2a00      	cmp	r2, #0
   1c28a:	d0ec      	beq.n	1c266 <nrfx_gpiote_input_configure+0x5e>
                if (!edge)
   1c28c:	2e03      	cmp	r6, #3
   1c28e:	d8c7      	bhi.n	1c220 <nrfx_gpiote_input_configure+0x18>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1c290:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1c292:	b92e      	cbnz	r6, 1c2a0 <nrfx_gpiote_input_configure+0x98>
   1c294:	4a2d      	ldr	r2, [pc, #180]	; (1c34c <nrfx_gpiote_input_configure+0x144>)
   1c296:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   1c29a:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   1c29e:	e7e2      	b.n	1c266 <nrfx_gpiote_input_configure+0x5e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1c2a0:	00ba      	lsls	r2, r7, #2
   1c2a2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1c2a6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1c2aa:	ea4f 2e04 	mov.w	lr, r4, lsl #8
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1c2ae:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   1c2b2:	f02c 0c03 	bic.w	ip, ip, #3
   1c2b6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1c2ba:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   1c2be:	f42c 3c47 	bic.w	ip, ip, #203776	; 0x31c00
   1c2c2:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   1c2c6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1c2ca:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   1c2ce:	f40e 5ef8 	and.w	lr, lr, #7936	; 0x1f00
   1c2d2:	ea4c 4c06 	orr.w	ip, ip, r6, lsl #16
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1c2d6:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1c2da:	ea4c 0c0e 	orr.w	ip, ip, lr
   1c2de:	f041 0120 	orr.w	r1, r1, #32
   1c2e2:	f820 1015 	strh.w	r1, [r0, r5, lsl #1]
   1c2e6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   1c2ea:	e7bc      	b.n	1c266 <nrfx_gpiote_input_configure+0x5e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1c2ec:	e9d3 6700 	ldrd	r6, r7, [r3]
    release_handler(pin);
   1c2f0:	4620      	mov	r0, r4
   1c2f2:	f7ff ff45 	bl	1c180 <release_handler>
    if (!handler)
   1c2f6:	2e00      	cmp	r6, #0
   1c2f8:	d0be      	beq.n	1c278 <nrfx_gpiote_input_configure+0x70>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1c2fa:	4d11      	ldr	r5, [pc, #68]	; (1c340 <nrfx_gpiote_input_configure+0x138>)
   1c2fc:	682b      	ldr	r3, [r5, #0]
   1c2fe:	429e      	cmp	r6, r3
   1c300:	d104      	bne.n	1c30c <nrfx_gpiote_input_configure+0x104>
   1c302:	686b      	ldr	r3, [r5, #4]
   1c304:	429f      	cmp	r7, r3
   1c306:	d101      	bne.n	1c30c <nrfx_gpiote_input_configure+0x104>
   1c308:	2200      	movs	r2, #0
   1c30a:	e009      	b.n	1c320 <nrfx_gpiote_input_configure+0x118>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1c30c:	4810      	ldr	r0, [pc, #64]	; (1c350 <nrfx_gpiote_input_configure+0x148>)
   1c30e:	f10d 0107 	add.w	r1, sp, #7
   1c312:	f7ff fed1 	bl	1c0b8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1c316:	4b0c      	ldr	r3, [pc, #48]	; (1c348 <nrfx_gpiote_input_configure+0x140>)
   1c318:	4298      	cmp	r0, r3
   1c31a:	d182      	bne.n	1c222 <nrfx_gpiote_input_configure+0x1a>
        handler_id = (int32_t)id;
   1c31c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
   1c320:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1c324:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1c328:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1c32a:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1c32c:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1c330:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1c334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1c338:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   1c33c:	e79c      	b.n	1c278 <nrfx_gpiote_input_configure+0x70>
   1c33e:	bf00      	nop
   1c340:	20000584 	.word	0x20000584
   1c344:	0bad0004 	.word	0x0bad0004
   1c348:	0bad0000 	.word	0x0bad0000
   1c34c:	40006000 	.word	0x40006000
   1c350:	200005d8 	.word	0x200005d8

0001c354 <nrfx_gpiote_output_configure>:
{
   1c354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (p_config)
   1c358:	2900      	cmp	r1, #0
   1c35a:	d044      	beq.n	1c3e6 <nrfx_gpiote_output_configure+0x92>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1c35c:	4f42      	ldr	r7, [pc, #264]	; (1c468 <nrfx_gpiote_output_configure+0x114>)
   1c35e:	f100 0c08 	add.w	ip, r0, #8
   1c362:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1c366:	07ab      	lsls	r3, r5, #30
   1c368:	d404      	bmi.n	1c374 <nrfx_gpiote_output_configure+0x20>
   1c36a:	06ae      	lsls	r6, r5, #26
   1c36c:	d502      	bpl.n	1c374 <nrfx_gpiote_output_configure+0x20>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1c36e:	483f      	ldr	r0, [pc, #252]	; (1c46c <nrfx_gpiote_output_configure+0x118>)
}
   1c370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1c374:	f015 0f1c 	tst.w	r5, #28
   1c378:	d002      	beq.n	1c380 <nrfx_gpiote_output_configure+0x2c>
   1c37a:	784b      	ldrb	r3, [r1, #1]
   1c37c:	2b01      	cmp	r3, #1
   1c37e:	d0f6      	beq.n	1c36e <nrfx_gpiote_output_configure+0x1a>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1c380:	f111 0e01 	adds.w	lr, r1, #1
    *p_pin = pin_number & 0x1F;
   1c384:	f000 061f 	and.w	r6, r0, #31
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1c388:	bf14      	ite	ne
   1c38a:	2402      	movne	r4, #2
   1c38c:	2400      	moveq	r4, #0
   1c38e:	00b6      	lsls	r6, r6, #2
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1c390:	1c8b      	adds	r3, r1, #2
   1c392:	f106 46a0 	add.w	r6, r6, #1342177280	; 0x50000000
   1c396:	bf14      	ite	ne
   1c398:	f04f 090c 	movne.w	r9, #12
   1c39c:	f04f 0900 	moveq.w	r9, #0
   1c3a0:	ea44 0409 	orr.w	r4, r4, r9
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1c3a4:	f8d6 8700 	ldr.w	r8, [r6, #1792]	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1c3a8:	f444 64e0 	orr.w	r4, r4, #1792	; 0x700
   1c3ac:	f044 0401 	orr.w	r4, r4, #1
    cnf &= ~to_update;
   1c3b0:	ea28 0804 	bic.w	r8, r8, r4
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1c3b4:	f1be 0f00 	cmp.w	lr, #0
   1c3b8:	d003      	beq.n	1c3c2 <nrfx_gpiote_output_configure+0x6e>
   1c3ba:	f891 e001 	ldrb.w	lr, [r1, #1]
   1c3be:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1c3c2:	b10b      	cbz	r3, 1c3c8 <nrfx_gpiote_output_configure+0x74>
   1c3c4:	788c      	ldrb	r4, [r1, #2]
   1c3c6:	00a3      	lsls	r3, r4, #2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1c3c8:	7809      	ldrb	r1, [r1, #0]
   1c3ca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1c3ce:	ea43 0308 	orr.w	r3, r3, r8
   1c3d2:	ea43 030e 	orr.w	r3, r3, lr
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1c3d6:	f045 0503 	orr.w	r5, r5, #3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1c3da:	f043 0301 	orr.w	r3, r3, #1
   1c3de:	f827 501c 	strh.w	r5, [r7, ip, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
   1c3e2:	f8c6 3700 	str.w	r3, [r6, #1792]	; 0x700
    if (p_task_config)
   1c3e6:	b90a      	cbnz	r2, 1c3ec <nrfx_gpiote_output_configure+0x98>
    return NRFX_SUCCESS;
   1c3e8:	4821      	ldr	r0, [pc, #132]	; (1c470 <nrfx_gpiote_output_configure+0x11c>)
   1c3ea:	e7c1      	b.n	1c370 <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1c3ec:	4d1e      	ldr	r5, [pc, #120]	; (1c468 <nrfx_gpiote_output_configure+0x114>)
   1c3ee:	f100 0608 	add.w	r6, r0, #8
   1c3f2:	f835 4016 	ldrh.w	r4, [r5, r6, lsl #1]
        if (pin_is_input(pin))
   1c3f6:	07a3      	lsls	r3, r4, #30
   1c3f8:	d5b9      	bpl.n	1c36e <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
   1c3fa:	7817      	ldrb	r7, [r2, #0]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1c3fc:	f024 0420 	bic.w	r4, r4, #32
   1c400:	00b9      	lsls	r1, r7, #2
   1c402:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1c406:	04e4      	lsls	r4, r4, #19
   1c408:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1c40c:	0ce4      	lsrs	r4, r4, #19
   1c40e:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
    p_reg->CONFIG[idx] = 0;
   1c412:	2300      	movs	r3, #0
   1c414:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1c418:	f892 c001 	ldrb.w	ip, [r2, #1]
   1c41c:	f1bc 0f00 	cmp.w	ip, #0
   1c420:	d0e2      	beq.n	1c3e8 <nrfx_gpiote_output_configure+0x94>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1c422:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   1c426:	7892      	ldrb	r2, [r2, #2]
   1c428:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   1c42c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1c430:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1c434:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1c438:	0203      	lsls	r3, r0, #8
   1c43a:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1c43e:	ea4f 400c 	mov.w	r0, ip, lsl #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1c442:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1c446:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1c44a:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1c44c:	4303      	orrs	r3, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1c44e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1c452:	ea44 3447 	orr.w	r4, r4, r7, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1c456:	4313      	orrs	r3, r2
   1c458:	f044 0420 	orr.w	r4, r4, #32
   1c45c:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
   1c460:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1c464:	e7c0      	b.n	1c3e8 <nrfx_gpiote_output_configure+0x94>
   1c466:	bf00      	nop
   1c468:	20000584 	.word	0x20000584
   1c46c:	0bad0004 	.word	0x0bad0004
   1c470:	0bad0000 	.word	0x0bad0000

0001c474 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1c474:	4b01      	ldr	r3, [pc, #4]	; (1c47c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1c476:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1c47a:	4770      	bx	lr
   1c47c:	20000584 	.word	0x20000584

0001c480 <nrfx_gpiote_channel_get>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1c480:	3008      	adds	r0, #8
   1c482:	4b05      	ldr	r3, [pc, #20]	; (1c498 <nrfx_gpiote_channel_get+0x18>)
   1c484:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    if (pin_in_use_by_te(pin))
   1c488:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1c48a:	bf43      	ittte	mi
   1c48c:	0b5b      	lsrmi	r3, r3, #13
        return NRFX_SUCCESS;
   1c48e:	4803      	ldrmi	r0, [pc, #12]	; (1c49c <nrfx_gpiote_channel_get+0x1c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1c490:	700b      	strbmi	r3, [r1, #0]
        return NRFX_ERROR_INVALID_PARAM;
   1c492:	4803      	ldrpl	r0, [pc, #12]	; (1c4a0 <nrfx_gpiote_channel_get+0x20>)
}
   1c494:	4770      	bx	lr
   1c496:	bf00      	nop
   1c498:	20000584 	.word	0x20000584
   1c49c:	0bad0000 	.word	0x0bad0000
   1c4a0:	0bad0004 	.word	0x0bad0004

0001c4a4 <nrfx_gpiote_init>:
{
   1c4a4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1c4a6:	4c0e      	ldr	r4, [pc, #56]	; (1c4e0 <nrfx_gpiote_init+0x3c>)
   1c4a8:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   1c4ac:	b9b5      	cbnz	r5, 1c4dc <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1c4ae:	2240      	movs	r2, #64	; 0x40
   1c4b0:	4629      	mov	r1, r5
   1c4b2:	f104 0010 	add.w	r0, r4, #16
   1c4b6:	f004 fc7b 	bl	20db0 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1c4ba:	2006      	movs	r0, #6
   1c4bc:	f7f7 fd72 	bl	13fa4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1c4c0:	4b08      	ldr	r3, [pc, #32]	; (1c4e4 <nrfx_gpiote_init+0x40>)
    return err_code;
   1c4c2:	4809      	ldr	r0, [pc, #36]	; (1c4e8 <nrfx_gpiote_init+0x44>)
   1c4c4:	601d      	str	r5, [r3, #0]
   1c4c6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1c4c8:	4b08      	ldr	r3, [pc, #32]	; (1c4ec <nrfx_gpiote_init+0x48>)
   1c4ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1c4ce:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1c4d2:	2301      	movs	r3, #1
   1c4d4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1c4d8:	6563      	str	r3, [r4, #84]	; 0x54
}
   1c4da:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1c4dc:	4804      	ldr	r0, [pc, #16]	; (1c4f0 <nrfx_gpiote_init+0x4c>)
   1c4de:	e7fc      	b.n	1c4da <nrfx_gpiote_init+0x36>
   1c4e0:	20000584 	.word	0x20000584
   1c4e4:	4000617c 	.word	0x4000617c
   1c4e8:	0bad0000 	.word	0x0bad0000
   1c4ec:	40006000 	.word	0x40006000
   1c4f0:	0bad0005 	.word	0x0bad0005

0001c4f4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1c4f4:	4b03      	ldr	r3, [pc, #12]	; (1c504 <nrfx_gpiote_is_init+0x10>)
   1c4f6:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   1c4fa:	3800      	subs	r0, #0
   1c4fc:	bf18      	it	ne
   1c4fe:	2001      	movne	r0, #1
   1c500:	4770      	bx	lr
   1c502:	bf00      	nop
   1c504:	20000584 	.word	0x20000584

0001c508 <nrfx_gpiote_channel_free>:
{
   1c508:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1c50a:	4801      	ldr	r0, [pc, #4]	; (1c510 <nrfx_gpiote_channel_free+0x8>)
   1c50c:	f7ff bdf8 	b.w	1c100 <nrfx_flag32_free>
   1c510:	200005d4 	.word	0x200005d4

0001c514 <nrfx_gpiote_channel_alloc>:
{
   1c514:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1c516:	4801      	ldr	r0, [pc, #4]	; (1c51c <nrfx_gpiote_channel_alloc+0x8>)
   1c518:	f7ff bdce 	b.w	1c0b8 <nrfx_flag32_alloc>
   1c51c:	200005d4 	.word	0x200005d4

0001c520 <nrfx_gpiote_trigger_enable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1c520:	f100 0208 	add.w	r2, r0, #8
   1c524:	4b1d      	ldr	r3, [pc, #116]	; (1c59c <nrfx_gpiote_trigger_enable+0x7c>)
   1c526:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1c52a:	069a      	lsls	r2, r3, #26
{
   1c52c:	b410      	push	{r4}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1c52e:	d51d      	bpl.n	1c56c <nrfx_gpiote_trigger_enable+0x4c>
   1c530:	f013 0402 	ands.w	r4, r3, #2
   1c534:	d11a      	bne.n	1c56c <nrfx_gpiote_trigger_enable+0x4c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1c536:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1c538:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   1c53a:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   1c53e:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   1c542:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1c546:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1c54a:	6004      	str	r4, [r0, #0]
   1c54c:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1c54e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1c552:	f040 0001 	orr.w	r0, r0, #1
   1c556:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   1c55a:	b129      	cbz	r1, 1c568 <nrfx_gpiote_trigger_enable+0x48>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1c55c:	2201      	movs	r2, #1
   1c55e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   1c562:	4a0f      	ldr	r2, [pc, #60]	; (1c5a0 <nrfx_gpiote_trigger_enable+0x80>)
   1c564:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1c568:	bc10      	pop	{r4}
   1c56a:	4770      	bx	lr
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1c56c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1c570:	2b04      	cmp	r3, #4
   1c572:	d00e      	beq.n	1c592 <nrfx_gpiote_trigger_enable+0x72>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1c574:	2b05      	cmp	r3, #5
   1c576:	d00e      	beq.n	1c596 <nrfx_gpiote_trigger_enable+0x76>
    return p_reg->IN;
   1c578:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1c57c:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
   1c580:	f000 031f 	and.w	r3, r0, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1c584:	40d9      	lsrs	r1, r3
   1c586:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1c58a:	3102      	adds	r1, #2
}
   1c58c:	bc10      	pop	{r4}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1c58e:	f006 b89d 	b.w	226cc <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1c592:	2103      	movs	r1, #3
   1c594:	e7fa      	b.n	1c58c <nrfx_gpiote_trigger_enable+0x6c>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1c596:	2102      	movs	r1, #2
   1c598:	e7f8      	b.n	1c58c <nrfx_gpiote_trigger_enable+0x6c>
   1c59a:	bf00      	nop
   1c59c:	20000584 	.word	0x20000584
   1c5a0:	40006000 	.word	0x40006000

0001c5a4 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1c5a4:	4b0e      	ldr	r3, [pc, #56]	; (1c5e0 <nrfx_gpiote_trigger_disable+0x3c>)
   1c5a6:	f100 0208 	add.w	r2, r0, #8
   1c5aa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1c5ae:	0699      	lsls	r1, r3, #26
   1c5b0:	d513      	bpl.n	1c5da <nrfx_gpiote_trigger_disable+0x36>
   1c5b2:	079a      	lsls	r2, r3, #30
   1c5b4:	d411      	bmi.n	1c5da <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1c5b6:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1c5b8:	2201      	movs	r2, #1
   1c5ba:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1c5bc:	009b      	lsls	r3, r3, #2
   1c5be:	4909      	ldr	r1, [pc, #36]	; (1c5e4 <nrfx_gpiote_trigger_disable+0x40>)
   1c5c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c5c4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1c5c8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1c5cc:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1c5d0:	f022 0203 	bic.w	r2, r2, #3
   1c5d4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1c5d8:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1c5da:	2100      	movs	r1, #0
   1c5dc:	f006 b876 	b.w	226cc <nrf_gpio_cfg_sense_set>
   1c5e0:	20000584 	.word	0x20000584
   1c5e4:	40006000 	.word	0x40006000

0001c5e8 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1c5e8:	4b0d      	ldr	r3, [pc, #52]	; (1c620 <nrfx_gpiote_pin_uninit+0x38>)
   1c5ea:	f100 0208 	add.w	r2, r0, #8
{
   1c5ee:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1c5f0:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   1c5f4:	07db      	lsls	r3, r3, #31
{
   1c5f6:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1c5f8:	d50f      	bpl.n	1c61a <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
   1c5fa:	f7ff ffd3 	bl	1c5a4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1c5fe:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
   1c600:	f004 041f 	and.w	r4, r4, #31
   1c604:	f7ff fde6 	bl	1c1d4 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
   1c608:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   1c60c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1c610:	2202      	movs	r2, #2
   1c612:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   1c616:	4803      	ldr	r0, [pc, #12]	; (1c624 <nrfx_gpiote_pin_uninit+0x3c>)
}
   1c618:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1c61a:	4803      	ldr	r0, [pc, #12]	; (1c628 <nrfx_gpiote_pin_uninit+0x40>)
   1c61c:	e7fc      	b.n	1c618 <nrfx_gpiote_pin_uninit+0x30>
   1c61e:	bf00      	nop
   1c620:	20000584 	.word	0x20000584
   1c624:	0bad0000 	.word	0x0bad0000
   1c628:	0bad0004 	.word	0x0bad0004

0001c62c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1c62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c630:	4b4e      	ldr	r3, [pc, #312]	; (1c76c <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
   1c632:	484f      	ldr	r0, [pc, #316]	; (1c770 <nrfx_gpiote_irq_handler+0x144>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1c634:	494f      	ldr	r1, [pc, #316]	; (1c774 <nrfx_gpiote_irq_handler+0x148>)
    uint32_t status = 0;
   1c636:	2600      	movs	r6, #0
{
   1c638:	b085      	sub	sp, #20
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1c63a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1c63c:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c63e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1c640:	b135      	cbz	r5, 1c650 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1c642:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1c646:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1c648:	bf1e      	ittt	ne
   1c64a:	601c      	strne	r4, [r3, #0]
   1c64c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1c64e:	4316      	orrne	r6, r2
        }
        mask <<= 1;
   1c650:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1c652:	428b      	cmp	r3, r1
        mask <<= 1;
   1c654:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1c658:	d1f1      	bne.n	1c63e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c65a:	4f47      	ldr	r7, [pc, #284]	; (1c778 <nrfx_gpiote_irq_handler+0x14c>)
   1c65c:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1c65e:	b1ab      	cbz	r3, 1c68c <nrfx_gpiote_irq_handler+0x60>
        *p_masks = gpio_regs[i]->LATCH;
   1c660:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
   1c664:	f8d5 3520 	ldr.w	r3, [r5, #1312]	; 0x520
   1c668:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   1c66a:	f8c5 3520 	str.w	r3, [r5, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1c66e:	f10d 080c 	add.w	r8, sp, #12
   1c672:	f04f 0901 	mov.w	r9, #1
            while (latch[i])
   1c676:	9803      	ldr	r0, [sp, #12]
   1c678:	b950      	cbnz	r0, 1c690 <nrfx_gpiote_irq_handler+0x64>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1c67a:	6038      	str	r0, [r7, #0]
   1c67c:	683b      	ldr	r3, [r7, #0]
        *p_masks = gpio_regs[i]->LATCH;
   1c67e:	f8d5 3520 	ldr.w	r3, [r5, #1312]	; 0x520
   1c682:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   1c684:	f8c5 3520 	str.w	r3, [r5, #1312]	; 0x520
        if (latch[port_idx])
   1c688:	2b00      	cmp	r3, #0
   1c68a:	d1f0      	bne.n	1c66e <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
   1c68c:	2401      	movs	r4, #1
   1c68e:	e068      	b.n	1c762 <nrfx_gpiote_irq_handler+0x136>
                uint32_t pin = NRF_CTZ(latch[i]);
   1c690:	fa90 faa0 	rbit	sl, r0
   1c694:	faba fa8a 	clz	sl, sl
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1c698:	4a38      	ldr	r2, [pc, #224]	; (1c77c <nrfx_gpiote_irq_handler+0x150>)
   1c69a:	f10a 0308 	add.w	r3, sl, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1c69e:	ea4f 0cda 	mov.w	ip, sl, lsr #3
   1c6a2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
   1c6a6:	f00a 0307 	and.w	r3, sl, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1c6aa:	fa09 f203 	lsl.w	r2, r9, r3
   1c6ae:	f818 300c 	ldrb.w	r3, [r8, ip]
   1c6b2:	ea23 0302 	bic.w	r3, r3, r2
   1c6b6:	f808 300c 	strb.w	r3, [r8, ip]
   1c6ba:	ea4f 038a 	mov.w	r3, sl, lsl #2
   1c6be:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
   1c6c2:	f3c1 0482 	ubfx	r4, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1c6c6:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
    if (is_level(trigger))
   1c6ca:	06c8      	lsls	r0, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1c6cc:	46a3      	mov	fp, r4
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1c6ce:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   1c6d2:	d519      	bpl.n	1c708 <nrfx_gpiote_irq_handler+0xdc>
        call_handler(pin, trigger);
   1c6d4:	4659      	mov	r1, fp
   1c6d6:	4650      	mov	r0, sl
   1c6d8:	9301      	str	r3, [sp, #4]
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1c6da:	b2d4      	uxtb	r4, r2
   1c6dc:	f7ff fd32 	bl	1c144 <call_handler>
   1c6e0:	9b01      	ldr	r3, [sp, #4]
   1c6e2:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1c6e6:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1c6ea:	429c      	cmp	r4, r3
   1c6ec:	d107      	bne.n	1c6fe <nrfx_gpiote_irq_handler+0xd2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1c6ee:	2100      	movs	r1, #0
   1c6f0:	4650      	mov	r0, sl
   1c6f2:	f005 ffeb 	bl	226cc <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1c6f6:	4621      	mov	r1, r4
   1c6f8:	4650      	mov	r0, sl
   1c6fa:	f005 ffe7 	bl	226cc <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
   1c6fe:	fa09 f00a 	lsl.w	r0, r9, sl
   1c702:	f8c5 0520 	str.w	r0, [r5, #1312]	; 0x520
}
   1c706:	e7b6      	b.n	1c676 <nrfx_gpiote_irq_handler+0x4a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1c708:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1c70a:	bf0c      	ite	eq
   1c70c:	2103      	moveq	r1, #3
   1c70e:	2102      	movne	r1, #2
   1c710:	4650      	mov	r0, sl
   1c712:	f005 ffdb 	bl	226cc <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1c716:	2c03      	cmp	r4, #3
   1c718:	d003      	beq.n	1c722 <nrfx_gpiote_irq_handler+0xf6>
   1c71a:	2a02      	cmp	r2, #2
   1c71c:	d106      	bne.n	1c72c <nrfx_gpiote_irq_handler+0x100>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1c71e:	2c01      	cmp	r4, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1c720:	d1ed      	bne.n	1c6fe <nrfx_gpiote_irq_handler+0xd2>
            call_handler(pin, trigger);
   1c722:	4659      	mov	r1, fp
   1c724:	4650      	mov	r0, sl
   1c726:	f7ff fd0d 	bl	1c144 <call_handler>
   1c72a:	e7e8      	b.n	1c6fe <nrfx_gpiote_irq_handler+0xd2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1c72c:	2a03      	cmp	r2, #3
   1c72e:	d1e6      	bne.n	1c6fe <nrfx_gpiote_irq_handler+0xd2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1c730:	2c02      	cmp	r4, #2
   1c732:	e7f5      	b.n	1c720 <nrfx_gpiote_irq_handler+0xf4>
        uint32_t ch = NRF_CTZ(mask);
   1c734:	fa96 f3a6 	rbit	r3, r6
   1c738:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1c73c:	fa04 f203 	lsl.w	r2, r4, r3
   1c740:	009b      	lsls	r3, r3, #2
   1c742:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c746:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1c74a:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1c74e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1c752:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1c756:	f3c0 2004 	ubfx	r0, r0, #8, #5
   1c75a:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1c75e:	f7ff fcf1 	bl	1c144 <call_handler>
    while (mask)
   1c762:	2e00      	cmp	r6, #0
   1c764:	d1e6      	bne.n	1c734 <nrfx_gpiote_irq_handler+0x108>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1c766:	b005      	add	sp, #20
   1c768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c76c:	40006100 	.word	0x40006100
   1c770:	40006000 	.word	0x40006000
   1c774:	40006120 	.word	0x40006120
   1c778:	4000617c 	.word	0x4000617c
   1c77c:	20000584 	.word	0x20000584

0001c780 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1c780:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1c782:	4801      	ldr	r0, [pc, #4]	; (1c788 <nrfx_ppi_channel_alloc+0x8>)
   1c784:	f7ff bc98 	b.w	1c0b8 <nrfx_flag32_alloc>
   1c788:	200005e0 	.word	0x200005e0

0001c78c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1c78c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1c78e:	4c11      	ldr	r4, [pc, #68]	; (1c7d4 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1c790:	4a11      	ldr	r2, [pc, #68]	; (1c7d8 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1c792:	4912      	ldr	r1, [pc, #72]	; (1c7dc <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1c794:	2303      	movs	r3, #3
   1c796:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1c798:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1c79a:	4b11      	ldr	r3, [pc, #68]	; (1c7e0 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   1c79c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1c79e:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1c7a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1c7a4:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1c7a6:	2300      	movs	r3, #0
   1c7a8:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1c7aa:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1c7ac:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   1c7ae:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1c7b0:	4a0c      	ldr	r2, [pc, #48]	; (1c7e4 <_DoInit+0x58>)
   1c7b2:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   1c7b4:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1c7b6:	2210      	movs	r2, #16
   1c7b8:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1c7ba:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1c7bc:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1c7be:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   1c7c0:	f004 fa6e 	bl	20ca0 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1c7c4:	4908      	ldr	r1, [pc, #32]	; (1c7e8 <_DoInit+0x5c>)
   1c7c6:	4620      	mov	r0, r4
   1c7c8:	f004 fa6a 	bl	20ca0 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   1c7cc:	2320      	movs	r3, #32
   1c7ce:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1c7d0:	bd10      	pop	{r4, pc}
   1c7d2:	bf00      	nop
   1c7d4:	200026f4 	.word	0x200026f4
   1c7d8:	00026e06 	.word	0x00026e06
   1c7dc:	00026e0f 	.word	0x00026e0f
   1c7e0:	20002e0c 	.word	0x20002e0c
   1c7e4:	20002dfc 	.word	0x20002dfc
   1c7e8:	00026e13 	.word	0x00026e13

0001c7ec <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1c7ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   1c7f0:	4f23      	ldr	r7, [pc, #140]	; (1c880 <SEGGER_RTT_WriteSkipNoLock+0x94>)
   1c7f2:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1c7f6:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   1c7f8:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1c7fc:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   1c7fe:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1c800:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1c802:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1c804:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1c806:	d834      	bhi.n	1c872 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1c808:	f8d2 a020 	ldr.w	sl, [r2, #32]
   1c80c:	ebaa 0905 	sub.w	r9, sl, r5
   1c810:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   1c814:	4294      	cmp	r4, r2
   1c816:	d811      	bhi.n	1c83c <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1c818:	f04f 0918 	mov.w	r9, #24
   1c81c:	fb06 9309 	mla	r3, r6, r9, r9
   1c820:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   1c822:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1c824:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   1c826:	4641      	mov	r1, r8
   1c828:	4428      	add	r0, r5
   1c82a:	f004 fab6 	bl	20d9a <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   1c82e:	fb09 7606 	mla	r6, r9, r6, r7
   1c832:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   1c834:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
   1c836:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   1c838:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   1c83c:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1c83e:	429c      	cmp	r4, r3
   1c840:	d81b      	bhi.n	1c87a <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1c842:	fb00 bb0b 	mla	fp, r0, fp, fp
   1c846:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1c848:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1c84a:	f8db 0004 	ldr.w	r0, [fp, #4]
   1c84e:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1c850:	4428      	add	r0, r5
   1c852:	f004 faa2 	bl	20d9a <memcpy>
      if (NumBytes) {
   1c856:	ebb4 040a 	subs.w	r4, r4, sl
   1c85a:	d006      	beq.n	1c86a <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   1c85c:	f8db 0004 	ldr.w	r0, [fp, #4]
   1c860:	4622      	mov	r2, r4
   1c862:	eb08 0109 	add.w	r1, r8, r9
   1c866:	f004 fa98 	bl	20d9a <memcpy>
      pRing->WrOff = NumBytes;
   1c86a:	2018      	movs	r0, #24
   1c86c:	fb00 7606 	mla	r6, r0, r6, r7
   1c870:	e7e0      	b.n	1c834 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   1c872:	3b01      	subs	r3, #1
   1c874:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   1c876:	42a3      	cmp	r3, r4
   1c878:	d2ce      	bcs.n	1c818 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   1c87a:	2000      	movs	r0, #0
   1c87c:	e7dc      	b.n	1c838 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   1c87e:	bf00      	nop
   1c880:	200026f4 	.word	0x200026f4

0001c884 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   1c884:	4b03      	ldr	r3, [pc, #12]	; (1c894 <SEGGER_RTT_HasDataUp+0x10>)
   1c886:	2218      	movs	r2, #24
   1c888:	fb02 3300 	mla	r3, r2, r0, r3
   1c88c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   1c88e:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   1c890:	1a80      	subs	r0, r0, r2
   1c892:	4770      	bx	lr
   1c894:	200026f4 	.word	0x200026f4

0001c898 <device_visitor>:

static int device_visitor(const device_handle_t *handles,
			   size_t handle_count,
			   device_visitor_callback_t visitor_cb,
			   void *context)
{
   1c898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t numdev = __device_end - __device_start;
   1c89c:	4e13      	ldr	r6, [pc, #76]	; (1c8ec <device_visitor+0x54>)
   1c89e:	460f      	mov	r7, r1
   1c8a0:	4619      	mov	r1, r3
   1c8a2:	4b13      	ldr	r3, [pc, #76]	; (1c8f0 <device_visitor+0x58>)
   1c8a4:	4692      	mov	sl, r2
   1c8a6:	eba3 0806 	sub.w	r8, r3, r6
   1c8aa:	4a12      	ldr	r2, [pc, #72]	; (1c8f4 <device_visitor+0x5c>)
   1c8ac:	ea4f 03e8 	mov.w	r3, r8, asr #3
   1c8b0:	4681      	mov	r9, r0
   1c8b2:	fb02 f803 	mul.w	r8, r2, r3
	/* Iterate over fixed devices */
	for (size_t i = 0; i < handle_count; ++i) {
   1c8b6:	2500      	movs	r5, #0
		dev = &__device_start[dev_handle - 1];
   1c8b8:	f04f 0b18 	mov.w	fp, #24
   1c8bc:	42bd      	cmp	r5, r7
   1c8be:	d103      	bne.n	1c8c8 <device_visitor+0x30>
		if (rc < 0) {
			return rc;
		}
	}

	return handle_count;
   1c8c0:	4628      	mov	r0, r5
}
   1c8c2:	b003      	add	sp, #12
   1c8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		device_handle_t dh = handles[i];
   1c8c8:	f939 4015 	ldrsh.w	r4, [r9, r5, lsl #1]
	if ((dev_handle > 0) && ((size_t)dev_handle <= numdev)) {
   1c8cc:	2c00      	cmp	r4, #0
   1c8ce:	dd0b      	ble.n	1c8e8 <device_visitor+0x50>
   1c8d0:	45a0      	cmp	r8, r4
   1c8d2:	d309      	bcc.n	1c8e8 <device_visitor+0x50>
		dev = &__device_start[dev_handle - 1];
   1c8d4:	3c01      	subs	r4, #1
   1c8d6:	fb0b 6004 	mla	r0, fp, r4, r6
		int rc = visitor_cb(rdev, context);
   1c8da:	9101      	str	r1, [sp, #4]
   1c8dc:	47d0      	blx	sl
		if (rc < 0) {
   1c8de:	2800      	cmp	r0, #0
   1c8e0:	dbef      	blt.n	1c8c2 <device_visitor+0x2a>
	for (size_t i = 0; i < handle_count; ++i) {
   1c8e2:	9901      	ldr	r1, [sp, #4]
   1c8e4:	3501      	adds	r5, #1
   1c8e6:	e7e9      	b.n	1c8bc <device_visitor+0x24>
	const struct device *dev = NULL;
   1c8e8:	2000      	movs	r0, #0
   1c8ea:	e7f6      	b.n	1c8da <device_visitor+0x42>
   1c8ec:	00023354 	.word	0x00023354
   1c8f0:	000233b4 	.word	0x000233b4
   1c8f4:	aaaaaaab 	.word	0xaaaaaaab

0001c8f8 <z_sys_init_run_level>:
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1c8f8:	4b0e      	ldr	r3, [pc, #56]	; (1c934 <z_sys_init_run_level+0x3c>)
{
   1c8fa:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1c8fc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1c900:	3001      	adds	r0, #1
   1c902:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1c906:	42a6      	cmp	r6, r4
   1c908:	d800      	bhi.n	1c90c <z_sys_init_run_level+0x14>
}
   1c90a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1c90c:	e9d4 3500 	ldrd	r3, r5, [r4]
   1c910:	4628      	mov	r0, r5
   1c912:	4798      	blx	r3
		if (dev != NULL) {
   1c914:	b165      	cbz	r5, 1c930 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   1c916:	68eb      	ldr	r3, [r5, #12]
   1c918:	b130      	cbz	r0, 1c928 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1c91a:	2800      	cmp	r0, #0
   1c91c:	bfb8      	it	lt
   1c91e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1c920:	28ff      	cmp	r0, #255	; 0xff
   1c922:	bfa8      	it	ge
   1c924:	20ff      	movge	r0, #255	; 0xff
   1c926:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1c928:	785a      	ldrb	r2, [r3, #1]
   1c92a:	f042 0201 	orr.w	r2, r2, #1
   1c92e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1c930:	3408      	adds	r4, #8
   1c932:	e7e8      	b.n	1c906 <z_sys_init_run_level+0xe>
   1c934:	00024350 	.word	0x00024350

0001c938 <z_device_get_all_static>:
	*devices = __device_start;
   1c938:	4a03      	ldr	r2, [pc, #12]	; (1c948 <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
   1c93a:	4b04      	ldr	r3, [pc, #16]	; (1c94c <z_device_get_all_static+0x14>)
	*devices = __device_start;
   1c93c:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
   1c93e:	1a9b      	subs	r3, r3, r2
}
   1c940:	4803      	ldr	r0, [pc, #12]	; (1c950 <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
   1c942:	10db      	asrs	r3, r3, #3
}
   1c944:	4358      	muls	r0, r3
   1c946:	4770      	bx	lr
   1c948:	00023354 	.word	0x00023354
   1c94c:	000233b4 	.word	0x000233b4
   1c950:	aaaaaaab 	.word	0xaaaaaaab

0001c954 <z_impl_device_get_binding>:
{
   1c954:	b570      	push	{r4, r5, r6, lr}
	if ((name == NULL) || (name[0] == '\0')) {
   1c956:	4605      	mov	r5, r0
   1c958:	b910      	cbnz	r0, 1c960 <z_impl_device_get_binding+0xc>
		return NULL;
   1c95a:	2400      	movs	r4, #0
}
   1c95c:	4620      	mov	r0, r4
   1c95e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   1c960:	7803      	ldrb	r3, [r0, #0]
   1c962:	2b00      	cmp	r3, #0
   1c964:	d0f9      	beq.n	1c95a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1c966:	4a0f      	ldr	r2, [pc, #60]	; (1c9a4 <z_impl_device_get_binding+0x50>)
   1c968:	4c0f      	ldr	r4, [pc, #60]	; (1c9a8 <z_impl_device_get_binding+0x54>)
   1c96a:	4616      	mov	r6, r2
   1c96c:	4294      	cmp	r4, r2
   1c96e:	d108      	bne.n	1c982 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1c970:	4c0d      	ldr	r4, [pc, #52]	; (1c9a8 <z_impl_device_get_binding+0x54>)
   1c972:	42b4      	cmp	r4, r6
   1c974:	d0f1      	beq.n	1c95a <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1c976:	4620      	mov	r0, r4
   1c978:	f005 febe 	bl	226f8 <z_device_ready>
   1c97c:	b950      	cbnz	r0, 1c994 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   1c97e:	3418      	adds	r4, #24
   1c980:	e7f7      	b.n	1c972 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   1c982:	4620      	mov	r0, r4
   1c984:	f005 feb8 	bl	226f8 <z_device_ready>
   1c988:	b110      	cbz	r0, 1c990 <z_impl_device_get_binding+0x3c>
   1c98a:	6823      	ldr	r3, [r4, #0]
   1c98c:	42ab      	cmp	r3, r5
   1c98e:	d0e5      	beq.n	1c95c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   1c990:	3418      	adds	r4, #24
   1c992:	e7eb      	b.n	1c96c <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1c994:	6821      	ldr	r1, [r4, #0]
   1c996:	4628      	mov	r0, r5
   1c998:	f004 f9bd 	bl	20d16 <strcmp>
   1c99c:	2800      	cmp	r0, #0
   1c99e:	d1ee      	bne.n	1c97e <z_impl_device_get_binding+0x2a>
   1c9a0:	e7dc      	b.n	1c95c <z_impl_device_get_binding+0x8>
   1c9a2:	bf00      	nop
   1c9a4:	000233b4 	.word	0x000233b4
   1c9a8:	00023354 	.word	0x00023354

0001c9ac <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1c9ac:	4b01      	ldr	r3, [pc, #4]	; (1c9b4 <z_impl_z_errno+0x8>)
   1c9ae:	6898      	ldr	r0, [r3, #8]
}
   1c9b0:	3098      	adds	r0, #152	; 0x98
   1c9b2:	4770      	bx	lr
   1c9b4:	2000279c 	.word	0x2000279c

0001c9b8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1c9b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c9bc:	4606      	mov	r6, r0
   1c9be:	460f      	mov	r7, r1
	__asm__ volatile(
   1c9c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c9c4:	f3ef 8811 	mrs	r8, BASEPRI
   1c9c8:	f383 8812 	msr	BASEPRI_MAX, r3
   1c9cc:	f3bf 8f6f 	isb	sy
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1c9d0:	4c2c      	ldr	r4, [pc, #176]	; (1ca84 <z_fatal_error+0xcc>)
	return z_impl_z_current_get();
   1c9d2:	f001 f9f9 	bl	1ddc8 <z_impl_z_current_get>
   1c9d6:	6823      	ldr	r3, [r4, #0]
   1c9d8:	0759      	lsls	r1, r3, #29
   1c9da:	4605      	mov	r5, r0
   1c9dc:	d04e      	beq.n	1ca7c <z_fatal_error+0xc4>
   1c9de:	4b2a      	ldr	r3, [pc, #168]	; (1ca88 <z_fatal_error+0xd0>)
   1c9e0:	482a      	ldr	r0, [pc, #168]	; (1ca8c <z_fatal_error+0xd4>)
   1c9e2:	1ae3      	subs	r3, r4, r3
   1c9e4:	2e04      	cmp	r6, #4
   1c9e6:	ea4f 0393 	mov.w	r3, r3, lsr #2
   1c9ea:	bf96      	itet	ls
   1c9ec:	4a28      	ldrls	r2, [pc, #160]	; (1ca90 <z_fatal_error+0xd8>)
   1c9ee:	4a29      	ldrhi	r2, [pc, #164]	; (1ca94 <z_fatal_error+0xdc>)
   1c9f0:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   1c9f4:	019b      	lsls	r3, r3, #6
   1c9f6:	f043 0301 	orr.w	r3, r3, #1
   1c9fa:	f8ad 3000 	strh.w	r3, [sp]
   1c9fe:	4631      	mov	r1, r6
   1ca00:	2300      	movs	r3, #0
   1ca02:	f002 fad2 	bl	1efaa <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1ca06:	b17f      	cbz	r7, 1ca28 <z_fatal_error+0x70>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1ca08:	69fb      	ldr	r3, [r7, #28]
   1ca0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1ca0e:	b15b      	cbz	r3, 1ca28 <z_fatal_error+0x70>
		LOG_ERR("Fault during interrupt handling\n");
   1ca10:	6823      	ldr	r3, [r4, #0]
   1ca12:	075a      	lsls	r2, r3, #29
   1ca14:	d01b      	beq.n	1ca4e <z_fatal_error+0x96>
   1ca16:	491c      	ldr	r1, [pc, #112]	; (1ca88 <z_fatal_error+0xd0>)
   1ca18:	481f      	ldr	r0, [pc, #124]	; (1ca98 <z_fatal_error+0xe0>)
   1ca1a:	1a61      	subs	r1, r4, r1
   1ca1c:	0889      	lsrs	r1, r1, #2
   1ca1e:	0189      	lsls	r1, r1, #6
   1ca20:	f041 0101 	orr.w	r1, r1, #1
   1ca24:	f002 fa87 	bl	1ef36 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1ca28:	6823      	ldr	r3, [r4, #0]
   1ca2a:	075b      	lsls	r3, r3, #29
   1ca2c:	d00f      	beq.n	1ca4e <z_fatal_error+0x96>
   1ca2e:	4b16      	ldr	r3, [pc, #88]	; (1ca88 <z_fatal_error+0xd0>)
   1ca30:	1ae4      	subs	r4, r4, r3
   1ca32:	08a4      	lsrs	r4, r4, #2
   1ca34:	01a4      	lsls	r4, r4, #6
   1ca36:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1ca3a:	b9b5      	cbnz	r5, 1ca6a <z_fatal_error+0xb2>
		thread_name = "unknown";
   1ca3c:	4817      	ldr	r0, [pc, #92]	; (1ca9c <z_fatal_error+0xe4>)
   1ca3e:	f7f3 ff9f 	bl	10980 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   1ca42:	4623      	mov	r3, r4
   1ca44:	4602      	mov	r2, r0
   1ca46:	4629      	mov	r1, r5
   1ca48:	4815      	ldr	r0, [pc, #84]	; (1caa0 <z_fatal_error+0xe8>)
   1ca4a:	f002 fa95 	bl	1ef78 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1ca4e:	4639      	mov	r1, r7
   1ca50:	4630      	mov	r0, r6
   1ca52:	f7fe fbaf 	bl	1b1b4 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1ca56:	f388 8811 	msr	BASEPRI, r8
   1ca5a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1ca5e:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1ca60:	b002      	add	sp, #8
   1ca62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ca66:	f7f7 bf7b 	b.w	14960 <z_impl_k_thread_abort>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1ca6a:	4628      	mov	r0, r5
   1ca6c:	f005 ff1d 	bl	228aa <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1ca70:	2800      	cmp	r0, #0
   1ca72:	d0e3      	beq.n	1ca3c <z_fatal_error+0x84>
   1ca74:	7803      	ldrb	r3, [r0, #0]
   1ca76:	2b00      	cmp	r3, #0
   1ca78:	d0e0      	beq.n	1ca3c <z_fatal_error+0x84>
   1ca7a:	e7e0      	b.n	1ca3e <z_fatal_error+0x86>
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1ca7c:	2f00      	cmp	r7, #0
   1ca7e:	d1c3      	bne.n	1ca08 <z_fatal_error+0x50>
   1ca80:	e7e5      	b.n	1ca4e <z_fatal_error+0x96>
   1ca82:	bf00      	nop
   1ca84:	20000698 	.word	0x20000698
   1ca88:	20000654 	.word	0x20000654
   1ca8c:	00026e30 	.word	0x00026e30
   1ca90:	00024368 	.word	0x00024368
   1ca94:	00026e1a 	.word	0x00026e1a
   1ca98:	00026e58 	.word	0x00026e58
   1ca9c:	00026e28 	.word	0x00026e28
   1caa0:	00026e79 	.word	0x00026e79

0001caa4 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   1caa4:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   1caa6:	4b15      	ldr	r3, [pc, #84]	; (1cafc <init_idle_thread+0x58>)
	k_thread_stack_t *stack = z_idle_stacks[i];

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   1caa8:	4a15      	ldr	r2, [pc, #84]	; (1cb00 <init_idle_thread+0x5c>)
{
   1caaa:	b088      	sub	sp, #32
	snprintk(tname, 8, "idle %02d", i);
   1caac:	ae06      	add	r6, sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   1caae:	25b8      	movs	r5, #184	; 0xb8
   1cab0:	fb05 3500 	mla	r5, r5, r0, r3
{
   1cab4:	4604      	mov	r4, r0
	snprintk(tname, 8, "idle %02d", i);
   1cab6:	4603      	mov	r3, r0
   1cab8:	2108      	movs	r1, #8
   1caba:	4630      	mov	r0, r6
   1cabc:	f001 fd16 	bl	1e4ec <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   1cac0:	230f      	movs	r3, #15
   1cac2:	2201      	movs	r2, #1
   1cac4:	e9cd 3203 	strd	r3, r2, [sp, #12]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1cac8:	4a0e      	ldr	r2, [pc, #56]	; (1cb04 <init_idle_thread+0x60>)
	z_setup_new_thread(thread, stack,
   1caca:	490f      	ldr	r1, [pc, #60]	; (1cb08 <init_idle_thread+0x64>)
   1cacc:	9605      	str	r6, [sp, #20]
   1cace:	2300      	movs	r3, #0
   1cad0:	e9cd 3301 	strd	r3, r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1cad4:	2318      	movs	r3, #24
   1cad6:	fb03 2304 	mla	r3, r3, r4, r2
	z_setup_new_thread(thread, stack,
   1cada:	f44f 70b0 	mov.w	r0, #352	; 0x160
   1cade:	9300      	str	r3, [sp, #0]
   1cae0:	fb00 1104 	mla	r1, r0, r4, r1
   1cae4:	4b09      	ldr	r3, [pc, #36]	; (1cb0c <init_idle_thread+0x68>)
   1cae6:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1caea:	4628      	mov	r0, r5
   1caec:	f000 f990 	bl	1ce10 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1caf0:	7b6b      	ldrb	r3, [r5, #13]
   1caf2:	f023 0304 	bic.w	r3, r3, #4
   1caf6:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   1caf8:	b008      	add	sp, #32
   1cafa:	bd70      	pop	{r4, r5, r6, pc}
   1cafc:	20001e00 	.word	0x20001e00
   1cb00:	00026edb 	.word	0x00026edb
   1cb04:	2000279c 	.word	0x2000279c
   1cb08:	20005400 	.word	0x20005400
   1cb0c:	0001cffd 	.word	0x0001cffd

0001cb10 <bg_thread_main>:
{
   1cb10:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1cb12:	4b0a      	ldr	r3, [pc, #40]	; (1cb3c <bg_thread_main+0x2c>)
   1cb14:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1cb16:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1cb18:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1cb1a:	f7ff feed 	bl	1c8f8 <z_sys_init_run_level>
	boot_banner();
   1cb1e:	f006 fbd0 	bl	232c2 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1cb22:	2003      	movs	r0, #3
   1cb24:	f7ff fee8 	bl	1c8f8 <z_sys_init_run_level>
	z_init_static_threads();
   1cb28:	f000 fa06 	bl	1cf38 <z_init_static_threads>
	main();
   1cb2c:	f001 fc8e 	bl	1e44c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1cb30:	4a03      	ldr	r2, [pc, #12]	; (1cb40 <bg_thread_main+0x30>)
   1cb32:	7b13      	ldrb	r3, [r2, #12]
   1cb34:	f023 0301 	bic.w	r3, r3, #1
   1cb38:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1cb3a:	bd08      	pop	{r3, pc}
   1cb3c:	2000320c 	.word	0x2000320c
   1cb40:	20001eb8 	.word	0x20001eb8

0001cb44 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1cb44:	4802      	ldr	r0, [pc, #8]	; (1cb50 <z_bss_zero+0xc>)
   1cb46:	4a03      	ldr	r2, [pc, #12]	; (1cb54 <z_bss_zero+0x10>)
   1cb48:	2100      	movs	r1, #0
   1cb4a:	1a12      	subs	r2, r2, r0
   1cb4c:	f004 b930 	b.w	20db0 <memset>
   1cb50:	200008e8 	.word	0x200008e8
   1cb54:	20003210 	.word	0x20003210

0001cb58 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1cb58:	b580      	push	{r7, lr}
   1cb5a:	b0b4      	sub	sp, #208	; 0xd0
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1cb5c:	f7f3 fe4e 	bl	107fc <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1cb60:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 1cc3c <z_cstart+0xe4>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1cb64:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1cb68:	4d2e      	ldr	r5, [pc, #184]	; (1cc24 <z_cstart+0xcc>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1cb6a:	4e2f      	ldr	r6, [pc, #188]	; (1cc28 <z_cstart+0xd0>)
   1cb6c:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1cb6e:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 1cc40 <z_cstart+0xe8>
   1cb72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1cb76:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1cb78:	23e0      	movs	r3, #224	; 0xe0
   1cb7a:	2400      	movs	r4, #0
   1cb7c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1cb80:	2320      	movs	r3, #32
   1cb82:	77eb      	strb	r3, [r5, #31]
   1cb84:	762c      	strb	r4, [r5, #24]
   1cb86:	766c      	strb	r4, [r5, #25]
   1cb88:	76ac      	strb	r4, [r5, #26]
   1cb8a:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1cb8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1cb90:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1cb94:	626b      	str	r3, [r5, #36]	; 0x24
   1cb96:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1cb9a:	f7f7 fe4f 	bl	1483c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1cb9e:	f7f7 f99f 	bl	13ee0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1cba2:	f04f 33ff 	mov.w	r3, #4294967295
   1cba6:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1cba8:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1cbaa:	f7f7 ff9f 	bl	14aec <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1cbae:	f7f7 fee9 	bl	14984 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1cbb2:	f240 1301 	movw	r3, #257	; 0x101
   1cbb6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1cbba:	ab06      	add	r3, sp, #24
   1cbbc:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   1cbbe:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1cbc2:	f005 fd98 	bl	226f6 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1cbc6:	4620      	mov	r0, r4
   1cbc8:	f7ff fe96 	bl	1c8f8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1cbcc:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   1cbce:	4d17      	ldr	r5, [pc, #92]	; (1cc2c <z_cstart+0xd4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1cbd0:	f7ff fe92 	bl	1c8f8 <z_sys_init_run_level>
	z_sched_init();
   1cbd4:	f001 f844 	bl	1dc60 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1cbd8:	4b15      	ldr	r3, [pc, #84]	; (1cc30 <z_cstart+0xd8>)
   1cbda:	9305      	str	r3, [sp, #20]
   1cbdc:	2301      	movs	r3, #1
   1cbde:	4915      	ldr	r1, [pc, #84]	; (1cc34 <z_cstart+0xdc>)
   1cbe0:	9400      	str	r4, [sp, #0]
   1cbe2:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1cbe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1cbea:	464b      	mov	r3, r9
   1cbec:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1cbf0:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   1cbf2:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1cbf4:	f000 f90c 	bl	1ce10 <z_setup_new_thread>
   1cbf8:	7b6a      	ldrb	r2, [r5, #13]
   1cbfa:	f022 0204 	bic.w	r2, r2, #4
   1cbfe:	736a      	strb	r2, [r5, #13]
   1cc00:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
   1cc02:	4628      	mov	r0, r5
   1cc04:	f006 f8a1 	bl	22d4a <z_ready_thread>
		init_idle_thread(i);
   1cc08:	4620      	mov	r0, r4
   1cc0a:	f7ff ff4b 	bl	1caa4 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1cc0e:	4b0a      	ldr	r3, [pc, #40]	; (1cc38 <z_cstart+0xe0>)
   1cc10:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1cc12:	464a      	mov	r2, r9
   1cc14:	4639      	mov	r1, r7
   1cc16:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   1cc18:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   1cc1a:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1cc1e:	f7f7 facb 	bl	141b8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1cc22:	bf00      	nop
   1cc24:	e000ed00 	.word	0xe000ed00
   1cc28:	2000279c 	.word	0x2000279c
   1cc2c:	20001eb8 	.word	0x20001eb8
   1cc30:	00026ee5 	.word	0x00026ee5
   1cc34:	20004fe0 	.word	0x20004fe0
   1cc38:	20001e00 	.word	0x20001e00
   1cc3c:	20005d80 	.word	0x20005d80
   1cc40:	0001cb11 	.word	0x0001cb11

0001cc44 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1cc44:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1cc46:	4c06      	ldr	r4, [pc, #24]	; (1cc60 <statics_init+0x1c>)
   1cc48:	4d06      	ldr	r5, [pc, #24]	; (1cc64 <statics_init+0x20>)
   1cc4a:	42ac      	cmp	r4, r5
   1cc4c:	d301      	bcc.n	1cc52 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   1cc4e:	2000      	movs	r0, #0
   1cc50:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1cc52:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1cc56:	4620      	mov	r0, r4
   1cc58:	f005 fd70 	bl	2273c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1cc5c:	3414      	adds	r4, #20
   1cc5e:	e7f4      	b.n	1cc4a <statics_init+0x6>
   1cc60:	20000710 	.word	0x20000710
   1cc64:	20000710 	.word	0x20000710

0001cc68 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1cc68:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1cc6a:	4b0e      	ldr	r3, [pc, #56]	; (1cca4 <init_mem_slab_module+0x3c>)
   1cc6c:	4c0e      	ldr	r4, [pc, #56]	; (1cca8 <init_mem_slab_module+0x40>)
   1cc6e:	42a3      	cmp	r3, r4
   1cc70:	d301      	bcc.n	1cc76 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   1cc72:	2000      	movs	r0, #0
	return rc;
}
   1cc74:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1cc76:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1cc7a:	ea41 0200 	orr.w	r2, r1, r0
   1cc7e:	f012 0203 	ands.w	r2, r2, #3
   1cc82:	d10b      	bne.n	1cc9c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1cc84:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1cc86:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1cc88:	42aa      	cmp	r2, r5
   1cc8a:	d101      	bne.n	1cc90 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1cc8c:	331c      	adds	r3, #28
   1cc8e:	e7ee      	b.n	1cc6e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1cc90:	695e      	ldr	r6, [r3, #20]
   1cc92:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1cc94:	3201      	adds	r2, #1
		slab->free_list = p;
   1cc96:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1cc98:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1cc9a:	e7f5      	b.n	1cc88 <init_mem_slab_module+0x20>
		return -EINVAL;
   1cc9c:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1cca0:	e7e8      	b.n	1cc74 <init_mem_slab_module+0xc>
   1cca2:	bf00      	nop
   1cca4:	200006bc 	.word	0x200006bc
   1cca8:	20000710 	.word	0x20000710

0001ccac <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1ccac:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1ccae:	460c      	mov	r4, r1
   1ccb0:	4616      	mov	r6, r2
   1ccb2:	461f      	mov	r7, r3
	__asm__ volatile(
   1ccb4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ccb8:	f3ef 8111 	mrs	r1, BASEPRI
   1ccbc:	f383 8812 	msr	BASEPRI_MAX, r3
   1ccc0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1ccc4:	6943      	ldr	r3, [r0, #20]
   1ccc6:	b15b      	cbz	r3, 1cce0 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1ccc8:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1ccca:	681b      	ldr	r3, [r3, #0]
   1cccc:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1ccce:	6983      	ldr	r3, [r0, #24]
   1ccd0:	3301      	adds	r3, #1
   1ccd2:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1ccd4:	2000      	movs	r0, #0
	__asm__ volatile(
   1ccd6:	f381 8811 	msr	BASEPRI, r1
   1ccda:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1ccde:	e011      	b.n	1cd04 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1cce0:	ea56 0207 	orrs.w	r2, r6, r7
   1cce4:	d103      	bne.n	1ccee <k_mem_slab_alloc+0x42>
		*mem = NULL;
   1cce6:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1cce8:	f06f 000b 	mvn.w	r0, #11
   1ccec:	e7f3      	b.n	1ccd6 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1ccee:	4602      	mov	r2, r0
   1ccf0:	e9cd 6700 	strd	r6, r7, [sp]
   1ccf4:	3008      	adds	r0, #8
   1ccf6:	f000 ff05 	bl	1db04 <z_pend_curr>
		if (result == 0) {
   1ccfa:	b918      	cbnz	r0, 1cd04 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1ccfc:	4b02      	ldr	r3, [pc, #8]	; (1cd08 <k_mem_slab_alloc+0x5c>)
   1ccfe:	689b      	ldr	r3, [r3, #8]
   1cd00:	695b      	ldr	r3, [r3, #20]
   1cd02:	6023      	str	r3, [r4, #0]
}
   1cd04:	b002      	add	sp, #8
   1cd06:	bdd0      	pop	{r4, r6, r7, pc}
   1cd08:	2000279c 	.word	0x2000279c

0001cd0c <k_thread_foreach>:

#define _FOREACH_STATIC_THREAD(thread_data)              \
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data)

void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data)
{
   1cd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cd0e:	4605      	mov	r5, r0
   1cd10:	460e      	mov	r6, r1
	__asm__ volatile(
   1cd12:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cd16:	f3ef 8711 	mrs	r7, BASEPRI
   1cd1a:	f383 8812 	msr	BASEPRI_MAX, r3
   1cd1e:	f3bf 8f6f 	isb	sy
	 */
	key = k_spin_lock(&z_thread_monitor_lock);

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, foreach);

	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
   1cd22:	4b06      	ldr	r3, [pc, #24]	; (1cd3c <k_thread_foreach+0x30>)
   1cd24:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   1cd26:	b924      	cbnz	r4, 1cd32 <k_thread_foreach+0x26>
	__asm__ volatile(
   1cd28:	f387 8811 	msr	BASEPRI, r7
   1cd2c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, foreach);

	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
}
   1cd30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		user_cb(thread, user_data);
   1cd32:	4620      	mov	r0, r4
   1cd34:	4631      	mov	r1, r6
   1cd36:	47a8      	blx	r5
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
   1cd38:	6f64      	ldr	r4, [r4, #116]	; 0x74
   1cd3a:	e7f4      	b.n	1cd26 <k_thread_foreach+0x1a>
   1cd3c:	2000279c 	.word	0x2000279c

0001cd40 <z_thread_monitor_exit>:
	__asm__ volatile(
   1cd40:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cd44:	f3ef 8111 	mrs	r1, BASEPRI
   1cd48:	f383 8812 	msr	BASEPRI_MAX, r3
   1cd4c:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   1cd50:	4a09      	ldr	r2, [pc, #36]	; (1cd78 <z_thread_monitor_exit+0x38>)
   1cd52:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1cd54:	4283      	cmp	r3, r0
   1cd56:	d107      	bne.n	1cd68 <z_thread_monitor_exit+0x28>
		_kernel.threads = _kernel.threads->next_thread;
   1cd58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   1cd5a:	6293      	str	r3, [r2, #40]	; 0x28
	__asm__ volatile(
   1cd5c:	f381 8811 	msr	BASEPRI, r1
   1cd60:	f3bf 8f6f 	isb	sy
			prev_thread->next_thread = thread->next_thread;
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   1cd64:	4770      	bx	lr
   1cd66:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   1cd68:	2b00      	cmp	r3, #0
   1cd6a:	d0f7      	beq.n	1cd5c <z_thread_monitor_exit+0x1c>
			(thread != prev_thread->next_thread)) {
   1cd6c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   1cd6e:	4282      	cmp	r2, r0
   1cd70:	d1f9      	bne.n	1cd66 <z_thread_monitor_exit+0x26>
			prev_thread->next_thread = thread->next_thread;
   1cd72:	6f42      	ldr	r2, [r0, #116]	; 0x74
   1cd74:	675a      	str	r2, [r3, #116]	; 0x74
   1cd76:	e7f1      	b.n	1cd5c <z_thread_monitor_exit+0x1c>
   1cd78:	2000279c 	.word	0x2000279c

0001cd7c <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   1cd7c:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   1cd7e:	4604      	mov	r4, r0
   1cd80:	b908      	cbnz	r0, 1cd86 <z_impl_k_thread_name_set+0xa>
		thread = _current;
   1cd82:	4b05      	ldr	r3, [pc, #20]	; (1cd98 <z_impl_k_thread_name_set+0x1c>)
   1cd84:	689c      	ldr	r4, [r3, #8]
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
   1cd86:	2220      	movs	r2, #32
   1cd88:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1cd8c:	f003 ff92 	bl	20cb4 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1cd90:	2000      	movs	r0, #0
   1cd92:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   1cd96:	bd10      	pop	{r4, pc}
   1cd98:	2000279c 	.word	0x2000279c

0001cd9c <k_thread_state_str>:
#endif /* CONFIG_THREAD_NAME */
}

const char *k_thread_state_str(k_tid_t thread_id)
{
	switch (thread_id->base.thread_state) {
   1cd9c:	7b43      	ldrb	r3, [r0, #13]
   1cd9e:	2b10      	cmp	r3, #16
   1cda0:	d80e      	bhi.n	1cdc0 <k_thread_state_str+0x24>
   1cda2:	2b10      	cmp	r3, #16
   1cda4:	d81c      	bhi.n	1cde0 <k_thread_state_str+0x44>
   1cda6:	e8df f003 	tbb	[pc, r3]
   1cdaa:	091d      	.short	0x091d
   1cdac:	1b151b13 	.word	0x1b151b13
   1cdb0:	1b171b1b 	.word	0x1b171b1b
   1cdb4:	1b1b1b1b 	.word	0x1b1b1b1b
   1cdb8:	1b1b      	.short	0x1b1b
   1cdba:	19          	.byte	0x19
   1cdbb:	00          	.byte	0x00
   1cdbc:	480b      	ldr	r0, [pc, #44]	; (1cdec <k_thread_state_str+0x50>)
   1cdbe:	4770      	bx	lr
   1cdc0:	2b20      	cmp	r3, #32
   1cdc2:	d011      	beq.n	1cde8 <k_thread_state_str+0x4c>
	case _THREAD_SUSPENDED:
		return "suspended";
	case _THREAD_ABORTING:
		return "aborting";
	case _THREAD_QUEUED:
		return "queued";
   1cdc4:	4a0a      	ldr	r2, [pc, #40]	; (1cdf0 <k_thread_state_str+0x54>)
   1cdc6:	480b      	ldr	r0, [pc, #44]	; (1cdf4 <k_thread_state_str+0x58>)
   1cdc8:	2b80      	cmp	r3, #128	; 0x80
   1cdca:	bf08      	it	eq
   1cdcc:	4610      	moveq	r0, r2
   1cdce:	4770      	bx	lr
		return "pending";
   1cdd0:	4809      	ldr	r0, [pc, #36]	; (1cdf8 <k_thread_state_str+0x5c>)
   1cdd2:	4770      	bx	lr
		return "prestart";
   1cdd4:	4809      	ldr	r0, [pc, #36]	; (1cdfc <k_thread_state_str+0x60>)
   1cdd6:	4770      	bx	lr
		return "dead";
   1cdd8:	4809      	ldr	r0, [pc, #36]	; (1ce00 <k_thread_state_str+0x64>)
   1cdda:	4770      	bx	lr
		return "suspended";
   1cddc:	4809      	ldr	r0, [pc, #36]	; (1ce04 <k_thread_state_str+0x68>)
   1cdde:	4770      	bx	lr
	/* Add a break, some day when another case gets added at the end,
	 * this bit of defensive programming will be useful
	 */
		break;
	}
	return "unknown";
   1cde0:	4804      	ldr	r0, [pc, #16]	; (1cdf4 <k_thread_state_str+0x58>)
   1cde2:	4770      	bx	lr
		return "";
   1cde4:	4808      	ldr	r0, [pc, #32]	; (1ce08 <k_thread_state_str+0x6c>)
   1cde6:	4770      	bx	lr
		return "aborting";
   1cde8:	4808      	ldr	r0, [pc, #32]	; (1ce0c <k_thread_state_str+0x70>)
}
   1cdea:	4770      	bx	lr
   1cdec:	00026f0d 	.word	0x00026f0d
   1cdf0:	00026f1c 	.word	0x00026f1c
   1cdf4:	00026e28 	.word	0x00026e28
   1cdf8:	00026eed 	.word	0x00026eed
   1cdfc:	00026ef5 	.word	0x00026ef5
   1ce00:	00026efe 	.word	0x00026efe
   1ce04:	00026f03 	.word	0x00026f03
   1ce08:	00024485 	.word	0x00024485
   1ce0c:	00026f13 	.word	0x00026f13

0001ce10 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1ce10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce14:	b085      	sub	sp, #20
   1ce16:	4698      	mov	r8, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1ce18:	f100 0358 	add.w	r3, r0, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1ce1c:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1ce20:	3207      	adds	r2, #7
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1ce22:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1ce24:	7303      	strb	r3, [r0, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1ce26:	f022 0a07 	bic.w	sl, r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
   1ce2a:	2304      	movs	r3, #4
	thread_base->pended_on = NULL;
   1ce2c:	2500      	movs	r5, #0

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1ce2e:	f101 0b20 	add.w	fp, r1, #32
	thread_base->thread_state = (uint8_t)initial_state;
   1ce32:	7343      	strb	r3, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1ce34:	f10a 0720 	add.w	r7, sl, #32

	thread_base->prio = priority;
   1ce38:	9b11      	ldr	r3, [sp, #68]	; 0x44
	thread_base->pended_on = NULL;
   1ce3a:	6085      	str	r5, [r0, #8]
{
   1ce3c:	4604      	mov	r4, r0
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1ce3e:	e9c0 5506 	strd	r5, r5, [r0, #24]
   1ce42:	460e      	mov	r6, r1
	thread_base->prio = priority;
   1ce44:	7383      	strb	r3, [r0, #14]

	thread_base->sched_locked = 0U;
   1ce46:	73c5      	strb	r5, [r0, #15]
	stack_ptr = (char *)stack + stack_obj_size;
   1ce48:	440f      	add	r7, r1
	memset(stack_buf_start, 0xaa, stack_buf_size);
   1ce4a:	4652      	mov	r2, sl
   1ce4c:	21aa      	movs	r1, #170	; 0xaa
   1ce4e:	4658      	mov	r0, fp
{
   1ce50:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
	memset(stack_buf_start, 0xaa, stack_buf_size);
   1ce54:	f003 ffac 	bl	20db0 <memset>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1ce58:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1ce5a:	9302      	str	r3, [sp, #8]
   1ce5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ce5e:	9301      	str	r3, [sp, #4]
   1ce60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ce62:	9300      	str	r3, [sp, #0]
	new_thread->stack_info.size = stack_buf_size;
   1ce64:	e9c4 ba27 	strd	fp, sl, [r4, #156]	; 0x9c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1ce68:	4643      	mov	r3, r8
	new_thread->stack_info.delta = delta;
   1ce6a:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1ce6e:	463a      	mov	r2, r7
   1ce70:	4631      	mov	r1, r6
   1ce72:	4620      	mov	r0, r4
   1ce74:	f7f7 f968 	bl	14148 <arch_new_thread>
	new_thread->entry.parameter1 = p1;
   1ce78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ce7a:	66a3      	str	r3, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   1ce7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ce7e:	66e3      	str	r3, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   1ce80:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->init_data = NULL;
   1ce82:	6565      	str	r5, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
   1ce84:	f8c4 8064 	str.w	r8, [r4, #100]	; 0x64
	new_thread->entry.parameter3 = p3;
   1ce88:	6723      	str	r3, [r4, #112]	; 0x70
	__asm__ volatile(
   1ce8a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ce8e:	f3ef 8211 	mrs	r2, BASEPRI
   1ce92:	f383 8812 	msr	BASEPRI_MAX, r3
   1ce96:	f3bf 8f6f 	isb	sy
	new_thread->next_thread = _kernel.threads;
   1ce9a:	4e10      	ldr	r6, [pc, #64]	; (1cedc <z_setup_new_thread+0xcc>)
   1ce9c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   1ce9e:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   1cea0:	62b4      	str	r4, [r6, #40]	; 0x28
	__asm__ volatile(
   1cea2:	f382 8811 	msr	BASEPRI, r2
   1cea6:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
   1ceaa:	f1b9 0f00 	cmp.w	r9, #0
   1ceae:	d011      	beq.n	1ced4 <z_setup_new_thread+0xc4>
		strncpy(new_thread->name, name,
   1ceb0:	221f      	movs	r2, #31
   1ceb2:	4649      	mov	r1, r9
   1ceb4:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1ceb8:	f003 fefc 	bl	20cb4 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1cebc:	f884 5097 	strb.w	r5, [r4, #151]	; 0x97
	if (!_current) {
   1cec0:	68b3      	ldr	r3, [r6, #8]
   1cec2:	b10b      	cbz	r3, 1cec8 <z_setup_new_thread+0xb8>
	new_thread->resource_pool = _current->resource_pool;
   1cec4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	return stack_ptr;
   1cec8:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
   1cecc:	4638      	mov	r0, r7
   1cece:	b005      	add	sp, #20
   1ced0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   1ced4:	f884 9078 	strb.w	r9, [r4, #120]	; 0x78
   1ced8:	e7f2      	b.n	1cec0 <z_setup_new_thread+0xb0>
   1ceda:	bf00      	nop
   1cedc:	2000279c 	.word	0x2000279c

0001cee0 <z_impl_k_thread_create>:
{
   1cee0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cee2:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1cee4:	2500      	movs	r5, #0
   1cee6:	9505      	str	r5, [sp, #20]
   1cee8:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1ceea:	9504      	str	r5, [sp, #16]
   1ceec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1ceee:	9503      	str	r5, [sp, #12]
   1cef0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1cef2:	9502      	str	r5, [sp, #8]
{
   1cef4:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1cef8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1cefa:	9501      	str	r5, [sp, #4]
   1cefc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1cefe:	9500      	str	r5, [sp, #0]
{
   1cf00:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1cf02:	f7ff ff85 	bl	1ce10 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1cf06:	1c7b      	adds	r3, r7, #1
   1cf08:	bf08      	it	eq
   1cf0a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1cf0e:	d005      	beq.n	1cf1c <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1cf10:	ea56 0307 	orrs.w	r3, r6, r7
   1cf14:	d105      	bne.n	1cf22 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1cf16:	4620      	mov	r0, r4
   1cf18:	f000 fd98 	bl	1da4c <z_sched_start>
}
   1cf1c:	4620      	mov	r0, r4
   1cf1e:	b007      	add	sp, #28
   1cf20:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1cf22:	4904      	ldr	r1, [pc, #16]	; (1cf34 <z_impl_k_thread_create+0x54>)
   1cf24:	4632      	mov	r2, r6
   1cf26:	463b      	mov	r3, r7
   1cf28:	f104 0018 	add.w	r0, r4, #24
   1cf2c:	f001 f834 	bl	1df98 <z_add_timeout>
   1cf30:	e7f4      	b.n	1cf1c <z_impl_k_thread_create+0x3c>
   1cf32:	bf00      	nop
   1cf34:	00022d6b 	.word	0x00022d6b

0001cf38 <z_init_static_threads>:
{
   1cf38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1cf3c:	4e2a      	ldr	r6, [pc, #168]	; (1cfe8 <z_init_static_threads+0xb0>)
   1cf3e:	4d2b      	ldr	r5, [pc, #172]	; (1cfec <z_init_static_threads+0xb4>)
{
   1cf40:	b086      	sub	sp, #24
   1cf42:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   1cf44:	42b5      	cmp	r5, r6
   1cf46:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1cf4a:	d310      	bcc.n	1cf6e <z_init_static_threads+0x36>
	k_sched_lock();
   1cf4c:	f000 fc92 	bl	1d874 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1cf50:	4c26      	ldr	r4, [pc, #152]	; (1cfec <z_init_static_threads+0xb4>)
   1cf52:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1cff0 <z_init_static_threads+0xb8>
   1cf56:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1cf5a:	f240 36e7 	movw	r6, #999	; 0x3e7
   1cf5e:	2700      	movs	r7, #0
   1cf60:	4544      	cmp	r4, r8
   1cf62:	d321      	bcc.n	1cfa8 <z_init_static_threads+0x70>
}
   1cf64:	b006      	add	sp, #24
   1cf66:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   1cf6a:	f000 be5d 	b.w	1dc28 <k_sched_unlock>
		z_setup_new_thread(
   1cf6e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1cf72:	9305      	str	r3, [sp, #20]
   1cf74:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1cf78:	9304      	str	r3, [sp, #16]
   1cf7a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1cf7e:	9303      	str	r3, [sp, #12]
   1cf80:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1cf84:	9302      	str	r3, [sp, #8]
   1cf86:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1cf8a:	9301      	str	r3, [sp, #4]
   1cf8c:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1cf90:	9300      	str	r3, [sp, #0]
   1cf92:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1cf96:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1cf9a:	f7ff ff39 	bl	1ce10 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1cf9e:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1cfa2:	655d      	str	r5, [r3, #84]	; 0x54
   1cfa4:	4625      	mov	r5, r4
   1cfa6:	e7cd      	b.n	1cf44 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1cfa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cfaa:	1c5a      	adds	r2, r3, #1
   1cfac:	d00d      	beq.n	1cfca <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   1cfae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1cfb2:	4630      	mov	r0, r6
   1cfb4:	4639      	mov	r1, r7
   1cfb6:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1cfba:	42b9      	cmp	r1, r7
   1cfbc:	bf08      	it	eq
   1cfbe:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   1cfc0:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1cfc2:	d104      	bne.n	1cfce <z_init_static_threads+0x96>
	z_sched_start(thread);
   1cfc4:	4628      	mov	r0, r5
   1cfc6:	f000 fd41 	bl	1da4c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1cfca:	3430      	adds	r4, #48	; 0x30
   1cfcc:	e7c8      	b.n	1cf60 <z_init_static_threads+0x28>
   1cfce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cfd2:	2300      	movs	r3, #0
   1cfd4:	f7e3 f882 	bl	dc <__aeabi_uldivmod>
   1cfd8:	4602      	mov	r2, r0
   1cfda:	460b      	mov	r3, r1
   1cfdc:	f105 0018 	add.w	r0, r5, #24
   1cfe0:	4651      	mov	r1, sl
   1cfe2:	f000 ffd9 	bl	1df98 <z_add_timeout>
   1cfe6:	e7f0      	b.n	1cfca <z_init_static_threads+0x92>
   1cfe8:	200006bc 	.word	0x200006bc
   1cfec:	200006bc 	.word	0x200006bc
   1cff0:	00022d6b 	.word	0x00022d6b

0001cff4 <sys_kernel_version_get>:
 * @return kernel version
 */
uint32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
   1cff4:	4800      	ldr	r0, [pc, #0]	; (1cff8 <sys_kernel_version_get+0x4>)
   1cff6:	4770      	bx	lr
   1cff8:	02076300 	.word	0x02076300

0001cffc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1cffc:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1cffe:	4c09      	ldr	r4, [pc, #36]	; (1d024 <idle+0x28>)
	__asm__ volatile(
   1d000:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d004:	f3ef 8311 	mrs	r3, BASEPRI
   1d008:	f382 8812 	msr	BASEPRI_MAX, r2
   1d00c:	f3bf 8f6f 	isb	sy
   1d010:	f005 ff6b 	bl	22eea <z_get_next_timeout_expiry>
   1d014:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   1d016:	f7f6 fc2f 	bl	13878 <pm_system_suspend>
   1d01a:	2800      	cmp	r0, #0
   1d01c:	d1f0      	bne.n	1d000 <idle+0x4>
	arch_cpu_idle();
   1d01e:	f7f6 ff65 	bl	13eec <arch_cpu_idle>
}
   1d022:	e7ed      	b.n	1d000 <idle+0x4>
   1d024:	2000279c 	.word	0x2000279c

0001d028 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   1d028:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1d02c:	4604      	mov	r4, r0
   1d02e:	468a      	mov	sl, r1
   1d030:	4616      	mov	r6, r2
   1d032:	461f      	mov	r7, r3

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   1d034:	f100 0908 	add.w	r9, r0, #8
   1d038:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d03c:	f3ef 8811 	mrs	r8, BASEPRI
   1d040:	f383 8812 	msr	BASEPRI_MAX, r3
   1d044:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   1d048:	6a02      	ldr	r2, [r0, #32]
   1d04a:	68c3      	ldr	r3, [r0, #12]
   1d04c:	429a      	cmp	r2, r3
   1d04e:	d230      	bcs.n	1d0b2 <z_impl_k_msgq_put+0x8a>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1d050:	f005 feef 	bl	22e32 <z_unpend_first_thread>
		if (pending_thread != NULL) {
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, 0);

			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   1d054:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   1d056:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   1d058:	4651      	mov	r1, sl
		if (pending_thread != NULL) {
   1d05a:	b180      	cbz	r0, 1d07e <z_impl_k_msgq_put+0x56>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1d05c:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
   1d05e:	6940      	ldr	r0, [r0, #20]
   1d060:	f003 fe9b 	bl	20d9a <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   1d064:	4628      	mov	r0, r5
   1d066:	f8c5 40b0 	str.w	r4, [r5, #176]	; 0xb0
   1d06a:	f005 fe6e 	bl	22d4a <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   1d06e:	4648      	mov	r0, r9
   1d070:	4641      	mov	r1, r8
   1d072:	f000 fbed 	bl	1d850 <z_reschedule>
			return 0;
   1d076:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1d078:	b002      	add	sp, #8
   1d07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   1d07e:	69e0      	ldr	r0, [r4, #28]
   1d080:	f003 fe8b 	bl	20d9a <memcpy>
			msgq->write_ptr += msgq->msg_size;
   1d084:	69e3      	ldr	r3, [r4, #28]
   1d086:	68a2      	ldr	r2, [r4, #8]
   1d088:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1d08a:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1d08c:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1d08e:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1d090:	bf04      	itt	eq
   1d092:	6923      	ldreq	r3, [r4, #16]
   1d094:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   1d096:	6a23      	ldr	r3, [r4, #32]
   1d098:	3301      	adds	r3, #1
	z_handle_obj_poll_events(&msgq->poll_events, state);
   1d09a:	f104 0024 	add.w	r0, r4, #36	; 0x24
			msgq->used_msgs++;
   1d09e:	6223      	str	r3, [r4, #32]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   1d0a0:	2110      	movs	r1, #16
   1d0a2:	f006 f8ec 	bl	2327e <z_handle_obj_poll_events>
		result = 0;
   1d0a6:	2000      	movs	r0, #0
	__asm__ volatile(
   1d0a8:	f388 8811 	msr	BASEPRI, r8
   1d0ac:	f3bf 8f6f 	isb	sy
	return result;
   1d0b0:	e7e2      	b.n	1d078 <z_impl_k_msgq_put+0x50>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d0b2:	ea56 0307 	orrs.w	r3, r6, r7
   1d0b6:	d00a      	beq.n	1d0ce <z_impl_k_msgq_put+0xa6>
		_current->base.swap_data = (void *) data;
   1d0b8:	4b06      	ldr	r3, [pc, #24]	; (1d0d4 <z_impl_k_msgq_put+0xac>)
   1d0ba:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1d0bc:	4602      	mov	r2, r0
		_current->base.swap_data = (void *) data;
   1d0be:	6159      	str	r1, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1d0c0:	4648      	mov	r0, r9
   1d0c2:	e9cd 6700 	strd	r6, r7, [sp]
   1d0c6:	4641      	mov	r1, r8
   1d0c8:	f000 fd1c 	bl	1db04 <z_pend_curr>
		return result;
   1d0cc:	e7d4      	b.n	1d078 <z_impl_k_msgq_put+0x50>
		result = -ENOMSG;
   1d0ce:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1d0d2:	e7e9      	b.n	1d0a8 <z_impl_k_msgq_put+0x80>
   1d0d4:	2000279c 	.word	0x2000279c

0001d0d8 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   1d0d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d0dc:	4604      	mov	r4, r0
   1d0de:	4616      	mov	r6, r2
   1d0e0:	4608      	mov	r0, r1
   1d0e2:	461f      	mov	r7, r3

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   1d0e4:	f104 0908 	add.w	r9, r4, #8
	__asm__ volatile(
   1d0e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d0ec:	f3ef 8811 	mrs	r8, BASEPRI
   1d0f0:	f383 8812 	msr	BASEPRI_MAX, r3
   1d0f4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   1d0f8:	6a23      	ldr	r3, [r4, #32]
   1d0fa:	2b00      	cmp	r3, #0
   1d0fc:	d034      	beq.n	1d168 <z_impl_k_msgq_get+0x90>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   1d0fe:	68a2      	ldr	r2, [r4, #8]
   1d100:	69a1      	ldr	r1, [r4, #24]
   1d102:	f003 fe4a 	bl	20d9a <memcpy>
		msgq->read_ptr += msgq->msg_size;
   1d106:	69a3      	ldr	r3, [r4, #24]
   1d108:	68a2      	ldr	r2, [r4, #8]
   1d10a:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   1d10c:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   1d10e:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   1d110:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   1d112:	bf04      	itt	eq
   1d114:	6923      	ldreq	r3, [r4, #16]
   1d116:	61a3      	streq	r3, [r4, #24]
		}
		msgq->used_msgs--;
   1d118:	6a23      	ldr	r3, [r4, #32]
   1d11a:	3b01      	subs	r3, #1
   1d11c:	6223      	str	r3, [r4, #32]

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1d11e:	4620      	mov	r0, r4
   1d120:	f005 fe87 	bl	22e32 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1d124:	4605      	mov	r5, r0
   1d126:	2800      	cmp	r0, #0
   1d128:	d02e      	beq.n	1d188 <z_impl_k_msgq_get+0xb0>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   1d12a:	6941      	ldr	r1, [r0, #20]
   1d12c:	68a2      	ldr	r2, [r4, #8]
   1d12e:	69e0      	ldr	r0, [r4, #28]
   1d130:	f003 fe33 	bl	20d9a <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   1d134:	69e3      	ldr	r3, [r4, #28]
   1d136:	68a2      	ldr	r2, [r4, #8]
   1d138:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1d13a:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1d13c:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1d13e:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1d140:	bf04      	itt	eq
   1d142:	6923      	ldreq	r3, [r4, #16]
   1d144:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
   1d146:	6a23      	ldr	r3, [r4, #32]
   1d148:	3301      	adds	r3, #1
   1d14a:	6223      	str	r3, [r4, #32]
   1d14c:	2400      	movs	r4, #0

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   1d14e:	4628      	mov	r0, r5
   1d150:	f8c5 40b0 	str.w	r4, [r5, #176]	; 0xb0
   1d154:	f005 fdf9 	bl	22d4a <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   1d158:	4648      	mov	r0, r9
   1d15a:	4641      	mov	r1, r8
   1d15c:	f000 fb78 	bl	1d850 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   1d160:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1d162:	b003      	add	sp, #12
   1d164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d168:	ea56 0307 	orrs.w	r3, r6, r7
   1d16c:	d00a      	beq.n	1d184 <z_impl_k_msgq_get+0xac>
		_current->base.swap_data = data;
   1d16e:	4b09      	ldr	r3, [pc, #36]	; (1d194 <z_impl_k_msgq_get+0xbc>)
   1d170:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1d172:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   1d174:	6159      	str	r1, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1d176:	4648      	mov	r0, r9
   1d178:	e9cd 6700 	strd	r6, r7, [sp]
   1d17c:	4641      	mov	r1, r8
   1d17e:	f000 fcc1 	bl	1db04 <z_pend_curr>
		return result;
   1d182:	e7ee      	b.n	1d162 <z_impl_k_msgq_get+0x8a>
		result = -ENOMSG;
   1d184:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   1d188:	f388 8811 	msr	BASEPRI, r8
   1d18c:	f3bf 8f6f 	isb	sy
	return result;
   1d190:	e7e7      	b.n	1d162 <z_impl_k_msgq_get+0x8a>
   1d192:	bf00      	nop
   1d194:	2000279c 	.word	0x2000279c

0001d198 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1d198:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1d19c:	4604      	mov	r4, r0
   1d19e:	4616      	mov	r6, r2
   1d1a0:	461f      	mov	r7, r3
	__asm__ volatile(
   1d1a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d1a6:	f3ef 8811 	mrs	r8, BASEPRI
   1d1aa:	f383 8812 	msr	BASEPRI_MAX, r3
   1d1ae:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1d1b2:	68c3      	ldr	r3, [r0, #12]
   1d1b4:	4a35      	ldr	r2, [pc, #212]	; (1d28c <z_impl_k_mutex_lock+0xf4>)
   1d1b6:	b16b      	cbz	r3, 1d1d4 <z_impl_k_mutex_lock+0x3c>
   1d1b8:	6880      	ldr	r0, [r0, #8]
   1d1ba:	6891      	ldr	r1, [r2, #8]
   1d1bc:	4288      	cmp	r0, r1
   1d1be:	d019      	beq.n	1d1f4 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1d1c0:	ea56 0307 	orrs.w	r3, r6, r7
   1d1c4:	d118      	bne.n	1d1f8 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1d1c6:	f388 8811 	msr	BASEPRI, r8
   1d1ca:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1d1ce:	f06f 000f 	mvn.w	r0, #15
   1d1d2:	e00c      	b.n	1d1ee <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1d1d4:	6891      	ldr	r1, [r2, #8]
   1d1d6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1d1da:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1d1dc:	3301      	adds	r3, #1
   1d1de:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1d1e0:	6893      	ldr	r3, [r2, #8]
   1d1e2:	60a3      	str	r3, [r4, #8]
   1d1e4:	f388 8811 	msr	BASEPRI, r8
   1d1e8:	f3bf 8f6f 	isb	sy
		return 0;
   1d1ec:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1d1ee:	b002      	add	sp, #8
   1d1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1d1f4:	6921      	ldr	r1, [r4, #16]
   1d1f6:	e7f0      	b.n	1d1da <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1d1f8:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1d1fc:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   1d200:	4299      	cmp	r1, r3
   1d202:	bfa8      	it	ge
   1d204:	4619      	movge	r1, r3
   1d206:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1d20a:	4291      	cmp	r1, r2
   1d20c:	bfb8      	it	lt
   1d20e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1d210:	428b      	cmp	r3, r1
   1d212:	dd2f      	ble.n	1d274 <z_impl_k_mutex_lock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
   1d214:	f000 fc8a 	bl	1db2c <z_set_prio>
   1d218:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1d21a:	e9cd 6700 	strd	r6, r7, [sp]
   1d21e:	481c      	ldr	r0, [pc, #112]	; (1d290 <z_impl_k_mutex_lock+0xf8>)
   1d220:	4622      	mov	r2, r4
   1d222:	4641      	mov	r1, r8
   1d224:	f000 fc6e 	bl	1db04 <z_pend_curr>
	if (got_mutex == 0) {
   1d228:	2800      	cmp	r0, #0
   1d22a:	d0e0      	beq.n	1d1ee <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1d22c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d230:	f3ef 8611 	mrs	r6, BASEPRI
   1d234:	f383 8812 	msr	BASEPRI_MAX, r3
   1d238:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1d23c:	6823      	ldr	r3, [r4, #0]
   1d23e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d240:	429c      	cmp	r4, r3
   1d242:	d00a      	beq.n	1d25a <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1d244:	b14b      	cbz	r3, 1d25a <z_impl_k_mutex_lock+0xc2>
   1d246:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1d24a:	4299      	cmp	r1, r3
   1d24c:	bfa8      	it	ge
   1d24e:	4619      	movge	r1, r3
   1d250:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1d254:	4299      	cmp	r1, r3
   1d256:	bfb8      	it	lt
   1d258:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1d25a:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1d25c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1d260:	4299      	cmp	r1, r3
   1d262:	d109      	bne.n	1d278 <z_impl_k_mutex_lock+0xe0>
	if (resched) {
   1d264:	b16d      	cbz	r5, 1d282 <z_impl_k_mutex_lock+0xea>
		z_reschedule(&lock, key);
   1d266:	480a      	ldr	r0, [pc, #40]	; (1d290 <z_impl_k_mutex_lock+0xf8>)
   1d268:	4631      	mov	r1, r6
   1d26a:	f000 faf1 	bl	1d850 <z_reschedule>
	return -EAGAIN;
   1d26e:	f06f 000a 	mvn.w	r0, #10
   1d272:	e7bc      	b.n	1d1ee <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1d274:	2500      	movs	r5, #0
   1d276:	e7d0      	b.n	1d21a <z_impl_k_mutex_lock+0x82>
		return z_set_prio(mutex->owner, new_prio);
   1d278:	f000 fc58 	bl	1db2c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1d27c:	2800      	cmp	r0, #0
   1d27e:	d1f2      	bne.n	1d266 <z_impl_k_mutex_lock+0xce>
   1d280:	e7f0      	b.n	1d264 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   1d282:	f386 8811 	msr	BASEPRI, r6
   1d286:	f3bf 8f6f 	isb	sy
   1d28a:	e7f0      	b.n	1d26e <z_impl_k_mutex_lock+0xd6>
   1d28c:	2000279c 	.word	0x2000279c
   1d290:	2000320d 	.word	0x2000320d

0001d294 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1d294:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1d296:	6883      	ldr	r3, [r0, #8]
{
   1d298:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1d29a:	2b00      	cmp	r3, #0
   1d29c:	d037      	beq.n	1d30e <z_impl_k_mutex_unlock+0x7a>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1d29e:	4a1f      	ldr	r2, [pc, #124]	; (1d31c <z_impl_k_mutex_unlock+0x88>)
   1d2a0:	6892      	ldr	r2, [r2, #8]
   1d2a2:	4293      	cmp	r3, r2
   1d2a4:	d136      	bne.n	1d314 <z_impl_k_mutex_unlock+0x80>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1d2a6:	7bda      	ldrb	r2, [r3, #15]
   1d2a8:	3a01      	subs	r2, #1
   1d2aa:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1d2ac:	68c3      	ldr	r3, [r0, #12]
   1d2ae:	2b01      	cmp	r3, #1
   1d2b0:	d905      	bls.n	1d2be <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1d2b2:	3b01      	subs	r3, #1
   1d2b4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1d2b6:	f000 fcb7 	bl	1dc28 <k_sched_unlock>

	return 0;
   1d2ba:	2000      	movs	r0, #0
}
   1d2bc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1d2be:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d2c2:	f3ef 8511 	mrs	r5, BASEPRI
   1d2c6:	f383 8812 	msr	BASEPRI_MAX, r3
   1d2ca:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1d2ce:	6901      	ldr	r1, [r0, #16]
   1d2d0:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1d2d2:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1d2d6:	4299      	cmp	r1, r3
   1d2d8:	d001      	beq.n	1d2de <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1d2da:	f000 fc27 	bl	1db2c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1d2de:	4620      	mov	r0, r4
   1d2e0:	f005 fda7 	bl	22e32 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1d2e4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1d2e6:	b160      	cbz	r0, 1d302 <z_impl_k_mutex_unlock+0x6e>
		mutex->owner_orig_prio = new_owner->base.prio;
   1d2e8:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1d2ec:	6122      	str	r2, [r4, #16]
   1d2ee:	2200      	movs	r2, #0
   1d2f0:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   1d2f4:	f005 fd29 	bl	22d4a <z_ready_thread>
		z_reschedule(&lock, key);
   1d2f8:	4809      	ldr	r0, [pc, #36]	; (1d320 <z_impl_k_mutex_unlock+0x8c>)
   1d2fa:	4629      	mov	r1, r5
   1d2fc:	f000 faa8 	bl	1d850 <z_reschedule>
   1d300:	e7d9      	b.n	1d2b6 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1d302:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1d304:	f385 8811 	msr	BASEPRI, r5
   1d308:	f3bf 8f6f 	isb	sy
   1d30c:	e7d3      	b.n	1d2b6 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1d30e:	f06f 0015 	mvn.w	r0, #21
   1d312:	e7d3      	b.n	1d2bc <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1d314:	f04f 30ff 	mov.w	r0, #4294967295
   1d318:	e7d0      	b.n	1d2bc <z_impl_k_mutex_unlock+0x28>
   1d31a:	bf00      	nop
   1d31c:	2000279c 	.word	0x2000279c
   1d320:	2000320d 	.word	0x2000320d

0001d324 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1d324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d326:	4616      	mov	r6, r2
   1d328:	461f      	mov	r7, r3
	__asm__ volatile(
   1d32a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d32e:	f3ef 8511 	mrs	r5, BASEPRI
   1d332:	f383 8812 	msr	BASEPRI_MAX, r3
   1d336:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1d33a:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1d33c:	b19c      	cbz	r4, 1d366 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d33e:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1d340:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d342:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1d346:	4294      	cmp	r4, r2
	list->head = node;
   1d348:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1d34a:	bf08      	it	eq
   1d34c:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1d34e:	2101      	movs	r1, #1
   1d350:	4620      	mov	r0, r4
   1d352:	f005 fb49 	bl	229e8 <z_queue_node_peek>
   1d356:	4604      	mov	r4, r0
	__asm__ volatile(
   1d358:	f385 8811 	msr	BASEPRI, r5
   1d35c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1d360:	4620      	mov	r0, r4
   1d362:	b003      	add	sp, #12
   1d364:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d366:	ea56 0307 	orrs.w	r3, r6, r7
   1d36a:	d0f5      	beq.n	1d358 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1d36c:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1d370:	e9cd 6700 	strd	r6, r7, [sp]
   1d374:	4629      	mov	r1, r5
   1d376:	4610      	mov	r0, r2
   1d378:	f000 fbc4 	bl	1db04 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1d37c:	2800      	cmp	r0, #0
   1d37e:	d1ef      	bne.n	1d360 <z_impl_k_queue_get+0x3c>
   1d380:	4b01      	ldr	r3, [pc, #4]	; (1d388 <z_impl_k_queue_get+0x64>)
   1d382:	689b      	ldr	r3, [r3, #8]
   1d384:	695c      	ldr	r4, [r3, #20]
   1d386:	e7eb      	b.n	1d360 <z_impl_k_queue_get+0x3c>
   1d388:	2000279c 	.word	0x2000279c

0001d38c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1d38c:	b538      	push	{r3, r4, r5, lr}
   1d38e:	4604      	mov	r4, r0
	__asm__ volatile(
   1d390:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d394:	f3ef 8511 	mrs	r5, BASEPRI
   1d398:	f383 8812 	msr	BASEPRI_MAX, r3
   1d39c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1d3a0:	f005 fd47 	bl	22e32 <z_unpend_first_thread>

	if (thread != NULL) {
   1d3a4:	b150      	cbz	r0, 1d3bc <z_impl_k_sem_give+0x30>
   1d3a6:	2200      	movs	r2, #0
   1d3a8:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1d3ac:	f005 fccd 	bl	22d4a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1d3b0:	4629      	mov	r1, r5
   1d3b2:	4808      	ldr	r0, [pc, #32]	; (1d3d4 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1d3b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1d3b8:	f000 ba4a 	b.w	1d850 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1d3bc:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1d3c0:	429a      	cmp	r2, r3
   1d3c2:	bf18      	it	ne
   1d3c4:	3301      	addne	r3, #1
   1d3c6:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1d3c8:	2102      	movs	r1, #2
   1d3ca:	f104 0010 	add.w	r0, r4, #16
   1d3ce:	f005 ff56 	bl	2327e <z_handle_obj_poll_events>
}
   1d3d2:	e7ed      	b.n	1d3b0 <z_impl_k_sem_give+0x24>
   1d3d4:	2000320d 	.word	0x2000320d

0001d3d8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1d3d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d3da:	4614      	mov	r4, r2
   1d3dc:	461d      	mov	r5, r3
   1d3de:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d3e2:	f3ef 8111 	mrs	r1, BASEPRI
   1d3e6:	f383 8812 	msr	BASEPRI_MAX, r3
   1d3ea:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1d3ee:	6883      	ldr	r3, [r0, #8]
   1d3f0:	b143      	cbz	r3, 1d404 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1d3f2:	3b01      	subs	r3, #1
   1d3f4:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1d3f6:	f381 8811 	msr	BASEPRI, r1
   1d3fa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1d3fe:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1d400:	b003      	add	sp, #12
   1d402:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d404:	ea54 0305 	orrs.w	r3, r4, r5
   1d408:	d106      	bne.n	1d418 <z_impl_k_sem_take+0x40>
   1d40a:	f381 8811 	msr	BASEPRI, r1
   1d40e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1d412:	f06f 000f 	mvn.w	r0, #15
   1d416:	e7f3      	b.n	1d400 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1d418:	4602      	mov	r2, r0
   1d41a:	e9cd 4500 	strd	r4, r5, [sp]
   1d41e:	4802      	ldr	r0, [pc, #8]	; (1d428 <z_impl_k_sem_take+0x50>)
   1d420:	f000 fb70 	bl	1db04 <z_pend_curr>
	return ret;
   1d424:	e7ec      	b.n	1d400 <z_impl_k_sem_take+0x28>
   1d426:	bf00      	nop
   1d428:	2000320d 	.word	0x2000320d

0001d42c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1d42c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1d42e:	4b09      	ldr	r3, [pc, #36]	; (1d454 <k_sys_work_q_init+0x28>)
   1d430:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1d432:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1d434:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1d436:	9300      	str	r3, [sp, #0]
   1d438:	4907      	ldr	r1, [pc, #28]	; (1d458 <k_sys_work_q_init+0x2c>)
   1d43a:	4808      	ldr	r0, [pc, #32]	; (1d45c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1d43c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1d440:	f04f 33ff 	mov.w	r3, #4294967295
   1d444:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1d448:	f000 f91c 	bl	1d684 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1d44c:	4620      	mov	r0, r4
   1d44e:	b004      	add	sp, #16
   1d450:	bd10      	pop	{r4, pc}
   1d452:	bf00      	nop
   1d454:	00026f23 	.word	0x00026f23
   1d458:	20005d80 	.word	0x20005d80
   1d45c:	20001f70 	.word	0x20001f70

0001d460 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1d460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1d464:	4e4b      	ldr	r6, [pc, #300]	; (1d594 <work_queue_main+0x134>)
{
   1d466:	b085      	sub	sp, #20
   1d468:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1d46a:	f04f 38ff 	mov.w	r8, #4294967295
   1d46e:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
   1d472:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d476:	f3ef 8711 	mrs	r7, BASEPRI
   1d47a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d47e:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1d482:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
	return list->head;
   1d486:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
Z_GENLIST_GET(slist, snode)
   1d48a:	b985      	cbnz	r5, 1d4ae <work_queue_main+0x4e>
	*flagp &= ~BIT(bit);
   1d48c:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
   1d490:	075d      	lsls	r5, r3, #29
	*flagp &= ~BIT(bit);
   1d492:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
		} else if (flag_test_and_clear(&queue->flags,
   1d496:	d433      	bmi.n	1d500 <work_queue_main+0xa0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1d498:	2300      	movs	r3, #0
   1d49a:	e9cd 8900 	strd	r8, r9, [sp]
   1d49e:	9302      	str	r3, [sp, #8]
   1d4a0:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
   1d4a4:	4639      	mov	r1, r7
   1d4a6:	483c      	ldr	r0, [pc, #240]	; (1d598 <work_queue_main+0x138>)
   1d4a8:	f000 fcfa 	bl	1dea0 <z_sched_wait>
			continue;
   1d4ac:	e7e1      	b.n	1d472 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d4ae:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1d4b2:	6829      	ldr	r1, [r5, #0]
	list->head = node;
   1d4b4:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d4b8:	4295      	cmp	r5, r2
   1d4ba:	d101      	bne.n	1d4c0 <work_queue_main+0x60>
	list->tail = node;
   1d4bc:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
	*flagp |= BIT(bit);
   1d4c0:	f043 0302 	orr.w	r3, r3, #2
   1d4c4:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   1d4c8:	68eb      	ldr	r3, [r5, #12]
   1d4ca:	f023 0304 	bic.w	r3, r3, #4
   1d4ce:	f043 0301 	orr.w	r3, r3, #1
   1d4d2:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1d4d4:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   1d4d6:	f387 8811 	msr	BASEPRI, r7
   1d4da:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   1d4de:	4628      	mov	r0, r5
   1d4e0:	4798      	blx	r3
	__asm__ volatile(
   1d4e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d4e6:	f3ef 8b11 	mrs	fp, BASEPRI
   1d4ea:	f383 8812 	msr	BASEPRI_MAX, r3
   1d4ee:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1d4f2:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1d4f4:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1d4f6:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1d4fa:	d40b      	bmi.n	1d514 <work_queue_main+0xb4>
	*flagp &= ~BIT(bit);
   1d4fc:	60ea      	str	r2, [r5, #12]
   1d4fe:	e00e      	b.n	1d51e <work_queue_main+0xbe>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1d500:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1d504:	2200      	movs	r2, #0
   1d506:	2101      	movs	r1, #1
   1d508:	4628      	mov	r0, r5
   1d50a:	f005 fcba 	bl	22e82 <z_sched_wake>
   1d50e:	2800      	cmp	r0, #0
   1d510:	d1f8      	bne.n	1d504 <work_queue_main+0xa4>
   1d512:	e7c1      	b.n	1d498 <work_queue_main+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1d514:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   1d516:	f023 0303 	bic.w	r3, r3, #3
   1d51a:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1d51c:	b970      	cbnz	r0, 1d53c <work_queue_main+0xdc>
	*flagp &= ~BIT(bit);
   1d51e:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   1d522:	f023 0302 	bic.w	r3, r3, #2
   1d526:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	__asm__ volatile(
   1d52a:	f38b 8811 	msr	BASEPRI, fp
   1d52e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1d532:	05d8      	lsls	r0, r3, #23
   1d534:	d49d      	bmi.n	1d472 <work_queue_main+0x12>
	z_impl_k_yield();
   1d536:	f000 fb9f 	bl	1dc78 <z_impl_k_yield>
}
   1d53a:	e79a      	b.n	1d472 <work_queue_main+0x12>
	return node->next;
   1d53c:	6807      	ldr	r7, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d53e:	f04f 0a00 	mov.w	sl, #0
   1d542:	2f00      	cmp	r7, #0
   1d544:	bf38      	it	cc
   1d546:	2700      	movcc	r7, #0
	parent->next = child;
   1d548:	4653      	mov	r3, sl
		if (wc->work == work) {
   1d54a:	6842      	ldr	r2, [r0, #4]
   1d54c:	4295      	cmp	r5, r2
   1d54e:	4601      	mov	r1, r0
   1d550:	d10e      	bne.n	1d570 <work_queue_main+0x110>
Z_GENLIST_REMOVE(slist, snode)
   1d552:	6801      	ldr	r1, [r0, #0]
   1d554:	f1ba 0f00 	cmp.w	sl, #0
   1d558:	d114      	bne.n	1d584 <work_queue_main+0x124>
   1d55a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   1d55c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d55e:	4290      	cmp	r0, r2
   1d560:	d100      	bne.n	1d564 <work_queue_main+0x104>
	list->tail = node;
   1d562:	6071      	str	r1, [r6, #4]
	parent->next = child;
   1d564:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1d568:	f7ff ff10 	bl	1d38c <z_impl_k_sem_give>
}
   1d56c:	4651      	mov	r1, sl
   1d56e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1d570:	2f00      	cmp	r7, #0
   1d572:	d0d4      	beq.n	1d51e <work_queue_main+0xbe>
	return node->next;
   1d574:	683a      	ldr	r2, [r7, #0]
   1d576:	2a00      	cmp	r2, #0
   1d578:	bf38      	it	cc
   1d57a:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d57c:	4638      	mov	r0, r7
   1d57e:	468a      	mov	sl, r1
   1d580:	4617      	mov	r7, r2
   1d582:	e7e2      	b.n	1d54a <work_queue_main+0xea>
	parent->next = child;
   1d584:	f8ca 1000 	str.w	r1, [sl]
Z_GENLIST_REMOVE(slist, snode)
   1d588:	6872      	ldr	r2, [r6, #4]
   1d58a:	4290      	cmp	r0, r2
	list->tail = node;
   1d58c:	bf08      	it	eq
   1d58e:	f8c6 a004 	streq.w	sl, [r6, #4]
}
   1d592:	e7e7      	b.n	1d564 <work_queue_main+0x104>
   1d594:	200027c8 	.word	0x200027c8
   1d598:	2000320d 	.word	0x2000320d

0001d59c <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   1d59c:	68c3      	ldr	r3, [r0, #12]
{
   1d59e:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1d5a0:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1d5a4:	079b      	lsls	r3, r3, #30
{
   1d5a6:	4605      	mov	r5, r0
   1d5a8:	460c      	mov	r4, r1
	if (ret) {
   1d5aa:	d50d      	bpl.n	1d5c8 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1d5ac:	2201      	movs	r2, #1
   1d5ae:	2100      	movs	r1, #0
   1d5b0:	f104 0008 	add.w	r0, r4, #8
   1d5b4:	f005 fa81 	bl	22aba <z_impl_k_sem_init>
	parent->next = child;
   1d5b8:	2300      	movs	r3, #0
   1d5ba:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1d5bc:	4b05      	ldr	r3, [pc, #20]	; (1d5d4 <cancel_sync_locked+0x38>)
	canceler->work = work;
   1d5be:	6065      	str	r5, [r4, #4]
   1d5c0:	685a      	ldr	r2, [r3, #4]
   1d5c2:	b91a      	cbnz	r2, 1d5cc <cancel_sync_locked+0x30>
	list->head = node;
   1d5c4:	e9c3 4400 	strd	r4, r4, [r3]
}
   1d5c8:	4630      	mov	r0, r6
   1d5ca:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1d5cc:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1d5ce:	605c      	str	r4, [r3, #4]
}
   1d5d0:	e7fa      	b.n	1d5c8 <cancel_sync_locked+0x2c>
   1d5d2:	bf00      	nop
   1d5d4:	200027c8 	.word	0x200027c8

0001d5d8 <submit_to_queue_locked>:
{
   1d5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1d5da:	68c3      	ldr	r3, [r0, #12]
   1d5dc:	079a      	lsls	r2, r3, #30
{
   1d5de:	4604      	mov	r4, r0
   1d5e0:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1d5e2:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1d5e6:	d41f      	bmi.n	1d628 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1d5e8:	075f      	lsls	r7, r3, #29
   1d5ea:	d41f      	bmi.n	1d62c <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   1d5ec:	680a      	ldr	r2, [r1, #0]
   1d5ee:	b90a      	cbnz	r2, 1d5f4 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1d5f0:	6882      	ldr	r2, [r0, #8]
   1d5f2:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1d5f4:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   1d5f6:	bf44      	itt	mi
   1d5f8:	68a3      	ldrmi	r3, [r4, #8]
   1d5fa:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   1d5fc:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   1d5fe:	bf4c      	ite	mi
   1d600:	2502      	movmi	r5, #2
		ret = 1;
   1d602:	2501      	movpl	r5, #1
	if (queue == NULL) {
   1d604:	b37f      	cbz	r7, 1d666 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1d606:	4b1b      	ldr	r3, [pc, #108]	; (1d674 <submit_to_queue_locked+0x9c>)
   1d608:	689b      	ldr	r3, [r3, #8]
   1d60a:	42bb      	cmp	r3, r7
   1d60c:	d111      	bne.n	1d632 <submit_to_queue_locked+0x5a>
   1d60e:	f005 f946 	bl	2289e <k_is_in_isr>
   1d612:	f080 0001 	eor.w	r0, r0, #1
   1d616:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   1d618:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1d61c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1d61e:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1d622:	d523      	bpl.n	1d66c <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   1d624:	b13a      	cbz	r2, 1d636 <submit_to_queue_locked+0x5e>
   1d626:	b940      	cbnz	r0, 1d63a <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   1d628:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   1d62c:	2300      	movs	r3, #0
   1d62e:	6033      	str	r3, [r6, #0]
	return ret;
   1d630:	e013      	b.n	1d65a <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1d632:	2000      	movs	r0, #0
   1d634:	e7f0      	b.n	1d618 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   1d636:	071b      	lsls	r3, r3, #28
   1d638:	d4f6      	bmi.n	1d628 <submit_to_queue_locked+0x50>
	parent->next = child;
   1d63a:	2300      	movs	r3, #0
   1d63c:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1d63e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1d642:	b963      	cbnz	r3, 1d65e <submit_to_queue_locked+0x86>
	list->head = node;
   1d644:	e9c7 442e 	strd	r4, r4, [r7, #184]	; 0xb8
		(void)notify_queue_locked(queue);
   1d648:	4638      	mov	r0, r7
   1d64a:	f005 fa46 	bl	22ada <notify_queue_locked>
	*flagp |= BIT(bit);
   1d64e:	68e3      	ldr	r3, [r4, #12]
   1d650:	f043 0304 	orr.w	r3, r3, #4
   1d654:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1d656:	6833      	ldr	r3, [r6, #0]
   1d658:	60a3      	str	r3, [r4, #8]
}
   1d65a:	4628      	mov	r0, r5
   1d65c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1d65e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1d660:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
}
   1d664:	e7f0      	b.n	1d648 <submit_to_queue_locked+0x70>
		return -EINVAL;
   1d666:	f06f 0515 	mvn.w	r5, #21
   1d66a:	e7df      	b.n	1d62c <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   1d66c:	f06f 0512 	mvn.w	r5, #18
   1d670:	e7dc      	b.n	1d62c <submit_to_queue_locked+0x54>
   1d672:	bf00      	nop
   1d674:	2000279c 	.word	0x2000279c

0001d678 <k_work_submit>:
{
   1d678:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1d67a:	4801      	ldr	r0, [pc, #4]	; (1d680 <k_work_submit+0x8>)
   1d67c:	f005 ba9d 	b.w	22bba <k_work_submit_to_queue>
   1d680:	20001f70 	.word	0x20001f70

0001d684 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1d684:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d686:	b089      	sub	sp, #36	; 0x24
   1d688:	4604      	mov	r4, r0
	list->head = NULL;
   1d68a:	2000      	movs	r0, #0
	list->tail = NULL;
   1d68c:	e9c4 002e 	strd	r0, r0, [r4, #184]	; 0xb8
   1d690:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1d692:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->tail = (sys_dnode_t *)list;
   1d696:	e9c4 0030 	strd	r0, r0, [r4, #192]	; 0xc0
   1d69a:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
   1d69e:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1d6a2:	b31d      	cbz	r5, 1d6ec <k_work_queue_start+0x68>
   1d6a4:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1d6a6:	2800      	cmp	r0, #0
   1d6a8:	f240 1001 	movw	r0, #257	; 0x101
   1d6ac:	bf08      	it	eq
   1d6ae:	2001      	moveq	r0, #1
	*flagp = flags;
   1d6b0:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1d6b4:	2000      	movs	r0, #0
   1d6b6:	f04f 36ff 	mov.w	r6, #4294967295
   1d6ba:	f04f 37ff 	mov.w	r7, #4294967295
   1d6be:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1d6c2:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1d6c6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1d6ca:	4b09      	ldr	r3, [pc, #36]	; (1d6f0 <k_work_queue_start+0x6c>)
   1d6cc:	9400      	str	r4, [sp, #0]
   1d6ce:	4620      	mov	r0, r4
   1d6d0:	f7ff fc06 	bl	1cee0 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1d6d4:	b125      	cbz	r5, 1d6e0 <k_work_queue_start+0x5c>
   1d6d6:	6829      	ldr	r1, [r5, #0]
   1d6d8:	b111      	cbz	r1, 1d6e0 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1d6da:	4620      	mov	r0, r4
   1d6dc:	f7ff fb4e 	bl	1cd7c <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1d6e0:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1d6e2:	b009      	add	sp, #36	; 0x24
   1d6e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1d6e8:	f005 b8e1 	b.w	228ae <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1d6ec:	2001      	movs	r0, #1
   1d6ee:	e7df      	b.n	1d6b0 <k_work_queue_start+0x2c>
   1d6f0:	0001d461 	.word	0x0001d461

0001d6f4 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1d6f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d6f6:	4614      	mov	r4, r2
   1d6f8:	9001      	str	r0, [sp, #4]
   1d6fa:	461d      	mov	r5, r3
   1d6fc:	4608      	mov	r0, r1
	__asm__ volatile(
   1d6fe:	f04f 0140 	mov.w	r1, #64	; 0x40
   1d702:	f3ef 8611 	mrs	r6, BASEPRI
   1d706:	f381 8812 	msr	BASEPRI_MAX, r1
   1d70a:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   1d70e:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1d710:	f011 0f0e 	tst.w	r1, #14
   1d714:	d115      	bne.n	1d742 <k_work_schedule_for_queue+0x4e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1d716:	432c      	orrs	r4, r5
   1d718:	d108      	bne.n	1d72c <k_work_schedule_for_queue+0x38>
		return submit_to_queue_locked(work, queuep);
   1d71a:	a901      	add	r1, sp, #4
   1d71c:	f7ff ff5c 	bl	1d5d8 <submit_to_queue_locked>
	__asm__ volatile(
   1d720:	f386 8811 	msr	BASEPRI, r6
   1d724:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1d728:	b002      	add	sp, #8
   1d72a:	bd70      	pop	{r4, r5, r6, pc}
	*flagp |= BIT(bit);
   1d72c:	f041 0108 	orr.w	r1, r1, #8
   1d730:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   1d732:	9901      	ldr	r1, [sp, #4]
   1d734:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1d736:	3010      	adds	r0, #16
   1d738:	4903      	ldr	r1, [pc, #12]	; (1d748 <k_work_schedule_for_queue+0x54>)
   1d73a:	f000 fc2d 	bl	1df98 <z_add_timeout>
	return ret;
   1d73e:	2001      	movs	r0, #1
   1d740:	e7ee      	b.n	1d720 <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   1d742:	2000      	movs	r0, #0
   1d744:	e7ec      	b.n	1d720 <k_work_schedule_for_queue+0x2c>
   1d746:	bf00      	nop
   1d748:	00022b6b 	.word	0x00022b6b

0001d74c <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1d74c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1d74e:	4801      	ldr	r0, [pc, #4]	; (1d754 <k_work_schedule+0x8>)
   1d750:	f7ff bfd0 	b.w	1d6f4 <k_work_schedule_for_queue>
   1d754:	20001f70 	.word	0x20001f70

0001d758 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1d758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d75a:	460c      	mov	r4, r1
   1d75c:	9001      	str	r0, [sp, #4]
   1d75e:	4616      	mov	r6, r2
   1d760:	461f      	mov	r7, r3
	__asm__ volatile(
   1d762:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d766:	f3ef 8511 	mrs	r5, BASEPRI
   1d76a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d76e:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1d772:	4608      	mov	r0, r1
   1d774:	f005 f9b8 	bl	22ae8 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1d778:	ea56 0307 	orrs.w	r3, r6, r7
   1d77c:	d109      	bne.n	1d792 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1d77e:	a901      	add	r1, sp, #4
   1d780:	4620      	mov	r0, r4
   1d782:	f7ff ff29 	bl	1d5d8 <submit_to_queue_locked>
	__asm__ volatile(
   1d786:	f385 8811 	msr	BASEPRI, r5
   1d78a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1d78e:	b003      	add	sp, #12
   1d790:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1d792:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1d794:	4906      	ldr	r1, [pc, #24]	; (1d7b0 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1d796:	f043 0308 	orr.w	r3, r3, #8
   1d79a:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1d79c:	9b01      	ldr	r3, [sp, #4]
   1d79e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1d7a0:	f104 0010 	add.w	r0, r4, #16
   1d7a4:	4632      	mov	r2, r6
   1d7a6:	463b      	mov	r3, r7
   1d7a8:	f000 fbf6 	bl	1df98 <z_add_timeout>
	return ret;
   1d7ac:	2001      	movs	r0, #1
   1d7ae:	e7ea      	b.n	1d786 <k_work_reschedule_for_queue+0x2e>
   1d7b0:	00022b6b 	.word	0x00022b6b

0001d7b4 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1d7b4:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1d7b6:	4801      	ldr	r0, [pc, #4]	; (1d7bc <k_work_reschedule+0x8>)
   1d7b8:	f7ff bfce 	b.w	1d758 <k_work_reschedule_for_queue>
   1d7bc:	20001f70 	.word	0x20001f70

0001d7c0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1d7c0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1d7c2:	4c08      	ldr	r4, [pc, #32]	; (1d7e4 <z_reset_time_slice+0x24>)
   1d7c4:	6823      	ldr	r3, [r4, #0]
   1d7c6:	b15b      	cbz	r3, 1d7e0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1d7c8:	f7fd fcdc 	bl	1b184 <sys_clock_elapsed>
   1d7cc:	4603      	mov	r3, r0
   1d7ce:	6820      	ldr	r0, [r4, #0]
   1d7d0:	4a05      	ldr	r2, [pc, #20]	; (1d7e8 <z_reset_time_slice+0x28>)
   1d7d2:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1d7d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1d7d8:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1d7da:	2100      	movs	r1, #0
   1d7dc:	f005 bb95 	b.w	22f0a <z_set_timeout_expiry>
}
   1d7e0:	bd10      	pop	{r4, pc}
   1d7e2:	bf00      	nop
   1d7e4:	200027d8 	.word	0x200027d8
   1d7e8:	2000279c 	.word	0x2000279c

0001d7ec <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1d7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d7ee:	4604      	mov	r4, r0
   1d7f0:	460d      	mov	r5, r1
	__asm__ volatile(
   1d7f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d7f6:	f3ef 8611 	mrs	r6, BASEPRI
   1d7fa:	f383 8812 	msr	BASEPRI_MAX, r3
   1d7fe:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1d802:	4b10      	ldr	r3, [pc, #64]	; (1d844 <k_sched_time_slice_set+0x58>)
   1d804:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1d806:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1d80a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1d80e:	2100      	movs	r1, #0
   1d810:	611a      	str	r2, [r3, #16]
   1d812:	fbe7 0104 	umlal	r0, r1, r7, r4
   1d816:	2300      	movs	r3, #0
   1d818:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d81c:	f7e2 fc5e 	bl	dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1d820:	2c00      	cmp	r4, #0
   1d822:	4b09      	ldr	r3, [pc, #36]	; (1d848 <k_sched_time_slice_set+0x5c>)
   1d824:	dc09      	bgt.n	1d83a <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   1d826:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   1d828:	4b08      	ldr	r3, [pc, #32]	; (1d84c <k_sched_time_slice_set+0x60>)
   1d82a:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1d82c:	f7ff ffc8 	bl	1d7c0 <z_reset_time_slice>
	__asm__ volatile(
   1d830:	f386 8811 	msr	BASEPRI, r6
   1d834:	f3bf 8f6f 	isb	sy
	}
}
   1d838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   1d83a:	2802      	cmp	r0, #2
   1d83c:	bfb8      	it	lt
   1d83e:	2002      	movlt	r0, #2
   1d840:	e7f1      	b.n	1d826 <k_sched_time_slice_set+0x3a>
   1d842:	bf00      	nop
   1d844:	2000279c 	.word	0x2000279c
   1d848:	200027d8 	.word	0x200027d8
   1d84c:	200027d4 	.word	0x200027d4

0001d850 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1d850:	b949      	cbnz	r1, 1d866 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1d852:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1d856:	b930      	cbnz	r0, 1d866 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1d858:	4b05      	ldr	r3, [pc, #20]	; (1d870 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1d85a:	69da      	ldr	r2, [r3, #28]
   1d85c:	689b      	ldr	r3, [r3, #8]
   1d85e:	429a      	cmp	r2, r3
   1d860:	d001      	beq.n	1d866 <z_reschedule+0x16>
	ret = arch_swap(key);
   1d862:	f7f6 bc19 	b.w	14098 <arch_swap>
   1d866:	f381 8811 	msr	BASEPRI, r1
   1d86a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1d86e:	4770      	bx	lr
   1d870:	2000279c 	.word	0x2000279c

0001d874 <k_sched_lock>:
	__asm__ volatile(
   1d874:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d878:	f3ef 8111 	mrs	r1, BASEPRI
   1d87c:	f383 8812 	msr	BASEPRI_MAX, r3
   1d880:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1d884:	4b04      	ldr	r3, [pc, #16]	; (1d898 <k_sched_lock+0x24>)
   1d886:	689a      	ldr	r2, [r3, #8]
   1d888:	7bd3      	ldrb	r3, [r2, #15]
   1d88a:	3b01      	subs	r3, #1
   1d88c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1d88e:	f381 8811 	msr	BASEPRI, r1
   1d892:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1d896:	4770      	bx	lr
   1d898:	2000279c 	.word	0x2000279c

0001d89c <update_cache>:
{
   1d89c:	b538      	push	{r3, r4, r5, lr}
   1d89e:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   1d8a0:	480c      	ldr	r0, [pc, #48]	; (1d8d4 <update_cache+0x38>)
   1d8a2:	4d0d      	ldr	r5, [pc, #52]	; (1d8d8 <update_cache+0x3c>)
   1d8a4:	f005 fa47 	bl	22d36 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1d8a8:	4604      	mov	r4, r0
   1d8aa:	b900      	cbnz	r0, 1d8ae <update_cache+0x12>
   1d8ac:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   1d8ae:	68ab      	ldr	r3, [r5, #8]
   1d8b0:	b94a      	cbnz	r2, 1d8c6 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   1d8b2:	7b5a      	ldrb	r2, [r3, #13]
   1d8b4:	06d2      	lsls	r2, r2, #27
   1d8b6:	d106      	bne.n	1d8c6 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1d8b8:	69a2      	ldr	r2, [r4, #24]
   1d8ba:	b922      	cbnz	r2, 1d8c6 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   1d8bc:	89da      	ldrh	r2, [r3, #14]
   1d8be:	2a7f      	cmp	r2, #127	; 0x7f
   1d8c0:	d901      	bls.n	1d8c6 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   1d8c2:	61eb      	str	r3, [r5, #28]
}
   1d8c4:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1d8c6:	429c      	cmp	r4, r3
   1d8c8:	d001      	beq.n	1d8ce <update_cache+0x32>
			z_reset_time_slice();
   1d8ca:	f7ff ff79 	bl	1d7c0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1d8ce:	61ec      	str	r4, [r5, #28]
}
   1d8d0:	e7f8      	b.n	1d8c4 <update_cache+0x28>
   1d8d2:	bf00      	nop
   1d8d4:	200027bc 	.word	0x200027bc
   1d8d8:	2000279c 	.word	0x2000279c

0001d8dc <move_thread_to_end_of_prio_q>:
{
   1d8dc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1d8de:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1d8e2:	7b43      	ldrb	r3, [r0, #13]
   1d8e4:	2a00      	cmp	r2, #0
{
   1d8e6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1d8e8:	da04      	bge.n	1d8f4 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d8ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d8ee:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1d8f0:	f005 f9cc 	bl	22c8c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1d8f4:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   1d8f6:	4a17      	ldr	r2, [pc, #92]	; (1d954 <move_thread_to_end_of_prio_q+0x78>)
   1d8f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d8fc:	4610      	mov	r0, r2
   1d8fe:	734b      	strb	r3, [r1, #13]
   1d900:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d904:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d906:	4283      	cmp	r3, r0
   1d908:	bf08      	it	eq
   1d90a:	2300      	moveq	r3, #0
   1d90c:	2b00      	cmp	r3, #0
   1d90e:	bf38      	it	cc
   1d910:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d912:	b1cb      	cbz	r3, 1d948 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
   1d914:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1d918:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   1d91c:	42a6      	cmp	r6, r4
   1d91e:	d00f      	beq.n	1d940 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
   1d920:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1d922:	2c00      	cmp	r4, #0
   1d924:	dd0c      	ble.n	1d940 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1d926:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1d928:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1d92c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1d92e:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1d930:	6890      	ldr	r0, [r2, #8]
   1d932:	1a43      	subs	r3, r0, r1
   1d934:	4258      	negs	r0, r3
}
   1d936:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1d93a:	4158      	adcs	r0, r3
   1d93c:	f7ff bfae 	b.w	1d89c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1d940:	42ab      	cmp	r3, r5
   1d942:	d001      	beq.n	1d948 <move_thread_to_end_of_prio_q+0x6c>
   1d944:	681b      	ldr	r3, [r3, #0]
   1d946:	e7e4      	b.n	1d912 <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
   1d948:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
   1d94c:	6029      	str	r1, [r5, #0]
	list->tail = node;
   1d94e:	6251      	str	r1, [r2, #36]	; 0x24
}
   1d950:	e7ee      	b.n	1d930 <move_thread_to_end_of_prio_q+0x54>
   1d952:	bf00      	nop
   1d954:	2000279c 	.word	0x2000279c

0001d958 <z_time_slice>:
{
   1d958:	b570      	push	{r4, r5, r6, lr}
   1d95a:	4601      	mov	r1, r0
	__asm__ volatile(
   1d95c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d960:	f3ef 8411 	mrs	r4, BASEPRI
   1d964:	f383 8812 	msr	BASEPRI_MAX, r3
   1d968:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1d96c:	4b16      	ldr	r3, [pc, #88]	; (1d9c8 <z_time_slice+0x70>)
   1d96e:	4a17      	ldr	r2, [pc, #92]	; (1d9cc <z_time_slice+0x74>)
   1d970:	6898      	ldr	r0, [r3, #8]
   1d972:	6815      	ldr	r5, [r2, #0]
   1d974:	42a8      	cmp	r0, r5
   1d976:	461d      	mov	r5, r3
   1d978:	d106      	bne.n	1d988 <z_time_slice+0x30>
			z_reset_time_slice();
   1d97a:	f7ff ff21 	bl	1d7c0 <z_reset_time_slice>
	__asm__ volatile(
   1d97e:	f384 8811 	msr	BASEPRI, r4
   1d982:	f3bf 8f6f 	isb	sy
}
   1d986:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1d988:	2600      	movs	r6, #0
   1d98a:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1d98c:	4a10      	ldr	r2, [pc, #64]	; (1d9d0 <z_time_slice+0x78>)
   1d98e:	6812      	ldr	r2, [r2, #0]
   1d990:	b1ba      	cbz	r2, 1d9c2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1d992:	89c2      	ldrh	r2, [r0, #14]
   1d994:	2a7f      	cmp	r2, #127	; 0x7f
   1d996:	d814      	bhi.n	1d9c2 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1d998:	7b42      	ldrb	r2, [r0, #13]
   1d99a:	06d2      	lsls	r2, r2, #27
   1d99c:	d111      	bne.n	1d9c2 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1d99e:	4a0d      	ldr	r2, [pc, #52]	; (1d9d4 <z_time_slice+0x7c>)
   1d9a0:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1d9a4:	6812      	ldr	r2, [r2, #0]
   1d9a6:	4296      	cmp	r6, r2
   1d9a8:	db0b      	blt.n	1d9c2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1d9aa:	4a0b      	ldr	r2, [pc, #44]	; (1d9d8 <z_time_slice+0x80>)
   1d9ac:	4290      	cmp	r0, r2
   1d9ae:	d008      	beq.n	1d9c2 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1d9b0:	691a      	ldr	r2, [r3, #16]
   1d9b2:	428a      	cmp	r2, r1
   1d9b4:	dc02      	bgt.n	1d9bc <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   1d9b6:	f7ff ff91 	bl	1d8dc <move_thread_to_end_of_prio_q>
   1d9ba:	e7de      	b.n	1d97a <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   1d9bc:	1a52      	subs	r2, r2, r1
   1d9be:	611a      	str	r2, [r3, #16]
   1d9c0:	e7dd      	b.n	1d97e <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1d9c2:	2300      	movs	r3, #0
   1d9c4:	612b      	str	r3, [r5, #16]
   1d9c6:	e7da      	b.n	1d97e <z_time_slice+0x26>
   1d9c8:	2000279c 	.word	0x2000279c
   1d9cc:	200027d0 	.word	0x200027d0
   1d9d0:	200027d8 	.word	0x200027d8
   1d9d4:	200027d4 	.word	0x200027d4
   1d9d8:	20001e00 	.word	0x20001e00

0001d9dc <ready_thread>:
{
   1d9dc:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1d9de:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1d9e2:	7b42      	ldrb	r2, [r0, #13]
   1d9e4:	2b00      	cmp	r3, #0
   1d9e6:	db2d      	blt.n	1da44 <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1d9e8:	06d3      	lsls	r3, r2, #27
   1d9ea:	d12b      	bne.n	1da44 <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
   1d9ec:	6983      	ldr	r3, [r0, #24]
   1d9ee:	bb4b      	cbnz	r3, 1da44 <ready_thread+0x68>
	return list->head == list;
   1d9f0:	4915      	ldr	r1, [pc, #84]	; (1da48 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1d9f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1d9f6:	7342      	strb	r2, [r0, #13]
   1d9f8:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d9fa:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	return list->head == list;
   1d9fc:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1da00:	4294      	cmp	r4, r2
   1da02:	bf18      	it	ne
   1da04:	4623      	movne	r3, r4
   1da06:	2b00      	cmp	r3, #0
   1da08:	bf38      	it	cc
   1da0a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1da0c:	b1ab      	cbz	r3, 1da3a <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
   1da0e:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1da12:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   1da16:	42a6      	cmp	r6, r4
   1da18:	d00b      	beq.n	1da32 <ready_thread+0x56>
		return b2 - b1;
   1da1a:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1da1c:	2c00      	cmp	r4, #0
   1da1e:	dd08      	ble.n	1da32 <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
   1da20:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1da22:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1da26:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1da28:	6058      	str	r0, [r3, #4]
}
   1da2a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1da2c:	2000      	movs	r0, #0
   1da2e:	f7ff bf35 	b.w	1d89c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1da32:	42ab      	cmp	r3, r5
   1da34:	d001      	beq.n	1da3a <ready_thread+0x5e>
   1da36:	681b      	ldr	r3, [r3, #0]
   1da38:	e7e8      	b.n	1da0c <ready_thread+0x30>
	node->prev = tail;
   1da3a:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
   1da3e:	6028      	str	r0, [r5, #0]
	list->tail = node;
   1da40:	6248      	str	r0, [r1, #36]	; 0x24
}
   1da42:	e7f2      	b.n	1da2a <ready_thread+0x4e>
}
   1da44:	bc70      	pop	{r4, r5, r6}
   1da46:	4770      	bx	lr
   1da48:	2000279c 	.word	0x2000279c

0001da4c <z_sched_start>:
{
   1da4c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1da4e:	f04f 0240 	mov.w	r2, #64	; 0x40
   1da52:	f3ef 8411 	mrs	r4, BASEPRI
   1da56:	f382 8812 	msr	BASEPRI_MAX, r2
   1da5a:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1da5e:	7b42      	ldrb	r2, [r0, #13]
   1da60:	0751      	lsls	r1, r2, #29
   1da62:	d404      	bmi.n	1da6e <z_sched_start+0x22>
	__asm__ volatile(
   1da64:	f384 8811 	msr	BASEPRI, r4
   1da68:	f3bf 8f6f 	isb	sy
}
   1da6c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1da6e:	f022 0204 	bic.w	r2, r2, #4
   1da72:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1da74:	f7ff ffb2 	bl	1d9dc <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1da78:	4621      	mov	r1, r4
   1da7a:	4802      	ldr	r0, [pc, #8]	; (1da84 <z_sched_start+0x38>)
}
   1da7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1da80:	f7ff bee6 	b.w	1d850 <z_reschedule>
   1da84:	2000320d 	.word	0x2000320d

0001da88 <unready_thread>:
{
   1da88:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1da8a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1da8e:	7b43      	ldrb	r3, [r0, #13]
   1da90:	2a00      	cmp	r2, #0
{
   1da92:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1da94:	da04      	bge.n	1daa0 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1da96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1da9a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1da9c:	f005 f8f6 	bl	22c8c <sys_dlist_remove>
	update_cache(thread == _current);
   1daa0:	4b04      	ldr	r3, [pc, #16]	; (1dab4 <unready_thread+0x2c>)
   1daa2:	6898      	ldr	r0, [r3, #8]
   1daa4:	1a43      	subs	r3, r0, r1
   1daa6:	4258      	negs	r0, r3
   1daa8:	4158      	adcs	r0, r3
}
   1daaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1daae:	f7ff bef5 	b.w	1d89c <update_cache>
   1dab2:	bf00      	nop
   1dab4:	2000279c 	.word	0x2000279c

0001dab8 <pend>:
{
   1dab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dabc:	4606      	mov	r6, r0
   1dabe:	4614      	mov	r4, r2
   1dac0:	461d      	mov	r5, r3
	__asm__ volatile(
   1dac2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dac6:	f3ef 8711 	mrs	r7, BASEPRI
   1daca:	f383 8812 	msr	BASEPRI_MAX, r3
   1dace:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1dad2:	f005 f96c 	bl	22dae <add_to_waitq_locked>
	__asm__ volatile(
   1dad6:	f387 8811 	msr	BASEPRI, r7
   1dada:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1dade:	1c6b      	adds	r3, r5, #1
   1dae0:	bf08      	it	eq
   1dae2:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   1dae6:	d008      	beq.n	1dafa <pend+0x42>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1dae8:	4622      	mov	r2, r4
   1daea:	462b      	mov	r3, r5
   1daec:	f106 0018 	add.w	r0, r6, #24
   1daf0:	4903      	ldr	r1, [pc, #12]	; (1db00 <pend+0x48>)
}
   1daf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1daf6:	f000 ba4f 	b.w	1df98 <z_add_timeout>
   1dafa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dafe:	bf00      	nop
   1db00:	00022d6b 	.word	0x00022d6b

0001db04 <z_pend_curr>:
{
   1db04:	b510      	push	{r4, lr}
	pending_current = _current;
   1db06:	4b07      	ldr	r3, [pc, #28]	; (1db24 <z_pend_curr+0x20>)
   1db08:	6898      	ldr	r0, [r3, #8]
   1db0a:	4b07      	ldr	r3, [pc, #28]	; (1db28 <z_pend_curr+0x24>)
{
   1db0c:	460c      	mov	r4, r1
	pending_current = _current;
   1db0e:	6018      	str	r0, [r3, #0]
{
   1db10:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1db12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1db16:	f7ff ffcf 	bl	1dab8 <pend>
   1db1a:	4620      	mov	r0, r4
}
   1db1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1db20:	f7f6 baba 	b.w	14098 <arch_swap>
   1db24:	2000279c 	.word	0x2000279c
   1db28:	200027d0 	.word	0x200027d0

0001db2c <z_set_prio>:
{
   1db2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1db2e:	4604      	mov	r4, r0
	__asm__ volatile(
   1db30:	f04f 0340 	mov.w	r3, #64	; 0x40
   1db34:	f3ef 8611 	mrs	r6, BASEPRI
   1db38:	f383 8812 	msr	BASEPRI_MAX, r3
   1db3c:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1db40:	7b43      	ldrb	r3, [r0, #13]
   1db42:	06da      	lsls	r2, r3, #27
   1db44:	b249      	sxtb	r1, r1
   1db46:	d138      	bne.n	1dbba <z_set_prio+0x8e>
	return !sys_dnode_is_linked(&to->node);
   1db48:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1db4a:	2d00      	cmp	r5, #0
   1db4c:	d135      	bne.n	1dbba <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1db4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1db52:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1db54:	f005 f89a 	bl	22c8c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1db58:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   1db5a:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1db5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1db60:	7343      	strb	r3, [r0, #13]
	return list->head == list;
   1db62:	4817      	ldr	r0, [pc, #92]	; (1dbc0 <z_set_prio+0x94>)
   1db64:	4603      	mov	r3, r0
   1db66:	f853 7f20 	ldr.w	r7, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1db6a:	429f      	cmp	r7, r3
   1db6c:	bf18      	it	ne
   1db6e:	463d      	movne	r5, r7
   1db70:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1db72:	6a47      	ldr	r7, [r0, #36]	; 0x24
   1db74:	461a      	mov	r2, r3
   1db76:	462b      	mov	r3, r5
   1db78:	bf38      	it	cc
   1db7a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1db7c:	b1c3      	cbz	r3, 1dbb0 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
   1db7e:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   1db82:	42a9      	cmp	r1, r5
   1db84:	d010      	beq.n	1dba8 <z_set_prio+0x7c>
		return b2 - b1;
   1db86:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1db88:	2d00      	cmp	r5, #0
   1db8a:	dd0d      	ble.n	1dba8 <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
   1db8c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1db8e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1db92:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1db94:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1db96:	2001      	movs	r0, #1
   1db98:	f7ff fe80 	bl	1d89c <update_cache>
   1db9c:	2001      	movs	r0, #1
	__asm__ volatile(
   1db9e:	f386 8811 	msr	BASEPRI, r6
   1dba2:	f3bf 8f6f 	isb	sy
}
   1dba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1dba8:	42bb      	cmp	r3, r7
   1dbaa:	d001      	beq.n	1dbb0 <z_set_prio+0x84>
   1dbac:	681b      	ldr	r3, [r3, #0]
   1dbae:	e7e5      	b.n	1db7c <z_set_prio+0x50>
	node->prev = tail;
   1dbb0:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
   1dbb4:	603c      	str	r4, [r7, #0]
	list->tail = node;
   1dbb6:	6244      	str	r4, [r0, #36]	; 0x24
}
   1dbb8:	e7ed      	b.n	1db96 <z_set_prio+0x6a>
			thread->base.prio = prio;
   1dbba:	73a1      	strb	r1, [r4, #14]
   1dbbc:	2000      	movs	r0, #0
   1dbbe:	e7ee      	b.n	1db9e <z_set_prio+0x72>
   1dbc0:	2000279c 	.word	0x2000279c

0001dbc4 <z_impl_k_thread_suspend>:
{
   1dbc4:	b570      	push	{r4, r5, r6, lr}
   1dbc6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1dbc8:	3018      	adds	r0, #24
   1dbca:	f005 f978 	bl	22ebe <z_abort_timeout>
	__asm__ volatile(
   1dbce:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dbd2:	f3ef 8611 	mrs	r6, BASEPRI
   1dbd6:	f383 8812 	msr	BASEPRI_MAX, r3
   1dbda:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1dbde:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1dbe2:	7b63      	ldrb	r3, [r4, #13]
   1dbe4:	2a00      	cmp	r2, #0
   1dbe6:	da05      	bge.n	1dbf4 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1dbe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1dbec:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1dbee:	4620      	mov	r0, r4
   1dbf0:	f005 f84c 	bl	22c8c <sys_dlist_remove>
		update_cache(thread == _current);
   1dbf4:	4d0b      	ldr	r5, [pc, #44]	; (1dc24 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1dbf6:	7b63      	ldrb	r3, [r4, #13]
   1dbf8:	68a8      	ldr	r0, [r5, #8]
   1dbfa:	f043 0310 	orr.w	r3, r3, #16
   1dbfe:	7363      	strb	r3, [r4, #13]
   1dc00:	1b03      	subs	r3, r0, r4
   1dc02:	4258      	negs	r0, r3
   1dc04:	4158      	adcs	r0, r3
   1dc06:	f7ff fe49 	bl	1d89c <update_cache>
	__asm__ volatile(
   1dc0a:	f386 8811 	msr	BASEPRI, r6
   1dc0e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1dc12:	68ab      	ldr	r3, [r5, #8]
   1dc14:	42a3      	cmp	r3, r4
   1dc16:	d103      	bne.n	1dc20 <z_impl_k_thread_suspend+0x5c>
}
   1dc18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1dc1c:	f005 b881 	b.w	22d22 <z_reschedule_unlocked>
}
   1dc20:	bd70      	pop	{r4, r5, r6, pc}
   1dc22:	bf00      	nop
   1dc24:	2000279c 	.word	0x2000279c

0001dc28 <k_sched_unlock>:
{
   1dc28:	b510      	push	{r4, lr}
	__asm__ volatile(
   1dc2a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dc2e:	f3ef 8411 	mrs	r4, BASEPRI
   1dc32:	f383 8812 	msr	BASEPRI_MAX, r3
   1dc36:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1dc3a:	4b08      	ldr	r3, [pc, #32]	; (1dc5c <k_sched_unlock+0x34>)
   1dc3c:	689a      	ldr	r2, [r3, #8]
   1dc3e:	7bd3      	ldrb	r3, [r2, #15]
   1dc40:	3301      	adds	r3, #1
   1dc42:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1dc44:	2000      	movs	r0, #0
   1dc46:	f7ff fe29 	bl	1d89c <update_cache>
	__asm__ volatile(
   1dc4a:	f384 8811 	msr	BASEPRI, r4
   1dc4e:	f3bf 8f6f 	isb	sy
}
   1dc52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1dc56:	f005 b864 	b.w	22d22 <z_reschedule_unlocked>
   1dc5a:	bf00      	nop
   1dc5c:	2000279c 	.word	0x2000279c

0001dc60 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1dc60:	4b04      	ldr	r3, [pc, #16]	; (1dc74 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1dc62:	2100      	movs	r1, #0
   1dc64:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1dc68:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1dc6c:	4608      	mov	r0, r1
   1dc6e:	f7ff bdbd 	b.w	1d7ec <k_sched_time_slice_set>
   1dc72:	bf00      	nop
   1dc74:	2000279c 	.word	0x2000279c

0001dc78 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1dc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1dc7a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dc7e:	f3ef 8411 	mrs	r4, BASEPRI
   1dc82:	f383 8812 	msr	BASEPRI_MAX, r3
   1dc86:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1dc8a:	491b      	ldr	r1, [pc, #108]	; (1dcf8 <z_impl_k_yield+0x80>)
   1dc8c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1dc8e:	7b43      	ldrb	r3, [r0, #13]
   1dc90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1dc94:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1dc96:	f004 fff9 	bl	22c8c <sys_dlist_remove>
	}
	queue_thread(_current);
   1dc9a:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1dc9c:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
   1dc9e:	4608      	mov	r0, r1
   1dca0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1dca4:	7353      	strb	r3, [r2, #13]
   1dca6:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1dcaa:	6a4e      	ldr	r6, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dcac:	4283      	cmp	r3, r0
   1dcae:	bf08      	it	eq
   1dcb0:	2300      	moveq	r3, #0
   1dcb2:	2b00      	cmp	r3, #0
   1dcb4:	bf38      	it	cc
   1dcb6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1dcb8:	b1cb      	cbz	r3, 1dcee <z_impl_k_yield+0x76>
	int32_t b1 = thread_1->base.prio;
   1dcba:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
   1dcbe:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   1dcc2:	42af      	cmp	r7, r5
   1dcc4:	d00f      	beq.n	1dce6 <z_impl_k_yield+0x6e>
		return b2 - b1;
   1dcc6:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   1dcc8:	2d00      	cmp	r5, #0
   1dcca:	dd0c      	ble.n	1dce6 <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
   1dccc:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1dcce:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
   1dcd2:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1dcd4:	605a      	str	r2, [r3, #4]
	update_cache(1);
   1dcd6:	2001      	movs	r0, #1
   1dcd8:	f7ff fde0 	bl	1d89c <update_cache>
   1dcdc:	4620      	mov	r0, r4
	z_swap(&sched_spinlock, key);
}
   1dcde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1dce2:	f7f6 b9d9 	b.w	14098 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1dce6:	42b3      	cmp	r3, r6
   1dce8:	d001      	beq.n	1dcee <z_impl_k_yield+0x76>
   1dcea:	681b      	ldr	r3, [r3, #0]
   1dcec:	e7e4      	b.n	1dcb8 <z_impl_k_yield+0x40>
	node->prev = tail;
   1dcee:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
   1dcf2:	6032      	str	r2, [r6, #0]
	list->tail = node;
   1dcf4:	624a      	str	r2, [r1, #36]	; 0x24
}
   1dcf6:	e7ee      	b.n	1dcd6 <z_impl_k_yield+0x5e>
   1dcf8:	2000279c 	.word	0x2000279c

0001dcfc <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   1dcfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dd00:	4604      	mov	r4, r0
   1dd02:	460d      	mov	r5, r1
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1dd04:	ea54 0105 	orrs.w	r1, r4, r5
   1dd08:	d104      	bne.n	1dd14 <z_tick_sleep+0x18>
	z_impl_k_yield();
   1dd0a:	f7ff ffb5 	bl	1dc78 <z_impl_k_yield>
		k_yield();
		return 0;
   1dd0e:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   1dd10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
   1dd14:	f06f 0101 	mvn.w	r1, #1
   1dd18:	1a0a      	subs	r2, r1, r0
   1dd1a:	f04f 31ff 	mov.w	r1, #4294967295
   1dd1e:	eb61 0305 	sbc.w	r3, r1, r5
   1dd22:	2a01      	cmp	r2, #1
   1dd24:	f173 0300 	sbcs.w	r3, r3, #0
   1dd28:	da2a      	bge.n	1dd80 <z_tick_sleep+0x84>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1dd2a:	f005 f908 	bl	22f3e <sys_clock_tick_get_32>
   1dd2e:	1906      	adds	r6, r0, r4
   1dd30:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dd34:	f3ef 8811 	mrs	r8, BASEPRI
   1dd38:	f383 8812 	msr	BASEPRI_MAX, r3
   1dd3c:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1dd40:	4f11      	ldr	r7, [pc, #68]	; (1dd88 <z_tick_sleep+0x8c>)
   1dd42:	4b12      	ldr	r3, [pc, #72]	; (1dd8c <z_tick_sleep+0x90>)
   1dd44:	68b8      	ldr	r0, [r7, #8]
   1dd46:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1dd48:	f7ff fe9e 	bl	1da88 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1dd4c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1dd4e:	4910      	ldr	r1, [pc, #64]	; (1dd90 <z_tick_sleep+0x94>)
   1dd50:	4622      	mov	r2, r4
   1dd52:	462b      	mov	r3, r5
   1dd54:	3018      	adds	r0, #24
   1dd56:	f000 f91f 	bl	1df98 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1dd5a:	68ba      	ldr	r2, [r7, #8]
   1dd5c:	7b53      	ldrb	r3, [r2, #13]
   1dd5e:	f043 0310 	orr.w	r3, r3, #16
   1dd62:	7353      	strb	r3, [r2, #13]
   1dd64:	4640      	mov	r0, r8
   1dd66:	f7f6 f997 	bl	14098 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1dd6a:	f005 f8e8 	bl	22f3e <sys_clock_tick_get_32>
   1dd6e:	1a30      	subs	r0, r6, r0
   1dd70:	eb66 0106 	sbc.w	r1, r6, r6
	if (ticks > 0) {
   1dd74:	2801      	cmp	r0, #1
   1dd76:	f171 0300 	sbcs.w	r3, r1, #0
		return ticks;
   1dd7a:	bfb8      	it	lt
   1dd7c:	2000      	movlt	r0, #0
   1dd7e:	e7c7      	b.n	1dd10 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1dd80:	f06f 0601 	mvn.w	r6, #1
   1dd84:	1a36      	subs	r6, r6, r0
   1dd86:	e7d3      	b.n	1dd30 <z_tick_sleep+0x34>
   1dd88:	2000279c 	.word	0x2000279c
   1dd8c:	200027d0 	.word	0x200027d0
   1dd90:	00022d6b 	.word	0x00022d6b

0001dd94 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1dd94:	b508      	push	{r3, lr}
   1dd96:	460b      	mov	r3, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1dd98:	3301      	adds	r3, #1
   1dd9a:	bf08      	it	eq
   1dd9c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1dda0:	d106      	bne.n	1ddb0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1dda2:	4b08      	ldr	r3, [pc, #32]	; (1ddc4 <z_impl_k_sleep+0x30>)
   1dda4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1dda6:	f7ff ff0d 	bl	1dbc4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1ddaa:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1ddae:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1ddb0:	f7ff ffa4 	bl	1dcfc <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   1ddb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1ddb8:	fb80 2303 	smull	r2, r3, r0, r3
   1ddbc:	0bd0      	lsrs	r0, r2, #15
   1ddbe:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1ddc2:	e7f4      	b.n	1ddae <z_impl_k_sleep+0x1a>
   1ddc4:	2000279c 	.word	0x2000279c

0001ddc8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1ddc8:	4b01      	ldr	r3, [pc, #4]	; (1ddd0 <z_impl_z_current_get+0x8>)
   1ddca:	6898      	ldr	r0, [r3, #8]
   1ddcc:	4770      	bx	lr
   1ddce:	bf00      	nop
   1ddd0:	2000279c 	.word	0x2000279c

0001ddd4 <z_impl_k_is_preempt_thread>:
   1ddd4:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   1ddd8:	b93b      	cbnz	r3, 1ddea <z_impl_k_is_preempt_thread+0x16>
   1ddda:	4b05      	ldr	r3, [pc, #20]	; (1ddf0 <z_impl_k_is_preempt_thread+0x1c>)
   1dddc:	689b      	ldr	r3, [r3, #8]
   1ddde:	89d8      	ldrh	r0, [r3, #14]
   1dde0:	287f      	cmp	r0, #127	; 0x7f
   1dde2:	bf8c      	ite	hi
   1dde4:	2000      	movhi	r0, #0
   1dde6:	2001      	movls	r0, #1
   1dde8:	4770      	bx	lr
   1ddea:	2000      	movs	r0, #0
}
   1ddec:	4770      	bx	lr
   1ddee:	bf00      	nop
   1ddf0:	2000279c 	.word	0x2000279c

0001ddf4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1ddf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ddf8:	4604      	mov	r4, r0
   1ddfa:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ddfe:	f3ef 8611 	mrs	r6, BASEPRI
   1de02:	f383 8812 	msr	BASEPRI_MAX, r3
   1de06:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1de0a:	7b43      	ldrb	r3, [r0, #13]
   1de0c:	071a      	lsls	r2, r3, #28
   1de0e:	d505      	bpl.n	1de1c <z_thread_abort+0x28>
	__asm__ volatile(
   1de10:	f386 8811 	msr	BASEPRI, r6
   1de14:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1de18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1de1c:	f023 0220 	bic.w	r2, r3, #32
   1de20:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1de24:	09d2      	lsrs	r2, r2, #7
   1de26:	d123      	bne.n	1de70 <z_thread_abort+0x7c>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1de28:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1de2a:	68a3      	ldr	r3, [r4, #8]
   1de2c:	b113      	cbz	r3, 1de34 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   1de2e:	4620      	mov	r0, r4
   1de30:	f004 ff34 	bl	22c9c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1de34:	f104 0018 	add.w	r0, r4, #24
   1de38:	f005 f841 	bl	22ebe <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1de3c:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1de40:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1de44:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1de46:	42bd      	cmp	r5, r7
   1de48:	d000      	beq.n	1de4c <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1de4a:	b9cd      	cbnz	r5, 1de80 <z_thread_abort+0x8c>
		update_cache(1);
   1de4c:	2001      	movs	r0, #1
   1de4e:	f7ff fd25 	bl	1d89c <update_cache>
		z_thread_monitor_exit(thread);
   1de52:	4620      	mov	r0, r4
   1de54:	f7fe ff74 	bl	1cd40 <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
   1de58:	4b10      	ldr	r3, [pc, #64]	; (1de9c <z_thread_abort+0xa8>)
   1de5a:	689b      	ldr	r3, [r3, #8]
   1de5c:	42a3      	cmp	r3, r4
   1de5e:	d1d7      	bne.n	1de10 <z_thread_abort+0x1c>
   1de60:	f3ef 8305 	mrs	r3, IPSR
   1de64:	2b00      	cmp	r3, #0
   1de66:	d1d3      	bne.n	1de10 <z_thread_abort+0x1c>
   1de68:	4630      	mov	r0, r6
   1de6a:	f7f6 f915 	bl	14098 <arch_swap>
	return ret;
   1de6e:	e7cf      	b.n	1de10 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1de70:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1de74:	f043 0308 	orr.w	r3, r3, #8
   1de78:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1de7a:	f004 ff07 	bl	22c8c <sys_dlist_remove>
}
   1de7e:	e7d4      	b.n	1de2a <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   1de80:	4628      	mov	r0, r5
   1de82:	f004 ff0b 	bl	22c9c <unpend_thread_no_timeout>
   1de86:	f105 0018 	add.w	r0, r5, #24
   1de8a:	f005 f818 	bl	22ebe <z_abort_timeout>
   1de8e:	f8c5 80b0 	str.w	r8, [r5, #176]	; 0xb0
		ready_thread(thread);
   1de92:	4628      	mov	r0, r5
   1de94:	f7ff fda2 	bl	1d9dc <ready_thread>
   1de98:	e7d4      	b.n	1de44 <z_thread_abort+0x50>
   1de9a:	bf00      	nop
   1de9c:	2000279c 	.word	0x2000279c

0001dea0 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1dea0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1dea2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1dea6:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1dea8:	e9cd 6700 	strd	r6, r7, [sp]
   1deac:	f7ff fe2a 	bl	1db04 <z_pend_curr>

	if (data != NULL) {
   1deb0:	b11c      	cbz	r4, 1deba <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1deb2:	4b03      	ldr	r3, [pc, #12]	; (1dec0 <z_sched_wait+0x20>)
   1deb4:	689b      	ldr	r3, [r3, #8]
   1deb6:	695b      	ldr	r3, [r3, #20]
   1deb8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1deba:	b002      	add	sp, #8
   1debc:	bdd0      	pop	{r4, r6, r7, pc}
   1debe:	bf00      	nop
   1dec0:	2000279c 	.word	0x2000279c

0001dec4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1dec4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   1dec6:	4806      	ldr	r0, [pc, #24]	; (1dee0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   1dec8:	4a06      	ldr	r2, [pc, #24]	; (1dee4 <z_data_copy+0x20>)
   1deca:	4907      	ldr	r1, [pc, #28]	; (1dee8 <z_data_copy+0x24>)
   1decc:	1a12      	subs	r2, r2, r0
   1dece:	f002 ff64 	bl	20d9a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1ded2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1ded6:	4a05      	ldr	r2, [pc, #20]	; (1deec <z_data_copy+0x28>)
   1ded8:	4905      	ldr	r1, [pc, #20]	; (1def0 <z_data_copy+0x2c>)
   1deda:	4806      	ldr	r0, [pc, #24]	; (1def4 <z_data_copy+0x30>)
   1dedc:	f002 bf5d 	b.w	20d9a <memcpy>
   1dee0:	20000000 	.word	0x20000000
   1dee4:	200008e4 	.word	0x200008e4
   1dee8:	00026f2c 	.word	0x00026f2c
   1deec:	00000000 	.word	0x00000000
   1def0:	00026f2c 	.word	0x00026f2c
   1def4:	20000000 	.word	0x20000000

0001def8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1def8:	4b03      	ldr	r3, [pc, #12]	; (1df08 <elapsed+0x10>)
   1defa:	681b      	ldr	r3, [r3, #0]
   1defc:	b90b      	cbnz	r3, 1df02 <elapsed+0xa>
   1defe:	f7fd b941 	b.w	1b184 <sys_clock_elapsed>
}
   1df02:	2000      	movs	r0, #0
   1df04:	4770      	bx	lr
   1df06:	bf00      	nop
   1df08:	200027dc 	.word	0x200027dc

0001df0c <remove_timeout>:
{
   1df0c:	b530      	push	{r4, r5, lr}
   1df0e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1df10:	b168      	cbz	r0, 1df2e <remove_timeout+0x22>
   1df12:	4a0a      	ldr	r2, [pc, #40]	; (1df3c <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1df14:	6852      	ldr	r2, [r2, #4]
   1df16:	4290      	cmp	r0, r2
   1df18:	d009      	beq.n	1df2e <remove_timeout+0x22>
	if (next(t) != NULL) {
   1df1a:	b143      	cbz	r3, 1df2e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1df1c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1df20:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1df24:	1912      	adds	r2, r2, r4
   1df26:	eb45 0101 	adc.w	r1, r5, r1
   1df2a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1df2e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1df30:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1df32:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1df34:	2300      	movs	r3, #0
	node->prev = NULL;
   1df36:	e9c0 3300 	strd	r3, r3, [r0]
}
   1df3a:	bd30      	pop	{r4, r5, pc}
   1df3c:	200005e4 	.word	0x200005e4

0001df40 <next_timeout>:

static int32_t next_timeout(void)
{
   1df40:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1df42:	4b13      	ldr	r3, [pc, #76]	; (1df90 <next_timeout+0x50>)
   1df44:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1df46:	429c      	cmp	r4, r3
   1df48:	bf08      	it	eq
   1df4a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1df4c:	f7ff ffd4 	bl	1def8 <elapsed>
   1df50:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1df52:	b1bc      	cbz	r4, 1df84 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1df54:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1df58:	1b40      	subs	r0, r0, r5
   1df5a:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1df5e:	2801      	cmp	r0, #1
   1df60:	f171 0300 	sbcs.w	r3, r1, #0
   1df64:	db11      	blt.n	1df8a <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1df66:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1df6a:	2300      	movs	r3, #0
   1df6c:	4282      	cmp	r2, r0
   1df6e:	eb73 0401 	sbcs.w	r4, r3, r1
   1df72:	da00      	bge.n	1df76 <next_timeout+0x36>
   1df74:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1df76:	4b07      	ldr	r3, [pc, #28]	; (1df94 <next_timeout+0x54>)
   1df78:	691b      	ldr	r3, [r3, #16]
   1df7a:	b113      	cbz	r3, 1df82 <next_timeout+0x42>
   1df7c:	4298      	cmp	r0, r3
   1df7e:	bfa8      	it	ge
   1df80:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1df82:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1df84:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1df88:	e7f5      	b.n	1df76 <next_timeout+0x36>
   1df8a:	2000      	movs	r0, #0
   1df8c:	e7f3      	b.n	1df76 <next_timeout+0x36>
   1df8e:	bf00      	nop
   1df90:	200005e4 	.word	0x200005e4
   1df94:	2000279c 	.word	0x2000279c

0001df98 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1df98:	f1b3 3fff 	cmp.w	r3, #4294967295
   1df9c:	bf08      	it	eq
   1df9e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1dfa2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dfa6:	4604      	mov	r4, r0
   1dfa8:	4692      	mov	sl, r2
   1dfaa:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1dfac:	d073      	beq.n	1e096 <z_add_timeout+0xfe>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1dfae:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1dfb0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dfb4:	f3ef 8511 	mrs	r5, BASEPRI
   1dfb8:	f383 8812 	msr	BASEPRI_MAX, r3
   1dfbc:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1dfc0:	f06f 0301 	mvn.w	r3, #1
   1dfc4:	ebb3 080a 	subs.w	r8, r3, sl
   1dfc8:	f04f 32ff 	mov.w	r2, #4294967295
   1dfcc:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1dfd0:	f1b8 0f00 	cmp.w	r8, #0
   1dfd4:	f179 0100 	sbcs.w	r1, r9, #0
   1dfd8:	db1c      	blt.n	1e014 <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1dfda:	4830      	ldr	r0, [pc, #192]	; (1e09c <z_add_timeout+0x104>)
   1dfdc:	e9d0 1000 	ldrd	r1, r0, [r0]
   1dfe0:	1a5b      	subs	r3, r3, r1
   1dfe2:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   1dfe6:	ebb3 060a 	subs.w	r6, r3, sl
   1dfea:	eb62 070b 	sbc.w	r7, r2, fp
   1dfee:	2e01      	cmp	r6, #1
   1dff0:	f177 0300 	sbcs.w	r3, r7, #0
   1dff4:	bfbc      	itt	lt
   1dff6:	2601      	movlt	r6, #1
   1dff8:	2700      	movlt	r7, #0
   1dffa:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
   1dffe:	4a28      	ldr	r2, [pc, #160]	; (1e0a0 <z_add_timeout+0x108>)
   1e000:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e004:	4293      	cmp	r3, r2
   1e006:	d11e      	bne.n	1e046 <z_add_timeout+0xae>
	node->prev = tail;
   1e008:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   1e00c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   1e010:	6054      	str	r4, [r2, #4]
}
   1e012:	e02d      	b.n	1e070 <z_add_timeout+0xd8>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1e014:	f7ff ff70 	bl	1def8 <elapsed>
   1e018:	f11a 0301 	adds.w	r3, sl, #1
   1e01c:	9300      	str	r3, [sp, #0]
   1e01e:	f14b 0300 	adc.w	r3, fp, #0
   1e022:	9301      	str	r3, [sp, #4]
   1e024:	e9dd 2300 	ldrd	r2, r3, [sp]
   1e028:	1812      	adds	r2, r2, r0
   1e02a:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   1e02e:	e9c4 2304 	strd	r2, r3, [r4, #16]
   1e032:	e7e4      	b.n	1dffe <z_add_timeout+0x66>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   1e034:	ebb6 0008 	subs.w	r0, r6, r8
   1e038:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
   1e03c:	4563      	cmp	r3, ip
   1e03e:	e9c4 0104 	strd	r0, r1, [r4, #16]
   1e042:	d0e1      	beq.n	1e008 <z_add_timeout+0x70>
   1e044:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   1e046:	2b00      	cmp	r3, #0
   1e048:	d0de      	beq.n	1e008 <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
   1e04a:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
   1e04e:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
   1e052:	4546      	cmp	r6, r8
   1e054:	eb77 0109 	sbcs.w	r1, r7, r9
   1e058:	daec      	bge.n	1e034 <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
   1e05a:	ebb8 0006 	subs.w	r0, r8, r6
   1e05e:	eb69 0107 	sbc.w	r1, r9, r7
   1e062:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1e066:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1e068:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   1e06c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1e06e:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1e070:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e072:	4293      	cmp	r3, r2
   1e074:	d00b      	beq.n	1e08e <z_add_timeout+0xf6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1e076:	429c      	cmp	r4, r3
   1e078:	d109      	bne.n	1e08e <z_add_timeout+0xf6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1e07a:	f7ff ff61 	bl	1df40 <next_timeout>

			if (next_time == 0 ||
   1e07e:	b118      	cbz	r0, 1e088 <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
   1e080:	4b08      	ldr	r3, [pc, #32]	; (1e0a4 <z_add_timeout+0x10c>)
			if (next_time == 0 ||
   1e082:	691b      	ldr	r3, [r3, #16]
   1e084:	4283      	cmp	r3, r0
   1e086:	d002      	beq.n	1e08e <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
   1e088:	2100      	movs	r1, #0
   1e08a:	f7fd f84b 	bl	1b124 <sys_clock_set_timeout>
	__asm__ volatile(
   1e08e:	f385 8811 	msr	BASEPRI, r5
   1e092:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1e096:	b003      	add	sp, #12
   1e098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e09c:	20002048 	.word	0x20002048
   1e0a0:	200005e4 	.word	0x200005e4
   1e0a4:	2000279c 	.word	0x2000279c

0001e0a8 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1e0a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e0ac:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1e0ae:	f7ff fc53 	bl	1d958 <z_time_slice>
	__asm__ volatile(
   1e0b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e0b6:	f3ef 8411 	mrs	r4, BASEPRI
   1e0ba:	f383 8812 	msr	BASEPRI_MAX, r3
   1e0be:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1e0c2:	4d2c      	ldr	r5, [pc, #176]	; (1e174 <sys_clock_announce+0xcc>)
   1e0c4:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1e178 <sys_clock_announce+0xd0>
	return list->head == list;
   1e0c8:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 1e17c <sys_clock_announce+0xd4>
   1e0cc:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1e0ce:	4651      	mov	r1, sl
   1e0d0:	f8d5 c000 	ldr.w	ip, [r5]
   1e0d4:	f8db 0000 	ldr.w	r0, [fp]
   1e0d8:	4662      	mov	r2, ip
   1e0da:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e0dc:	4558      	cmp	r0, fp
   1e0de:	e9da 8900 	ldrd	r8, r9, [sl]
   1e0e2:	e9cd 2300 	strd	r2, r3, [sp]
   1e0e6:	d00d      	beq.n	1e104 <sys_clock_announce+0x5c>
   1e0e8:	b160      	cbz	r0, 1e104 <sys_clock_announce+0x5c>
   1e0ea:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1e0ee:	45b4      	cmp	ip, r6
   1e0f0:	41bb      	sbcs	r3, r7
   1e0f2:	da1e      	bge.n	1e132 <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1e0f4:	9b00      	ldr	r3, [sp, #0]
   1e0f6:	ebb6 0c03 	subs.w	ip, r6, r3
   1e0fa:	9b01      	ldr	r3, [sp, #4]
   1e0fc:	eb67 0603 	sbc.w	r6, r7, r3
   1e100:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   1e104:	9b00      	ldr	r3, [sp, #0]
   1e106:	eb13 0208 	adds.w	r2, r3, r8
   1e10a:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   1e10c:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   1e110:	eb43 0309 	adc.w	r3, r3, r9
   1e114:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   1e118:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1e11a:	f7ff ff11 	bl	1df40 <next_timeout>
   1e11e:	4631      	mov	r1, r6
   1e120:	f7fd f800 	bl	1b124 <sys_clock_set_timeout>
	__asm__ volatile(
   1e124:	f384 8811 	msr	BASEPRI, r4
   1e128:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1e12c:	b003      	add	sp, #12
   1e12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   1e132:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   1e136:	f04f 0200 	mov.w	r2, #0
   1e13a:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   1e13e:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1e142:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1e146:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   1e14a:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   1e14e:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   1e150:	f7ff fedc 	bl	1df0c <remove_timeout>
   1e154:	f384 8811 	msr	BASEPRI, r4
   1e158:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1e15c:	6883      	ldr	r3, [r0, #8]
   1e15e:	4798      	blx	r3
	__asm__ volatile(
   1e160:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e164:	f3ef 8411 	mrs	r4, BASEPRI
   1e168:	f383 8812 	msr	BASEPRI_MAX, r3
   1e16c:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   1e170:	4901      	ldr	r1, [pc, #4]	; (1e178 <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1e172:	e7ad      	b.n	1e0d0 <sys_clock_announce+0x28>
   1e174:	200027dc 	.word	0x200027dc
   1e178:	20002048 	.word	0x20002048
   1e17c:	200005e4 	.word	0x200005e4

0001e180 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1e180:	b510      	push	{r4, lr}
   1e182:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e186:	f3ef 8411 	mrs	r4, BASEPRI
   1e18a:	f383 8812 	msr	BASEPRI_MAX, r3
   1e18e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1e192:	f7fc fff7 	bl	1b184 <sys_clock_elapsed>
   1e196:	4b06      	ldr	r3, [pc, #24]	; (1e1b0 <sys_clock_tick_get+0x30>)
   1e198:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e19c:	1812      	adds	r2, r2, r0
   1e19e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1e1a2:	f384 8811 	msr	BASEPRI, r4
   1e1a6:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1e1aa:	4610      	mov	r0, r2
   1e1ac:	4619      	mov	r1, r3
   1e1ae:	bd10      	pop	{r4, pc}
   1e1b0:	20002048 	.word	0x20002048

0001e1b4 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1e1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e1b6:	4604      	mov	r4, r0
	__asm__ volatile(
   1e1b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e1bc:	f3ef 8511 	mrs	r5, BASEPRI
   1e1c0:	f383 8812 	msr	BASEPRI_MAX, r3
   1e1c4:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1e1c8:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1e1cc:	1c56      	adds	r6, r2, #1
   1e1ce:	f143 0700 	adc.w	r7, r3, #0
   1e1d2:	2f00      	cmp	r7, #0
   1e1d4:	bf08      	it	eq
   1e1d6:	2e02      	cmpeq	r6, #2
   1e1d8:	d302      	bcc.n	1e1e0 <z_timer_expiration_handler+0x2c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1e1da:	4918      	ldr	r1, [pc, #96]	; (1e23c <z_timer_expiration_handler+0x88>)
   1e1dc:	f7ff fedc 	bl	1df98 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1e1e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1e1e2:	3301      	adds	r3, #1
   1e1e4:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1e1e6:	6a23      	ldr	r3, [r4, #32]
   1e1e8:	b173      	cbz	r3, 1e208 <z_timer_expiration_handler+0x54>
	__asm__ volatile(
   1e1ea:	f385 8811 	msr	BASEPRI, r5
   1e1ee:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   1e1f2:	6a23      	ldr	r3, [r4, #32]
   1e1f4:	4620      	mov	r0, r4
   1e1f6:	4798      	blx	r3
	__asm__ volatile(
   1e1f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e1fc:	f3ef 8511 	mrs	r5, BASEPRI
   1e200:	f383 8812 	msr	BASEPRI_MAX, r3
   1e204:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1e208:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e20c:	42a6      	cmp	r6, r4
   1e20e:	d000      	beq.n	1e212 <z_timer_expiration_handler+0x5e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1e210:	b926      	cbnz	r6, 1e21c <z_timer_expiration_handler+0x68>
	__asm__ volatile(
   1e212:	f385 8811 	msr	BASEPRI, r5
   1e216:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   1e21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
   1e21c:	4630      	mov	r0, r6
   1e21e:	f004 fd50 	bl	22cc2 <z_unpend_thread_no_timeout>
   1e222:	2300      	movs	r3, #0
   1e224:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0
   1e228:	f385 8811 	msr	BASEPRI, r5
   1e22c:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   1e230:	4630      	mov	r0, r6
}
   1e232:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   1e236:	f004 bd88 	b.w	22d4a <z_ready_thread>
   1e23a:	bf00      	nop
   1e23c:	0001e1b5 	.word	0x0001e1b5

0001e240 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1e240:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   1e244:	4619      	mov	r1, r3
   1e246:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1e248:	1c4c      	adds	r4, r1, #1
{
   1e24a:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1e24c:	bf08      	it	eq
   1e24e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1e252:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1e256:	4680      	mov	r8, r0
   1e258:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1e25a:	d04c      	beq.n	1e2f6 <z_impl_k_timer_start+0xb6>
   1e25c:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1e25e:	1c6b      	adds	r3, r5, #1
   1e260:	bf08      	it	eq
   1e262:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1e266:	4614      	mov	r4, r2
   1e268:	d019      	beq.n	1e29e <z_impl_k_timer_start+0x5e>
   1e26a:	ea54 0305 	orrs.w	r3, r4, r5
   1e26e:	d016      	beq.n	1e29e <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   1e270:	f06f 0301 	mvn.w	r3, #1
   1e274:	ebb3 0a02 	subs.w	sl, r3, r2
   1e278:	f04f 33ff 	mov.w	r3, #4294967295
   1e27c:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1e280:	f1ba 0f00 	cmp.w	sl, #0
   1e284:	f17b 0300 	sbcs.w	r3, fp, #0
   1e288:	da09      	bge.n	1e29e <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   1e28a:	f112 34ff 	adds.w	r4, r2, #4294967295
   1e28e:	f145 35ff 	adc.w	r5, r5, #4294967295
   1e292:	2c01      	cmp	r4, #1
   1e294:	f175 0300 	sbcs.w	r3, r5, #0
   1e298:	bfbc      	itt	lt
   1e29a:	2401      	movlt	r4, #1
   1e29c:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1e29e:	f06f 0301 	mvn.w	r3, #1
   1e2a2:	1a1b      	subs	r3, r3, r0
   1e2a4:	9300      	str	r3, [sp, #0]
   1e2a6:	f04f 33ff 	mov.w	r3, #4294967295
   1e2aa:	eb63 0301 	sbc.w	r3, r3, r1
   1e2ae:	9301      	str	r3, [sp, #4]
   1e2b0:	e9dd 2300 	ldrd	r2, r3, [sp]
   1e2b4:	2a00      	cmp	r2, #0
   1e2b6:	f173 0300 	sbcs.w	r3, r3, #0
   1e2ba:	da0c      	bge.n	1e2d6 <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1e2bc:	f110 38ff 	adds.w	r8, r0, #4294967295
   1e2c0:	f141 39ff 	adc.w	r9, r1, #4294967295
   1e2c4:	f1b8 0f00 	cmp.w	r8, #0
   1e2c8:	f179 0300 	sbcs.w	r3, r9, #0
   1e2cc:	bfbc      	itt	lt
   1e2ce:	f04f 0800 	movlt.w	r8, #0
   1e2d2:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   1e2d6:	4630      	mov	r0, r6
   1e2d8:	f004 fdf1 	bl	22ebe <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1e2dc:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1e2de:	4907      	ldr	r1, [pc, #28]	; (1e2fc <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
   1e2e0:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1e2e2:	4642      	mov	r2, r8
   1e2e4:	464b      	mov	r3, r9
   1e2e6:	4630      	mov	r0, r6
	timer->period = period;
   1e2e8:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   1e2ec:	b002      	add	sp, #8
   1e2ee:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1e2f2:	f7ff be51 	b.w	1df98 <z_add_timeout>
}
   1e2f6:	b002      	add	sp, #8
   1e2f8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   1e2fc:	0001e1b5 	.word	0x0001e1b5

0001e300 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1e300:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1e304:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1e306:	4b29      	ldr	r3, [pc, #164]	; (1e3ac <z_impl_k_poll+0xac>)
   1e308:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   1e30a:	2301      	movs	r3, #1
   1e30c:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   1e310:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1e314:	ea52 0307 	orrs.w	r3, r2, r7
{
   1e318:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1e31a:	bf0c      	ite	eq
   1e31c:	2301      	moveq	r3, #1
   1e31e:	2300      	movne	r3, #0
   1e320:	f105 0260 	add.w	r2, r5, #96	; 0x60
{
   1e324:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1e326:	f004 fec8 	bl	230ba <register_events>
   1e32a:	4681      	mov	r9, r0
	__asm__ volatile(
   1e32c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e330:	f3ef 8a11 	mrs	sl, BASEPRI
   1e334:	f383 8812 	msr	BASEPRI_MAX, r3
   1e338:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1e33c:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
   1e340:	b964      	cbnz	r4, 1e35c <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1e342:	4601      	mov	r1, r0
   1e344:	4652      	mov	r2, sl
   1e346:	4640      	mov	r0, r8
   1e348:	f004 fe55 	bl	22ff6 <clear_event_registrations>
	__asm__ volatile(
   1e34c:	f38a 8811 	msr	BASEPRI, sl
   1e350:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1e354:	4620      	mov	r0, r4
   1e356:	b002      	add	sp, #8
   1e358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1e35c:	2300      	movs	r3, #0
   1e35e:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e362:	ea56 0307 	orrs.w	r3, r6, r7
   1e366:	d106      	bne.n	1e376 <z_impl_k_poll+0x76>
   1e368:	f38a 8811 	msr	BASEPRI, sl
   1e36c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1e370:	f06f 040a 	mvn.w	r4, #10
   1e374:	e7ee      	b.n	1e354 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1e376:	e9cd 6700 	strd	r6, r7, [sp]
   1e37a:	4a0d      	ldr	r2, [pc, #52]	; (1e3b0 <z_impl_k_poll+0xb0>)
   1e37c:	480d      	ldr	r0, [pc, #52]	; (1e3b4 <z_impl_k_poll+0xb4>)
   1e37e:	4651      	mov	r1, sl
   1e380:	f7ff fbc0 	bl	1db04 <z_pend_curr>
   1e384:	4604      	mov	r4, r0
	__asm__ volatile(
   1e386:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e38a:	f3ef 8511 	mrs	r5, BASEPRI
   1e38e:	f383 8812 	msr	BASEPRI_MAX, r3
   1e392:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1e396:	462a      	mov	r2, r5
   1e398:	4649      	mov	r1, r9
   1e39a:	4640      	mov	r0, r8
   1e39c:	f004 fe2b 	bl	22ff6 <clear_event_registrations>
	__asm__ volatile(
   1e3a0:	f385 8811 	msr	BASEPRI, r5
   1e3a4:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1e3a8:	e7d4      	b.n	1e354 <z_impl_k_poll+0x54>
   1e3aa:	bf00      	nop
   1e3ac:	2000279c 	.word	0x2000279c
   1e3b0:	200005ec 	.word	0x200005ec
   1e3b4:	2000320d 	.word	0x2000320d

0001e3b8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1e3b8:	b538      	push	{r3, r4, r5, lr}
   1e3ba:	4603      	mov	r3, r0
	__asm__ volatile(
   1e3bc:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e3c0:	f3ef 8511 	mrs	r5, BASEPRI
   1e3c4:	f382 8812 	msr	BASEPRI_MAX, r2
   1e3c8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1e3cc:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1e3ce:	2101      	movs	r1, #1
   1e3d0:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1e3d2:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1e3d4:	4283      	cmp	r3, r0
   1e3d6:	d106      	bne.n	1e3e6 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1e3d8:	f385 8811 	msr	BASEPRI, r5
   1e3dc:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1e3e0:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1e3e2:	4620      	mov	r0, r4
   1e3e4:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1e3e6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1e3ea:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1e3ec:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e3ee:	2300      	movs	r3, #0
	node->prev = NULL;
   1e3f0:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1e3f4:	f004 fed8 	bl	231a8 <signal_poll_event>
	z_reschedule(&lock, key);
   1e3f8:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1e3fa:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1e3fc:	4801      	ldr	r0, [pc, #4]	; (1e404 <z_impl_k_poll_signal_raise+0x4c>)
   1e3fe:	f7ff fa27 	bl	1d850 <z_reschedule>
	return rc;
   1e402:	e7ee      	b.n	1e3e2 <z_impl_k_poll_signal_raise+0x2a>
   1e404:	2000320d 	.word	0x2000320d

0001e408 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1e408:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e40a:	4606      	mov	r6, r0
   1e40c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1e40e:	f004 fa46 	bl	2289e <k_is_in_isr>
   1e412:	b988      	cbnz	r0, 1e438 <z_thread_aligned_alloc+0x30>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1e414:	4b0c      	ldr	r3, [pc, #48]	; (1e448 <z_thread_aligned_alloc+0x40>)
   1e416:	689b      	ldr	r3, [r3, #8]
   1e418:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   1e41c:	b184      	cbz	r4, 1e440 <z_thread_aligned_alloc+0x38>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1e41e:	2204      	movs	r2, #4
   1e420:	18aa      	adds	r2, r5, r2
   1e422:	d209      	bcs.n	1e438 <z_thread_aligned_alloc+0x30>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1e424:	2000      	movs	r0, #0
   1e426:	2100      	movs	r1, #0
   1e428:	e9cd 0100 	strd	r0, r1, [sp]
   1e42c:	f046 0104 	orr.w	r1, r6, #4
   1e430:	4620      	mov	r0, r4
   1e432:	f004 f98b 	bl	2274c <k_heap_aligned_alloc>
	if (mem == NULL) {
   1e436:	b908      	cbnz	r0, 1e43c <z_thread_aligned_alloc+0x34>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1e438:	2400      	movs	r4, #0
	}

	return ret;
   1e43a:	e001      	b.n	1e440 <z_thread_aligned_alloc+0x38>
	*heap_ref = heap;
   1e43c:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1e43e:	1d04      	adds	r4, r0, #4
}
   1e440:	4620      	mov	r0, r4
   1e442:	b002      	add	sp, #8
   1e444:	bd70      	pop	{r4, r5, r6, pc}
   1e446:	bf00      	nop
   1e448:	2000279c 	.word	0x2000279c

0001e44c <main>:
		uart_line_ctrl_get(dev, UART_LINE_CTRL_DTR, &dtr);
		k_sleep(K_MSEC(100));
	}
	#endif

}
   1e44c:	4770      	bx	lr

0001e44e <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1e44e:	4603      	mov	r3, r0
   1e450:	b140      	cbz	r0, 1e464 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1e452:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1e454:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1e458:	2a02      	cmp	r2, #2
   1e45a:	d006      	beq.n	1e46a <sys_notify_validate+0x1c>
   1e45c:	2a03      	cmp	r2, #3
   1e45e:	d004      	beq.n	1e46a <sys_notify_validate+0x1c>
   1e460:	2a01      	cmp	r2, #1
   1e462:	d005      	beq.n	1e470 <sys_notify_validate+0x22>
		return -EINVAL;
   1e464:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1e468:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1e46a:	681a      	ldr	r2, [r3, #0]
   1e46c:	2a00      	cmp	r2, #0
   1e46e:	d0f9      	beq.n	1e464 <sys_notify_validate+0x16>
		notify->result = 0;
   1e470:	2000      	movs	r0, #0
   1e472:	6098      	str	r0, [r3, #8]
   1e474:	4770      	bx	lr

0001e476 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1e476:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1e478:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1e47c:	2a02      	cmp	r2, #2
{
   1e47e:	b510      	push	{r4, lr}
   1e480:	4603      	mov	r3, r0
	notify->result = res;
   1e482:	6081      	str	r1, [r0, #8]
	switch (method) {
   1e484:	d00a      	beq.n	1e49c <sys_notify_finalize+0x26>
   1e486:	2a03      	cmp	r2, #3
   1e488:	d10b      	bne.n	1e4a2 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1e48a:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1e48c:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1e48e:	2200      	movs	r2, #0
   1e490:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1e492:	b108      	cbz	r0, 1e498 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   1e494:	f7ff ff90 	bl	1e3b8 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1e498:	4620      	mov	r0, r4
   1e49a:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1e49c:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1e49e:	2400      	movs	r4, #0
		break;
   1e4a0:	e7f5      	b.n	1e48e <sys_notify_finalize+0x18>
	switch (method) {
   1e4a2:	2400      	movs	r4, #0
   1e4a4:	4620      	mov	r0, r4
   1e4a6:	e7f2      	b.n	1e48e <sys_notify_finalize+0x18>

0001e4a8 <arch_printk_char_out>:
}
   1e4a8:	2000      	movs	r0, #0
   1e4aa:	4770      	bx	lr

0001e4ac <str_out>:
{
   1e4ac:	b530      	push	{r4, r5, lr}
   1e4ae:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1e4b0:	680c      	ldr	r4, [r1, #0]
   1e4b2:	1c55      	adds	r5, r2, #1
   1e4b4:	b114      	cbz	r4, 1e4bc <str_out+0x10>
   1e4b6:	684b      	ldr	r3, [r1, #4]
   1e4b8:	4293      	cmp	r3, r2
   1e4ba:	dc01      	bgt.n	1e4c0 <str_out+0x14>
		ctx->count++;
   1e4bc:	608d      	str	r5, [r1, #8]
}
   1e4be:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1e4c0:	3b01      	subs	r3, #1
   1e4c2:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1e4c4:	bf08      	it	eq
   1e4c6:	2200      	moveq	r2, #0
   1e4c8:	608d      	str	r5, [r1, #8]
   1e4ca:	bf0c      	ite	eq
   1e4cc:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1e4ce:	54a0      	strbne	r0, [r4, r2]
   1e4d0:	e7f5      	b.n	1e4be <str_out+0x12>

0001e4d2 <printk>:
{
   1e4d2:	b40f      	push	{r0, r1, r2, r3}
   1e4d4:	b507      	push	{r0, r1, r2, lr}
   1e4d6:	a904      	add	r1, sp, #16
   1e4d8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1e4dc:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1e4de:	f7f1 fc7d 	bl	fddc <vprintk>
}
   1e4e2:	b003      	add	sp, #12
   1e4e4:	f85d eb04 	ldr.w	lr, [sp], #4
   1e4e8:	b004      	add	sp, #16
   1e4ea:	4770      	bx	lr

0001e4ec <snprintk>:
{
   1e4ec:	b40c      	push	{r2, r3}
   1e4ee:	b507      	push	{r0, r1, r2, lr}
   1e4f0:	ab04      	add	r3, sp, #16
   1e4f2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1e4f6:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1e4f8:	f7f1 fc7e 	bl	fdf8 <vsnprintk>
}
   1e4fc:	b003      	add	sp, #12
   1e4fe:	f85d eb04 	ldr.w	lr, [sp], #4
   1e502:	b002      	add	sp, #8
   1e504:	4770      	bx	lr

0001e506 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1e506:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1e508:	f013 0307 	ands.w	r3, r3, #7
   1e50c:	d105      	bne.n	1e51a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1e50e:	6803      	ldr	r3, [r0, #0]
   1e510:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1e512:	bf0c      	ite	eq
   1e514:	2000      	moveq	r0, #0
   1e516:	2003      	movne	r0, #3
   1e518:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1e51a:	2b02      	cmp	r3, #2
   1e51c:	d105      	bne.n	1e52a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1e51e:	8b43      	ldrh	r3, [r0, #26]
   1e520:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1e522:	bf14      	ite	ne
   1e524:	2000      	movne	r0, #0
   1e526:	2004      	moveq	r0, #4
   1e528:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1e52a:	2b01      	cmp	r3, #1
   1e52c:	d105      	bne.n	1e53a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1e52e:	6803      	ldr	r3, [r0, #0]
   1e530:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1e532:	bf0c      	ite	eq
   1e534:	2000      	moveq	r0, #0
   1e536:	2005      	movne	r0, #5
   1e538:	4770      	bx	lr
	int evt = EVT_NOP;
   1e53a:	2000      	movs	r0, #0
}
   1e53c:	4770      	bx	lr

0001e53e <notify_one>:
{
   1e53e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e542:	460d      	mov	r5, r1
   1e544:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1e546:	4619      	mov	r1, r3
   1e548:	1d28      	adds	r0, r5, #4
{
   1e54a:	4690      	mov	r8, r2
   1e54c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1e54e:	f7ff ff92 	bl	1e476 <sys_notify_finalize>
	if (cb) {
   1e552:	4604      	mov	r4, r0
   1e554:	b138      	cbz	r0, 1e566 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1e556:	4633      	mov	r3, r6
   1e558:	4642      	mov	r2, r8
   1e55a:	4629      	mov	r1, r5
   1e55c:	4638      	mov	r0, r7
   1e55e:	46a4      	mov	ip, r4
}
   1e560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1e564:	4760      	bx	ip
}
   1e566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e56a <transition_complete>:
{
   1e56a:	b410      	push	{r4}
	__asm__ volatile(
   1e56c:	f04f 0440 	mov.w	r4, #64	; 0x40
   1e570:	f3ef 8211 	mrs	r2, BASEPRI
   1e574:	f384 8812 	msr	BASEPRI_MAX, r4
   1e578:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1e57c:	6141      	str	r1, [r0, #20]
}
   1e57e:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1e580:	2101      	movs	r1, #1
   1e582:	f7f1 bc4d 	b.w	fe20 <process_event>

0001e586 <validate_args>:
{
   1e586:	b510      	push	{r4, lr}
   1e588:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1e58a:	b140      	cbz	r0, 1e59e <validate_args+0x18>
   1e58c:	b139      	cbz	r1, 1e59e <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1e58e:	1d08      	adds	r0, r1, #4
   1e590:	f7ff ff5d 	bl	1e44e <sys_notify_validate>
	if ((rv == 0)
   1e594:	b928      	cbnz	r0, 1e5a2 <validate_args+0x1c>
	    && ((cli->notify.flags
   1e596:	68a3      	ldr	r3, [r4, #8]
   1e598:	f033 0303 	bics.w	r3, r3, #3
   1e59c:	d001      	beq.n	1e5a2 <validate_args+0x1c>
		rv = -EINVAL;
   1e59e:	f06f 0015 	mvn.w	r0, #21
}
   1e5a2:	bd10      	pop	{r4, pc}

0001e5a4 <onoff_manager_init>:
{
   1e5a4:	b538      	push	{r3, r4, r5, lr}
   1e5a6:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1e5a8:	4605      	mov	r5, r0
   1e5aa:	b158      	cbz	r0, 1e5c4 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1e5ac:	b151      	cbz	r1, 1e5c4 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1e5ae:	680b      	ldr	r3, [r1, #0]
   1e5b0:	b143      	cbz	r3, 1e5c4 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1e5b2:	684b      	ldr	r3, [r1, #4]
   1e5b4:	b133      	cbz	r3, 1e5c4 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1e5b6:	221c      	movs	r2, #28
   1e5b8:	2100      	movs	r1, #0
   1e5ba:	f002 fbf9 	bl	20db0 <memset>
   1e5be:	612c      	str	r4, [r5, #16]
	return 0;
   1e5c0:	2000      	movs	r0, #0
}
   1e5c2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1e5c4:	f06f 0015 	mvn.w	r0, #21
   1e5c8:	e7fb      	b.n	1e5c2 <onoff_manager_init+0x1e>

0001e5ca <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1e5ca:	b570      	push	{r4, r5, r6, lr}
   1e5cc:	4604      	mov	r4, r0
   1e5ce:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1e5d0:	f7ff ffd9 	bl	1e586 <validate_args>

	if (rv < 0) {
   1e5d4:	1e05      	subs	r5, r0, #0
   1e5d6:	db31      	blt.n	1e63c <onoff_request+0x72>
   1e5d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e5dc:	f3ef 8111 	mrs	r1, BASEPRI
   1e5e0:	f383 8812 	msr	BASEPRI_MAX, r3
   1e5e4:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1e5e8:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1e5ea:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1e5ec:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1e5f0:	42ab      	cmp	r3, r5
   1e5f2:	f000 0207 	and.w	r2, r0, #7
   1e5f6:	d02e      	beq.n	1e656 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1e5f8:	2a02      	cmp	r2, #2
   1e5fa:	d10e      	bne.n	1e61a <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1e5fc:	3301      	adds	r3, #1
   1e5fe:	8363      	strh	r3, [r4, #26]
	rv = state;
   1e600:	4615      	mov	r5, r2
		notify = true;
   1e602:	2301      	movs	r3, #1
	__asm__ volatile(
   1e604:	f381 8811 	msr	BASEPRI, r1
   1e608:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1e60c:	b1b3      	cbz	r3, 1e63c <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1e60e:	2300      	movs	r3, #0
   1e610:	4631      	mov	r1, r6
   1e612:	4620      	mov	r0, r4
   1e614:	f7ff ff93 	bl	1e53e <notify_one>
   1e618:	e010      	b.n	1e63c <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1e61a:	0783      	lsls	r3, r0, #30
   1e61c:	d001      	beq.n	1e622 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1e61e:	2a06      	cmp	r2, #6
   1e620:	d10e      	bne.n	1e640 <onoff_request+0x76>
	parent->next = child;
   1e622:	2300      	movs	r3, #0
   1e624:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   1e626:	6863      	ldr	r3, [r4, #4]
   1e628:	b993      	cbnz	r3, 1e650 <onoff_request+0x86>
	list->head = node;
   1e62a:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1e62e:	4615      	mov	r5, r2
   1e630:	b962      	cbnz	r2, 1e64c <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1e632:	460a      	mov	r2, r1
   1e634:	4620      	mov	r0, r4
   1e636:	2102      	movs	r1, #2
   1e638:	f7f1 fbf2 	bl	fe20 <process_event>
		}
	}

	return rv;
}
   1e63c:	4628      	mov	r0, r5
   1e63e:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1e640:	2a05      	cmp	r2, #5
   1e642:	bf0c      	ite	eq
   1e644:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   1e648:	f06f 0504 	mvnne.w	r5, #4
   1e64c:	2300      	movs	r3, #0
   1e64e:	e7d9      	b.n	1e604 <onoff_request+0x3a>
	parent->next = child;
   1e650:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1e652:	6066      	str	r6, [r4, #4]
}
   1e654:	e7eb      	b.n	1e62e <onoff_request+0x64>
		rv = -EAGAIN;
   1e656:	f06f 050a 	mvn.w	r5, #10
   1e65a:	e7f7      	b.n	1e64c <onoff_request+0x82>

0001e65c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1e65c:	4604      	mov	r4, r0
   1e65e:	b508      	push	{r3, lr}
   1e660:	4608      	mov	r0, r1
   1e662:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1e664:	461a      	mov	r2, r3
   1e666:	47a0      	blx	r4
	return z_impl_z_current_get();
   1e668:	f7ff fbae 	bl	1ddc8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1e66c:	f7f6 f978 	bl	14960 <z_impl_k_thread_abort>

0001e670 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1e670:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1e674:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   1e676:	0840      	lsrs	r0, r0, #1
   1e678:	4770      	bx	lr

0001e67a <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1e67a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e67c:	4603      	mov	r3, r0
   1e67e:	460c      	mov	r4, r1
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   1e680:	f7ff fff6 	bl	1e670 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1e684:	fab0 f080 	clz	r0, r0
   1e688:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   1e68c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   1e690:	00ca      	lsls	r2, r1, #3
   1e692:	f8dc 6010 	ldr.w	r6, [ip, #16]
   1e696:	1d17      	adds	r7, r2, #4
   1e698:	b28d      	uxth	r5, r1
   1e69a:	3206      	adds	r2, #6
   1e69c:	b956      	cbnz	r6, 1e6b4 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   1e69e:	2101      	movs	r1, #1
   1e6a0:	fa01 f000 	lsl.w	r0, r1, r0
   1e6a4:	68d9      	ldr	r1, [r3, #12]
   1e6a6:	4301      	orrs	r1, r0
   1e6a8:	60d9      	str	r1, [r3, #12]
		b->next = c;
   1e6aa:	f8cc 4010 	str.w	r4, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   1e6ae:	53dd      	strh	r5, [r3, r7]
   1e6b0:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   1e6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   1e6b4:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   1e6b6:	3104      	adds	r1, #4
   1e6b8:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   1e6ba:	53d8      	strh	r0, [r3, r7]
   1e6bc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1e6c0:	529e      	strh	r6, [r3, r2]
   1e6c2:	80c5      	strh	r5, [r0, #6]
   1e6c4:	525d      	strh	r5, [r3, r1]
   1e6c6:	e7f4      	b.n	1e6b2 <free_list_add+0x38>

0001e6c8 <free_list_remove_bidx>:
{
   1e6c8:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   1e6ca:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   1e6ce:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   1e6d0:	4299      	cmp	r1, r3
   1e6d2:	f102 0104 	add.w	r1, r2, #4
   1e6d6:	d10a      	bne.n	1e6ee <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   1e6d8:	2301      	movs	r3, #1
   1e6da:	fa03 f202 	lsl.w	r2, r3, r2
   1e6de:	68c3      	ldr	r3, [r0, #12]
   1e6e0:	ea23 0302 	bic.w	r3, r3, r2
   1e6e4:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1e6e6:	2300      	movs	r3, #0
   1e6e8:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1e6ec:	bd10      	pop	{r4, pc}
   1e6ee:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   1e6f0:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1e6f4:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   1e6f8:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1e6fc:	80cb      	strh	r3, [r1, #6]
   1e6fe:	8082      	strh	r2, [r0, #4]
}
   1e700:	e7f4      	b.n	1e6ec <free_list_remove_bidx+0x24>

0001e702 <free_list_remove>:
{
   1e702:	b510      	push	{r4, lr}
   1e704:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1e706:	f7ff ffb3 	bl	1e670 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1e70a:	fab0 f280 	clz	r2, r0
}
   1e70e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		free_list_remove_bidx(h, c, bidx);
   1e712:	f1c2 021f 	rsb	r2, r2, #31
   1e716:	4618      	mov	r0, r3
   1e718:	f7ff bfd6 	b.w	1e6c8 <free_list_remove_bidx>

0001e71c <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1e71c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e720:	fab1 f581 	clz	r5, r1
   1e724:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1e728:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   1e72c:	4603      	mov	r3, r0
	if (b->next) {
   1e72e:	693a      	ldr	r2, [r7, #16]
{
   1e730:	460e      	mov	r6, r1
	if (b->next) {
   1e732:	b1ca      	cbz	r2, 1e768 <alloc_chunk+0x4c>
   1e734:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1e738:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   1e73a:	4618      	mov	r0, r3
   1e73c:	4621      	mov	r1, r4
   1e73e:	f7ff ff97 	bl	1e670 <chunk_size>
   1e742:	42b0      	cmp	r0, r6
   1e744:	d307      	bcc.n	1e756 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   1e746:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1e748:	4621      	mov	r1, r4
   1e74a:	4618      	mov	r0, r3
   1e74c:	f7ff ffbc 	bl	1e6c8 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1e750:	4620      	mov	r0, r4
   1e752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1e756:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   1e75a:	f1b8 0801 	subs.w	r8, r8, #1
   1e75e:	88e1      	ldrh	r1, [r4, #6]
			b->next = next_free_chunk(h, c);
   1e760:	6139      	str	r1, [r7, #16]
		} while (--i && b->next != first);
   1e762:	d001      	beq.n	1e768 <alloc_chunk+0x4c>
   1e764:	428a      	cmp	r2, r1
   1e766:	d1e7      	bne.n	1e738 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1e768:	68d9      	ldr	r1, [r3, #12]
   1e76a:	f1c5 0520 	rsb	r5, r5, #32
   1e76e:	f04f 34ff 	mov.w	r4, #4294967295
   1e772:	40ac      	lsls	r4, r5
	if (bmask != 0U) {
   1e774:	400c      	ands	r4, r1
   1e776:	d0eb      	beq.n	1e750 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   1e778:	fa94 f2a4 	rbit	r2, r4
   1e77c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1e780:	1d11      	adds	r1, r2, #4
   1e782:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   1e786:	e7df      	b.n	1e748 <alloc_chunk+0x2c>

0001e788 <merge_chunks>:
{
   1e788:	b538      	push	{r3, r4, r5, lr}
   1e78a:	4603      	mov	r3, r0
   1e78c:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1e78e:	f7ff ff6f 	bl	1e670 <chunk_size>
   1e792:	4611      	mov	r1, r2
   1e794:	4604      	mov	r4, r0
   1e796:	4618      	mov	r0, r3
   1e798:	f7ff ff6a 	bl	1e670 <chunk_size>
   1e79c:	4404      	add	r4, r0
		((uint16_t *)cmem)[f] = val;
   1e79e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1e7a2:	0061      	lsls	r1, r4, #1
		((uint16_t *)cmem)[f] = val;
   1e7a4:	8069      	strh	r1, [r5, #2]
	return c + chunk_size(h, c);
   1e7a6:	4618      	mov	r0, r3
   1e7a8:	4611      	mov	r1, r2
   1e7aa:	f7ff ff61 	bl	1e670 <chunk_size>
	void *cmem = &buf[c];
   1e7ae:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   1e7b0:	f823 4032 	strh.w	r4, [r3, r2, lsl #3]
}
   1e7b4:	bd38      	pop	{r3, r4, r5, pc}

0001e7b6 <split_chunks>:
{
   1e7b6:	b538      	push	{r3, r4, r5, lr}
   1e7b8:	4603      	mov	r3, r0
   1e7ba:	460c      	mov	r4, r1
	chunksz_t sz0 = chunk_size(h, lc);
   1e7bc:	f7ff ff58 	bl	1e670 <chunk_size>
	chunksz_t lsz = rc - lc;
   1e7c0:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   1e7c2:	1aa5      	subs	r5, r4, r2
   1e7c4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1e7c8:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1e7ca:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   1e7cc:	8060      	strh	r0, [r4, #2]
   1e7ce:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1e7d2:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1e7d4:	8044      	strh	r4, [r0, #2]
   1e7d6:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   1e7da:	4618      	mov	r0, r3
   1e7dc:	4611      	mov	r1, r2
   1e7de:	f7ff ff47 	bl	1e670 <chunk_size>
	void *cmem = &buf[c];
   1e7e2:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   1e7e4:	f823 5032 	strh.w	r5, [r3, r2, lsl #3]
}
   1e7e8:	bd38      	pop	{r3, r4, r5, pc}

0001e7ea <free_chunk>:
{
   1e7ea:	b538      	push	{r3, r4, r5, lr}
   1e7ec:	4605      	mov	r5, r0
   1e7ee:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
   1e7f0:	f7ff ff3e 	bl	1e670 <chunk_size>
   1e7f4:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1e7f6:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1e7fa:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1e7fc:	07da      	lsls	r2, r3, #31
   1e7fe:	d40a      	bmi.n	1e816 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   1e800:	4628      	mov	r0, r5
   1e802:	f7ff ff7e 	bl	1e702 <free_list_remove>
	return c + chunk_size(h, c);
   1e806:	4621      	mov	r1, r4
   1e808:	4628      	mov	r0, r5
   1e80a:	f7ff ff31 	bl	1e670 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1e80e:	1822      	adds	r2, r4, r0
   1e810:	4628      	mov	r0, r5
   1e812:	f7ff ffb9 	bl	1e788 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1e816:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1e81a:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   1e81c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1e820:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1e822:	07db      	lsls	r3, r3, #31
   1e824:	d40c      	bmi.n	1e840 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1e826:	4628      	mov	r0, r5
   1e828:	f7ff ff6b 	bl	1e702 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   1e82c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1e830:	4622      	mov	r2, r4
   1e832:	1a61      	subs	r1, r4, r1
   1e834:	4628      	mov	r0, r5
   1e836:	f7ff ffa7 	bl	1e788 <merge_chunks>
   1e83a:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1e83e:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1e840:	4621      	mov	r1, r4
   1e842:	4628      	mov	r0, r5
}
   1e844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1e848:	f7ff bf17 	b.w	1e67a <free_list_add>

0001e84c <sys_heap_free>:
	if (mem == NULL) {
   1e84c:	b161      	cbz	r1, 1e868 <sys_heap_free+0x1c>
	struct z_heap *h = heap->heap;
   1e84e:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1e850:	3904      	subs	r1, #4
   1e852:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   1e854:	f021 0307 	bic.w	r3, r1, #7
   1e858:	4403      	add	r3, r0
	free_chunk(h, c);
   1e85a:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1e85c:	885a      	ldrh	r2, [r3, #2]
   1e85e:	f022 0201 	bic.w	r2, r2, #1
   1e862:	805a      	strh	r2, [r3, #2]
   1e864:	f7ff bfc1 	b.w	1e7ea <free_chunk>
}
   1e868:	4770      	bx	lr

0001e86a <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1e86a:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1e86c:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   1e86e:	b909      	cbnz	r1, 1e874 <sys_heap_alloc+0xa>
		return NULL;
   1e870:	2000      	movs	r0, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return chunk_mem(h, c);
}
   1e872:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1e874:	68ab      	ldr	r3, [r5, #8]
   1e876:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1e87a:	d9f9      	bls.n	1e870 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1e87c:	310b      	adds	r1, #11
   1e87e:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1e880:	4621      	mov	r1, r4
   1e882:	4628      	mov	r0, r5
   1e884:	f7ff ff4a 	bl	1e71c <alloc_chunk>
	if (c == 0U) {
   1e888:	4606      	mov	r6, r0
   1e88a:	2800      	cmp	r0, #0
   1e88c:	d0f0      	beq.n	1e870 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1e88e:	4601      	mov	r1, r0
   1e890:	4628      	mov	r0, r5
   1e892:	f7ff feed 	bl	1e670 <chunk_size>
   1e896:	42a0      	cmp	r0, r4
   1e898:	d908      	bls.n	1e8ac <sys_heap_alloc+0x42>
		split_chunks(h, c, c + chunk_sz);
   1e89a:	4434      	add	r4, r6
   1e89c:	4628      	mov	r0, r5
   1e89e:	4622      	mov	r2, r4
   1e8a0:	f7ff ff89 	bl	1e7b6 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1e8a4:	4621      	mov	r1, r4
   1e8a6:	4628      	mov	r0, r5
   1e8a8:	f7ff fee7 	bl	1e67a <free_list_add>
	void *cmem = &buf[c];
   1e8ac:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1e8b0:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1e8b2:	8853      	ldrh	r3, [r2, #2]
   1e8b4:	f043 0301 	orr.w	r3, r3, #1
   1e8b8:	8053      	strh	r3, [r2, #2]
   1e8ba:	3004      	adds	r0, #4
	return chunk_mem(h, c);
   1e8bc:	e7d9      	b.n	1e872 <sys_heap_alloc+0x8>

0001e8be <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1e8be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e8c2:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1e8c4:	424a      	negs	r2, r1
   1e8c6:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   1e8ca:	ea31 0202 	bics.w	r2, r1, r2
{
   1e8ce:	4603      	mov	r3, r0
	if (align != rew) {
   1e8d0:	d00a      	beq.n	1e8e8 <sys_heap_aligned_alloc+0x2a>
		return false;
   1e8d2:	2f04      	cmp	r7, #4
   1e8d4:	463a      	mov	r2, r7
   1e8d6:	46b9      	mov	r9, r7
   1e8d8:	bf28      	it	cs
   1e8da:	2204      	movcs	r2, #4
		align -= rew;
   1e8dc:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1e8de:	b974      	cbnz	r4, 1e8fe <sys_heap_aligned_alloc+0x40>
		return NULL;
   1e8e0:	2500      	movs	r5, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
   1e8e2:	4628      	mov	r0, r5
   1e8e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   1e8e8:	2904      	cmp	r1, #4
   1e8ea:	d804      	bhi.n	1e8f6 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   1e8ec:	4621      	mov	r1, r4
}
   1e8ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1e8f2:	f7ff bfba 	b.w	1e86a <sys_heap_alloc>
		rew = 0;
   1e8f6:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   1e8fa:	2204      	movs	r2, #4
   1e8fc:	e7ef      	b.n	1e8de <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   1e8fe:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   1e900:	68b3      	ldr	r3, [r6, #8]
   1e902:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1e906:	d9eb      	bls.n	1e8e0 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1e908:	f104 010b 	add.w	r1, r4, #11
   1e90c:	4439      	add	r1, r7
   1e90e:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1e910:	08c9      	lsrs	r1, r1, #3
   1e912:	4630      	mov	r0, r6
   1e914:	f7ff ff02 	bl	1e71c <alloc_chunk>
	if (c0 == 0) {
   1e918:	4680      	mov	r8, r0
   1e91a:	2800      	cmp	r0, #0
   1e91c:	d0e0      	beq.n	1e8e0 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1e91e:	f109 0504 	add.w	r5, r9, #4
   1e922:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   1e926:	1e7b      	subs	r3, r7, #1
   1e928:	4435      	add	r5, r6
   1e92a:	441d      	add	r5, r3
   1e92c:	427f      	negs	r7, r7
   1e92e:	403d      	ands	r5, r7
   1e930:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1e934:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1e936:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1e938:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1e93a:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1e93c:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1e940:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1e942:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1e946:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1e94a:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1e94e:	d208      	bcs.n	1e962 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   1e950:	4601      	mov	r1, r0
   1e952:	463a      	mov	r2, r7
   1e954:	4630      	mov	r0, r6
   1e956:	f7ff ff2e 	bl	1e7b6 <split_chunks>
		free_list_add(h, c0);
   1e95a:	4641      	mov	r1, r8
   1e95c:	4630      	mov	r0, r6
   1e95e:	f7ff fe8c 	bl	1e67a <free_list_add>
	return c + chunk_size(h, c);
   1e962:	4639      	mov	r1, r7
   1e964:	4630      	mov	r0, r6
   1e966:	f7ff fe83 	bl	1e670 <chunk_size>
   1e96a:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1e96c:	4284      	cmp	r4, r0
   1e96e:	d207      	bcs.n	1e980 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   1e970:	4630      	mov	r0, r6
   1e972:	4622      	mov	r2, r4
   1e974:	f7ff ff1f 	bl	1e7b6 <split_chunks>
		free_list_add(h, c_end);
   1e978:	4621      	mov	r1, r4
   1e97a:	4630      	mov	r0, r6
   1e97c:	f7ff fe7d 	bl	1e67a <free_list_add>
	void *cmem = &buf[c];
   1e980:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1e984:	8873      	ldrh	r3, [r6, #2]
   1e986:	f043 0301 	orr.w	r3, r3, #1
   1e98a:	8073      	strh	r3, [r6, #2]
   1e98c:	e7a9      	b.n	1e8e2 <sys_heap_aligned_alloc+0x24>

0001e98e <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1e98e:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1e990:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1e992:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1e994:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1e998:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1e99c:	1ad2      	subs	r2, r2, r3
{
   1e99e:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1e9a0:	08d4      	lsrs	r4, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   1e9a2:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   1e9a4:	fab4 f084 	clz	r0, r4
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1e9a8:	f1c0 0024 	rsb	r0, r0, #36	; 0x24
   1e9ac:	0080      	lsls	r0, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1e9ae:	1dc1      	adds	r1, r0, #7
	h->avail_buckets = 0;
   1e9b0:	2500      	movs	r5, #0
	h->end_chunk = heap_sz;
   1e9b2:	609c      	str	r4, [r3, #8]
	h->avail_buckets = 0;
   1e9b4:	60dd      	str	r5, [r3, #12]
   1e9b6:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1e9b8:	f103 0610 	add.w	r6, r3, #16
   1e9bc:	4418      	add	r0, r3
   1e9be:	4286      	cmp	r6, r0
   1e9c0:	d118      	bne.n	1e9f4 <sys_heap_init+0x66>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1e9c2:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1e9c4:	f040 0001 	orr.w	r0, r0, #1
   1e9c8:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   1e9ca:	eb03 06c1 	add.w	r6, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1e9ce:	1a60      	subs	r0, r4, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1e9d0:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   1e9d2:	801d      	strh	r5, [r3, #0]
   1e9d4:	8077      	strh	r7, [r6, #2]
   1e9d6:	189e      	adds	r6, r3, r2
   1e9d8:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   1e9dc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		((uint16_t *)cmem)[f] = val;
   1e9e0:	8075      	strh	r5, [r6, #2]
   1e9e2:	5298      	strh	r0, [r3, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1e9e4:	8862      	ldrh	r2, [r4, #2]
   1e9e6:	f042 0201 	orr.w	r2, r2, #1
   1e9ea:	8062      	strh	r2, [r4, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   1e9ec:	4618      	mov	r0, r3
}
   1e9ee:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   1e9f0:	f7ff be43 	b.w	1e67a <free_list_add>
		h->buckets[i].next = 0;
   1e9f4:	f846 5b04 	str.w	r5, [r6], #4
	for (int i = 0; i < nb_buckets; i++) {
   1e9f8:	e7e1      	b.n	1e9be <sys_heap_init+0x30>

0001e9fa <encode_uint>:
{
   1e9fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e9fe:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   1ea00:	78d3      	ldrb	r3, [r2, #3]
{
   1ea02:	4614      	mov	r4, r2
	switch (specifier) {
   1ea04:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1ea06:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   1ea0a:	4606      	mov	r6, r0
   1ea0c:	460f      	mov	r7, r1
   1ea0e:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   1ea10:	d02d      	beq.n	1ea6e <encode_uint+0x74>
   1ea12:	d828      	bhi.n	1ea66 <encode_uint+0x6c>
		return 16;
   1ea14:	2b58      	cmp	r3, #88	; 0x58
   1ea16:	bf14      	ite	ne
   1ea18:	250a      	movne	r5, #10
   1ea1a:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
   1ea1c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   1ea20:	46aa      	mov	sl, r5
   1ea22:	f04f 0b00 	mov.w	fp, #0
   1ea26:	4652      	mov	r2, sl
   1ea28:	465b      	mov	r3, fp
   1ea2a:	4630      	mov	r0, r6
   1ea2c:	4639      	mov	r1, r7
   1ea2e:	f7e1 fb55 	bl	dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ea32:	2a09      	cmp	r2, #9
   1ea34:	b2d3      	uxtb	r3, r2
   1ea36:	d81f      	bhi.n	1ea78 <encode_uint+0x7e>
   1ea38:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1ea3a:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ea3c:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   1ea3e:	bf08      	it	eq
   1ea40:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ea42:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   1ea46:	d301      	bcc.n	1ea4c <encode_uint+0x52>
   1ea48:	45c8      	cmp	r8, r9
   1ea4a:	d812      	bhi.n	1ea72 <encode_uint+0x78>
	if (conv->flag_hash) {
   1ea4c:	7823      	ldrb	r3, [r4, #0]
   1ea4e:	069b      	lsls	r3, r3, #26
   1ea50:	d505      	bpl.n	1ea5e <encode_uint+0x64>
		if (radix == 8) {
   1ea52:	2d08      	cmp	r5, #8
   1ea54:	d116      	bne.n	1ea84 <encode_uint+0x8a>
			conv->altform_0 = true;
   1ea56:	78a3      	ldrb	r3, [r4, #2]
   1ea58:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1ea5c:	70a3      	strb	r3, [r4, #2]
}
   1ea5e:	4640      	mov	r0, r8
   1ea60:	b003      	add	sp, #12
   1ea62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1ea66:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1ea6a:	2b70      	cmp	r3, #112	; 0x70
   1ea6c:	e7d3      	b.n	1ea16 <encode_uint+0x1c>
	switch (specifier) {
   1ea6e:	2508      	movs	r5, #8
   1ea70:	e7d4      	b.n	1ea1c <encode_uint+0x22>
		value /= radix;
   1ea72:	4606      	mov	r6, r0
   1ea74:	460f      	mov	r7, r1
   1ea76:	e7d6      	b.n	1ea26 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ea78:	9a01      	ldr	r2, [sp, #4]
   1ea7a:	2a19      	cmp	r2, #25
   1ea7c:	bf94      	ite	ls
   1ea7e:	3337      	addls	r3, #55	; 0x37
   1ea80:	3357      	addhi	r3, #87	; 0x57
   1ea82:	e7da      	b.n	1ea3a <encode_uint+0x40>
		} else if (radix == 16) {
   1ea84:	2d10      	cmp	r5, #16
   1ea86:	d1ea      	bne.n	1ea5e <encode_uint+0x64>
			conv->altform_0c = true;
   1ea88:	78a3      	ldrb	r3, [r4, #2]
   1ea8a:	f043 0310 	orr.w	r3, r3, #16
   1ea8e:	e7e5      	b.n	1ea5c <encode_uint+0x62>

0001ea90 <outs>:
{
   1ea90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ea94:	4607      	mov	r7, r0
   1ea96:	4688      	mov	r8, r1
   1ea98:	4615      	mov	r5, r2
   1ea9a:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1ea9c:	4614      	mov	r4, r2
   1ea9e:	42b4      	cmp	r4, r6
   1eaa0:	eba4 0005 	sub.w	r0, r4, r5
   1eaa4:	d302      	bcc.n	1eaac <outs+0x1c>
   1eaa6:	b93e      	cbnz	r6, 1eab8 <outs+0x28>
   1eaa8:	7823      	ldrb	r3, [r4, #0]
   1eaaa:	b12b      	cbz	r3, 1eab8 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1eaac:	f814 0b01 	ldrb.w	r0, [r4], #1
   1eab0:	4641      	mov	r1, r8
   1eab2:	47b8      	blx	r7
		if (rc < 0) {
   1eab4:	2800      	cmp	r0, #0
   1eab6:	daf2      	bge.n	1ea9e <outs+0xe>
}
   1eab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001eabc <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
   1eabc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   1eac0:	4770      	bx	lr

0001eac2 <ring_buf_put_claim>:

	return 0;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   1eac2:	b5f0      	push	{r4, r5, r6, r7, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1eac4:	6985      	ldr	r5, [r0, #24]
	uint32_t space, trail_size, allocated, tmp_trail_mod;

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
   1eac6:	6886      	ldr	r6, [r0, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1eac8:	6907      	ldr	r7, [r0, #16]
{
   1eaca:	4604      	mov	r4, r0
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1eacc:	b185      	cbz	r5, 1eaf0 <ring_buf_put_claim+0x2e>
   1eace:	4035      	ands	r5, r6
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
   1ead0:	6823      	ldr	r3, [r4, #0]
   1ead2:	443b      	add	r3, r7
   1ead4:	1b98      	subs	r0, r3, r6
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
   1ead6:	4290      	cmp	r0, r2
   1ead8:	bf28      	it	cs
   1eada:	4610      	movcs	r0, r2
	trail_size = buf->size - tmp_trail_mod;
   1eadc:	1b7f      	subs	r7, r7, r5

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
	*data = &buf->buf.buf8[tmp_trail_mod];
   1eade:	6963      	ldr	r3, [r4, #20]
	allocated = MIN(trail_size, size);
   1eae0:	42b8      	cmp	r0, r7
   1eae2:	bf28      	it	cs
   1eae4:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_trail_mod];
   1eae6:	441d      	add	r5, r3

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
   1eae8:	4406      	add	r6, r0
	*data = &buf->buf.buf8[tmp_trail_mod];
   1eaea:	600d      	str	r5, [r1, #0]
	buf->misc.byte_mode.tmp_tail =
   1eaec:	60a6      	str	r6, [r4, #8]

	return allocated;
}
   1eaee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1eaf0:	fbb6 f5f7 	udiv	r5, r6, r7
   1eaf4:	fb07 6515 	mls	r5, r7, r5, r6
   1eaf8:	e7ea      	b.n	1ead0 <ring_buf_put_claim+0xe>

0001eafa <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
   1eafa:	b570      	push	{r4, r5, r6, lr}
   1eafc:	4605      	mov	r5, r0
   1eafe:	460c      	mov	r4, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
   1eb00:	f7ff ffdc 	bl	1eabc <ring_buf_get_rewind_threshold>

	if ((buf->tail + size) > (buf->head + buf->size)) {
   1eb04:	686e      	ldr	r6, [r5, #4]
   1eb06:	692b      	ldr	r3, [r5, #16]
   1eb08:	682a      	ldr	r2, [r5, #0]
   1eb0a:	1931      	adds	r1, r6, r4
   1eb0c:	441a      	add	r2, r3
   1eb0e:	4291      	cmp	r1, r2
   1eb10:	d80a      	bhi.n	1eb28 <ring_buf_put_finish+0x2e>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
   1eb12:	4286      	cmp	r6, r0
		rew = get_rewind_value(buf->size, threshold);
	} else {
		rew = 0;
   1eb14:	bf92      	itee	ls
   1eb16:	2300      	movls	r3, #0
	return buf_size * (threshold / buf_size);
   1eb18:	fbb0 f0f3 	udivhi	r0, r0, r3
   1eb1c:	4343      	mulhi	r3, r0
	}

	buf->tail += (size - rew);
   1eb1e:	1ac9      	subs	r1, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
   1eb20:	e9c5 1101 	strd	r1, r1, [r5, #4]

	return 0;
   1eb24:	2000      	movs	r0, #0
}
   1eb26:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1eb28:	f06f 0015 	mvn.w	r0, #21
   1eb2c:	e7fb      	b.n	1eb26 <ring_buf_put_finish+0x2c>

0001eb2e <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   1eb2e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1eb32:	4680      	mov	r8, r0
   1eb34:	460e      	mov	r6, r1
   1eb36:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   1eb38:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   1eb3a:	462a      	mov	r2, r5
   1eb3c:	a901      	add	r1, sp, #4
   1eb3e:	4640      	mov	r0, r8
   1eb40:	f7ff ffbf 	bl	1eac2 <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
   1eb44:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
   1eb46:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
   1eb48:	4602      	mov	r2, r0
   1eb4a:	9801      	ldr	r0, [sp, #4]
   1eb4c:	f002 f925 	bl	20d9a <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   1eb50:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   1eb52:	4427      	add	r7, r4
		data += partial_size;
   1eb54:	4426      	add	r6, r4
	} while (size && partial_size);
   1eb56:	d001      	beq.n	1eb5c <ring_buf_put+0x2e>
   1eb58:	2c00      	cmp	r4, #0
   1eb5a:	d1ee      	bne.n	1eb3a <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
   1eb5c:	4639      	mov	r1, r7
   1eb5e:	4640      	mov	r0, r8
   1eb60:	f7ff ffcb 	bl	1eafa <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   1eb64:	4638      	mov	r0, r7
   1eb66:	b002      	add	sp, #8
   1eb68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001eb6c <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   1eb6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
   1eb70:	68c3      	ldr	r3, [r0, #12]
	uint32_t tail = buf->tail;
   1eb72:	6846      	ldr	r6, [r0, #4]
	if (tail < buf->misc.byte_mode.tmp_head) {
   1eb74:	42b3      	cmp	r3, r6
{
   1eb76:	4604      	mov	r4, r0
   1eb78:	460f      	mov	r7, r1
   1eb7a:	4690      	mov	r8, r2
	if (tail < buf->misc.byte_mode.tmp_head) {
   1eb7c:	d906      	bls.n	1eb8c <ring_buf_get_claim+0x20>
   1eb7e:	6905      	ldr	r5, [r0, #16]
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
   1eb80:	f7ff ff9c 	bl	1eabc <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size);
   1eb84:	fbb0 f0f5 	udiv	r0, r0, r5
		tail += get_rewind_value(buf->size,
   1eb88:	fb05 6600 	mla	r6, r5, r0, r6
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1eb8c:	69a5      	ldr	r5, [r4, #24]
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
   1eb8e:	68e1      	ldr	r1, [r4, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1eb90:	6923      	ldr	r3, [r4, #16]
   1eb92:	b185      	cbz	r5, 1ebb6 <ring_buf_get_claim+0x4a>
   1eb94:	400d      	ands	r5, r1
	space = tail - buf->misc.byte_mode.tmp_head;
   1eb96:	1a70      	subs	r0, r6, r1
	trail_size = buf->size - tmp_head_mod;

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
   1eb98:	4540      	cmp	r0, r8
   1eb9a:	bf28      	it	cs
   1eb9c:	4640      	movcs	r0, r8
   1eb9e:	4606      	mov	r6, r0
	trail_size = buf->size - tmp_head_mod;
   1eba0:	1b58      	subs	r0, r3, r5

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
   1eba2:	42b0      	cmp	r0, r6

	*data = &buf->buf.buf8[tmp_head_mod];
   1eba4:	6963      	ldr	r3, [r4, #20]
	granted_size = MIN(trail_size, granted_size);
   1eba6:	bf28      	it	cs
   1eba8:	4630      	movcs	r0, r6
	*data = &buf->buf.buf8[tmp_head_mod];
   1ebaa:	441d      	add	r5, r3
	buf->misc.byte_mode.tmp_head += granted_size;
   1ebac:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_head_mod];
   1ebae:	603d      	str	r5, [r7, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
   1ebb0:	60e1      	str	r1, [r4, #12]

	return granted_size;
}
   1ebb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1ebb6:	fbb1 f5f3 	udiv	r5, r1, r3
   1ebba:	fb03 1515 	mls	r5, r3, r5, r1
   1ebbe:	e7ea      	b.n	1eb96 <ring_buf_get_claim+0x2a>

0001ebc0 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
   1ebc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = buf->tail;
   1ebc2:	6847      	ldr	r7, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
   1ebc4:	68c3      	ldr	r3, [r0, #12]
   1ebc6:	42bb      	cmp	r3, r7
{
   1ebc8:	4605      	mov	r5, r0
   1ebca:	460c      	mov	r4, r1
	if (tail < buf->misc.byte_mode.tmp_head) {
   1ebcc:	d912      	bls.n	1ebf4 <ring_buf_get_finish+0x34>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
   1ebce:	6906      	ldr	r6, [r0, #16]
   1ebd0:	f7ff ff74 	bl	1eabc <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size);
   1ebd4:	fbb0 f0f6 	udiv	r0, r0, r6
   1ebd8:	4370      	muls	r0, r6
				       ring_buf_get_rewind_threshold());
		tail += rew;
   1ebda:	4407      	add	r7, r0
	} else {
		rew = 0;
	}

	if ((buf->head + size) > tail) {
   1ebdc:	6829      	ldr	r1, [r5, #0]
   1ebde:	4421      	add	r1, r4
   1ebe0:	42b9      	cmp	r1, r7
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
   1ebe2:	bf9f      	itttt	ls
   1ebe4:	1a09      	subls	r1, r1, r0
   1ebe6:	6029      	strls	r1, [r5, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
   1ebe8:	60e9      	strls	r1, [r5, #12]

	return 0;
   1ebea:	2000      	movls	r0, #0
		return -EINVAL;
   1ebec:	bf88      	it	hi
   1ebee:	f06f 0015 	mvnhi.w	r0, #21
}
   1ebf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = 0;
   1ebf4:	2000      	movs	r0, #0
   1ebf6:	e7f1      	b.n	1ebdc <ring_buf_get_finish+0x1c>

0001ebf8 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   1ebf8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ebfc:	4680      	mov	r8, r0
   1ebfe:	460d      	mov	r5, r1
   1ec00:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   1ec02:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
   1ec04:	4632      	mov	r2, r6
   1ec06:	a901      	add	r1, sp, #4
   1ec08:	4640      	mov	r0, r8
   1ec0a:	f7ff ffaf 	bl	1eb6c <ring_buf_get_claim>
   1ec0e:	4604      	mov	r4, r0
		if (data) {
   1ec10:	b12d      	cbz	r5, 1ec1e <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
   1ec12:	4602      	mov	r2, r0
   1ec14:	9901      	ldr	r1, [sp, #4]
   1ec16:	4628      	mov	r0, r5
   1ec18:	f002 f8bf 	bl	20d9a <memcpy>
			data += partial_size;
   1ec1c:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
   1ec1e:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
   1ec20:	4427      	add	r7, r4
	} while (size && partial_size);
   1ec22:	d001      	beq.n	1ec28 <ring_buf_get+0x30>
   1ec24:	2c00      	cmp	r4, #0
   1ec26:	d1ed      	bne.n	1ec04 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
   1ec28:	4639      	mov	r1, r7
   1ec2a:	4640      	mov	r0, r8
   1ec2c:	f7ff ffc8 	bl	1ebc0 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   1ec30:	4638      	mov	r0, r7
   1ec32:	b002      	add	sp, #8
   1ec34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ec38 <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
   1ec38:	070b      	lsls	r3, r1, #28
   1ec3a:	d504      	bpl.n	1ec46 <foldcase+0xe>
   1ec3c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1ec40:	2b19      	cmp	r3, #25
			((ua | 32U) - (unsigned)'a' < 6U));
}

static inline int tolower(int chr)
{
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
   1ec42:	bf98      	it	ls
   1ec44:	3020      	addls	r0, #32
        return tolower(ch);
    return ch;
}
   1ec46:	4770      	bx	lr

0001ec48 <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
   1ec48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ec4c:	b087      	sub	sp, #28
   1ec4e:	468a      	mov	sl, r1
   1ec50:	4614      	mov	r4, r2
   1ec52:	9302      	str	r3, [sp, #8]
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
   1ec54:	4605      	mov	r5, r0
   1ec56:	b918      	cbnz	r0, 1ec60 <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
   1ec58:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
   1ec5a:	b007      	add	sp, #28
   1ec5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
   1ec60:	2900      	cmp	r1, #0
   1ec62:	d0f9      	beq.n	1ec58 <fnmatchx+0x10>
    if (recursion-- == 0)
   1ec64:	9b02      	ldr	r3, [sp, #8]
   1ec66:	2b00      	cmp	r3, #0
   1ec68:	f000 811a 	beq.w	1eea0 <fnmatchx+0x258>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   1ec6c:	f004 0304 	and.w	r3, r4, #4
   1ec70:	460a      	mov	r2, r1
   1ec72:	9304      	str	r3, [sp, #16]
        switch (c = FOLDCASE(*pattern++, flags)) {
   1ec74:	46a8      	mov	r8, r5
   1ec76:	4621      	mov	r1, r4
   1ec78:	f818 0b01 	ldrb.w	r0, [r8], #1
   1ec7c:	f7ff ffdc 	bl	1ec38 <foldcase>
   1ec80:	4603      	mov	r3, r0
   1ec82:	b2c0      	uxtb	r0, r0
   1ec84:	283f      	cmp	r0, #63	; 0x3f
   1ec86:	7817      	ldrb	r7, [r2, #0]
   1ec88:	4606      	mov	r6, r0
   1ec8a:	d024      	beq.n	1ecd6 <fnmatchx+0x8e>
   1ec8c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   1ec90:	d10a      	bne.n	1eca8 <fnmatchx+0x60>
   1ec92:	b1c0      	cbz	r0, 1ecc6 <fnmatchx+0x7e>
   1ec94:	282a      	cmp	r0, #42	; 0x2a
   1ec96:	d035      	beq.n	1ed04 <fnmatchx+0xbc>
            if (c != FOLDCASE(*string++, flags))
   1ec98:	4621      	mov	r1, r4
   1ec9a:	4638      	mov	r0, r7
   1ec9c:	3201      	adds	r2, #1
   1ec9e:	f7ff ffcb 	bl	1ec38 <foldcase>
   1eca2:	4286      	cmp	r6, r0
   1eca4:	d01e      	beq.n	1ece4 <fnmatchx+0x9c>
   1eca6:	e7d7      	b.n	1ec58 <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
   1eca8:	285b      	cmp	r0, #91	; 0x5b
   1ecaa:	d07b      	beq.n	1eda4 <fnmatchx+0x15c>
   1ecac:	285c      	cmp	r0, #92	; 0x5c
   1ecae:	d1f3      	bne.n	1ec98 <fnmatchx+0x50>
            if (!(flags & FNM_NOESCAPE)) {
   1ecb0:	07e3      	lsls	r3, r4, #31
   1ecb2:	d4f1      	bmi.n	1ec98 <fnmatchx+0x50>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
   1ecb4:	7868      	ldrb	r0, [r5, #1]
   1ecb6:	f7ff ffbf 	bl	1ec38 <foldcase>
   1ecba:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
   1ecbe:	bf18      	it	ne
   1ecc0:	f105 0802 	addne.w	r8, r5, #2
   1ecc4:	e7e8      	b.n	1ec98 <fnmatchx+0x50>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
   1ecc6:	06e4      	lsls	r4, r4, #27
   1ecc8:	d501      	bpl.n	1ecce <fnmatchx+0x86>
   1ecca:	2f2f      	cmp	r7, #47	; 0x2f
   1eccc:	d0c5      	beq.n	1ec5a <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
   1ecce:	1e38      	subs	r0, r7, #0
                        0 : FNM_NOMATCH;
   1ecd0:	bf18      	it	ne
   1ecd2:	2001      	movne	r0, #1
   1ecd4:	e7c1      	b.n	1ec5a <fnmatchx+0x12>
            if (*string == EOS)
   1ecd6:	2f00      	cmp	r7, #0
   1ecd8:	d0be      	beq.n	1ec58 <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
   1ecda:	2f2f      	cmp	r7, #47	; 0x2f
   1ecdc:	d104      	bne.n	1ece8 <fnmatchx+0xa0>
   1ecde:	07a1      	lsls	r1, r4, #30
   1ece0:	d4ba      	bmi.n	1ec58 <fnmatchx+0x10>
            ++string;
   1ece2:	3201      	adds	r2, #1
            break;
   1ece4:	4645      	mov	r5, r8
   1ece6:	e7c5      	b.n	1ec74 <fnmatchx+0x2c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   1ece8:	2f2e      	cmp	r7, #46	; 0x2e
   1ecea:	d1fa      	bne.n	1ece2 <fnmatchx+0x9a>
   1ecec:	9b04      	ldr	r3, [sp, #16]
   1ecee:	2b00      	cmp	r3, #0
   1ecf0:	d0f7      	beq.n	1ece2 <fnmatchx+0x9a>
   1ecf2:	4552      	cmp	r2, sl
   1ecf4:	d0b0      	beq.n	1ec58 <fnmatchx+0x10>
                (string == stringstart ||
   1ecf6:	07a3      	lsls	r3, r4, #30
   1ecf8:	d5f3      	bpl.n	1ece2 <fnmatchx+0x9a>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
   1ecfa:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   1ecfe:	2b2f      	cmp	r3, #47	; 0x2f
   1ed00:	d1ef      	bne.n	1ece2 <fnmatchx+0x9a>
   1ed02:	e7a9      	b.n	1ec58 <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
   1ed04:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
   1ed06:	f7ff ff97 	bl	1ec38 <foldcase>
   1ed0a:	b2c1      	uxtb	r1, r0
            while (c == '*')
   1ed0c:	292a      	cmp	r1, #42	; 0x2a
   1ed0e:	d018      	beq.n	1ed42 <fnmatchx+0xfa>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   1ed10:	2f2e      	cmp	r7, #46	; 0x2e
   1ed12:	d109      	bne.n	1ed28 <fnmatchx+0xe0>
   1ed14:	9b04      	ldr	r3, [sp, #16]
   1ed16:	b13b      	cbz	r3, 1ed28 <fnmatchx+0xe0>
   1ed18:	4552      	cmp	r2, sl
   1ed1a:	d09d      	beq.n	1ec58 <fnmatchx+0x10>
                (string == stringstart ||
   1ed1c:	07a7      	lsls	r7, r4, #30
   1ed1e:	d503      	bpl.n	1ed28 <fnmatchx+0xe0>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
   1ed20:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   1ed24:	2b2f      	cmp	r3, #47	; 0x2f
   1ed26:	d097      	beq.n	1ec58 <fnmatchx+0x10>
            if (c == EOS) {
   1ed28:	b979      	cbnz	r1, 1ed4a <fnmatchx+0x102>
                if (flags & FNM_PATHNAME)
   1ed2a:	f014 0002 	ands.w	r0, r4, #2
   1ed2e:	d094      	beq.n	1ec5a <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
   1ed30:	06e6      	lsls	r6, r4, #27
   1ed32:	f100 80b7 	bmi.w	1eea4 <fnmatchx+0x25c>
                        strchr(string, '/') == NULL ?
   1ed36:	212f      	movs	r1, #47	; 0x2f
   1ed38:	4610      	mov	r0, r2
   1ed3a:	f001 ffce 	bl	20cda <strchr>
                        0 : FNM_NOMATCH;
   1ed3e:	3800      	subs	r0, #0
   1ed40:	e7c6      	b.n	1ecd0 <fnmatchx+0x88>
                c = FOLDCASE(*++pattern, flags);
   1ed42:	f818 0f01 	ldrb.w	r0, [r8, #1]!
   1ed46:	4621      	mov	r1, r4
   1ed48:	e7dd      	b.n	1ed06 <fnmatchx+0xbe>
            } else if (c == '/' && flags & FNM_PATHNAME) {
   1ed4a:	292f      	cmp	r1, #47	; 0x2f
   1ed4c:	d021      	beq.n	1ed92 <fnmatchx+0x14a>
    if (recursion-- == 0)
   1ed4e:	9b02      	ldr	r3, [sp, #8]
   1ed50:	4616      	mov	r6, r2
   1ed52:	1e5f      	subs	r7, r3, #1
                switch ((e = fnmatchx(pattern, string,
   1ed54:	f024 0904 	bic.w	r9, r4, #4
                if (test == '/' && flags & FNM_PATHNAME)
   1ed58:	f004 0a02 	and.w	sl, r4, #2
   1ed5c:	46b3      	mov	fp, r6
            while ((test = FOLDCASE(*string, flags)) != EOS) {
   1ed5e:	4621      	mov	r1, r4
   1ed60:	f89b 0000 	ldrb.w	r0, [fp]
   1ed64:	f7ff ff68 	bl	1ec38 <foldcase>
   1ed68:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
   1ed6c:	f106 0601 	add.w	r6, r6, #1
   1ed70:	f43f af72 	beq.w	1ec58 <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
   1ed74:	463b      	mov	r3, r7
   1ed76:	464a      	mov	r2, r9
   1ed78:	4659      	mov	r1, fp
   1ed7a:	4640      	mov	r0, r8
   1ed7c:	f7ff ff64 	bl	1ec48 <fnmatchx>
   1ed80:	2801      	cmp	r0, #1
   1ed82:	f47f af6a 	bne.w	1ec5a <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
   1ed86:	2d2f      	cmp	r5, #47	; 0x2f
   1ed88:	d1e8      	bne.n	1ed5c <fnmatchx+0x114>
   1ed8a:	f1ba 0f00 	cmp.w	sl, #0
   1ed8e:	d0e5      	beq.n	1ed5c <fnmatchx+0x114>
   1ed90:	e762      	b.n	1ec58 <fnmatchx+0x10>
            } else if (c == '/' && flags & FNM_PATHNAME) {
   1ed92:	07a5      	lsls	r5, r4, #30
   1ed94:	d5db      	bpl.n	1ed4e <fnmatchx+0x106>
                if ((string = strchr(string, '/')) == NULL)
   1ed96:	4610      	mov	r0, r2
   1ed98:	f001 ff9f 	bl	20cda <strchr>
   1ed9c:	4602      	mov	r2, r0
   1ed9e:	2800      	cmp	r0, #0
   1eda0:	d1a0      	bne.n	1ece4 <fnmatchx+0x9c>
   1eda2:	e759      	b.n	1ec58 <fnmatchx+0x10>
            if (*string == EOS)
   1eda4:	2f00      	cmp	r7, #0
   1eda6:	f43f af57 	beq.w	1ec58 <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
   1edaa:	2f2f      	cmp	r7, #47	; 0x2f
   1edac:	d102      	bne.n	1edb4 <fnmatchx+0x16c>
   1edae:	07a0      	lsls	r0, r4, #30
   1edb0:	f53f af52 	bmi.w	1ec58 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
   1edb4:	4621      	mov	r1, r4
   1edb6:	4638      	mov	r0, r7
   1edb8:	f7ff ff3e 	bl	1ec38 <foldcase>
   1edbc:	9000      	str	r0, [sp, #0]
    if (pattern == NULL)
   1edbe:	f1b8 0f00 	cmp.w	r8, #0
   1edc2:	f43f af49 	beq.w	1ec58 <fnmatchx+0x10>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   1edc6:	786b      	ldrb	r3, [r5, #1]
   1edc8:	2b21      	cmp	r3, #33	; 0x21
   1edca:	d001      	beq.n	1edd0 <fnmatchx+0x188>
   1edcc:	2b5e      	cmp	r3, #94	; 0x5e
   1edce:	d126      	bne.n	1ee1e <fnmatchx+0x1d6>
        ++pattern;
   1edd0:	3502      	adds	r5, #2
   1edd2:	2301      	movs	r3, #1
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   1edd4:	9301      	str	r3, [sp, #4]
    need = 1;
   1edd6:	2301      	movs	r3, #1
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   1edd8:	ea04 0103 	and.w	r1, r4, r3
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
   1eddc:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   1ede0:	9103      	str	r1, [sp, #12]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
   1ede2:	462e      	mov	r6, r5
   1ede4:	4621      	mov	r1, r4
   1ede6:	f816 0b01 	ldrb.w	r0, [r6], #1
   1edea:	9305      	str	r3, [sp, #20]
   1edec:	f7ff ff24 	bl	1ec38 <foldcase>
   1edf0:	fa5f f980 	uxtb.w	r9, r0
   1edf4:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   1edf8:	9b05      	ldr	r3, [sp, #20]
   1edfa:	d113      	bne.n	1ee24 <fnmatchx+0x1dc>
   1edfc:	bb2b      	cbnz	r3, 1ee4a <fnmatchx+0x202>
    return ok == negate ? NULL : pattern;
   1edfe:	9b01      	ldr	r3, [sp, #4]
   1ee00:	455b      	cmp	r3, fp
   1ee02:	f43f af29 	beq.w	1ec58 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
   1ee06:	2e00      	cmp	r6, #0
   1ee08:	f43f af26 	beq.w	1ec58 <fnmatchx+0x10>
            if (r == (void *)-1) {
   1ee0c:	1c71      	adds	r1, r6, #1
   1ee0e:	d103      	bne.n	1ee18 <fnmatchx+0x1d0>
                if (*string != '[')
   1ee10:	2f5b      	cmp	r7, #91	; 0x5b
   1ee12:	f47f af21 	bne.w	1ec58 <fnmatchx+0x10>
   1ee16:	4646      	mov	r6, r8
            ++string;
   1ee18:	3201      	adds	r2, #1
            break;
   1ee1a:	46b0      	mov	r8, r6
   1ee1c:	e762      	b.n	1ece4 <fnmatchx+0x9c>
   1ee1e:	4645      	mov	r5, r8
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   1ee20:	2300      	movs	r3, #0
   1ee22:	e7d7      	b.n	1edd4 <fnmatchx+0x18c>
        if (c == '/')
   1ee24:	f1b9 0f2f 	cmp.w	r9, #47	; 0x2f
   1ee28:	d0f2      	beq.n	1ee10 <fnmatchx+0x1c8>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   1ee2a:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
   1ee2e:	d108      	bne.n	1ee42 <fnmatchx+0x1fa>
   1ee30:	9b03      	ldr	r3, [sp, #12]
   1ee32:	b953      	cbnz	r3, 1ee4a <fnmatchx+0x202>
            c = FOLDCASE(*pattern++, flags);
   1ee34:	7868      	ldrb	r0, [r5, #1]
   1ee36:	4621      	mov	r1, r4
   1ee38:	f7ff fefe 	bl	1ec38 <foldcase>
   1ee3c:	1cae      	adds	r6, r5, #2
   1ee3e:	fa5f f980 	uxtb.w	r9, r0
        if (c == EOS)
   1ee42:	f1b9 0f00 	cmp.w	r9, #0
   1ee46:	f43f af07 	beq.w	1ec58 <fnmatchx+0x10>
        if (*pattern == '-' 
   1ee4a:	7833      	ldrb	r3, [r6, #0]
   1ee4c:	2b2d      	cmp	r3, #45	; 0x2d
   1ee4e:	d120      	bne.n	1ee92 <fnmatchx+0x24a>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
   1ee50:	7870      	ldrb	r0, [r6, #1]
   1ee52:	4621      	mov	r1, r4
   1ee54:	f7ff fef0 	bl	1ec38 <foldcase>
   1ee58:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   1ee5c:	d019      	beq.n	1ee92 <fnmatchx+0x24a>
   1ee5e:	285d      	cmp	r0, #93	; 0x5d
   1ee60:	d017      	beq.n	1ee92 <fnmatchx+0x24a>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
   1ee62:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
   1ee64:	f106 0502 	add.w	r5, r6, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
   1ee68:	d10a      	bne.n	1ee80 <fnmatchx+0x238>
   1ee6a:	9b03      	ldr	r3, [sp, #12]
   1ee6c:	b943      	cbnz	r3, 1ee80 <fnmatchx+0x238>
                c2 = FOLDCASE(*pattern++, flags);
   1ee6e:	78b0      	ldrb	r0, [r6, #2]
   1ee70:	f7ff fee2 	bl	1ec38 <foldcase>
            if (c2 == EOS)
   1ee74:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
                c2 = FOLDCASE(*pattern++, flags);
   1ee78:	f106 0503 	add.w	r5, r6, #3
            if (c2 == EOS)
   1ee7c:	f43f aeec 	beq.w	1ec58 <fnmatchx+0x10>
            if (c <= test && test <= c2)
   1ee80:	9b00      	ldr	r3, [sp, #0]
   1ee82:	454b      	cmp	r3, r9
   1ee84:	db03      	blt.n	1ee8e <fnmatchx+0x246>
                ok = 1;
   1ee86:	4283      	cmp	r3, r0
   1ee88:	bfd8      	it	le
   1ee8a:	f04f 0b01 	movle.w	fp, #1
            ok = 1;
   1ee8e:	2300      	movs	r3, #0
   1ee90:	e7a7      	b.n	1ede2 <fnmatchx+0x19a>
        } else if (c == test)
   1ee92:	9b00      	ldr	r3, [sp, #0]
   1ee94:	4635      	mov	r5, r6
   1ee96:	454b      	cmp	r3, r9
   1ee98:	bf08      	it	eq
   1ee9a:	f04f 0b01 	moveq.w	fp, #1
   1ee9e:	e7f6      	b.n	1ee8e <fnmatchx+0x246>
        return FNM_NORES;
   1eea0:	2003      	movs	r0, #3
   1eea2:	e6da      	b.n	1ec5a <fnmatchx+0x12>
                return 0;
   1eea4:	4608      	mov	r0, r1
   1eea6:	e6d8      	b.n	1ec5a <fnmatchx+0x12>

0001eea8 <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
   1eea8:	2340      	movs	r3, #64	; 0x40
   1eeaa:	f7ff becd 	b.w	1ec48 <fnmatchx>

0001eeae <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1eeae:	4770      	bx	lr

0001eeb0 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1eeb0:	2300      	movs	r3, #0
	list->head = NULL;
   1eeb2:	e9c0 3300 	strd	r3, r3, [r0]
}
   1eeb6:	4770      	bx	lr

0001eeb8 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1eeb8:	6803      	ldr	r3, [r0, #0]
   1eeba:	b923      	cbnz	r3, 1eec6 <log_list_add_tail+0xe>
		list->head = msg;
   1eebc:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1eebe:	2300      	movs	r3, #0
	list->tail = msg;
   1eec0:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1eec2:	600b      	str	r3, [r1, #0]
}
   1eec4:	4770      	bx	lr
		list->tail->next = msg;
   1eec6:	6843      	ldr	r3, [r0, #4]
   1eec8:	6019      	str	r1, [r3, #0]
   1eeca:	e7f8      	b.n	1eebe <log_list_add_tail+0x6>

0001eecc <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1eecc:	6800      	ldr	r0, [r0, #0]
   1eece:	4770      	bx	lr

0001eed0 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   1eed0:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   1eed2:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   1eed4:	b108      	cbz	r0, 1eeda <log_list_head_get+0xa>
		list->head = list->head->next;
   1eed6:	6802      	ldr	r2, [r0, #0]
   1eed8:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   1eeda:	4770      	bx	lr

0001eedc <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1eedc:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1eede:	f7f1 fff3 	bl	10ec8 <log_msg_chunk_alloc>

	if (msg != NULL) {
   1eee2:	b118      	cbz	r0, 1eeec <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1eee4:	2301      	movs	r3, #1
   1eee6:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1eee8:	2300      	movs	r3, #0
   1eeea:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   1eeec:	bd08      	pop	{r3, pc}

0001eeee <default_get_timestamp>:
   1eeee:	f003 bbb1 	b.w	22654 <sys_clock_cycle_get_32>

0001eef2 <dummy_timestamp>:
   1eef2:	2000      	movs	r0, #0
   1eef4:	4770      	bx	lr

0001eef6 <z_log_get_s_mask>:
{
   1eef6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eef8:	4605      	mov	r5, r0
	uint32_t mask = 0U;
   1eefa:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   1eefc:	4603      	mov	r3, r0
	bool arm = false;
   1eefe:	4602      	mov	r2, r0
				mask |= BIT(arg);
   1ef00:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   1ef02:	f815 4b01 	ldrb.w	r4, [r5], #1
   1ef06:	b10c      	cbz	r4, 1ef0c <z_log_get_s_mask+0x16>
   1ef08:	428b      	cmp	r3, r1
   1ef0a:	d300      	bcc.n	1ef0e <z_log_get_s_mask+0x18>
}
   1ef0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   1ef0e:	2c25      	cmp	r4, #37	; 0x25
   1ef10:	d102      	bne.n	1ef18 <z_log_get_s_mask+0x22>
			arm = !arm;
   1ef12:	f082 0201 	eor.w	r2, r2, #1
   1ef16:	e7f4      	b.n	1ef02 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   1ef18:	2a00      	cmp	r2, #0
   1ef1a:	d0f2      	beq.n	1ef02 <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1ef1c:	f044 0620 	orr.w	r6, r4, #32
   1ef20:	3e61      	subs	r6, #97	; 0x61
   1ef22:	2e19      	cmp	r6, #25
   1ef24:	d8ed      	bhi.n	1ef02 <z_log_get_s_mask+0xc>
			if (curr == 's') {
   1ef26:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   1ef28:	bf04      	itt	eq
   1ef2a:	fa07 f203 	lsleq.w	r2, r7, r3
   1ef2e:	4310      	orreq	r0, r2
			arg++;
   1ef30:	3301      	adds	r3, #1
			arm = false;
   1ef32:	2200      	movs	r2, #0
   1ef34:	e7e5      	b.n	1ef02 <z_log_get_s_mask+0xc>

0001ef36 <log_0>:
{
   1ef36:	b538      	push	{r3, r4, r5, lr}
   1ef38:	4605      	mov	r5, r0
   1ef3a:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1ef3c:	f7ff ffce 	bl	1eedc <z_log_msg_std_alloc>

	if (msg != NULL) {
   1ef40:	b128      	cbz	r0, 1ef4e <log_0+0x18>
		msg->str = str;
   1ef42:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1ef44:	4621      	mov	r1, r4
}
   1ef46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1ef4a:	f7f1 be13 	b.w	10b74 <msg_finalize>
}
   1ef4e:	bd38      	pop	{r3, r4, r5, pc}

0001ef50 <log_1>:
{
   1ef50:	b570      	push	{r4, r5, r6, lr}
   1ef52:	4606      	mov	r6, r0
   1ef54:	460d      	mov	r5, r1
   1ef56:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1ef58:	f7ff ffc0 	bl	1eedc <z_log_msg_std_alloc>

	if (msg != NULL) {
   1ef5c:	b158      	cbz	r0, 1ef76 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1ef5e:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   1ef60:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1ef62:	2101      	movs	r1, #1
   1ef64:	f361 1207 	bfi	r2, r1, #4, #4
   1ef68:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1ef6a:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   1ef6c:	4621      	mov	r1, r4
}
   1ef6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1ef72:	f7f1 bdff 	b.w	10b74 <msg_finalize>
}
   1ef76:	bd70      	pop	{r4, r5, r6, pc}

0001ef78 <log_2>:
{
   1ef78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ef7c:	4680      	mov	r8, r0
   1ef7e:	460f      	mov	r7, r1
   1ef80:	4616      	mov	r6, r2
   1ef82:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1ef84:	f7ff ffaa 	bl	1eedc <z_log_msg_std_alloc>

	if (msg != NULL) {
   1ef88:	b168      	cbz	r0, 1efa6 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1ef8a:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1ef8c:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1ef90:	2202      	movs	r2, #2
   1ef92:	f362 1307 	bfi	r3, r2, #4, #4
   1ef96:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1ef98:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   1ef9c:	4629      	mov	r1, r5
}
   1ef9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1efa2:	f7f1 bde7 	b.w	10b74 <msg_finalize>
}
   1efa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001efaa <log_3>:
{
   1efaa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1efae:	4680      	mov	r8, r0
   1efb0:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1efb4:	460f      	mov	r7, r1
   1efb6:	4616      	mov	r6, r2
   1efb8:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1efba:	f7ff ff8f 	bl	1eedc <z_log_msg_std_alloc>

	if (msg != NULL) {
   1efbe:	b170      	cbz	r0, 1efde <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1efc0:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1efc2:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1efc6:	2203      	movs	r2, #3
   1efc8:	f362 1307 	bfi	r3, r2, #4, #4
   1efcc:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1efce:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   1efd2:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   1efd4:	4649      	mov	r1, r9
}
   1efd6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1efda:	f7f1 bdcb 	b.w	10b74 <msg_finalize>
}
   1efde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001efe2 <log_n>:
{
   1efe2:	b510      	push	{r4, lr}
   1efe4:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1efe6:	f000 f8b3 	bl	1f150 <log_msg_create_n>
		if (msg == NULL) {
   1efea:	b120      	cbz	r0, 1eff6 <log_n+0x14>
		msg_finalize(msg, src_level);
   1efec:	4621      	mov	r1, r4
}
   1efee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1eff2:	f7f1 bdbf 	b.w	10b74 <msg_finalize>
}
   1eff6:	bd10      	pop	{r4, pc}

0001eff8 <log_hexdump>:
{
   1eff8:	b510      	push	{r4, lr}
   1effa:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
   1effc:	f000 f8fc 	bl	1f1f8 <log_msg_hexdump_create>
		if (msg == NULL) {
   1f000:	b120      	cbz	r0, 1f00c <log_hexdump+0x14>
		msg_finalize(msg, src_level);
   1f002:	4621      	mov	r1, r4
}
   1f004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1f008:	f7f1 bdb4 	b.w	10b74 <msg_finalize>
}
   1f00c:	bd10      	pop	{r4, pc}

0001f00e <z_log_get_tag>:
}
   1f00e:	2000      	movs	r0, #0
   1f010:	4770      	bx	lr

0001f012 <log_backend_disable>:
	backend->cb->active = false;
   1f012:	6843      	ldr	r3, [r0, #4]
   1f014:	2100      	movs	r1, #0
   1f016:	7159      	strb	r1, [r3, #5]
	backend_filter_set(backend, LOG_LEVEL_NONE);
   1f018:	f7f1 beec 	b.w	10df4 <backend_filter_set>

0001f01c <log_msg_hexdump_data_op>:
{
   1f01c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f020:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1f022:	8903      	ldrh	r3, [r0, #8]
{
   1f024:	f89d 7020 	ldrb.w	r7, [sp, #32]
   1f028:	460e      	mov	r6, r1
   1f02a:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1f02c:	f3c3 028d 	ubfx	r2, r3, #2, #14
	if (offset >= available_len) {
   1f030:	42a2      	cmp	r2, r4
   1f032:	d803      	bhi.n	1f03c <log_msg_hexdump_data_op+0x20>
		*length = 0;
   1f034:	2300      	movs	r3, #0
   1f036:	600b      	str	r3, [r1, #0]
}
   1f038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1f03c:	680b      	ldr	r3, [r1, #0]
   1f03e:	4423      	add	r3, r4
   1f040:	4293      	cmp	r3, r2
		*length = available_len - offset;
   1f042:	bf84      	itt	hi
   1f044:	1b13      	subhi	r3, r2, r4
   1f046:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1f048:	2a0c      	cmp	r2, #12
	req_len = *length;
   1f04a:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1f04e:	d92a      	bls.n	1f0a6 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   1f050:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1f052:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   1f056:	d82d      	bhi.n	1f0b4 <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
   1f058:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1f05a:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1f05c:	454a      	cmp	r2, r9
   1f05e:	bf28      	it	cs
   1f060:	464a      	movcs	r2, r9
   1f062:	4615      	mov	r5, r2
		if (put_op) {
   1f064:	4420      	add	r0, r4
   1f066:	b317      	cbz	r7, 1f0ae <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   1f068:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   1f06a:	f001 fe96 	bl	20d9a <memcpy>
		req_len -= cpy_len;
   1f06e:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1f072:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   1f074:	f1b9 0f00 	cmp.w	r9, #0
   1f078:	d0de      	beq.n	1f038 <log_msg_hexdump_data_op+0x1c>
   1f07a:	f1b8 0f00 	cmp.w	r8, #0
   1f07e:	d0db      	beq.n	1f038 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1f080:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1f084:	454d      	cmp	r5, r9
   1f086:	bf28      	it	cs
   1f088:	464d      	movcs	r5, r9
		if (put_op) {
   1f08a:	1d20      	adds	r0, r4, #4
   1f08c:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
   1f08e:	462a      	mov	r2, r5
		if (put_op) {
   1f090:	b1bf      	cbz	r7, 1f0c2 <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   1f092:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   1f094:	f001 fe81 	bl	20d9a <memcpy>
		req_len -= cpy_len;
   1f098:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1f09c:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   1f0a0:	442e      	add	r6, r5
		offset = 0;
   1f0a2:	2400      	movs	r4, #0
   1f0a4:	e7e6      	b.n	1f074 <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   1f0a6:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1f0a8:	f04f 0800 	mov.w	r8, #0
   1f0ac:	e7d6      	b.n	1f05c <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1f0ae:	4601      	mov	r1, r0
   1f0b0:	4630      	mov	r0, r6
   1f0b2:	e7da      	b.n	1f06a <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   1f0b4:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1f0b6:	2c1b      	cmp	r4, #27
   1f0b8:	d9dc      	bls.n	1f074 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   1f0ba:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   1f0be:	3c1c      	subs	r4, #28
   1f0c0:	e7f9      	b.n	1f0b6 <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1f0c2:	4601      	mov	r1, r0
   1f0c4:	4630      	mov	r0, r6
   1f0c6:	e7e5      	b.n	1f094 <log_msg_hexdump_data_op+0x78>

0001f0c8 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1f0c8:	3004      	adds	r0, #4
   1f0ca:	f3bf 8f5b 	dmb	ish
   1f0ce:	e850 3f00 	ldrex	r3, [r0]
   1f0d2:	3301      	adds	r3, #1
   1f0d4:	e840 3200 	strex	r2, r3, [r0]
   1f0d8:	2a00      	cmp	r2, #0
   1f0da:	d1f8      	bne.n	1f0ce <log_msg_get+0x6>
   1f0dc:	f3bf 8f5b 	dmb	ish
}
   1f0e0:	4770      	bx	lr

0001f0e2 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1f0e2:	7a40      	ldrb	r0, [r0, #9]
}
   1f0e4:	0900      	lsrs	r0, r0, #4
   1f0e6:	4770      	bx	lr

0001f0e8 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1f0e8:	7a43      	ldrb	r3, [r0, #9]
   1f0ea:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1f0ee:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1f0f2:	d216      	bcs.n	1f122 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1f0f4:	2a03      	cmp	r2, #3
   1f0f6:	d803      	bhi.n	1f100 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   1f0f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1f0fc:	6948      	ldr	r0, [r1, #20]
   1f0fe:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1f100:	2901      	cmp	r1, #1
   1f102:	d803      	bhi.n	1f10c <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1f104:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1f108:	6988      	ldr	r0, [r1, #24]
   1f10a:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1f10c:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1f10e:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1f110:	2906      	cmp	r1, #6
   1f112:	d803      	bhi.n	1f11c <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1f114:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1f118:	6848      	ldr	r0, [r1, #4]
   1f11a:	4770      	bx	lr
		cont = cont->next;
   1f11c:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   1f11e:	3907      	subs	r1, #7
		cont = cont->next;
   1f120:	e7f6      	b.n	1f110 <log_msg_arg_get+0x28>
		return 0;
   1f122:	2000      	movs	r0, #0
}
   1f124:	4770      	bx	lr

0001f126 <log_msg_put>:
{
   1f126:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1f128:	1d02      	adds	r2, r0, #4
   1f12a:	f3bf 8f5b 	dmb	ish
   1f12e:	e852 1f00 	ldrex	r1, [r2]
   1f132:	3901      	subs	r1, #1
   1f134:	e842 1c00 	strex	ip, r1, [r2]
   1f138:	f1bc 0f00 	cmp.w	ip, #0
   1f13c:	d1f7      	bne.n	1f12e <log_msg_put+0x8>
   1f13e:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1f142:	685b      	ldr	r3, [r3, #4]
   1f144:	b90b      	cbnz	r3, 1f14a <log_msg_put+0x24>
		msg_free(msg);
   1f146:	f7f1 bed3 	b.w	10ef0 <msg_free>
}
   1f14a:	4770      	bx	lr

0001f14c <log_msg_str_get>:
}
   1f14c:	6900      	ldr	r0, [r0, #16]
   1f14e:	4770      	bx	lr

0001f150 <log_msg_create_n>:
{
   1f150:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f154:	4681      	mov	r9, r0
   1f156:	4688      	mov	r8, r1
   1f158:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1f15a:	f7f1 feb5 	bl	10ec8 <log_msg_chunk_alloc>
	if (msg != NULL) {
   1f15e:	4604      	mov	r4, r0
   1f160:	b330      	cbz	r0, 1f1b0 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1f162:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1f164:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1f166:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1f168:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1f16a:	8107      	strh	r7, [r0, #8]
   1f16c:	d909      	bls.n	1f182 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1f16e:	2202      	movs	r2, #2
   1f170:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1f172:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   1f176:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1f17a:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   1f17c:	f1ba 0f00 	cmp.w	sl, #0
   1f180:	dc0e      	bgt.n	1f1a0 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   1f182:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   1f184:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1f188:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1f18c:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1f18e:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1f190:	d818      	bhi.n	1f1c4 <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   1f192:	00aa      	lsls	r2, r5, #2
   1f194:	4641      	mov	r1, r8
   1f196:	f104 0014 	add.w	r0, r4, #20
   1f19a:	f001 fdfe 	bl	20d9a <memcpy>
	while (nargs != 0U) {
   1f19e:	e007      	b.n	1f1b0 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1f1a0:	f7f1 fe92 	bl	10ec8 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1f1a4:	4606      	mov	r6, r0
   1f1a6:	b930      	cbnz	r0, 1f1b6 <log_msg_create_n+0x66>
			msg_free(msg);
   1f1a8:	4620      	mov	r0, r4
   1f1aa:	f7f1 fea1 	bl	10ef0 <msg_free>
			return NULL;
   1f1ae:	4634      	mov	r4, r6
}
   1f1b0:	4620      	mov	r0, r4
   1f1b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1f1b6:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1f1ba:	f1aa 0a07 	sub.w	sl, sl, #7
   1f1be:	6007      	str	r7, [r0, #0]
		next = &cont->next;
   1f1c0:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1f1c2:	e7db      	b.n	1f17c <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   1f1c4:	4641      	mov	r1, r8
   1f1c6:	2208      	movs	r2, #8
   1f1c8:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1f1cc:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1f1ce:	f001 fde4 	bl	20d9a <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1f1d2:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1f1d4:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1f1d8:	2d07      	cmp	r5, #7
   1f1da:	462e      	mov	r6, r5
   1f1dc:	bf28      	it	cs
   1f1de:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1f1e0:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1f1e4:	4641      	mov	r1, r8
   1f1e6:	1d38      	adds	r0, r7, #4
   1f1e8:	464a      	mov	r2, r9
   1f1ea:	f001 fdd6 	bl	20d9a <memcpy>
	while (nargs != 0U) {
   1f1ee:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   1f1f0:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   1f1f2:	44c8      	add	r8, r9
	while (nargs != 0U) {
   1f1f4:	d1f0      	bne.n	1f1d8 <log_msg_create_n+0x88>
   1f1f6:	e7db      	b.n	1f1b0 <log_msg_create_n+0x60>

0001f1f8 <log_msg_hexdump_create>:
{
   1f1f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   1f1fc:	f643 75ff 	movw	r5, #16383	; 0x3fff
   1f200:	4295      	cmp	r5, r2
{
   1f202:	4680      	mov	r8, r0
   1f204:	460e      	mov	r6, r1
   1f206:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   1f208:	bf28      	it	cs
   1f20a:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   1f20c:	f7f1 fe5c 	bl	10ec8 <log_msg_chunk_alloc>
	if (msg == NULL) {
   1f210:	4604      	mov	r4, r0
   1f212:	b380      	cbz	r0, 1f276 <log_msg_hexdump_create+0x7e>
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1f214:	8902      	ldrh	r2, [r0, #8]
	msg->str = str;
   1f216:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
   1f21a:	2301      	movs	r3, #1
   1f21c:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1f21e:	00ab      	lsls	r3, r5, #2
   1f220:	f043 0301 	orr.w	r3, r3, #1
   1f224:	f002 0202 	and.w	r2, r2, #2
   1f228:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1f22a:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1f22c:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1f22e:	f100 0814 	add.w	r8, r0, #20
   1f232:	d917      	bls.n	1f264 <log_msg_hexdump_create+0x6c>
		(void)memcpy(msg->payload.ext.data.bytes,
   1f234:	2208      	movs	r2, #8
   1f236:	4631      	mov	r1, r6
   1f238:	3018      	adds	r0, #24
   1f23a:	f001 fdae 	bl	20d9a <memcpy>
		msg->hdr.params.generic.ext = 1;
   1f23e:	7a22      	ldrb	r2, [r4, #8]
		msg->payload.ext.next = NULL;
   1f240:	2300      	movs	r3, #0
		msg->hdr.params.generic.ext = 1;
   1f242:	f042 0202 	orr.w	r2, r2, #2
		msg->payload.ext.next = NULL;
   1f246:	6163      	str	r3, [r4, #20]
		msg->hdr.params.generic.ext = 1;
   1f248:	7222      	strb	r2, [r4, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1f24a:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1f24c:	3d08      	subs	r5, #8
	while (length > 0) {
   1f24e:	4699      	mov	r9, r3
   1f250:	b18d      	cbz	r5, 1f276 <log_msg_hexdump_create+0x7e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1f252:	f7f1 fe39 	bl	10ec8 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1f256:	4607      	mov	r7, r0
   1f258:	b980      	cbnz	r0, 1f27c <log_msg_hexdump_create+0x84>
			msg_free(msg);
   1f25a:	4620      	mov	r0, r4
   1f25c:	f7f1 fe48 	bl	10ef0 <msg_free>
			return NULL;
   1f260:	463c      	mov	r4, r7
   1f262:	e008      	b.n	1f276 <log_msg_hexdump_create+0x7e>
		(void)memcpy(msg->payload.single.bytes, data, length);
   1f264:	462a      	mov	r2, r5
   1f266:	4631      	mov	r1, r6
   1f268:	4640      	mov	r0, r8
   1f26a:	f001 fd96 	bl	20d9a <memcpy>
		msg->hdr.params.generic.ext = 0;
   1f26e:	7a23      	ldrb	r3, [r4, #8]
   1f270:	f36f 0341 	bfc	r3, #1, #1
   1f274:	7223      	strb	r3, [r4, #8]
}
   1f276:	4620      	mov	r0, r4
   1f278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   1f27c:	2d1c      	cmp	r5, #28
   1f27e:	462f      	mov	r7, r5
   1f280:	bf28      	it	cs
   1f282:	271c      	movcs	r7, #28
		*prev_cont = cont;
   1f284:	f8c8 0000 	str.w	r0, [r8]
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   1f288:	4631      	mov	r1, r6
		cont->next = NULL;
   1f28a:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   1f28e:	4680      	mov	r8, r0
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   1f290:	463a      	mov	r2, r7
   1f292:	3004      	adds	r0, #4
   1f294:	f001 fd81 	bl	20d9a <memcpy>
		data += chunk_length;
   1f298:	443e      	add	r6, r7
		length -= chunk_length;
   1f29a:	1bed      	subs	r5, r5, r7
   1f29c:	e7d8      	b.n	1f250 <log_msg_hexdump_create+0x58>

0001f29e <log_msg_hexdump_data_get>:
{
   1f29e:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1f2a0:	2400      	movs	r4, #0
   1f2a2:	9400      	str	r4, [sp, #0]
   1f2a4:	f7ff feba 	bl	1f01c <log_msg_hexdump_data_op>
}
   1f2a8:	b002      	add	sp, #8
   1f2aa:	bd10      	pop	{r4, pc}

0001f2ac <buffer_write>:
{
   1f2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f2ae:	4606      	mov	r6, r0
   1f2b0:	460d      	mov	r5, r1
   1f2b2:	4614      	mov	r4, r2
   1f2b4:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1f2b6:	4621      	mov	r1, r4
   1f2b8:	4628      	mov	r0, r5
   1f2ba:	463a      	mov	r2, r7
   1f2bc:	47b0      	blx	r6
	} while (len != 0);
   1f2be:	1a24      	subs	r4, r4, r0
		buf += processed;
   1f2c0:	4405      	add	r5, r0
	} while (len != 0);
   1f2c2:	d1f8      	bne.n	1f2b6 <buffer_write+0xa>
}
   1f2c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f2c6 <std_print>:
{
   1f2c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f2ca:	b08e      	sub	sp, #56	; 0x38
   1f2cc:	af0e      	add	r7, sp, #56	; 0x38
   1f2ce:	4680      	mov	r8, r0
   1f2d0:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1f2d2:	f7ff ff3b 	bl	1f14c <log_msg_str_get>
   1f2d6:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   1f2d8:	4640      	mov	r0, r8
   1f2da:	f7ff ff02 	bl	1f0e2 <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1f2de:	0083      	lsls	r3, r0, #2
   1f2e0:	3307      	adds	r3, #7
   1f2e2:	f023 0307 	bic.w	r3, r3, #7
   1f2e6:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   1f2ea:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1f2ec:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1f2ee:	f04f 0900 	mov.w	r9, #0
   1f2f2:	45d1      	cmp	r9, sl
   1f2f4:	d116      	bne.n	1f324 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1f2f6:	4640      	mov	r0, r8
   1f2f8:	f7ff fef3 	bl	1f0e2 <log_msg_nargs_get>
   1f2fc:	280f      	cmp	r0, #15
   1f2fe:	d81e      	bhi.n	1f33e <std_print+0x78>
   1f300:	e8df f010 	tbh	[pc, r0, lsl #1]
   1f304:	00200019 	.word	0x00200019
   1f308:	002d0026 	.word	0x002d0026
   1f30c:	00410036 	.word	0x00410036
   1f310:	005d004e 	.word	0x005d004e
   1f314:	0081006e 	.word	0x0081006e
   1f318:	00ad0096 	.word	0x00ad0096
   1f31c:	00e100c6 	.word	0x00e100c6
   1f320:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   1f324:	4649      	mov	r1, r9
   1f326:	4640      	mov	r0, r8
   1f328:	f7ff fede 	bl	1f0e8 <log_msg_arg_get>
   1f32c:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   1f330:	f109 0901 	add.w	r9, r9, #1
   1f334:	e7dd      	b.n	1f2f2 <std_print+0x2c>
		print_formatted(output, str);
   1f336:	4631      	mov	r1, r6
   1f338:	4628      	mov	r0, r5
   1f33a:	f7f1 fe25 	bl	10f88 <print_formatted>
}
   1f33e:	46bd      	mov	sp, r7
   1f340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   1f344:	6822      	ldr	r2, [r4, #0]
   1f346:	4631      	mov	r1, r6
   1f348:	4628      	mov	r0, r5
   1f34a:	f7f1 fe1d 	bl	10f88 <print_formatted>
		break;
   1f34e:	e7f6      	b.n	1f33e <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   1f350:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f354:	4631      	mov	r1, r6
   1f356:	4628      	mov	r0, r5
   1f358:	f7f1 fe16 	bl	10f88 <print_formatted>
		break;
   1f35c:	e7ef      	b.n	1f33e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   1f35e:	68a3      	ldr	r3, [r4, #8]
   1f360:	9300      	str	r3, [sp, #0]
   1f362:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f366:	4631      	mov	r1, r6
   1f368:	4628      	mov	r0, r5
   1f36a:	f7f1 fe0d 	bl	10f88 <print_formatted>
		break;
   1f36e:	e7e6      	b.n	1f33e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f370:	68e3      	ldr	r3, [r4, #12]
   1f372:	9301      	str	r3, [sp, #4]
   1f374:	68a3      	ldr	r3, [r4, #8]
   1f376:	9300      	str	r3, [sp, #0]
   1f378:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f37c:	4631      	mov	r1, r6
   1f37e:	4628      	mov	r0, r5
   1f380:	f7f1 fe02 	bl	10f88 <print_formatted>
		break;
   1f384:	e7db      	b.n	1f33e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f386:	6923      	ldr	r3, [r4, #16]
   1f388:	9302      	str	r3, [sp, #8]
   1f38a:	68e3      	ldr	r3, [r4, #12]
   1f38c:	9301      	str	r3, [sp, #4]
   1f38e:	68a3      	ldr	r3, [r4, #8]
   1f390:	9300      	str	r3, [sp, #0]
   1f392:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f396:	4631      	mov	r1, r6
   1f398:	4628      	mov	r0, r5
   1f39a:	f7f1 fdf5 	bl	10f88 <print_formatted>
		break;
   1f39e:	e7ce      	b.n	1f33e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f3a0:	6963      	ldr	r3, [r4, #20]
   1f3a2:	9303      	str	r3, [sp, #12]
   1f3a4:	6923      	ldr	r3, [r4, #16]
   1f3a6:	9302      	str	r3, [sp, #8]
   1f3a8:	68e3      	ldr	r3, [r4, #12]
   1f3aa:	9301      	str	r3, [sp, #4]
   1f3ac:	68a3      	ldr	r3, [r4, #8]
   1f3ae:	9300      	str	r3, [sp, #0]
   1f3b0:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f3b4:	4631      	mov	r1, r6
   1f3b6:	4628      	mov	r0, r5
   1f3b8:	f7f1 fde6 	bl	10f88 <print_formatted>
		break;
   1f3bc:	e7bf      	b.n	1f33e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f3be:	69a3      	ldr	r3, [r4, #24]
   1f3c0:	9304      	str	r3, [sp, #16]
   1f3c2:	6963      	ldr	r3, [r4, #20]
   1f3c4:	9303      	str	r3, [sp, #12]
   1f3c6:	6923      	ldr	r3, [r4, #16]
   1f3c8:	9302      	str	r3, [sp, #8]
   1f3ca:	68e3      	ldr	r3, [r4, #12]
   1f3cc:	9301      	str	r3, [sp, #4]
   1f3ce:	68a3      	ldr	r3, [r4, #8]
   1f3d0:	9300      	str	r3, [sp, #0]
   1f3d2:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f3d6:	4631      	mov	r1, r6
   1f3d8:	4628      	mov	r0, r5
   1f3da:	f7f1 fdd5 	bl	10f88 <print_formatted>
		break;
   1f3de:	e7ae      	b.n	1f33e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f3e0:	69e3      	ldr	r3, [r4, #28]
   1f3e2:	9305      	str	r3, [sp, #20]
   1f3e4:	69a3      	ldr	r3, [r4, #24]
   1f3e6:	9304      	str	r3, [sp, #16]
   1f3e8:	6963      	ldr	r3, [r4, #20]
   1f3ea:	9303      	str	r3, [sp, #12]
   1f3ec:	6923      	ldr	r3, [r4, #16]
   1f3ee:	9302      	str	r3, [sp, #8]
   1f3f0:	68e3      	ldr	r3, [r4, #12]
   1f3f2:	9301      	str	r3, [sp, #4]
   1f3f4:	68a3      	ldr	r3, [r4, #8]
   1f3f6:	9300      	str	r3, [sp, #0]
   1f3f8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f3fc:	4631      	mov	r1, r6
   1f3fe:	4628      	mov	r0, r5
   1f400:	f7f1 fdc2 	bl	10f88 <print_formatted>
		break;
   1f404:	e79b      	b.n	1f33e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f406:	6a23      	ldr	r3, [r4, #32]
   1f408:	9306      	str	r3, [sp, #24]
   1f40a:	69e3      	ldr	r3, [r4, #28]
   1f40c:	9305      	str	r3, [sp, #20]
   1f40e:	69a3      	ldr	r3, [r4, #24]
   1f410:	9304      	str	r3, [sp, #16]
   1f412:	6963      	ldr	r3, [r4, #20]
   1f414:	9303      	str	r3, [sp, #12]
   1f416:	6923      	ldr	r3, [r4, #16]
   1f418:	9302      	str	r3, [sp, #8]
   1f41a:	68e3      	ldr	r3, [r4, #12]
   1f41c:	9301      	str	r3, [sp, #4]
   1f41e:	68a3      	ldr	r3, [r4, #8]
   1f420:	9300      	str	r3, [sp, #0]
   1f422:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f426:	4631      	mov	r1, r6
   1f428:	4628      	mov	r0, r5
   1f42a:	f7f1 fdad 	bl	10f88 <print_formatted>
		break;
   1f42e:	e786      	b.n	1f33e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f430:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f432:	9307      	str	r3, [sp, #28]
   1f434:	6a23      	ldr	r3, [r4, #32]
   1f436:	9306      	str	r3, [sp, #24]
   1f438:	69e3      	ldr	r3, [r4, #28]
   1f43a:	9305      	str	r3, [sp, #20]
   1f43c:	69a3      	ldr	r3, [r4, #24]
   1f43e:	9304      	str	r3, [sp, #16]
   1f440:	6963      	ldr	r3, [r4, #20]
   1f442:	9303      	str	r3, [sp, #12]
   1f444:	6923      	ldr	r3, [r4, #16]
   1f446:	9302      	str	r3, [sp, #8]
   1f448:	68e3      	ldr	r3, [r4, #12]
   1f44a:	9301      	str	r3, [sp, #4]
   1f44c:	68a3      	ldr	r3, [r4, #8]
   1f44e:	9300      	str	r3, [sp, #0]
   1f450:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f454:	4631      	mov	r1, r6
   1f456:	4628      	mov	r0, r5
   1f458:	f7f1 fd96 	bl	10f88 <print_formatted>
		break;
   1f45c:	e76f      	b.n	1f33e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f45e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f460:	9308      	str	r3, [sp, #32]
   1f462:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f464:	9307      	str	r3, [sp, #28]
   1f466:	6a23      	ldr	r3, [r4, #32]
   1f468:	9306      	str	r3, [sp, #24]
   1f46a:	69e3      	ldr	r3, [r4, #28]
   1f46c:	9305      	str	r3, [sp, #20]
   1f46e:	69a3      	ldr	r3, [r4, #24]
   1f470:	9304      	str	r3, [sp, #16]
   1f472:	6963      	ldr	r3, [r4, #20]
   1f474:	9303      	str	r3, [sp, #12]
   1f476:	6923      	ldr	r3, [r4, #16]
   1f478:	9302      	str	r3, [sp, #8]
   1f47a:	68e3      	ldr	r3, [r4, #12]
   1f47c:	9301      	str	r3, [sp, #4]
   1f47e:	68a3      	ldr	r3, [r4, #8]
   1f480:	9300      	str	r3, [sp, #0]
   1f482:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f486:	4631      	mov	r1, r6
   1f488:	4628      	mov	r0, r5
   1f48a:	f7f1 fd7d 	bl	10f88 <print_formatted>
		break;
   1f48e:	e756      	b.n	1f33e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f490:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1f492:	9309      	str	r3, [sp, #36]	; 0x24
   1f494:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f496:	9308      	str	r3, [sp, #32]
   1f498:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f49a:	9307      	str	r3, [sp, #28]
   1f49c:	6a23      	ldr	r3, [r4, #32]
   1f49e:	9306      	str	r3, [sp, #24]
   1f4a0:	69e3      	ldr	r3, [r4, #28]
   1f4a2:	9305      	str	r3, [sp, #20]
   1f4a4:	69a3      	ldr	r3, [r4, #24]
   1f4a6:	9304      	str	r3, [sp, #16]
   1f4a8:	6963      	ldr	r3, [r4, #20]
   1f4aa:	9303      	str	r3, [sp, #12]
   1f4ac:	6923      	ldr	r3, [r4, #16]
   1f4ae:	9302      	str	r3, [sp, #8]
   1f4b0:	68e3      	ldr	r3, [r4, #12]
   1f4b2:	9301      	str	r3, [sp, #4]
   1f4b4:	68a3      	ldr	r3, [r4, #8]
   1f4b6:	9300      	str	r3, [sp, #0]
   1f4b8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f4bc:	4631      	mov	r1, r6
   1f4be:	4628      	mov	r0, r5
   1f4c0:	f7f1 fd62 	bl	10f88 <print_formatted>
		break;
   1f4c4:	e73b      	b.n	1f33e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f4c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1f4c8:	930a      	str	r3, [sp, #40]	; 0x28
   1f4ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1f4cc:	9309      	str	r3, [sp, #36]	; 0x24
   1f4ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f4d0:	9308      	str	r3, [sp, #32]
   1f4d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f4d4:	9307      	str	r3, [sp, #28]
   1f4d6:	6a23      	ldr	r3, [r4, #32]
   1f4d8:	9306      	str	r3, [sp, #24]
   1f4da:	69e3      	ldr	r3, [r4, #28]
   1f4dc:	9305      	str	r3, [sp, #20]
   1f4de:	69a3      	ldr	r3, [r4, #24]
   1f4e0:	9304      	str	r3, [sp, #16]
   1f4e2:	6963      	ldr	r3, [r4, #20]
   1f4e4:	9303      	str	r3, [sp, #12]
   1f4e6:	6923      	ldr	r3, [r4, #16]
   1f4e8:	9302      	str	r3, [sp, #8]
   1f4ea:	68e3      	ldr	r3, [r4, #12]
   1f4ec:	9301      	str	r3, [sp, #4]
   1f4ee:	68a3      	ldr	r3, [r4, #8]
   1f4f0:	9300      	str	r3, [sp, #0]
   1f4f2:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f4f6:	4631      	mov	r1, r6
   1f4f8:	4628      	mov	r0, r5
   1f4fa:	f7f1 fd45 	bl	10f88 <print_formatted>
		break;
   1f4fe:	e71e      	b.n	1f33e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f500:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f502:	930b      	str	r3, [sp, #44]	; 0x2c
   1f504:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1f506:	930a      	str	r3, [sp, #40]	; 0x28
   1f508:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1f50a:	9309      	str	r3, [sp, #36]	; 0x24
   1f50c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f50e:	9308      	str	r3, [sp, #32]
   1f510:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f512:	9307      	str	r3, [sp, #28]
   1f514:	6a23      	ldr	r3, [r4, #32]
   1f516:	9306      	str	r3, [sp, #24]
   1f518:	69e3      	ldr	r3, [r4, #28]
   1f51a:	9305      	str	r3, [sp, #20]
   1f51c:	69a3      	ldr	r3, [r4, #24]
   1f51e:	9304      	str	r3, [sp, #16]
   1f520:	6963      	ldr	r3, [r4, #20]
   1f522:	9303      	str	r3, [sp, #12]
   1f524:	6923      	ldr	r3, [r4, #16]
   1f526:	9302      	str	r3, [sp, #8]
   1f528:	68e3      	ldr	r3, [r4, #12]
   1f52a:	9301      	str	r3, [sp, #4]
   1f52c:	68a3      	ldr	r3, [r4, #8]
   1f52e:	9300      	str	r3, [sp, #0]
   1f530:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f534:	4631      	mov	r1, r6
   1f536:	4628      	mov	r0, r5
   1f538:	f7f1 fd26 	bl	10f88 <print_formatted>
		break;
   1f53c:	e6ff      	b.n	1f33e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f53e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1f540:	930c      	str	r3, [sp, #48]	; 0x30
   1f542:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f544:	930b      	str	r3, [sp, #44]	; 0x2c
   1f546:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1f548:	930a      	str	r3, [sp, #40]	; 0x28
   1f54a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1f54c:	9309      	str	r3, [sp, #36]	; 0x24
   1f54e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f550:	9308      	str	r3, [sp, #32]
   1f552:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f554:	9307      	str	r3, [sp, #28]
   1f556:	6a23      	ldr	r3, [r4, #32]
   1f558:	9306      	str	r3, [sp, #24]
   1f55a:	69e3      	ldr	r3, [r4, #28]
   1f55c:	9305      	str	r3, [sp, #20]
   1f55e:	69a3      	ldr	r3, [r4, #24]
   1f560:	9304      	str	r3, [sp, #16]
   1f562:	6963      	ldr	r3, [r4, #20]
   1f564:	9303      	str	r3, [sp, #12]
   1f566:	6923      	ldr	r3, [r4, #16]
   1f568:	9302      	str	r3, [sp, #8]
   1f56a:	68e3      	ldr	r3, [r4, #12]
   1f56c:	9301      	str	r3, [sp, #4]
   1f56e:	68a3      	ldr	r3, [r4, #8]
   1f570:	9300      	str	r3, [sp, #0]
   1f572:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f576:	4631      	mov	r1, r6
   1f578:	4628      	mov	r0, r5
   1f57a:	f7f1 fd05 	bl	10f88 <print_formatted>
}
   1f57e:	e6de      	b.n	1f33e <std_print+0x78>

0001f580 <log_output_flush>:
		     output->control_block->offset,
   1f580:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   1f582:	6881      	ldr	r1, [r0, #8]
{
   1f584:	b510      	push	{r4, lr}
   1f586:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   1f588:	e9d2 2300 	ldrd	r2, r3, [r2]
   1f58c:	6800      	ldr	r0, [r0, #0]
   1f58e:	f7ff fe8d 	bl	1f2ac <buffer_write>
	output->control_block->offset = 0;
   1f592:	6863      	ldr	r3, [r4, #4]
   1f594:	2200      	movs	r2, #0
   1f596:	601a      	str	r2, [r3, #0]
}
   1f598:	bd10      	pop	{r4, pc}

0001f59a <out_func>:
{
   1f59a:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1f59c:	684b      	ldr	r3, [r1, #4]
   1f59e:	681a      	ldr	r2, [r3, #0]
   1f5a0:	68cb      	ldr	r3, [r1, #12]
   1f5a2:	429a      	cmp	r2, r3
{
   1f5a4:	4605      	mov	r5, r0
   1f5a6:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1f5a8:	d102      	bne.n	1f5b0 <out_func+0x16>
		log_output_flush(out_ctx);
   1f5aa:	4608      	mov	r0, r1
   1f5ac:	f7ff ffe8 	bl	1f580 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1f5b0:	6863      	ldr	r3, [r4, #4]
   1f5b2:	f3bf 8f5b 	dmb	ish
   1f5b6:	e853 2f00 	ldrex	r2, [r3]
   1f5ba:	1c51      	adds	r1, r2, #1
   1f5bc:	e843 1000 	strex	r0, r1, [r3]
   1f5c0:	2800      	cmp	r0, #0
   1f5c2:	d1f8      	bne.n	1f5b6 <out_func+0x1c>
   1f5c4:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   1f5c8:	68a3      	ldr	r3, [r4, #8]
   1f5ca:	549d      	strb	r5, [r3, r2]
}
   1f5cc:	2000      	movs	r0, #0
   1f5ce:	bd38      	pop	{r3, r4, r5, pc}

0001f5d0 <log_halt>:
   1f5d0:	684b      	ldr	r3, [r1, #4]
   1f5d2:	2000      	movs	r0, #0
   1f5d4:	7158      	strb	r0, [r3, #5]
}
   1f5d6:	4770      	bx	lr

0001f5d8 <log_go>:
	backend->cb->active = true;
   1f5d8:	684b      	ldr	r3, [r1, #4]
   1f5da:	2201      	movs	r2, #1
   1f5dc:	715a      	strb	r2, [r3, #5]
}
   1f5de:	2000      	movs	r0, #0
   1f5e0:	4770      	bx	lr

0001f5e2 <cmd_log_self_halt>:
{
   1f5e2:	b510      	push	{r4, lr}
   1f5e4:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
   1f5e6:	f7f2 f811 	bl	1160c <shell_state_precheck>
   1f5ea:	b120      	cbz	r0, 1f5f6 <cmd_log_self_halt+0x14>
	return log_halt(shell, shell->log_backend->backend, argc, argv);
   1f5ec:	69e3      	ldr	r3, [r4, #28]
	log_backend_deactivate(backend);
   1f5ee:	681b      	ldr	r3, [r3, #0]
	backend->cb->active = false;
   1f5f0:	685b      	ldr	r3, [r3, #4]
   1f5f2:	2200      	movs	r2, #0
   1f5f4:	715a      	strb	r2, [r3, #5]
}
   1f5f6:	2000      	movs	r0, #0
   1f5f8:	bd10      	pop	{r4, pc}

0001f5fa <cmd_log_self_go>:
{
   1f5fa:	b510      	push	{r4, lr}
   1f5fc:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
   1f5fe:	f7f2 f805 	bl	1160c <shell_state_precheck>
   1f602:	b120      	cbz	r0, 1f60e <cmd_log_self_go+0x14>
	return log_go(shell, shell->log_backend->backend, argc, argv);
   1f604:	69e3      	ldr	r3, [r4, #28]
	log_backend_activate(backend, backend->cb->ctx);
   1f606:	681b      	ldr	r3, [r3, #0]
	backend->cb->active = true;
   1f608:	685b      	ldr	r3, [r3, #4]
   1f60a:	2201      	movs	r2, #1
   1f60c:	715a      	strb	r2, [r3, #5]
}
   1f60e:	2000      	movs	r0, #0
   1f610:	bd10      	pop	{r4, pc}

0001f612 <cmd_log_self_status>:
{
   1f612:	b570      	push	{r4, r5, r6, lr}
   1f614:	4604      	mov	r4, r0
   1f616:	460d      	mov	r5, r1
   1f618:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   1f61a:	f7f1 fff7 	bl	1160c <shell_state_precheck>
   1f61e:	b130      	cbz	r0, 1f62e <cmd_log_self_status+0x1c>
	log_status(shell, shell->log_backend->backend, argc, argv);
   1f620:	69e1      	ldr	r1, [r4, #28]
   1f622:	4633      	mov	r3, r6
   1f624:	6809      	ldr	r1, [r1, #0]
   1f626:	462a      	mov	r2, r5
   1f628:	4620      	mov	r0, r4
   1f62a:	f7f1 ff27 	bl	1147c <log_status>
}
   1f62e:	2000      	movs	r0, #0
   1f630:	bd70      	pop	{r4, r5, r6, pc}

0001f632 <cmd_log_self_enable>:
{
   1f632:	b570      	push	{r4, r5, r6, lr}
   1f634:	4604      	mov	r4, r0
   1f636:	460d      	mov	r5, r1
   1f638:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   1f63a:	f7f1 ffe7 	bl	1160c <shell_state_precheck>
   1f63e:	b140      	cbz	r0, 1f652 <cmd_log_self_enable+0x20>
	return log_enable(shell, shell->log_backend->backend, argc, argv);
   1f640:	69e1      	ldr	r1, [r4, #28]
   1f642:	4633      	mov	r3, r6
   1f644:	462a      	mov	r2, r5
   1f646:	4620      	mov	r0, r4
   1f648:	6809      	ldr	r1, [r1, #0]
}
   1f64a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_enable(shell, shell->log_backend->backend, argc, argv);
   1f64e:	f7f2 b855 	b.w	116fc <log_enable>
}
   1f652:	bd70      	pop	{r4, r5, r6, pc}

0001f654 <log_disable>:
{
   1f654:	b513      	push	{r0, r1, r4, lr}
	filters_set(shell, backend, argc - 1, &argv[1], LOG_LEVEL_NONE);
   1f656:	2400      	movs	r4, #0
   1f658:	9400      	str	r4, [sp, #0]
   1f65a:	3304      	adds	r3, #4
   1f65c:	3a01      	subs	r2, #1
   1f65e:	f7f1 ffe5 	bl	1162c <filters_set>
}
   1f662:	4620      	mov	r0, r4
   1f664:	b002      	add	sp, #8
   1f666:	bd10      	pop	{r4, pc}

0001f668 <cmd_log_self_disable>:
{
   1f668:	b570      	push	{r4, r5, r6, lr}
   1f66a:	4604      	mov	r4, r0
   1f66c:	460d      	mov	r5, r1
   1f66e:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   1f670:	f7f1 ffcc 	bl	1160c <shell_state_precheck>
   1f674:	b140      	cbz	r0, 1f688 <cmd_log_self_disable+0x20>
	return log_disable(shell, shell->log_backend->backend, argc, argv);
   1f676:	69e1      	ldr	r1, [r4, #28]
   1f678:	4633      	mov	r3, r6
   1f67a:	462a      	mov	r2, r5
   1f67c:	4620      	mov	r0, r4
   1f67e:	6809      	ldr	r1, [r1, #0]
}
   1f680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_disable(shell, shell->log_backend->backend, argc, argv);
   1f684:	f7ff bfe6 	b.w	1f654 <log_disable>
}
   1f688:	bd70      	pop	{r4, r5, r6, pc}

0001f68a <cmd_kernel_reboot_warm>:
#endif

#if defined(CONFIG_REBOOT)
static int cmd_kernel_reboot_warm(const struct shell *shell,
				  size_t argc, char **argv)
{
   1f68a:	b508      	push	{r3, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
#if (CONFIG_KERNEL_SHELL_REBOOT_DELAY > 0)
	k_sleep(K_MSEC(CONFIG_KERNEL_SHELL_REBOOT_DELAY));
#endif
	sys_reboot(SYS_REBOOT_WARM);
   1f68c:	2000      	movs	r0, #0
   1f68e:	f7f1 f86d 	bl	1076c <sys_reboot>

0001f692 <cmd_kernel_reboot_cold>:
	return 0;
}

static int cmd_kernel_reboot_cold(const struct shell *shell,
				  size_t argc, char **argv)
{
   1f692:	b508      	push	{r3, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
#if (CONFIG_KERNEL_SHELL_REBOOT_DELAY > 0)
	k_sleep(K_MSEC(CONFIG_KERNEL_SHELL_REBOOT_DELAY));
#endif
	sys_reboot(SYS_REBOOT_COLD);
   1f694:	2001      	movs	r0, #1
   1f696:	f7f1 f869 	bl	1076c <sys_reboot>

0001f69a <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
   1f69a:	6883      	ldr	r3, [r0, #8]
   1f69c:	6a1b      	ldr	r3, [r3, #32]
   1f69e:	b103      	cbz	r3, 1f6a2 <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
   1f6a0:	4718      	bx	r3
}
   1f6a2:	4770      	bx	lr

0001f6a4 <read>:
{
   1f6a4:	b510      	push	{r4, lr}
   1f6a6:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
   1f6a8:	6843      	ldr	r3, [r0, #4]
   1f6aa:	68d8      	ldr	r0, [r3, #12]
   1f6ac:	f7ff faa4 	bl	1ebf8 <ring_buf_get>
   1f6b0:	6020      	str	r0, [r4, #0]
}
   1f6b2:	2000      	movs	r0, #0
   1f6b4:	bd10      	pop	{r4, pc}

0001f6b6 <write>:
{
   1f6b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
   1f6ba:	6845      	ldr	r5, [r0, #4]
{
   1f6bc:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
   1f6be:	682b      	ldr	r3, [r5, #0]
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
   1f6c0:	7c1b      	ldrb	r3, [r3, #16]
{
   1f6c2:	460c      	mov	r4, r1
   1f6c4:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
   1f6c6:	b153      	cbz	r3, 1f6de <write+0x28>
   1f6c8:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
   1f6cc:	4544      	cmp	r4, r8
   1f6ce:	682b      	ldr	r3, [r5, #0]
   1f6d0:	d120      	bne.n	1f714 <write+0x5e>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   1f6d2:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
		*cnt = length;
   1f6d6:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   1f6d8:	2001      	movs	r0, #1
   1f6da:	4790      	blx	r2
   1f6dc:	e017      	b.n	1f70e <write+0x58>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
   1f6de:	68a8      	ldr	r0, [r5, #8]
   1f6e0:	f7ff fa25 	bl	1eb2e <ring_buf_put>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f6e4:	682b      	ldr	r3, [r5, #0]
   1f6e6:	6030      	str	r0, [r6, #0]
   1f6e8:	330c      	adds	r3, #12
   1f6ea:	2101      	movs	r1, #1
   1f6ec:	f3bf 8f5b 	dmb	ish
   1f6f0:	e853 2f00 	ldrex	r2, [r3]
   1f6f4:	e843 1000 	strex	r0, r1, [r3]
   1f6f8:	2800      	cmp	r0, #0
   1f6fa:	d1f9      	bne.n	1f6f0 <write+0x3a>
   1f6fc:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
   1f700:	b92a      	cbnz	r2, 1f70e <write+0x58>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
   1f702:	682b      	ldr	r3, [r5, #0]
   1f704:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable != NULL) {
   1f706:	6883      	ldr	r3, [r0, #8]
   1f708:	69db      	ldr	r3, [r3, #28]
   1f70a:	b103      	cbz	r3, 1f70e <write+0x58>
		api->irq_tx_enable(dev);
   1f70c:	4798      	blx	r3
}
   1f70e:	2000      	movs	r0, #0
   1f710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
   1f714:	6818      	ldr	r0, [r3, #0]
   1f716:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   1f71a:	6883      	ldr	r3, [r0, #8]
   1f71c:	685b      	ldr	r3, [r3, #4]
   1f71e:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   1f720:	e7d4      	b.n	1f6cc <write+0x16>

0001f722 <uninit>:
		const struct device *dev = sh_uart->ctrl_blk->dev;
   1f722:	6843      	ldr	r3, [r0, #4]
   1f724:	681b      	ldr	r3, [r3, #0]
{
   1f726:	b510      	push	{r4, lr}
		const struct device *dev = sh_uart->ctrl_blk->dev;
   1f728:	681c      	ldr	r4, [r3, #0]
   1f72a:	4620      	mov	r0, r4
   1f72c:	f7ff ffb5 	bl	1f69a <z_impl_uart_irq_tx_disable>
	if (api->irq_rx_disable != NULL) {
   1f730:	68a3      	ldr	r3, [r4, #8]
   1f732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f734:	b10b      	cbz	r3, 1f73a <uninit+0x18>
		api->irq_rx_disable(dev);
   1f736:	4620      	mov	r0, r4
   1f738:	4798      	blx	r3
}
   1f73a:	2000      	movs	r0, #0
   1f73c:	bd10      	pop	{r4, pc}

0001f73e <enable>:
{
   1f73e:	b508      	push	{r3, lr}
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
   1f740:	6843      	ldr	r3, [r0, #4]
   1f742:	681b      	ldr	r3, [r3, #0]
   1f744:	7419      	strb	r1, [r3, #16]
	if (blocking_tx) {
   1f746:	b111      	cbz	r1, 1f74e <enable+0x10>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
   1f748:	6818      	ldr	r0, [r3, #0]
   1f74a:	f7ff ffa6 	bl	1f69a <z_impl_uart_irq_tx_disable>
}
   1f74e:	2000      	movs	r0, #0
   1f750:	bd08      	pop	{r3, pc}

0001f752 <atomic_or>:
{
   1f752:	4603      	mov	r3, r0
}
   1f754:	f3bf 8f5b 	dmb	ish
   1f758:	e853 0f00 	ldrex	r0, [r3]
   1f75c:	ea40 0201 	orr.w	r2, r0, r1
   1f760:	e843 2c00 	strex	ip, r2, [r3]
   1f764:	f1bc 0f00 	cmp.w	ip, #0
   1f768:	d1f6      	bne.n	1f758 <atomic_or+0x6>
   1f76a:	f3bf 8f5b 	dmb	ish
   1f76e:	4770      	bx	lr

0001f770 <atomic_and>:
{
   1f770:	4603      	mov	r3, r0
}
   1f772:	f3bf 8f5b 	dmb	ish
   1f776:	e853 0f00 	ldrex	r0, [r3]
   1f77a:	ea00 0201 	and.w	r2, r0, r1
   1f77e:	e843 2c00 	strex	ip, r2, [r3]
   1f782:	f1bc 0f00 	cmp.w	ip, #0
   1f786:	d1f6      	bne.n	1f776 <atomic_and+0x6>
   1f788:	f3bf 8f5b 	dmb	ish
   1f78c:	4770      	bx	lr

0001f78e <kill_handler>:
{
   1f78e:	b538      	push	{r3, r4, r5, lr}
	if (z_flag_processing_get(shell)) {
   1f790:	6883      	ldr	r3, [r0, #8]
	return sh->ctx->ctx.flags.processing == 1;
   1f792:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
   1f796:	07db      	lsls	r3, r3, #31
{
   1f798:	4604      	mov	r4, r0
	if (z_flag_processing_get(shell)) {
   1f79a:	d41d      	bmi.n	1f7d8 <kill_handler+0x4a>
		z_shell_log_backend_disable(shell->log_backend);
   1f79c:	69c0      	ldr	r0, [r0, #28]
   1f79e:	f000 fd7a 	bl	20296 <z_shell_log_backend_disable>
	err = shell->iface->api->uninit(shell->iface);
   1f7a2:	6860      	ldr	r0, [r4, #4]
   1f7a4:	6803      	ldr	r3, [r0, #0]
   1f7a6:	685b      	ldr	r3, [r3, #4]
   1f7a8:	4798      	blx	r3
	if (err != 0) {
   1f7aa:	4605      	mov	r5, r0
   1f7ac:	b920      	cbnz	r0, 1f7b8 <kill_handler+0x2a>
	z_shell_history_purge(shell->history);
   1f7ae:	68e0      	ldr	r0, [r4, #12]
   1f7b0:	f000 feb6 	bl	20520 <z_shell_history_purge>
	shell->ctx->state = state;
   1f7b4:	68a3      	ldr	r3, [r4, #8]
   1f7b6:	711d      	strb	r5, [r3, #4]
	if (shell->ctx->uninit_cb) {
   1f7b8:	68a3      	ldr	r3, [r4, #8]
   1f7ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1f7bc:	b113      	cbz	r3, 1f7c4 <kill_handler+0x36>
		shell->ctx->uninit_cb(shell, err);
   1f7be:	4629      	mov	r1, r5
   1f7c0:	4620      	mov	r0, r4
   1f7c2:	4798      	blx	r3
	shell->ctx->tid = NULL;
   1f7c4:	68a3      	ldr	r3, [r4, #8]
   1f7c6:	2200      	movs	r2, #0
   1f7c8:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
	return z_impl_z_current_get();
   1f7cc:	f7fe fafc 	bl	1ddc8 <z_impl_z_current_get>
}
   1f7d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_abort(thread);
   1f7d4:	f7f5 b8c4 	b.w	14960 <z_impl_k_thread_abort>
		return -EBUSY;
   1f7d8:	f06f 050f 	mvn.w	r5, #15
   1f7dc:	e7ec      	b.n	1f7b8 <kill_handler+0x2a>

0001f7de <shell_signal_handle>:
{
   1f7de:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
   1f7e0:	6885      	ldr	r5, [r0, #8]
   1f7e2:	0109      	lsls	r1, r1, #4
   1f7e4:	f501 711a 	add.w	r1, r1, #616	; 0x268
{
   1f7e8:	4604      	mov	r4, r0
   1f7ea:	4616      	mov	r6, r2
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
   1f7ec:	440d      	add	r5, r1
	z_impl_k_poll_signal_check(sig, signaled, result);
   1f7ee:	aa01      	add	r2, sp, #4
   1f7f0:	4669      	mov	r1, sp
   1f7f2:	4628      	mov	r0, r5
   1f7f4:	f003 fd59 	bl	232aa <z_impl_k_poll_signal_check>
	if (set) {
   1f7f8:	9b00      	ldr	r3, [sp, #0]
   1f7fa:	b123      	cbz	r3, 1f806 <shell_signal_handle+0x28>
	z_impl_k_poll_signal_reset(sig);
   1f7fc:	4628      	mov	r0, r5
   1f7fe:	f003 fd51 	bl	232a4 <z_impl_k_poll_signal_reset>
		handler(shell);
   1f802:	4620      	mov	r0, r4
   1f804:	47b0      	blx	r6
}
   1f806:	b002      	add	sp, #8
   1f808:	bd70      	pop	{r4, r5, r6, pc}

0001f80a <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   1f80a:	f7fd bd43 	b.w	1d294 <z_impl_k_mutex_unlock>

0001f80e <z_shell_strlen>:
{
   1f80e:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
   1f810:	b110      	cbz	r0, 1f818 <z_shell_strlen+0xa>
   1f812:	f001 fa70 	bl	20cf6 <strlen>
   1f816:	b280      	uxth	r0, r0
}
   1f818:	bd08      	pop	{r3, pc}

0001f81a <z_shell_raw_fprintf>:
{
   1f81a:	b40e      	push	{r1, r2, r3}
   1f81c:	b503      	push	{r0, r1, lr}
   1f81e:	aa03      	add	r2, sp, #12
   1f820:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   1f824:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   1f826:	f7f3 fae3 	bl	12df0 <z_shell_fprintf_fmt>
}
   1f82a:	b002      	add	sp, #8
   1f82c:	f85d eb04 	ldr.w	lr, [sp], #4
   1f830:	b003      	add	sp, #12
   1f832:	4770      	bx	lr

0001f834 <z_flag_history_exit_set.isra.0>:
static inline bool z_flag_history_exit_set(const struct shell *sh, bool val)
   1f834:	b508      	push	{r3, lr}
   1f836:	460b      	mov	r3, r1
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, history_exit, val, ret);
   1f838:	f500 7019 	add.w	r0, r0, #612	; 0x264
   1f83c:	2104      	movs	r1, #4
   1f83e:	b123      	cbz	r3, 1f84a <z_flag_history_exit_set.isra.0+0x16>
   1f840:	f7ff ff87 	bl	1f752 <atomic_or>
}
   1f844:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1f848:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, history_exit, val, ret);
   1f84a:	f06f 0104 	mvn.w	r1, #4
   1f84e:	f7ff ff8f 	bl	1f770 <atomic_and>
   1f852:	e7f7      	b.n	1f844 <z_flag_history_exit_set.isra.0+0x10>

0001f854 <z_flag_insert_mode_set.isra.0>:
static inline bool z_flag_insert_mode_set(const struct shell *sh, bool val)
   1f854:	b508      	push	{r3, lr}
   1f856:	460b      	mov	r3, r1
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
   1f858:	f500 7018 	add.w	r0, r0, #608	; 0x260
   1f85c:	2101      	movs	r1, #1
   1f85e:	b123      	cbz	r3, 1f86a <z_flag_insert_mode_set.isra.0+0x16>
   1f860:	f7ff ff77 	bl	1f752 <atomic_or>
}
   1f864:	f000 0001 	and.w	r0, r0, #1
   1f868:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
   1f86a:	f06f 0101 	mvn.w	r1, #1
   1f86e:	f7ff ff7f 	bl	1f770 <atomic_and>
   1f872:	e7f7      	b.n	1f864 <z_flag_insert_mode_set.isra.0+0x10>

0001f874 <transport_evt_handler>:
	signal = (evt_type == SHELL_TRANSPORT_EVT_RX_RDY) ?
   1f874:	688b      	ldr	r3, [r1, #8]
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
   1f876:	b920      	cbnz	r0, 1f882 <transport_evt_handler+0xe>
   1f878:	f503 701a 	add.w	r0, r3, #616	; 0x268
	return z_impl_k_poll_signal_raise(sig, result);
   1f87c:	2100      	movs	r1, #0
   1f87e:	f7fe bd9b 	b.w	1e3b8 <z_impl_k_poll_signal_raise>
   1f882:	f503 7026 	add.w	r0, r3, #664	; 0x298
   1f886:	e7f9      	b.n	1f87c <transport_evt_handler+0x8>

0001f888 <k_mutex_lock.constprop.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   1f888:	f7fd bc86 	b.w	1d198 <z_impl_k_mutex_lock>

0001f88c <shell_log_process>:
{
   1f88c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int signaled = 0;
   1f88e:	2300      	movs	r3, #0
{
   1f890:	4604      	mov	r4, r0
	int signaled = 0;
   1f892:	9300      	str	r3, [sp, #0]
			z_shell_cmd_line_erase(shell);
   1f894:	4620      	mov	r0, r4
   1f896:	f000 fb2d 	bl	1fef4 <z_shell_cmd_line_erase>
			processed = z_shell_log_backend_process(
   1f89a:	69e0      	ldr	r0, [r4, #28]
   1f89c:	f000 fd04 	bl	202a8 <z_shell_log_backend_process>
   1f8a0:	4605      	mov	r5, r0
		z_shell_print_prompt_and_cmd(shell);
   1f8a2:	4620      	mov	r0, r4
		struct k_poll_signal *signal =
   1f8a4:	68a6      	ldr	r6, [r4, #8]
		z_shell_print_prompt_and_cmd(shell);
   1f8a6:	f7f3 fc6d 	bl	13184 <z_shell_print_prompt_and_cmd>
		if (shell->ctx->cmd_buff_len) {
   1f8aa:	68a3      	ldr	r3, [r4, #8]
   1f8ac:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
		struct k_poll_signal *signal =
   1f8ae:	f506 761a 	add.w	r6, r6, #616	; 0x268
		if (shell->ctx->cmd_buff_len) {
   1f8b2:	b123      	cbz	r3, 1f8be <shell_log_process+0x32>
	return z_impl_k_sleep(timeout);
   1f8b4:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
   1f8b8:	2100      	movs	r1, #0
   1f8ba:	f7fe fa6b 	bl	1dd94 <z_impl_k_sleep>
	z_impl_k_poll_signal_check(sig, signaled, result);
   1f8be:	aa01      	add	r2, sp, #4
   1f8c0:	4669      	mov	r1, sp
   1f8c2:	4630      	mov	r0, r6
   1f8c4:	f003 fcf1 	bl	232aa <z_impl_k_poll_signal_check>
	} while (processed && !signaled);
   1f8c8:	b115      	cbz	r5, 1f8d0 <shell_log_process+0x44>
   1f8ca:	9b00      	ldr	r3, [sp, #0]
   1f8cc:	2b00      	cmp	r3, #0
   1f8ce:	d0e1      	beq.n	1f894 <shell_log_process+0x8>
}
   1f8d0:	b002      	add	sp, #8
   1f8d2:	bd70      	pop	{r4, r5, r6, pc}

0001f8d4 <shell_vfprintf>:
{
   1f8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f8d6:	4604      	mov	r4, r0
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
   1f8d8:	6880      	ldr	r0, [r0, #8]
{
   1f8da:	461f      	mov	r7, r3
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
   1f8dc:	7903      	ldrb	r3, [r0, #4]
   1f8de:	2b02      	cmp	r3, #2
{
   1f8e0:	460d      	mov	r5, r1
   1f8e2:	4616      	mov	r6, r2
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
   1f8e4:	d007      	beq.n	1f8f6 <shell_vfprintf+0x22>
}
   1f8e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
   1f8ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1f8ee:	f500 7019 	add.w	r0, r0, #612	; 0x264
   1f8f2:	f7ff bf2e 	b.w	1f752 <atomic_or>
	k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
   1f8f6:	f04f 32ff 	mov.w	r2, #4294967295
   1f8fa:	f04f 33ff 	mov.w	r3, #4294967295
   1f8fe:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   1f902:	f7ff ffc1 	bl	1f888 <k_mutex_lock.constprop.0>
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
   1f906:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->ctx.flags.cmd_ctx == 1;
   1f908:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
   1f90c:	0511      	lsls	r1, r2, #20
   1f90e:	d404      	bmi.n	1f91a <shell_vfprintf+0x46>
   1f910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f912:	b913      	cbnz	r3, 1f91a <shell_vfprintf+0x46>
		z_shell_cmd_line_erase(sh);
   1f914:	4620      	mov	r0, r4
   1f916:	f000 faed 	bl	1fef4 <z_shell_cmd_line_erase>
	z_shell_vfprintf(sh, color, fmt, args);
   1f91a:	463b      	mov	r3, r7
   1f91c:	4632      	mov	r2, r6
   1f91e:	4629      	mov	r1, r5
   1f920:	4620      	mov	r0, r4
   1f922:	f000 fb48 	bl	1ffb6 <z_shell_vfprintf>
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
   1f926:	68a3      	ldr	r3, [r4, #8]
   1f928:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
   1f92c:	0512      	lsls	r2, r2, #20
   1f92e:	d404      	bmi.n	1f93a <shell_vfprintf+0x66>
   1f930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f932:	b913      	cbnz	r3, 1f93a <shell_vfprintf+0x66>
		z_shell_print_prompt_and_cmd(sh);
   1f934:	4620      	mov	r0, r4
   1f936:	f7f3 fc25 	bl	13184 <z_shell_print_prompt_and_cmd>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
   1f93a:	6960      	ldr	r0, [r4, #20]
   1f93c:	f000 f817 	bl	1f96e <z_shell_fprintf_buffer_flush>
	k_mutex_unlock(&sh->ctx->wr_mtx);
   1f940:	68a0      	ldr	r0, [r4, #8]
}
   1f942:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&sh->ctx->wr_mtx);
   1f946:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   1f94a:	f7ff bf5e 	b.w	1f80a <k_mutex_unlock>

0001f94e <shell_fprintf>:
{
   1f94e:	b40c      	push	{r2, r3}
   1f950:	b507      	push	{r0, r1, r2, lr}
   1f952:	ab04      	add	r3, sp, #16
   1f954:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
   1f958:	9301      	str	r3, [sp, #4]
	shell_vfprintf(shell, color, fmt, args);
   1f95a:	f7ff ffbb 	bl	1f8d4 <shell_vfprintf>
}
   1f95e:	b003      	add	sp, #12
   1f960:	f85d eb04 	ldr.w	lr, [sp], #4
   1f964:	b002      	add	sp, #8
   1f966:	4770      	bx	lr

0001f968 <shell_set_bypass>:
	sh->ctx->bypass = bypass;
   1f968:	6883      	ldr	r3, [r0, #8]
   1f96a:	6399      	str	r1, [r3, #56]	; 0x38
}
   1f96c:	4770      	bx	lr

0001f96e <z_shell_fprintf_buffer_flush>:


void z_shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   1f96e:	6902      	ldr	r2, [r0, #16]
   1f970:	6883      	ldr	r3, [r0, #8]
   1f972:	6812      	ldr	r2, [r2, #0]
   1f974:	6801      	ldr	r1, [r0, #0]
{
   1f976:	b510      	push	{r4, lr}
   1f978:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   1f97a:	68c0      	ldr	r0, [r0, #12]
   1f97c:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
   1f97e:	6923      	ldr	r3, [r4, #16]
   1f980:	2200      	movs	r2, #0
   1f982:	601a      	str	r2, [r3, #0]
}
   1f984:	bd10      	pop	{r4, pc}

0001f986 <out_func>:
{
   1f986:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   1f988:	68cb      	ldr	r3, [r1, #12]
   1f98a:	7c1b      	ldrb	r3, [r3, #16]
   1f98c:	2b02      	cmp	r3, #2
{
   1f98e:	4605      	mov	r5, r0
   1f990:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   1f992:	d104      	bne.n	1f99e <out_func+0x18>
   1f994:	280a      	cmp	r0, #10
   1f996:	d102      	bne.n	1f99e <out_func+0x18>
		(void)out_func('\r', ctx);
   1f998:	200d      	movs	r0, #13
   1f99a:	f7ff fff4 	bl	1f986 <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (uint8_t)c;
   1f99e:	6923      	ldr	r3, [r4, #16]
   1f9a0:	6822      	ldr	r2, [r4, #0]
   1f9a2:	681b      	ldr	r3, [r3, #0]
   1f9a4:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
   1f9a6:	6922      	ldr	r2, [r4, #16]
   1f9a8:	6813      	ldr	r3, [r2, #0]
   1f9aa:	3301      	adds	r3, #1
   1f9ac:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
   1f9ae:	6862      	ldr	r2, [r4, #4]
   1f9b0:	4293      	cmp	r3, r2
   1f9b2:	d102      	bne.n	1f9ba <out_func+0x34>
		z_shell_fprintf_buffer_flush(sh_fprintf);
   1f9b4:	4620      	mov	r0, r4
   1f9b6:	f7ff ffda 	bl	1f96e <z_shell_fprintf_buffer_flush>
}
   1f9ba:	2000      	movs	r0, #0
   1f9bc:	bd38      	pop	{r3, r4, r5, pc}

0001f9be <isspace>:
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1f9be:	2820      	cmp	r0, #32
   1f9c0:	d005      	beq.n	1f9ce <isspace+0x10>
   1f9c2:	3809      	subs	r0, #9
   1f9c4:	2804      	cmp	r0, #4
   1f9c6:	bf8c      	ite	hi
   1f9c8:	2000      	movhi	r0, #0
   1f9ca:	2001      	movls	r0, #1
   1f9cc:	4770      	bx	lr
   1f9ce:	2001      	movs	r0, #1
}
   1f9d0:	4770      	bx	lr

0001f9d2 <z_shell_strlen>:
{
   1f9d2:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
   1f9d4:	b110      	cbz	r0, 1f9dc <z_shell_strlen+0xa>
   1f9d6:	f001 f98e 	bl	20cf6 <strlen>
   1f9da:	b280      	uxth	r0, r0
}
   1f9dc:	bd08      	pop	{r3, pc}

0001f9de <z_column_span_with_buffer_offsets_get>:
{
   1f9de:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
   1f9e0:	7b04      	ldrb	r4, [r0, #12]
   1f9e2:	8943      	ldrh	r3, [r0, #10]
   1f9e4:	4422      	add	r2, r4
   1f9e6:	4421      	add	r1, r4
   1f9e8:	fbb2 f0f3 	udiv	r0, r2, r3
   1f9ec:	fbb1 f4f3 	udiv	r4, r1, r3
   1f9f0:	fb03 2010 	mls	r0, r3, r0, r2
   1f9f4:	fb03 1114 	mls	r1, r3, r4, r1
}
   1f9f8:	1a40      	subs	r0, r0, r1
   1f9fa:	bd10      	pop	{r4, pc}

0001f9fc <z_row_span_with_buffer_offsets_get>:
{
   1f9fc:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
   1f9fe:	7b04      	ldrb	r4, [r0, #12]
   1fa00:	8943      	ldrh	r3, [r0, #10]
   1fa02:	4421      	add	r1, r4
   1fa04:	1910      	adds	r0, r2, r4
   1fa06:	fbb1 f1f3 	udiv	r1, r1, r3
   1fa0a:	fbb0 f0f3 	udiv	r0, r0, r3
}
   1fa0e:	1a40      	subs	r0, r0, r1
   1fa10:	bd10      	pop	{r4, pc}

0001fa12 <z_shell_multiline_data_calc>:
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   1fa12:	7b03      	ldrb	r3, [r0, #12]
{
   1fa14:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   1fa16:	8944      	ldrh	r4, [r0, #10]
   1fa18:	4419      	add	r1, r3
   1fa1a:	fbb1 f5f4 	udiv	r5, r1, r4
   1fa1e:	fb04 1115 	mls	r1, r4, r5, r1
   1fa22:	3101      	adds	r1, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   1fa24:	441a      	add	r2, r3
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   1fa26:	8001      	strh	r1, [r0, #0]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   1fa28:	fbb2 f3f4 	udiv	r3, r2, r4
   1fa2c:	1c59      	adds	r1, r3, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   1fa2e:	fb04 2313 	mls	r3, r4, r3, r2
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
   1fa32:	3501      	adds	r5, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   1fa34:	3301      	adds	r3, #1
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
   1fa36:	8085      	strh	r5, [r0, #4]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   1fa38:	80c1      	strh	r1, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   1fa3a:	8043      	strh	r3, [r0, #2]
}
   1fa3c:	bd30      	pop	{r4, r5, pc}

0001fa3e <z_shell_make_argv>:
{
   1fa3e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*argc = 0;
   1fa42:	2500      	movs	r5, #0
{
   1fa44:	4606      	mov	r6, r0
   1fa46:	460f      	mov	r7, r1
   1fa48:	4614      	mov	r4, r2
   1fa4a:	4698      	mov	r8, r3
	*argc = 0;
   1fa4c:	6005      	str	r5, [r0, #0]
		c = *cmd;
   1fa4e:	7820      	ldrb	r0, [r4, #0]
		if (c == '\0') {
   1fa50:	2800      	cmp	r0, #0
   1fa52:	f000 80b5 	beq.w	1fbc0 <z_shell_make_argv+0x182>
		if (isspace((int) c)) {
   1fa56:	f7ff ffb2 	bl	1f9be <isspace>
   1fa5a:	b118      	cbz	r0, 1fa64 <z_shell_make_argv+0x26>
			*cmd++ = '\0';
   1fa5c:	2300      	movs	r3, #0
   1fa5e:	f804 3b01 	strb.w	r3, [r4], #1
			continue;
   1fa62:	e7f4      	b.n	1fa4e <z_shell_make_argv+0x10>
		argv[(*argc)++] = cmd;
   1fa64:	6832      	ldr	r2, [r6, #0]
   1fa66:	1c53      	adds	r3, r2, #1
		if (*argc == max_argc) {
   1fa68:	4543      	cmp	r3, r8
		argv[(*argc)++] = cmd;
   1fa6a:	6033      	str	r3, [r6, #0]
   1fa6c:	f847 4022 	str.w	r4, [r7, r2, lsl #2]
		if (*argc == max_argc) {
   1fa70:	f000 80a6 	beq.w	1fbc0 <z_shell_make_argv+0x182>
	char quote = 0;
   1fa74:	4605      	mov	r5, r0
		c = *cmd;
   1fa76:	f894 9000 	ldrb.w	r9, [r4]
		if (c == '\0') {
   1fa7a:	f1b9 0f00 	cmp.w	r9, #0
   1fa7e:	d0e6      	beq.n	1fa4e <z_shell_make_argv+0x10>
		if (!quote) {
   1fa80:	2d00      	cmp	r5, #0
   1fa82:	f040 8089 	bne.w	1fb98 <z_shell_make_argv+0x15a>
			switch (c) {
   1fa86:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
   1fa8a:	d006      	beq.n	1fa9a <z_shell_make_argv+0x5c>
   1fa8c:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
   1fa90:	f000 808a 	beq.w	1fba8 <z_shell_make_argv+0x16a>
   1fa94:	f1b9 0f22 	cmp.w	r9, #34	; 0x22
   1fa98:	d176      	bne.n	1fb88 <z_shell_make_argv+0x14a>
						z_shell_strlen(cmd));
   1fa9a:	4620      	mov	r0, r4
   1fa9c:	f7ff ff99 	bl	1f9d2 <z_shell_strlen>
				memmove(cmd, cmd + 1,
   1faa0:	1c61      	adds	r1, r4, #1
						z_shell_strlen(cmd));
   1faa2:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
   1faa4:	4620      	mov	r0, r4
   1faa6:	f001 f961 	bl	20d6c <memmove>
				continue;
   1faaa:	464d      	mov	r5, r9
   1faac:	e7e3      	b.n	1fa76 <z_shell_make_argv+0x38>
			memmove(cmd, cmd + 1, z_shell_strlen(cmd));
   1faae:	4620      	mov	r0, r4
   1fab0:	f7ff ff8f 	bl	1f9d2 <z_shell_strlen>
   1fab4:	1c61      	adds	r1, r4, #1
   1fab6:	4602      	mov	r2, r0
   1fab8:	4620      	mov	r0, r4
   1faba:	f001 f957 	bl	20d6c <memmove>
			quote = 0;
   1fabe:	2500      	movs	r5, #0
			continue;
   1fac0:	e7d9      	b.n	1fa76 <z_shell_make_argv+0x38>
			if (t == '0') {
   1fac2:	2930      	cmp	r1, #48	; 0x30
   1fac4:	d125      	bne.n	1fb12 <z_shell_make_argv+0xd4>
   1fac6:	2302      	movs	r3, #2
				uint8_t v = 0U;
   1fac8:	f04f 0a00 	mov.w	sl, #0
					t = *(cmd + i);
   1facc:	5ce1      	ldrb	r1, [r4, r3]
					if (t >= '0' && t <= '7') {
   1face:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1fad2:	b2d0      	uxtb	r0, r2
   1fad4:	2807      	cmp	r0, #7
   1fad6:	fa5f f983 	uxtb.w	r9, r3
   1fada:	d817      	bhi.n	1fb0c <z_shell_make_argv+0xce>
						v = (v << 3) | (t - '0');
   1fadc:	3301      	adds	r3, #1
   1fade:	ea42 0aca 	orr.w	sl, r2, sl, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
   1fae2:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
   1fae4:	fa5f fa8a 	uxtb.w	sl, sl
				for (i = 2U; i < (2 + 3); i++) {
   1fae8:	d1f0      	bne.n	1facc <z_shell_make_argv+0x8e>
   1faea:	4699      	mov	r9, r3
						z_shell_strlen(cmd) - (i - 2));
   1faec:	4620      	mov	r0, r4
   1faee:	f7ff ff70 	bl	1f9d2 <z_shell_strlen>
					memmove(cmd, cmd + (i - 1),
   1faf2:	f109 3bff 	add.w	fp, r9, #4294967295
   1faf6:	44a3      	add	fp, r4
						z_shell_strlen(cmd) - (i - 2));
   1faf8:	1c82      	adds	r2, r0, #2
					memmove(cmd, cmd + (i - 1),
   1fafa:	eba2 0209 	sub.w	r2, r2, r9
   1fafe:	4620      	mov	r0, r4
   1fb00:	4659      	mov	r1, fp
   1fb02:	f001 f933 	bl	20d6c <memmove>
					*cmd++ = v;
   1fb06:	f804 ab01 	strb.w	sl, [r4], #1
					continue;
   1fb0a:	e7b4      	b.n	1fa76 <z_shell_make_argv+0x38>
				if (i > 2) {
   1fb0c:	f1b9 0f02 	cmp.w	r9, #2
   1fb10:	d1ec      	bne.n	1faec <z_shell_make_argv+0xae>
			if (t == 'x') {
   1fb12:	2978      	cmp	r1, #120	; 0x78
   1fb14:	d13e      	bne.n	1fb94 <z_shell_make_argv+0x156>
   1fb16:	2302      	movs	r3, #2
				uint8_t v = 0U;
   1fb18:	f04f 0900 	mov.w	r9, #0
					t = *(cmd + i);
   1fb1c:	5ce2      	ldrb	r2, [r4, r3]
					if (t >= '0' && t <= '9') {
   1fb1e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1fb22:	fa5f fc81 	uxtb.w	ip, r1
   1fb26:	f1bc 0f09 	cmp.w	ip, #9
   1fb2a:	b2d8      	uxtb	r0, r3
   1fb2c:	d819      	bhi.n	1fb62 <z_shell_make_argv+0x124>
						v = (v << 4) | (t - '0');
   1fb2e:	ea41 1209 	orr.w	r2, r1, r9, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
   1fb32:	2b03      	cmp	r3, #3
						v = (v << 4) | (t - 'A' + 10);
   1fb34:	fa5f f982 	uxtb.w	r9, r2
				for (i = 2U; i < (2 + 2); i++) {
   1fb38:	d111      	bne.n	1fb5e <z_shell_make_argv+0x120>
   1fb3a:	f04f 0b04 	mov.w	fp, #4
						z_shell_strlen(cmd) - (i - 2));
   1fb3e:	4620      	mov	r0, r4
   1fb40:	f7ff ff47 	bl	1f9d2 <z_shell_strlen>
					memmove(cmd, cmd + (i - 1),
   1fb44:	f10b 3aff 	add.w	sl, fp, #4294967295
   1fb48:	44a2      	add	sl, r4
						z_shell_strlen(cmd) - (i - 2));
   1fb4a:	1c82      	adds	r2, r0, #2
					memmove(cmd, cmd + (i - 1),
   1fb4c:	eba2 020b 	sub.w	r2, r2, fp
   1fb50:	4620      	mov	r0, r4
   1fb52:	4651      	mov	r1, sl
   1fb54:	f001 f90a 	bl	20d6c <memmove>
					*cmd++ = v;
   1fb58:	f804 9b01 	strb.w	r9, [r4], #1
					continue;
   1fb5c:	e78b      	b.n	1fa76 <z_shell_make_argv+0x38>
   1fb5e:	2303      	movs	r3, #3
   1fb60:	e7dc      	b.n	1fb1c <z_shell_make_argv+0xde>
					} else if ((t >= 'a') &&
   1fb62:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   1fb66:	2905      	cmp	r1, #5
   1fb68:	d803      	bhi.n	1fb72 <z_shell_make_argv+0x134>
						v = (v << 4) | (t - 'a' + 10);
   1fb6a:	3a57      	subs	r2, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
   1fb6c:	ea42 1209 	orr.w	r2, r2, r9, lsl #4
   1fb70:	e7df      	b.n	1fb32 <z_shell_make_argv+0xf4>
					} else if ((t >= 'A') && (t <= 'F')) {
   1fb72:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   1fb76:	2905      	cmp	r1, #5
   1fb78:	d801      	bhi.n	1fb7e <z_shell_make_argv+0x140>
						v = (v << 4) | (t - 'A' + 10);
   1fb7a:	3a37      	subs	r2, #55	; 0x37
   1fb7c:	e7f6      	b.n	1fb6c <z_shell_make_argv+0x12e>
				if (i > 2) {
   1fb7e:	2802      	cmp	r0, #2
   1fb80:	d008      	beq.n	1fb94 <z_shell_make_argv+0x156>
   1fb82:	f04f 0b03 	mov.w	fp, #3
   1fb86:	e7da      	b.n	1fb3e <z_shell_make_argv+0x100>
		if (!quote && isspace((int) c)) {
   1fb88:	4648      	mov	r0, r9
   1fb8a:	f7ff ff18 	bl	1f9be <isspace>
   1fb8e:	2800      	cmp	r0, #0
   1fb90:	f47f af5d 	bne.w	1fa4e <z_shell_make_argv+0x10>
		cmd += 1;
   1fb94:	3401      	adds	r4, #1
   1fb96:	e76e      	b.n	1fa76 <z_shell_make_argv+0x38>
		if (quote == c) {
   1fb98:	45a9      	cmp	r9, r5
   1fb9a:	d088      	beq.n	1faae <z_shell_make_argv+0x70>
		if (quote && c == '\\') {
   1fb9c:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
   1fba0:	d1f8      	bne.n	1fb94 <z_shell_make_argv+0x156>
   1fba2:	7861      	ldrb	r1, [r4, #1]
			if (t == quote) {
   1fba4:	428d      	cmp	r5, r1
   1fba6:	d18c      	bne.n	1fac2 <z_shell_make_argv+0x84>
						z_shell_strlen(cmd));
   1fba8:	4620      	mov	r0, r4
   1fbaa:	f7ff ff12 	bl	1f9d2 <z_shell_strlen>
				memmove(cmd, cmd + 1,
   1fbae:	f104 0901 	add.w	r9, r4, #1
						z_shell_strlen(cmd));
   1fbb2:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
   1fbb4:	4649      	mov	r1, r9
   1fbb6:	4620      	mov	r0, r4
   1fbb8:	f001 f8d8 	bl	20d6c <memmove>
				cmd += 1;
   1fbbc:	464c      	mov	r4, r9
				continue;
   1fbbe:	e75a      	b.n	1fa76 <z_shell_make_argv+0x38>
}
   1fbc0:	4628      	mov	r0, r5
   1fbc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001fbc6 <z_shell_pattern_remove>:
{
   1fbc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fbc8:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
   1fbca:	4611      	mov	r1, r2
{
   1fbcc:	4615      	mov	r5, r2
   1fbce:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
   1fbd0:	f001 f846 	bl	20c60 <strstr>
   1fbd4:	4604      	mov	r4, r0
	uint16_t pattern_len = z_shell_strlen(pattern);
   1fbd6:	4628      	mov	r0, r5
   1fbd8:	f7ff fefb 	bl	1f9d2 <z_shell_strlen>
   1fbdc:	4605      	mov	r5, r0
	if (!pattern_addr) {
   1fbde:	b1c4      	cbz	r4, 1fc12 <z_shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
   1fbe0:	42a7      	cmp	r7, r4
   1fbe2:	d207      	bcs.n	1fbf4 <z_shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
   1fbe4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   1fbe8:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
   1fbea:	bf02      	ittt	eq
   1fbec:	3501      	addeq	r5, #1
   1fbee:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
   1fbf0:	f104 34ff 	addeq.w	r4, r4, #4294967295
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   1fbf4:	4620      	mov	r0, r4
   1fbf6:	f7ff feec 	bl	1f9d2 <z_shell_strlen>
	*buff_len -= pattern_len;
   1fbfa:	8833      	ldrh	r3, [r6, #0]
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   1fbfc:	1b42      	subs	r2, r0, r5
	*buff_len -= pattern_len;
   1fbfe:	1b5b      	subs	r3, r3, r5
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   1fc00:	3201      	adds	r2, #1
	*buff_len -= pattern_len;
   1fc02:	8033      	strh	r3, [r6, #0]
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
   1fc04:	1961      	adds	r1, r4, r5
   1fc06:	4620      	mov	r0, r4
   1fc08:	b292      	uxth	r2, r2
}
   1fc0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
   1fc0e:	f001 b8ad 	b.w	20d6c <memmove>
}
   1fc12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001fc14 <z_shell_find_cmd>:
 */
const struct shell_static_entry *z_shell_find_cmd(
					const struct shell_static_entry *parent,
					const char *cmd_str,
					struct shell_static_entry *dloc)
{
   1fc14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fc18:	4688      	mov	r8, r1
   1fc1a:	b086      	sub	sp, #24
   1fc1c:	4617      	mov	r7, r2
	 * dynamic commands at the same time (current and subcommand) they
	 * will operate on the same memory region what can cause undefined
	 * behaviour.
	 * Hence we need a separate memory for each of them.
	 */
	if (parent) {
   1fc1e:	4604      	mov	r4, r0
   1fc20:	b128      	cbz	r0, 1fc2e <z_shell_find_cmd+0x1a>
		memcpy(&parent_cpy, parent, sizeof(struct shell_static_entry));
   1fc22:	4601      	mov	r1, r0
   1fc24:	2214      	movs	r2, #20
   1fc26:	a801      	add	r0, sp, #4
   1fc28:	f001 f8b7 	bl	20d9a <memcpy>
		parent = &parent_cpy;
   1fc2c:	ac01      	add	r4, sp, #4
   1fc2e:	2600      	movs	r6, #0
	}

	while ((entry = z_shell_cmd_get(parent, idx++, dloc)) != NULL) {
   1fc30:	4631      	mov	r1, r6
   1fc32:	463a      	mov	r2, r7
   1fc34:	4620      	mov	r0, r4
   1fc36:	f7f3 f8ef 	bl	12e18 <z_shell_cmd_get>
   1fc3a:	3601      	adds	r6, #1
   1fc3c:	4605      	mov	r5, r0
   1fc3e:	b128      	cbz	r0, 1fc4c <z_shell_find_cmd+0x38>
		if (strcmp(cmd_str, entry->syntax) == 0) {
   1fc40:	6829      	ldr	r1, [r5, #0]
   1fc42:	4640      	mov	r0, r8
   1fc44:	f001 f867 	bl	20d16 <strcmp>
   1fc48:	2800      	cmp	r0, #0
   1fc4a:	d1f1      	bne.n	1fc30 <z_shell_find_cmd+0x1c>
			return entry;
		}
	}

	return NULL;
}
   1fc4c:	4628      	mov	r0, r5
   1fc4e:	b006      	add	sp, #24
   1fc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fc54 <z_shell_get_last_command>:
					size_t argc,
					const char *argv[],
					size_t *match_arg,
					struct shell_static_entry *dloc,
					bool only_static)
{
   1fc54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fc58:	461c      	mov	r4, r3
   1fc5a:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1fc5e:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	const struct shell_static_entry *prev_entry = NULL;

	*match_arg = Z_SHELL_CMD_ROOT_LVL;
   1fc62:	2300      	movs	r3, #0
{
   1fc64:	460f      	mov	r7, r1
   1fc66:	4616      	mov	r6, r2
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
   1fc68:	6023      	str	r3, [r4, #0]

	while (*match_arg < argc) {
   1fc6a:	6823      	ldr	r3, [r4, #0]
   1fc6c:	42bb      	cmp	r3, r7

		if (IS_ENABLED(CONFIG_SHELL_WILDCARD)) {
			/* ignore wildcard argument */
			if (z_shell_has_wildcard(argv[*match_arg])) {
				(*match_arg)++;
				continue;
   1fc6e:	4605      	mov	r5, r0
	while (*match_arg < argc) {
   1fc70:	d21b      	bcs.n	1fcaa <z_shell_get_last_command+0x56>
			if (z_shell_has_wildcard(argv[*match_arg])) {
   1fc72:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
   1fc76:	f000 fcd1 	bl	2061c <z_shell_has_wildcard>
   1fc7a:	6823      	ldr	r3, [r4, #0]
   1fc7c:	4682      	mov	sl, r0
   1fc7e:	b118      	cbz	r0, 1fc88 <z_shell_get_last_command+0x34>
				(*match_arg)++;
   1fc80:	3301      	adds	r3, #1
   1fc82:	6023      	str	r3, [r4, #0]
				continue;
   1fc84:	4628      	mov	r0, r5
   1fc86:	e7f0      	b.n	1fc6a <z_shell_get_last_command+0x16>
			}
		}

		prev_entry = entry;
		entry = z_shell_find_cmd(entry, argv[*match_arg], dloc);
   1fc88:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   1fc8c:	4642      	mov	r2, r8
   1fc8e:	4628      	mov	r0, r5
   1fc90:	f7ff ffc0 	bl	1fc14 <z_shell_find_cmd>
		if (entry) {
   1fc94:	b148      	cbz	r0, 1fcaa <z_shell_get_last_command+0x56>
			(*match_arg)++;
   1fc96:	6823      	ldr	r3, [r4, #0]
   1fc98:	1c5a      	adds	r2, r3, #1
   1fc9a:	6022      	str	r2, [r4, #0]
		} else {
			entry = prev_entry;
			break;
		}

		if (only_static && (entry == dloc)) {
   1fc9c:	f1b9 0f00 	cmp.w	r9, #0
   1fca0:	d0e3      	beq.n	1fc6a <z_shell_get_last_command+0x16>
   1fca2:	4580      	cmp	r8, r0
   1fca4:	d1e1      	bne.n	1fc6a <z_shell_get_last_command+0x16>
			(*match_arg)--;
   1fca6:	6023      	str	r3, [r4, #0]
			return NULL;
   1fca8:	4655      	mov	r5, sl
		}
	}

	return entry;
}
   1fcaa:	4628      	mov	r0, r5
   1fcac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001fcb0 <z_shell_spaces_trim>:




void z_shell_spaces_trim(char *str)
{
   1fcb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fcb4:	4606      	mov	r6, r0
	uint16_t len = z_shell_strlen(str);
   1fcb6:	f7ff fe8c 	bl	1f9d2 <z_shell_strlen>
   1fcba:	4605      	mov	r5, r0
	uint16_t shift = 0U;

	if (!str) {
   1fcbc:	bb56      	cbnz	r6, 1fd14 <z_shell_spaces_trim+0x64>

				break;
			}
		}
	}
}
   1fcbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (shift > 0) {
   1fcc2:	b14c      	cbz	r4, 1fcd8 <z_shell_spaces_trim+0x28>
						len - j + 1);
   1fcc4:	1c6a      	adds	r2, r5, #1
   1fcc6:	b29b      	uxth	r3, r3
					memmove(&str[i + 1],
   1fcc8:	3701      	adds	r7, #1
   1fcca:	1ad2      	subs	r2, r2, r3
   1fccc:	19f0      	adds	r0, r6, r7
   1fcce:	f001 f84d 	bl	20d6c <memmove>
					len -= shift;
   1fcd2:	1b2d      	subs	r5, r5, r4
   1fcd4:	b2ad      	uxth	r5, r5
					shift = 0U;
   1fcd6:	464c      	mov	r4, r9
	for (uint16_t i = 0; i < len - 1; i++) {
   1fcd8:	f108 0801 	add.w	r8, r8, #1
   1fcdc:	fa1f f388 	uxth.w	r3, r8
   1fce0:	1e6a      	subs	r2, r5, #1
   1fce2:	4293      	cmp	r3, r2
   1fce4:	461f      	mov	r7, r3
   1fce6:	daea      	bge.n	1fcbe <z_shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
   1fce8:	5df0      	ldrb	r0, [r6, r7]
   1fcea:	f7ff fe68 	bl	1f9be <isspace>
   1fcee:	2800      	cmp	r0, #0
   1fcf0:	d0f2      	beq.n	1fcd8 <z_shell_spaces_trim+0x28>
			for (uint16_t j = i + 1; j < len; j++) {
   1fcf2:	3301      	adds	r3, #1
   1fcf4:	b29b      	uxth	r3, r3
   1fcf6:	b29a      	uxth	r2, r3
   1fcf8:	4295      	cmp	r5, r2
   1fcfa:	d9ed      	bls.n	1fcd8 <z_shell_spaces_trim+0x28>
				if (isspace((int)str[j])) {
   1fcfc:	5cf0      	ldrb	r0, [r6, r3]
   1fcfe:	18f1      	adds	r1, r6, r3
   1fd00:	f7ff fe5d 	bl	1f9be <isspace>
   1fd04:	1c5a      	adds	r2, r3, #1
   1fd06:	4681      	mov	r9, r0
   1fd08:	2800      	cmp	r0, #0
   1fd0a:	d0da      	beq.n	1fcc2 <z_shell_spaces_trim+0x12>
					shift++;
   1fd0c:	3401      	adds	r4, #1
   1fd0e:	b2a4      	uxth	r4, r4
   1fd10:	4613      	mov	r3, r2
   1fd12:	e7f0      	b.n	1fcf6 <z_shell_spaces_trim+0x46>
   1fd14:	f04f 0800 	mov.w	r8, #0
	uint16_t shift = 0U;
   1fd18:	4644      	mov	r4, r8
   1fd1a:	e7df      	b.n	1fcdc <z_shell_spaces_trim+0x2c>

0001fd1c <z_shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void z_shell_cmd_trim(const struct shell *shell)
{
   1fd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
   1fd1e:	6884      	ldr	r4, [r0, #8]
	if (buff[0] == '\0') {
   1fd20:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
{
   1fd24:	4605      	mov	r5, r0
	if (buff[0] == '\0') {
   1fd26:	b953      	cbnz	r3, 1fd3e <z_shell_cmd_trim+0x22>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
   1fd28:	68ab      	ldr	r3, [r5, #8]
   1fd2a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   1fd2c:	87da      	strh	r2, [r3, #62]	; 0x3e
}
   1fd2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*buff_len -= 1U;
   1fd30:	3a01      	subs	r2, #1
   1fd32:	b292      	uxth	r2, r2
   1fd34:	87a2      	strh	r2, [r4, #60]	; 0x3c
		if (*buff_len == 0U) {
   1fd36:	b922      	cbnz	r2, 1fd42 <z_shell_cmd_trim+0x26>
			buff[0] = '\0';
   1fd38:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			return;
   1fd3c:	e7f4      	b.n	1fd28 <z_shell_cmd_trim+0xc>
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
   1fd3e:	f104 0642 	add.w	r6, r4, #66	; 0x42
	while (isspace((int) buff[*buff_len - 1U])) {
   1fd42:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
   1fd44:	18b3      	adds	r3, r6, r2
   1fd46:	f813 0c01 	ldrb.w	r0, [r3, #-1]
   1fd4a:	f7ff fe38 	bl	1f9be <isspace>
   1fd4e:	4603      	mov	r3, r0
   1fd50:	2800      	cmp	r0, #0
   1fd52:	d1ed      	bne.n	1fd30 <z_shell_cmd_trim+0x14>
	buff[*buff_len] = '\0';
   1fd54:	54b0      	strb	r0, [r6, r2]
	while (isspace((int) buff[i++])) {
   1fd56:	b29f      	uxth	r7, r3
   1fd58:	fa16 f183 	uxtah	r1, r6, r3
   1fd5c:	5df0      	ldrb	r0, [r6, r7]
   1fd5e:	f7ff fe2e 	bl	1f9be <isspace>
   1fd62:	3301      	adds	r3, #1
   1fd64:	2800      	cmp	r0, #0
   1fd66:	d1f6      	bne.n	1fd56 <z_shell_cmd_trim+0x3a>
	if (--i > 0) {
   1fd68:	2f00      	cmp	r7, #0
   1fd6a:	d0dd      	beq.n	1fd28 <z_shell_cmd_trim+0xc>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
   1fd6c:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   1fd6e:	3301      	adds	r3, #1
   1fd70:	1bda      	subs	r2, r3, r7
   1fd72:	4630      	mov	r0, r6
   1fd74:	f000 fffa 	bl	20d6c <memmove>
		*buff_len = *buff_len - i;
   1fd78:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   1fd7a:	1bdb      	subs	r3, r3, r7
   1fd7c:	87a3      	strh	r3, [r4, #60]	; 0x3c
   1fd7e:	e7d3      	b.n	1fd28 <z_shell_cmd_trim+0xc>

0001fd80 <z_shell_raw_fprintf>:
{
   1fd80:	b40e      	push	{r1, r2, r3}
   1fd82:	b503      	push	{r0, r1, lr}
   1fd84:	aa03      	add	r2, sp, #12
   1fd86:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   1fd8a:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   1fd8c:	f7f3 f830 	bl	12df0 <z_shell_fprintf_fmt>
}
   1fd90:	b002      	add	sp, #8
   1fd92:	f85d eb04 	ldr.w	lr, [sp], #4
   1fd96:	b003      	add	sp, #12
   1fd98:	4770      	bx	lr

0001fd9a <full_line_cmd.isra.0>:
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
   1fd9a:	6802      	ldr	r2, [r0, #0]
static inline bool full_line_cmd(const struct shell *shell)
   1fd9c:	b538      	push	{r3, r4, r5, lr}
   1fd9e:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
   1fda0:	6810      	ldr	r0, [r2, #0]
   1fda2:	8f95      	ldrh	r5, [r2, #60]	; 0x3c
	return str == NULL ? 0U : (uint16_t)strlen(str);
   1fda4:	b110      	cbz	r0, 1fdac <full_line_cmd.isra.0+0x12>
   1fda6:	f000 ffa6 	bl	20cf6 <strlen>
   1fdaa:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   1fdac:	6822      	ldr	r2, [r4, #0]
   1fdae:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
   1fdb0:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   1fdb2:	fbb3 f0f2 	udiv	r0, r3, r2
   1fdb6:	fb02 3010 	mls	r0, r2, r0, r3
}
   1fdba:	fab0 f080 	clz	r0, r0
   1fdbe:	0940      	lsrs	r0, r0, #5
   1fdc0:	bd38      	pop	{r3, r4, r5, pc}

0001fdc2 <z_shell_cursor_in_empty_line>:
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
   1fdc2:	6882      	ldr	r2, [r0, #8]
{
   1fdc4:	b538      	push	{r3, r4, r5, lr}
   1fdc6:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
   1fdc8:	6810      	ldr	r0, [r2, #0]
   1fdca:	8fd5      	ldrh	r5, [r2, #62]	; 0x3e
   1fdcc:	b110      	cbz	r0, 1fdd4 <z_shell_cursor_in_empty_line+0x12>
   1fdce:	f000 ff92 	bl	20cf6 <strlen>
   1fdd2:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   1fdd4:	68a2      	ldr	r2, [r4, #8]
   1fdd6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
   1fdd8:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   1fdda:	fbb3 f0f2 	udiv	r0, r3, r2
   1fdde:	fb02 3010 	mls	r0, r2, r0, r3
}
   1fde2:	fab0 f080 	clz	r0, r0
   1fde6:	0940      	lsrs	r0, r0, #5
   1fde8:	bd38      	pop	{r3, r4, r5, pc}

0001fdea <z_shell_op_cursor_move>:
{
   1fdea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fdec:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   1fdee:	6880      	ldr	r0, [r0, #8]
{
   1fdf0:	460d      	mov	r5, r1
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   1fdf2:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   1fdf4:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   1fdf6:	3020      	adds	r0, #32
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   1fdf8:	440d      	add	r5, r1
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   1fdfa:	f7ff fe0a 	bl	1fa12 <z_shell_multiline_data_calc>
						&shell->ctx->vt100_ctx.cons,
   1fdfe:	68a0      	ldr	r0, [r4, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   1fe00:	b2ad      	uxth	r5, r5
	row_span = z_row_span_with_buffer_offsets_get(
   1fe02:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   1fe04:	462a      	mov	r2, r5
   1fe06:	3020      	adds	r0, #32
   1fe08:	f7ff fdf8 	bl	1f9fc <z_row_span_with_buffer_offsets_get>
   1fe0c:	4607      	mov	r7, r0
						&shell->ctx->vt100_ctx.cons,
   1fe0e:	68a0      	ldr	r0, [r4, #8]
	col_span = z_column_span_with_buffer_offsets_get(
   1fe10:	462a      	mov	r2, r5
   1fe12:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   1fe14:	3020      	adds	r0, #32
   1fe16:	f7ff fde2 	bl	1f9de <z_column_span_with_buffer_offsets_get>
	z_shell_op_cursor_vert_move(shell, -row_span);
   1fe1a:	4279      	negs	r1, r7
	col_span = z_column_span_with_buffer_offsets_get(
   1fe1c:	4606      	mov	r6, r0
	z_shell_op_cursor_vert_move(shell, -row_span);
   1fe1e:	4620      	mov	r0, r4
   1fe20:	f7f3 f82c 	bl	12e7c <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, col_span);
   1fe24:	4631      	mov	r1, r6
   1fe26:	4620      	mov	r0, r4
   1fe28:	f7f3 f83e 	bl	12ea8 <z_shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
   1fe2c:	68a3      	ldr	r3, [r4, #8]
   1fe2e:	87dd      	strh	r5, [r3, #62]	; 0x3e
}
   1fe30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001fe32 <z_shell_op_cursor_word_move>:
{
   1fe32:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (val < 0) {
   1fe36:	1e0c      	subs	r4, r1, #0
{
   1fe38:	4606      	mov	r6, r0
	if (val < 0) {
   1fe3a:	da32      	bge.n	1fea2 <z_shell_op_cursor_word_move+0x70>
		val = -val;
   1fe3c:	4264      	negs	r4, r4
   1fe3e:	b224      	sxth	r4, r4
		sign = -1;
   1fe40:	f04f 35ff 	mov.w	r5, #4294967295
   1fe44:	b2af      	uxth	r7, r5
   1fe46:	e022      	b.n	1fe8e <z_shell_op_cursor_word_move+0x5c>
		shift = shift_calc(shell->ctx->cmd_buff,
   1fe48:	68b3      	ldr	r3, [r6, #8]
   1fe4a:	f8b3 e03e 	ldrh.w	lr, [r3, #62]	; 0x3e
   1fe4e:	f8b3 903c 	ldrh.w	r9, [r3, #60]	; 0x3c
   1fe52:	f103 0842 	add.w	r8, r3, #66	; 0x42
	bool found = false;
   1fe56:	2000      	movs	r0, #0
		shift = shift_calc(shell->ctx->cmd_buff,
   1fe58:	4673      	mov	r3, lr
		idx = pos + ret * sign;
   1fe5a:	eba3 010e 	sub.w	r1, r3, lr
   1fe5e:	b209      	sxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
   1fe60:	b90b      	cbnz	r3, 1fe66 <z_shell_op_cursor_word_move+0x34>
   1fe62:	1c6a      	adds	r2, r5, #1
   1fe64:	d010      	beq.n	1fe88 <z_shell_op_cursor_word_move+0x56>
   1fe66:	4599      	cmp	r9, r3
   1fe68:	d101      	bne.n	1fe6e <z_shell_op_cursor_word_move+0x3c>
		    ((idx == len) && (sign > 0))) {
   1fe6a:	2d01      	cmp	r5, #1
   1fe6c:	d00c      	beq.n	1fe88 <z_shell_op_cursor_word_move+0x56>
		if (isalnum((int)str[idx]) != 0) {
   1fe6e:	f818 2003 	ldrb.w	r2, [r8, r3]
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1fe72:	f042 0c20 	orr.w	ip, r2, #32
   1fe76:	f1ac 0c61 	sub.w	ip, ip, #97	; 0x61
				(int)'z') ? (chr - 32) : (chr));
}

static inline int isalnum(int chr)
{
	return (int)(isalpha(chr) || isdigit(chr));
   1fe7a:	f1bc 0f19 	cmp.w	ip, #25
   1fe7e:	d90c      	bls.n	1fe9a <z_shell_op_cursor_word_move+0x68>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1fe80:	3a30      	subs	r2, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
   1fe82:	2a09      	cmp	r2, #9
   1fe84:	d909      	bls.n	1fe9a <z_shell_op_cursor_word_move+0x68>
			if (found) {
   1fe86:	b148      	cbz	r0, 1fe9c <z_shell_op_cursor_word_move+0x6a>
		z_shell_op_cursor_move(shell, sign * shift);
   1fe88:	4630      	mov	r0, r6
   1fe8a:	f7ff ffae 	bl	1fdea <z_shell_op_cursor_move>
	while (val--) {
   1fe8e:	3c01      	subs	r4, #1
   1fe90:	b224      	sxth	r4, r4
   1fe92:	1c63      	adds	r3, r4, #1
   1fe94:	d1d8      	bne.n	1fe48 <z_shell_op_cursor_word_move+0x16>
}
   1fe96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
   1fe9a:	2001      	movs	r0, #1
	while (1) {
   1fe9c:	443b      	add	r3, r7
   1fe9e:	b29b      	uxth	r3, r3
		idx = pos + ret * sign;
   1fea0:	e7db      	b.n	1fe5a <z_shell_op_cursor_word_move+0x28>
		sign = 1;
   1fea2:	2501      	movs	r5, #1
   1fea4:	e7ce      	b.n	1fe44 <z_shell_op_cursor_word_move+0x12>

0001fea6 <z_shell_op_cursor_home_move>:
	z_shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
   1fea6:	6883      	ldr	r3, [r0, #8]
   1fea8:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
   1feaa:	4249      	negs	r1, r1
   1feac:	b209      	sxth	r1, r1
   1feae:	f7ff bf9c 	b.w	1fdea <z_shell_op_cursor_move>

0001feb2 <z_shell_op_cursor_end_move>:
	z_shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
   1feb2:	6883      	ldr	r3, [r0, #8]
   1feb4:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
   1feb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   1feb8:	1ac9      	subs	r1, r1, r3
   1feba:	b209      	sxth	r1, r1
   1febc:	f7ff bf95 	b.w	1fdea <z_shell_op_cursor_move>

0001fec0 <z_shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
   1fec0:	6883      	ldr	r3, [r0, #8]
   1fec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   1fec4:	b11b      	cbz	r3, 1fece <z_shell_op_left_arrow+0xe>
		z_shell_op_cursor_move(shell, -1);
   1fec6:	f04f 31ff 	mov.w	r1, #4294967295
   1feca:	f7ff bf8e 	b.w	1fdea <z_shell_op_cursor_move>
}
   1fece:	4770      	bx	lr

0001fed0 <z_shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
   1fed0:	6883      	ldr	r3, [r0, #8]
   1fed2:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   1fed4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   1fed6:	429a      	cmp	r2, r3
   1fed8:	d202      	bcs.n	1fee0 <z_shell_op_right_arrow+0x10>
		z_shell_op_cursor_move(shell, 1);
   1feda:	2101      	movs	r1, #1
   1fedc:	f7ff bf85 	b.w	1fdea <z_shell_op_cursor_move>
}
   1fee0:	4770      	bx	lr

0001fee2 <z_shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
   1fee2:	6883      	ldr	r3, [r0, #8]
   1fee4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   1fee6:	879a      	strh	r2, [r3, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
   1fee8:	4413      	add	r3, r2
   1feea:	2200      	movs	r2, #0
   1feec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	z_clear_eos(shell);
   1fef0:	f7f2 bfb8 	b.w	12e64 <z_clear_eos>

0001fef4 <z_shell_cmd_line_erase>:
{
   1fef4:	b510      	push	{r4, lr}
   1fef6:	4604      	mov	r4, r0
	z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   1fef8:	6880      	ldr	r0, [r0, #8]
   1fefa:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   1fefc:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   1fefe:	3020      	adds	r0, #32
   1ff00:	f7ff fd87 	bl	1fa12 <z_shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
   1ff04:	68a3      	ldr	r3, [r4, #8]
   1ff06:	8c19      	ldrh	r1, [r3, #32]
	z_shell_op_cursor_horiz_move(shell,
   1ff08:	4620      	mov	r0, r4
   1ff0a:	f1c1 0101 	rsb	r1, r1, #1
   1ff0e:	f7f2 ffcb 	bl	12ea8 <z_shell_op_cursor_horiz_move>
	z_shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
   1ff12:	68a3      	ldr	r3, [r4, #8]
   1ff14:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   1ff16:	4620      	mov	r0, r4
   1ff18:	3901      	subs	r1, #1
   1ff1a:	f7f2 ffaf 	bl	12e7c <z_shell_op_cursor_vert_move>
	z_clear_eos(shell);
   1ff1e:	4620      	mov	r0, r4
}
   1ff20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_clear_eos(shell);
   1ff24:	f7f2 bf9e 	b.w	12e64 <z_clear_eos>

0001ff28 <z_shell_write>:
{
   1ff28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ff2c:	4605      	mov	r5, r0
   1ff2e:	b086      	sub	sp, #24
   1ff30:	460f      	mov	r7, r1
   1ff32:	4614      	mov	r4, r2
	size_t offset = 0;
   1ff34:	2600      	movs	r6, #0
	while (length) {
   1ff36:	b914      	cbnz	r4, 1ff3e <z_shell_write+0x16>
}
   1ff38:	b006      	add	sp, #24
   1ff3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int err = shell->iface->api->write(shell->iface,
   1ff3e:	6868      	ldr	r0, [r5, #4]
   1ff40:	6803      	ldr	r3, [r0, #0]
   1ff42:	4622      	mov	r2, r4
   1ff44:	f8d3 800c 	ldr.w	r8, [r3, #12]
   1ff48:	19b9      	adds	r1, r7, r6
   1ff4a:	466b      	mov	r3, sp
   1ff4c:	47c0      	blx	r8
		offset += tmp_cnt;
   1ff4e:	9a00      	ldr	r2, [sp, #0]
   1ff50:	4416      	add	r6, r2
		length -= tmp_cnt;
   1ff52:	1aa4      	subs	r4, r4, r2
		if (tmp_cnt == 0 &&
   1ff54:	2a00      	cmp	r2, #0
   1ff56:	d1ee      	bne.n	1ff36 <z_shell_write+0xe>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
   1ff58:	68ab      	ldr	r3, [r5, #8]
   1ff5a:	7919      	ldrb	r1, [r3, #4]
		if (tmp_cnt == 0 &&
   1ff5c:	2903      	cmp	r1, #3
   1ff5e:	d0ea      	beq.n	1ff36 <z_shell_write+0xe>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
   1ff60:	2902      	cmp	r1, #2
   1ff62:	d813      	bhi.n	1ff8c <z_shell_write+0x64>
		k_poll_event_init(&event,
   1ff64:	f503 7326 	add.w	r3, r3, #664	; 0x298
   1ff68:	2101      	movs	r1, #1
   1ff6a:	a801      	add	r0, sp, #4
   1ff6c:	f003 f978 	bl	23260 <k_poll_event_init>
	return z_impl_k_poll(events, num_events, timeout);
   1ff70:	f04f 32ff 	mov.w	r2, #4294967295
   1ff74:	f04f 33ff 	mov.w	r3, #4294967295
   1ff78:	2101      	movs	r1, #1
   1ff7a:	a801      	add	r0, sp, #4
   1ff7c:	f7fe f9c0 	bl	1e300 <z_impl_k_poll>
		k_poll_signal_reset(&shell->ctx->signals[SHELL_SIGNAL_TXDONE]);
   1ff80:	68a8      	ldr	r0, [r5, #8]
   1ff82:	f500 7026 	add.w	r0, r0, #664	; 0x298
	z_impl_k_poll_signal_reset(sig);
   1ff86:	f003 f98d 	bl	232a4 <z_impl_k_poll_signal_reset>
   1ff8a:	e7d4      	b.n	1ff36 <z_shell_write+0xe>
	return sh->ctx->ctx.flags.tx_rdy == 1;
   1ff8c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
		while (!z_flag_tx_rdy_get(shell)) {
   1ff90:	0792      	lsls	r2, r2, #30
   1ff92:	d5fb      	bpl.n	1ff8c <z_shell_write+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ff94:	f3bf 8f5b 	dmb	ish
   1ff98:	f503 7319 	add.w	r3, r3, #612	; 0x264
   1ff9c:	e853 2f00 	ldrex	r2, [r3]
   1ffa0:	f022 0202 	bic.w	r2, r2, #2
   1ffa4:	e843 2100 	strex	r1, r2, [r3]
   1ffa8:	2900      	cmp	r1, #0
   1ffaa:	d1f7      	bne.n	1ff9c <z_shell_write+0x74>
   1ffac:	f3bf 8f5b 	dmb	ish
	return ret;
   1ffb0:	e7c1      	b.n	1ff36 <z_shell_write+0xe>

0001ffb2 <z_shell_print_stream>:
	z_shell_write((const struct shell *) user_ctx, data, len);
   1ffb2:	f7ff bfb9 	b.w	1ff28 <z_shell_write>

0001ffb6 <z_shell_vfprintf>:

void z_shell_vfprintf(const struct shell *shell, enum shell_vt100_color color,
		      const char *fmt, va_list args)
{
   1ffb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ffb8:	460f      	mov	r7, r1
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
	    z_flag_use_colors_get(shell)	  &&
   1ffba:	6881      	ldr	r1, [r0, #8]
{
   1ffbc:	461e      	mov	r6, r3
	return sh->ctx->cfg.flags.use_colors == 1;
   1ffbe:	f8d1 3260 	ldr.w	r3, [r1, #608]	; 0x260
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
   1ffc2:	06db      	lsls	r3, r3, #27
{
   1ffc4:	4604      	mov	r4, r0
   1ffc6:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
   1ffc8:	d517      	bpl.n	1fffa <z_shell_vfprintf+0x44>
	    z_flag_use_colors_get(shell)	  &&
   1ffca:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
   1ffce:	42bb      	cmp	r3, r7
   1ffd0:	d013      	beq.n	1fffa <z_shell_vfprintf+0x44>
			     enum shell_vt100_color color);

static inline void z_shell_vt100_colors_store(const struct shell *sh,
					      struct shell_vt100_colors *color)
{
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
   1ffd2:	2202      	movs	r2, #2
   1ffd4:	312e      	adds	r1, #46	; 0x2e
   1ffd6:	a801      	add	r0, sp, #4
   1ffd8:	f000 fedf 	bl	20d9a <memcpy>
	    (color != shell->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		z_shell_vt100_colors_store(shell, &col);
		z_shell_vt100_color_set(shell, color);
   1ffdc:	4639      	mov	r1, r7
   1ffde:	4620      	mov	r0, r4
   1ffe0:	f7f2 ffbe 	bl	12f60 <z_shell_vt100_color_set>

		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   1ffe4:	6960      	ldr	r0, [r4, #20]
   1ffe6:	4629      	mov	r1, r5
   1ffe8:	4632      	mov	r2, r6
   1ffea:	f7f2 ff01 	bl	12df0 <z_shell_fprintf_fmt>

		z_shell_vt100_colors_restore(shell, &col);
   1ffee:	a901      	add	r1, sp, #4
   1fff0:	4620      	mov	r0, r4
   1fff2:	f7f2 ffd5 	bl	12fa0 <z_shell_vt100_colors_restore>
	} else {
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
	}
}
   1fff6:	b003      	add	sp, #12
   1fff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   1fffa:	6960      	ldr	r0, [r4, #20]
   1fffc:	4632      	mov	r2, r6
   1fffe:	4629      	mov	r1, r5
   20000:	f7f2 fef6 	bl	12df0 <z_shell_fprintf_fmt>
}
   20004:	e7f7      	b.n	1fff6 <z_shell_vfprintf+0x40>

00020006 <z_shell_fprintf>:

void z_shell_fprintf(const struct shell *sh,
		     enum shell_vt100_color color,
		     const char *fmt, ...)
{
   20006:	b40c      	push	{r2, r3}
   20008:	b507      	push	{r0, r1, r2, lr}
   2000a:	ab04      	add	r3, sp, #16
   2000c:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT(z_flag_panic_mode_get(sh) || !k_is_in_isr(),
		 "Thread context required.");

	va_list args;

	va_start(args, fmt);
   20010:	9301      	str	r3, [sp, #4]
	z_shell_vfprintf(sh, color, fmt, args);
   20012:	f7ff ffd0 	bl	1ffb6 <z_shell_vfprintf>
	va_end(args);
}
   20016:	b003      	add	sp, #12
   20018:	f85d eb04 	ldr.w	lr, [sp], #4
   2001c:	b002      	add	sp, #8
   2001e:	4770      	bx	lr

00020020 <data_insert>:
{
   20020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   20024:	6886      	ldr	r6, [r0, #8]
   20026:	8fb5      	ldrh	r5, [r6, #60]	; 0x3c
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   20028:	18ab      	adds	r3, r5, r2
   2002a:	2bff      	cmp	r3, #255	; 0xff
{
   2002c:	4607      	mov	r7, r0
   2002e:	4688      	mov	r8, r1
   20030:	4614      	mov	r4, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   20032:	dc1f      	bgt.n	20074 <data_insert+0x54>
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   20034:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
   20036:	1aed      	subs	r5, r5, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
   20038:	3342      	adds	r3, #66	; 0x42
   2003a:	441e      	add	r6, r3
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   2003c:	b2ad      	uxth	r5, r5
	memmove(curr_pos + len, curr_pos, after);
   2003e:	462a      	mov	r2, r5
   20040:	4631      	mov	r1, r6
   20042:	1930      	adds	r0, r6, r4
   20044:	f000 fe92 	bl	20d6c <memmove>
	memcpy(curr_pos, data, len);
   20048:	4622      	mov	r2, r4
   2004a:	4641      	mov	r1, r8
   2004c:	4630      	mov	r0, r6
   2004e:	f000 fea4 	bl	20d9a <memcpy>
	shell->ctx->cmd_buff_len += len;
   20052:	68ba      	ldr	r2, [r7, #8]
   20054:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
   20056:	4423      	add	r3, r4
   20058:	b29b      	uxth	r3, r3
   2005a:	8793      	strh	r3, [r2, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   2005c:	4413      	add	r3, r2
   2005e:	2200      	movs	r2, #0
   20060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	if (!z_flag_echo_get(shell)) {
   20064:	68bb      	ldr	r3, [r7, #8]
	return sh->ctx->cfg.flags.echo == 1;
   20066:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
   2006a:	0789      	lsls	r1, r1, #30
   2006c:	d404      	bmi.n	20078 <data_insert+0x58>
		shell->ctx->cmd_buff_pos += len;
   2006e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   20070:	4414      	add	r4, r2
   20072:	87dc      	strh	r4, [r3, #62]	; 0x3e
}
   20074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
   20078:	4629      	mov	r1, r5
   2007a:	4638      	mov	r0, r7
}
   2007c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
   20080:	f7f3 b808 	b.w	13094 <reprint_from_cursor>

00020084 <z_shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
   20084:	f7ff bfcc 	b.w	20020 <data_insert>

00020088 <z_shell_op_char_delete>:
{
   20088:	b538      	push	{r3, r4, r5, lr}
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   2008a:	6883      	ldr	r3, [r0, #8]
{
   2008c:	4605      	mov	r5, r0
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   2008e:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   20090:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
   20092:	1a24      	subs	r4, r4, r0
   20094:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
   20096:	b18c      	cbz	r4, 200bc <z_shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
   20098:	3042      	adds	r0, #66	; 0x42
   2009a:	4418      	add	r0, r3
	memmove(str, str + 1, diff);
   2009c:	4622      	mov	r2, r4
   2009e:	1c41      	adds	r1, r0, #1
   200a0:	f000 fe64 	bl	20d6c <memmove>
	--shell->ctx->cmd_buff_len;
   200a4:	68aa      	ldr	r2, [r5, #8]
   200a6:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
   200a8:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
   200aa:	3b01      	subs	r3, #1
   200ac:	8793      	strh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
   200ae:	4628      	mov	r0, r5
   200b0:	2201      	movs	r2, #1
}
   200b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
   200b6:	b289      	uxth	r1, r1
   200b8:	f7f2 bfec 	b.w	13094 <reprint_from_cursor>
}
   200bc:	bd38      	pop	{r3, r4, r5, pc}

000200be <z_shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
   200be:	6883      	ldr	r3, [r0, #8]
   200c0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
   200c2:	b510      	push	{r4, lr}
   200c4:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
   200c6:	b152      	cbz	r2, 200de <z_shell_op_char_backspace+0x20>
   200c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   200ca:	b143      	cbz	r3, 200de <z_shell_op_char_backspace+0x20>
	z_shell_op_cursor_move(shell, -1);
   200cc:	f04f 31ff 	mov.w	r1, #4294967295
   200d0:	f7ff fe8b 	bl	1fdea <z_shell_op_cursor_move>
	z_shell_op_char_delete(shell);
   200d4:	4620      	mov	r0, r4
}
   200d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_op_char_delete(shell);
   200da:	f7ff bfd5 	b.w	20088 <z_shell_op_char_delete>
}
   200de:	bd10      	pop	{r4, pc}

000200e0 <msg_from_fifo.isra.0>:
{
	z_shell_print_stream(ctx, data, length);
	return length;
}

static struct log_msg *msg_from_fifo(const struct shell_log_backend *backend)
   200e0:	b507      	push	{r0, r1, r2, lr}
	return z_impl_k_msgq_get(msgq, data, timeout);
   200e2:	2200      	movs	r2, #0
   200e4:	2300      	movs	r3, #0
   200e6:	4669      	mov	r1, sp
   200e8:	f7fc fff6 	bl	1d0d8 <z_impl_k_msgq_get>
	struct shell_log_backend_msg msg;
	int err;

	err = k_msgq_get(backend->msgq, &msg, K_NO_WAIT);

	return (err == 0) ? msg.msg : NULL;
   200ec:	b918      	cbnz	r0, 200f6 <msg_from_fifo.isra.0+0x16>
   200ee:	9800      	ldr	r0, [sp, #0]
}
   200f0:	b003      	add	sp, #12
   200f2:	f85d fb04 	ldr.w	pc, [sp], #4
	return (err == 0) ? msg.msg : NULL;
   200f6:	2000      	movs	r0, #0
   200f8:	e7fa      	b.n	200f0 <msg_from_fifo.isra.0+0x10>

000200fa <dropped>:
	}
}

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   200fa:	6843      	ldr	r3, [r0, #4]
   200fc:	681b      	ldr	r3, [r3, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   200fe:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
   20102:	f3bf 8f5b 	dmb	ish
   20106:	e853 0f00 	ldrex	r0, [r3]
   2010a:	4408      	add	r0, r1
   2010c:	e843 0c00 	strex	ip, r0, [r3]
   20110:	f1bc 0f00 	cmp.w	ip, #0
   20114:	d1f7      	bne.n	20106 <dropped+0xc>
   20116:	f3bf 8f5b 	dmb	ish
   2011a:	68d3      	ldr	r3, [r2, #12]
   2011c:	f3bf 8f5b 	dmb	ish
   20120:	e853 2f00 	ldrex	r2, [r3]
   20124:	440a      	add	r2, r1
   20126:	e843 2000 	strex	r0, r2, [r3]
   2012a:	2800      	cmp	r0, #0
   2012c:	d1f8      	bne.n	20120 <dropped+0x26>
   2012e:	f3bf 8f5b 	dmb	ish
	const struct shell_log_backend *log_backend = shell->log_backend;

	atomic_add(&shell->stats->log_lost_cnt, cnt);
	atomic_add(&log_backend->control_block->dropped_cnt, cnt);
}
   20132:	4770      	bx	lr

00020134 <put>:
{
   20134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   20138:	6843      	ldr	r3, [r0, #4]
   2013a:	681c      	ldr	r4, [r3, #0]
			z_flag_use_colors_get(shell);
   2013c:	68a3      	ldr	r3, [r4, #8]
	log_msg_get(msg);
   2013e:	4608      	mov	r0, r1
	return sh->ctx->cfg.flags.use_colors == 1;
   20140:	f8d3 6260 	ldr.w	r6, [r3, #608]	; 0x260
{
   20144:	460d      	mov	r5, r1
	log_msg_get(msg);
   20146:	f7fe ffbf 	bl	1f0c8 <log_msg_get>
	switch (shell->log_backend->control_block->state) {
   2014a:	69e3      	ldr	r3, [r4, #28]
   2014c:	68db      	ldr	r3, [r3, #12]
   2014e:	791b      	ldrb	r3, [r3, #4]
   20150:	2b01      	cmp	r3, #1
   20152:	f3c6 1600 	ubfx	r6, r6, #4, #1
   20156:	d005      	beq.n	20164 <put+0x30>
   20158:	2b03      	cmp	r3, #3
   2015a:	d06c      	beq.n	20236 <put+0x102>
		log_msg_put(msg);
   2015c:	4628      	mov	r0, r5
   2015e:	f7fe ffe2 	bl	1f126 <log_msg_put>
}
   20162:	e032      	b.n	201ca <put+0x96>
	struct shell_log_backend_msg t_msg = {
   20164:	9500      	str	r5, [sp, #0]
	return z_impl_k_uptime_ticks();
   20166:	f002 feee 	bl	22f46 <z_impl_k_uptime_ticks>
   2016a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2016e:	460a      	mov	r2, r1
   20170:	fba0 0103 	umull	r0, r1, r0, r3
   20174:	fb03 1102 	mla	r1, r3, r2, r1
   20178:	0bc3      	lsrs	r3, r0, #15
   2017a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	return (uint32_t)k_uptime_get();
   2017e:	9301      	str	r3, [sp, #4]
   20180:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   20184:	f240 36e7 	movw	r6, #999	; 0x3e7
   20188:	2700      	movs	r7, #0
		err = k_msgq_put(shell->log_backend->msgq, &t_msg,
   2018a:	69e3      	ldr	r3, [r4, #28]
   2018c:	6919      	ldr	r1, [r3, #16]
   2018e:	f8d3 8004 	ldr.w	r8, [r3, #4]
   20192:	46b1      	mov	r9, r6
   20194:	46ba      	mov	sl, r7
   20196:	fbe5 9a01 	umlal	r9, sl, r5, r1
   2019a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2019e:	2300      	movs	r3, #0
   201a0:	4648      	mov	r0, r9
   201a2:	4651      	mov	r1, sl
   201a4:	f7df ff9a 	bl	dc <__aeabi_uldivmod>
   201a8:	4602      	mov	r2, r0
   201aa:	460b      	mov	r3, r1
	return z_impl_k_msgq_put(msgq, data, timeout);
   201ac:	4669      	mov	r1, sp
   201ae:	4640      	mov	r0, r8
   201b0:	f7fc ff3a 	bl	1d028 <z_impl_k_msgq_put>
		switch (err) {
   201b4:	f110 0f23 	cmn.w	r0, #35	; 0x23
   201b8:	d00a      	beq.n	201d0 <put+0x9c>
   201ba:	300b      	adds	r0, #11
   201bc:	d008      	beq.n	201d0 <put+0x9c>
			signal = &shell->ctx->signals[SHELL_SIGNAL_LOG_MSG];
   201be:	68a0      	ldr	r0, [r4, #8]
   201c0:	f500 701e 	add.w	r0, r0, #632	; 0x278
	return z_impl_k_poll_signal_raise(sig, result);
   201c4:	2100      	movs	r1, #0
   201c6:	f7fe f8f7 	bl	1e3b8 <z_impl_k_poll_signal_raise>
}
   201ca:	b004      	add	sp, #16
   201cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct k_msgq *msgq = shell->log_backend->msgq;
   201d0:	69e3      	ldr	r3, [r4, #28]
   201d2:	f8d3 8004 	ldr.w	r8, [r3, #4]
	uint32_t timeout = shell->log_backend->timeout;
   201d6:	f8d3 9010 	ldr.w	r9, [r3, #16]
	return z_impl_k_uptime_ticks();
   201da:	f002 feb4 	bl	22f46 <z_impl_k_uptime_ticks>
   201de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   201e2:	460a      	mov	r2, r1
   201e4:	fba0 0103 	umull	r0, r1, r0, r3
   201e8:	fb03 1102 	mla	r1, r3, r2, r1
   201ec:	ea4f 3ad0 	mov.w	sl, r0, lsr #15
   201f0:	ea4a 4a41 	orr.w	sl, sl, r1, lsl #17
	return z_impl_k_msgq_peek(msgq, data);
   201f4:	a902      	add	r1, sp, #8
   201f6:	4640      	mov	r0, r8
   201f8:	f002 fb70 	bl	228dc <z_impl_k_msgq_peek>
		if (err == 0 && ((now - msg.timestamp) > timeout)) {
   201fc:	2800      	cmp	r0, #0
   201fe:	d1c4      	bne.n	2018a <put+0x56>
   20200:	9b03      	ldr	r3, [sp, #12]
   20202:	ebaa 0303 	sub.w	r3, sl, r3
   20206:	4599      	cmp	r9, r3
   20208:	d2bf      	bcs.n	2018a <put+0x56>
	return z_impl_k_msgq_get(msgq, data, timeout);
   2020a:	2300      	movs	r3, #0
   2020c:	2200      	movs	r2, #0
   2020e:	a902      	add	r1, sp, #8
   20210:	4640      	mov	r0, r8
   20212:	f7fc ff61 	bl	1d0d8 <z_impl_k_msgq_get>
			log_msg_put(msg.msg);
   20216:	9802      	ldr	r0, [sp, #8]
   20218:	f7fe ff85 	bl	1f126 <log_msg_put>
   2021c:	69a3      	ldr	r3, [r4, #24]
   2021e:	f3bf 8f5b 	dmb	ish
   20222:	e853 2f00 	ldrex	r2, [r3]
   20226:	3201      	adds	r2, #1
   20228:	e843 2100 	strex	r1, r2, [r3]
   2022c:	2900      	cmp	r1, #0
   2022e:	d1f8      	bne.n	20222 <put+0xee>
   20230:	f3bf 8f5b 	dmb	ish
		err = k_msgq_peek(msgq, &msg);
   20234:	e7de      	b.n	201f4 <put+0xc0>
		z_shell_cmd_line_erase(shell);
   20236:	4620      	mov	r0, r4
   20238:	f7ff fe5c 	bl	1fef4 <z_shell_cmd_line_erase>
		msg_process(shell->log_backend->log_output, msg, colors);
   2023c:	69e3      	ldr	r3, [r4, #28]
		flags |= LOG_OUTPUT_FLAG_COLORS;
   2023e:	2e00      	cmp	r6, #0
	log_output_msg_process(log_output, msg, flags);
   20240:	6898      	ldr	r0, [r3, #8]
   20242:	bf0c      	ite	eq
   20244:	220e      	moveq	r2, #14
   20246:	220f      	movne	r2, #15
   20248:	4629      	mov	r1, r5
   2024a:	f7f0 ffdd 	bl	11208 <log_output_msg_process>
	log_msg_put(msg);
   2024e:	e785      	b.n	2015c <put+0x28>

00020250 <z_shell_log_backend_output_func>:
{
   20250:	b510      	push	{r4, lr}
   20252:	4613      	mov	r3, r2
   20254:	460c      	mov	r4, r1
	z_shell_print_stream(ctx, data, length);
   20256:	460a      	mov	r2, r1
   20258:	4601      	mov	r1, r0
   2025a:	4618      	mov	r0, r3
   2025c:	f7ff fea9 	bl	1ffb2 <z_shell_print_stream>
}
   20260:	4620      	mov	r0, r4
   20262:	bd10      	pop	{r4, pc}

00020264 <z_shell_log_backend_enable>:
{
   20264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20266:	4604      	mov	r4, r0
   20268:	460e      	mov	r6, r1
   2026a:	4617      	mov	r7, r2
		while ((msg = msg_from_fifo(backend)) != NULL) {
   2026c:	6860      	ldr	r0, [r4, #4]
   2026e:	f7ff ff37 	bl	200e0 <msg_from_fifo.isra.0>
   20272:	4605      	mov	r5, r0
   20274:	b960      	cbnz	r0, 20290 <z_shell_log_backend_enable+0x2c>
		log_backend_enable(backend->backend, ctx, init_log_level);
   20276:	463a      	mov	r2, r7
   20278:	6820      	ldr	r0, [r4, #0]
   2027a:	4631      	mov	r1, r6
   2027c:	f7f0 fdd2 	bl	10e24 <log_backend_enable>
		log_output_ctx_set(backend->log_output, ctx);
   20280:	68a3      	ldr	r3, [r4, #8]
   20282:	685b      	ldr	r3, [r3, #4]
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *output,
				      void *ctx)
{
	output->control_block->ctx = ctx;
   20284:	605e      	str	r6, [r3, #4]
		backend->control_block->dropped_cnt = 0;
   20286:	68e3      	ldr	r3, [r4, #12]
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
   20288:	2201      	movs	r2, #1
   2028a:	711a      	strb	r2, [r3, #4]
		backend->control_block->dropped_cnt = 0;
   2028c:	601d      	str	r5, [r3, #0]
}
   2028e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			log_msg_put(msg);
   20290:	f7fe ff49 	bl	1f126 <log_msg_put>
   20294:	e7ea      	b.n	2026c <z_shell_log_backend_enable+0x8>

00020296 <z_shell_log_backend_disable>:
{
   20296:	b510      	push	{r4, lr}
   20298:	4604      	mov	r4, r0
	log_backend_disable(backend->backend);
   2029a:	6800      	ldr	r0, [r0, #0]
   2029c:	f7fe feb9 	bl	1f012 <log_backend_disable>
	backend->control_block->state = SHELL_LOG_BACKEND_DISABLED;
   202a0:	68e3      	ldr	r3, [r4, #12]
   202a2:	2202      	movs	r2, #2
   202a4:	711a      	strb	r2, [r3, #4]
}
   202a6:	bd10      	pop	{r4, pc}

000202a8 <z_shell_log_backend_process>:
			(const struct shell *)backend->backend->cb->ctx;
   202a8:	6803      	ldr	r3, [r0, #0]
	const struct shell *shell =
   202aa:	685b      	ldr	r3, [r3, #4]
{
   202ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct shell *shell =
   202ae:	681e      	ldr	r6, [r3, #0]
			z_flag_use_colors_get(shell);
   202b0:	68b3      	ldr	r3, [r6, #8]
   202b2:	f8d3 5260 	ldr.w	r5, [r3, #608]	; 0x260
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   202b6:	68c3      	ldr	r3, [r0, #12]
   202b8:	f3bf 8f5b 	dmb	ish
{
   202bc:	4604      	mov	r4, r0
   202be:	f3c5 1500 	ubfx	r5, r5, #4, #1
   202c2:	2200      	movs	r2, #0
   202c4:	e853 7f00 	ldrex	r7, [r3]
   202c8:	e843 2100 	strex	r1, r2, [r3]
   202cc:	2900      	cmp	r1, #0
   202ce:	d1f9      	bne.n	202c4 <z_shell_log_backend_process+0x1c>
   202d0:	f3bf 8f5b 	dmb	ish
	if (dropped) {
   202d4:	b19f      	cbz	r7, 202fe <z_shell_log_backend_process+0x56>
		if (colors) {
   202d6:	b14d      	cbz	r5, 202ec <z_shell_log_backend_process+0x44>
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
   202d8:	68b1      	ldr	r1, [r6, #8]
   202da:	2202      	movs	r2, #2
   202dc:	312e      	adds	r1, #46	; 0x2e
   202de:	a801      	add	r0, sp, #4
   202e0:	f000 fd5b 	bl	20d9a <memcpy>
			z_shell_vt100_color_set(shell, SHELL_VT100_COLOR_RED);
   202e4:	2101      	movs	r1, #1
   202e6:	4630      	mov	r0, r6
   202e8:	f7f2 fe3a 	bl	12f60 <z_shell_vt100_color_set>
		log_output_dropped_process(backend->log_output, dropped);
   202ec:	68a0      	ldr	r0, [r4, #8]
   202ee:	4639      	mov	r1, r7
   202f0:	f7f1 f806 	bl	11300 <log_output_dropped_process>
		if (colors) {
   202f4:	b11d      	cbz	r5, 202fe <z_shell_log_backend_process+0x56>
			z_shell_vt100_colors_restore(shell, &col);
   202f6:	a901      	add	r1, sp, #4
   202f8:	4630      	mov	r0, r6
   202fa:	f7f2 fe51 	bl	12fa0 <z_shell_vt100_colors_restore>
	struct log_msg *msg = msg_from_fifo(backend);
   202fe:	6860      	ldr	r0, [r4, #4]
   20300:	f7ff feee 	bl	200e0 <msg_from_fifo.isra.0>
	if (!msg) {
   20304:	4604      	mov	r4, r0
   20306:	b168      	cbz	r0, 20324 <z_shell_log_backend_process+0x7c>
	msg_process(shell->log_backend->log_output, msg, colors);
   20308:	69f3      	ldr	r3, [r6, #28]
		flags |= LOG_OUTPUT_FLAG_COLORS;
   2030a:	2d00      	cmp	r5, #0
	log_output_msg_process(log_output, msg, flags);
   2030c:	4601      	mov	r1, r0
   2030e:	bf08      	it	eq
   20310:	220e      	moveq	r2, #14
   20312:	6898      	ldr	r0, [r3, #8]
   20314:	bf18      	it	ne
   20316:	220f      	movne	r2, #15
   20318:	f7f0 ff76 	bl	11208 <log_output_msg_process>
	log_msg_put(msg);
   2031c:	4620      	mov	r0, r4
   2031e:	f7fe ff02 	bl	1f126 <log_msg_put>
	return true;
   20322:	2001      	movs	r0, #1
}
   20324:	b003      	add	sp, #12
   20326:	bdf0      	pop	{r4, r5, r6, r7, pc}

00020328 <panic>:
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   20328:	6843      	ldr	r3, [r0, #4]
{
   2032a:	b510      	push	{r4, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   2032c:	681c      	ldr	r4, [r3, #0]
	err = shell->iface->api->enable(shell->iface, true);
   2032e:	6860      	ldr	r0, [r4, #4]
   20330:	6803      	ldr	r3, [r0, #0]
   20332:	2101      	movs	r1, #1
   20334:	689b      	ldr	r3, [r3, #8]
   20336:	4798      	blx	r3
	if (err == 0) {
   20338:	bb48      	cbnz	r0, 2038e <panic+0x66>
		shell->log_backend->control_block->state =
   2033a:	69e3      	ldr	r3, [r4, #28]
   2033c:	68db      	ldr	r3, [r3, #12]
   2033e:	2203      	movs	r2, #3
   20340:	711a      	strb	r2, [r3, #4]
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, panic_mode, val, ret);
   20342:	68a3      	ldr	r3, [r4, #8]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20344:	f3bf 8f5b 	dmb	ish
   20348:	f503 7319 	add.w	r3, r3, #612	; 0x264
   2034c:	e853 2f00 	ldrex	r2, [r3]
   20350:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   20354:	e843 2100 	strex	r1, r2, [r3]
   20358:	2900      	cmp	r1, #0
   2035a:	d1f7      	bne.n	2034c <panic+0x24>
   2035c:	f3bf 8f5b 	dmb	ish
		z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   20360:	68a0      	ldr	r0, [r4, #8]
   20362:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   20364:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   20366:	3020      	adds	r0, #32
   20368:	f7ff fb53 	bl	1fa12 <z_shell_multiline_data_calc>
		z_shell_op_cursor_vert_move(shell, -1);
   2036c:	f04f 31ff 	mov.w	r1, #4294967295
   20370:	4620      	mov	r0, r4
   20372:	f7f2 fd83 	bl	12e7c <z_shell_op_cursor_vert_move>
					   -shell->ctx->vt100_ctx.cons.cur_x);
   20376:	68a3      	ldr	r3, [r4, #8]
   20378:	8c19      	ldrh	r1, [r3, #32]
		z_shell_op_cursor_horiz_move(shell,
   2037a:	4620      	mov	r0, r4
   2037c:	4249      	negs	r1, r1
   2037e:	f7f2 fd93 	bl	12ea8 <z_shell_op_cursor_horiz_move>
			while (z_shell_log_backend_process(
   20382:	69e0      	ldr	r0, [r4, #28]
   20384:	f7ff ff90 	bl	202a8 <z_shell_log_backend_process>
   20388:	2800      	cmp	r0, #0
   2038a:	d1fa      	bne.n	20382 <panic+0x5a>
}
   2038c:	bd10      	pop	{r4, pc}
		z_shell_log_backend_disable(shell->log_backend);
   2038e:	69e0      	ldr	r0, [r4, #28]
}
   20390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_log_backend_disable(shell->log_backend);
   20394:	f7ff bf7f 	b.w	20296 <z_shell_log_backend_disable>

00020398 <z_shell_raw_fprintf>:
{
   20398:	b40e      	push	{r1, r2, r3}
   2039a:	b503      	push	{r0, r1, lr}
   2039c:	aa03      	add	r2, sp, #12
   2039e:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   203a2:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   203a4:	f7f2 fd24 	bl	12df0 <z_shell_fprintf_fmt>
}
   203a8:	b002      	add	sp, #8
   203aa:	f85d eb04 	ldr.w	lr, [sp], #4
   203ae:	b003      	add	sp, #12
   203b0:	4770      	bx	lr

000203b2 <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
   203b2:	6983      	ldr	r3, [r0, #24]
   203b4:	2000      	movs	r0, #0
   203b6:	6018      	str	r0, [r3, #0]
}
   203b8:	4770      	bx	lr

000203ba <z_shell_raw_fprintf>:
{
   203ba:	b40e      	push	{r1, r2, r3}
   203bc:	b503      	push	{r0, r1, lr}
   203be:	aa03      	add	r2, sp, #12
   203c0:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   203c4:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   203c6:	f7f2 fd13 	bl	12df0 <z_shell_fprintf_fmt>
}
   203ca:	b002      	add	sp, #8
   203cc:	f85d eb04 	ldr.w	lr, [sp], #4
   203d0:	b003      	add	sp, #12
   203d2:	4770      	bx	lr

000203d4 <cmd_echo_on>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, echo, val, ret);
   203d4:	6883      	ldr	r3, [r0, #8]
   203d6:	f3bf 8f5b 	dmb	ish
   203da:	f503 7318 	add.w	r3, r3, #608	; 0x260
   203de:	e853 2f00 	ldrex	r2, [r3]
   203e2:	f042 0202 	orr.w	r2, r2, #2
   203e6:	e843 2100 	strex	r1, r2, [r3]
   203ea:	2900      	cmp	r1, #0
   203ec:	d1f7      	bne.n	203de <cmd_echo_on+0xa>
   203ee:	f3bf 8f5b 	dmb	ish
}
   203f2:	2000      	movs	r0, #0
   203f4:	4770      	bx	lr

000203f6 <cmd_bacskpace_mode_backspace>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, mode_delete, val, ret);
   203f6:	6883      	ldr	r3, [r0, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   203f8:	f3bf 8f5b 	dmb	ish
   203fc:	f503 7318 	add.w	r3, r3, #608	; 0x260
   20400:	e853 2f00 	ldrex	r2, [r3]
   20404:	f022 0208 	bic.w	r2, r2, #8
   20408:	e843 2100 	strex	r1, r2, [r3]
   2040c:	2900      	cmp	r1, #0
   2040e:	d1f7      	bne.n	20400 <cmd_bacskpace_mode_backspace+0xa>
   20410:	f3bf 8f5b 	dmb	ish
}
   20414:	2000      	movs	r0, #0
   20416:	4770      	bx	lr

00020418 <cmd_echo_off>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, echo, val, ret);
   20418:	6883      	ldr	r3, [r0, #8]
   2041a:	f3bf 8f5b 	dmb	ish
   2041e:	f503 7318 	add.w	r3, r3, #608	; 0x260
   20422:	e853 2f00 	ldrex	r2, [r3]
   20426:	f022 0202 	bic.w	r2, r2, #2
   2042a:	e843 2100 	strex	r1, r2, [r3]
   2042e:	2900      	cmp	r1, #0
   20430:	d1f7      	bne.n	20422 <cmd_echo_off+0xa>
   20432:	f3bf 8f5b 	dmb	ish
}
   20436:	2000      	movs	r0, #0
   20438:	4770      	bx	lr

0002043a <cmd_colors_off>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, use_colors, val, ret);
   2043a:	6883      	ldr	r3, [r0, #8]
   2043c:	f3bf 8f5b 	dmb	ish
   20440:	f503 7318 	add.w	r3, r3, #608	; 0x260
   20444:	e853 2f00 	ldrex	r2, [r3]
   20448:	f022 0210 	bic.w	r2, r2, #16
   2044c:	e843 2100 	strex	r1, r2, [r3]
   20450:	2900      	cmp	r1, #0
   20452:	d1f7      	bne.n	20444 <cmd_colors_off+0xa>
   20454:	f3bf 8f5b 	dmb	ish
}
   20458:	2000      	movs	r0, #0
   2045a:	4770      	bx	lr

0002045c <cmd_bacskpace_mode_delete>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, mode_delete, val, ret);
   2045c:	6883      	ldr	r3, [r0, #8]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2045e:	f3bf 8f5b 	dmb	ish
   20462:	f503 7318 	add.w	r3, r3, #608	; 0x260
   20466:	e853 2f00 	ldrex	r2, [r3]
   2046a:	f042 0208 	orr.w	r2, r2, #8
   2046e:	e843 2100 	strex	r1, r2, [r3]
   20472:	2900      	cmp	r1, #0
   20474:	d1f7      	bne.n	20466 <cmd_bacskpace_mode_delete+0xa>
   20476:	f3bf 8f5b 	dmb	ish
}
   2047a:	2000      	movs	r0, #0
   2047c:	4770      	bx	lr

0002047e <cmd_colors_on>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, use_colors, val, ret);
   2047e:	6883      	ldr	r3, [r0, #8]
   20480:	f3bf 8f5b 	dmb	ish
   20484:	f503 7318 	add.w	r3, r3, #608	; 0x260
   20488:	e853 2f00 	ldrex	r2, [r3]
   2048c:	f042 0210 	orr.w	r2, r2, #16
   20490:	e843 2100 	strex	r1, r2, [r3]
   20494:	2900      	cmp	r1, #0
   20496:	d1f7      	bne.n	20488 <cmd_colors_on+0xa>
   20498:	f3bf 8f5b 	dmb	ish
}
   2049c:	2000      	movs	r0, #0
   2049e:	4770      	bx	lr

000204a0 <remove_from_tail.part.0>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
   204a0:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   204a2:	6883      	ldr	r3, [r0, #8]

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
	ring_buf_get_finish(history->ring_buf, total_len);
   204a4:	6800      	ldr	r0, [r0, #0]
	sys_dnode_t *const next = node->next;
   204a6:	e9d3 2100 	ldrd	r2, r1, [r3]
	prev->next = next;
   204aa:	600a      	str	r2, [r1, #0]
	next->prev = prev;
   204ac:	6051      	str	r1, [r2, #4]
	node->next = NULL;
   204ae:	2200      	movs	r2, #0
	node->prev = NULL;
   204b0:	e9c3 2200 	strd	r2, r2, [r3]
			h_item->len + h_item->padding;
   204b4:	8919      	ldrh	r1, [r3, #8]
   204b6:	895b      	ldrh	r3, [r3, #10]
   204b8:	4419      	add	r1, r3
	ring_buf_get_finish(history->ring_buf, total_len);
   204ba:	310c      	adds	r1, #12
   204bc:	f7fe fb80 	bl	1ebc0 <ring_buf_get_finish>

	return true;
}
   204c0:	2001      	movs	r0, #1
   204c2:	bd08      	pop	{r3, pc}

000204c4 <z_shell_history_mode_exit>:
	history->current = NULL;
   204c4:	2300      	movs	r3, #0
   204c6:	60c3      	str	r3, [r0, #12]
}
   204c8:	4770      	bx	lr

000204ca <z_shell_history_get>:
{
   204ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   204cc:	461f      	mov	r7, r3
	return list->head == list;
   204ce:	4603      	mov	r3, r0
   204d0:	4616      	mov	r6, r2
   204d2:	f853 4f04 	ldr.w	r4, [r3, #4]!
	if (sys_dlist_is_empty(&history->list)) {
   204d6:	429c      	cmp	r4, r3
   204d8:	d102      	bne.n	204e0 <z_shell_history_get+0x16>
		*len = 0U;
   204da:	2000      	movs	r0, #0
   204dc:	8038      	strh	r0, [r7, #0]
}
   204de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!up) { /* button down */
   204e0:	68c5      	ldr	r5, [r0, #12]
   204e2:	b9b1      	cbnz	r1, 20512 <z_shell_history_get+0x48>
		if (history->current == NULL) {
   204e4:	2d00      	cmp	r5, #0
   204e6:	d0f8      	beq.n	204da <z_shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
   204e8:	42ac      	cmp	r4, r5
   204ea:	d102      	bne.n	204f2 <z_shell_history_get+0x28>
	history->current = l_item;
   204ec:	2300      	movs	r3, #0
   204ee:	60c3      	str	r3, [r0, #12]
	if (l_item) {
   204f0:	e7f3      	b.n	204da <z_shell_history_get+0x10>
   204f2:	686c      	ldr	r4, [r5, #4]
	history->current = l_item;
   204f4:	60c4      	str	r4, [r0, #12]
	if (l_item) {
   204f6:	2c00      	cmp	r4, #0
   204f8:	d0ef      	beq.n	204da <z_shell_history_get+0x10>
		memcpy(dst, h_item->data, h_item->len);
   204fa:	8922      	ldrh	r2, [r4, #8]
   204fc:	f104 010c 	add.w	r1, r4, #12
   20500:	4630      	mov	r0, r6
   20502:	f000 fc4a 	bl	20d9a <memcpy>
		*len = h_item->len;
   20506:	8923      	ldrh	r3, [r4, #8]
   20508:	803b      	strh	r3, [r7, #0]
		dst[*len] = '\0';
   2050a:	2200      	movs	r2, #0
   2050c:	54f2      	strb	r2, [r6, r3]
		return true;
   2050e:	2001      	movs	r0, #1
   20510:	e7e5      	b.n	204de <z_shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
   20512:	2d00      	cmp	r5, #0
   20514:	d0ee      	beq.n	204f4 <z_shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
   20516:	6883      	ldr	r3, [r0, #8]
   20518:	42ab      	cmp	r3, r5
   2051a:	d0e7      	beq.n	204ec <z_shell_history_get+0x22>
   2051c:	682c      	ldr	r4, [r5, #0]
   2051e:	e7e9      	b.n	204f4 <z_shell_history_get+0x2a>

00020520 <z_shell_history_purge>:

void z_shell_history_purge(struct shell_history *history)
{
   20520:	b538      	push	{r3, r4, r5, lr}
   20522:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
   20524:	1d05      	adds	r5, r0, #4
   20526:	6863      	ldr	r3, [r4, #4]
   20528:	42ab      	cmp	r3, r5
   2052a:	d004      	beq.n	20536 <z_shell_history_purge+0x16>
   2052c:	4620      	mov	r0, r4
   2052e:	f7ff ffb7 	bl	204a0 <remove_from_tail.part.0>
	while (remove_from_tail(history)) {
   20532:	2800      	cmp	r0, #0
   20534:	d1f7      	bne.n	20526 <z_shell_history_purge+0x6>
	}
}
   20536:	bd38      	pop	{r3, r4, r5, pc}

00020538 <z_shell_history_put>:

void z_shell_history_put(struct shell_history *history, uint8_t *line,
			 size_t len)
{
   20538:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   2053c:	6803      	ldr	r3, [r0, #0]
	uint32_t total_len = len + offsetof(struct shell_history_item, data);
   2053e:	f102 050c 	add.w	r5, r2, #12
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
   20542:	f1c5 0800 	rsb	r8, r5, #0
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   20546:	691b      	ldr	r3, [r3, #16]
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
   20548:	f008 0803 	and.w	r8, r8, #3
	total_len += padding;
   2054c:	4445      	add	r5, r8
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   2054e:	429d      	cmp	r5, r3
{
   20550:	4604      	mov	r4, r0
   20552:	468a      	mov	sl, r1
   20554:	4617      	mov	r7, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   20556:	d841      	bhi.n	205dc <z_shell_history_put+0xa4>
	history->current = NULL;
   20558:	2300      	movs	r3, #0
   2055a:	60c3      	str	r3, [r0, #12]
		return;
	}

	z_shell_history_mode_exit(history);

	if (len == 0) {
   2055c:	2a00      	cmp	r2, #0
   2055e:	d03d      	beq.n	205dc <z_shell_history_put+0xa4>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
   20560:	f100 0904 	add.w	r9, r0, #4
	return list->head == list;
   20564:	6840      	ldr	r0, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20566:	4581      	cmp	r9, r0
   20568:	d12d      	bne.n	205c6 <z_shell_history_put+0x8e>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
   2056a:	9301      	str	r3, [sp, #4]
			add_to_head(history, h_item, line, len, padding);
			ring_buf_put_finish(history->ring_buf, claim_len);
			break;
		}

		ring_buf_put_finish(history->ring_buf, 0);
   2056c:	f04f 0b00 	mov.w	fp, #0
		claim_len = ring_buf_put_claim(history->ring_buf,
   20570:	6820      	ldr	r0, [r4, #0]
   20572:	462a      	mov	r2, r5
   20574:	a901      	add	r1, sp, #4
   20576:	f7fe faa4 	bl	1eac2 <ring_buf_put_claim>
		if (claim_len < total_len) {
   2057a:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
   2057c:	4606      	mov	r6, r0
		if (claim_len < total_len) {
   2057e:	d930      	bls.n	205e2 <z_shell_history_put+0xaa>
				ring_buf_put_claim(history->ring_buf,
   20580:	6820      	ldr	r0, [r4, #0]
   20582:	462a      	mov	r2, r5
   20584:	a901      	add	r1, sp, #4
   20586:	f7fe fa9c 	bl	1eac2 <ring_buf_put_claim>
			if (claim2_len == total_len) {
   2058a:	4285      	cmp	r5, r0
   2058c:	d12a      	bne.n	205e4 <z_shell_history_put+0xac>
				ring_buf_put_finish(history->ring_buf,
   2058e:	4631      	mov	r1, r6
   20590:	6820      	ldr	r0, [r4, #0]
   20592:	f7fe fab2 	bl	1eafa <ring_buf_put_finish>
				padding += claim_len;
   20596:	44b0      	add	r8, r6
   20598:	fa1f f888 	uxth.w	r8, r8
   2059c:	462e      	mov	r6, r5
			add_to_head(history, h_item, line, len, padding);
   2059e:	9d01      	ldr	r5, [sp, #4]
	memcpy(item->data, src, len);
   205a0:	4651      	mov	r1, sl
	item->len = len;
   205a2:	812f      	strh	r7, [r5, #8]
	item->padding = padding;
   205a4:	f8a5 800a 	strh.w	r8, [r5, #10]
	memcpy(item->data, src, len);
   205a8:	463a      	mov	r2, r7
   205aa:	f105 000c 	add.w	r0, r5, #12
   205ae:	f000 fbf4 	bl	20d9a <memcpy>
	sys_dnode_t *const head = list->head;
   205b2:	6863      	ldr	r3, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
   205b4:	6820      	ldr	r0, [r4, #0]
	node->prev = list;
   205b6:	e9c5 3900 	strd	r3, r9, [r5]
   205ba:	4631      	mov	r1, r6
	head->prev = node;
   205bc:	605d      	str	r5, [r3, #4]
	list->head = node;
   205be:	6065      	str	r5, [r4, #4]
   205c0:	f7fe fa9b 	bl	1eafa <ring_buf_put_finish>
			break;
   205c4:	e00a      	b.n	205dc <z_shell_history_put+0xa4>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
   205c6:	9001      	str	r0, [sp, #4]
	if (l_item &&
   205c8:	2800      	cmp	r0, #0
   205ca:	d0cf      	beq.n	2056c <z_shell_history_put+0x34>
	   (h_item->len == len) &&
   205cc:	8903      	ldrh	r3, [r0, #8]
	if (l_item &&
   205ce:	4293      	cmp	r3, r2
   205d0:	d1cc      	bne.n	2056c <z_shell_history_put+0x34>
	   (memcmp(h_item->data, line, len) == 0)) {
   205d2:	300c      	adds	r0, #12
   205d4:	f000 fbba 	bl	20d4c <memcmp>
	   (h_item->len == len) &&
   205d8:	2800      	cmp	r0, #0
   205da:	d1c7      	bne.n	2056c <z_shell_history_put+0x34>
			 * of ring buffer capacity length.
			 */
			ring_buf_reset(history->ring_buf);
		}
	} while (1);
}
   205dc:	b003      	add	sp, #12
   205de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (claim_len == total_len) {
   205e2:	d0dc      	beq.n	2059e <z_shell_history_put+0x66>
		ring_buf_put_finish(history->ring_buf, 0);
   205e4:	6820      	ldr	r0, [r4, #0]
   205e6:	2100      	movs	r1, #0
   205e8:	f7fe fa87 	bl	1eafa <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
   205ec:	6863      	ldr	r3, [r4, #4]
   205ee:	4599      	cmp	r9, r3
   205f0:	d108      	bne.n	20604 <z_shell_history_put+0xcc>
			ring_buf_reset(history->ring_buf);
   205f2:	6820      	ldr	r0, [r4, #0]
   205f4:	2208      	movs	r2, #8
	buf->tail = 0;
   205f6:	e9c0 bb00 	strd	fp, fp, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
   205fa:	2100      	movs	r1, #0
   205fc:	4410      	add	r0, r2
   205fe:	f000 fbd7 	bl	20db0 <memset>
}
   20602:	e7b5      	b.n	20570 <z_shell_history_put+0x38>
   20604:	4620      	mov	r0, r4
   20606:	f7ff ff4b 	bl	204a0 <remove_from_tail.part.0>
		if (remove_from_tail(history) == false) {
   2060a:	2800      	cmp	r0, #0
   2060c:	d1b0      	bne.n	20570 <z_shell_history_put+0x38>
   2060e:	e7f0      	b.n	205f2 <z_shell_history_put+0xba>

00020610 <z_shell_history_init>:

void z_shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
   20610:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
   20612:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
   20616:	2300      	movs	r3, #0
   20618:	60c3      	str	r3, [r0, #12]
}
   2061a:	4770      	bx	lr

0002061c <z_shell_has_wildcard>:
{
   2061c:	b510      	push	{r4, lr}
   2061e:	4604      	mov	r4, r0
   20620:	b908      	cbnz	r0, 20626 <z_shell_has_wildcard+0xa>
	return false;
   20622:	2000      	movs	r0, #0
}
   20624:	bd10      	pop	{r4, pc}
   20626:	f000 fb66 	bl	20cf6 <strlen>
	for (size_t i = 0; i < str_len; i++) {
   2062a:	2300      	movs	r3, #0
   2062c:	b280      	uxth	r0, r0
   2062e:	4283      	cmp	r3, r0
   20630:	d2f7      	bcs.n	20622 <z_shell_has_wildcard+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
   20632:	5ce2      	ldrb	r2, [r4, r3]
   20634:	2a3f      	cmp	r2, #63	; 0x3f
   20636:	d003      	beq.n	20640 <z_shell_has_wildcard+0x24>
   20638:	2a2a      	cmp	r2, #42	; 0x2a
   2063a:	d001      	beq.n	20640 <z_shell_has_wildcard+0x24>
	for (size_t i = 0; i < str_len; i++) {
   2063c:	3301      	adds	r3, #1
   2063e:	e7f6      	b.n	2062e <z_shell_has_wildcard+0x12>
			return true;
   20640:	2001      	movs	r0, #1
   20642:	e7ef      	b.n	20624 <z_shell_has_wildcard+0x8>

00020644 <z_shell_wildcard_prepare>:
{
   20644:	b510      	push	{r4, lr}
   20646:	4604      	mov	r4, r0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
   20648:	6880      	ldr	r0, [r0, #8]
   2064a:	f44f 7280 	mov.w	r2, #256	; 0x100
   2064e:	2100      	movs	r1, #0
   20650:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   20654:	f000 fbac 	bl	20db0 <memset>
	memcpy(shell->ctx->temp_buff,
   20658:	68a0      	ldr	r0, [r4, #8]
   2065a:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   2065c:	f100 0142 	add.w	r1, r0, #66	; 0x42
   20660:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   20664:	f000 fb99 	bl	20d9a <memcpy>
	z_shell_spaces_trim(shell->ctx->temp_buff);
   20668:	68a0      	ldr	r0, [r4, #8]
   2066a:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   2066e:	f7ff fb1f 	bl	1fcb0 <z_shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = z_shell_strlen(shell->ctx->temp_buff) + 1;
   20672:	68a3      	ldr	r3, [r4, #8]
   20674:	f513 70a1 	adds.w	r0, r3, #322	; 0x142
   20678:	d007      	beq.n	2068a <z_shell_wildcard_prepare+0x46>
   2067a:	f000 fb3c 	bl	20cf6 <strlen>
   2067e:	b283      	uxth	r3, r0
   20680:	68a2      	ldr	r2, [r4, #8]
   20682:	3301      	adds	r3, #1
   20684:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
}
   20688:	bd10      	pop	{r4, pc}
   2068a:	4603      	mov	r3, r0
   2068c:	e7f8      	b.n	20680 <z_shell_wildcard_prepare+0x3c>

0002068e <z_shell_wildcard_finalize>:

void z_shell_wildcard_finalize(const struct shell *shell)
{
   2068e:	b510      	push	{r4, lr}
   20690:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
   20692:	6880      	ldr	r0, [r0, #8]
   20694:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
   20698:	f500 71a1 	add.w	r1, r0, #322	; 0x142
   2069c:	3042      	adds	r0, #66	; 0x42
   2069e:	f000 fb7c 	bl	20d9a <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
   206a2:	68a3      	ldr	r3, [r4, #8]
   206a4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   206a8:	879a      	strh	r2, [r3, #60]	; 0x3c
}
   206aa:	bd10      	pop	{r4, pc}

000206ac <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   206ac:	2200      	movs	r2, #0
   206ae:	e9c0 2200 	strd	r2, r2, [r0]
   206b2:	6082      	str	r2, [r0, #8]
}
   206b4:	4770      	bx	lr

000206b6 <bt_scan_stop>:
	return bt_le_scan_stop();
   206b6:	f7f6 bc9d 	b.w	16ff4 <bt_le_scan_stop>

000206ba <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   206ba:	b538      	push	{r3, r4, r5, lr}
   206bc:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   206be:	42ab      	cmp	r3, r5
{
   206c0:	4611      	mov	r1, r2
   206c2:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   206c4:	d804      	bhi.n	206d0 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   206c6:	461a      	mov	r2, r3
   206c8:	f000 fb67 	bl	20d9a <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   206cc:	4620      	mov	r0, r4
   206ce:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   206d0:	2400      	movs	r4, #0
   206d2:	e7fb      	b.n	206cc <_copy+0x12>

000206d4 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   206d4:	f000 bb6c 	b.w	20db0 <memset>

000206d8 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   206d8:	09c3      	lsrs	r3, r0, #7
   206da:	005a      	lsls	r2, r3, #1
   206dc:	4413      	add	r3, r2
   206de:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   206e2:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   206e6:	b2c0      	uxtb	r0, r0
   206e8:	4770      	bx	lr

000206ea <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   206ea:	78cb      	ldrb	r3, [r1, #3]
   206ec:	7802      	ldrb	r2, [r0, #0]
   206ee:	4053      	eors	r3, r2
   206f0:	7003      	strb	r3, [r0, #0]
   206f2:	884b      	ldrh	r3, [r1, #2]
   206f4:	7842      	ldrb	r2, [r0, #1]
   206f6:	4053      	eors	r3, r2
   206f8:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   206fa:	680a      	ldr	r2, [r1, #0]
   206fc:	7883      	ldrb	r3, [r0, #2]
   206fe:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   20702:	7083      	strb	r3, [r0, #2]
   20704:	680a      	ldr	r2, [r1, #0]
   20706:	78c3      	ldrb	r3, [r0, #3]
   20708:	4053      	eors	r3, r2
   2070a:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2070c:	79cb      	ldrb	r3, [r1, #7]
   2070e:	7902      	ldrb	r2, [r0, #4]
   20710:	4053      	eors	r3, r2
   20712:	7103      	strb	r3, [r0, #4]
   20714:	88cb      	ldrh	r3, [r1, #6]
   20716:	7942      	ldrb	r2, [r0, #5]
   20718:	4053      	eors	r3, r2
   2071a:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2071c:	684a      	ldr	r2, [r1, #4]
   2071e:	7983      	ldrb	r3, [r0, #6]
   20720:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   20724:	7183      	strb	r3, [r0, #6]
   20726:	684a      	ldr	r2, [r1, #4]
   20728:	79c3      	ldrb	r3, [r0, #7]
   2072a:	4053      	eors	r3, r2
   2072c:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2072e:	7acb      	ldrb	r3, [r1, #11]
   20730:	7a02      	ldrb	r2, [r0, #8]
   20732:	4053      	eors	r3, r2
   20734:	7203      	strb	r3, [r0, #8]
   20736:	7a42      	ldrb	r2, [r0, #9]
   20738:	894b      	ldrh	r3, [r1, #10]
   2073a:	4053      	eors	r3, r2
   2073c:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2073e:	688a      	ldr	r2, [r1, #8]
   20740:	7a83      	ldrb	r3, [r0, #10]
   20742:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   20746:	7283      	strb	r3, [r0, #10]
   20748:	688a      	ldr	r2, [r1, #8]
   2074a:	7ac3      	ldrb	r3, [r0, #11]
   2074c:	4053      	eors	r3, r2
   2074e:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   20750:	7bcb      	ldrb	r3, [r1, #15]
   20752:	7b02      	ldrb	r2, [r0, #12]
   20754:	4053      	eors	r3, r2
   20756:	7303      	strb	r3, [r0, #12]
   20758:	89cb      	ldrh	r3, [r1, #14]
   2075a:	7b42      	ldrb	r2, [r0, #13]
   2075c:	4053      	eors	r3, r2
   2075e:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   20760:	68ca      	ldr	r2, [r1, #12]
   20762:	7b83      	ldrb	r3, [r0, #14]
   20764:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   20768:	7383      	strb	r3, [r0, #14]
   2076a:	68ca      	ldr	r2, [r1, #12]
   2076c:	7bc3      	ldrb	r3, [r0, #15]
   2076e:	4053      	eors	r3, r2
   20770:	73c3      	strb	r3, [r0, #15]
}
   20772:	4770      	bx	lr

00020774 <shift_rows>:
{
   20774:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   20776:	7802      	ldrb	r2, [r0, #0]
   20778:	f88d 2000 	strb.w	r2, [sp]
   2077c:	7942      	ldrb	r2, [r0, #5]
   2077e:	f88d 2001 	strb.w	r2, [sp, #1]
   20782:	7a82      	ldrb	r2, [r0, #10]
   20784:	f88d 2002 	strb.w	r2, [sp, #2]
   20788:	7bc2      	ldrb	r2, [r0, #15]
   2078a:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2078e:	7902      	ldrb	r2, [r0, #4]
   20790:	f88d 2004 	strb.w	r2, [sp, #4]
   20794:	7a42      	ldrb	r2, [r0, #9]
   20796:	f88d 2005 	strb.w	r2, [sp, #5]
   2079a:	7b82      	ldrb	r2, [r0, #14]
   2079c:	f88d 2006 	strb.w	r2, [sp, #6]
   207a0:	78c2      	ldrb	r2, [r0, #3]
   207a2:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   207a6:	7a02      	ldrb	r2, [r0, #8]
   207a8:	f88d 2008 	strb.w	r2, [sp, #8]
   207ac:	7b42      	ldrb	r2, [r0, #13]
   207ae:	f88d 2009 	strb.w	r2, [sp, #9]
   207b2:	7882      	ldrb	r2, [r0, #2]
   207b4:	f88d 200a 	strb.w	r2, [sp, #10]
   207b8:	79c2      	ldrb	r2, [r0, #7]
   207ba:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   207be:	7b02      	ldrb	r2, [r0, #12]
   207c0:	f88d 200c 	strb.w	r2, [sp, #12]
   207c4:	7842      	ldrb	r2, [r0, #1]
   207c6:	7ac3      	ldrb	r3, [r0, #11]
   207c8:	f88d 200d 	strb.w	r2, [sp, #13]
   207cc:	7982      	ldrb	r2, [r0, #6]
   207ce:	f88d 200e 	strb.w	r2, [sp, #14]
   207d2:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   207d6:	2310      	movs	r3, #16
   207d8:	466a      	mov	r2, sp
   207da:	4619      	mov	r1, r3
   207dc:	f7ff ff6d 	bl	206ba <_copy>
}
   207e0:	b005      	add	sp, #20
   207e2:	f85d fb04 	ldr.w	pc, [sp], #4

000207e6 <mult_row_column>:
{
   207e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   207e8:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   207ea:	7808      	ldrb	r0, [r1, #0]
{
   207ec:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   207ee:	f7ff ff73 	bl	206d8 <_double_byte>
   207f2:	4605      	mov	r5, r0
   207f4:	7860      	ldrb	r0, [r4, #1]
   207f6:	f7ff ff6f 	bl	206d8 <_double_byte>
   207fa:	78a2      	ldrb	r2, [r4, #2]
   207fc:	7863      	ldrb	r3, [r4, #1]
   207fe:	4053      	eors	r3, r2
   20800:	78e2      	ldrb	r2, [r4, #3]
   20802:	4053      	eors	r3, r2
   20804:	405d      	eors	r5, r3
   20806:	4045      	eors	r5, r0
   20808:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2080a:	7860      	ldrb	r0, [r4, #1]
   2080c:	7827      	ldrb	r7, [r4, #0]
   2080e:	f7ff ff63 	bl	206d8 <_double_byte>
   20812:	4605      	mov	r5, r0
   20814:	78a0      	ldrb	r0, [r4, #2]
   20816:	f7ff ff5f 	bl	206d8 <_double_byte>
   2081a:	78a3      	ldrb	r3, [r4, #2]
   2081c:	405f      	eors	r7, r3
   2081e:	78e3      	ldrb	r3, [r4, #3]
   20820:	405f      	eors	r7, r3
   20822:	407d      	eors	r5, r7
   20824:	4045      	eors	r5, r0
   20826:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   20828:	78a0      	ldrb	r0, [r4, #2]
   2082a:	7865      	ldrb	r5, [r4, #1]
   2082c:	7827      	ldrb	r7, [r4, #0]
   2082e:	f7ff ff53 	bl	206d8 <_double_byte>
   20832:	406f      	eors	r7, r5
   20834:	4605      	mov	r5, r0
   20836:	78e0      	ldrb	r0, [r4, #3]
   20838:	f7ff ff4e 	bl	206d8 <_double_byte>
   2083c:	78e3      	ldrb	r3, [r4, #3]
   2083e:	405f      	eors	r7, r3
   20840:	407d      	eors	r5, r7
   20842:	4045      	eors	r5, r0
   20844:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   20846:	7820      	ldrb	r0, [r4, #0]
   20848:	f7ff ff46 	bl	206d8 <_double_byte>
   2084c:	7863      	ldrb	r3, [r4, #1]
   2084e:	7825      	ldrb	r5, [r4, #0]
   20850:	405d      	eors	r5, r3
   20852:	78a3      	ldrb	r3, [r4, #2]
   20854:	405d      	eors	r5, r3
   20856:	4045      	eors	r5, r0
   20858:	78e0      	ldrb	r0, [r4, #3]
   2085a:	f7ff ff3d 	bl	206d8 <_double_byte>
   2085e:	b2ed      	uxtb	r5, r5
   20860:	4045      	eors	r5, r0
   20862:	70f5      	strb	r5, [r6, #3]
}
   20864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020866 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   20866:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   20868:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   2086a:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2086c:	f912 3b10 	ldrsb.w	r3, [r2], #16
   20870:	2b00      	cmp	r3, #0
   20872:	bfb4      	ite	lt
   20874:	2387      	movlt	r3, #135	; 0x87
   20876:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   20878:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2087c:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   20880:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   20882:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   20886:	d002      	beq.n	2088e <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   20888:	7813      	ldrb	r3, [r2, #0]
   2088a:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2088c:	e7f4      	b.n	20878 <gf_double+0x12>
	}
}
   2088e:	bd10      	pop	{r4, pc}

00020890 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   20890:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   20892:	b120      	cbz	r0, 2089e <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   20894:	2258      	movs	r2, #88	; 0x58
   20896:	2100      	movs	r1, #0
   20898:	f7ff ff1c 	bl	206d4 <_set>
   2089c:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2089e:	bd08      	pop	{r3, pc}

000208a0 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   208a0:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   208a2:	4604      	mov	r4, r0
   208a4:	b188      	cbz	r0, 208ca <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   208a6:	2210      	movs	r2, #16
   208a8:	2100      	movs	r1, #0
   208aa:	f7ff ff13 	bl	206d4 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   208ae:	2210      	movs	r2, #16
   208b0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   208b4:	2100      	movs	r1, #0
   208b6:	f7ff ff0d 	bl	206d4 <_set>
	s->leftover_offset = 0;
   208ba:	2300      	movs	r3, #0
   208bc:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   208be:	2200      	movs	r2, #0
   208c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   208c4:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   208c8:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   208ca:	bd10      	pop	{r4, pc}

000208cc <tc_cmac_setup>:
{
   208cc:	b570      	push	{r4, r5, r6, lr}
   208ce:	460d      	mov	r5, r1
   208d0:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   208d2:	4604      	mov	r4, r0
   208d4:	b310      	cbz	r0, 2091c <tc_cmac_setup+0x50>
   208d6:	b311      	cbz	r1, 2091e <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   208d8:	2258      	movs	r2, #88	; 0x58
   208da:	2100      	movs	r1, #0
   208dc:	f7ff fefa 	bl	206d4 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   208e0:	4629      	mov	r1, r5
	s->sched = sched;
   208e2:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   208e4:	4630      	mov	r0, r6
   208e6:	f7f3 fa3f 	bl	13d68 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   208ea:	2210      	movs	r2, #16
   208ec:	2100      	movs	r1, #0
   208ee:	4620      	mov	r0, r4
   208f0:	f7ff fef0 	bl	206d4 <_set>
	gf_double (s->K1, s->iv);
   208f4:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   208f8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   208fa:	4621      	mov	r1, r4
   208fc:	4620      	mov	r0, r4
   208fe:	f7f3 fa85 	bl	13e0c <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   20902:	4621      	mov	r1, r4
   20904:	4628      	mov	r0, r5
   20906:	f7ff ffae 	bl	20866 <gf_double>
	gf_double (s->K2, s->K1);
   2090a:	4629      	mov	r1, r5
   2090c:	f104 0020 	add.w	r0, r4, #32
   20910:	f7ff ffa9 	bl	20866 <gf_double>
	tc_cmac_init(s);
   20914:	4620      	mov	r0, r4
   20916:	f7ff ffc3 	bl	208a0 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2091a:	2001      	movs	r0, #1
}
   2091c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2091e:	4608      	mov	r0, r1
   20920:	e7fc      	b.n	2091c <tc_cmac_setup+0x50>

00020922 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   20922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20926:	460d      	mov	r5, r1
   20928:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2092a:	4604      	mov	r4, r0
   2092c:	2800      	cmp	r0, #0
   2092e:	d062      	beq.n	209f6 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   20930:	b912      	cbnz	r2, 20938 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   20932:	2001      	movs	r0, #1
}
   20934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   20938:	2900      	cmp	r1, #0
   2093a:	d05c      	beq.n	209f6 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   2093c:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   20940:	ea50 0301 	orrs.w	r3, r0, r1
   20944:	d057      	beq.n	209f6 <tc_cmac_update+0xd4>
	s->countdown--;
   20946:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   2094a:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   2094e:	f141 33ff 	adc.w	r3, r1, #4294967295
   20952:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   20956:	f1b8 0f00 	cmp.w	r8, #0
   2095a:	d02a      	beq.n	209b2 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2095c:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   20960:	f108 0030 	add.w	r0, r8, #48	; 0x30
   20964:	42be      	cmp	r6, r7
   20966:	4420      	add	r0, r4
   20968:	d208      	bcs.n	2097c <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2096a:	462a      	mov	r2, r5
   2096c:	4633      	mov	r3, r6
   2096e:	4631      	mov	r1, r6
   20970:	f7ff fea3 	bl	206ba <_copy>
			s->leftover_offset += data_length;
   20974:	6c62      	ldr	r2, [r4, #68]	; 0x44
   20976:	4432      	add	r2, r6
   20978:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2097a:	e7da      	b.n	20932 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   2097c:	463b      	mov	r3, r7
   2097e:	462a      	mov	r2, r5
   20980:	4639      	mov	r1, r7
   20982:	f7ff fe9a 	bl	206ba <_copy>
		data_length -= remaining_space;
   20986:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   20988:	2300      	movs	r3, #0
   2098a:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2098c:	4446      	add	r6, r8
		data += remaining_space;
   2098e:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20990:	1e63      	subs	r3, r4, #1
   20992:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   20996:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2099a:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2099e:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   209a0:	ea82 0200 	eor.w	r2, r2, r0
   209a4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   209a6:	d1f6      	bne.n	20996 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   209a8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   209aa:	4621      	mov	r1, r4
   209ac:	4620      	mov	r0, r4
   209ae:	f7f3 fa2d 	bl	13e0c <tc_aes_encrypt>
   209b2:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   209b6:	2e10      	cmp	r6, #16
   209b8:	d80a      	bhi.n	209d0 <tc_cmac_update+0xae>
	if (data_length > 0) {
   209ba:	2e00      	cmp	r6, #0
   209bc:	d0b9      	beq.n	20932 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   209be:	4633      	mov	r3, r6
   209c0:	462a      	mov	r2, r5
   209c2:	4631      	mov	r1, r6
   209c4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   209c8:	f7ff fe77 	bl	206ba <_copy>
		s->leftover_offset = data_length;
   209cc:	6466      	str	r6, [r4, #68]	; 0x44
   209ce:	e7b0      	b.n	20932 <tc_cmac_update+0x10>
   209d0:	1e63      	subs	r3, r4, #1
   209d2:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   209d4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   209d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   209dc:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   209de:	ea82 0200 	eor.w	r2, r2, r0
   209e2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   209e4:	d1f6      	bne.n	209d4 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   209e6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   209e8:	4621      	mov	r1, r4
   209ea:	4620      	mov	r0, r4
   209ec:	f7f3 fa0e 	bl	13e0c <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   209f0:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   209f2:	3e10      	subs	r6, #16
   209f4:	e7df      	b.n	209b6 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   209f6:	2000      	movs	r0, #0
   209f8:	e79c      	b.n	20934 <tc_cmac_update+0x12>

000209fa <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   209fa:	b570      	push	{r4, r5, r6, lr}
   209fc:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   209fe:	4605      	mov	r5, r0
   20a00:	b1e8      	cbz	r0, 20a3e <tc_cmac_final+0x44>
   20a02:	b369      	cbz	r1, 20a60 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   20a04:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   20a06:	2a10      	cmp	r2, #16
   20a08:	d11a      	bne.n	20a40 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   20a0a:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20a0c:	1e63      	subs	r3, r4, #1
   20a0e:	3901      	subs	r1, #1
   20a10:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   20a14:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   20a18:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   20a1c:	4072      	eors	r2, r6
   20a1e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20a22:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   20a24:	ea82 0206 	eor.w	r2, r2, r6
   20a28:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20a2a:	d1f3      	bne.n	20a14 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   20a2c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   20a2e:	4621      	mov	r1, r4
   20a30:	4628      	mov	r0, r5
   20a32:	f7f3 f9eb 	bl	13e0c <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   20a36:	4620      	mov	r0, r4
   20a38:	f7ff ff2a 	bl	20890 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   20a3c:	2001      	movs	r0, #1
}
   20a3e:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   20a40:	f102 0030 	add.w	r0, r2, #48	; 0x30
   20a44:	2100      	movs	r1, #0
   20a46:	f1c2 0210 	rsb	r2, r2, #16
   20a4a:	4420      	add	r0, r4
   20a4c:	f7ff fe42 	bl	206d4 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   20a50:	6c63      	ldr	r3, [r4, #68]	; 0x44
   20a52:	4423      	add	r3, r4
   20a54:	2280      	movs	r2, #128	; 0x80
   20a56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   20a5a:	f104 0120 	add.w	r1, r4, #32
   20a5e:	e7d5      	b.n	20a0c <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   20a60:	4608      	mov	r0, r1
   20a62:	e7ec      	b.n	20a3e <tc_cmac_final+0x44>

00020a64 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   20a64:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   20a66:	6800      	ldr	r0, [r0, #0]
   20a68:	f7f3 ba58 	b.w	13f1c <z_arm_fatal_error>

00020a6c <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   20a6c:	2100      	movs	r1, #0
   20a6e:	2001      	movs	r0, #1
   20a70:	f7f3 ba54 	b.w	13f1c <z_arm_fatal_error>

00020a74 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   20a74:	b508      	push	{r3, lr}
	handler();
   20a76:	f7f3 faef 	bl	14058 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   20a7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   20a7e:	f7f3 bbd1 	b.w	14224 <z_arm_exc_exit>

00020a82 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   20a82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20a86:	4684      	mov	ip, r0
   20a88:	4688      	mov	r8, r1
	register const char *s = nptr;
   20a8a:	4601      	mov	r1, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   20a8c:	460c      	mov	r4, r1
   20a8e:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   20a92:	2b20      	cmp	r3, #32
   20a94:	d033      	beq.n	20afe <strtol+0x7c>
   20a96:	f1a3 0009 	sub.w	r0, r3, #9
   20a9a:	2804      	cmp	r0, #4
   20a9c:	d92f      	bls.n	20afe <strtol+0x7c>
	} while (isspace(c));
	if (c == '-') {
   20a9e:	2b2d      	cmp	r3, #45	; 0x2d
   20aa0:	d12f      	bne.n	20b02 <strtol+0x80>
		neg = 1;
		c = *s++;
   20aa2:	784b      	ldrb	r3, [r1, #1]
   20aa4:	1c8c      	adds	r4, r1, #2
		neg = 1;
   20aa6:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   20aa8:	2a00      	cmp	r2, #0
   20aaa:	d05c      	beq.n	20b66 <strtol+0xe4>
   20aac:	2a10      	cmp	r2, #16
   20aae:	d109      	bne.n	20ac4 <strtol+0x42>
   20ab0:	2b30      	cmp	r3, #48	; 0x30
   20ab2:	d107      	bne.n	20ac4 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   20ab4:	7823      	ldrb	r3, [r4, #0]
   20ab6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   20aba:	2b58      	cmp	r3, #88	; 0x58
   20abc:	d14e      	bne.n	20b5c <strtol+0xda>
		c = s[1];
   20abe:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   20ac0:	2210      	movs	r2, #16
		s += 2;
   20ac2:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   20ac4:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   20ac8:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   20aca:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   20acc:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   20ad0:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   20ad2:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   20ad6:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   20ada:	2d09      	cmp	r5, #9
   20adc:	d817      	bhi.n	20b0e <strtol+0x8c>
			c -= '0';
   20ade:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   20ae0:	429a      	cmp	r2, r3
   20ae2:	dd24      	ble.n	20b2e <strtol+0xac>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   20ae4:	1c75      	adds	r5, r6, #1
   20ae6:	d007      	beq.n	20af8 <strtol+0x76>
   20ae8:	4570      	cmp	r0, lr
   20aea:	d81d      	bhi.n	20b28 <strtol+0xa6>
   20aec:	d101      	bne.n	20af2 <strtol+0x70>
   20aee:	454b      	cmp	r3, r9
   20af0:	dc1a      	bgt.n	20b28 <strtol+0xa6>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   20af2:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   20af6:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   20af8:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   20afc:	e7eb      	b.n	20ad6 <strtol+0x54>
{
   20afe:	4621      	mov	r1, r4
   20b00:	e7c4      	b.n	20a8c <strtol+0xa>
	} else if (c == '+') {
   20b02:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   20b04:	bf04      	itt	eq
   20b06:	784b      	ldrbeq	r3, [r1, #1]
   20b08:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   20b0a:	2100      	movs	r1, #0
   20b0c:	e7cc      	b.n	20aa8 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   20b0e:	f043 0520 	orr.w	r5, r3, #32
   20b12:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   20b14:	2d19      	cmp	r5, #25
   20b16:	d80a      	bhi.n	20b2e <strtol+0xac>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   20b18:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   20b1c:	2d1a      	cmp	r5, #26
   20b1e:	bf34      	ite	cc
   20b20:	2537      	movcc	r5, #55	; 0x37
   20b22:	2557      	movcs	r5, #87	; 0x57
   20b24:	1b5b      	subs	r3, r3, r5
   20b26:	e7db      	b.n	20ae0 <strtol+0x5e>
			any = -1;
   20b28:	f04f 36ff 	mov.w	r6, #4294967295
   20b2c:	e7e4      	b.n	20af8 <strtol+0x76>
		}
	}

	if (any < 0) {
   20b2e:	1c73      	adds	r3, r6, #1
   20b30:	d109      	bne.n	20b46 <strtol+0xc4>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   20b32:	f7fb ff3b 	bl	1c9ac <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   20b36:	2322      	movs	r3, #34	; 0x22
   20b38:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   20b3a:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   20b3c:	f1b8 0f00 	cmp.w	r8, #0
   20b40:	d107      	bne.n	20b52 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   20b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   20b46:	b101      	cbz	r1, 20b4a <strtol+0xc8>
		acc = -acc;
   20b48:	4240      	negs	r0, r0
	if (endptr != NULL) {
   20b4a:	f1b8 0f00 	cmp.w	r8, #0
   20b4e:	d0f8      	beq.n	20b42 <strtol+0xc0>
		*endptr = (char *)(any ? s - 1 : nptr);
   20b50:	b10e      	cbz	r6, 20b56 <strtol+0xd4>
   20b52:	f104 3cff 	add.w	ip, r4, #4294967295
   20b56:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   20b5a:	e7f2      	b.n	20b42 <strtol+0xc0>
	if (base == 0) {
   20b5c:	2330      	movs	r3, #48	; 0x30
   20b5e:	2a00      	cmp	r2, #0
   20b60:	d1b0      	bne.n	20ac4 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   20b62:	2208      	movs	r2, #8
   20b64:	e7ae      	b.n	20ac4 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   20b66:	2b30      	cmp	r3, #48	; 0x30
   20b68:	d0a4      	beq.n	20ab4 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   20b6a:	220a      	movs	r2, #10
   20b6c:	e7aa      	b.n	20ac4 <strtol+0x42>

00020b6e <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   20b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20b72:	4684      	mov	ip, r0
   20b74:	460f      	mov	r7, r1
	register const char *s = nptr;
   20b76:	4605      	mov	r5, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   20b78:	462c      	mov	r4, r5
   20b7a:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   20b7e:	2b20      	cmp	r3, #32
   20b80:	d035      	beq.n	20bee <strtoul+0x80>
   20b82:	f1a3 0109 	sub.w	r1, r3, #9
   20b86:	2904      	cmp	r1, #4
   20b88:	d931      	bls.n	20bee <strtoul+0x80>
	} while (isspace(c));
	if (c == '-') {
   20b8a:	2b2d      	cmp	r3, #45	; 0x2d
   20b8c:	d131      	bne.n	20bf2 <strtoul+0x84>
		neg = 1;
		c = *s++;
   20b8e:	786b      	ldrb	r3, [r5, #1]
   20b90:	1cac      	adds	r4, r5, #2
		neg = 1;
   20b92:	f04f 0e01 	mov.w	lr, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   20b96:	2a00      	cmp	r2, #0
   20b98:	d05e      	beq.n	20c58 <strtoul+0xea>
   20b9a:	2a10      	cmp	r2, #16
   20b9c:	d109      	bne.n	20bb2 <strtoul+0x44>
   20b9e:	2b30      	cmp	r3, #48	; 0x30
   20ba0:	d107      	bne.n	20bb2 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   20ba2:	7823      	ldrb	r3, [r4, #0]
   20ba4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   20ba8:	2b58      	cmp	r3, #88	; 0x58
   20baa:	d150      	bne.n	20c4e <strtoul+0xe0>
		c = s[1];
   20bac:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   20bae:	2210      	movs	r2, #16
		s += 2;
   20bb0:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   20bb2:	f04f 31ff 	mov.w	r1, #4294967295
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   20bb6:	2600      	movs	r6, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   20bb8:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   20bbc:	fb02 f801 	mul.w	r8, r2, r1
   20bc0:	ea6f 0808 	mvn.w	r8, r8
	for (acc = 0, any = 0;; c = *s++) {
   20bc4:	4630      	mov	r0, r6
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   20bc6:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   20bca:	2d09      	cmp	r5, #9
   20bcc:	d818      	bhi.n	20c00 <strtoul+0x92>
			c -= '0';
   20bce:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   20bd0:	429a      	cmp	r2, r3
   20bd2:	dd25      	ble.n	20c20 <strtoul+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   20bd4:	2e00      	cmp	r6, #0
   20bd6:	db20      	blt.n	20c1a <strtoul+0xac>
   20bd8:	4288      	cmp	r0, r1
   20bda:	d81e      	bhi.n	20c1a <strtoul+0xac>
   20bdc:	d101      	bne.n	20be2 <strtoul+0x74>
   20bde:	4543      	cmp	r3, r8
   20be0:	dc1b      	bgt.n	20c1a <strtoul+0xac>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   20be2:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   20be6:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   20be8:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   20bec:	e7eb      	b.n	20bc6 <strtoul+0x58>
{
   20bee:	4625      	mov	r5, r4
   20bf0:	e7c2      	b.n	20b78 <strtoul+0xa>
	} else if (c == '+') {
   20bf2:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   20bf4:	bf04      	itt	eq
   20bf6:	786b      	ldrbeq	r3, [r5, #1]
   20bf8:	1cac      	addeq	r4, r5, #2
	register int neg = 0, any, cutlim;
   20bfa:	f04f 0e00 	mov.w	lr, #0
   20bfe:	e7ca      	b.n	20b96 <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   20c00:	f043 0520 	orr.w	r5, r3, #32
   20c04:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   20c06:	2d19      	cmp	r5, #25
   20c08:	d80a      	bhi.n	20c20 <strtoul+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   20c0a:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   20c0e:	2d1a      	cmp	r5, #26
   20c10:	bf34      	ite	cc
   20c12:	2537      	movcc	r5, #55	; 0x37
   20c14:	2557      	movcs	r5, #87	; 0x57
   20c16:	1b5b      	subs	r3, r3, r5
   20c18:	e7da      	b.n	20bd0 <strtoul+0x62>
			any = -1;
   20c1a:	f04f 36ff 	mov.w	r6, #4294967295
   20c1e:	e7e3      	b.n	20be8 <strtoul+0x7a>
		}
	}
	if (any < 0) {
   20c20:	2e00      	cmp	r6, #0
   20c22:	da08      	bge.n	20c36 <strtoul+0xc8>
   20c24:	f7fb fec2 	bl	1c9ac <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   20c28:	2322      	movs	r3, #34	; 0x22
   20c2a:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   20c2c:	f04f 30ff 	mov.w	r0, #4294967295
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   20c30:	b947      	cbnz	r7, 20c44 <strtoul+0xd6>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   20c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   20c36:	f1be 0f00 	cmp.w	lr, #0
   20c3a:	d000      	beq.n	20c3e <strtoul+0xd0>
		acc = -acc;
   20c3c:	4240      	negs	r0, r0
	if (endptr != NULL) {
   20c3e:	2f00      	cmp	r7, #0
   20c40:	d0f7      	beq.n	20c32 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   20c42:	b10e      	cbz	r6, 20c48 <strtoul+0xda>
   20c44:	f104 3cff 	add.w	ip, r4, #4294967295
   20c48:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   20c4c:	e7f1      	b.n	20c32 <strtoul+0xc4>
	if (base == 0) {
   20c4e:	2330      	movs	r3, #48	; 0x30
   20c50:	2a00      	cmp	r2, #0
   20c52:	d1ae      	bne.n	20bb2 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   20c54:	2208      	movs	r2, #8
   20c56:	e7ac      	b.n	20bb2 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   20c58:	2b30      	cmp	r3, #48	; 0x30
   20c5a:	d0a2      	beq.n	20ba2 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   20c5c:	220a      	movs	r2, #10
   20c5e:	e7a8      	b.n	20bb2 <strtoul+0x44>

00020c60 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   20c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   20c64:	f891 8000 	ldrb.w	r8, [r1]
{
   20c68:	4605      	mov	r5, r0
	if (c != 0) {
   20c6a:	f1b8 0f00 	cmp.w	r8, #0
   20c6e:	d010      	beq.n	20c92 <strstr+0x32>
	c = *find++;
   20c70:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   20c72:	4620      	mov	r0, r4
   20c74:	f000 f83f 	bl	20cf6 <strlen>
   20c78:	4607      	mov	r7, r0
		do {
			do {
				sc = *s++;
   20c7a:	462e      	mov	r6, r5
   20c7c:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   20c80:	b163      	cbz	r3, 20c9c <strstr+0x3c>
					return NULL;
				}
			} while (sc != c);
   20c82:	4598      	cmp	r8, r3
   20c84:	d108      	bne.n	20c98 <strstr+0x38>
		} while (strncmp(s, find, len) != 0);
   20c86:	463a      	mov	r2, r7
   20c88:	4621      	mov	r1, r4
   20c8a:	4630      	mov	r0, r6
   20c8c:	f000 f84f 	bl	20d2e <strncmp>
   20c90:	b910      	cbnz	r0, 20c98 <strstr+0x38>
	s--;
	}
	return (char *)s;
}
   20c92:	4628      	mov	r0, r5
   20c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   20c98:	4635      	mov	r5, r6
   20c9a:	e7ee      	b.n	20c7a <strstr+0x1a>
					return NULL;
   20c9c:	461d      	mov	r5, r3
   20c9e:	e7f8      	b.n	20c92 <strstr+0x32>

00020ca0 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   20ca0:	3901      	subs	r1, #1
   20ca2:	4603      	mov	r3, r0
   20ca4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   20ca8:	b90a      	cbnz	r2, 20cae <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   20caa:	701a      	strb	r2, [r3, #0]

	return dest;
}
   20cac:	4770      	bx	lr
		*d = *s;
   20cae:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   20cb2:	e7f7      	b.n	20ca4 <strcpy+0x4>

00020cb4 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
   20cb4:	b570      	push	{r4, r5, r6, lr}
   20cb6:	3901      	subs	r1, #1
   20cb8:	4605      	mov	r5, r0
   20cba:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   20cbc:	b142      	cbz	r2, 20cd0 <strncpy+0x1c>
   20cbe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   20cc2:	1e56      	subs	r6, r2, #1
   20cc4:	b92b      	cbnz	r3, 20cd2 <strncpy+0x1e>
   20cc6:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   20cc8:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   20ccc:	42a2      	cmp	r2, r4
   20cce:	d1fb      	bne.n	20cc8 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   20cd0:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   20cd2:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   20cd6:	4632      	mov	r2, r6
   20cd8:	e7ef      	b.n	20cba <strncpy+0x6>

00020cda <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   20cda:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   20cdc:	4603      	mov	r3, r0
   20cde:	781a      	ldrb	r2, [r3, #0]
   20ce0:	428a      	cmp	r2, r1
   20ce2:	4618      	mov	r0, r3
   20ce4:	f103 0301 	add.w	r3, r3, #1
   20ce8:	d004      	beq.n	20cf4 <strchr+0x1a>
   20cea:	2a00      	cmp	r2, #0
   20cec:	d1f7      	bne.n	20cde <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   20cee:	2900      	cmp	r1, #0
   20cf0:	bf18      	it	ne
   20cf2:	2000      	movne	r0, #0
}
   20cf4:	4770      	bx	lr

00020cf6 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   20cf6:	4603      	mov	r3, r0
	size_t n = 0;
   20cf8:	2000      	movs	r0, #0

	while (*s != '\0') {
   20cfa:	5c1a      	ldrb	r2, [r3, r0]
   20cfc:	b902      	cbnz	r2, 20d00 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   20cfe:	4770      	bx	lr
		n++;
   20d00:	3001      	adds	r0, #1
   20d02:	e7fa      	b.n	20cfa <strlen+0x4>

00020d04 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   20d04:	4603      	mov	r3, r0
	size_t n = 0;
   20d06:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   20d08:	5c1a      	ldrb	r2, [r3, r0]
   20d0a:	b10a      	cbz	r2, 20d10 <strnlen+0xc>
   20d0c:	4288      	cmp	r0, r1
   20d0e:	d100      	bne.n	20d12 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   20d10:	4770      	bx	lr
		n++;
   20d12:	3001      	adds	r0, #1
   20d14:	e7f8      	b.n	20d08 <strnlen+0x4>

00020d16 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   20d16:	1e43      	subs	r3, r0, #1
   20d18:	3901      	subs	r1, #1
   20d1a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   20d1e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   20d22:	4282      	cmp	r2, r0
   20d24:	d101      	bne.n	20d2a <strcmp+0x14>
   20d26:	2a00      	cmp	r2, #0
   20d28:	d1f7      	bne.n	20d1a <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   20d2a:	1a10      	subs	r0, r2, r0
   20d2c:	4770      	bx	lr

00020d2e <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   20d2e:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   20d30:	2400      	movs	r4, #0
   20d32:	42a2      	cmp	r2, r4
   20d34:	d008      	beq.n	20d48 <strncmp+0x1a>
   20d36:	5d03      	ldrb	r3, [r0, r4]
   20d38:	5d0d      	ldrb	r5, [r1, r4]
   20d3a:	42ab      	cmp	r3, r5
   20d3c:	d102      	bne.n	20d44 <strncmp+0x16>
   20d3e:	3401      	adds	r4, #1
   20d40:	2b00      	cmp	r3, #0
   20d42:	d1f6      	bne.n	20d32 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   20d44:	1b58      	subs	r0, r3, r5
   20d46:	e000      	b.n	20d4a <strncmp+0x1c>
   20d48:	2000      	movs	r0, #0
}
   20d4a:	bd30      	pop	{r4, r5, pc}

00020d4c <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   20d4c:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   20d4e:	b15a      	cbz	r2, 20d68 <memcmp+0x1c>
   20d50:	3901      	subs	r1, #1
   20d52:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   20d54:	f810 2b01 	ldrb.w	r2, [r0], #1
   20d58:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   20d5c:	42a0      	cmp	r0, r4
   20d5e:	d001      	beq.n	20d64 <memcmp+0x18>
   20d60:	429a      	cmp	r2, r3
   20d62:	d0f7      	beq.n	20d54 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   20d64:	1ad0      	subs	r0, r2, r3
}
   20d66:	bd10      	pop	{r4, pc}
		return 0;
   20d68:	4610      	mov	r0, r2
   20d6a:	e7fc      	b.n	20d66 <memcmp+0x1a>

00020d6c <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   20d6c:	1a43      	subs	r3, r0, r1
   20d6e:	4293      	cmp	r3, r2
{
   20d70:	b510      	push	{r4, lr}
   20d72:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   20d76:	d308      	bcc.n	20d8a <memmove+0x1e>
   20d78:	3901      	subs	r1, #1
	char *dest = d;
   20d7a:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   20d7c:	429a      	cmp	r2, r3
   20d7e:	d00b      	beq.n	20d98 <memmove+0x2c>
			*dest = *src;
   20d80:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   20d84:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   20d88:	e7f8      	b.n	20d7c <memmove+0x10>
   20d8a:	440a      	add	r2, r1
			dest[n] = src[n];
   20d8c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   20d90:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   20d94:	428a      	cmp	r2, r1
   20d96:	d1f9      	bne.n	20d8c <memmove+0x20>
		}
	}

	return d;
}
   20d98:	bd10      	pop	{r4, pc}

00020d9a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   20d9a:	b510      	push	{r4, lr}
   20d9c:	1e43      	subs	r3, r0, #1
   20d9e:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   20da0:	4291      	cmp	r1, r2
   20da2:	d100      	bne.n	20da6 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   20da4:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   20da6:	f811 4b01 	ldrb.w	r4, [r1], #1
   20daa:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   20dae:	e7f7      	b.n	20da0 <memcpy+0x6>

00020db0 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   20db0:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   20db2:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   20db4:	4603      	mov	r3, r0
	while (n > 0) {
   20db6:	4293      	cmp	r3, r2
   20db8:	d100      	bne.n	20dbc <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   20dba:	4770      	bx	lr
		*(d_byte++) = c_byte;
   20dbc:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   20dc0:	e7f9      	b.n	20db6 <memset+0x6>

00020dc2 <_stdout_hook_default>:
}
   20dc2:	f04f 30ff 	mov.w	r0, #4294967295
   20dc6:	4770      	bx	lr

00020dc8 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   20dc8:	684b      	ldr	r3, [r1, #4]
   20dca:	2b01      	cmp	r3, #1
   20dcc:	dd07      	ble.n	20dde <sprintf_out+0x16>
		*(p->ptr) = c;
   20dce:	680b      	ldr	r3, [r1, #0]
   20dd0:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   20dd2:	680b      	ldr	r3, [r1, #0]
   20dd4:	3301      	adds	r3, #1
   20dd6:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   20dd8:	684b      	ldr	r3, [r1, #4]
   20dda:	3b01      	subs	r3, #1
   20ddc:	604b      	str	r3, [r1, #4]
}
   20dde:	2000      	movs	r0, #0
   20de0:	4770      	bx	lr

00020de2 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   20de2:	b084      	sub	sp, #16
   20de4:	ab04      	add	r3, sp, #16
   20de6:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   20dea:	f89d 3004 	ldrb.w	r3, [sp, #4]
   20dee:	2b06      	cmp	r3, #6
   20df0:	d108      	bne.n	20e04 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   20df2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20df6:	2201      	movs	r2, #1
   20df8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   20dfc:	f3bf 8f4f 	dsb	sy
        __WFE();
   20e00:	bf20      	wfe
    while (true)
   20e02:	e7fd      	b.n	20e00 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   20e04:	b004      	add	sp, #16
   20e06:	4770      	bx	lr

00020e08 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   20e08:	b084      	sub	sp, #16
   20e0a:	ab04      	add	r3, sp, #16
   20e0c:	e903 0007 	stmdb	r3, {r0, r1, r2}
   20e10:	2300      	movs	r3, #0
   20e12:	f383 8811 	msr	BASEPRI, r3
   20e16:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   20e1a:	b004      	add	sp, #16
   20e1c:	4770      	bx	lr

00020e1e <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   20e1e:	b510      	push	{r4, lr}
   20e20:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   20e22:	7801      	ldrb	r1, [r0, #0]
   20e24:	7822      	ldrb	r2, [r4, #0]
   20e26:	428a      	cmp	r2, r1
{
   20e28:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   20e2a:	d00e      	beq.n	20e4a <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   20e2c:	4669      	mov	r1, sp
   20e2e:	f7f3 ff41 	bl	14cb4 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   20e32:	a905      	add	r1, sp, #20
   20e34:	4620      	mov	r0, r4
   20e36:	f7f3 ff3d 	bl	14cb4 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   20e3a:	2210      	movs	r2, #16
   20e3c:	f10d 0115 	add.w	r1, sp, #21
   20e40:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   20e44:	f7ff ff82 	bl	20d4c <memcmp>
   20e48:	e007      	b.n	20e5a <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   20e4a:	2a01      	cmp	r2, #1
   20e4c:	d007      	beq.n	20e5e <bt_uuid_cmp+0x40>
   20e4e:	2a02      	cmp	r2, #2
   20e50:	d008      	beq.n	20e64 <bt_uuid_cmp+0x46>
   20e52:	b95a      	cbnz	r2, 20e6c <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   20e54:	8840      	ldrh	r0, [r0, #2]
   20e56:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   20e58:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   20e5a:	b00a      	add	sp, #40	; 0x28
   20e5c:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   20e5e:	6840      	ldr	r0, [r0, #4]
   20e60:	6863      	ldr	r3, [r4, #4]
   20e62:	e7f9      	b.n	20e58 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   20e64:	2210      	movs	r2, #16
   20e66:	1c61      	adds	r1, r4, #1
   20e68:	3001      	adds	r0, #1
   20e6a:	e7eb      	b.n	20e44 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   20e6c:	f06f 0015 	mvn.w	r0, #21
   20e70:	e7f3      	b.n	20e5a <bt_uuid_cmp+0x3c>

00020e72 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   20e72:	2a04      	cmp	r2, #4
{
   20e74:	b538      	push	{r3, r4, r5, lr}
   20e76:	460c      	mov	r4, r1
	switch (data_len) {
   20e78:	d00d      	beq.n	20e96 <bt_uuid_create+0x24>
   20e7a:	2a10      	cmp	r2, #16
   20e7c:	d019      	beq.n	20eb2 <bt_uuid_create+0x40>
   20e7e:	2a02      	cmp	r2, #2
   20e80:	f04f 0300 	mov.w	r3, #0
   20e84:	d11b      	bne.n	20ebe <bt_uuid_create+0x4c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   20e86:	7003      	strb	r3, [r0, #0]
   20e88:	784a      	ldrb	r2, [r1, #1]
   20e8a:	780b      	ldrb	r3, [r1, #0]
   20e8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   20e90:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   20e92:	2001      	movs	r0, #1
}
   20e94:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   20e96:	2301      	movs	r3, #1
   20e98:	7003      	strb	r3, [r0, #0]
   20e9a:	78a2      	ldrb	r2, [r4, #2]
   20e9c:	78c9      	ldrb	r1, [r1, #3]
   20e9e:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   20ea0:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   20ea4:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   20ea6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   20eaa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   20eae:	6042      	str	r2, [r0, #4]
		break;
   20eb0:	e7ef      	b.n	20e92 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   20eb2:	2302      	movs	r3, #2
   20eb4:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   20eb8:	f7ff ff6f 	bl	20d9a <memcpy>
		break;
   20ebc:	e7e9      	b.n	20e92 <bt_uuid_create+0x20>
	switch (data_len) {
   20ebe:	4618      	mov	r0, r3
   20ec0:	e7e8      	b.n	20e94 <bt_uuid_create+0x22>

00020ec2 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   20ec2:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   20ec4:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   20ec6:	2106      	movs	r1, #6
{
   20ec8:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   20eca:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   20ece:	f7fa fec3 	bl	1bc58 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   20ed2:	b918      	cbnz	r0, 20edc <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   20ed4:	79a3      	ldrb	r3, [r4, #6]
   20ed6:	f063 033f 	orn	r3, r3, #63	; 0x3f
   20eda:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   20edc:	bd10      	pop	{r4, pc}

00020ede <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   20ede:	280f      	cmp	r0, #15
   20ee0:	d806      	bhi.n	20ef0 <bt_hci_evt_get_flags+0x12>
   20ee2:	280d      	cmp	r0, #13
   20ee4:	d80b      	bhi.n	20efe <bt_hci_evt_get_flags+0x20>
   20ee6:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   20ee8:	bf14      	ite	ne
   20eea:	2002      	movne	r0, #2
   20eec:	2003      	moveq	r0, #3
   20eee:	4770      	bx	lr
	switch (evt) {
   20ef0:	2813      	cmp	r0, #19
   20ef2:	d004      	beq.n	20efe <bt_hci_evt_get_flags+0x20>
   20ef4:	281a      	cmp	r0, #26
   20ef6:	bf14      	ite	ne
   20ef8:	2002      	movne	r0, #2
   20efa:	2001      	moveq	r0, #1
   20efc:	4770      	bx	lr
   20efe:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   20f00:	4770      	bx	lr

00020f02 <bt_addr_le_copy>:
   20f02:	2207      	movs	r2, #7
   20f04:	f7ff bf49 	b.w	20d9a <memcpy>

00020f08 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   20f08:	f7f4 be14 	b.w	15b34 <bt_le_create_conn_legacy>

00020f0c <bt_hci_disconnect>:
{
   20f0c:	b570      	push	{r4, r5, r6, lr}
   20f0e:	4606      	mov	r6, r0
   20f10:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   20f12:	f240 4006 	movw	r0, #1030	; 0x406
   20f16:	2103      	movs	r1, #3
   20f18:	f7f4 fb08 	bl	1552c <bt_hci_cmd_create>
	if (!buf) {
   20f1c:	4604      	mov	r4, r0
   20f1e:	b168      	cbz	r0, 20f3c <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   20f20:	2103      	movs	r1, #3
   20f22:	3008      	adds	r0, #8
   20f24:	f001 f8f9 	bl	2211a <net_buf_simple_add>
	disconn->reason = reason;
   20f28:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   20f2a:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   20f2c:	4621      	mov	r1, r4
   20f2e:	2200      	movs	r2, #0
}
   20f30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   20f34:	f240 4006 	movw	r0, #1030	; 0x406
   20f38:	f7f4 bb30 	b.w	1559c <bt_hci_cmd_send_sync>
}
   20f3c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20f40:	bd70      	pop	{r4, r5, r6, pc}

00020f42 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   20f42:	8802      	ldrh	r2, [r0, #0]
   20f44:	8843      	ldrh	r3, [r0, #2]
   20f46:	429a      	cmp	r2, r3
{
   20f48:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   20f4a:	d818      	bhi.n	20f7e <bt_le_conn_params_valid+0x3c>
   20f4c:	2a05      	cmp	r2, #5
   20f4e:	d916      	bls.n	20f7e <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   20f50:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   20f54:	d813      	bhi.n	20f7e <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   20f56:	8884      	ldrh	r4, [r0, #4]
   20f58:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   20f5c:	d20f      	bcs.n	20f7e <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   20f5e:	88c1      	ldrh	r1, [r0, #6]
   20f60:	f1a1 020a 	sub.w	r2, r1, #10
   20f64:	b292      	uxth	r2, r2
   20f66:	f640 4076 	movw	r0, #3190	; 0xc76
   20f6a:	4282      	cmp	r2, r0
   20f6c:	d807      	bhi.n	20f7e <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   20f6e:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   20f72:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   20f76:	bf34      	ite	cc
   20f78:	2001      	movcc	r0, #1
   20f7a:	2000      	movcs	r0, #0
}
   20f7c:	bd10      	pop	{r4, pc}
		return false;
   20f7e:	2000      	movs	r0, #0
   20f80:	e7fc      	b.n	20f7c <bt_le_conn_params_valid+0x3a>

00020f82 <bt_le_set_data_len>:
{
   20f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20f84:	4607      	mov	r7, r0
   20f86:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   20f88:	f242 0022 	movw	r0, #8226	; 0x2022
   20f8c:	2106      	movs	r1, #6
{
   20f8e:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   20f90:	f7f4 facc 	bl	1552c <bt_hci_cmd_create>
	if (!buf) {
   20f94:	4604      	mov	r4, r0
   20f96:	b170      	cbz	r0, 20fb6 <bt_le_set_data_len+0x34>
   20f98:	2106      	movs	r1, #6
   20f9a:	3008      	adds	r0, #8
   20f9c:	f001 f8bd 	bl	2211a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   20fa0:	883b      	ldrh	r3, [r7, #0]
   20fa2:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   20fa4:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   20fa6:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   20fa8:	4621      	mov	r1, r4
   20faa:	f242 0022 	movw	r0, #8226	; 0x2022
}
   20fae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   20fb2:	f7f4 be47 	b.w	15c44 <bt_hci_cmd_send>
}
   20fb6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020fbc <bt_le_set_phy>:
{
   20fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20fc0:	4680      	mov	r8, r0
   20fc2:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   20fc4:	f242 0032 	movw	r0, #8242	; 0x2032
   20fc8:	2107      	movs	r1, #7
{
   20fca:	f89d 9020 	ldrb.w	r9, [sp, #32]
   20fce:	4616      	mov	r6, r2
   20fd0:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   20fd2:	f7f4 faab 	bl	1552c <bt_hci_cmd_create>
	if (!buf) {
   20fd6:	4604      	mov	r4, r0
   20fd8:	b190      	cbz	r0, 21000 <bt_le_set_phy+0x44>
   20fda:	2107      	movs	r1, #7
   20fdc:	3008      	adds	r0, #8
   20fde:	f001 f89c 	bl	2211a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   20fe2:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   20fe6:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   20fe8:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   20fea:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   20fec:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   20fee:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   20ff2:	4621      	mov	r1, r4
   20ff4:	f242 0032 	movw	r0, #8242	; 0x2032
}
   20ff8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   20ffc:	f7f4 be22 	b.w	15c44 <bt_hci_cmd_send>
}
   21000:	f06f 0068 	mvn.w	r0, #104	; 0x68
   21004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00021008 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   21008:	6880      	ldr	r0, [r0, #8]
   2100a:	f7f4 bedd 	b.w	15dc8 <bt_hci_le_enh_conn_complete>

0002100e <le_legacy_conn_complete>:
{
   2100e:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   21010:	6881      	ldr	r1, [r0, #8]
{
   21012:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   21014:	780b      	ldrb	r3, [r1, #0]
   21016:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   2101a:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   2101e:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   21022:	78cb      	ldrb	r3, [r1, #3]
   21024:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   21028:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   2102c:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   21030:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   21034:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   21038:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   2103c:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   21040:	7c4b      	ldrb	r3, [r1, #17]
   21042:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   21046:	a803      	add	r0, sp, #12
   21048:	3104      	adds	r1, #4
   2104a:	f7ff ff5a 	bl	20f02 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   2104e:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   21050:	4669      	mov	r1, sp
   21052:	2206      	movs	r2, #6
   21054:	f10d 0013 	add.w	r0, sp, #19
   21058:	9400      	str	r4, [sp, #0]
   2105a:	f8ad 4004 	strh.w	r4, [sp, #4]
   2105e:	f7ff fe9c 	bl	20d9a <memcpy>
   21062:	2206      	movs	r2, #6
   21064:	4669      	mov	r1, sp
   21066:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   2106a:	9400      	str	r4, [sp, #0]
   2106c:	f8ad 4004 	strh.w	r4, [sp, #4]
   21070:	f7ff fe93 	bl	20d9a <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   21074:	a802      	add	r0, sp, #8
   21076:	f7f4 fea7 	bl	15dc8 <bt_hci_le_enh_conn_complete>
}
   2107a:	b00a      	add	sp, #40	; 0x28
   2107c:	bd10      	pop	{r4, pc}

0002107e <bt_addr_le_is_bonded>:
}
   2107e:	2000      	movs	r0, #0
   21080:	4770      	bx	lr

00021082 <bt_lookup_id_addr>:
}
   21082:	4608      	mov	r0, r1
   21084:	4770      	bx	lr

00021086 <bt_id_set_private_addr>:
{
   21086:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   21088:	2106      	movs	r1, #6
   2108a:	4668      	mov	r0, sp
   2108c:	f7fa fde4 	bl	1bc58 <bt_rand>
	if (err) {
   21090:	b940      	cbnz	r0, 210a4 <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   21092:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   21096:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   21098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2109c:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   210a0:	f7f5 fb42 	bl	16728 <set_random_address>
}
   210a4:	b003      	add	sp, #12
   210a6:	f85d fb04 	ldr.w	pc, [sp], #4

000210aa <bt_id_scan_random_addr_check>:
}
   210aa:	2001      	movs	r0, #1
   210ac:	4770      	bx	lr

000210ae <atomic_and>:
{
   210ae:	4603      	mov	r3, r0
}
   210b0:	f3bf 8f5b 	dmb	ish
   210b4:	e853 0f00 	ldrex	r0, [r3]
   210b8:	ea00 0201 	and.w	r2, r0, r1
   210bc:	e843 2c00 	strex	ip, r2, [r3]
   210c0:	f1bc 0f00 	cmp.w	ip, #0
   210c4:	d1f6      	bne.n	210b4 <atomic_and+0x6>
   210c6:	f3bf 8f5b 	dmb	ish
   210ca:	4770      	bx	lr

000210cc <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   210cc:	f3bf 8f5b 	dmb	ish
   210d0:	6800      	ldr	r0, [r0, #0]
   210d2:	f3bf 8f5b 	dmb	ish
}
   210d6:	4770      	bx	lr

000210d8 <atomic_dec>:
{
   210d8:	4603      	mov	r3, r0
}
   210da:	f3bf 8f5b 	dmb	ish
   210de:	e853 0f00 	ldrex	r0, [r3]
   210e2:	1e42      	subs	r2, r0, #1
   210e4:	e843 2100 	strex	r1, r2, [r3]
   210e8:	2900      	cmp	r1, #0
   210ea:	d1f8      	bne.n	210de <atomic_dec+0x6>
   210ec:	f3bf 8f5b 	dmb	ish
   210f0:	4770      	bx	lr

000210f2 <tx_notify>:
{
   210f2:	b570      	push	{r4, r5, r6, lr}
   210f4:	4604      	mov	r4, r0
	__asm__ volatile(
   210f6:	f04f 0240 	mov.w	r2, #64	; 0x40
   210fa:	f3ef 8311 	mrs	r3, BASEPRI
   210fe:	f382 8812 	msr	BASEPRI_MAX, r2
   21102:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   21106:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   21108:	b920      	cbnz	r0, 21114 <tx_notify+0x22>
	__asm__ volatile(
   2110a:	f383 8811 	msr	BASEPRI, r3
   2110e:	f3bf 8f6f 	isb	sy
}
   21112:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21114:	6a61      	ldr	r1, [r4, #36]	; 0x24
   21116:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   21118:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2111a:	4288      	cmp	r0, r1
	list->tail = node;
   2111c:	bf08      	it	eq
   2111e:	6262      	streq	r2, [r4, #36]	; 0x24
   21120:	f383 8811 	msr	BASEPRI, r3
   21124:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   21128:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   2112c:	f7f5 ff88 	bl	17040 <tx_free>
		cb(conn, user_data);
   21130:	4631      	mov	r1, r6
   21132:	4620      	mov	r0, r4
   21134:	47a8      	blx	r5
	while (1) {
   21136:	e7de      	b.n	210f6 <tx_notify+0x4>

00021138 <tx_complete_work>:
	tx_notify(conn);
   21138:	3828      	subs	r0, #40	; 0x28
   2113a:	f7ff bfda 	b.w	210f2 <tx_notify>

0002113e <bt_conn_reset_rx_state>:
{
   2113e:	b510      	push	{r4, lr}
   21140:	4604      	mov	r4, r0
	if (!conn->rx) {
   21142:	6900      	ldr	r0, [r0, #16]
   21144:	b118      	cbz	r0, 2114e <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   21146:	f7f8 fecd 	bl	19ee4 <net_buf_unref>
	conn->rx = NULL;
   2114a:	2300      	movs	r3, #0
   2114c:	6123      	str	r3, [r4, #16]
}
   2114e:	bd10      	pop	{r4, pc}

00021150 <conn_cleanup>:
{
   21150:	b570      	push	{r4, r5, r6, lr}
   21152:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   21154:	f100 0638 	add.w	r6, r0, #56	; 0x38
   21158:	2200      	movs	r2, #0
   2115a:	2300      	movs	r3, #0
   2115c:	4630      	mov	r0, r6
   2115e:	f000 ff8b 	bl	22078 <net_buf_get>
   21162:	4605      	mov	r5, r0
   21164:	b950      	cbnz	r0, 2117c <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   21166:	4620      	mov	r0, r4
   21168:	f7ff ffe9 	bl	2113e <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2116c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   21170:	2200      	movs	r2, #0
}
   21172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   21176:	2300      	movs	r3, #0
   21178:	f7fc bb1c 	b.w	1d7b4 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   2117c:	6968      	ldr	r0, [r5, #20]
   2117e:	b108      	cbz	r0, 21184 <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   21180:	f7f5 ff5e 	bl	17040 <tx_free>
		net_buf_unref(buf);
   21184:	4628      	mov	r0, r5
   21186:	f7f8 fead 	bl	19ee4 <net_buf_unref>
   2118a:	e7e5      	b.n	21158 <conn_cleanup+0x8>

0002118c <bt_conn_ref>:
{
   2118c:	b510      	push	{r4, lr}
   2118e:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   21190:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   21194:	4610      	mov	r0, r2
   21196:	f7ff ff99 	bl	210cc <atomic_get>
		if (!old) {
   2119a:	b180      	cbz	r0, 211be <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2119c:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   211a0:	1c41      	adds	r1, r0, #1
   211a2:	e852 4f00 	ldrex	r4, [r2]
   211a6:	4284      	cmp	r4, r0
   211a8:	d104      	bne.n	211b4 <bt_conn_ref+0x28>
   211aa:	e842 1c00 	strex	ip, r1, [r2]
   211ae:	f1bc 0f00 	cmp.w	ip, #0
   211b2:	d1f6      	bne.n	211a2 <bt_conn_ref+0x16>
   211b4:	f3bf 8f5b 	dmb	ish
   211b8:	d1ec      	bne.n	21194 <bt_conn_ref+0x8>
}
   211ba:	4618      	mov	r0, r3
   211bc:	bd10      	pop	{r4, pc}
			return NULL;
   211be:	4603      	mov	r3, r0
   211c0:	e7fb      	b.n	211ba <bt_conn_ref+0x2e>

000211c2 <conn_lookup_handle>:
{
   211c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   211c6:	4606      	mov	r6, r0
   211c8:	460d      	mov	r5, r1
   211ca:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   211cc:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   211ce:	f04f 08c0 	mov.w	r8, #192	; 0xc0
	for (i = 0; i < size; i++) {
   211d2:	42ac      	cmp	r4, r5
   211d4:	d102      	bne.n	211dc <conn_lookup_handle+0x1a>
	return NULL;
   211d6:	2000      	movs	r0, #0
}
   211d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   211dc:	fb08 6004 	mla	r0, r8, r4, r6
   211e0:	f7ff ffd4 	bl	2118c <bt_conn_ref>
		if (!conn) {
   211e4:	b158      	cbz	r0, 211fe <conn_lookup_handle+0x3c>
		if (!bt_conn_is_handle_valid(conn)) {
   211e6:	7a83      	ldrb	r3, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   211e8:	2b01      	cmp	r3, #1
   211ea:	d002      	beq.n	211f2 <conn_lookup_handle+0x30>
   211ec:	3b07      	subs	r3, #7
   211ee:	2b01      	cmp	r3, #1
   211f0:	d802      	bhi.n	211f8 <conn_lookup_handle+0x36>
		if (conn->handle != handle) {
   211f2:	8803      	ldrh	r3, [r0, #0]
   211f4:	42bb      	cmp	r3, r7
   211f6:	d0ef      	beq.n	211d8 <conn_lookup_handle+0x16>
	old = atomic_dec(&conn->ref);
   211f8:	30b8      	adds	r0, #184	; 0xb8
   211fa:	f7ff ff6d 	bl	210d8 <atomic_dec>
	for (i = 0; i < size; i++) {
   211fe:	3401      	adds	r4, #1
   21200:	e7e7      	b.n	211d2 <conn_lookup_handle+0x10>

00021202 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   21202:	30b8      	adds	r0, #184	; 0xb8
   21204:	f7ff bf68 	b.w	210d8 <atomic_dec>

00021208 <bt_conn_connected>:
{
   21208:	b510      	push	{r4, lr}
   2120a:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2120c:	f7f6 fe34 	bl	17e78 <bt_l2cap_connected>
	notify_connected(conn);
   21210:	4620      	mov	r0, r4
}
   21212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   21216:	f7f5 bf1d 	b.w	17054 <notify_connected>

0002121a <bt_conn_get_security>:
}
   2121a:	2001      	movs	r0, #1
   2121c:	4770      	bx	lr

0002121e <bt_conn_is_peer_addr_le>:
{
   2121e:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   21220:	7a03      	ldrb	r3, [r0, #8]
   21222:	428b      	cmp	r3, r1
{
   21224:	4604      	mov	r4, r0
   21226:	4615      	mov	r5, r2
	if (id != conn->id) {
   21228:	d115      	bne.n	21256 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2122a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2122e:	2207      	movs	r2, #7
   21230:	4628      	mov	r0, r5
   21232:	f7ff fd8b 	bl	20d4c <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   21236:	b180      	cbz	r0, 2125a <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   21238:	78e3      	ldrb	r3, [r4, #3]
   2123a:	2207      	movs	r2, #7
   2123c:	b943      	cbnz	r3, 21250 <bt_conn_is_peer_addr_le+0x32>
   2123e:	f104 0196 	add.w	r1, r4, #150	; 0x96
   21242:	4628      	mov	r0, r5
   21244:	f7ff fd82 	bl	20d4c <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   21248:	fab0 f080 	clz	r0, r0
   2124c:	0940      	lsrs	r0, r0, #5
}
   2124e:	bd38      	pop	{r3, r4, r5, pc}
   21250:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   21254:	e7f5      	b.n	21242 <bt_conn_is_peer_addr_le+0x24>
		return false;
   21256:	2000      	movs	r0, #0
   21258:	e7f9      	b.n	2124e <bt_conn_is_peer_addr_le+0x30>
		return true;
   2125a:	2001      	movs	r0, #1
   2125c:	e7f7      	b.n	2124e <bt_conn_is_peer_addr_le+0x30>

0002125e <bt_conn_le_conn_update>:
{
   2125e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21260:	4607      	mov	r7, r0
   21262:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   21264:	f242 0013 	movw	r0, #8211	; 0x2013
   21268:	210e      	movs	r1, #14
   2126a:	f7f4 f95f 	bl	1552c <bt_hci_cmd_create>
	if (!buf) {
   2126e:	4606      	mov	r6, r0
   21270:	b1d0      	cbz	r0, 212a8 <bt_conn_le_conn_update+0x4a>
   21272:	210e      	movs	r1, #14
   21274:	3008      	adds	r0, #8
   21276:	f000 ff50 	bl	2211a <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   2127a:	220e      	movs	r2, #14
   2127c:	4604      	mov	r4, r0
   2127e:	2100      	movs	r1, #0
   21280:	f7ff fd96 	bl	20db0 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   21284:	883b      	ldrh	r3, [r7, #0]
   21286:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   21288:	882b      	ldrh	r3, [r5, #0]
   2128a:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2128c:	886b      	ldrh	r3, [r5, #2]
   2128e:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   21290:	88ab      	ldrh	r3, [r5, #4]
   21292:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   21294:	88eb      	ldrh	r3, [r5, #6]
   21296:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   21298:	4631      	mov	r1, r6
   2129a:	2200      	movs	r2, #0
}
   2129c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   212a0:	f242 0013 	movw	r0, #8211	; 0x2013
   212a4:	f7f4 b97a 	b.w	1559c <bt_hci_cmd_send_sync>
}
   212a8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   212ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000212ae <l2cap_connected>:
}
   212ae:	4770      	bx	lr

000212b0 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   212b0:	3010      	adds	r0, #16
   212b2:	f001 bcab 	b.w	22c0c <k_work_cancel_delayable>

000212b6 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   212b6:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   212b8:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   212ba:	b17b      	cbz	r3, 212dc <bt_l2cap_chan_remove+0x26>
   212bc:	3b08      	subs	r3, #8
   212be:	2200      	movs	r2, #0
   212c0:	b163      	cbz	r3, 212dc <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   212c2:	428b      	cmp	r3, r1
   212c4:	f103 0408 	add.w	r4, r3, #8
   212c8:	d10f      	bne.n	212ea <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   212ca:	688b      	ldr	r3, [r1, #8]
   212cc:	b93a      	cbnz	r2, 212de <bt_l2cap_chan_remove+0x28>
   212ce:	6d42      	ldr	r2, [r0, #84]	; 0x54
	list->head = node;
   212d0:	6503      	str	r3, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   212d2:	4294      	cmp	r4, r2
   212d4:	d100      	bne.n	212d8 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   212d6:	6543      	str	r3, [r0, #84]	; 0x54
	parent->next = child;
   212d8:	2300      	movs	r3, #0
   212da:	608b      	str	r3, [r1, #8]
}
   212dc:	bd10      	pop	{r4, pc}
   212de:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   212e0:	6d43      	ldr	r3, [r0, #84]	; 0x54
   212e2:	429c      	cmp	r4, r3
	list->tail = node;
   212e4:	bf08      	it	eq
   212e6:	6542      	streq	r2, [r0, #84]	; 0x54
}
   212e8:	e7f6      	b.n	212d8 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   212ea:	2c00      	cmp	r4, #0
   212ec:	d0f6      	beq.n	212dc <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   212ee:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   212f0:	2b00      	cmp	r3, #0
   212f2:	d0f3      	beq.n	212dc <bt_l2cap_chan_remove+0x26>
   212f4:	3b08      	subs	r3, #8
   212f6:	4622      	mov	r2, r4
   212f8:	e7e2      	b.n	212c0 <bt_l2cap_chan_remove+0xa>

000212fa <bt_l2cap_chan_del>:
{
   212fa:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   212fc:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   21300:	4604      	mov	r4, r0
	if (!chan->conn) {
   21302:	b123      	cbz	r3, 2130e <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   21304:	686b      	ldr	r3, [r5, #4]
   21306:	b103      	cbz	r3, 2130a <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   21308:	4798      	blx	r3
	chan->conn = NULL;
   2130a:	2300      	movs	r3, #0
   2130c:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2130e:	68e3      	ldr	r3, [r4, #12]
   21310:	b10b      	cbz	r3, 21316 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   21312:	4620      	mov	r0, r4
   21314:	4798      	blx	r3
	if (ops->released) {
   21316:	69eb      	ldr	r3, [r5, #28]
   21318:	b11b      	cbz	r3, 21322 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2131a:	4620      	mov	r0, r4
}
   2131c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   21320:	4718      	bx	r3
}
   21322:	bd70      	pop	{r4, r5, r6, pc}

00021324 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   21324:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   21326:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   21328:	b18b      	cbz	r3, 2134e <bt_l2cap_disconnected+0x2a>
   2132a:	f1b3 0008 	subs.w	r0, r3, #8
   2132e:	d00e      	beq.n	2134e <bt_l2cap_disconnected+0x2a>
   21330:	681c      	ldr	r4, [r3, #0]
   21332:	b104      	cbz	r4, 21336 <bt_l2cap_disconnected+0x12>
   21334:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   21336:	f7ff ffe0 	bl	212fa <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2133a:	b144      	cbz	r4, 2134e <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2133c:	f114 0308 	adds.w	r3, r4, #8
   21340:	d002      	beq.n	21348 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21342:	68a3      	ldr	r3, [r4, #8]
   21344:	b103      	cbz	r3, 21348 <bt_l2cap_disconnected+0x24>
   21346:	3b08      	subs	r3, #8
{
   21348:	4620      	mov	r0, r4
   2134a:	461c      	mov	r4, r3
   2134c:	e7f3      	b.n	21336 <bt_l2cap_disconnected+0x12>
}
   2134e:	bd10      	pop	{r4, pc}

00021350 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   21350:	3104      	adds	r1, #4
   21352:	f7f6 b9f3 	b.w	1773c <bt_conn_create_pdu_timeout>

00021356 <bt_l2cap_send_cb>:
{
   21356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2135a:	4614      	mov	r4, r2
   2135c:	4605      	mov	r5, r0
   2135e:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   21360:	f102 0008 	add.w	r0, r2, #8
   21364:	2104      	movs	r1, #4
   21366:	461e      	mov	r6, r3
   21368:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2136c:	f000 fee4 	bl	22138 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   21370:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   21372:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   21374:	3a04      	subs	r2, #4
   21376:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   21378:	4643      	mov	r3, r8
   2137a:	4632      	mov	r2, r6
   2137c:	4621      	mov	r1, r4
   2137e:	4628      	mov	r0, r5
}
   21380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   21384:	f7f6 b802 	b.w	1738c <bt_conn_send_cb>

00021388 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   21388:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2138a:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2138c:	2202      	movs	r2, #2
   2138e:	2001      	movs	r0, #1
   21390:	f7f6 fd24 	bl	17ddc <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   21394:	4604      	mov	r4, r0
   21396:	b198      	cbz	r0, 213c0 <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   21398:	2102      	movs	r1, #2
   2139a:	3008      	adds	r0, #8
   2139c:	f000 febd 	bl	2211a <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   213a0:	2300      	movs	r3, #0
   213a2:	7003      	strb	r3, [r0, #0]
   213a4:	7043      	strb	r3, [r0, #1]
   213a6:	4622      	mov	r2, r4
   213a8:	9300      	str	r3, [sp, #0]
   213aa:	2105      	movs	r1, #5
   213ac:	4628      	mov	r0, r5
   213ae:	f7ff ffd2 	bl	21356 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   213b2:	b128      	cbz	r0, 213c0 <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   213b4:	4620      	mov	r0, r4
}
   213b6:	b003      	add	sp, #12
   213b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   213bc:	f7f8 bd92 	b.w	19ee4 <net_buf_unref>
}
   213c0:	b003      	add	sp, #12
   213c2:	bd30      	pop	{r4, r5, pc}

000213c4 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   213c4:	6d00      	ldr	r0, [r0, #80]	; 0x50
   213c6:	b160      	cbz	r0, 213e2 <bt_l2cap_le_lookup_tx_cid+0x1e>
   213c8:	3808      	subs	r0, #8
   213ca:	b900      	cbnz	r0, 213ce <bt_l2cap_le_lookup_tx_cid+0xa>
   213cc:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   213ce:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   213d2:	428b      	cmp	r3, r1
   213d4:	d005      	beq.n	213e2 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   213d6:	f110 0308 	adds.w	r3, r0, #8
   213da:	d001      	beq.n	213e0 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   213dc:	6880      	ldr	r0, [r0, #8]
   213de:	e7f2      	b.n	213c6 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   213e0:	4618      	mov	r0, r3
}
   213e2:	4770      	bx	lr

000213e4 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   213e4:	6d00      	ldr	r0, [r0, #80]	; 0x50
   213e6:	b160      	cbz	r0, 21402 <bt_l2cap_le_lookup_rx_cid+0x1e>
   213e8:	3808      	subs	r0, #8
   213ea:	b900      	cbnz	r0, 213ee <bt_l2cap_le_lookup_rx_cid+0xa>
   213ec:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   213ee:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   213f2:	428b      	cmp	r3, r1
   213f4:	d005      	beq.n	21402 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   213f6:	f110 0308 	adds.w	r3, r0, #8
   213fa:	d001      	beq.n	21400 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   213fc:	6880      	ldr	r0, [r0, #8]
   213fe:	e7f2      	b.n	213e6 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   21400:	4618      	mov	r0, r3
}
   21402:	4770      	bx	lr

00021404 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   21404:	4770      	bx	lr

00021406 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   21406:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   21408:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2140a:	b128      	cbz	r0, 21418 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2140c:	6859      	ldr	r1, [r3, #4]
   2140e:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   21410:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21412:	4288      	cmp	r0, r1
	list->tail = node;
   21414:	bf08      	it	eq
   21416:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   21418:	4770      	bx	lr

0002141a <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2141a:	4603      	mov	r3, r0
   2141c:	6800      	ldr	r0, [r0, #0]
   2141e:	2200      	movs	r2, #0
   21420:	b900      	cbnz	r0, 21424 <sys_slist_find_and_remove+0xa>
   21422:	4770      	bx	lr
   21424:	4288      	cmp	r0, r1
   21426:	d110      	bne.n	2144a <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   21428:	6808      	ldr	r0, [r1, #0]
   2142a:	b942      	cbnz	r2, 2143e <sys_slist_find_and_remove+0x24>
   2142c:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   2142e:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   21430:	4291      	cmp	r1, r2
   21432:	d100      	bne.n	21436 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   21434:	6058      	str	r0, [r3, #4]
	parent->next = child;
   21436:	2300      	movs	r3, #0
   21438:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2143a:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   2143c:	4770      	bx	lr
	parent->next = child;
   2143e:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   21440:	6858      	ldr	r0, [r3, #4]
   21442:	4281      	cmp	r1, r0
	list->tail = node;
   21444:	bf08      	it	eq
   21446:	605a      	streq	r2, [r3, #4]
}
   21448:	e7f5      	b.n	21436 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2144a:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2144c:	6800      	ldr	r0, [r0, #0]
   2144e:	e7e7      	b.n	21420 <sys_slist_find_and_remove+0x6>

00021450 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   21450:	4603      	mov	r3, r0
	size_t bytes = 0;
   21452:	2000      	movs	r0, #0

	while (buf) {
   21454:	b903      	cbnz	r3, 21458 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   21456:	4770      	bx	lr
		bytes += buf->len;
   21458:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   2145a:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   2145c:	4410      	add	r0, r2
		buf = buf->frags;
   2145e:	e7f9      	b.n	21454 <net_buf_frags_len+0x4>

00021460 <att_sent>:
	if (chan->ops->sent) {
   21460:	684b      	ldr	r3, [r1, #4]
   21462:	695b      	ldr	r3, [r3, #20]
{
   21464:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   21466:	b103      	cbz	r3, 2146a <att_sent+0xa>
		chan->ops->sent(chan);
   21468:	4718      	bx	r3
}
   2146a:	4770      	bx	lr

0002146c <attr_read_type_cb>:
{
   2146c:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2146e:	68d4      	ldr	r4, [r2, #12]
   21470:	7823      	ldrb	r3, [r4, #0]
   21472:	3102      	adds	r1, #2
   21474:	b913      	cbnz	r3, 2147c <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   21476:	7021      	strb	r1, [r4, #0]
	return true;
   21478:	2001      	movs	r0, #1
   2147a:	e006      	b.n	2148a <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2147c:	428b      	cmp	r3, r1
   2147e:	d0fb      	beq.n	21478 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   21480:	8983      	ldrh	r3, [r0, #12]
   21482:	3b02      	subs	r3, #2
   21484:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   21486:	2000      	movs	r0, #0
   21488:	6110      	str	r0, [r2, #16]
}
   2148a:	bd10      	pop	{r4, pc}

0002148c <att_prepare_write_req>:
}
   2148c:	2006      	movs	r0, #6
   2148e:	4770      	bx	lr

00021490 <att_op_get_type>:
	switch (op) {
   21490:	281e      	cmp	r0, #30
   21492:	d816      	bhi.n	214c2 <att_op_get_type+0x32>
   21494:	b308      	cbz	r0, 214da <att_op_get_type+0x4a>
   21496:	1e43      	subs	r3, r0, #1
   21498:	2b1d      	cmp	r3, #29
   2149a:	d81e      	bhi.n	214da <att_op_get_type+0x4a>
   2149c:	e8df f003 	tbb	[pc, r3]
   214a0:	23172317 	.word	0x23172317
   214a4:	23172317 	.word	0x23172317
   214a8:	23172317 	.word	0x23172317
   214ac:	23172317 	.word	0x23172317
   214b0:	1d172317 	.word	0x1d172317
   214b4:	2317231d 	.word	0x2317231d
   214b8:	1d191d17 	.word	0x1d191d17
   214bc:	0f1b      	.short	0x0f1b
   214be:	2004      	movs	r0, #4
   214c0:	4770      	bx	lr
   214c2:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   214c6:	2b52      	cmp	r3, #82	; 0x52
   214c8:	d107      	bne.n	214da <att_op_get_type+0x4a>
		return ATT_COMMAND;
   214ca:	2000      	movs	r0, #0
}
   214cc:	4770      	bx	lr
		return ATT_RESPONSE;
   214ce:	2002      	movs	r0, #2
   214d0:	4770      	bx	lr
		return ATT_NOTIFICATION;
   214d2:	2003      	movs	r0, #3
   214d4:	4770      	bx	lr
		return ATT_INDICATION;
   214d6:	2005      	movs	r0, #5
   214d8:	4770      	bx	lr
		return ATT_COMMAND;
   214da:	f010 0f40 	tst.w	r0, #64	; 0x40
   214de:	bf0c      	ite	eq
   214e0:	2006      	moveq	r0, #6
   214e2:	2000      	movne	r0, #0
   214e4:	4770      	bx	lr
		return ATT_REQUEST;
   214e6:	2001      	movs	r0, #1
   214e8:	4770      	bx	lr

000214ea <chan_req_send>:
{
   214ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   214ec:	688f      	ldr	r7, [r1, #8]
{
   214ee:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   214f0:	4638      	mov	r0, r7
{
   214f2:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   214f4:	f7ff ffac 	bl	21450 <net_buf_frags_len>
   214f8:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   214fc:	4283      	cmp	r3, r0
   214fe:	d30d      	bcc.n	2151c <chan_req_send+0x32>
	req->buf = NULL;
   21500:	2600      	movs	r6, #0
	chan->req = req;
   21502:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   21506:	4632      	mov	r2, r6
	req->buf = NULL;
   21508:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   2150a:	4620      	mov	r0, r4
   2150c:	4639      	mov	r1, r7
   2150e:	f7f6 fe6d 	bl	181ec <chan_send>
	if (err) {
   21512:	b110      	cbz	r0, 2151a <chan_req_send+0x30>
		req->buf = buf;
   21514:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   21516:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
}
   2151a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2151c:	f06f 0079 	mvn.w	r0, #121	; 0x79
   21520:	e7fb      	b.n	2151a <chan_req_send+0x30>

00021522 <process_queue>:
{
   21522:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   21524:	2200      	movs	r2, #0
{
   21526:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   21528:	2300      	movs	r3, #0
   2152a:	4608      	mov	r0, r1
{
   2152c:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   2152e:	f000 fda3 	bl	22078 <net_buf_get>
	if (buf) {
   21532:	4605      	mov	r5, r0
   21534:	b160      	cbz	r0, 21550 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   21536:	4601      	mov	r1, r0
   21538:	2200      	movs	r2, #0
   2153a:	4620      	mov	r0, r4
   2153c:	f7f6 fe56 	bl	181ec <chan_send>
		if (err) {
   21540:	4604      	mov	r4, r0
   21542:	b118      	cbz	r0, 2154c <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   21544:	4629      	mov	r1, r5
   21546:	4630      	mov	r0, r6
   21548:	f001 fa71 	bl	22a2e <k_queue_prepend>
}
   2154c:	4620      	mov	r0, r4
   2154e:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   21550:	f06f 0401 	mvn.w	r4, #1
   21554:	e7fa      	b.n	2154c <process_queue+0x2a>

00021556 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   21556:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   21558:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2155c:	2300      	movs	r3, #0
   2155e:	9300      	str	r3, [sp, #0]
   21560:	461a      	mov	r2, r3
   21562:	f7f8 f82f 	bl	195c4 <bt_gatt_foreach_attr_type>
				  user_data);
}
   21566:	b005      	add	sp, #20
   21568:	f85d fb04 	ldr.w	pc, [sp], #4

0002156c <att_chan_read>:
{
   2156c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21570:	4680      	mov	r8, r0
   21572:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   21574:	4610      	mov	r0, r2
{
   21576:	4699      	mov	r9, r3
   21578:	468b      	mov	fp, r1
   2157a:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2157c:	f7ff ff68 	bl	21450 <net_buf_frags_len>
   21580:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   21584:	4283      	cmp	r3, r0
   21586:	d97a      	bls.n	2167e <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   21588:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2158c:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2158e:	4630      	mov	r0, r6
   21590:	f000 fda1 	bl	220d6 <net_buf_frag_last>
	size_t len, total = 0;
   21594:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   21598:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2159a:	4630      	mov	r0, r6
   2159c:	f7ff ff58 	bl	21450 <net_buf_frags_len>
   215a0:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   215a4:	f105 0708 	add.w	r7, r5, #8
   215a8:	1a24      	subs	r4, r4, r0
   215aa:	4638      	mov	r0, r7
   215ac:	f000 fdf0 	bl	22190 <net_buf_simple_tailroom>
   215b0:	4284      	cmp	r4, r0
   215b2:	d211      	bcs.n	215d8 <att_chan_read+0x6c>
   215b4:	4630      	mov	r0, r6
   215b6:	f7ff ff4b 	bl	21450 <net_buf_frags_len>
   215ba:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   215be:	1a24      	subs	r4, r4, r0
		if (!len) {
   215c0:	bb34      	cbnz	r4, 21610 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   215c2:	79b0      	ldrb	r0, [r6, #6]
   215c4:	f7f8 fbce 	bl	19d64 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   215c8:	2200      	movs	r2, #0
   215ca:	2300      	movs	r3, #0
   215cc:	f000 fd4f 	bl	2206e <net_buf_alloc_fixed>
			if (!frag) {
   215d0:	4605      	mov	r5, r0
   215d2:	b930      	cbnz	r0, 215e2 <att_chan_read+0x76>
	return total;
   215d4:	4657      	mov	r7, sl
   215d6:	e02c      	b.n	21632 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   215d8:	4638      	mov	r0, r7
   215da:	f000 fdd9 	bl	22190 <net_buf_simple_tailroom>
   215de:	4604      	mov	r4, r0
   215e0:	e7ee      	b.n	215c0 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   215e2:	4601      	mov	r1, r0
   215e4:	4630      	mov	r0, r6
   215e6:	f000 fd87 	bl	220f8 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   215ea:	4630      	mov	r0, r6
   215ec:	f7ff ff30 	bl	21450 <net_buf_frags_len>
   215f0:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   215f4:	f105 0708 	add.w	r7, r5, #8
   215f8:	1a24      	subs	r4, r4, r0
   215fa:	4638      	mov	r0, r7
   215fc:	f000 fdc8 	bl	22190 <net_buf_simple_tailroom>
   21600:	4284      	cmp	r4, r0
   21602:	d21a      	bcs.n	2163a <att_chan_read+0xce>
   21604:	4630      	mov	r0, r6
   21606:	f7ff ff23 	bl	21450 <net_buf_frags_len>
   2160a:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2160e:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   21610:	68a9      	ldr	r1, [r5, #8]
   21612:	89aa      	ldrh	r2, [r5, #12]
   21614:	f8db 7004 	ldr.w	r7, [fp, #4]
   21618:	9803      	ldr	r0, [sp, #12]
   2161a:	f8cd 9000 	str.w	r9, [sp]
   2161e:	440a      	add	r2, r1
   21620:	b2a3      	uxth	r3, r4
   21622:	4659      	mov	r1, fp
   21624:	47b8      	blx	r7
		if (read < 0) {
   21626:	1e07      	subs	r7, r0, #0
   21628:	da0c      	bge.n	21644 <att_chan_read+0xd8>
				return total;
   2162a:	f1ba 0f00 	cmp.w	sl, #0
   2162e:	bf18      	it	ne
   21630:	4657      	movne	r7, sl
}
   21632:	4638      	mov	r0, r7
   21634:	b005      	add	sp, #20
   21636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2163a:	4638      	mov	r0, r7
   2163c:	f000 fda8 	bl	22190 <net_buf_simple_tailroom>
   21640:	4604      	mov	r4, r0
   21642:	e7e5      	b.n	21610 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   21644:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21646:	b993      	cbnz	r3, 2166e <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   21648:	4639      	mov	r1, r7
   2164a:	f105 0008 	add.w	r0, r5, #8
   2164e:	f000 fd64 	bl	2211a <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   21652:	4630      	mov	r0, r6
   21654:	f7ff fefc 	bl	21450 <net_buf_frags_len>
   21658:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   2165c:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2165e:	4283      	cmp	r3, r0
		total += read;
   21660:	44ba      	add	sl, r7
		offset += read;
   21662:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   21666:	d9b5      	bls.n	215d4 <att_chan_read+0x68>
   21668:	42a7      	cmp	r7, r4
   2166a:	d096      	beq.n	2159a <att_chan_read+0x2e>
   2166c:	e7b2      	b.n	215d4 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2166e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   21670:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21672:	4639      	mov	r1, r7
   21674:	4628      	mov	r0, r5
   21676:	4798      	blx	r3
   21678:	2800      	cmp	r0, #0
   2167a:	d1e5      	bne.n	21648 <att_chan_read+0xdc>
   2167c:	e7aa      	b.n	215d4 <att_chan_read+0x68>
		return 0;
   2167e:	2700      	movs	r7, #0
   21680:	e7d7      	b.n	21632 <att_chan_read+0xc6>

00021682 <find_info_cb>:
{
   21682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   21684:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   21686:	6817      	ldr	r7, [r2, #0]
{
   21688:	4605      	mov	r5, r0
   2168a:	460e      	mov	r6, r1
   2168c:	4614      	mov	r4, r2
	if (!data->rsp) {
   2168e:	b963      	cbnz	r3, 216aa <find_info_cb+0x28>
   21690:	6850      	ldr	r0, [r2, #4]
   21692:	2101      	movs	r1, #1
   21694:	3008      	adds	r0, #8
   21696:	f000 fd40 	bl	2211a <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2169a:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2169c:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2169e:	781b      	ldrb	r3, [r3, #0]
   216a0:	2b00      	cmp	r3, #0
   216a2:	bf0c      	ite	eq
   216a4:	2301      	moveq	r3, #1
   216a6:	2302      	movne	r3, #2
   216a8:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   216aa:	68a3      	ldr	r3, [r4, #8]
   216ac:	781b      	ldrb	r3, [r3, #0]
   216ae:	2b01      	cmp	r3, #1
   216b0:	d003      	beq.n	216ba <find_info_cb+0x38>
   216b2:	2b02      	cmp	r3, #2
   216b4:	d019      	beq.n	216ea <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   216b6:	2000      	movs	r0, #0
   216b8:	e016      	b.n	216e8 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   216ba:	682b      	ldr	r3, [r5, #0]
   216bc:	781b      	ldrb	r3, [r3, #0]
   216be:	2b00      	cmp	r3, #0
   216c0:	d1f9      	bne.n	216b6 <find_info_cb+0x34>
   216c2:	6860      	ldr	r0, [r4, #4]
   216c4:	2104      	movs	r1, #4
   216c6:	3008      	adds	r0, #8
   216c8:	f000 fd27 	bl	2211a <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   216cc:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   216ce:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   216d0:	885b      	ldrh	r3, [r3, #2]
   216d2:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   216d4:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   216d6:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   216d8:	899b      	ldrh	r3, [r3, #12]
   216da:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   216de:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   216e0:	2804      	cmp	r0, #4
   216e2:	bf94      	ite	ls
   216e4:	2000      	movls	r0, #0
   216e6:	2001      	movhi	r0, #1
}
   216e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   216ea:	682b      	ldr	r3, [r5, #0]
   216ec:	781b      	ldrb	r3, [r3, #0]
   216ee:	2b02      	cmp	r3, #2
   216f0:	d1e1      	bne.n	216b6 <find_info_cb+0x34>
   216f2:	6860      	ldr	r0, [r4, #4]
   216f4:	2112      	movs	r1, #18
   216f6:	3008      	adds	r0, #8
   216f8:	f000 fd0f 	bl	2211a <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   216fc:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   216fe:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   21700:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   21702:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   21706:	3101      	adds	r1, #1
   21708:	f7ff fb47 	bl	20d9a <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   2170c:	6863      	ldr	r3, [r4, #4]
   2170e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   21712:	899b      	ldrh	r3, [r3, #12]
   21714:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   21716:	2812      	cmp	r0, #18
   21718:	e7e3      	b.n	216e2 <find_info_cb+0x60>

0002171a <att_chan_mtu_updated>:
{
   2171a:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   2171c:	6806      	ldr	r6, [r0, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2171e:	6a72      	ldr	r2, [r6, #36]	; 0x24
   21720:	b30a      	cbz	r2, 21766 <att_chan_mtu_updated+0x4c>
   21722:	f5b2 74a2 	subs.w	r4, r2, #324	; 0x144
   21726:	d01d      	beq.n	21764 <att_chan_mtu_updated+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21728:	6813      	ldr	r3, [r2, #0]
   2172a:	b10b      	cbz	r3, 21730 <att_chan_mtu_updated+0x16>
   2172c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   21730:	2200      	movs	r2, #0
   21732:	4611      	mov	r1, r2
		if (chan == updated_chan) {
   21734:	42a0      	cmp	r0, r4
   21736:	d009      	beq.n	2174c <att_chan_mtu_updated+0x32>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   21738:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2173c:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   21740:	42a9      	cmp	r1, r5
   21742:	bf38      	it	cc
   21744:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   21746:	42a2      	cmp	r2, r4
   21748:	bf38      	it	cc
   2174a:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2174c:	b163      	cbz	r3, 21768 <att_chan_mtu_updated+0x4e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2174e:	f513 75a2 	adds.w	r5, r3, #324	; 0x144
   21752:	d004      	beq.n	2175e <att_chan_mtu_updated+0x44>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21754:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
   21758:	b10d      	cbz	r5, 2175e <att_chan_mtu_updated+0x44>
   2175a:	f5a5 75a2 	sub.w	r5, r5, #324	; 0x144
{
   2175e:	461c      	mov	r4, r3
   21760:	462b      	mov	r3, r5
   21762:	e7e7      	b.n	21734 <att_chan_mtu_updated+0x1a>
   21764:	4622      	mov	r2, r4
   21766:	4611      	mov	r1, r2
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   21768:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   2176c:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
   21770:	428b      	cmp	r3, r1
   21772:	d801      	bhi.n	21778 <att_chan_mtu_updated+0x5e>
   21774:	4290      	cmp	r0, r2
   21776:	d909      	bls.n	2178c <att_chan_mtu_updated+0x72>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   21778:	4282      	cmp	r2, r0
   2177a:	bf38      	it	cc
   2177c:	4602      	movcc	r2, r0
   2177e:	4299      	cmp	r1, r3
   21780:	6830      	ldr	r0, [r6, #0]
   21782:	bf38      	it	cc
   21784:	4619      	movcc	r1, r3
}
   21786:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   21788:	f7f8 ba50 	b.w	19c2c <bt_gatt_att_max_mtu_changed>
}
   2178c:	bc70      	pop	{r4, r5, r6}
   2178e:	4770      	bx	lr

00021790 <attr_read_group_cb>:
	if (!data->rsp->len) {
   21790:	68d0      	ldr	r0, [r2, #12]
   21792:	7803      	ldrb	r3, [r0, #0]
   21794:	3104      	adds	r1, #4
   21796:	b913      	cbnz	r3, 2179e <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   21798:	7001      	strb	r1, [r0, #0]
	return true;
   2179a:	2001      	movs	r0, #1
}
   2179c:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2179e:	428b      	cmp	r3, r1
   217a0:	d0fb      	beq.n	2179a <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   217a2:	6891      	ldr	r1, [r2, #8]
   217a4:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   217a6:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   217a8:	3b04      	subs	r3, #4
   217aa:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   217ac:	6110      	str	r0, [r2, #16]
		return false;
   217ae:	4770      	bx	lr

000217b0 <chan_req_sent>:
	if (chan->req) {
   217b0:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   217b4:	b133      	cbz	r3, 217c4 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   217b6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   217ba:	2300      	movs	r3, #0
   217bc:	f500 7088 	add.w	r0, r0, #272	; 0x110
   217c0:	f7fb bff8 	b.w	1d7b4 <k_work_reschedule>
}
   217c4:	4770      	bx	lr

000217c6 <att_exec_write_req>:
   217c6:	2006      	movs	r0, #6
   217c8:	4770      	bx	lr

000217ca <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   217ca:	30f0      	adds	r0, #240	; 0xf0
   217cc:	f3bf 8f5b 	dmb	ish
   217d0:	e850 3f00 	ldrex	r3, [r0]
   217d4:	f023 0301 	bic.w	r3, r3, #1
   217d8:	e840 3200 	strex	r2, r3, [r0]
   217dc:	2a00      	cmp	r2, #0
   217de:	d1f7      	bne.n	217d0 <chan_rsp_sent+0x6>
   217e0:	f3bf 8f5b 	dmb	ish
}
   217e4:	4770      	bx	lr

000217e6 <chan_cfm_sent>:
   217e6:	30f0      	adds	r0, #240	; 0xf0
   217e8:	f3bf 8f5b 	dmb	ish
   217ec:	e850 3f00 	ldrex	r3, [r0]
   217f0:	f023 0302 	bic.w	r3, r3, #2
   217f4:	e840 3200 	strex	r2, r3, [r0]
   217f8:	2a00      	cmp	r2, #0
   217fa:	d1f7      	bne.n	217ec <chan_cfm_sent+0x6>
   217fc:	f3bf 8f5b 	dmb	ish
}
   21800:	4770      	bx	lr

00021802 <bt_att_status>:
{
   21802:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21804:	f3bf 8f5b 	dmb	ish
   21808:	680b      	ldr	r3, [r1, #0]
   2180a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2180e:	07db      	lsls	r3, r3, #31
{
   21810:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   21812:	d519      	bpl.n	21848 <bt_att_status+0x46>
	if (!chan->att) {
   21814:	f850 0c08 	ldr.w	r0, [r0, #-8]
   21818:	b1b0      	cbz	r0, 21848 <bt_att_status+0x46>
	if (chan->req) {
   2181a:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   2181e:	b99b      	cbnz	r3, 21848 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   21820:	3004      	adds	r0, #4
   21822:	f7ff fdf0 	bl	21406 <sys_slist_get>
	if (!node) {
   21826:	4604      	mov	r4, r0
   21828:	b170      	cbz	r0, 21848 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   2182a:	4601      	mov	r1, r0
   2182c:	f1a5 0008 	sub.w	r0, r5, #8
   21830:	f7ff fe5b 	bl	214ea <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   21834:	2800      	cmp	r0, #0
   21836:	da07      	bge.n	21848 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   21838:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   2183c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2183e:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   21840:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   21842:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   21844:	b902      	cbnz	r2, 21848 <bt_att_status+0x46>
	list->tail = node;
   21846:	609c      	str	r4, [r3, #8]
}
   21848:	bd38      	pop	{r3, r4, r5, pc}

0002184a <att_req_send_process>:
{
   2184a:	b570      	push	{r4, r5, r6, lr}
   2184c:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   2184e:	3004      	adds	r0, #4
   21850:	f7ff fdd9 	bl	21406 <sys_slist_get>
	if (!node) {
   21854:	4606      	mov	r6, r0
   21856:	b1c0      	cbz	r0, 2188a <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21858:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2185a:	b153      	cbz	r3, 21872 <att_req_send_process+0x28>
   2185c:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   21860:	d007      	beq.n	21872 <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21862:	681c      	ldr	r4, [r3, #0]
   21864:	b10c      	cbz	r4, 2186a <att_req_send_process+0x20>
   21866:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
		if (!chan->req) {
   2186a:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   2186e:	b13b      	cbz	r3, 21880 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21870:	b964      	cbnz	r4, 2188c <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   21872:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   21874:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   21876:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   21878:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   2187a:	b933      	cbnz	r3, 2188a <att_req_send_process+0x40>
	list->tail = node;
   2187c:	60ae      	str	r6, [r5, #8]
}
   2187e:	e004      	b.n	2188a <att_req_send_process+0x40>
	return chan_req_send(chan, req);
   21880:	4631      	mov	r1, r6
   21882:	f7ff fe32 	bl	214ea <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   21886:	2800      	cmp	r0, #0
   21888:	dbf2      	blt.n	21870 <att_req_send_process+0x26>
}
   2188a:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   2188c:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   21890:	d004      	beq.n	2189c <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21892:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21896:	b10b      	cbz	r3, 2189c <att_req_send_process+0x52>
   21898:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   2189c:	4620      	mov	r0, r4
   2189e:	461c      	mov	r4, r3
   218a0:	e7e3      	b.n	2186a <att_req_send_process+0x20>

000218a2 <write_cb>:
{
   218a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   218a4:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   218a6:	4601      	mov	r1, r0
{
   218a8:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   218aa:	222a      	movs	r2, #42	; 0x2a
   218ac:	6820      	ldr	r0, [r4, #0]
   218ae:	f000 fb5d 	bl	21f6c <bt_gatt_check_perm>
   218b2:	4605      	mov	r5, r0
   218b4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   218b6:	bb20      	cbnz	r0, 21902 <write_cb+0x60>
	if (!data->req) {
   218b8:	7a23      	ldrb	r3, [r4, #8]
   218ba:	b1ab      	cbz	r3, 218e8 <write_cb+0x46>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   218bc:	2b18      	cmp	r3, #24
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   218be:	bf14      	ite	ne
   218c0:	2300      	movne	r3, #0
   218c2:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   218c4:	9301      	str	r3, [sp, #4]
   218c6:	8a63      	ldrh	r3, [r4, #18]
   218c8:	9300      	str	r3, [sp, #0]
   218ca:	68b7      	ldr	r7, [r6, #8]
   218cc:	8a23      	ldrh	r3, [r4, #16]
   218ce:	68e2      	ldr	r2, [r4, #12]
   218d0:	6820      	ldr	r0, [r4, #0]
   218d2:	4631      	mov	r1, r6
   218d4:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   218d6:	1e03      	subs	r3, r0, #0
   218d8:	db08      	blt.n	218ec <write_cb+0x4a>
   218da:	8a22      	ldrh	r2, [r4, #16]
   218dc:	4293      	cmp	r3, r2
   218de:	d10e      	bne.n	218fe <write_cb+0x5c>
	data->err = 0U;
   218e0:	2300      	movs	r3, #0
   218e2:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   218e4:	2501      	movs	r5, #1
   218e6:	e007      	b.n	218f8 <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   218e8:	2302      	movs	r3, #2
   218ea:	e7eb      	b.n	218c4 <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   218ec:	f113 0fff 	cmn.w	r3, #255	; 0xff
   218f0:	d305      	bcc.n	218fe <write_cb+0x5c>
		return -err;
   218f2:	425b      	negs	r3, r3
   218f4:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   218f6:	7523      	strb	r3, [r4, #20]
}
   218f8:	4628      	mov	r0, r5
   218fa:	b003      	add	sp, #12
   218fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   218fe:	230e      	movs	r3, #14
   21900:	e7f9      	b.n	218f6 <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   21902:	2500      	movs	r5, #0
   21904:	e7f8      	b.n	218f8 <write_cb+0x56>

00021906 <bt_att_sent>:
{
   21906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   21908:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   2190c:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   21910:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   21912:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   21916:	b10b      	cbz	r3, 2191c <bt_att_sent+0x16>
		chan->sent(chan);
   21918:	4638      	mov	r0, r7
   2191a:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2191c:	f3bf 8f5b 	dmb	ish
   21920:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   21924:	e853 2f00 	ldrex	r2, [r3]
   21928:	f022 0210 	bic.w	r2, r2, #16
   2192c:	e843 2100 	strex	r1, r2, [r3]
   21930:	2900      	cmp	r1, #0
   21932:	d1f7      	bne.n	21924 <bt_att_sent+0x1e>
   21934:	f3bf 8f5b 	dmb	ish
	if (!att) {
   21938:	b30c      	cbz	r4, 2197e <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2193a:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   2193e:	b98b      	cbnz	r3, 21964 <bt_att_sent+0x5e>
   21940:	6863      	ldr	r3, [r4, #4]
   21942:	b17b      	cbz	r3, 21964 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   21944:	1d20      	adds	r0, r4, #4
   21946:	f7ff fd5e 	bl	21406 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2194a:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2194c:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2194e:	4638      	mov	r0, r7
   21950:	f7ff fdcb 	bl	214ea <chan_req_send>
   21954:	2800      	cmp	r0, #0
   21956:	da12      	bge.n	2197e <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
   21958:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   2195a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2195c:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2195e:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   21960:	b903      	cbnz	r3, 21964 <bt_att_sent+0x5e>
	list->tail = node;
   21962:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   21964:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   21968:	4638      	mov	r0, r7
   2196a:	f7ff fdda 	bl	21522 <process_queue>
	if (!err) {
   2196e:	b130      	cbz	r0, 2197e <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   21970:	f104 010c 	add.w	r1, r4, #12
   21974:	4638      	mov	r0, r7
}
   21976:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2197a:	f7ff bdd2 	b.w	21522 <process_queue>
}
   2197e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021980 <read_cb>:
{
   21980:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   21984:	f8d2 8000 	ldr.w	r8, [r2]
{
   21988:	4606      	mov	r6, r0
	data->err = 0x00;
   2198a:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2198c:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   21990:	7317      	strb	r7, [r2, #12]
{
   21992:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   21994:	4631      	mov	r1, r6
   21996:	2215      	movs	r2, #21
   21998:	f000 fae8 	bl	21f6c <bt_gatt_check_perm>
   2199c:	4604      	mov	r4, r0
   2199e:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   219a0:	b9a0      	cbnz	r0, 219cc <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   219a2:	e9cd 0000 	strd	r0, r0, [sp]
   219a6:	88ab      	ldrh	r3, [r5, #4]
   219a8:	68aa      	ldr	r2, [r5, #8]
   219aa:	4631      	mov	r1, r6
   219ac:	4640      	mov	r0, r8
   219ae:	f7ff fddd 	bl	2156c <att_chan_read>
	if (ret < 0) {
   219b2:	1e03      	subs	r3, r0, #0
   219b4:	da0c      	bge.n	219d0 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   219b6:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   219ba:	bf26      	itte	cs
   219bc:	425b      	negcs	r3, r3
   219be:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   219c0:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   219c2:	732b      	strb	r3, [r5, #12]
}
   219c4:	4620      	mov	r0, r4
   219c6:	b002      	add	sp, #8
   219c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   219cc:	463c      	mov	r4, r7
   219ce:	e7f9      	b.n	219c4 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   219d0:	2401      	movs	r4, #1
   219d2:	e7f7      	b.n	219c4 <read_cb+0x44>

000219d4 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   219d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   219d8:	4688      	mov	r8, r1
   219da:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   219dc:	2101      	movs	r1, #1
   219de:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   219e0:	4605      	mov	r5, r0
   219e2:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   219e4:	f7f6 ff0e 	bl	18804 <bt_att_chan_create_pdu>
	if (!buf) {
   219e8:	4604      	mov	r4, r0
   219ea:	b170      	cbz	r0, 21a0a <send_err_rsp.part.0+0x36>
   219ec:	2104      	movs	r1, #4
   219ee:	3008      	adds	r0, #8
   219f0:	f000 fb93 	bl	2211a <net_buf_simple_add>
	rsp->request = req;
   219f4:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   219f8:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   219fa:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   219fe:	4621      	mov	r1, r4
   21a00:	4628      	mov	r0, r5
}
   21a02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   21a06:	f7f6 be11 	b.w	1862c <bt_att_chan_send_rsp.constprop.0>
}
   21a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021a0e <att_read_blob_req>:
{
   21a0e:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   21a10:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   21a12:	8813      	ldrh	r3, [r2, #0]
   21a14:	8852      	ldrh	r2, [r2, #2]
   21a16:	9200      	str	r2, [sp, #0]
   21a18:	210c      	movs	r1, #12
   21a1a:	220d      	movs	r2, #13
   21a1c:	f7f7 f968 	bl	18cf0 <att_read_rsp>
}
   21a20:	b003      	add	sp, #12
   21a22:	f85d fb04 	ldr.w	pc, [sp], #4

00021a26 <att_read_req>:
{
   21a26:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   21a28:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   21a2a:	2200      	movs	r2, #0
   21a2c:	881b      	ldrh	r3, [r3, #0]
   21a2e:	9200      	str	r2, [sp, #0]
   21a30:	210a      	movs	r1, #10
   21a32:	220b      	movs	r2, #11
   21a34:	f7f7 f95c 	bl	18cf0 <att_read_rsp>
}
   21a38:	b003      	add	sp, #12
   21a3a:	f85d fb04 	ldr.w	pc, [sp], #4

00021a3e <att_mtu_req>:
{
   21a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   21a40:	6803      	ldr	r3, [r0, #0]
{
   21a42:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   21a44:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21a46:	f3bf 8f5b 	dmb	ish
   21a4a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   21a4e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   21a52:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   21a56:	071b      	lsls	r3, r3, #28
   21a58:	d41d      	bmi.n	21a96 <att_mtu_req+0x58>
	mtu_client = sys_le16_to_cpu(req->mtu);
   21a5a:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   21a5c:	881b      	ldrh	r3, [r3, #0]
   21a5e:	2b16      	cmp	r3, #22
   21a60:	d91b      	bls.n	21a9a <att_mtu_req+0x5c>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   21a62:	2202      	movs	r2, #2
   21a64:	2103      	movs	r1, #3
   21a66:	f7f7 f839 	bl	18adc <bt_att_create_pdu>
	if (!pdu) {
   21a6a:	4606      	mov	r6, r0
   21a6c:	b1b8      	cbz	r0, 21a9e <att_mtu_req+0x60>
   21a6e:	2102      	movs	r1, #2
   21a70:	3008      	adds	r0, #8
   21a72:	f000 fb52 	bl	2211a <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   21a76:	2717      	movs	r7, #23
   21a78:	7007      	strb	r7, [r0, #0]
   21a7a:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   21a7c:	4631      	mov	r1, r6
   21a7e:	4620      	mov	r0, r4
   21a80:	f7f6 fdd4 	bl	1862c <bt_att_chan_send_rsp.constprop.0>
	att_chan_mtu_updated(chan);
   21a84:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   21a86:	f8a4 707a 	strh.w	r7, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   21a8a:	f8a4 708a 	strh.w	r7, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   21a8e:	f7ff fe44 	bl	2171a <att_chan_mtu_updated>
	return 0;
   21a92:	4628      	mov	r0, r5
}
   21a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   21a96:	2006      	movs	r0, #6
   21a98:	e7fc      	b.n	21a94 <att_mtu_req+0x56>
		return BT_ATT_ERR_INVALID_PDU;
   21a9a:	2004      	movs	r0, #4
   21a9c:	e7fa      	b.n	21a94 <att_mtu_req+0x56>
		return BT_ATT_ERR_UNLIKELY;
   21a9e:	200e      	movs	r0, #14
   21aa0:	e7f8      	b.n	21a94 <att_mtu_req+0x56>

00021aa2 <bt_att_init>:
	bt_gatt_init();
   21aa2:	f7f7 bd09 	b.w	194b8 <bt_gatt_init>

00021aa6 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   21aa6:	898a      	ldrh	r2, [r1, #12]
   21aa8:	6889      	ldr	r1, [r1, #8]
   21aaa:	2300      	movs	r3, #0
   21aac:	f7f7 ba92 	b.w	18fd4 <att_handle_rsp>

00021ab0 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   21ab0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21ab4:	4607      	mov	r7, r0
   21ab6:	460d      	mov	r5, r1
   21ab8:	4616      	mov	r6, r2
   21aba:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   21abc:	f7f6 fd6a 	bl	18594 <att_get>
	if (!att) {
   21ac0:	4604      	mov	r4, r0
   21ac2:	b938      	cbnz	r0, 21ad4 <bt_att_send+0x24>
		net_buf_unref(buf);
   21ac4:	4628      	mov	r0, r5
   21ac6:	f7f8 fa0d 	bl	19ee4 <net_buf_unref>
		return -ENOTCONN;
   21aca:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   21ace:	b002      	add	sp, #8
   21ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   21ad4:	b146      	cbz	r6, 21ae8 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   21ad6:	f8cd 8000 	str.w	r8, [sp]
   21ada:	4633      	mov	r3, r6
   21adc:	462a      	mov	r2, r5
   21ade:	2104      	movs	r1, #4
   21ae0:	4638      	mov	r0, r7
   21ae2:	f7ff fc38 	bl	21356 <bt_l2cap_send_cb>
   21ae6:	e7f2      	b.n	21ace <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   21ae8:	f100 060c 	add.w	r6, r0, #12
   21aec:	4629      	mov	r1, r5
   21aee:	4630      	mov	r0, r6
   21af0:	f000 fae0 	bl	220b4 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   21af4:	2200      	movs	r2, #0
   21af6:	2300      	movs	r3, #0
   21af8:	4630      	mov	r0, r6
   21afa:	f000 fabd 	bl	22078 <net_buf_get>
	if (!buf) {
   21afe:	4605      	mov	r5, r0
   21b00:	b908      	cbnz	r0, 21b06 <bt_att_send+0x56>
	return 0;
   21b02:	2000      	movs	r0, #0
   21b04:	e7e3      	b.n	21ace <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21b08:	b1c3      	cbz	r3, 21b3c <bt_att_send+0x8c>
   21b0a:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   21b0e:	d015      	beq.n	21b3c <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21b10:	681c      	ldr	r4, [r3, #0]
   21b12:	b10c      	cbz	r4, 21b18 <bt_att_send+0x68>
   21b14:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   21b18:	2200      	movs	r2, #0
   21b1a:	4629      	mov	r1, r5
   21b1c:	f7f6 fb66 	bl	181ec <chan_send>
		if (err >= 0) {
   21b20:	2800      	cmp	r0, #0
   21b22:	daee      	bge.n	21b02 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21b24:	b154      	cbz	r4, 21b3c <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21b26:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   21b2a:	d004      	beq.n	21b36 <bt_att_send+0x86>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21b2c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   21b30:	b10b      	cbz	r3, 21b36 <bt_att_send+0x86>
   21b32:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   21b36:	4620      	mov	r0, r4
   21b38:	461c      	mov	r4, r3
   21b3a:	e7ed      	b.n	21b18 <bt_att_send+0x68>
		k_queue_prepend(&att->tx_queue._queue, buf);
   21b3c:	4629      	mov	r1, r5
   21b3e:	4630      	mov	r0, r6
   21b40:	f000 ff75 	bl	22a2e <k_queue_prepend>
   21b44:	e7dd      	b.n	21b02 <bt_att_send+0x52>

00021b46 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   21b46:	b510      	push	{r4, lr}
   21b48:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   21b4a:	f7f6 fd23 	bl	18594 <att_get>
	if (!att) {
   21b4e:	b160      	cbz	r0, 21b6a <bt_att_req_send+0x24>
	parent->next = child;
   21b50:	2300      	movs	r3, #0
   21b52:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   21b54:	6883      	ldr	r3, [r0, #8]
   21b56:	b92b      	cbnz	r3, 21b64 <bt_att_req_send+0x1e>
	list->head = node;
   21b58:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   21b5c:	f7ff fe75 	bl	2184a <att_req_send_process>

	return 0;
   21b60:	2000      	movs	r0, #0
}
   21b62:	bd10      	pop	{r4, pc}
	parent->next = child;
   21b64:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21b66:	6084      	str	r4, [r0, #8]
}
   21b68:	e7f8      	b.n	21b5c <bt_att_req_send+0x16>
		return -ENOTCONN;
   21b6a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   21b6e:	e7f8      	b.n	21b62 <bt_att_req_send+0x1c>

00021b70 <gatt_ccc_changed>:
{
   21b70:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   21b72:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   21b74:	895a      	ldrh	r2, [r3, #10]
   21b76:	428a      	cmp	r2, r1
   21b78:	d003      	beq.n	21b82 <gatt_ccc_changed+0x12>
		ccc->value = value;
   21b7a:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   21b7c:	68db      	ldr	r3, [r3, #12]
   21b7e:	b103      	cbz	r3, 21b82 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   21b80:	4718      	bx	r3
}
   21b82:	4770      	bx	lr

00021b84 <gatt_indicate_rsp>:
{
   21b84:	b510      	push	{r4, lr}
   21b86:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   21b88:	68a3      	ldr	r3, [r4, #8]
{
   21b8a:	460a      	mov	r2, r1
	if (params->func) {
   21b8c:	b10b      	cbz	r3, 21b92 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   21b8e:	4621      	mov	r1, r4
   21b90:	4798      	blx	r3
	params->_ref--;
   21b92:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   21b94:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   21b96:	3b01      	subs	r3, #1
   21b98:	b2db      	uxtb	r3, r3
   21b9a:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   21b9c:	b122      	cbz	r2, 21ba8 <gatt_indicate_rsp+0x24>
   21b9e:	b91b      	cbnz	r3, 21ba8 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   21ba0:	4620      	mov	r0, r4
}
   21ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   21ba6:	4710      	bx	r2
}
   21ba8:	bd10      	pop	{r4, pc}

00021baa <match_uuid>:
	data->attr = attr;
   21baa:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   21bac:	8091      	strh	r1, [r2, #4]
}
   21bae:	2000      	movs	r0, #0
   21bb0:	4770      	bx	lr

00021bb2 <gen_hash_m>:
{
   21bb2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   21bb4:	6807      	ldr	r7, [r0, #0]
   21bb6:	783d      	ldrb	r5, [r7, #0]
{
   21bb8:	b089      	sub	sp, #36	; 0x24
   21bba:	4606      	mov	r6, r0
   21bbc:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   21bbe:	b10d      	cbz	r5, 21bc4 <gen_hash_m+0x12>
	switch (u16->val) {
   21bc0:	2501      	movs	r5, #1
   21bc2:	e014      	b.n	21bee <gen_hash_m+0x3c>
   21bc4:	887b      	ldrh	r3, [r7, #2]
   21bc6:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   21bca:	d004      	beq.n	21bd6 <gen_hash_m+0x24>
   21bcc:	d812      	bhi.n	21bf4 <gen_hash_m+0x42>
   21bce:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   21bd2:	2b03      	cmp	r3, #3
   21bd4:	d8f4      	bhi.n	21bc0 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   21bd6:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21bda:	2202      	movs	r2, #2
   21bdc:	f10d 010e 	add.w	r1, sp, #14
   21be0:	4620      	mov	r0, r4
   21be2:	f7fe fe9e 	bl	20922 <tc_cmac_update>
   21be6:	b9e0      	cbnz	r0, 21c22 <gen_hash_m+0x70>
			state->err = -EINVAL;
   21be8:	f06f 0315 	mvn.w	r3, #21
   21bec:	65a3      	str	r3, [r4, #88]	; 0x58
}
   21bee:	4628      	mov	r0, r5
   21bf0:	b009      	add	sp, #36	; 0x24
   21bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   21bf4:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   21bf8:	33ff      	adds	r3, #255	; 0xff
   21bfa:	b29b      	uxth	r3, r3
   21bfc:	2b04      	cmp	r3, #4
   21bfe:	d8df      	bhi.n	21bc0 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   21c00:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21c04:	2202      	movs	r2, #2
   21c06:	f10d 010e 	add.w	r1, sp, #14
   21c0a:	4620      	mov	r0, r4
   21c0c:	f7fe fe89 	bl	20922 <tc_cmac_update>
   21c10:	2800      	cmp	r0, #0
   21c12:	d0e9      	beq.n	21be8 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   21c14:	887b      	ldrh	r3, [r7, #2]
   21c16:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21c1a:	2202      	movs	r2, #2
   21c1c:	f10d 010e 	add.w	r1, sp, #14
   21c20:	e017      	b.n	21c52 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   21c22:	887b      	ldrh	r3, [r7, #2]
   21c24:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21c28:	2202      	movs	r2, #2
   21c2a:	f10d 010e 	add.w	r1, sp, #14
   21c2e:	4620      	mov	r0, r4
   21c30:	f7fe fe77 	bl	20922 <tc_cmac_update>
   21c34:	2800      	cmp	r0, #0
   21c36:	d0d7      	beq.n	21be8 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   21c38:	2000      	movs	r0, #0
   21c3a:	2310      	movs	r3, #16
   21c3c:	eb0d 0203 	add.w	r2, sp, r3
   21c40:	6877      	ldr	r7, [r6, #4]
   21c42:	9000      	str	r0, [sp, #0]
   21c44:	4631      	mov	r1, r6
   21c46:	47b8      	blx	r7
		if (len < 0) {
   21c48:	1e02      	subs	r2, r0, #0
   21c4a:	da01      	bge.n	21c50 <gen_hash_m+0x9e>
			state->err = len;
   21c4c:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   21c4e:	e7ce      	b.n	21bee <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   21c50:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21c52:	4620      	mov	r0, r4
   21c54:	f7fe fe65 	bl	20922 <tc_cmac_update>
   21c58:	2800      	cmp	r0, #0
   21c5a:	d1b1      	bne.n	21bc0 <gen_hash_m+0xe>
   21c5c:	e7c4      	b.n	21be8 <gen_hash_m+0x36>

00021c5e <find_ccc_cfg>:
{
   21c5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21c60:	460c      	mov	r4, r1
   21c62:	1c4d      	adds	r5, r1, #1
		if (conn) {
   21c64:	b148      	cbz	r0, 21c7a <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   21c66:	7809      	ldrb	r1, [r1, #0]
   21c68:	462a      	mov	r2, r5
   21c6a:	f7ff fad8 	bl	2121e <bt_conn_is_peer_addr_le>
   21c6e:	2800      	cmp	r0, #0
	return NULL;
   21c70:	bf08      	it	eq
   21c72:	2400      	moveq	r4, #0
}
   21c74:	4620      	mov	r0, r4
   21c76:	b003      	add	sp, #12
   21c78:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   21c7a:	9000      	str	r0, [sp, #0]
   21c7c:	2207      	movs	r2, #7
   21c7e:	f8cd 0003 	str.w	r0, [sp, #3]
   21c82:	4669      	mov	r1, sp
   21c84:	4628      	mov	r0, r5
   21c86:	f7ff f861 	bl	20d4c <memcmp>
   21c8a:	2800      	cmp	r0, #0
	return NULL;
   21c8c:	bf18      	it	ne
   21c8e:	2400      	movne	r4, #0
   21c90:	e7f0      	b.n	21c74 <find_ccc_cfg+0x16>

00021c92 <clear_cf_cfg>:
{
   21c92:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21c94:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   21c96:	2500      	movs	r5, #0
	memcpy(dst, src, sizeof(*dst));
   21c98:	2207      	movs	r2, #7
   21c9a:	4669      	mov	r1, sp
   21c9c:	3001      	adds	r0, #1
   21c9e:	9500      	str	r5, [sp, #0]
   21ca0:	f8cd 5003 	str.w	r5, [sp, #3]
   21ca4:	f7ff f879 	bl	20d9a <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   21ca8:	f104 0008 	add.w	r0, r4, #8
   21cac:	2201      	movs	r2, #1
   21cae:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   21cb0:	340c      	adds	r4, #12
   21cb2:	f7ff f87d 	bl	20db0 <memset>
   21cb6:	f3bf 8f5b 	dmb	ish
   21cba:	e854 3f00 	ldrex	r3, [r4]
   21cbe:	e844 5200 	strex	r2, r5, [r4]
   21cc2:	2a00      	cmp	r2, #0
   21cc4:	d1f9      	bne.n	21cba <clear_cf_cfg+0x28>
   21cc6:	f3bf 8f5b 	dmb	ish
}
   21cca:	b003      	add	sp, #12
   21ccc:	bd30      	pop	{r4, r5, pc}

00021cce <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   21cce:	2301      	movs	r3, #1
   21cd0:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21cd2:	f3bf 8f5b 	dmb	ish
   21cd6:	e850 2f00 	ldrex	r2, [r0]
   21cda:	431a      	orrs	r2, r3
   21cdc:	e840 2100 	strex	r1, r2, [r0]
   21ce0:	2900      	cmp	r1, #0
   21ce2:	d1f8      	bne.n	21cd6 <atomic_set_bit+0x8>
   21ce4:	f3bf 8f5b 	dmb	ish
}
   21ce8:	4770      	bx	lr

00021cea <sc_restore_rsp>:
{
   21cea:	b538      	push	{r3, r4, r5, lr}
   21cec:	4605      	mov	r5, r0
   21cee:	4614      	mov	r4, r2
	cfg = find_cf_cfg(conn);
   21cf0:	f7f7 fa3e 	bl	19170 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   21cf4:	b130      	cbz	r0, 21d04 <sc_restore_rsp+0x1a>
   21cf6:	7a03      	ldrb	r3, [r0, #8]
   21cf8:	07db      	lsls	r3, r3, #31
   21cfa:	d503      	bpl.n	21d04 <sc_restore_rsp+0x1a>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   21cfc:	2100      	movs	r1, #0
   21cfe:	300c      	adds	r0, #12
   21d00:	f7ff ffe5 	bl	21cce <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   21d04:	b964      	cbnz	r4, 21d20 <sc_restore_rsp+0x36>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   21d06:	7a28      	ldrb	r0, [r5, #8]
   21d08:	f105 0188 	add.w	r1, r5, #136	; 0x88
   21d0c:	f7f7 fa20 	bl	19150 <find_sc_cfg>
		if (sc_cfg) {
   21d10:	b130      	cbz	r0, 21d20 <sc_restore_rsp+0x36>
	memset(&cfg->data, 0, sizeof(cfg->data));
   21d12:	4621      	mov	r1, r4
   21d14:	2204      	movs	r2, #4
}
   21d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   21d1a:	3008      	adds	r0, #8
   21d1c:	f7ff b848 	b.w	20db0 <memset>
}
   21d20:	bd38      	pop	{r3, r4, r5, pc}

00021d22 <read_appearance>:
{
   21d22:	b513      	push	{r0, r1, r4, lr}
   21d24:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   21d28:	4610      	mov	r0, r2
	if (offset > value_len) {
   21d2a:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   21d2c:	f04f 0200 	mov.w	r2, #0
   21d30:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   21d34:	d80d      	bhi.n	21d52 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   21d36:	f1c1 0402 	rsb	r4, r1, #2
   21d3a:	429c      	cmp	r4, r3
   21d3c:	bfa8      	it	ge
   21d3e:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   21d40:	f10d 0306 	add.w	r3, sp, #6
   21d44:	4622      	mov	r2, r4
   21d46:	4419      	add	r1, r3
   21d48:	f7ff f827 	bl	20d9a <memcpy>
}
   21d4c:	4620      	mov	r0, r4
   21d4e:	b002      	add	sp, #8
   21d50:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21d52:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   21d56:	e7f9      	b.n	21d4c <read_appearance+0x2a>

00021d58 <read_name>:
{
   21d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21d5c:	4698      	mov	r8, r3
   21d5e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   21d62:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   21d64:	f7f4 fc88 	bl	16678 <bt_get_name>
   21d68:	4607      	mov	r7, r0
				 strlen(name));
   21d6a:	f7fe ffc4 	bl	20cf6 <strlen>
	if (offset > value_len) {
   21d6e:	b283      	uxth	r3, r0
   21d70:	42b3      	cmp	r3, r6
   21d72:	d30c      	bcc.n	21d8e <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   21d74:	1b9c      	subs	r4, r3, r6
   21d76:	4544      	cmp	r4, r8
   21d78:	bfa8      	it	ge
   21d7a:	4644      	movge	r4, r8
   21d7c:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   21d7e:	4622      	mov	r2, r4
   21d80:	19b9      	adds	r1, r7, r6
   21d82:	4628      	mov	r0, r5
   21d84:	f7ff f809 	bl	20d9a <memcpy>
}
   21d88:	4620      	mov	r0, r4
   21d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21d8e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   21d92:	e7f9      	b.n	21d88 <read_name+0x30>

00021d94 <bt_gatt_attr_read_ccc>:
{
   21d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   21d96:	68c9      	ldr	r1, [r1, #12]
{
   21d98:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   21d9c:	4615      	mov	r5, r2
   21d9e:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   21da0:	f7ff ff5d 	bl	21c5e <find_ccc_cfg>
	if (cfg) {
   21da4:	b100      	cbz	r0, 21da8 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   21da6:	8900      	ldrh	r0, [r0, #8]
   21da8:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   21dac:	2e02      	cmp	r6, #2
   21dae:	d80e      	bhi.n	21dce <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   21db0:	f1c6 0402 	rsb	r4, r6, #2
   21db4:	42bc      	cmp	r4, r7
   21db6:	bfa8      	it	ge
   21db8:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   21dba:	f10d 0306 	add.w	r3, sp, #6
   21dbe:	4622      	mov	r2, r4
   21dc0:	1999      	adds	r1, r3, r6
   21dc2:	4628      	mov	r0, r5
   21dc4:	f7fe ffe9 	bl	20d9a <memcpy>
}
   21dc8:	4620      	mov	r0, r4
   21dca:	b003      	add	sp, #12
   21dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21dce:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   21dd2:	e7f9      	b.n	21dc8 <bt_gatt_attr_read_ccc+0x34>

00021dd4 <cf_read>:
{
   21dd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21dd6:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   21dd8:	2300      	movs	r3, #0
{
   21dda:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   21dde:	f88d 3004 	strb.w	r3, [sp, #4]
{
   21de2:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   21de4:	f7f7 f9c4 	bl	19170 <find_cf_cfg>
	if (cfg) {
   21de8:	b128      	cbz	r0, 21df6 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   21dea:	f100 0108 	add.w	r1, r0, #8
   21dee:	2201      	movs	r2, #1
   21df0:	a801      	add	r0, sp, #4
   21df2:	f7fe ffd2 	bl	20d9a <memcpy>
	if (offset > value_len) {
   21df6:	2e01      	cmp	r6, #1
   21df8:	d80d      	bhi.n	21e16 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   21dfa:	f1c6 0401 	rsb	r4, r6, #1
   21dfe:	42bc      	cmp	r4, r7
   21e00:	bfa8      	it	ge
   21e02:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   21e04:	ab01      	add	r3, sp, #4
   21e06:	4622      	mov	r2, r4
   21e08:	1999      	adds	r1, r3, r6
   21e0a:	4628      	mov	r0, r5
   21e0c:	f7fe ffc5 	bl	20d9a <memcpy>
}
   21e10:	4620      	mov	r0, r4
   21e12:	b003      	add	sp, #12
   21e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21e16:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   21e1a:	e7f9      	b.n	21e10 <cf_read+0x3c>

00021e1c <bt_gatt_attr_read_service>:
{
   21e1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   21e1e:	68c9      	ldr	r1, [r1, #12]
{
   21e20:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   21e24:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   21e26:	780b      	ldrb	r3, [r1, #0]
{
   21e28:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   21e2a:	b993      	cbnz	r3, 21e52 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   21e2c:	884b      	ldrh	r3, [r1, #2]
   21e2e:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   21e32:	2d02      	cmp	r5, #2
   21e34:	d819      	bhi.n	21e6a <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   21e36:	f1c5 0202 	rsb	r2, r5, #2
   21e3a:	4294      	cmp	r4, r2
   21e3c:	bfa8      	it	ge
   21e3e:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   21e40:	f10d 0306 	add.w	r3, sp, #6
   21e44:	4622      	mov	r2, r4
   21e46:	1959      	adds	r1, r3, r5
   21e48:	f7fe ffa7 	bl	20d9a <memcpy>
}
   21e4c:	4620      	mov	r0, r4
   21e4e:	b003      	add	sp, #12
   21e50:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   21e52:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   21e54:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   21e58:	d807      	bhi.n	21e6a <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   21e5a:	f1c5 0210 	rsb	r2, r5, #16
   21e5e:	4294      	cmp	r4, r2
   21e60:	bfa8      	it	ge
   21e62:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   21e64:	4622      	mov	r2, r4
   21e66:	4429      	add	r1, r5
   21e68:	e7ee      	b.n	21e48 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21e6a:	f06f 0406 	mvn.w	r4, #6
   21e6e:	e7ed      	b.n	21e4c <bt_gatt_attr_read_service+0x30>

00021e70 <sc_clear>:
{
   21e70:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   21e72:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   21e76:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   21e78:	4631      	mov	r1, r6
   21e7a:	7a00      	ldrb	r0, [r0, #8]
   21e7c:	f7ff f8ff 	bl	2107e <bt_addr_le_is_bonded>
   21e80:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   21e82:	4631      	mov	r1, r6
   21e84:	f7f7 f964 	bl	19150 <find_sc_cfg>
	if (!cfg) {
   21e88:	b128      	cbz	r0, 21e96 <sc_clear+0x26>
}
   21e8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   21e8e:	220c      	movs	r2, #12
   21e90:	2100      	movs	r1, #0
   21e92:	f7fe bf8d 	b.w	20db0 <memset>
}
   21e96:	bd70      	pop	{r4, r5, r6, pc}

00021e98 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   21e98:	2a02      	cmp	r2, #2
{
   21e9a:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   21e9c:	d108      	bne.n	21eb0 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   21e9e:	2300      	movs	r3, #0
   21ea0:	f100 0188 	add.w	r1, r0, #136	; 0x88
   21ea4:	461a      	mov	r2, r3
   21ea6:	7a00      	ldrb	r0, [r0, #8]
   21ea8:	f7f7 fa7a 	bl	193a0 <sc_save>
}
   21eac:	2002      	movs	r0, #2
   21eae:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   21eb0:	f7ff ffde 	bl	21e70 <sc_clear>
   21eb4:	e7fa      	b.n	21eac <sc_ccc_cfg_write+0x14>

00021eb6 <bt_gatt_attr_value_handle>:
{
   21eb6:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   21eb8:	4604      	mov	r4, r0
   21eba:	b910      	cbnz	r0, 21ec2 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   21ebc:	2000      	movs	r0, #0
}
   21ebe:	b002      	add	sp, #8
   21ec0:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   21ec2:	2300      	movs	r3, #0
   21ec4:	f88d 3004 	strb.w	r3, [sp, #4]
   21ec8:	6800      	ldr	r0, [r0, #0]
   21eca:	f642 0303 	movw	r3, #10243	; 0x2803
   21ece:	a901      	add	r1, sp, #4
   21ed0:	f8ad 3006 	strh.w	r3, [sp, #6]
   21ed4:	f7fe ffa3 	bl	20e1e <bt_uuid_cmp>
   21ed8:	2800      	cmp	r0, #0
   21eda:	d1ef      	bne.n	21ebc <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   21edc:	68e3      	ldr	r3, [r4, #12]
   21ede:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   21ee0:	2800      	cmp	r0, #0
   21ee2:	d1ec      	bne.n	21ebe <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   21ee4:	4620      	mov	r0, r4
   21ee6:	f7f7 fb3d 	bl	19564 <bt_gatt_attr_get_handle>
   21eea:	3001      	adds	r0, #1
   21eec:	b280      	uxth	r0, r0
	return handle;
   21eee:	e7e6      	b.n	21ebe <bt_gatt_attr_value_handle+0x8>

00021ef0 <bt_gatt_attr_read_chrc>:
{
   21ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   21ef2:	68cf      	ldr	r7, [r1, #12]
{
   21ef4:	b087      	sub	sp, #28
   21ef6:	4608      	mov	r0, r1
   21ef8:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   21efa:	79bb      	ldrb	r3, [r7, #6]
   21efc:	f88d 3004 	strb.w	r3, [sp, #4]
{
   21f00:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   21f04:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   21f06:	f7ff ffd6 	bl	21eb6 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   21f0a:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   21f0c:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   21f10:	780b      	ldrb	r3, [r1, #0]
   21f12:	b99b      	cbnz	r3, 21f3c <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   21f14:	884b      	ldrh	r3, [r1, #2]
   21f16:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   21f1a:	2105      	movs	r1, #5
	if (offset > value_len) {
   21f1c:	42b1      	cmp	r1, r6
   21f1e:	d315      	bcc.n	21f4c <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   21f20:	1b89      	subs	r1, r1, r6
   21f22:	42a1      	cmp	r1, r4
   21f24:	bfa8      	it	ge
   21f26:	4621      	movge	r1, r4
   21f28:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   21f2a:	ab01      	add	r3, sp, #4
   21f2c:	4622      	mov	r2, r4
   21f2e:	1999      	adds	r1, r3, r6
   21f30:	4628      	mov	r0, r5
   21f32:	f7fe ff32 	bl	20d9a <memcpy>
}
   21f36:	4620      	mov	r0, r4
   21f38:	b007      	add	sp, #28
   21f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   21f3c:	3101      	adds	r1, #1
   21f3e:	2210      	movs	r2, #16
   21f40:	f10d 0007 	add.w	r0, sp, #7
   21f44:	f7fe ff29 	bl	20d9a <memcpy>
		value_len += 16U;
   21f48:	2113      	movs	r1, #19
   21f4a:	e7e7      	b.n	21f1c <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21f4c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   21f50:	e7f1      	b.n	21f36 <bt_gatt_attr_read_chrc+0x46>

00021f52 <bt_gatt_foreach_attr>:
{
   21f52:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   21f54:	e9cd 2301 	strd	r2, r3, [sp, #4]
   21f58:	2300      	movs	r3, #0
   21f5a:	9300      	str	r3, [sp, #0]
   21f5c:	461a      	mov	r2, r3
   21f5e:	f7f7 fb31 	bl	195c4 <bt_gatt_foreach_attr_type>
}
   21f62:	b005      	add	sp, #20
   21f64:	f85d fb04 	ldr.w	pc, [sp], #4

00021f68 <db_hash_process>:
	db_hash_gen(true);
   21f68:	f7f7 bb86 	b.w	19678 <db_hash_gen.isra.0>

00021f6c <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   21f6c:	07d3      	lsls	r3, r2, #31
{
   21f6e:	b510      	push	{r4, lr}
   21f70:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   21f72:	d504      	bpl.n	21f7e <bt_gatt_check_perm+0x12>
   21f74:	f014 0f15 	tst.w	r4, #21
   21f78:	d017      	beq.n	21faa <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   21f7a:	684b      	ldr	r3, [r1, #4]
   21f7c:	b1ab      	cbz	r3, 21faa <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   21f7e:	0793      	lsls	r3, r2, #30
   21f80:	d504      	bpl.n	21f8c <bt_gatt_check_perm+0x20>
   21f82:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   21f86:	d012      	beq.n	21fae <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   21f88:	688b      	ldr	r3, [r1, #8]
   21f8a:	b183      	cbz	r3, 21fae <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   21f8c:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   21f8e:	f014 0f30 	tst.w	r4, #48	; 0x30
   21f92:	d104      	bne.n	21f9e <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   21f94:	f014 000c 	ands.w	r0, r4, #12
   21f98:	bf18      	it	ne
   21f9a:	200f      	movne	r0, #15
}
   21f9c:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   21f9e:	f7ff f93c 	bl	2121a <bt_conn_get_security>
   21fa2:	2802      	cmp	r0, #2
   21fa4:	d8f6      	bhi.n	21f94 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   21fa6:	2005      	movs	r0, #5
   21fa8:	e7f8      	b.n	21f9c <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   21faa:	2002      	movs	r0, #2
   21fac:	e7f6      	b.n	21f9c <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   21fae:	2003      	movs	r0, #3
   21fb0:	e7f4      	b.n	21f9c <bt_gatt_check_perm+0x30>

00021fb2 <bt_gatt_change_aware>:
{
   21fb2:	b510      	push	{r4, lr}
   21fb4:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   21fb6:	f7f7 f8db 	bl	19170 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   21fba:	4603      	mov	r3, r0
   21fbc:	b910      	cbnz	r0, 21fc4 <bt_gatt_change_aware+0x12>
		return true;
   21fbe:	2401      	movs	r4, #1
}
   21fc0:	4620      	mov	r0, r4
   21fc2:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   21fc4:	7a02      	ldrb	r2, [r0, #8]
   21fc6:	07d2      	lsls	r2, r2, #31
   21fc8:	d5f9      	bpl.n	21fbe <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21fca:	f3bf 8f5b 	dmb	ish
   21fce:	68d9      	ldr	r1, [r3, #12]
   21fd0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   21fd4:	f011 0101 	ands.w	r1, r1, #1
   21fd8:	f100 000c 	add.w	r0, r0, #12
   21fdc:	d1ef      	bne.n	21fbe <bt_gatt_change_aware+0xc>
	if (!req) {
   21fde:	2c00      	cmp	r4, #0
   21fe0:	d0ee      	beq.n	21fc0 <bt_gatt_change_aware+0xe>
   21fe2:	f3bf 8f5b 	dmb	ish
   21fe6:	68db      	ldr	r3, [r3, #12]
   21fe8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   21fec:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   21ff0:	079b      	lsls	r3, r3, #30
   21ff2:	d50e      	bpl.n	22012 <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21ff4:	f3bf 8f5b 	dmb	ish
   21ff8:	e850 3f00 	ldrex	r3, [r0]
   21ffc:	f023 0302 	bic.w	r3, r3, #2
   22000:	e840 3200 	strex	r2, r3, [r0]
   22004:	2a00      	cmp	r2, #0
   22006:	d1f7      	bne.n	21ff8 <bt_gatt_change_aware+0x46>
   22008:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2200c:	f7ff fe5f 	bl	21cce <atomic_set_bit>
	return false;
   22010:	e7d6      	b.n	21fc0 <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   22012:	2101      	movs	r1, #1
   22014:	e7fa      	b.n	2200c <bt_gatt_change_aware+0x5a>

00022016 <bt_smp_recv>:
{
   22016:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   22018:	2100      	movs	r1, #0
   2201a:	f04f 32ff 	mov.w	r2, #4294967295
   2201e:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   22022:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   22024:	4608      	mov	r0, r1
   22026:	f7ff f993 	bl	21350 <bt_l2cap_create_pdu_timeout>
   2202a:	f100 0608 	add.w	r6, r0, #8
   2202e:	4604      	mov	r4, r0
   22030:	2101      	movs	r1, #1
   22032:	4630      	mov	r0, r6
   22034:	f000 f871 	bl	2211a <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   22038:	2505      	movs	r5, #5
   2203a:	7005      	strb	r5, [r0, #0]
   2203c:	2101      	movs	r1, #1
   2203e:	4630      	mov	r0, r6
   22040:	f000 f86b 	bl	2211a <net_buf_simple_add>
   22044:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   22046:	7005      	strb	r5, [r0, #0]
   22048:	4622      	mov	r2, r4
   2204a:	9300      	str	r3, [sp, #0]
   2204c:	2106      	movs	r1, #6
   2204e:	4638      	mov	r0, r7
   22050:	f7ff f981 	bl	21356 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   22054:	b110      	cbz	r0, 2205c <bt_smp_recv+0x46>
		net_buf_unref(buf);
   22056:	4620      	mov	r0, r4
   22058:	f7f7 ff44 	bl	19ee4 <net_buf_unref>
}
   2205c:	2000      	movs	r0, #0
   2205e:	b003      	add	sp, #12
   22060:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022062 <bt_smp_sign>:
   22062:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22066:	4770      	bx	lr

00022068 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   22068:	2000      	movs	r0, #0
   2206a:	4770      	bx	lr

0002206c <fixed_data_unref>:
}
   2206c:	4770      	bx	lr

0002206e <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2206e:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   22070:	6849      	ldr	r1, [r1, #4]
   22072:	6809      	ldr	r1, [r1, #0]
   22074:	f7f7 bea6 	b.w	19dc4 <net_buf_alloc_len>

00022078 <net_buf_get>:
{
   22078:	b570      	push	{r4, r5, r6, lr}
   2207a:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   2207c:	f7fb f952 	bl	1d324 <z_impl_k_queue_get>
	if (!buf) {
   22080:	4605      	mov	r5, r0
   22082:	b128      	cbz	r0, 22090 <net_buf_get+0x18>
   22084:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   22086:	7963      	ldrb	r3, [r4, #5]
   22088:	f013 0301 	ands.w	r3, r3, #1
   2208c:	d102      	bne.n	22094 <net_buf_get+0x1c>
	frag->frags = NULL;
   2208e:	6023      	str	r3, [r4, #0]
}
   22090:	4628      	mov	r0, r5
   22092:	bd70      	pop	{r4, r5, r6, pc}
   22094:	2300      	movs	r3, #0
   22096:	2200      	movs	r2, #0
   22098:	4630      	mov	r0, r6
   2209a:	f7fb f943 	bl	1d324 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   2209e:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   220a0:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   220a2:	f023 0301 	bic.w	r3, r3, #1
   220a6:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   220a8:	4604      	mov	r4, r0
   220aa:	e7ec      	b.n	22086 <net_buf_get+0xe>

000220ac <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   220ac:	6883      	ldr	r3, [r0, #8]
   220ae:	440b      	add	r3, r1
   220b0:	6003      	str	r3, [r0, #0]
}
   220b2:	4770      	bx	lr

000220b4 <net_buf_put>:
{
   220b4:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   220b6:	460a      	mov	r2, r1
   220b8:	6814      	ldr	r4, [r2, #0]
   220ba:	b914      	cbnz	r4, 220c2 <net_buf_put+0xe>
}
   220bc:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   220be:	f000 bcc0 	b.w	22a42 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   220c2:	7953      	ldrb	r3, [r2, #5]
   220c4:	f043 0301 	orr.w	r3, r3, #1
   220c8:	7153      	strb	r3, [r2, #5]
   220ca:	4622      	mov	r2, r4
   220cc:	e7f4      	b.n	220b8 <net_buf_put+0x4>

000220ce <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   220ce:	7902      	ldrb	r2, [r0, #4]
   220d0:	3201      	adds	r2, #1
   220d2:	7102      	strb	r2, [r0, #4]
	return buf;
}
   220d4:	4770      	bx	lr

000220d6 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   220d6:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   220d8:	4618      	mov	r0, r3
   220da:	681b      	ldr	r3, [r3, #0]
   220dc:	2b00      	cmp	r3, #0
   220de:	d1fb      	bne.n	220d8 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   220e0:	4770      	bx	lr

000220e2 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   220e2:	6802      	ldr	r2, [r0, #0]
{
   220e4:	b510      	push	{r4, lr}
	if (parent->frags) {
   220e6:	b12a      	cbz	r2, 220f4 <net_buf_frag_insert+0x12>
   220e8:	460b      	mov	r3, r1
	while (buf->frags) {
   220ea:	461c      	mov	r4, r3
   220ec:	681b      	ldr	r3, [r3, #0]
   220ee:	2b00      	cmp	r3, #0
   220f0:	d1fb      	bne.n	220ea <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   220f2:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   220f4:	6001      	str	r1, [r0, #0]
}
   220f6:	bd10      	pop	{r4, pc}

000220f8 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   220f8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   220fa:	4604      	mov	r4, r0
   220fc:	b920      	cbnz	r0, 22108 <net_buf_frag_add+0x10>
	buf->ref++;
   220fe:	790b      	ldrb	r3, [r1, #4]
   22100:	3301      	adds	r3, #1
   22102:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   22104:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   22106:	bd10      	pop	{r4, pc}
   22108:	4603      	mov	r3, r0
	while (buf->frags) {
   2210a:	4618      	mov	r0, r3
   2210c:	681b      	ldr	r3, [r3, #0]
   2210e:	2b00      	cmp	r3, #0
   22110:	d1fb      	bne.n	2210a <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   22112:	f7ff ffe6 	bl	220e2 <net_buf_frag_insert>
   22116:	4620      	mov	r0, r4
   22118:	e7f5      	b.n	22106 <net_buf_frag_add+0xe>

0002211a <net_buf_simple_add>:
	return buf->data + buf->len;
   2211a:	8883      	ldrh	r3, [r0, #4]
   2211c:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2211e:	4419      	add	r1, r3
   22120:	8081      	strh	r1, [r0, #4]
	return tail;
}
   22122:	18d0      	adds	r0, r2, r3
   22124:	4770      	bx	lr

00022126 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   22126:	b430      	push	{r4, r5}
   22128:	8884      	ldrh	r4, [r0, #4]
   2212a:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   2212c:	18a3      	adds	r3, r4, r2
   2212e:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   22130:	1928      	adds	r0, r5, r4
}
   22132:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   22134:	f7fe be31 	b.w	20d9a <memcpy>

00022138 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   22138:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   2213a:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   2213c:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   2213e:	1a40      	subs	r0, r0, r1
	buf->len += len;
   22140:	4411      	add	r1, r2
	buf->data -= len;
   22142:	6018      	str	r0, [r3, #0]
	buf->len += len;
   22144:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   22146:	4770      	bx	lr

00022148 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   22148:	8882      	ldrh	r2, [r0, #4]
   2214a:	1a52      	subs	r2, r2, r1
{
   2214c:	4603      	mov	r3, r0
	buf->len -= len;
   2214e:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   22150:	6800      	ldr	r0, [r0, #0]
   22152:	4408      	add	r0, r1
   22154:	6018      	str	r0, [r3, #0]
}
   22156:	4770      	bx	lr

00022158 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   22158:	4603      	mov	r3, r0
	void *data = buf->data;
   2215a:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2215c:	889a      	ldrh	r2, [r3, #4]
   2215e:	1a52      	subs	r2, r2, r1
	buf->data += len;
   22160:	4401      	add	r1, r0
	buf->len -= len;
   22162:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   22164:	6019      	str	r1, [r3, #0]

	return data;
}
   22166:	4770      	bx	lr

00022168 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   22168:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   2216a:	6803      	ldr	r3, [r0, #0]
   2216c:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   2216e:	2101      	movs	r1, #1
   22170:	f7ff ffea 	bl	22148 <net_buf_simple_pull>

	return val;
}
   22174:	4620      	mov	r0, r4
   22176:	bd10      	pop	{r4, pc}

00022178 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   22178:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2217a:	6803      	ldr	r3, [r0, #0]
   2217c:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2217e:	2102      	movs	r1, #2
   22180:	f7ff ffe2 	bl	22148 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   22184:	4620      	mov	r0, r4
   22186:	bd10      	pop	{r4, pc}

00022188 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   22188:	6802      	ldr	r2, [r0, #0]
   2218a:	6880      	ldr	r0, [r0, #8]
}
   2218c:	1a10      	subs	r0, r2, r0
   2218e:	4770      	bx	lr

00022190 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   22190:	8883      	ldrh	r3, [r0, #4]
   22192:	88c2      	ldrh	r2, [r0, #6]
   22194:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   22196:	6803      	ldr	r3, [r0, #0]
   22198:	6880      	ldr	r0, [r0, #8]
   2219a:	1a18      	subs	r0, r3, r0
}
   2219c:	1a10      	subs	r0, r2, r0
   2219e:	4770      	bx	lr

000221a0 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   221a0:	6902      	ldr	r2, [r0, #16]
   221a2:	b2cb      	uxtb	r3, r1
   221a4:	210c      	movs	r1, #12
   221a6:	fb03 2101 	mla	r1, r3, r1, r2
   221aa:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   221ac:	f000 0007 	and.w	r0, r0, #7
   221b0:	4770      	bx	lr

000221b2 <set_off_state>:
	__asm__ volatile(
   221b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   221b6:	f3ef 8211 	mrs	r2, BASEPRI
   221ba:	f383 8812 	msr	BASEPRI_MAX, r3
   221be:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   221c2:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   221c4:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   221c8:	d001      	beq.n	221ce <set_off_state+0x1c>
   221ca:	428b      	cmp	r3, r1
   221cc:	d107      	bne.n	221de <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   221ce:	2301      	movs	r3, #1
   221d0:	6003      	str	r3, [r0, #0]
	int err = 0;
   221d2:	2000      	movs	r0, #0
	__asm__ volatile(
   221d4:	f382 8811 	msr	BASEPRI, r2
   221d8:	f3bf 8f6f 	isb	sy
}
   221dc:	4770      	bx	lr
		err = -EPERM;
   221de:	f04f 30ff 	mov.w	r0, #4294967295
   221e2:	e7f7      	b.n	221d4 <set_off_state+0x22>

000221e4 <set_starting_state>:
{
   221e4:	b510      	push	{r4, lr}
	__asm__ volatile(
   221e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   221ea:	f3ef 8211 	mrs	r2, BASEPRI
   221ee:	f383 8812 	msr	BASEPRI_MAX, r3
   221f2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   221f6:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   221f8:	f003 0407 	and.w	r4, r3, #7
   221fc:	2c01      	cmp	r4, #1
   221fe:	d106      	bne.n	2220e <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   22200:	6001      	str	r1, [r0, #0]
	int err = 0;
   22202:	2000      	movs	r0, #0
	__asm__ volatile(
   22204:	f382 8811 	msr	BASEPRI, r2
   22208:	f3bf 8f6f 	isb	sy
}
   2220c:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2220e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   22212:	428b      	cmp	r3, r1
		err = -EALREADY;
   22214:	bf14      	ite	ne
   22216:	f04f 30ff 	movne.w	r0, #4294967295
   2221a:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   2221e:	e7f1      	b.n	22204 <set_starting_state+0x20>

00022220 <set_on_state>:
	__asm__ volatile(
   22220:	f04f 0340 	mov.w	r3, #64	; 0x40
   22224:	f3ef 8211 	mrs	r2, BASEPRI
   22228:	f383 8812 	msr	BASEPRI_MAX, r3
   2222c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   22230:	6803      	ldr	r3, [r0, #0]
   22232:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   22236:	f043 0302 	orr.w	r3, r3, #2
   2223a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2223c:	f382 8811 	msr	BASEPRI, r2
   22240:	f3bf 8f6f 	isb	sy
}
   22244:	4770      	bx	lr

00022246 <onoff_started_callback>:
	return &data->mgr[type];
   22246:	6900      	ldr	r0, [r0, #16]
{
   22248:	b410      	push	{r4}
	return &data->mgr[type];
   2224a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2224c:	241c      	movs	r4, #28
   2224e:	fb03 0004 	mla	r0, r3, r4, r0
   22252:	2100      	movs	r1, #0
}
   22254:	bc10      	pop	{r4}
	notify(mgr, 0);
   22256:	4710      	bx	r2

00022258 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   22258:	2000      	movs	r0, #0
   2225a:	f000 ba2c 	b.w	226b6 <nrfx_clock_stop>

0002225e <blocking_start_callback>:
{
   2225e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   22260:	f7fb b894 	b.w	1d38c <z_impl_k_sem_give>

00022264 <api_stop>:
{
   22264:	b538      	push	{r3, r4, r5, lr}
   22266:	b2c9      	uxtb	r1, r1
	err = set_off_state(&subdata->flags, ctx);
   22268:	240c      	movs	r4, #12
   2226a:	434c      	muls	r4, r1
{
   2226c:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   2226e:	6900      	ldr	r0, [r0, #16]
   22270:	f104 0340 	add.w	r3, r4, #64	; 0x40
   22274:	2180      	movs	r1, #128	; 0x80
   22276:	4418      	add	r0, r3
   22278:	f7ff ff9b 	bl	221b2 <set_off_state>
	if (err < 0) {
   2227c:	2800      	cmp	r0, #0
   2227e:	db04      	blt.n	2228a <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   22280:	6869      	ldr	r1, [r5, #4]
   22282:	440c      	add	r4, r1
   22284:	6863      	ldr	r3, [r4, #4]
   22286:	4798      	blx	r3
	return 0;
   22288:	2000      	movs	r0, #0
}
   2228a:	bd38      	pop	{r3, r4, r5, pc}

0002228c <api_start>:
{
   2228c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22290:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   22292:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   22294:	6905      	ldr	r5, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   22296:	434c      	muls	r4, r1
{
   22298:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   2229a:	f104 0040 	add.w	r0, r4, #64	; 0x40
   2229e:	2180      	movs	r1, #128	; 0x80
   222a0:	4428      	add	r0, r5
{
   222a2:	4690      	mov	r8, r2
   222a4:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   222a6:	f7ff ff9d 	bl	221e4 <set_starting_state>
	if (err < 0) {
   222aa:	2800      	cmp	r0, #0
   222ac:	db06      	blt.n	222bc <api_start+0x30>
	subdata->cb = cb;
   222ae:	4425      	add	r5, r4
	subdata->user_data = user_data;
   222b0:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   222b4:	6873      	ldr	r3, [r6, #4]
   222b6:	591b      	ldr	r3, [r3, r4]
   222b8:	4798      	blx	r3
	return 0;
   222ba:	2000      	movs	r0, #0
}
   222bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000222c0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   222c0:	6843      	ldr	r3, [r0, #4]
   222c2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   222c4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   222c8:	600b      	str	r3, [r1, #0]
}
   222ca:	2000      	movs	r0, #0
   222cc:	4770      	bx	lr

000222ce <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   222ce:	6843      	ldr	r3, [r0, #4]
   222d0:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   222d2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   222d6:	4042      	eors	r2, r0
   222d8:	400a      	ands	r2, r1
   222da:	4042      	eors	r2, r0
    p_reg->OUT = value;
   222dc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   222e0:	2000      	movs	r0, #0
   222e2:	4770      	bx	lr

000222e4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   222e4:	6843      	ldr	r3, [r0, #4]
   222e6:	685b      	ldr	r3, [r3, #4]
}
   222e8:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   222ea:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   222ee:	4770      	bx	lr

000222f0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   222f0:	6843      	ldr	r3, [r0, #4]
   222f2:	685b      	ldr	r3, [r3, #4]
}
   222f4:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   222f6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   222fa:	4770      	bx	lr

000222fc <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   222fc:	6843      	ldr	r3, [r0, #4]
   222fe:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   22300:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   22304:	404b      	eors	r3, r1
    p_reg->OUT = value;
   22306:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   2230a:	2000      	movs	r0, #0
   2230c:	4770      	bx	lr

0002230e <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2230e:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
   22310:	6858      	ldr	r0, [r3, #4]
{
   22312:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   22314:	b158      	cbz	r0, 2232e <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22316:	2400      	movs	r4, #0
   22318:	4281      	cmp	r1, r0
   2231a:	d113      	bne.n	22344 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   2231c:	6808      	ldr	r0, [r1, #0]
   2231e:	b95c      	cbnz	r4, 22338 <gpio_nrfx_manage_callback+0x2a>
   22320:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   22322:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   22324:	42a1      	cmp	r1, r4
   22326:	d100      	bne.n	2232a <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   22328:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2232a:	2000      	movs	r0, #0
   2232c:	6008      	str	r0, [r1, #0]
	if (set) {
   2232e:	b972      	cbnz	r2, 2234e <gpio_nrfx_manage_callback+0x40>
	return 0;
   22330:	2000      	movs	r0, #0
}
   22332:	bd30      	pop	{r4, r5, pc}
   22334:	4628      	mov	r0, r5
   22336:	e7ef      	b.n	22318 <gpio_nrfx_manage_callback+0xa>
   22338:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2233a:	6898      	ldr	r0, [r3, #8]
   2233c:	4281      	cmp	r1, r0
	list->tail = node;
   2233e:	bf08      	it	eq
   22340:	609c      	streq	r4, [r3, #8]
}
   22342:	e7f2      	b.n	2232a <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22344:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22346:	4604      	mov	r4, r0
   22348:	2d00      	cmp	r5, #0
   2234a:	d1f3      	bne.n	22334 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   2234c:	b13a      	cbz	r2, 2235e <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   2234e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   22350:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   22352:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   22354:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   22356:	2800      	cmp	r0, #0
   22358:	d1ea      	bne.n	22330 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   2235a:	6099      	str	r1, [r3, #8]
}
   2235c:	e7e9      	b.n	22332 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   2235e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   22362:	e7e6      	b.n	22332 <gpio_nrfx_manage_callback+0x24>

00022364 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   22364:	6843      	ldr	r3, [r0, #4]
   22366:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   22368:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2236c:	05d1      	lsls	r1, r2, #23
{
   2236e:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   22370:	d518      	bpl.n	223a4 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22372:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   22376:	b1aa      	cbz	r2, 223a4 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   22378:	f04f 0140 	mov.w	r1, #64	; 0x40
   2237c:	f3ef 8211 	mrs	r2, BASEPRI
   22380:	f381 8812 	msr	BASEPRI_MAX, r1
   22384:	f3bf 8f6f 	isb	sy
   22388:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2238c:	b131      	cbz	r1, 2239c <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2238e:	2100      	movs	r1, #0
   22390:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   22394:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22398:	2101      	movs	r1, #1
   2239a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   2239c:	f382 8811 	msr	BASEPRI, r2
   223a0:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   223a4:	6842      	ldr	r2, [r0, #4]
   223a6:	6852      	ldr	r2, [r2, #4]
   223a8:	06d2      	lsls	r2, r2, #27
   223aa:	d51a      	bpl.n	223e2 <uarte_nrfx_isr_int+0x7e>
	__asm__ volatile(
   223ac:	f04f 0240 	mov.w	r2, #64	; 0x40
   223b0:	f3ef 8111 	mrs	r1, BASEPRI
   223b4:	f382 8812 	msr	BASEPRI_MAX, r2
   223b8:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   223bc:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   223c0:	b112      	cbz	r2, 223c8 <uarte_nrfx_isr_int+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   223c2:	2200      	movs	r2, #0
   223c4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   223c8:	6902      	ldr	r2, [r0, #16]
   223ca:	68d2      	ldr	r2, [r2, #12]
   223cc:	b10a      	cbz	r2, 223d2 <uarte_nrfx_isr_int+0x6e>
   223ce:	6912      	ldr	r2, [r2, #16]
   223d0:	b91a      	cbnz	r2, 223da <uarte_nrfx_isr_int+0x76>
    p_reg->INTENCLR = mask;
   223d2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   223d6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   223da:	f381 8811 	msr	BASEPRI, r1
   223de:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   223e2:	6902      	ldr	r2, [r0, #16]
   223e4:	68d2      	ldr	r2, [r2, #12]
   223e6:	b15a      	cbz	r2, 22400 <uarte_nrfx_isr_int+0x9c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   223e8:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   223ec:	b151      	cbz	r1, 22404 <uarte_nrfx_isr_int+0xa0>
		if (data->int_driven->disable_tx_irq) {
   223ee:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   223f0:	2100      	movs	r1, #0
   223f2:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   223f4:	b134      	cbz	r4, 22404 <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
   223f6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   223fa:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   223fe:	7391      	strb	r1, [r2, #14]
}
   22400:	bc10      	pop	{r4}
   22402:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22404:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   22408:	b121      	cbz	r1, 22414 <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2240a:	2100      	movs	r1, #0
   2240c:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   22410:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   22414:	6813      	ldr	r3, [r2, #0]
   22416:	2b00      	cmp	r3, #0
   22418:	d0f2      	beq.n	22400 <uarte_nrfx_isr_int+0x9c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2241a:	6851      	ldr	r1, [r2, #4]
}
   2241c:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2241e:	4718      	bx	r3

00022420 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   22420:	6902      	ldr	r2, [r0, #16]
{
   22422:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   22424:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   22428:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2242c:	2000      	movs	r0, #0
   2242e:	4770      	bx	lr

00022430 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   22430:	6843      	ldr	r3, [r0, #4]
   22432:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   22434:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   22438:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2243c:	4770      	bx	lr

0002243e <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   2243e:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   22440:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22442:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   22446:	b940      	cbnz	r0, 2245a <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   22448:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2244a:	0792      	lsls	r2, r2, #30
   2244c:	d406      	bmi.n	2245c <is_tx_ready+0x1e>
   2244e:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   22452:	3800      	subs	r0, #0
   22454:	bf18      	it	ne
   22456:	2001      	movne	r0, #1
   22458:	4770      	bx	lr
   2245a:	2001      	movs	r0, #1
}
   2245c:	4770      	bx	lr

0002245e <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2245e:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   22460:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   22462:	681b      	ldr	r3, [r3, #0]
   22464:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   22468:	b148      	cbz	r0, 2247e <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   2246a:	7d52      	ldrb	r2, [r2, #21]
   2246c:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2246e:	2000      	movs	r0, #0
   22470:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   22474:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22478:	2201      	movs	r2, #1
   2247a:	601a      	str	r2, [r3, #0]
	return 0;
   2247c:	4770      	bx	lr
		return -1;
   2247e:	f04f 30ff 	mov.w	r0, #4294967295
}
   22482:	4770      	bx	lr

00022484 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   22484:	2a00      	cmp	r2, #0
{
   22486:	b510      	push	{r4, lr}
   22488:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2248a:	dd0f      	ble.n	224ac <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
   2248c:	6843      	ldr	r3, [r0, #4]
   2248e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22490:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   22494:	b148      	cbz	r0, 224aa <uarte_nrfx_fifo_read+0x26>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   22496:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22498:	2000      	movs	r0, #0
   2249a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2249e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   224a2:	7d52      	ldrb	r2, [r2, #21]
   224a4:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   224a6:	2001      	movs	r0, #1
   224a8:	6018      	str	r0, [r3, #0]
}
   224aa:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   224ac:	2000      	movs	r0, #0
   224ae:	e7fc      	b.n	224aa <uarte_nrfx_fifo_read+0x26>

000224b0 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   224b0:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   224b2:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   224b4:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   224b6:	f04f 0040 	mov.w	r0, #64	; 0x40
   224ba:	f3ef 8311 	mrs	r3, BASEPRI
   224be:	f380 8812 	msr	BASEPRI_MAX, r0
   224c2:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   224c6:	68c9      	ldr	r1, [r1, #12]
   224c8:	2000      	movs	r0, #0
   224ca:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   224cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   224d0:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   224d4:	f383 8811 	msr	BASEPRI, r3
   224d8:	f3bf 8f6f 	isb	sy
}
   224dc:	4770      	bx	lr

000224de <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   224de:	6903      	ldr	r3, [r0, #16]
   224e0:	68db      	ldr	r3, [r3, #12]
   224e2:	2201      	movs	r2, #1
   224e4:	739a      	strb	r2, [r3, #14]
}
   224e6:	4770      	bx	lr

000224e8 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   224e8:	6903      	ldr	r3, [r0, #16]
   224ea:	68db      	ldr	r3, [r3, #12]
   224ec:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   224ee:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   224f2:	b962      	cbnz	r2, 2250e <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   224f4:	6842      	ldr	r2, [r0, #4]
   224f6:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   224f8:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   224fc:	b140      	cbz	r0, 22510 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   224fe:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   22502:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   22506:	d003      	beq.n	22510 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   22508:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2250a:	2001      	movs	r0, #1
   2250c:	4770      	bx	lr
   2250e:	2000      	movs	r0, #0
}
   22510:	4770      	bx	lr

00022512 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   22512:	6843      	ldr	r3, [r0, #4]
   22514:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22516:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   2251a:	3800      	subs	r0, #0
   2251c:	bf18      	it	ne
   2251e:	2001      	movne	r0, #1
   22520:	4770      	bx	lr

00022522 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
   22522:	6843      	ldr	r3, [r0, #4]
   22524:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   22526:	2210      	movs	r2, #16
   22528:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2252c:	4770      	bx	lr

0002252e <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
   2252e:	6843      	ldr	r3, [r0, #4]
   22530:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   22532:	2210      	movs	r2, #16
   22534:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   22538:	4770      	bx	lr

0002253a <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
   2253a:	6843      	ldr	r3, [r0, #4]
   2253c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2253e:	f44f 7200 	mov.w	r2, #512	; 0x200
   22542:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   22546:	4770      	bx	lr

00022548 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
   22548:	6843      	ldr	r3, [r0, #4]
   2254a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2254c:	f44f 7200 	mov.w	r2, #512	; 0x200
   22550:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   22554:	4770      	bx	lr

00022556 <uarte_nrfx_irq_update>:
}
   22556:	2001      	movs	r0, #1
   22558:	4770      	bx	lr

0002255a <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   2255a:	6903      	ldr	r3, [r0, #16]
   2255c:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   2255e:	e9c3 1200 	strd	r1, r2, [r3]
}
   22562:	4770      	bx	lr

00022564 <tx_start>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   22564:	6840      	ldr	r0, [r0, #4]
	return config->uarte_regs;
   22566:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   22568:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2256c:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22570:	2200      	movs	r2, #0
   22572:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   22576:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2257a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   2257e:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   22582:	6842      	ldr	r2, [r0, #4]
   22584:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   22586:	bf41      	itttt	mi
   22588:	2208      	movmi	r2, #8
   2258a:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2258e:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   22592:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22596:	2201      	movs	r2, #1
   22598:	609a      	str	r2, [r3, #8]
}
   2259a:	4770      	bx	lr

0002259c <uarte_nrfx_fifo_fill>:
{
   2259c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2259e:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   225a0:	68f3      	ldr	r3, [r6, #12]
   225a2:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   225a4:	f3bf 8f5b 	dmb	ish
   225a8:	4294      	cmp	r4, r2
   225aa:	bfa8      	it	ge
   225ac:	4614      	movge	r4, r2
{
   225ae:	4605      	mov	r5, r0
   225b0:	3310      	adds	r3, #16
   225b2:	2201      	movs	r2, #1
   225b4:	e853 0f00 	ldrex	r0, [r3]
   225b8:	2800      	cmp	r0, #0
   225ba:	d103      	bne.n	225c4 <uarte_nrfx_fifo_fill+0x28>
   225bc:	e843 2700 	strex	r7, r2, [r3]
   225c0:	2f00      	cmp	r7, #0
   225c2:	d1f7      	bne.n	225b4 <uarte_nrfx_fifo_fill+0x18>
   225c4:	f3bf 8f5b 	dmb	ish
   225c8:	bf0c      	ite	eq
   225ca:	4613      	moveq	r3, r2
   225cc:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   225ce:	d01d      	beq.n	2260c <uarte_nrfx_fifo_fill+0x70>
		return 0;
   225d0:	461c      	mov	r4, r3
}
   225d2:	4620      	mov	r0, r4
   225d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   225d6:	68f2      	ldr	r2, [r6, #12]
   225d8:	5cc8      	ldrb	r0, [r1, r3]
   225da:	6892      	ldr	r2, [r2, #8]
   225dc:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
   225de:	3301      	adds	r3, #1
   225e0:	42a3      	cmp	r3, r4
   225e2:	dbf8      	blt.n	225d6 <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
   225e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   225e8:	f3ef 8711 	mrs	r7, BASEPRI
   225ec:	f383 8812 	msr	BASEPRI_MAX, r3
   225f0:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   225f4:	4628      	mov	r0, r5
   225f6:	f7ff ff22 	bl	2243e <is_tx_ready>
   225fa:	68f3      	ldr	r3, [r6, #12]
   225fc:	b940      	cbnz	r0, 22610 <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
   225fe:	6118      	str	r0, [r3, #16]
		len = 0;
   22600:	4604      	mov	r4, r0
	__asm__ volatile(
   22602:	f387 8811 	msr	BASEPRI, r7
   22606:	f3bf 8f6f 	isb	sy
	return len;
   2260a:	e7e2      	b.n	225d2 <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
   2260c:	2300      	movs	r3, #0
   2260e:	e7e7      	b.n	225e0 <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
   22610:	6899      	ldr	r1, [r3, #8]
   22612:	4622      	mov	r2, r4
   22614:	4628      	mov	r0, r5
   22616:	f7ff ffa5 	bl	22564 <tx_start>
   2261a:	e7f2      	b.n	22602 <uarte_nrfx_fifo_fill+0x66>

0002261c <uarte_nrfx_irq_is_pending>:
{
   2261c:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2261e:	6843      	ldr	r3, [r0, #4]
   22620:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   22622:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   22626:	025b      	lsls	r3, r3, #9
{
   22628:	4604      	mov	r4, r0
		||
   2262a:	d405      	bmi.n	22638 <uarte_nrfx_irq_is_pending+0x1c>
   2262c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   22630:	f010 0010 	ands.w	r0, r0, #16
   22634:	d106      	bne.n	22644 <uarte_nrfx_irq_is_pending+0x28>
}
   22636:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   22638:	f7ff ff56 	bl	224e8 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   2263c:	2800      	cmp	r0, #0
   2263e:	d0f5      	beq.n	2262c <uarte_nrfx_irq_is_pending+0x10>
		||
   22640:	2001      	movs	r0, #1
   22642:	e7f8      	b.n	22636 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   22644:	4620      	mov	r0, r4
   22646:	f7ff ff64 	bl	22512 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   2264a:	3800      	subs	r0, #0
   2264c:	bf18      	it	ne
   2264e:	2001      	movne	r0, #1
   22650:	e7f1      	b.n	22636 <uarte_nrfx_irq_is_pending+0x1a>

00022652 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   22652:	4770      	bx	lr

00022654 <sys_clock_cycle_get_32>:
{
   22654:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   22656:	f7f8 fbf3 	bl	1ae40 <z_nrf_rtc_timer_read>
}
   2265a:	bd08      	pop	{r3, pc}

0002265c <rand_prio_high_vector_get>:
   2265c:	f7f8 be02 	b.w	1b264 <rand_prio_low_vector_get>

00022660 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   22660:	4668      	mov	r0, sp
   22662:	f020 0107 	bic.w	r1, r0, #7
   22666:	468d      	mov	sp, r1
   22668:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2266a:	f7e0 f8ff 	bl	286c <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   2266e:	f7f1 fce5 	bl	1403c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   22672:	f7f1 fdd7 	bl	14224 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   22676:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2267a:	4685      	mov	sp, r0
   2267c:	4770      	bx	lr

0002267e <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2267e:	4668      	mov	r0, sp
   22680:	f020 0107 	bic.w	r1, r0, #7
   22684:	468d      	mov	sp, r1
   22686:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   22688:	f7e0 f872 	bl	2770 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2268c:	f7f1 fcd6 	bl	1403c <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   22690:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   22694:	4685      	mov	sp, r0
   22696:	4770      	bx	lr

00022698 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   22698:	4668      	mov	r0, sp
   2269a:	f020 0107 	bic.w	r1, r0, #7
   2269e:	468d      	mov	sp, r1
   226a0:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   226a2:	f7e9 fdf8 	bl	c296 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   226a6:	f7f1 fcc9 	bl	1403c <_arch_isr_direct_pm>
   226aa:	f7f1 fdbb 	bl	14224 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   226ae:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   226b2:	4685      	mov	sp, r0
   226b4:	4770      	bx	lr

000226b6 <nrfx_clock_stop>:
	switch (domain) {
   226b6:	2801      	cmp	r0, #1
   226b8:	d101      	bne.n	226be <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   226ba:	f7e0 beef 	b.w	349c <mpsl_clock_hfclk_release>
}
   226be:	4770      	bx	lr

000226c0 <nrfx_clock_enable>:
}
   226c0:	4770      	bx	lr

000226c2 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   226c2:	f7e0 bd09 	b.w	30d8 <MPSL_IRQ_CLOCK_Handler>

000226c6 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   226c6:	4700      	bx	r0

000226c8 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   226c8:	f000 bc3f 	b.w	22f4a <z_impl_k_busy_wait>

000226cc <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   226cc:	f000 001f 	and.w	r0, r0, #31
   226d0:	0080      	lsls	r0, r0, #2
   226d2:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   226d6:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
   226da:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   226de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   226e2:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   226e6:	4770      	bx	lr

000226e8 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   226e8:	f7fa b850 	b.w	1c78c <_DoInit>

000226ec <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   226ec:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   226ee:	f7ff fffb 	bl	226e8 <SEGGER_RTT_Init>

	return 0;
}
   226f2:	2000      	movs	r0, #0
   226f4:	bd08      	pop	{r3, pc}

000226f6 <z_device_state_init>:
}
   226f6:	4770      	bx	lr

000226f8 <z_device_ready>:
	if (dev == NULL) {
   226f8:	b138      	cbz	r0, 2270a <z_device_ready+0x12>
	return dev->state->initialized && (dev->state->init_res == 0U);
   226fa:	68c3      	ldr	r3, [r0, #12]
   226fc:	8818      	ldrh	r0, [r3, #0]
   226fe:	f3c0 0008 	ubfx	r0, r0, #0, #9
   22702:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   22706:	4258      	negs	r0, r3
   22708:	4158      	adcs	r0, r3
}
   2270a:	4770      	bx	lr

0002270c <device_required_foreach>:
int device_required_foreach(const struct device *dev,
			    device_visitor_callback_t visitor_cb,
			    void *context)
{
	size_t handle_count = 0;
	const device_handle_t *handles = device_required_handles_get(dev, &handle_count);
   2270c:	6940      	ldr	r0, [r0, #20]
{
   2270e:	b470      	push	{r4, r5, r6}
   22710:	4613      	mov	r3, r2
   22712:	460d      	mov	r5, r1
	if (rv != NULL) {
   22714:	b960      	cbnz	r0, 22730 <device_required_foreach+0x24>
	size_t handle_count = 0;
   22716:	4601      	mov	r1, r0

	return device_visitor(handles, handle_count, visitor_cb, context);
   22718:	462a      	mov	r2, r5
}
   2271a:	bc70      	pop	{r4, r5, r6}
	return device_visitor(handles, handle_count, visitor_cb, context);
   2271c:	f7fa b8bc 	b.w	1c898 <device_visitor>
			++i;
   22720:	3101      	adds	r1, #1
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
   22722:	f830 4011 	ldrh.w	r4, [r0, r1, lsl #1]
   22726:	4434      	add	r4, r6
		while ((rv[i] != DEVICE_HANDLE_ENDS)
   22728:	b2a4      	uxth	r4, r4
   2272a:	4294      	cmp	r4, r2
   2272c:	d9f8      	bls.n	22720 <device_required_foreach+0x14>
   2272e:	e7f3      	b.n	22718 <device_required_foreach+0xc>
		size_t i = 0;
   22730:	2100      	movs	r1, #0
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
   22732:	f647 76ff 	movw	r6, #32767	; 0x7fff
		while ((rv[i] != DEVICE_HANDLE_ENDS)
   22736:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   2273a:	e7f2      	b.n	22722 <device_required_foreach+0x16>

0002273c <k_heap_init>:
{
   2273c:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2273e:	f100 040c 	add.w	r4, r0, #12
   22742:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   22746:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   22748:	f7fc b921 	b.w	1e98e <sys_heap_init>

0002274c <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2274c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22750:	b087      	sub	sp, #28
   22752:	4604      	mov	r4, r0
   22754:	460e      	mov	r6, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   22756:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   2275a:	4617      	mov	r7, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2275c:	f000 fbf9 	bl	22f52 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   22760:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   22764:	4605      	mov	r5, r0
   22766:	4688      	mov	r8, r1
	__asm__ volatile(
   22768:	f04f 0340 	mov.w	r3, #64	; 0x40
   2276c:	f3ef 8b11 	mrs	fp, BASEPRI
   22770:	f383 8812 	msr	BASEPRI_MAX, r3
   22774:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   22778:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2277c:	463a      	mov	r2, r7
   2277e:	4631      	mov	r1, r6
   22780:	4620      	mov	r0, r4
   22782:	f7fc f89c 	bl	1e8be <sys_heap_aligned_alloc>
   22786:	9005      	str	r0, [sp, #20]
		now = sys_clock_tick_get();
   22788:	f7fb fcfa 	bl	1e180 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2278c:	9b05      	ldr	r3, [sp, #20]
   2278e:	b13b      	cbz	r3, 227a0 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   22790:	f38b 8811 	msr	BASEPRI, fp
   22794:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   22798:	4618      	mov	r0, r3
   2279a:	b007      	add	sp, #28
   2279c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   227a0:	1a2a      	subs	r2, r5, r0
   227a2:	9202      	str	r2, [sp, #8]
   227a4:	eb68 0201 	sbc.w	r2, r8, r1
   227a8:	9203      	str	r2, [sp, #12]
   227aa:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   227ae:	2901      	cmp	r1, #1
   227b0:	f172 0200 	sbcs.w	r2, r2, #0
   227b4:	dbec      	blt.n	22790 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   227b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   227ba:	4659      	mov	r1, fp
   227bc:	e9cd 2300 	strd	r2, r3, [sp]
   227c0:	4648      	mov	r0, r9
   227c2:	4652      	mov	r2, sl
   227c4:	f7fb f99e 	bl	1db04 <z_pend_curr>
	__asm__ volatile(
   227c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   227cc:	f3ef 8b11 	mrs	fp, BASEPRI
   227d0:	f383 8812 	msr	BASEPRI_MAX, r3
   227d4:	f3bf 8f6f 	isb	sy
   227d8:	e7d0      	b.n	2277c <k_heap_aligned_alloc+0x30>

000227da <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   227da:	b538      	push	{r3, r4, r5, lr}
   227dc:	4604      	mov	r4, r0
   227de:	f04f 0340 	mov.w	r3, #64	; 0x40
   227e2:	f3ef 8511 	mrs	r5, BASEPRI
   227e6:	f383 8812 	msr	BASEPRI_MAX, r3
   227ea:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   227ee:	f7fc f82d 	bl	1e84c <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   227f2:	f104 000c 	add.w	r0, r4, #12
   227f6:	f000 fb34 	bl	22e62 <z_unpend_all>
   227fa:	b130      	cbz	r0, 2280a <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   227fc:	4629      	mov	r1, r5
   227fe:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   22802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   22806:	f7fb b823 	b.w	1d850 <z_reschedule>
	__asm__ volatile(
   2280a:	f385 8811 	msr	BASEPRI, r5
   2280e:	f3bf 8f6f 	isb	sy
}
   22812:	bd38      	pop	{r3, r4, r5, pc}

00022814 <k_mem_slab_init>:
{
   22814:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   22816:	2400      	movs	r4, #0
   22818:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2281a:	ea41 0402 	orr.w	r4, r1, r2
   2281e:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   22822:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   22826:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   22828:	d10c      	bne.n	22844 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   2282a:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2282c:	42a3      	cmp	r3, r4
   2282e:	d103      	bne.n	22838 <k_mem_slab_init+0x24>
   22830:	e9c0 0000 	strd	r0, r0, [r0]
}
   22834:	2000      	movs	r0, #0
}
   22836:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   22838:	6945      	ldr	r5, [r0, #20]
   2283a:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   2283c:	3401      	adds	r4, #1
		slab->free_list = p;
   2283e:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   22840:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   22842:	e7f3      	b.n	2282c <k_mem_slab_init+0x18>
		return -EINVAL;
   22844:	f06f 0015 	mvn.w	r0, #21
	return rc;
   22848:	e7f5      	b.n	22836 <k_mem_slab_init+0x22>

0002284a <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2284a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2284c:	4604      	mov	r4, r0
   2284e:	460d      	mov	r5, r1
	__asm__ volatile(
   22850:	f04f 0340 	mov.w	r3, #64	; 0x40
   22854:	f3ef 8611 	mrs	r6, BASEPRI
   22858:	f383 8812 	msr	BASEPRI_MAX, r3
   2285c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   22860:	6947      	ldr	r7, [r0, #20]
   22862:	b97f      	cbnz	r7, 22884 <k_mem_slab_free+0x3a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   22864:	f000 fae5 	bl	22e32 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   22868:	b160      	cbz	r0, 22884 <k_mem_slab_free+0x3a>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2286a:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2286c:	6142      	str	r2, [r0, #20]
   2286e:	f8c0 70b0 	str.w	r7, [r0, #176]	; 0xb0
			z_ready_thread(pending_thread);
   22872:	f000 fa6a 	bl	22d4a <z_ready_thread>
			z_reschedule(&slab->lock, key);
   22876:	4631      	mov	r1, r6
   22878:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2287c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   22880:	f7fa bfe6 	b.w	1d850 <z_reschedule>
	**(char ***) mem = slab->free_list;
   22884:	682b      	ldr	r3, [r5, #0]
   22886:	6962      	ldr	r2, [r4, #20]
   22888:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2288a:	682b      	ldr	r3, [r5, #0]
   2288c:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   2288e:	69a3      	ldr	r3, [r4, #24]
   22890:	3b01      	subs	r3, #1
   22892:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   22894:	f386 8811 	msr	BASEPRI, r6
   22898:	f3bf 8f6f 	isb	sy
}
   2289c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002289e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2289e:	f3ef 8005 	mrs	r0, IPSR
}
   228a2:	3800      	subs	r0, #0
   228a4:	bf18      	it	ne
   228a6:	2001      	movne	r0, #1
   228a8:	4770      	bx	lr

000228aa <k_thread_name_get>:
}
   228aa:	3078      	adds	r0, #120	; 0x78
   228ac:	4770      	bx	lr

000228ae <z_impl_k_thread_start>:
	z_sched_start(thread);
   228ae:	f7fb b8cd 	b.w	1da4c <z_sched_start>

000228b2 <z_impl_k_thread_stack_space_get>:
#error "Unsupported configuration for stack analysis"
#endif

int z_impl_k_thread_stack_space_get(const struct k_thread *thread,
				    size_t *unused_ptr)
{
   228b2:	b510      	push	{r4, lr}
	const uint8_t *start = (uint8_t *)thread->stack_info.start;
	size_t size = thread->stack_info.size;
   228b4:	e9d0 4227 	ldrd	r4, r2, [r0, #156]	; 0x9c
	size_t unused = 0;
   228b8:	2300      	movs	r3, #0
		 */
		checked_stack += 4;
		size -= 4;
	}

	for (size_t i = 0; i < size; i++) {
   228ba:	4293      	cmp	r3, r2
   228bc:	d102      	bne.n	228c4 <z_impl_k_thread_stack_space_get+0x12>
		} else {
			break;
		}
	}

	*unused_ptr = unused;
   228be:	600b      	str	r3, [r1, #0]

	return 0;
}
   228c0:	2000      	movs	r0, #0
   228c2:	bd10      	pop	{r4, pc}
		if ((checked_stack[i]) == 0xaaU) {
   228c4:	5ce0      	ldrb	r0, [r4, r3]
   228c6:	28aa      	cmp	r0, #170	; 0xaa
   228c8:	d1f9      	bne.n	228be <z_impl_k_thread_stack_space_get+0xc>
			unused++;
   228ca:	3301      	adds	r3, #1
	for (size_t i = 0; i < size; i++) {
   228cc:	e7f5      	b.n	228ba <z_impl_k_thread_stack_space_get+0x8>

000228ce <z_pm_save_idle_exit>:
{
   228ce:	b508      	push	{r3, lr}
	pm_system_resume();
   228d0:	f7f0 ff8e 	bl	137f0 <pm_system_resume>
}
   228d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   228d8:	f7ff bebb 	b.w	22652 <sys_clock_idle_exit>

000228dc <z_impl_k_msgq_peek>:
}
#include <syscalls/k_msgq_get_mrsh.c>
#endif

int z_impl_k_msgq_peek(struct k_msgq *msgq, void *data)
{
   228dc:	4603      	mov	r3, r0
   228de:	b510      	push	{r4, lr}
   228e0:	4608      	mov	r0, r1
	__asm__ volatile(
   228e2:	f04f 0240 	mov.w	r2, #64	; 0x40
   228e6:	f3ef 8411 	mrs	r4, BASEPRI
   228ea:	f382 8812 	msr	BASEPRI_MAX, r2
   228ee:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);

	if (msgq->used_msgs > 0U) {
   228f2:	6a1a      	ldr	r2, [r3, #32]
   228f4:	b14a      	cbz	r2, 2290a <z_impl_k_msgq_peek+0x2e>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   228f6:	689a      	ldr	r2, [r3, #8]
   228f8:	6999      	ldr	r1, [r3, #24]
   228fa:	f7fe fa4e 	bl	20d9a <memcpy>
		result = 0;
   228fe:	2000      	movs	r0, #0
	__asm__ volatile(
   22900:	f384 8811 	msr	BASEPRI, r4
   22904:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC(k_msgq, peek, msgq, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   22908:	bd10      	pop	{r4, pc}
		result = -ENOMSG;
   2290a:	f06f 0022 	mvn.w	r0, #34	; 0x22
   2290e:	e7f7      	b.n	22900 <z_impl_k_msgq_peek+0x24>

00022910 <z_impl_k_mutex_init>:
{
   22910:	4603      	mov	r3, r0
	mutex->owner = NULL;
   22912:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   22914:	e9c3 0002 	strd	r0, r0, [r3, #8]
   22918:	e9c3 3300 	strd	r3, r3, [r3]
}
   2291c:	4770      	bx	lr

0002291e <queue_insert>:
{
   2291e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22922:	4699      	mov	r9, r3
   22924:	4604      	mov	r4, r0
   22926:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2292a:	460d      	mov	r5, r1
   2292c:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2292e:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   22932:	f04f 0240 	mov.w	r2, #64	; 0x40
   22936:	f3ef 8711 	mrs	r7, BASEPRI
   2293a:	f382 8812 	msr	BASEPRI_MAX, r2
   2293e:	f3bf 8f6f 	isb	sy
	if (is_append) {
   22942:	b103      	cbz	r3, 22946 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   22944:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   22946:	4630      	mov	r0, r6
   22948:	f000 fa73 	bl	22e32 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2294c:	b160      	cbz	r0, 22968 <queue_insert+0x4a>
   2294e:	2400      	movs	r4, #0
   22950:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
   22954:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   22958:	f000 f9f7 	bl	22d4a <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2295c:	4630      	mov	r0, r6
   2295e:	4639      	mov	r1, r7
   22960:	f7fa ff76 	bl	1d850 <z_reschedule>
	return 0;
   22964:	2000      	movs	r0, #0
   22966:	e00c      	b.n	22982 <queue_insert+0x64>
	if (alloc) {
   22968:	f1b9 0f00 	cmp.w	r9, #0
   2296c:	d01b      	beq.n	229a6 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   2296e:	2108      	movs	r1, #8
   22970:	f7fb fd4a 	bl	1e408 <z_thread_aligned_alloc>
		if (anode == NULL) {
   22974:	b938      	cbnz	r0, 22986 <queue_insert+0x68>
	__asm__ volatile(
   22976:	f387 8811 	msr	BASEPRI, r7
   2297a:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2297e:	f06f 000b 	mvn.w	r0, #11
}
   22982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   22986:	2301      	movs	r3, #1
		anode->data = data;
   22988:	f8c0 8004 	str.w	r8, [r0, #4]
   2298c:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2298e:	6803      	ldr	r3, [r0, #0]
   22990:	f003 0203 	and.w	r2, r3, #3
   22994:	b95d      	cbnz	r5, 229ae <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   22996:	6823      	ldr	r3, [r4, #0]
   22998:	4313      	orrs	r3, r2
   2299a:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2299c:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2299e:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   229a0:	b973      	cbnz	r3, 229c0 <queue_insert+0xa2>
	list->tail = node;
   229a2:	6060      	str	r0, [r4, #4]
}
   229a4:	e00c      	b.n	229c0 <queue_insert+0xa2>
	node->next_and_flags = flags;
   229a6:	f8c8 9000 	str.w	r9, [r8]
}
   229aa:	4640      	mov	r0, r8
   229ac:	e7ef      	b.n	2298e <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   229ae:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   229b0:	f033 0303 	bics.w	r3, r3, #3
   229b4:	d110      	bne.n	229d8 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   229b6:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   229b8:	6862      	ldr	r2, [r4, #4]
   229ba:	b93a      	cbnz	r2, 229cc <queue_insert+0xae>
	list->head = node;
   229bc:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   229c0:	2104      	movs	r1, #4
   229c2:	f104 0010 	add.w	r0, r4, #16
   229c6:	f000 fc5a 	bl	2327e <z_handle_obj_poll_events>
   229ca:	e7c7      	b.n	2295c <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   229cc:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   229ce:	f003 0303 	and.w	r3, r3, #3
   229d2:	4303      	orrs	r3, r0
   229d4:	6013      	str	r3, [r2, #0]
   229d6:	e7e4      	b.n	229a2 <queue_insert+0x84>
   229d8:	4313      	orrs	r3, r2
   229da:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   229dc:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   229de:	f003 0303 	and.w	r3, r3, #3
   229e2:	4303      	orrs	r3, r0
   229e4:	602b      	str	r3, [r5, #0]
}
   229e6:	e7eb      	b.n	229c0 <queue_insert+0xa2>

000229e8 <z_queue_node_peek>:
{
   229e8:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   229ea:	4604      	mov	r4, r0
   229ec:	b130      	cbz	r0, 229fc <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   229ee:	6802      	ldr	r2, [r0, #0]
   229f0:	0793      	lsls	r3, r2, #30
   229f2:	d003      	beq.n	229fc <z_queue_node_peek+0x14>
		ret = anode->data;
   229f4:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   229f6:	b109      	cbz	r1, 229fc <z_queue_node_peek+0x14>
			k_free(anode);
   229f8:	f000 fc5c 	bl	232b4 <k_free>
}
   229fc:	4620      	mov	r0, r4
   229fe:	bd10      	pop	{r4, pc}

00022a00 <z_impl_k_queue_init>:
	list->head = NULL;
   22a00:	2300      	movs	r3, #0
	list->tail = NULL;
   22a02:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   22a06:	f100 0308 	add.w	r3, r0, #8
   22a0a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   22a0e:	f100 0310 	add.w	r3, r0, #16
   22a12:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   22a16:	4770      	bx	lr

00022a18 <k_queue_append>:
{
   22a18:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   22a1a:	2301      	movs	r3, #1
   22a1c:	9300      	str	r3, [sp, #0]
   22a1e:	2300      	movs	r3, #0
{
   22a20:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   22a22:	4619      	mov	r1, r3
   22a24:	f7ff ff7b 	bl	2291e <queue_insert>
}
   22a28:	b003      	add	sp, #12
   22a2a:	f85d fb04 	ldr.w	pc, [sp], #4

00022a2e <k_queue_prepend>:
{
   22a2e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   22a30:	2300      	movs	r3, #0
{
   22a32:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   22a34:	9300      	str	r3, [sp, #0]
   22a36:	4619      	mov	r1, r3
   22a38:	f7ff ff71 	bl	2291e <queue_insert>
}
   22a3c:	b003      	add	sp, #12
   22a3e:	f85d fb04 	ldr.w	pc, [sp], #4

00022a42 <k_queue_append_list>:
{
   22a42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22a46:	4605      	mov	r5, r0
   22a48:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   22a4a:	460c      	mov	r4, r1
   22a4c:	b391      	cbz	r1, 22ab4 <k_queue_append_list+0x72>
   22a4e:	b38a      	cbz	r2, 22ab4 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   22a50:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   22a54:	f04f 0340 	mov.w	r3, #64	; 0x40
   22a58:	f3ef 8811 	mrs	r8, BASEPRI
   22a5c:	f383 8812 	msr	BASEPRI_MAX, r3
   22a60:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   22a64:	4638      	mov	r0, r7
   22a66:	f000 f9e4 	bl	22e32 <z_unpend_first_thread>
   22a6a:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   22a6e:	b920      	cbnz	r0, 22a7a <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   22a70:	686b      	ldr	r3, [r5, #4]
   22a72:	b9cb      	cbnz	r3, 22aa8 <k_queue_append_list+0x66>
	list->head = node;
   22a74:	602c      	str	r4, [r5, #0]
	list->tail = node;
   22a76:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   22a78:	e00a      	b.n	22a90 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   22a7a:	6144      	str	r4, [r0, #20]
   22a7c:	f8c0 90b0 	str.w	r9, [r0, #176]	; 0xb0
	z_ready_thread(thread);
   22a80:	f000 f963 	bl	22d4a <z_ready_thread>
		head = *(void **)head;
   22a84:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   22a86:	4638      	mov	r0, r7
   22a88:	f000 f9d3 	bl	22e32 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   22a8c:	2c00      	cmp	r4, #0
   22a8e:	d1ee      	bne.n	22a6e <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   22a90:	2104      	movs	r1, #4
   22a92:	f105 0010 	add.w	r0, r5, #16
   22a96:	f000 fbf2 	bl	2327e <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   22a9a:	4638      	mov	r0, r7
   22a9c:	4641      	mov	r1, r8
   22a9e:	f7fa fed7 	bl	1d850 <z_reschedule>
	return 0;
   22aa2:	2000      	movs	r0, #0
}
   22aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22aa8:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22aaa:	f001 0103 	and.w	r1, r1, #3
   22aae:	430c      	orrs	r4, r1
   22ab0:	601c      	str	r4, [r3, #0]
}
   22ab2:	e7e0      	b.n	22a76 <k_queue_append_list+0x34>
		return -EINVAL;
   22ab4:	f06f 0015 	mvn.w	r0, #21
   22ab8:	e7f4      	b.n	22aa4 <k_queue_append_list+0x62>

00022aba <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   22aba:	b15a      	cbz	r2, 22ad4 <z_impl_k_sem_init+0x1a>
   22abc:	428a      	cmp	r2, r1
   22abe:	d309      	bcc.n	22ad4 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   22ac0:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   22ac4:	e9c0 1202 	strd	r1, r2, [r0, #8]
   22ac8:	e9c0 0000 	strd	r0, r0, [r0]
   22acc:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   22ad0:	2000      	movs	r0, #0
   22ad2:	4770      	bx	lr
		return -EINVAL;
   22ad4:	f06f 0015 	mvn.w	r0, #21
}
   22ad8:	4770      	bx	lr

00022ada <notify_queue_locked>:
	if (queue != NULL) {
   22ada:	b120      	cbz	r0, 22ae6 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   22adc:	2200      	movs	r2, #0
   22ade:	4611      	mov	r1, r2
   22ae0:	30c0      	adds	r0, #192	; 0xc0
   22ae2:	f000 b9ce 	b.w	22e82 <z_sched_wake>
}
   22ae6:	4770      	bx	lr

00022ae8 <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   22ae8:	68c3      	ldr	r3, [r0, #12]
{
   22aea:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   22aec:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   22af0:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   22af4:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   22af6:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   22af8:	d502      	bpl.n	22b00 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   22afa:	3010      	adds	r0, #16
   22afc:	f000 f9df 	bl	22ebe <z_abort_timeout>
}
   22b00:	4620      	mov	r0, r4
   22b02:	bd10      	pop	{r4, pc}

00022b04 <cancel_async_locked>:
{
   22b04:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22b06:	68c0      	ldr	r0, [r0, #12]
{
   22b08:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22b0a:	0784      	lsls	r4, r0, #30
   22b0c:	f3c0 0140 	ubfx	r1, r0, #1, #1
   22b10:	d416      	bmi.n	22b40 <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   22b12:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   22b16:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   22b18:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   22b1a:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   22b1c:	d510      	bpl.n	22b40 <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22b1e:	f8d2 00b8 	ldr.w	r0, [r2, #184]	; 0xb8
   22b22:	b168      	cbz	r0, 22b40 <cancel_async_locked+0x3c>
   22b24:	4283      	cmp	r3, r0
   22b26:	d11d      	bne.n	22b64 <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   22b28:	6818      	ldr	r0, [r3, #0]
   22b2a:	b999      	cbnz	r1, 22b54 <cancel_async_locked+0x50>
   22b2c:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
	list->head = node;
   22b30:	f8c2 00b8 	str.w	r0, [r2, #184]	; 0xb8
Z_GENLIST_REMOVE(slist, snode)
   22b34:	428b      	cmp	r3, r1
   22b36:	d101      	bne.n	22b3c <cancel_async_locked+0x38>
	list->tail = node;
   22b38:	f8c2 00bc 	str.w	r0, [r2, #188]	; 0xbc
	parent->next = child;
   22b3c:	2200      	movs	r2, #0
   22b3e:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   22b40:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   22b42:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   22b46:	bf1e      	ittt	ne
   22b48:	f042 0202 	orrne.w	r2, r2, #2
   22b4c:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   22b4e:	f002 000f 	andne.w	r0, r2, #15
}
   22b52:	bd10      	pop	{r4, pc}
   22b54:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   22b56:	f8d2 00bc 	ldr.w	r0, [r2, #188]	; 0xbc
   22b5a:	4283      	cmp	r3, r0
	list->tail = node;
   22b5c:	bf08      	it	eq
   22b5e:	f8c2 10bc 	streq.w	r1, [r2, #188]	; 0xbc
}
   22b62:	e7eb      	b.n	22b3c <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22b64:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22b66:	6800      	ldr	r0, [r0, #0]
   22b68:	e7db      	b.n	22b22 <cancel_async_locked+0x1e>

00022b6a <work_timeout>:
{
   22b6a:	b513      	push	{r0, r1, r4, lr}
   22b6c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22b70:	f3ef 8411 	mrs	r4, BASEPRI
   22b74:	f383 8812 	msr	BASEPRI_MAX, r3
   22b78:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   22b7c:	2300      	movs	r3, #0
   22b7e:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   22b80:	f850 3c04 	ldr.w	r3, [r0, #-4]
	*flagp &= ~BIT(bit);
   22b84:	f023 0208 	bic.w	r2, r3, #8
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   22b88:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   22b8a:	f840 2c04 	str.w	r2, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   22b8e:	d505      	bpl.n	22b9c <work_timeout+0x32>
		queue = dw->queue;
   22b90:	6983      	ldr	r3, [r0, #24]
   22b92:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   22b94:	a901      	add	r1, sp, #4
   22b96:	3810      	subs	r0, #16
   22b98:	f7fa fd1e 	bl	1d5d8 <submit_to_queue_locked>
	__asm__ volatile(
   22b9c:	f384 8811 	msr	BASEPRI, r4
   22ba0:	f3bf 8f6f 	isb	sy
}
   22ba4:	b002      	add	sp, #8
   22ba6:	bd10      	pop	{r4, pc}

00022ba8 <k_work_init>:
{
   22ba8:	b538      	push	{r3, r4, r5, lr}
   22baa:	4604      	mov	r4, r0
   22bac:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   22bae:	2210      	movs	r2, #16
   22bb0:	2100      	movs	r1, #0
   22bb2:	f7fe f8fd 	bl	20db0 <memset>
   22bb6:	6065      	str	r5, [r4, #4]
}
   22bb8:	bd38      	pop	{r3, r4, r5, pc}

00022bba <k_work_submit_to_queue>:
{
   22bba:	b537      	push	{r0, r1, r2, r4, r5, lr}
   22bbc:	9001      	str	r0, [sp, #4]
   22bbe:	4608      	mov	r0, r1
	__asm__ volatile(
   22bc0:	f04f 0340 	mov.w	r3, #64	; 0x40
   22bc4:	f3ef 8511 	mrs	r5, BASEPRI
   22bc8:	f383 8812 	msr	BASEPRI_MAX, r3
   22bcc:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   22bd0:	a901      	add	r1, sp, #4
   22bd2:	f7fa fd01 	bl	1d5d8 <submit_to_queue_locked>
   22bd6:	4604      	mov	r4, r0
	__asm__ volatile(
   22bd8:	f385 8811 	msr	BASEPRI, r5
   22bdc:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   22be0:	2800      	cmp	r0, #0
   22be2:	dd04      	ble.n	22bee <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   22be4:	f7fb f8f6 	bl	1ddd4 <z_impl_k_is_preempt_thread>
   22be8:	b108      	cbz	r0, 22bee <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   22bea:	f7fb f845 	bl	1dc78 <z_impl_k_yield>
}
   22bee:	4620      	mov	r0, r4
   22bf0:	b003      	add	sp, #12
   22bf2:	bd30      	pop	{r4, r5, pc}

00022bf4 <k_work_init_delayable>:
{
   22bf4:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   22bf6:	2230      	movs	r2, #48	; 0x30
{
   22bf8:	4604      	mov	r4, r0
   22bfa:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   22bfc:	2100      	movs	r1, #0
   22bfe:	f7fe f8d7 	bl	20db0 <memset>
   22c02:	f44f 7380 	mov.w	r3, #256	; 0x100
   22c06:	6065      	str	r5, [r4, #4]
   22c08:	60e3      	str	r3, [r4, #12]
}
   22c0a:	bd38      	pop	{r3, r4, r5, pc}

00022c0c <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   22c0c:	b538      	push	{r3, r4, r5, lr}
   22c0e:	4604      	mov	r4, r0
	__asm__ volatile(
   22c10:	f04f 0340 	mov.w	r3, #64	; 0x40
   22c14:	f3ef 8511 	mrs	r5, BASEPRI
   22c18:	f383 8812 	msr	BASEPRI_MAX, r3
   22c1c:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   22c20:	f7ff ff62 	bl	22ae8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   22c24:	4620      	mov	r0, r4
   22c26:	f7ff ff6d 	bl	22b04 <cancel_async_locked>
	__asm__ volatile(
   22c2a:	f385 8811 	msr	BASEPRI, r5
   22c2e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   22c32:	bd38      	pop	{r3, r4, r5, pc}

00022c34 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   22c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22c36:	4604      	mov	r4, r0
   22c38:	460d      	mov	r5, r1
	__asm__ volatile(
   22c3a:	f04f 0340 	mov.w	r3, #64	; 0x40
   22c3e:	f3ef 8711 	mrs	r7, BASEPRI
   22c42:	f383 8812 	msr	BASEPRI_MAX, r3
   22c46:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   22c4a:	68c3      	ldr	r3, [r0, #12]
   22c4c:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   22c50:	2b00      	cmp	r3, #0
   22c52:	bf14      	ite	ne
   22c54:	2601      	movne	r6, #1
   22c56:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   22c58:	d009      	beq.n	22c6e <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   22c5a:	f7ff ff45 	bl	22ae8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   22c5e:	4620      	mov	r0, r4
   22c60:	f7ff ff50 	bl	22b04 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   22c64:	4629      	mov	r1, r5
   22c66:	4620      	mov	r0, r4
   22c68:	f7fa fc98 	bl	1d59c <cancel_sync_locked>
   22c6c:	4603      	mov	r3, r0
	__asm__ volatile(
   22c6e:	f387 8811 	msr	BASEPRI, r7
   22c72:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   22c76:	b13b      	cbz	r3, 22c88 <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   22c78:	f04f 32ff 	mov.w	r2, #4294967295
   22c7c:	f04f 33ff 	mov.w	r3, #4294967295
   22c80:	f105 0008 	add.w	r0, r5, #8
   22c84:	f7fa fba8 	bl	1d3d8 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   22c88:	4630      	mov	r0, r6
   22c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022c8c <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   22c8c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   22c90:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22c92:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22c94:	2300      	movs	r3, #0
	node->prev = NULL;
   22c96:	e9c0 3300 	strd	r3, r3, [r0]
}
   22c9a:	4770      	bx	lr

00022c9c <unpend_thread_no_timeout>:
{
   22c9c:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   22c9e:	f7ff fff5 	bl	22c8c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   22ca2:	7b43      	ldrb	r3, [r0, #13]
   22ca4:	f023 0302 	bic.w	r3, r3, #2
   22ca8:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   22caa:	2300      	movs	r3, #0
   22cac:	6083      	str	r3, [r0, #8]
}
   22cae:	bd08      	pop	{r3, pc}

00022cb0 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   22cb0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   22cb4:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   22cb8:	4283      	cmp	r3, r0
		return b2 - b1;
   22cba:	bf14      	ite	ne
   22cbc:	1ac0      	subne	r0, r0, r3
	return 0;
   22cbe:	2000      	moveq	r0, #0
}
   22cc0:	4770      	bx	lr

00022cc2 <z_unpend_thread_no_timeout>:
{
   22cc2:	b508      	push	{r3, lr}
	__asm__ volatile(
   22cc4:	f04f 0340 	mov.w	r3, #64	; 0x40
   22cc8:	f3ef 8111 	mrs	r1, BASEPRI
   22ccc:	f383 8812 	msr	BASEPRI_MAX, r3
   22cd0:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   22cd4:	f7ff ffe2 	bl	22c9c <unpend_thread_no_timeout>
	__asm__ volatile(
   22cd8:	f381 8811 	msr	BASEPRI, r1
   22cdc:	f3bf 8f6f 	isb	sy
}
   22ce0:	bd08      	pop	{r3, pc}

00022ce2 <z_unpend_thread>:
{
   22ce2:	b510      	push	{r4, lr}
	__asm__ volatile(
   22ce4:	f04f 0340 	mov.w	r3, #64	; 0x40
   22ce8:	f3ef 8411 	mrs	r4, BASEPRI
   22cec:	f383 8812 	msr	BASEPRI_MAX, r3
   22cf0:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   22cf4:	f7ff ffd2 	bl	22c9c <unpend_thread_no_timeout>
	__asm__ volatile(
   22cf8:	f384 8811 	msr	BASEPRI, r4
   22cfc:	f3bf 8f6f 	isb	sy
}
   22d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22d04:	3018      	adds	r0, #24
   22d06:	f000 b8da 	b.w	22ebe <z_abort_timeout>

00022d0a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   22d0a:	4603      	mov	r3, r0
   22d0c:	b920      	cbnz	r0, 22d18 <z_reschedule_irqlock+0xe>
   22d0e:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   22d12:	b90a      	cbnz	r2, 22d18 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   22d14:	f7f1 b9c0 	b.w	14098 <arch_swap>
   22d18:	f383 8811 	msr	BASEPRI, r3
   22d1c:	f3bf 8f6f 	isb	sy
}
   22d20:	4770      	bx	lr

00022d22 <z_reschedule_unlocked>:
	__asm__ volatile(
   22d22:	f04f 0340 	mov.w	r3, #64	; 0x40
   22d26:	f3ef 8011 	mrs	r0, BASEPRI
   22d2a:	f383 8812 	msr	BASEPRI_MAX, r3
   22d2e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   22d32:	f7ff bfea 	b.w	22d0a <z_reschedule_irqlock>

00022d36 <z_priq_dumb_best>:
{
   22d36:	4603      	mov	r3, r0
	return list->head == list;
   22d38:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22d3a:	4283      	cmp	r3, r0
   22d3c:	d003      	beq.n	22d46 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   22d3e:	2800      	cmp	r0, #0
   22d40:	bf38      	it	cc
   22d42:	2000      	movcc	r0, #0
   22d44:	4770      	bx	lr
	struct k_thread *thread = NULL;
   22d46:	2000      	movs	r0, #0
}
   22d48:	4770      	bx	lr

00022d4a <z_ready_thread>:
{
   22d4a:	b510      	push	{r4, lr}
   22d4c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22d50:	f3ef 8411 	mrs	r4, BASEPRI
   22d54:	f383 8812 	msr	BASEPRI_MAX, r3
   22d58:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   22d5c:	f7fa fe3e 	bl	1d9dc <ready_thread>
	__asm__ volatile(
   22d60:	f384 8811 	msr	BASEPRI, r4
   22d64:	f3bf 8f6f 	isb	sy
}
   22d68:	bd10      	pop	{r4, pc}

00022d6a <z_thread_timeout>:
{
   22d6a:	b510      	push	{r4, lr}
   22d6c:	4601      	mov	r1, r0
	__asm__ volatile(
   22d6e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22d72:	f3ef 8411 	mrs	r4, BASEPRI
   22d76:	f383 8812 	msr	BASEPRI_MAX, r3
   22d7a:	f3bf 8f6f 	isb	sy
		if (!killed) {
   22d7e:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   22d82:	f013 0f28 	tst.w	r3, #40	; 0x28
   22d86:	d10d      	bne.n	22da4 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   22d88:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   22d8c:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   22d8e:	b10b      	cbz	r3, 22d94 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   22d90:	f7ff ff84 	bl	22c9c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   22d94:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   22d98:	f023 0314 	bic.w	r3, r3, #20
   22d9c:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   22da0:	f7fa fe1c 	bl	1d9dc <ready_thread>
	__asm__ volatile(
   22da4:	f384 8811 	msr	BASEPRI, r4
   22da8:	f3bf 8f6f 	isb	sy
}
   22dac:	bd10      	pop	{r4, pc}

00022dae <add_to_waitq_locked>:
{
   22dae:	b538      	push	{r3, r4, r5, lr}
   22db0:	4604      	mov	r4, r0
   22db2:	460d      	mov	r5, r1
	unready_thread(thread);
   22db4:	f7fa fe68 	bl	1da88 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   22db8:	7b63      	ldrb	r3, [r4, #13]
   22dba:	f043 0302 	orr.w	r3, r3, #2
   22dbe:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   22dc0:	b1b5      	cbz	r5, 22df0 <add_to_waitq_locked+0x42>
	return list->head == list;
   22dc2:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   22dc4:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22dc6:	429d      	cmp	r5, r3
   22dc8:	bf08      	it	eq
   22dca:	2300      	moveq	r3, #0
   22dcc:	2b00      	cmp	r3, #0
   22dce:	bf38      	it	cc
   22dd0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22dd2:	b19b      	cbz	r3, 22dfc <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
   22dd4:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   22dd8:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   22ddc:	4291      	cmp	r1, r2
   22dde:	d008      	beq.n	22df2 <add_to_waitq_locked+0x44>
		return b2 - b1;
   22de0:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   22de2:	2a00      	cmp	r2, #0
   22de4:	dd05      	ble.n	22df2 <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
   22de6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   22de8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   22dec:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22dee:	605c      	str	r4, [r3, #4]
}
   22df0:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   22df2:	686a      	ldr	r2, [r5, #4]
   22df4:	4293      	cmp	r3, r2
   22df6:	d001      	beq.n	22dfc <add_to_waitq_locked+0x4e>
   22df8:	681b      	ldr	r3, [r3, #0]
   22dfa:	e7ea      	b.n	22dd2 <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
   22dfc:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   22dfe:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   22e02:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22e04:	606c      	str	r4, [r5, #4]
   22e06:	e7f3      	b.n	22df0 <add_to_waitq_locked+0x42>

00022e08 <z_unpend1_no_timeout>:
{
   22e08:	b510      	push	{r4, lr}
	__asm__ volatile(
   22e0a:	f04f 0340 	mov.w	r3, #64	; 0x40
   22e0e:	f3ef 8411 	mrs	r4, BASEPRI
   22e12:	f383 8812 	msr	BASEPRI_MAX, r3
   22e16:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   22e1a:	f7ff ff8c 	bl	22d36 <z_priq_dumb_best>
		if (thread != NULL) {
   22e1e:	4601      	mov	r1, r0
   22e20:	b108      	cbz	r0, 22e26 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   22e22:	f7ff ff3b 	bl	22c9c <unpend_thread_no_timeout>
	__asm__ volatile(
   22e26:	f384 8811 	msr	BASEPRI, r4
   22e2a:	f3bf 8f6f 	isb	sy
}
   22e2e:	4608      	mov	r0, r1
   22e30:	bd10      	pop	{r4, pc}

00022e32 <z_unpend_first_thread>:
{
   22e32:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   22e34:	f04f 0340 	mov.w	r3, #64	; 0x40
   22e38:	f3ef 8511 	mrs	r5, BASEPRI
   22e3c:	f383 8812 	msr	BASEPRI_MAX, r3
   22e40:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   22e44:	f7ff ff77 	bl	22d36 <z_priq_dumb_best>
		if (thread != NULL) {
   22e48:	4604      	mov	r4, r0
   22e4a:	b120      	cbz	r0, 22e56 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   22e4c:	f7ff ff26 	bl	22c9c <unpend_thread_no_timeout>
   22e50:	3018      	adds	r0, #24
   22e52:	f000 f834 	bl	22ebe <z_abort_timeout>
	__asm__ volatile(
   22e56:	f385 8811 	msr	BASEPRI, r5
   22e5a:	f3bf 8f6f 	isb	sy
}
   22e5e:	4620      	mov	r0, r4
   22e60:	bd38      	pop	{r3, r4, r5, pc}

00022e62 <z_unpend_all>:
{
   22e62:	b538      	push	{r3, r4, r5, lr}
   22e64:	4605      	mov	r5, r0
	int need_sched = 0;
   22e66:	2000      	movs	r0, #0
	return list->head == list;
   22e68:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22e6a:	42a5      	cmp	r5, r4
   22e6c:	d000      	beq.n	22e70 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   22e6e:	b904      	cbnz	r4, 22e72 <z_unpend_all+0x10>
}
   22e70:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   22e72:	4620      	mov	r0, r4
   22e74:	f7ff ff35 	bl	22ce2 <z_unpend_thread>
		z_ready_thread(thread);
   22e78:	4620      	mov	r0, r4
   22e7a:	f7ff ff66 	bl	22d4a <z_ready_thread>
		need_sched = 1;
   22e7e:	2001      	movs	r0, #1
   22e80:	e7f2      	b.n	22e68 <z_unpend_all+0x6>

00022e82 <z_sched_wake>:
{
   22e82:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   22e84:	f04f 0340 	mov.w	r3, #64	; 0x40
   22e88:	f3ef 8511 	mrs	r5, BASEPRI
   22e8c:	f383 8812 	msr	BASEPRI_MAX, r3
   22e90:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   22e94:	f7ff ff4f 	bl	22d36 <z_priq_dumb_best>
		if (thread != NULL) {
   22e98:	4604      	mov	r4, r0
   22e9a:	b158      	cbz	r0, 22eb4 <z_sched_wake+0x32>
   22e9c:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
   22ea0:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   22ea2:	f7ff fefb 	bl	22c9c <unpend_thread_no_timeout>
   22ea6:	3018      	adds	r0, #24
   22ea8:	f000 f809 	bl	22ebe <z_abort_timeout>
			ready_thread(thread);
   22eac:	4620      	mov	r0, r4
   22eae:	f7fa fd95 	bl	1d9dc <ready_thread>
			ret = true;
   22eb2:	2001      	movs	r0, #1
	__asm__ volatile(
   22eb4:	f385 8811 	msr	BASEPRI, r5
   22eb8:	f3bf 8f6f 	isb	sy
}
   22ebc:	bd38      	pop	{r3, r4, r5, pc}

00022ebe <z_abort_timeout>:
{
   22ebe:	b510      	push	{r4, lr}
	__asm__ volatile(
   22ec0:	f04f 0240 	mov.w	r2, #64	; 0x40
   22ec4:	f3ef 8411 	mrs	r4, BASEPRI
   22ec8:	f382 8812 	msr	BASEPRI_MAX, r2
   22ecc:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   22ed0:	6803      	ldr	r3, [r0, #0]
   22ed2:	b13b      	cbz	r3, 22ee4 <z_abort_timeout+0x26>
			remove_timeout(to);
   22ed4:	f7fb f81a 	bl	1df0c <remove_timeout>
			ret = 0;
   22ed8:	2000      	movs	r0, #0
	__asm__ volatile(
   22eda:	f384 8811 	msr	BASEPRI, r4
   22ede:	f3bf 8f6f 	isb	sy
}
   22ee2:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   22ee4:	f06f 0015 	mvn.w	r0, #21
   22ee8:	e7f7      	b.n	22eda <z_abort_timeout+0x1c>

00022eea <z_get_next_timeout_expiry>:
{
   22eea:	b510      	push	{r4, lr}
	__asm__ volatile(
   22eec:	f04f 0340 	mov.w	r3, #64	; 0x40
   22ef0:	f3ef 8411 	mrs	r4, BASEPRI
   22ef4:	f383 8812 	msr	BASEPRI_MAX, r3
   22ef8:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   22efc:	f7fb f820 	bl	1df40 <next_timeout>
	__asm__ volatile(
   22f00:	f384 8811 	msr	BASEPRI, r4
   22f04:	f3bf 8f6f 	isb	sy
}
   22f08:	bd10      	pop	{r4, pc}

00022f0a <z_set_timeout_expiry>:
{
   22f0a:	b570      	push	{r4, r5, r6, lr}
   22f0c:	4604      	mov	r4, r0
   22f0e:	460d      	mov	r5, r1
	__asm__ volatile(
   22f10:	f04f 0340 	mov.w	r3, #64	; 0x40
   22f14:	f3ef 8611 	mrs	r6, BASEPRI
   22f18:	f383 8812 	msr	BASEPRI_MAX, r3
   22f1c:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   22f20:	f7fb f80e 	bl	1df40 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   22f24:	2801      	cmp	r0, #1
   22f26:	dd05      	ble.n	22f34 <z_set_timeout_expiry+0x2a>
   22f28:	42a0      	cmp	r0, r4
   22f2a:	db03      	blt.n	22f34 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   22f2c:	4629      	mov	r1, r5
   22f2e:	4620      	mov	r0, r4
   22f30:	f7f8 f8f8 	bl	1b124 <sys_clock_set_timeout>
	__asm__ volatile(
   22f34:	f386 8811 	msr	BASEPRI, r6
   22f38:	f3bf 8f6f 	isb	sy
}
   22f3c:	bd70      	pop	{r4, r5, r6, pc}

00022f3e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   22f3e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   22f40:	f7fb f91e 	bl	1e180 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   22f44:	bd08      	pop	{r3, pc}

00022f46 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   22f46:	f7fb b91b 	b.w	1e180 <sys_clock_tick_get>

00022f4a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   22f4a:	b108      	cbz	r0, 22f50 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   22f4c:	f7f1 be48 	b.w	14be0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   22f50:	4770      	bx	lr

00022f52 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   22f52:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22f54:	1c4b      	adds	r3, r1, #1
   22f56:	bf08      	it	eq
   22f58:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   22f5c:	4604      	mov	r4, r0
   22f5e:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22f60:	d013      	beq.n	22f8a <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22f62:	ea54 0105 	orrs.w	r1, r4, r5
   22f66:	d103      	bne.n	22f70 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   22f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   22f6c:	f7fb b908 	b.w	1e180 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   22f70:	f06f 0101 	mvn.w	r1, #1
   22f74:	1a0a      	subs	r2, r1, r0
   22f76:	f04f 31ff 	mov.w	r1, #4294967295
   22f7a:	eb61 0305 	sbc.w	r3, r1, r5
   22f7e:	2a00      	cmp	r2, #0
   22f80:	f173 0100 	sbcs.w	r1, r3, #0
   22f84:	db02      	blt.n	22f8c <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   22f86:	4610      	mov	r0, r2
   22f88:	4619      	mov	r1, r3
}
   22f8a:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   22f8c:	f7fb f8f8 	bl	1e180 <sys_clock_tick_get>
   22f90:	2c01      	cmp	r4, #1
   22f92:	f175 0300 	sbcs.w	r3, r5, #0
   22f96:	bfbc      	itt	lt
   22f98:	2401      	movlt	r4, #1
   22f9a:	2500      	movlt	r5, #0
   22f9c:	1820      	adds	r0, r4, r0
   22f9e:	eb45 0101 	adc.w	r1, r5, r1
   22fa2:	e7f2      	b.n	22f8a <sys_clock_timeout_end_calc+0x38>

00022fa4 <k_timer_init>:
	timer->status = 0U;
   22fa4:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   22fa6:	e9c0 1208 	strd	r1, r2, [r0, #32]
   22faa:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   22fae:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   22fb2:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   22fb6:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   22fb8:	6343      	str	r3, [r0, #52]	; 0x34
}
   22fba:	4770      	bx	lr

00022fbc <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   22fbc:	b510      	push	{r4, lr}
   22fbe:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   22fc0:	f7ff ff7d 	bl	22ebe <z_abort_timeout>

	if (inactive) {
   22fc4:	b9b0      	cbnz	r0, 22ff4 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   22fc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22fc8:	b10b      	cbz	r3, 22fce <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   22fca:	4620      	mov	r0, r4
   22fcc:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   22fce:	f104 0018 	add.w	r0, r4, #24
   22fd2:	f7ff ff19 	bl	22e08 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   22fd6:	b168      	cbz	r0, 22ff4 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   22fd8:	f7ff feb7 	bl	22d4a <z_ready_thread>
	__asm__ volatile(
   22fdc:	f04f 0340 	mov.w	r3, #64	; 0x40
   22fe0:	f3ef 8011 	mrs	r0, BASEPRI
   22fe4:	f383 8812 	msr	BASEPRI_MAX, r3
   22fe8:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   22fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   22ff0:	f7ff be8b 	b.w	22d0a <z_reschedule_irqlock>
   22ff4:	bd10      	pop	{r4, pc}

00022ff6 <clear_event_registrations>:
	while (num_events--) {
   22ff6:	2314      	movs	r3, #20
{
   22ff8:	b570      	push	{r4, r5, r6, lr}
   22ffa:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   22ffe:	2400      	movs	r4, #0
   23000:	2601      	movs	r6, #1
	while (num_events--) {
   23002:	4281      	cmp	r1, r0
   23004:	d100      	bne.n	23008 <clear_event_registrations+0x12>
}
   23006:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   23008:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   2300c:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   23010:	f003 031f 	and.w	r3, r3, #31
   23014:	2b08      	cmp	r3, #8
   23016:	d80d      	bhi.n	23034 <clear_event_registrations+0x3e>
   23018:	fa06 f303 	lsl.w	r3, r6, r3
   2301c:	f413 7f8b 	tst.w	r3, #278	; 0x116
   23020:	d008      	beq.n	23034 <clear_event_registrations+0x3e>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   23022:	f851 3c14 	ldr.w	r3, [r1, #-20]
   23026:	b12b      	cbz	r3, 23034 <clear_event_registrations+0x3e>
	sys_dnode_t *const prev = node->prev;
   23028:	f851 5c10 	ldr.w	r5, [r1, #-16]
	prev->next = next;
   2302c:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   2302e:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   23030:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   23034:	f382 8811 	msr	BASEPRI, r2
   23038:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2303c:	f04f 0340 	mov.w	r3, #64	; 0x40
   23040:	f3ef 8211 	mrs	r2, BASEPRI
   23044:	f383 8812 	msr	BASEPRI_MAX, r3
   23048:	f3bf 8f6f 	isb	sy
   2304c:	3914      	subs	r1, #20
   2304e:	e7d8      	b.n	23002 <clear_event_registrations+0xc>

00023050 <add_event>:
{
   23050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23052:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   23054:	e9d0 2300 	ldrd	r2, r3, [r0]
   23058:	4290      	cmp	r0, r2
   2305a:	4604      	mov	r4, r0
   2305c:	460d      	mov	r5, r1
   2305e:	d105      	bne.n	2306c <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   23060:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   23062:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   23066:	601d      	str	r5, [r3, #0]
	list->tail = node;
   23068:	6065      	str	r5, [r4, #4]
}
   2306a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2306c:	2b00      	cmp	r3, #0
   2306e:	d0f7      	beq.n	23060 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   23070:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   23072:	b100      	cbz	r0, 23076 <add_event+0x26>
   23074:	3860      	subs	r0, #96	; 0x60
   23076:	b107      	cbz	r7, 2307a <add_event+0x2a>
   23078:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2307a:	4639      	mov	r1, r7
   2307c:	f7ff fe18 	bl	22cb0 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   23080:	2800      	cmp	r0, #0
   23082:	dced      	bgt.n	23060 <add_event+0x10>
	return list->head == list;
   23084:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23086:	42b4      	cmp	r4, r6
   23088:	d0ea      	beq.n	23060 <add_event+0x10>
   2308a:	2e00      	cmp	r6, #0
   2308c:	bf38      	it	cc
   2308e:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   23090:	2e00      	cmp	r6, #0
   23092:	d0e5      	beq.n	23060 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   23094:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   23096:	b101      	cbz	r1, 2309a <add_event+0x4a>
   23098:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2309a:	4638      	mov	r0, r7
   2309c:	f7ff fe08 	bl	22cb0 <z_sched_prio_cmp>
   230a0:	2800      	cmp	r0, #0
   230a2:	dd05      	ble.n	230b0 <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   230a4:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   230a6:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   230aa:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   230ac:	6075      	str	r5, [r6, #4]
			return;
   230ae:	e7dc      	b.n	2306a <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   230b0:	6863      	ldr	r3, [r4, #4]
   230b2:	42b3      	cmp	r3, r6
   230b4:	d0d4      	beq.n	23060 <add_event+0x10>
   230b6:	6836      	ldr	r6, [r6, #0]
   230b8:	e7ea      	b.n	23090 <add_event+0x40>

000230ba <register_events>:
{
   230ba:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   230be:	2500      	movs	r5, #0
{
   230c0:	468b      	mov	fp, r1
   230c2:	4614      	mov	r4, r2
   230c4:	461f      	mov	r7, r3
   230c6:	4682      	mov	sl, r0
	int events_registered = 0;
   230c8:	462e      	mov	r6, r5
	event->poller = NULL;
   230ca:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   230cc:	455d      	cmp	r5, fp
   230ce:	db02      	blt.n	230d6 <register_events+0x1c>
}
   230d0:	4630      	mov	r0, r6
   230d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   230d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   230da:	f3ef 8911 	mrs	r9, BASEPRI
   230de:	f383 8812 	msr	BASEPRI_MAX, r3
   230e2:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   230e6:	f89a 300d 	ldrb.w	r3, [sl, #13]
   230ea:	f003 031f 	and.w	r3, r3, #31
   230ee:	3b01      	subs	r3, #1
   230f0:	2b07      	cmp	r3, #7
   230f2:	d80f      	bhi.n	23114 <register_events+0x5a>
   230f4:	e8df f003 	tbb	[pc, r3]
   230f8:	0a0e041e 	.word	0x0a0e041e
   230fc:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   23100:	f8da 3010 	ldr.w	r3, [sl, #16]
   23104:	689b      	ldr	r3, [r3, #8]
   23106:	b12b      	cbz	r3, 23114 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   23108:	2302      	movs	r3, #2
   2310a:	e020      	b.n	2314e <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2310c:	f8da 3010 	ldr.w	r3, [sl, #16]
   23110:	681b      	ldr	r3, [r3, #0]
   23112:	bb8b      	cbnz	r3, 23178 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   23114:	bb47      	cbnz	r7, 23168 <register_events+0xae>
   23116:	7823      	ldrb	r3, [r4, #0]
   23118:	b333      	cbz	r3, 23168 <register_events+0xae>
	switch (event->type) {
   2311a:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2311e:	f003 031f 	and.w	r3, r3, #31
   23122:	3b01      	subs	r3, #1
   23124:	2b07      	cmp	r3, #7
   23126:	d830      	bhi.n	2318a <register_events+0xd0>
   23128:	e8df f003 	tbb	[pc, r3]
   2312c:	282f2833 	.word	0x282f2833
   23130:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   23134:	f8da 3010 	ldr.w	r3, [sl, #16]
   23138:	689b      	ldr	r3, [r3, #8]
   2313a:	2b00      	cmp	r3, #0
   2313c:	d0ea      	beq.n	23114 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   2313e:	2301      	movs	r3, #1
   23140:	e005      	b.n	2314e <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   23142:	f8da 3010 	ldr.w	r3, [sl, #16]
   23146:	6a1b      	ldr	r3, [r3, #32]
   23148:	2b00      	cmp	r3, #0
   2314a:	d0e3      	beq.n	23114 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2314c:	2310      	movs	r3, #16
	event->state |= state;
   2314e:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   23152:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   23156:	f3c2 3145 	ubfx	r1, r2, #13, #6
   2315a:	430b      	orrs	r3, r1
   2315c:	f363 3252 	bfi	r2, r3, #13, #6
   23160:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   23164:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   23168:	f389 8811 	msr	BASEPRI, r9
   2316c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   23170:	3501      	adds	r5, #1
   23172:	f10a 0a14 	add.w	sl, sl, #20
   23176:	e7a9      	b.n	230cc <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   23178:	2304      	movs	r3, #4
   2317a:	e7e8      	b.n	2314e <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2317c:	f8da 0010 	ldr.w	r0, [sl, #16]
   23180:	4622      	mov	r2, r4
   23182:	4651      	mov	r1, sl
   23184:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   23186:	f7ff ff63 	bl	23050 <add_event>
	event->poller = poller;
   2318a:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   2318e:	3601      	adds	r6, #1
   23190:	e7ea      	b.n	23168 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   23192:	f8da 0010 	ldr.w	r0, [sl, #16]
   23196:	4622      	mov	r2, r4
   23198:	4651      	mov	r1, sl
   2319a:	e7f4      	b.n	23186 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2319c:	f8da 0010 	ldr.w	r0, [sl, #16]
   231a0:	4622      	mov	r2, r4
   231a2:	4651      	mov	r1, sl
   231a4:	3024      	adds	r0, #36	; 0x24
   231a6:	e7ee      	b.n	23186 <register_events+0xcc>

000231a8 <signal_poll_event>:
{
   231a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   231ac:	6884      	ldr	r4, [r0, #8]
{
   231ae:	4605      	mov	r5, r0
   231b0:	460e      	mov	r6, r1
	if (poller != NULL) {
   231b2:	b144      	cbz	r4, 231c6 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   231b4:	7863      	ldrb	r3, [r4, #1]
   231b6:	2b01      	cmp	r3, #1
   231b8:	d138      	bne.n	2322c <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   231ba:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   231be:	f013 0302 	ands.w	r3, r3, #2
   231c2:	d10a      	bne.n	231da <signal_poll_event+0x32>
		poller->is_polling = false;
   231c4:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   231c6:	68eb      	ldr	r3, [r5, #12]
   231c8:	f3c3 3145 	ubfx	r1, r3, #13, #6
   231cc:	430e      	orrs	r6, r1
	event->poller = NULL;
   231ce:	2000      	movs	r0, #0
	event->state |= state;
   231d0:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   231d4:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   231d6:	60eb      	str	r3, [r5, #12]
	return retcode;
   231d8:	e00d      	b.n	231f6 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   231da:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   231de:	f04f 31ff 	mov.w	r1, #4294967295
   231e2:	f06f 0001 	mvn.w	r0, #1
   231e6:	428b      	cmp	r3, r1
   231e8:	bf08      	it	eq
   231ea:	4282      	cmpeq	r2, r0
   231ec:	d105      	bne.n	231fa <signal_poll_event+0x52>
		poller->is_polling = false;
   231ee:	2300      	movs	r3, #0
   231f0:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   231f2:	f06f 000a 	mvn.w	r0, #10
}
   231f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   231fa:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   231fe:	4640      	mov	r0, r8
   23200:	f7ff fd6f 	bl	22ce2 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   23204:	2e08      	cmp	r6, #8
   23206:	bf0c      	ite	eq
   23208:	f06f 0303 	mvneq.w	r3, #3
   2320c:	2300      	movne	r3, #0
   2320e:	6523      	str	r3, [r4, #80]	; 0x50
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   23210:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   23214:	06db      	lsls	r3, r3, #27
   23216:	d102      	bne.n	2321e <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   23218:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2321c:	b10f      	cbz	r7, 23222 <signal_poll_event+0x7a>
		poller->is_polling = false;
   2321e:	2300      	movs	r3, #0
   23220:	e7d0      	b.n	231c4 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   23222:	4640      	mov	r0, r8
   23224:	f7ff fd91 	bl	22d4a <z_ready_thread>
		poller->is_polling = false;
   23228:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2322a:	e7cc      	b.n	231c6 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2322c:	2b02      	cmp	r3, #2
   2322e:	d1f6      	bne.n	2321e <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   23230:	7823      	ldrb	r3, [r4, #0]
   23232:	2b00      	cmp	r3, #0
   23234:	d0c7      	beq.n	231c6 <signal_poll_event+0x1e>
   23236:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2323a:	2f00      	cmp	r7, #0
   2323c:	d0f4      	beq.n	23228 <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2323e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   23242:	f1a4 0914 	sub.w	r9, r4, #20
   23246:	f104 0014 	add.w	r0, r4, #20
   2324a:	f7ff fe38 	bl	22ebe <z_abort_timeout>
		twork->poll_result = 0;
   2324e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   23252:	4649      	mov	r1, r9
   23254:	4638      	mov	r0, r7
   23256:	f7ff fcb0 	bl	22bba <k_work_submit_to_queue>
		poller->is_polling = false;
   2325a:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2325e:	e7b2      	b.n	231c6 <signal_poll_event+0x1e>

00023260 <k_poll_event_init>:
{
   23260:	b510      	push	{r4, lr}
	event->type = type;
   23262:	04d2      	lsls	r2, r2, #19
   23264:	0209      	lsls	r1, r1, #8
   23266:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   2326a:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   2326e:	430a      	orrs	r2, r1
   23270:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   23272:	2400      	movs	r4, #0
	event->type = type;
   23274:	430a      	orrs	r2, r1
	event->obj = obj;
   23276:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   2327a:	6084      	str	r4, [r0, #8]
}
   2327c:	bd10      	pop	{r4, pc}

0002327e <z_handle_obj_poll_events>:
{
   2327e:	4603      	mov	r3, r0
	return list->head == list;
   23280:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   23282:	4283      	cmp	r3, r0
   23284:	d008      	beq.n	23298 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   23286:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2328a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2328c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2328e:	2300      	movs	r3, #0
	node->prev = NULL;
   23290:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   23294:	f7ff bf88 	b.w	231a8 <signal_poll_event>
}
   23298:	4770      	bx	lr

0002329a <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   2329a:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2329c:	e9c0 0000 	strd	r0, r0, [r0]
   232a0:	6083      	str	r3, [r0, #8]
}
   232a2:	4770      	bx	lr

000232a4 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   232a4:	2300      	movs	r3, #0
   232a6:	6083      	str	r3, [r0, #8]
}
   232a8:	4770      	bx	lr

000232aa <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
   232aa:	6883      	ldr	r3, [r0, #8]
   232ac:	600b      	str	r3, [r1, #0]
	*result = sig->result;
   232ae:	68c3      	ldr	r3, [r0, #12]
   232b0:	6013      	str	r3, [r2, #0]
}
   232b2:	4770      	bx	lr

000232b4 <k_free>:
	if (ptr != NULL) {
   232b4:	b120      	cbz	r0, 232c0 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   232b6:	1f01      	subs	r1, r0, #4
   232b8:	f850 0c04 	ldr.w	r0, [r0, #-4]
   232bc:	f7ff ba8d 	b.w	227da <k_heap_free>
}
   232c0:	4770      	bx	lr

000232c2 <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   232c2:	4770      	bx	lr

000232c4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   232c4:	4770      	bx	lr
	...

000232c8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   232c8:	f7f8 bdbe 	b.w	1be48 <SystemInit>
